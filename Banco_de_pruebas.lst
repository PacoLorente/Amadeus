# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 45 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 00 84        	defw Badsat
  9+  83C2 32 84        	defw Badsat2
 10+  83C4 64 84        	defw Badsat3
 11+  83C6 96 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00           	db 0
 25+  83D3
 26+  83D3 05           	db %00000101
 27+  83D4 00 83        	defw Indice_Amadeus
 28+  83D6 00 00        	defw 0
 29+  83D8 CF 50        	defw $50cf
 30+  83DA 00 00 00     	db 0,0,0
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0
 33+  83E1
 34+  83E1 00 00        	db 0,0
 35+  83E3 00 00        	defw 0
 36+  83E5 00           	db 0
 37+  83E6 00 00        	db 0,0
 38+  83E8 00 00        	defw 0
 39+  83EA 00           	db 0
 40+  83EB
 41+  83EB 00 00        	db 0,0
 42+  83ED
 43+  83ED 00 00 00 00  	defw 0,0
 44+  83F1 00 00 00     	db 0,0,0
 45+  83F4
 46+  83F4 00 00        	defw 0
 47+  83F6 00 00        	defw 0
 48+  83F8 00           	db 0
 49+  83F9 00 00        	defw 0
 50+  83FB 00           	db 0
 51+  83FC
 52+  83FC 00 00 00 00  	defw 0,0
 53+  8400
 54+  8400              ; ---------- ---------- ---------- ---------- ----------
 55+  8400
 56+  8400 02 02        Badsat db 2,2
 57+  8402 00 00        	defw 0
 58+  8404 00           	db 0
 59+  8405
 60+  8405 06           	db %00000110
 61+  8406 80 81        	defw Indice_Badsat_der
 62+  8408 00 00        	defw 0
 63+  840A A1 47        	defw $47a1
 64+  840C 00 00 00     	db 0,0,0
 65+  840F
 66+  840F 01 01 01 02  	db 1,1,1,2
 67+  8413
 68+  8413 00 00        	db 0,0
 69+  8415 00 00        	defw 0
 70+  8417 00           	db 0
 71+  8418 00 00        	db 0,0
 72+  841A 00 00        	defw 0
 73+  841C 00           	db 0
 74+  841D
 75+  841D 00 00        	db 0,0
 76+  841F
 77+  841F EF 8F 00 00  	defw Indice_mov_Badsat,0
 78+  8423 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 79+  8426
 80+  8426 00 00        	defw 0
 81+  8428 00 00        	defw 0
 82+  842A 00           	db 0
 83+  842B 00 00        	defw 0
 84+  842D 00           	db 0
 85+  842E
 86+  842E 00 00 00 00  	defw 0,0
 87+  8432
 88+  8432              ; ---------- ---------- ---------- ---------- ----------
 89+  8432
 90+  8432 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 91+  8434 00 00        	defw 0                                            ; Posicion_actual
 92+  8436 00           	db 0                                              ; CTRL_DESPLZ
 93+  8437
 94+  8437 02           	db %00000010
 95+  8438 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 96+  843A 00 00        	defw 0                                            ; Puntero_DESPLZ
 97+  843C 61 47        	defw $4761                                        ; Posicion_inicio
 98+  843E 00 00 00     	db 0,0,0
 99+  8441
100+  8441 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
101+  8445
102+  8445 00 00        	db 0,0
103+  8447 00 00        	defw 0
104+  8449 00           	db 0
105+  844A 00 00        	db 0,0
106+  844C 00 00        	defw 0
107+  844E 00           	db 0
108+  844F
109+  844F 00 00        	db 0,0
110+  8451
111+  8451 F1 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
112+  8455 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
113+  8458
114+  8458 00 00        	defw 0
115+  845A 00 00        	defw 0
116+  845C 00           	db 0
117+  845D 00 00        	defw 0
118+  845F 00           	db 0
119+  8460
120+  8460 00 00 00 00  	defw 0,0
121+  8464
122+  8464              ; ---------- ---------- ---------- ---------- ----------
123+  8464
124+  8464 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
125+  8466 00 00        	defw 0                                            ; Posicion_actual
126+  8468 00           	db 0                                              ; CTRL_DESPLZ
127+  8469
128+  8469 04           	db %00000100
129+  846A 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
130+  846C 00 00        	defw 0                                            ; Puntero_DESPLZ
131+  846E 7E 47        	defw $477e                                        ; Posicion_inicio
132+  8470 00 00 00     	db 0,0,0
133+  8473
134+  8473 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
135+  8477
136+  8477 00 00        	db 0,0
137+  8479 00 00        	defw 0
138+  847B 00           	db 0
139+  847C 00 00        	db 0,0
140+  847E 00 00        	defw 0
141+  8480 00           	db 0
142+  8481
143+  8481 00 00        	db 0,0
144+  8483
145+  8483 F3 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
146+  8487 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
147+  848A
148+  848A 00 00        	defw 0
149+  848C 00 00        	defw 0
150+  848E 00           	db 0
151+  848F 00 00        	defw 0
152+  8491 00           	db 0
153+  8492
154+  8492 00 00 00 00  	defw 0,0
155+  8496
156+  8496              ; ---------- ---------- ---------- ---------- ----------
157+  8496
158+  8496 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
159+  8498 00 00        	defw 0                                            ; Posicion_actual
160+  849A 00           	db 0                                              ; CTRL_DESPLZ
161+  849B
162+  849B 01           	db %00000001
163+  849C 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
164+  849E 00 00        	defw 0                                            ; Puntero_DESPLZ
165+  84A0 BE 47        	defw $47be                                        ; Posicion_inicio
166+  84A2 00 00 00     	db 0,0,0
167+  84A5
168+  84A5 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
169+  84A9
170+  84A9 00 00        	db 0,0
171+  84AB 00 00        	defw 0
172+  84AD 00           	db 0
173+  84AE 00 00        	db 0,0
174+  84B0 00 00        	defw 0
175+  84B2 00           	db 0
176+  84B3
177+  84B3 00 00        	db 0,0
178+  84B5
179+  84B5 F5 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
180+  84B9 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
181+  84BC
182+  84BC 00 00        	defw 0
183+  84BE 00 00        	defw 0
184+  84C0 00           	db 0
185+  84C1 00 00        	defw 0
186+  84C3 00           	db 0
187+  84C4
188+  84C4 00 00 00 00  	defw 0,0
189+  84C8
# file closed: Base_de_datos_Sprites.asm
 21   84C8
 22   84C8              ; ******************************************************************************************************************************************************************************************
 23   84C8              ; Constantes.
 24   84C8              ; ******************************************************************************************************************************************************************************************
 25   84C8              ;
 26   84C8              ; 8/11/22
 27   84C8              ;
 28   84C8              ; Constantes generales.
 29   84C8              ;
 30   84C8
 31   84C8              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84C8              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84C8              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84C8              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84C8              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84C8
 37   84C8              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84C8              ;                               				        ; De momento situamos este almacén en $7000.
 39   84C8
 40   84C8
 41   84C8              ; ******************************************************************************************************************************************************************************************
 42   84C8              ; Variables.
 43   84C8              ; ******************************************************************************************************************************************************************************************
 44   84C8              ;
 45   84C8              ; 10/11/22
 46   84C8              ;
 47   84C8              ; Variables de DRAW. (Motor principal).
 48   84C8              ;
 49   84C8
 50   84C8 02           Filas db 2												; Filas. [DRAW]
 51   84C9 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84CA 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84CC 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84CE 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84CF              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84CF              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84CF              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84CF 06           Attr db %00000110										; Atributos de la entidad:
 59   84D0
 60   84D0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84D0              ;
 62   84D0              ;	COLORES: 0 ..... NEGRO
 63   84D0              ;    		 1 ..... AZUL
 64   84D0              ; 			 2 ..... ROJO
 65   84D0              ;			 3 ..... MAGENTA
 66   84D0              ; 			 4 ..... VERDE
 67   84D0              ; 			 5 ..... CIAN
 68   84D0              ;			 6 ..... AMARILLO
 69   84D0              ; 			 7 ..... BLANCO
 70   84D0
 71   84D0 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84D2 00 00        Puntero_DESPLZ defw 0
 73   84D4 A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84D6 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84D9
 78   84D9              ; Variables de objeto. (Características).
 79   84D9
 80   84D9 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84DA 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84DB 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84DC 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84DD
 85   84DD 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84DF 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84E1 00 00        	defw 0
 88   84E3 00           	db 0
 89   84E4 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84E6 00 00        	defw 0
 91   84E8 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84EA 00           	db 0
 93   84EB
 94   84EB              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84EB
 96   84EB 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84EC              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84EC              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84EC              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84EC              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84EC              ;
102   84EC              ; 														DESCRIPCIÖN:
103   84EC              ;
104   84EC              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84EC              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84EC              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84EC              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84EC              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84EC              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84EC              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84EC              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84EC              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84EC              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84EC              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84EC              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84EC              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84EC              ;
118   84EC              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84EC              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84EC              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84EC
122   84EC 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84ED
124   84ED              ; Movimiento.
125   84ED
126   84ED EF 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84EF 00 00        Puntero_mov defw 0
128   84F1 00           Contador_db_mov db 0
129   84F2 00           Incrementa_puntero db 0
130   84F3 00           Repetimos_db db 0
131   84F4
132   84F4
133   84F4              ; Variables de funcionamiento. [DRAW].
134   84F4
135   84F4 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   84F6 00           Columnas db 0
137   84F7 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   84F9              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   84F9 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   84FA
141   84FA
142   84FA              ; Cajas. Almacenes.
143   84FA
144   84FA 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   84FC 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   84FE
147   84FE              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   84FE
149   84FE              ; Gestión de ENTIDADES.
150   84FE
151   84FE 00 00        Puntero_store_entidades defw 0
152   8500 00 00        Puntero_restore_entidades defw 0
153   8502 00 00        Indice_restore defw 0
154   8504
155   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   8504
157   8504 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   8505 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8506              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8506              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8506              ;														; _ (Numero_de_malotes)="0".
162   8506 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8508              ;														; _variable para almacenar lo posición del puntero_
164   8508              ; 														; _de pila, SP.
165   8508 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   850A              ;														; La utiliza la rutina [Extrae_foto_registros].
167   850A 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   850C              ;														; _el snapshot de los registros de la siguiente entidad.
169   850C              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   850C
171   850C              ; Gestión de FRAMES.
172   850C
173   850C 00           Switch db 0
174   850D
175   850D              ; Variables de Raster y localización en pantalla.
176   850D
177   850D 00 FF        Temp_Raster defw $ff00
178   850F
179   850F              ; Rutina principal *************************************************************************************************************************************************************************
180   850F              ;
181   850F              ;	14/11/22
182   850F
183   850F 31 FF FF     START ld sp,$ffff
184   8512
185   8512 3E A0        	ld a,$a0
186   8514 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8516 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8518 F3           	DI
189   8519
190   8519 3E 01        	ld a,1
191   851B D3 FE        	out ($fe),a
192   851D
193   851D 3E 07        	ld a,%00000111
194   851F CD 45 8C     	call Cls
195   8522
196   8522              ;	call Pinta_FILAS
197   8522
198   8522 CD 83 86     	call Pulsa_ENTER
199   8525
200   8525              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   8525              ;   Inicialmente tengo cargado a Amadeus en el engine.
202   8525              ;	Pintamos el resto de entidades:
203   8525
204   8525 CD F6 85     	call Inicia_punteros_de_entidades
205   8528 21 04 85     	ld hl,Numero_de_entidades
206   852B 46           	ld b,(hl)
207   852C
208   852C C5           1 push bc  												; Guardo el contador de entidades.
209   852D CD 25 86      	call Inicia_Puntero_objeto
210   8530 CD DA 86     	call Draw
211   8533 CD A0 7F     	call Guarda_foto_registros
212   8536 CD 42 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8539 C1           	pop bc
214   853A 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   853C
216   853C              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   853C
218   853C CD F6 85     	call Inicia_punteros_de_entidades
219   853F CD 71 86     	call Restore_Primera_entidad
220   8542
221   8542 FB           4 ei
222   8543 18 FD        	jr 4B
223   8545
224   8545              ; -----------------------------------------------------------------------------------
225   8545
226   8545              Frame
227   8545
228   8545              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
229   8545              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
230   8545
231   8545 3E 07            ld a,7
232   8547 D3 FE            out ($fe),a
233   8549
234   8549 CD 0C 86     	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
235   854C CD E6 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
236   854F
237   854F 3E 01            ld a,1
238   8551 D3 FE            out ($fe),a
239   8553
240   8553              ; ----------------------------------------------------------------------
241   8553
242   8553 21 00 70     	ld hl,Album_de_fotos
243   8556 22 0A 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
244   8559              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
245   8559 3A 04 85         ld a,(Numero_de_entidades)
246   855C 47               ld b,a
247   855D
248   855D C5           2 push bc
249   855E
250   855E CD 81 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
251   8561
252   8561 3A EB 84      	ld a,(Ctrl_0)
253   8564 CB 67        	bit 4,a
254   8566 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
255   8568
256   8568              ; ---------
257   8568
258   8568 CD B7 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   856B
260   856B 21 EB 84     	ld hl,Ctrl_0
261   856E CB A6            res 4,(hl)
262   8570
263   8570 CD 42 86     1 call Store_Restore_entidades
264   8573
265   8573 C1           	pop bc
266   8574 10 E7        	djnz 2B
267   8576
268   8576 CD F6 85     	call Inicia_punteros_de_entidades
269   8579 CD 71 86     	call Restore_Primera_entidad
270   857C
271   857C 3E 00        	ld a,0
272   857E D3 FE        	out ($fe),a
273   8580
274   8580 C9           	ret
275   8581
276   8581              ; --------------------------------------------------------------------------------------------------------------
277   8581              ;
278   8581              Mov_obj
279   8581
280   8581              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
281   8581
282   8581              ; 	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
283   8581 CD C7 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
284   8584
285   8584 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
286   8586 32 EC 84     	ld (Obj_dibujado),a
287   8589
288   8589              ; Movemos Amadeus o enemigos...
289   8589
290   8589 3A EB 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
291   858C CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
292   858E C4 97 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
293   8591
294   8591 3A EB 84     	ld a,(Ctrl_0)
295   8594 CB 77        	bit 6,a
296   8596 CC F7 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
297   8599
298   8599 3A EB 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
299   859C CB 67        	bit 4,a
300   859E C8           	ret z
301   859F
302   859F              ; ---------
303   859F
304   859F CD C7 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
305   85A2 CD DE 85         call Repone_borrar
306   85A5              ;	call Draw											; Preparamos las variables para borrar.
307   85A5
308   85A5 CD B6 89     	call Prepara_draw
309   85A8 CD F0 88     	call calcula_CColumnass
310   85AB CD 27 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
311   85AE CD 7C 89     	call Define_rutina_de_impresion
312   85B1
313   85B1 CD A0 7F     	call Guarda_foto_registros
314   85B4
315   85B4 18 FE        	jr $
316   85B6
317   85B6 C9           	ret
318   85B7
319   85B7              ; --------------------------------------------------------------------------------------------------------------
320   85B7              ;
321   85B7 AF           Borra_Pinta_obj xor a
322   85B8 32 EC 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
323   85BB CD EA 85     	call Repone_pintar
324   85BE              ;	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
325   85BE
326   85BE 18 FE        	jr $
327   85C0
328   85C0 CD DA 86     	call Draw
329   85C3 CD A0 7F     	call Guarda_foto_registros
330   85C6 C9           	ret
331   85C7
332   85C7              ; --------------------------------------------------------------------------------------------------------------
333   85C7
334   85C7 21 C8 84     Prepara_var_pintado_borrado	ld hl,Filas
335   85CA 3A EC 84     	ld a,(Obj_dibujado)
336   85CD A7           	and a
337   85CE 28 05        	jr z,1F
338   85D0 11 E4 84     	ld de,Variables_de_pintado
339   85D3 18 03        	jr 2F
340   85D5 11 DD 84     1 ld de,Variables_de_borrado
341   85D8 01 07 00     2 ld bc,7
342   85DB ED B0        	ldir
343   85DD C9           	ret
344   85DE
345   85DE 21 DD 84     Repone_borrar ld hl,Variables_de_borrado
346   85E1 11 C8 84     	ld de,Filas
347   85E4 01 07 00     	ld bc,7
348   85E7 ED B0        	ldir
349   85E9 C9           	ret
350   85EA
351   85EA 21 E4 84     Repone_pintar ld hl,Variables_de_pintado
352   85ED 11 C8 84     	ld de,Filas
353   85F0 01 07 00     	ld bc,7
354   85F3 ED B0        	ldir
355   85F5 C9           	ret
356   85F6
357   85F6              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
358   85F6              ;	ld (Caja_de_BORRADO),hl
359   85F6              ;	ret
360   85F6
361   85F6              ; *************************************************************************************************************************************************************
362   85F6              ;
363   85F6              ; 8/1/23
364   85F6              ;
365   85F6              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
366   85F6              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
367   85F6              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
368   85F6
369   85F6              ; Destruye HL y DE !!!!!
370   85F6
371   85F6 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
372   85F9 CD 1F 86         call Extrae_address
373   85FC 22 FE 84         ld (Puntero_store_entidades),hl
374   85FF 21 C2 83     	ld hl,Indice_de_entidades+2
375   8602 22 02 85     	ld (Indice_restore),hl
376   8605 CD 1F 86     	call Extrae_address
377   8608 22 00 85     	ld (Puntero_restore_entidades),hl
378   860B C9               ret
379   860C
380   860C              ; -------------------------------------------------------------------------------------------------------------
381   860C              ;
382   860C              ; 7/1/23
383   860C              ;
384   860C
385   860C 2A 0A 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
386   860F AF           	xor a
387   8610 67           	ld h,a
388   8611 7D           	ld a,l
389   8612 D6 06        1 sub 6
390   8614 28 03        	jr z,2F
391   8616 24           	inc h
392   8617 18 F9        	jr 1B
393   8619 24           2 inc h
394   861A 7C           	ld a,h
395   861B 32 05 85     	ld (Numero_de_malotes),a
396   861E C9           	ret
397   861F
398   861F              ; *************************************************************************************************************************************************************
399   861F              ;
400   861F              ; 20/10/22
401   861F              ;
402   861F              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
403   861F              ;
404   861F              ; Destruye el puntero y DE !!!!!
405   861F
406   861F 5E           Extrae_address ld e,(hl)
407   8620 23           	inc hl
408   8621 56           	ld d,(hl)
409   8622 2B           	dec hl
410   8623 EB           	ex de,hl
411   8624 C9           	ret
412   8625
413   8625              ; *************************************************************************************************************************************************************
414   8625              ;
415   8625              ;	21/9/22
416   8625              ;
417   8625              ;   Destruye HL y BC !!!!!,
418   8625
419   8625 2A D0 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
420   8628 22 D2 84     	ld (Puntero_DESPLZ),hl
421   862B CD 1F 86     	call Extrae_address
422   862E 22 CC 84     	ld (Puntero_objeto),hl
423   8631
424   8631              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
425   8631
426   8631 21 10 83     	ld hl,Amadeus
427   8634 ED 4B CC 84  	ld bc,(Puntero_objeto)
428   8638 B7 ED 42     	sub hl,bc
429   863B C0           	ret nz
430   863C
431   863C 21 EB 84     	ld hl,Ctrl_0
432   863F CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
433   8641
434   8641 C9            	ret 												; _de nuestra nave en los extremos.
435   8642
436   8642              ; *************************************************************************************************************************************************************
437   8642              ;
438   8642              ;	8/1/23
439   8642              ;
440   8642              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
441   8642              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
442   8642
443   8642              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
444   8642              ;	_de la 2ª y 3ª entidad respectivamente.
445   8642
446   8642
447   8642
448   8642              Store_Restore_entidades
449   8642
450   8642 E5           	push hl
451   8643 D5           	push de
452   8644 C5            	push bc
453   8645
454   8645              ;	STORE !!!!!
455   8645
456   8645 21 C8 84     	ld hl,Filas
457   8648 ED 5B FE 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
458   864C 01 36 00     	ld bc,54
459   864F ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
460   8651
461   8651              ;	Incrementa STORE y ejecuta RESTORE !!!!!
462   8651
463   8651 2A 00 85     	ld hl,(Puntero_restore_entidades)
464   8654 22 FE 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
465   8657 11 C8 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
466   865A 01 36 00     	ld bc,54
467   865D ED B0        	ldir
468   865F
469   865F              ;	Incrementa RESTORE !!!!!
470   865F
471   865F 2A 02 85         ld hl,(Indice_restore)
472   8662 23           	inc hl
473   8663 23           	inc hl
474   8664 22 02 85     	ld (Indice_restore),hl
475   8667 CD 1F 86         call Extrae_address
476   866A 22 00 85         ld (Puntero_restore_entidades),hl
477   866D
478   866D C1           	pop bc
479   866E D1           	pop de
480   866F E1           	pop hl
481   8670
482   8670 C9           	ret
483   8671
484   8671              ; **************************************************************************************************
485   8671              ;
486   8671              ;	29/10/22
487   8671              ;
488   8671              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
489   8671
490   8671 E5           Restore_Primera_entidad push hl
491   8672 D5           	push de
492   8673 C5            	push bc
493   8674 2A FE 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
494   8677 11 C8 84     	ld de,Filas
495   867A 01 36 00     	ld bc,54
496   867D ED B0        	ldir
497   867F C1           	pop bc
498   8680 D1           	pop de
499   8681 E1           	pop hl
500   8682 C9           	ret
501   8683
502   8683              ; *************************************************************************************************************************************************************
503   8683              ;
504   8683              ; Teclado.
505   8683
506   8683 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
507   8685 DB FE        	in a,($fe)
508   8687 E6 01        	and $01
509   8689 28 02        	jr z,1f
510   868B 18 F6        	jr Pulsa_ENTER
511   868D C9           1 ret
512   868E
513   868E              ; **************************************************************************************************
514   868E              ;
515   868E              ; Temporización.
516   868E
517   868E              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
518   868E              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
519   868E              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
520   868E              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
521   868E
522   868E              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
523   868E              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
524   868E              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
525   868E
526   868E              ; A partir de $4f61 no hace falta DELAY.
527   868E
528   868E              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
529   868E
530   868E 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
531   8691 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
532   8692 78           	LD A,B
533   8693 A7           	AND A
534   8694 20 FB        	JR NZ,wait
535   8696 C9           	RET
536   8697
537   8697              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
538   8697              ;
539   8697              ;	21/4/22
540   8697
541   8697              Movimiento_Amadeus
542   8697
543   8697 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
544   8699 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
545   869B E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
546   869D CC BE 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
547   86A0 3E F7        	ld a,$f7
548   86A2 DB FE        	in a,($fe)
549   86A4 E6 01        	and $01
550   86A6 C8           	ret z
551   86A7 3E F7        	ld a,$f7
552   86A9 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
553   86AB E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
554   86AD CC AF 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
555   86B0 C9               ret
556   86B1
557   86B1              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
558   86B1
559   86B1              ; Pinta indicadores de FILAS. ------------------------------------------------------
560   86B1
561   86B1 21 10 40     Pinta_FILAS ld hl,$4010
562   86B4              ;	ld b,9
563   86B4              ;2 push hl
564   86B4              ;	push bc
565   86B4 06 BF        	ld b,$bf
566   86B6 36 80        1 ld (hl),%10000000
567   86B8 CD C2 89     	call NextScan
568   86BB 10 F9        	djnz 1B
569   86BD              ;	pop bc
570   86BD              ;	pop hl
571   86BD              ;	inc l
572   86BD              ;	djnz 2B
573   86BD
574   86BD 06 03        	ld b,3
575   86BF 21 00 47         ld hl,$4700
576   86C2 CD C8 86     3 call Bucle_1
577   86C5 10 FB            djnz 3B
578   86C7 C9               ret
579   86C8
580   86C8 C5           Bucle_1 push bc
581   86C9 E5                   push hl
582   86CA D1                   pop de
583   86CB 13                   inc de
584   86CC 01 FF 00             ld bc,255
585   86CF 36 FF                ld (hl),255
586   86D1 ED B0                ldir
587   86D3 23                   inc hl
588   86D4 3E 07                ld a,7
589   86D6 84                   add a,h
590   86D7 67                   ld h,a
591   86D8 C1                   pop bc
592   86D9 C9                   ret
593   86DA
594   86DA              ; ---------------------------------------------------------------
595   86DA
596   86DA              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86DA              ; ******************************************************************************************************************************************************************************************
  2+  86DA              ;
  3+  86DA              ; 17/08/22
  4+  86DA              ;
  5+  86DA              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86DA
  7+  86DA CD B6 89     Draw call Prepara_draw
  8+  86DD 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86DE A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86DF 28 05        	jr z,2F
 11+  86E1 3A D6 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86E4 18 0C        	jr 1F
 13+  86E6 2A D4 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86E9 22 CA 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86EC CD 7D 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86EF              ;													; _la esquina superior izquierda de la pantalla.
 17+  86EF CD 79 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86F2 3A EB 84     1 ld a,(Ctrl_0)
 19+  86F5 CB 6F        	bit 5,a
 20+  86F7 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  86F9
 22+  86F9 CD 11 87     	call Comprueba_limite_horizontal
 23+  86FC CD A4 87     	call Comprueba_limite_vertical
 24+  86FF
 25+  86FF              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  86FF
 27+  86FF CD F0 88     3 call calcula_CColumnass
 28+  8702 CD 27 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8705 CD 7C 89     	call Define_rutina_de_impresion
 30+  8708
 31+  8708 3A EB 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  870B CB AF        	res 5,a											; _a ser de utilidad.
 33+  870D 32 EB 84     	ld (Ctrl_0),a
 34+  8710
 35+  8710 C9           	ret
 36+  8711
 37+  8711              ; *******************************************************************************************************************************************************************************************
 38+  8711              ;	23/8/22
 39+  8711              ;
 40+  8711              ; 	Comprueba_limite_horizontal.
 41+  8711              ;
 42+  8711
 43+  8711 3A EC 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  8714 A7           	and a
 45+  8715 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  8716
 47+  8716 3A EB 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8719 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  871B 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  871D
 51+  871D E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  871F 32 EB 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  8722 18 09            jr 6F
 54+  8724 CB 5F        1 bit 3,a
 55+  8726 28 0D            jr z,2F
 56+  8728 E6 F7            and $f7
 57+  872A 32 EB 84         ld (Ctrl_0),a
 58+  872D CD 7D 88     6 call Inicializacion
 59+  8730 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  8731 08           	ex af,af
 61+  8732 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  8733 18 56            jr 5F
 63+  8735 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  8736
 65+  8736              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  8736              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  8736
 68+  8736 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8737 2A F7 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  873A CD 0D 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  873D 67           	ld h,a
 72+  873E EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  873F CD 0D 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  8742 67           	ld h,a
 75+  8743 A7           	and a
 76+  8744 ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  8746
 78+  8746 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8747 FE 02        	cp 2
 80+  8749 38 1C        	jr c,3F
 81+  874B 28 1A        	jr z,3F
 82+  874D
 83+  874D 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  874E 28 21            jr z,7F
 85+  8750 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  8752              ;	ld e,0
 87+  8752 E1           	pop hl
 88+  8753
 89+  8753              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8753              ; _para indicar con E="2" en caso necesario.
 91+  8753
 92+  8753 E5               push hl
 93+  8754 C5               push bc
 94+  8755
 95+  8755 CD 0D 8C     	call calcula_tercio
 96+  8758 FE 01        	cp 1
 97+  875A 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  875C
 99+  875C CD 8C 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  875F 28 26            jr z,9F
101+  8761 38 24            jr c,9F
102+  8763 1E 00        11 ld e,0
103+  8765 18 22            jr 8F
104+  8767
105+  8767 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8768 28 07        	jr z, 7F
107+  876A 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  876C 1E 00         	ld e,0
109+  876E E1           	pop hl
110+  876F 18 04        	jr 4F
111+  8771 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  8773 18 15            jr 10F
113+  8775
114+  8775              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  8775              ; _para indicar con E="2" en caso necesario.
116+  8775
117+  8775 E5           4 push hl
118+  8776 C5               push bc
119+  8777
120+  8777 CD 0D 8C     	call calcula_tercio
121+  877A FE 01        	cp 1
122+  877C 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  877E
124+  877E CD 8C 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  8781 28 04            jr z,9F
126+  8783 30 02            jr nc,9F
127+  8785 18 02        	jr 8F
128+  8787 1E 02        9 ld e,2
129+  8789 C1           8 pop bc
130+  878A E1           10 pop hl
131+  878B C9           5 ret
132+  878C
133+  878C              ; --------------------
134+  878C              ;
135+  878C              ; 25/08/22
136+  878C
137+  878C CD 0D 8C     Comprueba_centro call calcula_tercio
138+  878F 67               ld h,a
139+  8790 08           	ex af,af
140+  8791 FE 02        	cp 2
141+  8793 38 07        	jr c,1F
142+  8795 28 05        	jr z,1F
143+  8797 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  879A 18 03        	jr 2F
145+  879C 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  879F 08           2 ex af,af
147+  87A0 A7               and a
148+  87A1 ED 42            sbc hl,bc
149+  87A3 C9               ret
150+  87A4
151+  87A4              ; *********************************************************************************************************************************************************************************************
152+  87A4              ;
153+  87A4              ;   16/8/22
154+  87A4              ;
155+  87A4              ;	Comprueba_limite_vertical
156+  87A4              ;
157+  87A4              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87A4              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87A4              ;
160+  87A4
161+  87A4 3A EC 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87A7 A7           	and a
163+  87A8 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87A9
165+  87A9 7D           	ld a,l
166+  87AA E6 1F        	and $1F
167+  87AC 57           	ld d,a
168+  87AD 3A F9 84     	ld a,(Limite_vertical)
169+  87B0 BA           	cp d 											; Límite - Posición.
170+  87B1
171+  87B1 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87B2 CB 47        	bit 0,a
173+  87B4 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87B6
175+  87B6              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87B6
177+  87B6 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87B7 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87B9
180+  87B9               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87B9              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87B9
183+  87B9 3A D7 84         ld a,(Coordenada_X)
184+  87BC 16 0F            ld d,Centro_izquierda
185+  87BE A7               and a
186+  87BF 92               sub d 											 ; Posición - Centro_izquierda.
187+  87C0
188+  87C0 28 21            jr z,3F
189+  87C2 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87C4              ;                                                    ; _salimos sin modificar nada.
191+  87C4 18 0E            jr 2F
192+  87C6
193+  87C6 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87C7 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87C9
196+  87C9              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87C9              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87C9
199+  87C9 3A D7 84         ld a,(Coordenada_X)
200+  87CC 16 10            ld d,Centro_derecha
201+  87CE A7               and a
202+  87CF 92               sub d
203+  87D0
204+  87D0 28 11            jr z,3F
205+  87D2 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87D4              ;                                                    ; _salimos sin modificar nada.
207+  87D4 CB 43        2 bit 0,e
208+  87D6 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87D8 C5           	push bc
210+  87D9 CD 6C 88         call Modificaccionne
211+  87DC C1           	pop bc
212+  87DD CD 7D 88         call Inicializacion
213+  87E0 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87E1 08           	ex af,af
215+  87E2 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87E3 C9           3 ret 				 								 ; Salimos de la rutina.
217+  87E4
218+  87E4              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87E4
220+  87E4 C5           4 push bc
221+  87E5 01 C9 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87E8 0A           	ld a,(bc)
223+  87E9 3D           	dec a
224+  87EA 47           	ld b,a 											 ; Columnas-1 en B.
225+  87EB 7D           	ld a,l
226+  87EC 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87ED CB 47        	bit 0,a
228+  87EF 28 03        	jr z,5F
229+  87F1 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87F2 18 2E        	jr 7F
231+  87F4
232+  87F4              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87F4
234+  87F4 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87F5 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87F6 3A EB 84     	ld a,(Ctrl_0)
237+  87F9 CB 4F        	bit 1,a
238+  87FB 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  87FD F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  87FE
241+  87FE              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  87FE
243+  87FE 1C               inc e
244+  87FF 1D               dec e
245+  8800 20 07            jr nz,12F
246+  8802 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  8803 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  8804 22 CA 84     	ld (Posicion_actual),hl
249+  8807 18 44        13 jr 9F
250+  8809
251+  8809 CB 43        12 bit 0,e
252+  880B 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  880D              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  880D C1           	pop bc
255+  880E 18 D3        	jr 3B
256+  8810
257+  8810 80           14 add b
258+  8811 6F               ld l,a
259+  8812 22 CA 84     	ld (Posicion_actual),hl
260+  8815 CD 6C 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8818 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  881A
263+  881A E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  881C 32 EB 84         ld (Ctrl_0),a
265+  881F F1           	pop af
266+  8820 18 2B        	jr 9F
267+  8822
268+  8822              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  8822
270+  8822 F5           7 push af
271+  8823 3A EB 84     	ld a,(Ctrl_0)
272+  8826 CB 47        	bit 0,a
273+  8828 20 1D        	jr nz,8F
274+  882A F1           	pop af
275+  882B
276+  882B              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  882B
278+  882B 1C           	inc e
279+  882C 1D               dec e
280+  882D 20 07            jr nz,10F
281+  882F
282+  882F 90           	sub b
283+  8830 6F               ld l,a
284+  8831 22 CA 84     	ld (Posicion_actual),hl
285+  8834 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  8836              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  8836 CB 43        10 bit 0,e
288+  8838 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  883A              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  883A C1           	pop bc
291+  883B 18 A6        	jr 3B
292+  883D
293+  883D 90           16 sub b
294+  883E 6F               ld l,a
295+  883F 22 CA 84     	ld (Posicion_actual),hl
296+  8842 CD 6C 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  8845 18 06            jr 9F
298+  8847
299+  8847 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8849 32 EB 84         ld (Ctrl_0),a
301+  884C F1           	pop af
302+  884D
303+  884D C1           9 pop bc
304+  884E              ;	ld e,0
305+  884E CD 7D 88         call Inicializacion
306+  8851 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  8852 08           	ex af,af
308+  8853 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  8854 18 8D            jr 3B
310+  8856
311+  8856              ; --------------------
312+  8856
313+  8856              Modifica_Pos_actual
314+  8856
315+  8856              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  8856 05               dec B                                           ; Scanlines-1 en B.
317+  8857 CD D4 89     1 call PreviousScan
318+  885A 10 FB            djnz 1B
319+  885C 22 CA 84     	ld (Posicion_actual),hl
320+  885F AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  8860 C9           	ret
322+  8861
323+  8861              ; --------------------
324+  8861
325+  8861              Modifica_Pos_actual2
326+  8861
327+  8861              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  8861 05               dec B                                           ; Scanlines-1 en B.
329+  8862 CD C2 89     1 call NextScan
330+  8865 10 FB            djnz 1B
331+  8867 22 CA 84     	ld (Posicion_actual),hl
332+  886A AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  886B C9           	ret
334+  886C
335+  886C              ; --------------------
336+  886C
337+  886C              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  886C              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  886C
340+  886C 08           Modificaccionne ex af,af
341+  886D FE 02            cp 2
342+  886F F5               push af                                         ; Guardo el resultado de la comparación.
343+  8870 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  8871 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  8872 CC 56 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  8875 DC 56 88         call c,Modifica_Pos_actual
347+  8878 C8           	ret z
348+  8879 CD 61 88         call Modifica_Pos_actual2
349+  887C C9               ret
350+  887D
351+  887D              ; *************************************************************************************************************************************************************************************************
352+  887D              ;
353+  887D              ;	13/8/22
354+  887D              ;
355+  887D              ;	Inicializacion
356+  887D              ;
357+  887D              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  887D              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  887D              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  887D              ;
361+  887D              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  887D              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  887D              ;	_ desaparece/aparece.
364+  887D
365+  887D              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  887D              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  887D              ;
368+  887D              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  887D              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  887D              ; 		   [E] ="0"
371+  887D
372+  887D              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  887D
374+  887D CD 0D 8C     Inicializacion call calcula_tercio
375+  8880 28 36        	jr z,primit
376+  8882 E6 02        	and 2
377+  8884 20 07        	jr nz,segmit
378+  8886 7D           	ld a,l
379+  8887 FE 7F        	cp $7f
380+  8889 38 2D        	jr c,primit
381+  888B 28 2B        	jr z,primit
382+  888D CD EA 88     segmit call column
383+  8890 38 13        	jr c,tercuad
384+  8892 3E 04        cuarcuad ld a,4
385+  8894 32 D6 84     	ld (Cuad_objeto),a
386+  8897 21 20 48     	ld hl,$4820
387+  889A 22 F7 84     	ld (Limite_horizontal),hl
388+  889D 21 F9 84     	ld hl,Limite_vertical
389+  88A0 36 0D        	ld (hl),$0d
390+  88A2 08           	ex af,af
391+  88A3 18 3C        	jr 1F
392+  88A5              tercuad
393+  88A5              ;	call Fija_punteros
394+  88A5 3E 03        	ld a,3
395+  88A7 32 D6 84     	ld (Cuad_objeto),a
396+  88AA 21 20 48     	ld hl,$4820
397+  88AD 22 F7 84     	ld (Limite_horizontal),hl
398+  88B0 21 F9 84     	ld hl,Limite_vertical
399+  88B3 36 12        	ld (hl),$12
400+  88B5 08           	ex af,af
401+  88B6 18 29        	jr 1F
402+  88B8 CD EA 88     primit call column
403+  88BB 38 13        	jr c, primcuad
404+  88BD              segcuad
405+  88BD              ;	call Fija_punteros
406+  88BD 3E 02        	ld a,2
407+  88BF 32 D6 84     	ld (Cuad_objeto),a
408+  88C2 21 C0 4F     	ld hl,$4fc0
409+  88C5 22 F7 84     	ld (Limite_horizontal),hl
410+  88C8 21 F9 84     	ld hl,Limite_vertical
411+  88CB 36 0D        	ld (hl),$0d
412+  88CD 08           	ex af,af
413+  88CE 18 11        	jr 1F
414+  88D0              primcuad
415+  88D0              ;	call Fija_punteros
416+  88D0 3E 01        	ld a,1
417+  88D2 32 D6 84     	ld (Cuad_objeto),a
418+  88D5 21 C0 4F     	ld hl,$4fc0
419+  88D8 22 F7 84     	ld (Limite_horizontal),hl
420+  88DB 21 F9 84     	ld hl,Limite_vertical
421+  88DE 36 12        	ld (hl),$12
422+  88E0 08           	ex af,af
423+  88E1 CD 7F 8F     1 call Genera_coordenadas
424+  88E4 21 EB 84     	ld hl,Ctrl_0
425+  88E7 CB EE        	set 5,(hl)
426+  88E9 C9           	ret
427+  88EA
428+  88EA              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88EA              ;
430+  88EA              ;	14/9/22
431+  88EA              ;
432+  88EA              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88EA              ;
434+  88EA              ;	La rutina fija el puntero de dibujado/borrado.
435+  88EA              ;
436+  88EA              ;	Función:
437+  88EA              ;
438+  88EA              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88EA
440+  88EA              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88EA              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88EA              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88EA              ;	and a
444+  88EA              ;	jr z,1F
445+  88EA              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88EA              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88EA              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88EA              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88EA              ;	ld (Puntero_objeto),hl
450+  88EA              ;	jr 3F
451+  88EA              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88EA              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88EA              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88EA              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88EA              ;	ld (Puntero_objeto),hl
456+  88EA              ;	jr 3F
457+  88EA              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88EA              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88EA              ;3 pop de
460+  88EA              ;	pop bc
461+  88EA              ;	ret
462+  88EA
463+  88EA              ; ------------------------------------------------------------------------------------------------------------------
464+  88EA
465+  88EA              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88EA              ;
467+  88EA              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88EA
469+  88EA 7D           column ld a,l
470+  88EB E6 1F        	and $1f
471+  88ED FE 10         	cp $10
472+  88EF C9            	ret
473+  88F0
474+  88F0              ; --------------------------------------------------------------------------------------------------------------------
475+  88F0              ;
476+  88F0              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88F0              ;
478+  88F0              ; 14/12/22
479+  88F0              ;
480+  88F0              ;	Modifica: A y BC.
481+  88F0
482+  88F0 3A D6 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  88F3 E6 01        	and 1
484+  88F5 28 17        	jr z,1F
485+  88F7
486+  88F7              ; Nos encontramos en la parte izquierda de la pantalla
487+  88F7
488+  88F7 3A D7 84     	ld a,(Coordenada_X)
489+  88FA 47           	ld b,a
490+  88FB 04           	inc b											; (Coordenada_X)+1 en B.
491+  88FC 79           	ld a,c
492+  88FD 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  88FE 38 08        	jr c,2F
494+  8900 47           	ld b,a
495+  8901 79           	ld a,c
496+  8902 90           	sub b
497+  8903 32 F6 84     	ld (Columnas),a
498+  8906 18 1B        	jr 4F
499+  8908 79           2 ld a,c
500+  8909 32 F6 84     	ld (Columnas),a
501+  890C 18 15        	jr 4F
502+  890E
503+  890E              ; Nos encontramos en la parte derecha de la pantalla.
504+  890E
505+  890E 3A D7 84     1 ld a,(Coordenada_X)
506+  8911 81           	add c
507+  8912 3D           	dec a
508+  8913 D6 1F        	sub $1f
509+  8915 38 08        	jr c,3F
510+  8917 47           	ld b,a
511+  8918 79           	ld a,c
512+  8919 90           	sub b
513+  891A 32 F6 84     	ld (Columnas),a
514+  891D 18 04        	jr 4F
515+  891F 79           3 ld a,c
516+  8920 32 F6 84     	ld (Columnas),a
517+  8923 D9           4 exx
518+  8924 4F           	ld c,a
519+  8925 D9           	exx
520+  8926 C9            ret
521+  8927
522+  8927              ; --------------------------------------------------------------------------------------------------------------------
523+  8927              ;
524+  8927              ; 7/1/23
525+  8927              ;
526+  8927              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  8927              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  8927              ;
529+  8927              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  8927              ;	DESTRUYE: HL,B Y A.
531+  8927
532+  8927 3A D6 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  892A FE 02        	cp 2
534+  892C 38 18        	jr c,1F
535+  892E 28 16        	jr z,1F
536+  8930 E6 01        	and 1
537+  8932 28 0D        	jr z,3F
538+  8934
539+  8934              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  8934
541+  8934 CD 70 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8937
543+  8937 7D           9 ld a,l
544+  8938 E6 1F        	and $1f
545+  893A 28 2A        	jr z,7F
546+  893C 2B           	dec hl
547+  893D 10 F8        	djnz 9B
548+  893F 18 25        	jr 7F
549+  8941
550+  8941              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  8941
552+  8941 2A CA 84     3 ld hl,(Posicion_actual)
553+  8944 18 20        	jr 7F
554+  8946
555+  8946 28 14        1 jr z,2F
556+  8948
557+  8948              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  8948
559+  8948 CD 70 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  894B 7D           4 ld a,l
561+  894C E6 1F        	and $1f
562+  894E 28 03        	jr z,6F
563+  8950 2B           	dec hl
564+  8951 10 F8        	djnz 4B
565+  8953 06 0F        6 ld b,15
566+  8955 CD D4 89     5 call PreviousScan
567+  8958 10 FB        	djnz 5B
568+  895A 18 0A        	jr 7F
569+  895C
570+  895C              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  895C
572+  895C CD 70 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  895F 06 0F        	ld b,15
574+  8961 CD D4 89     8 call PreviousScan
575+  8964 10 FB        	djnz 8B
576+  8966
577+  8966 E5           7 push hl
578+  8967 DD E1        	pop ix
579+  8969
580+  8969 2A CC 84     	ld hl,(Puntero_objeto)
581+  896C E5           	push hl
582+  896D FD E1        	pop iy
583+  896F
584+  896F C9           	ret
585+  8970
586+  8970              ; --------------------------------------------------------------------------------------------------------------------
587+  8970              ;
588+  8970              ;	2/1/23
589+  8970              ;
590+  8970              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  8970              ;
592+  8970              ;	Tras esta rutina tenemos:
593+  8970              ;
594+  8970              ;	OUTPUT: HL contiene (Posicion_actual).
595+  8970              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  8970              ;
597+  8970              ;	DESTRUYE!!!!! HL,B y A.
598+  8970
599+  8970 2A CA 84     Operandos ld hl,(Posicion_actual)
600+  8973 3A F6 84     	ld a,(Columnas)
601+  8976 3D           	dec a
602+  8977 20 01        	jr nz,1F
603+  8979 3C           	inc a
604+  897A 47           1 ld b,a
605+  897B C9           	ret
606+  897C
607+  897C              ; --------------------------------------------------------------------------------------------------------------------
608+  897C              ;
609+  897C              ;	3/1/23
610+  897C              ;
611+  897C              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  897C              ;
613+  897C              ;	Destruye: A,B,HL y DE.
614+  897C
615+  897C              Define_rutina_de_impresion
616+  897C
617+  897C 3A C9 84     	ld a,(Columns)
618+  897F 47           	ld b,a
619+  8980 3A F6 84     	ld a,(Columnas)
620+  8983 B8           	cp b
621+  8984 20 0D        	jr nz,2f
622+  8986
623+  8986              ;	La entidad se imprime entera.
624+  8986
625+  8986 21 1A 8A     	ld hl, Indice_entidades_completas
626+  8989 E6 01        	and 1
627+  898B 28 02        	jr z,1F
628+  898D
629+  898D 23           	inc hl
630+  898E 23           	inc hl
631+  898F
632+  898F CD 1F 86     1 call Extrae_address
633+  8992 C9           	ret		;	ret
634+  8993
635+  8993              ;	La entidad no se imprime entera en pantalla.
636+  8993
637+  8993 3A D6 84     2 ld a,(Cuad_objeto)
638+  8996 E6 01        	and 1
639+  8998 28 17        	jr z,3F
640+  899A
641+  899A              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  899A
643+  899A 21 1E 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  899D 3A C9 84     4 ld a,(Columns)
645+  89A0 E6 01        	and 1
646+  89A2 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89A4
648+  89A4 23           	inc hl
649+  89A5 23           	inc hl
650+  89A6
651+  89A6 3A F6 84     	ld a,(Columnas)
652+  89A9 E6 01        	and 1
653+  89AB 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89AD
655+  89AD 23           	inc hl
656+  89AE 23           	inc hl
657+  89AF
658+  89AF 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89B1
660+  89B1 21 24 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89B4 18 E7        	jr 4B
662+  89B6
663+  89B6              ; --------------------------------------------------------------------------------------------------------------------
664+  89B6              ;
665+  89B6              ;	Prepara_draw
666+  89B6              ;
667+  89B6              ;	Es una rutina de carga.
668+  89B6              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89B6              ;
670+  89B6              ;	FUNCIONAMIENTO:
671+  89B6              ;
672+  89B6              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89B6              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89B6              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89B6              ;
676+  89B6              ;	DESTRUYE:
677+  89B6              ;
678+  89B6              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89B6
680+  89B6 21 C8 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89B9 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89BA 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89BB 4E           	ld c,(hl)
684+  89BC 2A CA 84     	ld hl,(Posicion_actual)
685+  89BF 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89C1 C9           	ret
687+  89C2
688+  89C2              ;----------------------------------------------------------------------------------------------------------------
689+  89C2              ;
690+  89C2              ;	5/08/22
691+  89C2              ;
692+  89C2              ;   NextScan.
693+  89C2              ;
694+  89C2              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89C2              ;
696+  89C2              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89C2              ;
698+  89C2              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89C2              ;
700+  89C2              ;       DESTRUIDOS: AF y HL !!!
701+  89C2              ;
702+  89C2              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89C2              ;
704+  89C2
705+  89C2 24           NextScan inc h          ; Incrementamos el scanline.
706+  89C3 7C               ld a,h
707+  89C4 E6 07            and 7
708+  89C6 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89C7
710+  89C7 CD 7F 8F     	call Genera_coordenadas
711+  89CA
712+  89CA 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
713+  89CB C6 20            add a,$20           ; Vamos a comprobarlo...
714+  89CD 6F               ld l,a
715+  89CE D8               ret c               ; Salimos si se produce el cambio de tercio.
716+  89CF
717+  89CF 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
718+  89D0 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
719+  89D2 67               ld h,a
720+  89D3 C9               ret
721+  89D4
722+  89D4              ;----------------------------------------------------------------------------------------------------------------
723+  89D4              ;
724+  89D4              ;	5/08/22
725+  89D4              ;
726+  89D4              ;   PreviousScan.
727+  89D4              ;
728+  89D4              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
729+  89D4              ;
730+  89D4              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
731+  89D4              ;
732+  89D4              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
733+  89D4              ;
734+  89D4              ;       DESTRUIDOS: AF y HL !!!
735+  89D4              ;
736+  89D4              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
737+  89D4              ;
738+  89D4
739+  89D4 7C           PreviousScan ld a,h
740+  89D5 25               dec h               ; Dec H.
741+  89D6 E6 07            and 7
742+  89D8 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
743+  89D9
744+  89D9 CD 7F 8F     	call Genera_coordenadas
745+  89DC
746+  89DC 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
747+  89DD D6 20            sub $20             ; Vamos a comprobarlo...
748+  89DF 6F               ld l,a
749+  89E0 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
750+  89E1
751+  89E1 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
752+  89E2 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
753+  89E4 67               ld h,a
754+  89E5 C9               ret
755+  89E6
756+  89E6              ; -----------------------------------------------------------------------------------
757+  89E6              ;
758+  89E6              ;	07/01/23
759+  89E6
760+  89E6 ED 73 06 85  Extrae_foto_registros ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
761+  89EA 31 00 70     	ld sp,Album_de_fotos
762+  89ED FD E1        2 pop iy																	; (Puntero_objeto) en IY.
763+  89EF E1           	pop hl																	; Puntero de impresión de pantalla en HL.
764+  89F0 D1           	pop de																	; Dirección de la rutina de impresión en DE.
765+  89F1
766+  89F1 ED 73 08 85  	ld (Stack_2),sp
767+  89F5 ED 7B 06 85  	ld sp,(Stack)
768+  89F9 3E CD        	ld a,$cd
769+  89FB 32 03 8A     	ld (Imprime),a
770+  89FE EB           	ex de,hl
771+  89FF 22 04 8A     	ld (Imprime+1),hl
772+  8A02 EB           	ex de,hl
773+  8A03
774+  8A03 00 00 00     Imprime db 0,0,0
775+  8A06 ED 73 06 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
776+  8A0A 3A 05 85     	ld a,(Numero_de_malotes)
777+  8A0D 3D           	dec a
778+  8A0E 28 09        	jr z,1F
779+  8A10 32 05 85      	ld (Numero_de_malotes),a
780+  8A13 ED 7B 08 85  	ld sp,(Stack_2)
781+  8A17 18 D4        	jr 2B
782+  8A19 C9           1 ret
783+  8A1A
784+  8A1A
# file closed: Draw_XOR.asm
597   8A1A              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A1A              ;   índices de Rutinas de impresión.
  2+  8A1A
  3+  8A1A 2A 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A1C 53 8A            defw Pinta_Amadeus_3x2
  5+  8A1E
  6+  8A1E 9D 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A20 3D 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A22 F1 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A24
 10+  8A24 C7 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A26 CB 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A28 7F 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A2A
 14+  8A2A
 15+  8A2A              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A2A              ;
 17+  8A2A              ;   12/12/22
 18+  8A2A              ;
 19+  8A2A              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A2A              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A2A              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A2A              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A2A              ;
 24+  8A2A              ;   Modifica: DE y HL.
 25+  8A2A
 26+  8A2A ED 73 06 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A2E FD F9        	ld sp,iy
 28+  8A30 06 10            ld b,16
 29+  8A32 D1           1 pop de
 30+  8A33 73           	ld (hl),e
 31+  8A34 23           	inc hl
 32+  8A35 72           	ld (hl),d
 33+  8A36 2B           	dec hl
 34+  8A37
 35+  8A37 24           	inc h
 36+  8A38 7C               ld a,h
 37+  8A39 E6 07            and 7
 38+  8A3B 20 0A            jr nz,2F
 39+  8A3D
 40+  8A3D 7D               ld a,l
 41+  8A3E C6 20            add a,$20
 42+  8A40 6F               ld l,a
 43+  8A41 38 04            jr c,2F
 44+  8A43
 45+  8A43 7C               ld a,h
 46+  8A44 D6 08            sub 8
 47+  8A46 67               ld h,a
 48+  8A47
 49+  8A47 7C           2 ld a,h
 50+  8A48 FE 58            cp $58
 51+  8A4A 28 02            jr z,3F
 52+  8A4C 10 E4            djnz 1B
 53+  8A4E ED 7B 06 85  3 ld sp,(Stack)
 54+  8A52 C9           	ret
 55+  8A53
 56+  8A53 ED 73 06 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A57 FD F9        	ld sp,iy
 58+  8A59 06 08            ld b,8
 59+  8A5B D1           1 pop de
 60+  8A5C 73           	ld (hl),e
 61+  8A5D 23           	inc hl
 62+  8A5E 72           	ld (hl),d
 63+  8A5F 23           	inc hl
 64+  8A60 D1           	pop de
 65+  8A61 73           	ld (hl),e
 66+  8A62 2B           	dec hl
 67+  8A63 2B           	dec hl
 68+  8A64 24           	inc h
 69+  8A65 7C               ld a,h
 70+  8A66 E6 07            and 7
 71+  8A68 20 0A            jr nz,2F
 72+  8A6A 7D               ld a,l
 73+  8A6B C6 20            add a,$20
 74+  8A6D 6F               ld l,a
 75+  8A6E 38 04            jr c,2F
 76+  8A70 7C               ld a,h
 77+  8A71 D6 08            sub 8
 78+  8A73 67               ld h,a
 79+  8A74 7C           2 ld a,h
 80+  8A75 FE 58            cp $58
 81+  8A77 28 1F            jr z,4F
 82+  8A79 72               ld (hl),d
 83+  8A7A D1           	pop de
 84+  8A7B 23           	inc hl
 85+  8A7C 73           	ld (hl),e
 86+  8A7D 23           	inc hl
 87+  8A7E 72           	ld (hl),d
 88+  8A7F 2B           	dec hl
 89+  8A80 2B           	dec hl
 90+  8A81 24           	inc h
 91+  8A82 7C               ld a,h
 92+  8A83 E6 07            and 7
 93+  8A85 20 0A            jr nz,3F
 94+  8A87 7D               ld a,l
 95+  8A88 C6 20            add a,$20
 96+  8A8A 6F               ld l,a
 97+  8A8B 38 04            jr c,3F
 98+  8A8D 7C               ld a,h
 99+  8A8E D6 08            sub 8
100+  8A90 67               ld h,a
101+  8A91 7C           3 ld a,h
102+  8A92 FE 58            cp $58
103+  8A94 28 02            jr z,4F
104+  8A96 10 C3            djnz 1B
105+  8A98 ED 7B 06 85  4 ld sp,(Stack)
106+  8A9C C9           	ret
107+  8A9D
108+  8A9D              ; ---------------------------------------------------
109+  8A9D
110+  8A9D ED 73 06 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AA1 FD F9        	ld sp,iy
112+  8AA3 06 10            ld b,16
113+  8AA5 D1           1 pop de
114+  8AA6 7A           	ld a,d
115+  8AA7 AE           	xor (hl)
116+  8AA8 77           	ld (hl),a
117+  8AA9 24           	inc h
118+  8AAA 7C               ld a,h
119+  8AAB E6 07            and 7
120+  8AAD 20 0C            jr nz,2F
121+  8AAF 7D               ld a,l
122+  8AB0 C6 20            add a,$20
123+  8AB2 6F               ld l,a
124+  8AB3 38 06            jr c,2F
125+  8AB5 7C               ld a,h
126+  8AB6 D6 08            sub 8
127+  8AB8 67               ld h,a
128+  8AB9 18 00            jr 2F
129+  8ABB 7C           2 ld a,h
130+  8ABC FE 58            cp $58
131+  8ABE 28 02            jr z,3F
132+  8AC0 10 E3            djnz 1B
133+  8AC2 ED 7B 06 85  3 ld sp,(Stack)
134+  8AC6 C9           	ret
135+  8AC7
136+  8AC7 ED 73 06 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8ACB FD F9        	ld sp,iy
138+  8ACD 06 10            ld b,16
139+  8ACF D1           1 pop de
140+  8AD0 7B           	ld a,e
141+  8AD1 AE           	xor (hl)
142+  8AD2 77           	ld (hl),a
143+  8AD3 24           	inc h
144+  8AD4 7C               ld a,h
145+  8AD5 E6 07            and 7
146+  8AD7 20 0C            jr nz,2F
147+  8AD9 7D               ld a,l
148+  8ADA C6 20            add a,$20
149+  8ADC 6F               ld l,a
150+  8ADD 38 06            jr c,2F
151+  8ADF 7C               ld a,h
152+  8AE0 D6 08            sub 8
153+  8AE2 67               ld h,a
154+  8AE3 18 00            jr 2F
155+  8AE5 7C           2 ld a,h
156+  8AE6 FE 58            cp $58
157+  8AE8 28 02            jr z,3F
158+  8AEA 10 E3            djnz 1B
159+  8AEC ED 7B 06 85  3 ld sp,(Stack)
160+  8AF0 C9           	ret
161+  8AF1
162+  8AF1              ; ---------------------------------------------------
163+  8AF1
164+  8AF1 ED 73 06 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8AF5 FD F9        	ld sp,iy
166+  8AF7 06 08            ld b,8
167+  8AF9 D1           1 pop de
168+  8AFA 7A           	ld a,d
169+  8AFB AE           	xor (hl)
170+  8AFC 77           	ld (hl),a
171+  8AFD 23           	inc hl
172+  8AFE D1           	pop de
173+  8AFF 7B           	ld a,e
174+  8B00 AE           	xor (hl)
175+  8B01 77           	ld (hl),a
176+  8B02 2B           	dec hl
177+  8B03 24            	inc h
178+  8B04 7C               ld a,h
179+  8B05 E6 07            and 7
180+  8B07 20 0A            jr nz,2F
181+  8B09 7D               ld a,l
182+  8B0A C6 20            add a,$20
183+  8B0C 6F               ld l,a
184+  8B0D 38 04            jr c,2F
185+  8B0F 7C               ld a,h
186+  8B10 D6 08            sub 8
187+  8B12 67               ld h,a
188+  8B13 7C           2 ld a,h
189+  8B14 FE 58            cp $58
190+  8B16 28 20            jr z,4F
191+  8B18 D1               pop de
192+  8B19 7B           	ld a,e
193+  8B1A AE           	xor (hl)
194+  8B1B 77           	ld (hl),a
195+  8B1C 23           	inc hl
196+  8B1D 7A           	ld a,d
197+  8B1E AE           	xor (hl)
198+  8B1F 77           	ld (hl),a
199+  8B20 2B           	dec hl
200+  8B21 24           	inc h
201+  8B22 7C               ld a,h
202+  8B23 E6 07            and 7
203+  8B25 20 0A            jr nz,3F
204+  8B27 7D               ld a,l
205+  8B28 C6 20            add a,$20
206+  8B2A 6F               ld l,a
207+  8B2B 38 04            jr c,3F
208+  8B2D 7C               ld a,h
209+  8B2E D6 08            sub 8
210+  8B30 67               ld h,a
211+  8B31 7C           3 ld a,h
212+  8B32 FE 58            cp $58
213+  8B34 28 02            jr z,4F
214+  8B36 10 C1            djnz 1B
215+  8B38 ED 7B 06 85  4 ld sp,(Stack)
216+  8B3C C9           	ret
217+  8B3D
218+  8B3D ED 73 06 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B41 FD F9        	ld sp,iy
220+  8B43 06 08            ld b,8
221+  8B45 D1           1 pop de
222+  8B46 D1           	pop de
223+  8B47 7B           	ld a,e
224+  8B48 AE           	xor (hl)
225+  8B49 77           	ld (hl),a
226+  8B4A 24            	inc h
227+  8B4B 7C               ld a,h
228+  8B4C E6 07            and 7
229+  8B4E 20 0A            jr nz,2F
230+  8B50 7D               ld a,l
231+  8B51 C6 20            add a,$20
232+  8B53 6F               ld l,a
233+  8B54 38 04            jr c,2F
234+  8B56 7C               ld a,h
235+  8B57 D6 08            sub 8
236+  8B59 67               ld h,a
237+  8B5A 7C           2 ld a,h
238+  8B5B FE 58            cp $58
239+  8B5D 28 1B            jr z,4F
240+  8B5F D1               pop de
241+  8B60 7A           	ld a,d
242+  8B61 AE           	xor (hl)
243+  8B62 77           	ld (hl),a
244+  8B63 24           	inc h
245+  8B64 7C               ld a,h
246+  8B65 E6 07            and 7
247+  8B67 20 0A            jr nz,3F
248+  8B69 7D               ld a,l
249+  8B6A C6 20            add a,$20
250+  8B6C 6F               ld l,a
251+  8B6D 38 04            jr c,3F
252+  8B6F 7C               ld a,h
253+  8B70 D6 08            sub 8
254+  8B72 67               ld h,a
255+  8B73 7C           3 ld a,h
256+  8B74 FE 58            cp $58
257+  8B76 28 02            jr z,4F
258+  8B78 10 CB            djnz 1B
259+  8B7A ED 7B 06 85  4 ld sp,(Stack)
260+  8B7E C9           	ret
261+  8B7F
262+  8B7F ED 73 06 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8B83 FD F9        	ld sp,iy
264+  8B85 06 08            ld b,8
265+  8B87 D1           1 pop de
266+  8B88 7B           	ld a,e
267+  8B89 AE           	xor (hl)
268+  8B8A 77           	ld (hl),a
269+  8B8B 23           	inc hl
270+  8B8C 7A           	ld a,d
271+  8B8D AE           	xor (hl)
272+  8B8E 77           	ld (hl),a
273+  8B8F 2B           	dec hl
274+  8B90 24             	inc h
275+  8B91 7C               ld a,h
276+  8B92 E6 07            and 7
277+  8B94 20 0A            jr nz,2F
278+  8B96 7D               ld a,l
279+  8B97 C6 20            add a,$20
280+  8B99 6F               ld l,a
281+  8B9A 38 04            jr c,2F
282+  8B9C 7C               ld a,h
283+  8B9D D6 08            sub 8
284+  8B9F 67               ld h,a
285+  8BA0 7C           2 ld a,h
286+  8BA1 FE 58            cp $58
287+  8BA3 28 21            jr z,4F
288+  8BA5 D1               pop de
289+  8BA6 7A           	ld a,d
290+  8BA7 AE           	xor (hl)
291+  8BA8 77           	ld (hl),a
292+  8BA9 23           	inc hl
293+  8BAA D1               pop de
294+  8BAB 7B           	ld a,e
295+  8BAC AE           	xor (hl)
296+  8BAD 77           	ld (hl),a
297+  8BAE 2B           	dec hl
298+  8BAF 24           	inc h
299+  8BB0 7C               ld a,h
300+  8BB1 E6 07            and 7
301+  8BB3 20 0A            jr nz,3F
302+  8BB5 7D               ld a,l
303+  8BB6 C6 20            add a,$20
304+  8BB8 6F               ld l,a
305+  8BB9 38 04            jr c,3F
306+  8BBB 7C               ld a,h
307+  8BBC D6 08            sub 8
308+  8BBE 67               ld h,a
309+  8BBF 7C           3 ld a,h
310+  8BC0 FE 58            cp $58
311+  8BC2 28 02            jr z,4F
312+  8BC4 10 C1            djnz 1B
313+  8BC6 ED 7B 06 85  4 ld sp,(Stack)
314+  8BCA C9           	ret
315+  8BCB
316+  8BCB ED 73 06 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8BCF FD F9        	ld sp,iy
318+  8BD1 06 08            ld b,8
319+  8BD3 D1           1 pop de
320+  8BD4 7B           	ld a,e
321+  8BD5 AE           	xor (hl)
322+  8BD6 77           	ld (hl),a
323+  8BD7 24            	inc h
324+  8BD8 7C               ld a,h
325+  8BD9 E6 07            and 7
326+  8BDB 20 0A            jr nz,2F
327+  8BDD 7D               ld a,l
328+  8BDE C6 20            add a,$20
329+  8BE0 6F               ld l,a
330+  8BE1 38 04            jr c,2F
331+  8BE3 7C               ld a,h
332+  8BE4 D6 08            sub 8
333+  8BE6 67               ld h,a
334+  8BE7 7C           2 ld a,h
335+  8BE8 FE 58            cp $58
336+  8BEA 28 1C            jr z,4F
337+  8BEC D1               pop de
338+  8BED 7A           	ld a,d
339+  8BEE AE           	xor (hl)
340+  8BEF 77           	ld (hl),a
341+  8BF0 24           	inc h
342+  8BF1 7C               ld a,h
343+  8BF2 E6 07            and 7
344+  8BF4 20 0A            jr nz,3F
345+  8BF6 7D               ld a,l
346+  8BF7 C6 20            add a,$20
347+  8BF9 6F               ld l,a
348+  8BFA 38 04            jr c,3F
349+  8BFC 7C               ld a,h
350+  8BFD D6 08            sub 8
351+  8BFF 67               ld h,a
352+  8C00 7C           3 ld a,h
353+  8C01 FE 58            cp $58
354+  8C03 28 03            jr z,4F
355+  8C05 D1               pop de
356+  8C06 10 CB            djnz 1B
357+  8C08 ED 7B 06 85  4 ld sp,(Stack)
358+  8C0C C9           	ret
359+  8C0D
360+  8C0D              ; ---------------------------------------------------
361+  8C0D
# file closed: Rutinas_de_impresion_sprites.asm
598   8C0D              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C0D              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C0D              ;
  3+  8C0D              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C0D              ;
  5+  8C0D              ; *****************************************************************************************************************************************************************************************
  6+  8C0D              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C0D
  8+  8C0D 7C           calcula_tercio ld a,h
  9+  8C0E E6 18        	and $18
 10+  8C10 CB 2F        	sra a
 11+  8C12 CB 2F        	sra a
 12+  8C14 CB 2F        	sra a
 13+  8C16 C9           	ret
 14+  8C17
# file closed: calcula_tercio.asm
599   8C17              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C17              ; -----------------------------------------------------------------------------------------
  2+  8C17              ;
  3+  8C17              ;   04/11/22
  4+  8C17              ;
  5+  8C17              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C17              ;
  7+  8C17              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C17              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C17              ;
 10+  8C17              ;   DESTRUYE: HL y A. !!!!!
 11+  8C17
 12+  8C17 CD 0D 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C1A 26 58            ld h,$58
 14+  8C1C 84               add h
 15+  8C1D 67               ld h,a
 16+  8C1E C9               ret
# file closed: Calcula_direccion_atributos.asm
600   8C1F              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C1F              ; ********** **********
  2+  8C1F              ;
  3+  8C1F              ;   5/11/22
  4+  8C1F              ;
  5+  8C1F              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C1F              ;
  7+  8C1F              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C1F              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C1F              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C1F              ;
 11+  8C1F              ;   NO DESTROYERSSSS !!!!!
 12+  8C1F
 13+  8C1F E5           Define_atributos push hl
 14+  8C20 C5           	push bc
 15+  8C21 D5           	push de
 16+  8C22
 17+  8C22 CD 17 8C     	call Calcula_direccion_atributos
 18+  8C25
 19+  8C25 D9               exx
 20+  8C26 E5               push hl
 21+  8C27 D9               exx
 22+  8C28 D1               pop de
 23+  8C29
 24+  8C29 42               ld b,d
 25+  8C2A 7B               ld a,e 									; (Attr) en A.
 26+  8C2B
 27+  8C2B C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C2C E5            	push hl 								; Guardo dirección de attr.
 29+  8C2D
 30+  8C2D              ; -----
 31+  8C2D
 32+  8C2D 77           2 ld (hl),a
 33+  8C2E 0D           	dec c 									; Decremento (Columnas).
 34+  8C2F 28 03        	jr z,1F
 35+  8C31 23           	inc hl
 36+  8C32 18 F9        	jr 2B
 37+  8C34
 38+  8C34 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C35 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C36
 41+  8C36 05           	dec b									; Decremento (Filas).
 42+  8C37 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C39
 44+  8C39 11 20 00     	ld de,32
 45+  8C3C A7           	and a
 46+  8C3D ED 5A        	adc hl,de
 47+  8C3F 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C41
 49+  8C41 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C42 C1           	pop bc
 51+  8C43 E1           	pop hl
 52+  8C44
 53+  8C44 C9           	ret
 54+  8C45
# file closed: Define_atributos.asm
601   8C45              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C45              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C45              ;
  3+  8C45              ;
  4+  8C45              ;	CLS.
  5+  8C45              ;
  6+  8C45              ;	Limpia la pantalla y define sus atributos.
  7+  8C45              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C45              ;
  9+  8C45              ;	COLORES: 0 ..... NEGRO
 10+  8C45              ;    		 1 ..... AZUL
 11+  8C45              ; 			 2 ..... ROJO
 12+  8C45              ;			 3 ..... MAGENTA
 13+  8C45              ; 			 4 ..... VERDE
 14+  8C45              ; 			 5 ..... CIAN
 15+  8C45              ;			 6 ..... AMARILLO
 16+  8C45              ; 			 7 ..... BLANCO
 17+  8C45              ;
 18+  8C45              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C45              ;
 20+  8C45              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C45
 22+  8C45
 23+  8C45 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C48 11 01 40     	LD DE,$4001
 25+  8C4B 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C4E 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C50 ED B0        	LDIR
 28+  8C52 01 FF 02     	LD BC,767
 29+  8C55 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C56 ED B0        	LDIR
 31+  8C58 C9           	ret
 32+  8C59
# file closed: Cls.asm
602   8C59              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C59              ; ******************************************************************************************************************************************************************************************
  2+  8C59              ;
  3+  8C59              ;   19/10/22
  4+  8C59              ;
  5+  8C59              ;	Mov_down
  6+  8C59              ;
  7+  8C59              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C59              ;
  9+  8C59              ;
 10+  8C59 21 EB 84     Mov_down ld hl,Ctrl_0
 11+  8C5C CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C5E              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C5E              ; 																	; _ en el caso de que no lo haya.
 14+  8C5E 3A DC 84     	ld a,(Vel_down)
 15+  8C61 47           	ld b,a
 16+  8C62 2A CA 84         ld hl,(Posicion_actual)
 17+  8C65 CD 0D 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C68 E6 02        	and 2
 19+  8C6A 28 0F        	jr z,1F
 20+  8C6C 7C           	ld a,h
 21+  8C6D FE 57        	cp $57
 22+  8C6F 20 0A        	jr nz,1F
 23+  8C71 7D           	ld a,l
 24+  8C72 C6 20        	add $20
 25+  8C74 30 05        	jr nc,1F
 26+  8C76
 27+  8C76              ; ------------------------------
 28+  8C76 CD 66 8F     	call Reaparece_arriba
 29+  8C79              ;	call Reinicio
 30+  8C79              ; ------------------------------
 31+  8C79
 32+  8C79 18 08        	jr 3F
 33+  8C7B CD C2 89     1 call NextScan
 34+  8C7E 22 CA 84     	ld (Posicion_actual),hl
 35+  8C81 10 E2            djnz 2B
 36+  8C83 C9           3 ret
 37+  8C84
 38+  8C84
 39+  8C84              ; ******************************************************************************************************************************************************************************************
 40+  8C84              ;
 41+  8C84              ;   19/10/22
 42+  8C84              ;
 43+  8C84              ;	Mov_up
 44+  8C84              ;
 45+  8C84              ; 	Mueve el Sprite hacia arriba.
 46+  8C84              ;
 47+  8C84              ;
 48+  8C84 21 EB 84     Mov_up ld hl,Ctrl_0
 49+  8C87 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 50+  8C89              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 51+  8C89              ; 																		; _ en el caso de que no lo haya.
 52+  8C89 3A DB 84     	ld a,(Vel_up)
 53+  8C8C 47           	ld b,a
 54+  8C8D 2A CA 84     	ld hl,(Posicion_actual)
 55+  8C90 CD 0D 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 56+  8C93 A7           	and a
 57+  8C94 20 10        	jr nz,1F
 58+  8C96 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 59+  8C97 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 60+  8C99 20 0B            jr nz,1F
 61+  8C9B 7D               ld a,l
 62+  8C9C D6 20            sub $20
 63+  8C9E 30 06            jr nc,1F
 64+  8CA0 25               dec h
 65+  8CA1
 66+  8CA1              ; -----------------------------
 67+  8CA1 CD 56 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 68+  8CA4              ;	call Reinicio
 69+  8CA4              ; -----------------------------
 70+  8CA4
 71+  8CA4 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 72+  8CA6 CD D4 89     1 call PreviousScan
 73+  8CA9 22 CA 84     	ld (Posicion_actual),hl
 74+  8CAC 10 E2            djnz 3B
 75+  8CAE C9           2   ret
 76+  8CAF
 77+  8CAF              ; ******************************************************************************************************************************************************************************************
 78+  8CAF              ;
 79+  8CAF              ;	19/10/22
 80+  8CAF              ;
 81+  8CAF              ;	Mov_right.
 82+  8CAF              ;
 83+  8CAF              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 84+  8CAF              ;
 85+  8CAF
 86+  8CAF 21 EB 84     Mov_right ld hl,Ctrl_0
 87+  8CB2 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 88+  8CB4              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 89+  8CB4              ; 																	; _ en el caso de que no lo haya.
 90+  8CB4 3A CE 84     	ld a,(CTRL_DESPLZ)
 91+  8CB7 A7           	and a
 92+  8CB8 28 0B        	jr z,10F
 93+  8CBA
 94+  8CBA 3A EB 84     	ld a,(Ctrl_0)
 95+  8CBD CB 7F        	bit 7,a
 96+  8CBF 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 97+  8CC1 21 CE 84     	ld hl,CTRL_DESPLZ
 98+  8CC4 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 99+  8CC5
100+  8CC5 3A EB 84     10 ld a,(Ctrl_0)
101+  8CC8 CB 77        	bit 6,a
102+  8CCA 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
103+  8CCC
104+  8CCC CD 15 8F     	call Stop_Amadeus_right
105+  8CCF C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
106+  8CD0 18 4A        	jr 3F
107+  8CD2
108+  8CD2 3A D7 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
109+  8CD5 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
110+  8CD7 20 43        	jr nz,3F
111+  8CD9
112+  8CD9 3A CE 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
113+  8CDC A7           	and a 															; _[3] para continuar con el DESPLZ.
114+  8CDD 28 3D        	jr z,3F
115+  8CDF
116+  8CDF              ; ---------- ---------- ----------
117+  8CDF
118+  8CDF 3A DA 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8CE2 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8CE4 28 11        	jr z,1F
121+  8CE6 38 06        	jr c,6F
122+  8CE8 FE 04        	cp 4
123+  8CEA 28 14        	jr z,7F
124+  8CEC 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8CEE
126+  8CEE              ; ---------- ---------- ----------
127+  8CEE              ;
128+  8CEE              ; Perfiles de velocidad
129+  8CEE              ;
130+  8CEE 3A CE 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
131+  8CF1 FE FE        	cp $fe
132+  8CF3 20 27        	jr nz,3F
133+  8CF5 18 10        	jr 4F
134+  8CF7 3A CE 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
135+  8CFA FE FD        	cp $fd
136+  8CFC 20 1E        	jr nz,3F
137+  8CFE 18 07        	jr 4F
138+  8D00 3A CE 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
139+  8D03 FE FB        	cp $fb
140+  8D05 20 15        	jr nz,3F
141+  8D07
142+  8D07              ; ---------- ---------- ----------
143+  8D07
144+  8D07 CD 44 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
145+  8D0A              ;	call Reinicio
146+  8D0A
147+  8D0A              ; ---------- ---------- ----------
148+  8D0A
149+  8D0A 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
150+  8D0C C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
151+  8D0D CD 45 8D     	call DESPLZ_DER
152+  8D10 C1           	pop bc
153+  8D11 10 F9        	djnz 5B
154+  8D13 2A CA 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
155+  8D16 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
156+  8D17 22 CA 84     	ld (Posicion_actual),hl
157+  8D1A 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
158+  8D1C
159+  8D1C              ; ---------- ---------- ----------
160+  8D1C
161+  8D1C 3A DA 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
162+  8D1F FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
163+  8D21 20 1B        	jr nz,8F
164+  8D23 2A CA 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
165+  8D26 7D           	ld a,l
166+  8D27 E6 1F        	and $1f
167+  8D29 FE 1F        	cp 31
168+  8D2B 20 05        	jr nz,9F
169+  8D2D
170+  8D2D              ; ---------- ---------- ----------
171+  8D2D
172+  8D2D CD 44 8F     	call Reaparece_izquierda
173+  8D30
174+  8D30              ; ---------- ---------- ----------
175+  8D30
176+  8D30 18 12        	jr 2F
177+  8D32 2A CA 84     9 ld hl,(Posicion_actual)
178+  8D35 23           	inc hl
179+  8D36 22 CA 84     	ld (Posicion_actual),hl
180+  8D39 CD 7F 8F     	call Genera_coordenadas
181+  8D3C 18 06        	jr 2F
182+  8D3E 2A CA 84     8 ld hl,(Posicion_actual)
183+  8D41 CD 45 8D     	call DESPLZ_DER
184+  8D44 C9           2 ret
185+  8D45
186+  8D45              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
187+  8D45              ;
188+  8D45              ;	22/9/22
189+  8D45              ;
190+  8D45
191+  8D45 CD 54 8D     DESPLZ_DER call Desplaza_derecha
192+  8D48 CD 69 8D         call modifica_parametros_1er_DESPLZ_2
193+  8D4B CD 8F 8D         call Ciclo_completo
194+  8D4E 21 EB 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
195+  8D51 CB FE        	set 7,(hl)
196+  8D53 C9           	ret
197+  8D54
198+  8D54              ; ******************************************************************************************************************************************************************************************
199+  8D54              ;	14/9/22
200+  8D54              ;
201+  8D54
202+  8D54 3A DA 84     Desplaza_derecha ld a,(Vel_right)
203+  8D57 47           	ld b,a
204+  8D58 2A D2 84     	ld hl,(Puntero_DESPLZ)
205+  8D5B 23           1 inc hl
206+  8D5C 23           	inc hl
207+  8D5D 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
208+  8D5F 22 D2 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
209+  8D62 CD 1F 86     	call Extrae_address
210+  8D65
211+  8D65              ;	ld (Caja_de_DESPLZ),hl
212+  8D65 22 CC 84     	ld (Puntero_objeto),hl
213+  8D68
214+  8D68 C9           	ret
215+  8D69
216+  8D69              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
217+  8D69              ;
218+  8D69              ;	24/7/22
219+  8D69              ;
220+  8D69              ;	modifica_parametros_1er_DESPLZ_2
221+  8D69              ;
222+  8D69              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
223+  8D69              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
224+  8D69              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
225+  8D69
226+  8D69 3A CE 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
227+  8D6C A7           	and a
228+  8D6D 20 1C        	jr nz,1F
229+  8D6F D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
230+  8D71 32 CE 84         ld (CTRL_DESPLZ),a
231+  8D74 21 C9 84     	ld hl,Columns
232+  8D77 34           	inc (hl)
233+  8D78 3A D6 84     	ld a,(Cuad_objeto)
234+  8D7B E6 01        	and 1
235+  8D7D 28 0C        	jr z,1F
236+  8D7F 2A CA 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
237+  8D82 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
238+  8D83 22 CA 84     	ld (Posicion_actual),hl
239+  8D86 CD 21 8F     	call Inc_CTRL_DESPLZ
240+  8D89 18 03        	jr 2F
241+  8D8B CD 21 8F     1 call Inc_CTRL_DESPLZ
242+  8D8E C9           2 ret
243+  8D8F
244+  8D8F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
245+  8D8F              ;
246+  8D8F              ;	24/7/22
247+  8D8F              ;
248+  8D8F              ;	Ciclo_completo.
249+  8D8F              ;
250+  8D8F              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
251+  8D8F              ;
252+  8D8F              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
253+  8D8F              ; 	Decrementamos (Columns).
254+  8D8F              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
255+  8D8F              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
256+  8D8F
257+  8D8F
258+  8D8F 3A CE 84     Ciclo_completo ld a,(CTRL_DESPLZ)
259+  8D92 FE FF        	cp $ff
260+  8D94 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
261+  8D96 18 25        	jr 3f
262+  8D98 21 C9 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
263+  8D9B 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
264+  8D9C AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
265+  8D9D 32 CE 84     	ld (CTRL_DESPLZ),a
266+  8DA0 3A D6 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
267+  8DA3 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
268+  8DA5 20 07        	jr nz,2F
269+  8DA7 2A CA 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
270+  8DAA 23           	inc hl
271+  8DAB 22 CA 84     	ld (Posicion_actual),hl
272+  8DAE 2A D0 84     2 ld hl,(Indice_Sprite)
273+  8DB1 22 D2 84     	ld (Puntero_DESPLZ),hl
274+  8DB4 21 00 00     	ld hl,0
275+  8DB7 22 FA 84     	ld (Caja_de_DESPLZ),hl
276+  8DBA CD 7F 8F     	call Genera_coordenadas
277+  8DBD C9           3 ret
278+  8DBE
279+  8DBE              ; ******************************************************************************************************************************************************************************************
280+  8DBE              ;
281+  8DBE              ;	19/10/22
282+  8DBE              ;
283+  8DBE              ;	Mov_left.
284+  8DBE              ;
285+  8DBE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
286+  8DBE              ;
287+  8DBE              Mov_left
288+  8DBE
289+  8DBE 21 EB 84     	ld hl,Ctrl_0
290+  8DC1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
291+  8DC3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
292+  8DC3              ; 																	; _ en el caso de que no lo haya.
293+  8DC3 3A CE 84     	ld a,(CTRL_DESPLZ)
294+  8DC6 A7           	and a
295+  8DC7 20 19        	jr nz,10F
296+  8DC9
297+  8DC9 2A CC 84     	ld hl,(Puntero_objeto)
298+  8DCC 22 D2 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
299+  8DCF
300+  8DCF 3A EB 84     	ld a,(Ctrl_0)
301+  8DD2 CB 77        	bit 6,a
302+  8DD4 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
303+  8DD6
304+  8DD6 CD 1B 8F     	call Stop_Amadeus_left
305+  8DD9 20 5F        	jr nz,3F
306+  8DDB
307+  8DDB 2A D0 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
308+  8DDE 22 D2 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
309+  8DE1 C9           	ret
310+  8DE2
311+  8DE2 3A EB 84     10 	ld a,(Ctrl_0)
312+  8DE5 CB 7F        	bit 7,a
313+  8DE7 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
314+  8DE9 21 CE 84     	ld hl,CTRL_DESPLZ
315+  8DEC 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
316+  8DED
317+  8DED 3A D7 84     11 ld a,(Coordenada_X)
318+  8DF0 A7           	and a
319+  8DF1 20 47        	jr nz,3F
320+  8DF3 3A CE 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
321+  8DF6 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
322+  8DF7 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
323+  8DF9
324+  8DF9              ; ---------- ---------- ----------
325+  8DF9
326+  8DF9 3A D9 84     	ld a,(Vel_left)
327+  8DFC FE 02        	cp 2
328+  8DFE 28 0F        	jr z,1F
329+  8E00 38 04        	jr c,6F
330+  8E02 FE 04        	cp 4
331+  8E04 28 12        	jr z,7F
332+  8E06
333+  8E06              ; ---------- ---------- ----------
334+  8E06
335+  8E06 3A CE 84     6 ld a,(CTRL_DESPLZ)
336+  8E09 FE F9        	cp $f9
337+  8E0B 20 2D        	jr nz,3F
338+  8E0D 18 10        	jr 4F
339+  8E0F 3A CE 84     1 ld a,(CTRL_DESPLZ)
340+  8E12 FE FA        	cp $fa
341+  8E14 20 24        	jr nz,3F
342+  8E16 18 07        	jr 4F
343+  8E18 3A CE 84     7 ld a,(CTRL_DESPLZ)
344+  8E1B FE FC        	cp $fc
345+  8E1D 20 1B        	jr nz,3F
346+  8E1F
347+  8E1F              ; ---------- ---------- ----------
348+  8E1F
349+  8E1F CD 32 8F     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
350+  8E22              ;	call Reinicio
351+  8E22
352+  8E22              ; ---------- ---------- ----------
353+  8E22
354+  8E22 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
355+  8E24 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
356+  8E25 2A CC 84     	ld hl,(Puntero_objeto)
357+  8E28 22 D2 84     	ld (Puntero_DESPLZ),hl
358+  8E2B CD 61 8E     	call DESPLZ_IZQ
359+  8E2E C1           	pop bc
360+  8E2F 10 F3        	djnz 5B
361+  8E31 2A CA 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
362+  8E34 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
363+  8E35 22 CA 84     	ld (Posicion_actual),hl
364+  8E38 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
365+  8E3A
366+  8E3A              ; ---------- ---------- ----------
367+  8E3A
368+  8E3A 3A D9 84     3 ld a,(Vel_left)
369+  8E3D FE 08        	cp 8
370+  8E3F 20 19        	jr nz,8F
371+  8E41 2A CA 84     	ld hl,(Posicion_actual)
372+  8E44 7D           	ld a,l
373+  8E45 E6 1F        	and $1f
374+  8E47 20 05        	jr nz,9F
375+  8E49
376+  8E49              ; ---------- ---------- ----------
377+  8E49
378+  8E49 CD 32 8F     	call Reaparece_derecha
379+  8E4C
380+  8E4C              ; ---------- ---------- ----------
381+  8E4C
382+  8E4C 18 12        	jr 2F
383+  8E4E 2A CA 84     9 ld hl,(Posicion_actual)
384+  8E51 2B           	dec hl
385+  8E52 22 CA 84     	ld (Posicion_actual),hl
386+  8E55 CD 7F 8F     	call Genera_coordenadas
387+  8E58 18 06        	jr 2F
388+  8E5A 2A CA 84     8 ld hl,(Posicion_actual)
389+  8E5D CD 61 8E     	call DESPLZ_IZQ
390+  8E60 C9           2 ret
391+  8E61
392+  8E61              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E61              ;
394+  8E61              ;	22/9/22
395+  8E61
396+  8E61 CD 70 8E     DESPLZ_IZQ call Desplaza_izquierda
397+  8E64 CD 85 8E         call modifica_parametros_1er_DESPLZ
398+  8E67 CD A6 8E     	call Ciclo_completo_2
399+  8E6A 21 EB 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
400+  8E6D CB BE        	res 7,(hl)
401+  8E6F C9           	ret
402+  8E70
403+  8E70 3A D9 84     Desplaza_izquierda ld a,(Vel_left)
404+  8E73 47           	ld b,a
405+  8E74 2A D2 84     	ld hl,(Puntero_DESPLZ)
406+  8E77 2B           1 dec hl
407+  8E78 2B           	dec hl
408+  8E79 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
409+  8E7B 22 D2 84     	ld (Puntero_DESPLZ),hl
410+  8E7E CD 1F 86     	call Extrae_address
411+  8E81 22 FA 84     	ld (Caja_de_DESPLZ),hl
412+  8E84 C9           	ret
413+  8E85
414+  8E85              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
415+  8E85              ;
416+  8E85              ;	modifica_parametros_1er_DESPLZ
417+  8E85              ;
418+  8E85              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
419+  8E85              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
420+  8E85              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
421+  8E85
422+  8E85 3A CE 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
423+  8E88 A7           	and a
424+  8E89 20 17        	jr nz,1F
425+  8E8B 21 C9 84     	ld hl,Columns
426+  8E8E 34           	inc (hl)
427+  8E8F 3A D6 84     	ld a,(Cuad_objeto)
428+  8E92 E6 01        	and 1
429+  8E94 20 0C        	jr nz,1F
430+  8E96 2A CA 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
431+  8E99 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
432+  8E9A 22 CA 84     	ld (Posicion_actual),hl
433+  8E9D CD 04 8F     	call Dec_CTRL_DESPLZ
434+  8EA0 18 03        	jr 2F
435+  8EA2 CD 04 8F     1 call Dec_CTRL_DESPLZ
436+  8EA5 C9           2 ret
437+  8EA6
438+  8EA6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
439+  8EA6              ;
440+  8EA6 3A CE 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
441+  8EA9 FE F8        	cp $f8
442+  8EAB 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
443+  8EAD 18 19        	jr 3f
444+  8EAF 21 C9 84     1 ld hl,Columns
445+  8EB2 35           	dec (hl)
446+  8EB3 AF           	xor a
447+  8EB4 32 CE 84     	ld (CTRL_DESPLZ),a
448+  8EB7 3A D6 84     	ld a,(Cuad_objeto)
449+  8EBA E6 01        	and 1
450+  8EBC 28 07        	jr z,2F
451+  8EBE 2A CA 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
452+  8EC1 2B           	dec hl
453+  8EC2 22 CA 84     	ld (Posicion_actual),hl
454+  8EC5 CD 7F 8F     2 call Genera_coordenadas
455+  8EC8 C9           3 ret
456+  8EC9
457+  8EC9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
458+  8EC9
459+  8EC9 CD B6 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
460+  8ECC              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
461+  8ECC              ;																	; Filas * Columnas en DE´.
462+  8ECC 3A D6 84     	ld a,(Cuad_objeto)
463+  8ECF FE 02        	cp 2
464+  8ED1 38 1A        	jr c,2F
465+  8ED3 28 18        	jr z,2F
466+  8ED5 E6 01        	and 1
467+  8ED7 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
468+  8ED9              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
469+  8ED9              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
470+  8ED9 C5           	push bc
471+  8EDA E5           	push hl
472+  8EDB 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
473+  8EDD 0D           	dec c
474+  8EDE 2A F4 84     	ld hl,(Puntero_datas)
475+  8EE1 A7           	and a
476+  8EE2 ED 4A        	adc hl,bc
477+  8EE4 22 F4 84     	ld (Puntero_datas),hl
478+  8EE7 E1           	pop hl
479+  8EE8 C1           	pop bc
480+  8EE9 18 18        	jr 4F
481+  8EEB              1
482+  8EEB              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
483+  8EEB 18 16        	jr 4F
484+  8EED E6 01        2 and 1
485+  8EEF 28 02        	jr z,3F
486+  8EF1              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
487+  8EF1 18 10        	jr 4F
488+  8EF3              3
489+  8EF3              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
490+  8EF3 C5           	push bc
491+  8EF4 E5           	push hl
492+  8EF5 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
493+  8EF7 0D           	dec c
494+  8EF8 2A F4 84     	ld hl,(Puntero_datas)
495+  8EFB A7           	and a
496+  8EFC ED 42        	sbc hl,bc
497+  8EFE 22 F4 84     	ld (Puntero_datas),hl
498+  8F01 E1           	pop hl
499+  8F02 C1           	pop bc
500+  8F03 C9           4 ret
501+  8F04
502+  8F04              ; ---------- ---------- ---------- ---------- ---------- ----------
503+  8F04              ;
504+  8F04              ;	Dec_CTRL_DESPLZ
505+  8F04              ;
506+  8F04              ;	Subrutina de [modifica_punteros].
507+  8F04              ;
508+  8F04              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
509+  8F04
510+  8F04 21 CE 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
511+  8F07 3A D9 84     	ld a,(Vel_left)
512+  8F0A A7           	and a
513+  8F0B 28 06        	jr z,1F
514+  8F0D 47           	ld b,a
515+  8F0E 35           3 dec (hl)
516+  8F0F 10 FD        	djnz 3B
517+  8F11 18 01        	jr 2F
518+  8F13 35           1 dec (hl)
519+  8F14 C9           2 ret
520+  8F15
521+  8F15              ; ---------- ---------- ---------- ---------- ---------- ----------
522+  8F15              ;
523+  8F15              ;	19/10/22
524+  8F15              ;
525+  8F15              ;	(cp 29) para un Amadeus de 3 Columns.
526+  8F15              ;	(cp 30)   ""  ""    ""     2 Columns.
527+  8F15
528+  8F15 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
529+  8F18 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
530+  8F1A C9           	ret
531+  8F1B
532+  8F1B              ; ---------- ---------- ---------- ---------- ---------- ----------
533+  8F1B              ;
534+  8F1B              ;	19/10/22
535+  8F1B              ;
536+  8F1B              ;	(cp 2) para un Amadeus de 3 Columns.
537+  8F1B              ;	(cp 1)   ""  ""    ""     2 Columns.
538+  8F1B
539+  8F1B 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
540+  8F1E FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
541+  8F20 C9           	ret
542+  8F21
543+  8F21              ; ---------- ---------- ---------- ---------- ---------- ----------
544+  8F21              ;
545+  8F21              ;	24/7/22
546+  8F21              ;
547+  8F21              ;	Inc_CTRL_DESPLZ
548+  8F21              ;
549+  8F21              ;	Subrutina de [modifica_punteros].
550+  8F21              ;
551+  8F21              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
552+  8F21
553+  8F21 21 CE 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
554+  8F24 3A DA 84     	ld a,(Vel_right)
555+  8F27 A7           	and a
556+  8F28 28 06        	jr z,1F
557+  8F2A 47           	ld b,a
558+  8F2B 34           3 inc (hl)
559+  8F2C 10 FD        	djnz 3B
560+  8F2E 18 01        	jr 2F
561+  8F30 34           1 inc (hl)
562+  8F31 C9           2 ret
563+  8F32
564+  8F32              ; ---------- ---------- ---------- ---------- ---------- ----------
565+  8F32
566+  8F32 2A CA 84     Reaparece_derecha ld hl,(Posicion_actual)
567+  8F35 01 1F 00     	ld bc,31
568+  8F38 A7           	and a
569+  8F39 ED 4A        	adc hl,bc
570+  8F3B 22 CA 84     	ld (Posicion_actual),hl
571+  8F3E 21 EB 84     	ld hl,Ctrl_0														; $xxx1
572+  8F41 CB C6        	set 0,(hl)
573+  8F43 C9           	ret
574+  8F44
575+  8F44              ; ---------- ---------- ---------- ---------- ---------- ----------
576+  8F44
577+  8F44 2A CA 84     Reaparece_izquierda ld hl,(Posicion_actual)
578+  8F47 01 1F 00     	ld bc,31
579+  8F4A A7           	and a
580+  8F4B ED 42        	sbc hl,bc
581+  8F4D 22 CA 84     	ld (Posicion_actual),hl 											; $xx1x
582+  8F50 21 EB 84     	ld hl,Ctrl_0
583+  8F53 CB CE        	set 1,(hl)
584+  8F55 C9           	ret
585+  8F56
586+  8F56              ; ---------- ---------- ---------- ---------- ---------- ----------
587+  8F56
588+  8F56 24           Reaparece_abajo inc h
589+  8F57 01 E0 17     	ld bc,$17e0
590+  8F5A A7           	and a
591+  8F5B ED 4A        	adc hl,bc
592+  8F5D 22 CA 84     	ld (Posicion_actual),hl
593+  8F60 21 EB 84     	ld hl,Ctrl_0
594+  8F63 CB D6        	set 2,(hl)
595+  8F65 C9           	ret
596+  8F66
597+  8F66              ; ---------- ---------- ---------- ---------- ---------- ----------
598+  8F66
599+  8F66 01 E0 17     Reaparece_arriba ld bc,$17e0
600+  8F69 A7           	and a
601+  8F6A ED 42        	sbc hl,bc
602+  8F6C 22 CA 84     	ld (Posicion_actual),hl
603+  8F6F 21 EB 84     	ld hl,Ctrl_0
604+  8F72 CB DE        	set 3,(hl)
605+  8F74 C9           	ret
606+  8F75
607+  8F75              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
608+  8F75
609+  8F75 2A D4 84     Reinicio ld hl,(Posicion_inicio)
610+  8F78
611+  8F78              ;	ld (Posicion_actual),hl
612+  8F78 21 00 00     	ld hl,0
613+  8F7B 22 CA 84     	ld (Posicion_actual),hl
614+  8F7E
615+  8F7E
616+  8F7E C9           	ret
# file closed: Direcciones.asm
603   8F7F              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F7F              ;	12/12/22
  2+  8F7F              ;
  3+  8F7F              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F7F              ;	Fila superior "0", Columna izquierda "0".
  5+  8F7F              ;
  6+  8F7F              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F7F              ;
  8+  8F7F              ;	Modifica: A
  9+  8F7F
 10+  8F7F C5           Genera_coordenadas push bc
 11+  8F80 E5           	push hl
 12+  8F81 2A CA 84     	ld hl,(Posicion_actual)
 13+  8F84 7D           	ld a,l
 14+  8F85 E6 1F        	and $1f
 15+  8F87 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F8A CD 0D 8C     	call calcula_tercio
 17+  8F8D 47           	ld b,a
 18+  8F8E 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F8F 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F91 7D           	ld a,l
 21+  8F92 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F94 28 05        	jr z,2F
 23+  8F96 0C           1 inc c
 24+  8F97 D6 20        	sub 32
 25+  8F99 20 FB        	jr nz,1B
 26+  8F9B 0C           2 inc c
 27+  8F9C 04           	inc b
 28+  8F9D 05           	dec b
 29+  8F9E 28 04        	jr z,3F
 30+  8FA0 3E E0        	ld a,$e0
 31+  8FA2 10 F2        	djnz 1B
 32+  8FA4 79           3 ld a,c
 33+  8FA5 3D           	dec a
 34+  8FA6 32 D8 84     	ld (Coordenada_y),a
 35+  8FA9 E1           	pop hl
 36+  8FAA C1           	pop bc
 37+  8FAB C9           	ret
# file closed: Genera_coordenadas.asm
604   8FAC              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FAC
  2+  8FAC
  3+  8FAC              ;   11/8/22
  4+  8FAC              ;
  5+  8FAC              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FAC              ;
  7+  8FAC              ;   Mov_obj.asm
  8+  8FAC              ;
  9+  8FAC              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FAC              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FAC              ;
 12+  8FAC              ;   Codificación:
 13+  8FAC              ;
 14+  8FAC              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FAC              ;
 16+  8FAC
 17+  8FAC 02 10 00     Izquierda db 2,%00010000,0
 18+  8FAF 02 20 00     Derecha db 2,%00100000,0
 19+  8FB2 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FB6 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FBA 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FBE 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FC2 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FC6 60 42 60 40
 23+  8FCA 63
 24+  8FCB 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FCF 22 A3 80 A0
 25+  8FD3 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FD7 84 A0 83 A0
 26+  8FDB 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FDF 80 A3 22 A0
 27+  8FE3 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FE7 40 60 42 60
 28+  8FEB 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FEF
 30+  8FEF AF 8F        Indice_mov_Badsat defw Derecha
 31+  8FF1 B6 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FF3 BE 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FF5 B2 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FF7
 35+  8FF7 3A F1 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FFA A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FFB 28 02            jr z,1F
 38+  8FFD 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FFF
 40+  8FFF 3A F2 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  9002 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  9004 32 F2 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  9007              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  9007 2A EF 84         ld hl,(Puntero_mov)
 45+  900A 7E               ld a,(hl)
 46+  900B 32 F1 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  900E 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  900F 22 EF 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  9012
 50+  9012 3A F3 84     Decoder ld a,(Repetimos_db)
 51+  9015 A7               and a
 52+  9016 20 0C            jr nz,12F
 53+  9018 2A EF 84         ld hl,(Puntero_mov)
 54+  901B 7E               ld a,(hl)
 55+  901C A7               and a
 56+  901D 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  901F
 58+  901F E6 0F            and $0f
 59+  9021 32 F3 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  9024              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  9024 2A EF 84     12 ld hl,(Puntero_mov)
 62+  9027 CB 7E            bit 7,(hl)
 63+  9029 28 03            jr z,2F
 64+  902B CD 59 8C         call Mov_down
 65+  902E 2A EF 84     2 ld hl, (Puntero_mov)
 66+  9031 CB 76            bit 6,(hl)
 67+  9033 28 03            jr z,3F
 68+  9035 CD 84 8C         call Mov_up
 69+  9038 2A EF 84     3 ld hl, (Puntero_mov)
 70+  903B CB 6E            bit 5,(hl)
 71+  903D 28 03            jr z,4F
 72+  903F CD AF 8C         call Mov_right
 73+  9042 2A EF 84     4 ld hl, (Puntero_mov)
 74+  9045 CB 66            bit 4,(hl)
 75+  9047 28 03            jr z,5F
 76+  9049 CD BE 8D         call Mov_left
 77+  904C
 78+  904C              ; ---------- --------- --------- ---------- ----------
 79+  904C
 80+  904C 3A F3 84     5 ld a,(Repetimos_db)
 81+  904F A7               and a
 82+  9050 28 07            jr z,6F
 83+  9052 3D               dec a
 84+  9053 32 F3 84         ld (Repetimos_db),a
 85+  9056 28 01            jr z,6f
 86+  9058 C9           11 ret
 87+  9059 21 F1 84     6 ld hl,Contador_db_mov
 88+  905C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  905D 2A EF 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9060 23               inc hl
 91+  9061 22 EF 84         ld (Puntero_mov),hl
 92+  9064 18 F2            jr 11B
 93+  9066 2A ED 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9069 3A F2 84         ld a,(Incrementa_puntero)
 95+  906C 47               ld b,a
 96+  906D 23           8 inc hl
 97+  906E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9070 5E               ld e,(hl)
 99+  9071 23               inc hl
100+  9072 56               ld d,(hl)
101+  9073 EB               ex de,hl
102+  9074 22 EF 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  9077 18 DF            jr 11B
104+  9079
105+  9079              ; ---------- --------- --------- ---------- ----------
106+  9079              ;
107+  9079              ;   11/8/22
108+  9079              ;
109+  9079              ;   Prepara_Puntero_mov
110+  9079
111+  9079 E5           Prepara_Puntero_mov push hl
112+  907A D5               push de
113+  907B 2A ED 84         ld hl,(Puntero_indice_mov)
114+  907E 5E               ld e,(hl)
115+  907F 23               inc hl
116+  9080 56               ld d,(hl)
117+  9081 EB               ex de,hl
118+  9082 22 EF 84         ld (Puntero_mov),hl
119+  9085 D1               pop de
120+  9086 E1               pop hl
121+  9087 C9               ret
122+  9088
123+  9088              ; ---------- --------- --------- ---------- ----------
124+  9088              ;
125+  9088              ;   11/8/22
126+  9088              ;
127+  9088              ;   Reinicia_el_movimiento
128+  9088
129+  9088 CD 79 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  908B AF               xor a
131+  908C 32 F1 84         ld (Contador_db_mov),a
132+  908F 32 F2 84         ld (Incrementa_puntero),a
133+  9092 C3 F7 8F         jp Movimiento
134+  9095
135+  9095              ; ---------- --------- --------- ---------- ----------
136+  9095
137+  9095
138+  9095
139+  9095
140+  9095
141+  9095
142+  9095
143+  9095
144+  9095
145+  9095
146+  9095
147+  9095
148+  9095
149+  9095
150+  9095
151+  9095
152+  9095
153+  9095
# file closed: Patrones_de_mov.asm
605   9095              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9095              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9095              ;
  3+  9095              ;	3/1/23
  4+  9095              ;
  5+  9095              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9095
  7+  9095              ;	ADC HL,SP	LD (addr),SP
  8+  9095              ;	ADD HL,SP	LD SP,(addr)
  9+  9095              ;	ADD IX,SP	LD SP,nn
 10+  9095              ; 	ADD IY,SP	LD SP,HL
 11+  9095              ;				LD SP,IX
 12+  9095              ;	DEC SP		LD SP,IY
 13+  9095
 14+  9095              ;	EX (SP),HL
 15+  9095              ;	EX (SP),IX
 16+  9095              ;	EX (SP),IY
 17+  9095
 18+  9095              ;	INC SP
 19+  9095
 20+  9095
 21+  9095                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 06 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 0A 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 0A 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 06 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
606   7FC0
607   7FC0              	SAVESNA "Pruebas.sna", START
608   7FC0
609   7FC0
610   7FC0
# file closed: Banco_de_pruebas.asm
