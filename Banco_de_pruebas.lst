# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 4F 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 FE 83        	defw Entidad_1
  9+  83C2 32 84        	defw Entidad_2
 10+  83C4              ;	defw Entidad_3
 11+  83C4              ;	defw Entidad_4
 12+  83C4 CA 83        	defw Amadeus_db
 13+  83C6              ;	...
 14+  83C6              ;	...
 15+  83C6              ;	+ entidades ...
 16+  83C6
 17+  83C6 00 00        	defw 0
 18+  83C8 00 00        	defw 0
 19+  83CA
 20+  83CA              ; ---------- ---------- ---------- ---------- ----------
 21+  83CA
 22+  83CA 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 23+  83CC 00 00        	defw 0 											; (Posicion_actual).
 24+  83CE 00 00        	defw 0 											; (Puntero_objeto).
 25+  83D0 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 26+  83D3
 27+  83D3 05           	db %00000101									; (Attr).
 28+  83D4 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 29+  83D6 00 00        	defw 0	 										; (Puntero_DESPLZ).
 30+  83D8 CF 50        	defw $50cf										; (Posicion_inicio).
 31+  83DA 00           	db 0 											; (Cuad_objeto).
 32+  83DB
 33+  83DB 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 34+  83DF
 35+  83DF 00 00        	db 0,0											; Variables_de_borrado
 36+  83E1 00 00        	defw 0											;	" " " " " " "
 37+  83E3 00 00        	defw 0											;	" " " " " " "
 38+  83E5 00 00 00     	db 0,0,0										;	" " " " " " "
 39+  83E8
 40+  83E8 00 00        	db 0,0											; Variables_de_pintado
 41+  83EA 00 00        	defw 0											;	" " " " " " "
 42+  83EC 00 00        	defw 0											;	" " " " " " "
 43+  83EE 00 00 00     	db 0,0,0										;	" " " " " " "
 44+  83F1
 45+  83F1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 46+  83F3
 47+  83F3 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 48+  83F7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 49+  83FA
 50+  83FA 00           	db 0 											; (Columnas).
 51+  83FB 00 00        	defw 0											; (Limite_horizontal).
 52+  83FD 00           	db 0											; (Limite_vertical).
 53+  83FE
 54+  83FE              ; ---------- ---------- ---------- ---------- ----------
 55+  83FE
 56+  83FE 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 57+  8400 00 00        	defw 0											; (Posicion_actual).
 58+  8402 00 00        	defw 0 											; (Puntero_objeto).
 59+  8404 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 60+  8407
 61+  8407 00           	db %00000000 									; (Attr).
 62+  8408 00 00        	defw 0											; (Indice_Sprite).
 63+  840A 00 00        	defw 0											; (Puntero_DESPLZ).
 64+  840C 00 00        	defw 0											; (Posicion_inicio).
 65+  840E 00           	db 0											; (Cuad_objeto).
 66+  840F
 67+  840F 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 68+  8413
 69+  8413 00 00        	db 0,0										    ; Variables_de_borrado
 70+  8415 00 00        	defw 0											;	" " " " " " "
 71+  8417 00 00        	defw 0											;	" " " " " " "
 72+  8419 00 00 00     	db 0,0,0										;	" " " " " " "
 73+  841C
 74+  841C 00 00        	db 0,0											; Variables_de_pintado
 75+  841E 00 00        	defw 0											;	" " " " " " "
 76+  8420 00 00        	defw 0											;	" " " " " " "
 77+  8422 00 00 00     	db 0,0,0										;	" " " " " " "
 78+  8425
 79+  8425 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 80+  8427
 81+  8427 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 82+  842B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 83+  842E
 84+  842E 00           	db 0 											; (Columnas).
 85+  842F 00 00        	defw 0											; (Limite_horizontal).
 86+  8431 00           	db 0											; (Limite_vertical).
 87+  8432
 88+  8432              ; ---------- ---------- ---------- ---------- ----------
 89+  8432
 90+  8432 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 91+  8434 00 00        	defw 0                                          ; (Posicion_actual).
 92+  8436 00 00        	defw 0											; (Puntero_objeto).
 93+  8438 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 94+  843B
 95+  843B 02           	db %00000010									; (Attr).
 96+  843C 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 97+  843E 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 98+  8440 7E 47        	defw $477e                                      ; (Posicion_inicio).
 99+  8442 02           	db 2											; (Cuad_objeto).
100+  8443
101+  8443 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
102+  8447
103+  8447 00 00        	db 0,0											; Variables_de_borrado
104+  8449 00 00        	defw 0										 	;	" " " " " " "
105+  844B 00 00        	defw 0											;	" " " " " " "
106+  844D 00 00 00     	db 0,0,0										;	" " " " " " "
107+  8450
108+  8450 00 00        	db 0,0											; Variables_de_pintado
109+  8452 00 00        	defw 0											;	" " " " " " "
110+  8454 00 00        	defw 0											;	" " " " " " "
111+  8456 00 00 00     	db 0,0,0										;	" " " " " " "
112+  8459
113+  8459 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
114+  845B
115+  845B B3 8F 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
116+  845F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
117+  8462
118+  8462 00           	db 0 											; (Columnas).
119+  8463 00 00        	defw 0											; (Limite_horizontal).
120+  8465 00           	db 0											; (Limite_vertical).
121+  8466
122+  8466              ; ---------- ---------- ---------- ---------- ----------
123+  8466
124+  8466 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
125+  8468 00 00        	defw 0                                          ; (Posicion_actual).
126+  846A 00 00        	defw 0											; (Puntero_objeto).
127+  846C 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
128+  846F
129+  846F 04           	db %00000100									; (Attr).
130+  8470 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
131+  8472 00 00        	defw 0                                          ; (Puntero_DESPLZ).
132+  8474 A1 47        	defw $47a1                                      ; (Posicion_inicio).
133+  8476 01           	db 1											; (Cuad_objeto).
134+  8477
135+  8477 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
136+  847B
137+  847B 00 00        	db 0,0											; Variables_de_borrado
138+  847D 00 00        	defw 0										 	;	" " " " " " "
139+  847F 00 00        	defw 0											;	" " " " " " "
140+  8481 00 00 00     	db 0,0,0										;	" " " " " " "
141+  8484
142+  8484 00 00        	db 0,0											; Variables_de_pintado
143+  8486 00 00        	defw 0											;	" " " " " " "
144+  8488 00 00        	defw 0											;	" " " " " " "
145+  848A 00 00 00     	db 0,0,0										;	" " " " " " "
146+  848D
147+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
148+  848F
149+  848F B5 8F 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
150+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
151+  8496
152+  8496 00           	db 0 											; (Columnas).
153+  8497 00 00        	defw 0											; (Limite_horizontal).
154+  8499 00           	db 0											; (Limite_vertical).
155+  849A
156+  849A              ; ---------- ---------- ---------- ---------- ----------
157+  849A
158+  849A 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
159+  849C 00 00        	defw 0                                          ; (Posicion_actual).
160+  849E 00 00        	defw 0 											; (Puntero_objeto).
161+  84A0 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
162+  84A3
163+  84A3 01           	db %00000001									; (Attr).
164+  84A4 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
165+  84A6 00 00        	defw 0                                          ; (Puntero_DESPLZ).
166+  84A8 BE 47        	defw $47be                                      ; (Posicion_inicio).
167+  84AA 00           	db 0											; (Cuad_objeto).
168+  84AB
169+  84AB 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
170+  84AF
171+  84AF 00 00        	db 0,0											; Variables_de_borrado
172+  84B1 00 00        	defw 0										 	;	" " " " " " "
173+  84B3 00 00        	defw 0											;	" " " " " " "
174+  84B5 00 00 00     	db 0,0,0										;	" " " " " " "
175+  84B8
176+  84B8 00 00        	db 0,0											; Variables_de_pintado
177+  84BA 00 00        	defw 0											;	" " " " " " "
178+  84BC 00 00        	defw 0											;	" " " " " " "
179+  84BE 00 00 00     	db 0,0,0										;	" " " " " " "
180+  84C1
181+  84C1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
182+  84C3
183+  84C3 A5 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
184+  84C7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
185+  84CA
186+  84CA 00           	db 0 											; (Columnas).
187+  84CB 00 00        	defw 0											; (Limite_horizontal).
188+  84CD 00           	db 0											; (Limite_vertical).
189+  84CE
# file closed: Base_de_datos_Sprites.asm
 21   84CE
 22   84CE              ; ******************************************************************************************************************************************************************************************
 23   84CE              ; Constantes.
 24   84CE              ; ******************************************************************************************************************************************************************************************
 25   84CE              ;
 26   84CE              ; 8/11/22
 27   84CE              ;
 28   84CE              ; Constantes generales.
 29   84CE              ;
 30   84CE
 31   84CE              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84CE              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84CE              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84CE              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84CE              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84CE
 37   84CE              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84CE              ;                               				        ; De momento situamos este almacén en $7000.
 39   84CE
 40   84CE
 41   84CE              ; ******************************************************************************************************************************************************************************************
 42   84CE              ; Variables.
 43   84CE              ; ******************************************************************************************************************************************************************************************
 44   84CE              ;
 45   84CE              ; 10/11/22
 46   84CE              ;
 47   84CE              ; Variables de DRAW. (Motor principal).
 48   84CE              ;
 49   84CE              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84CE
 51   84CE 02           Filas db 2												; Filas. [DRAW]
 52   84CF 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D0 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D2 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D4 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D5              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D5              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D5              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D5 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D6 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D7
 62   84D7              ; ---------- ---------- ----------
 63   84D7
 64   84D7
 65   84D7 04           Attr db %00000100										; Atributos de la entidad:
 66   84D8
 67   84D8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84D8              ;
 69   84D8              ;	COLORES: 0 ..... NEGRO
 70   84D8              ;    		 1 ..... AZUL
 71   84D8              ; 			 2 ..... ROJO
 72   84D8              ;			 3 ..... MAGENTA
 73   84D8              ; 			 4 ..... VERDE
 74   84D8              ; 			 5 ..... CIAN
 75   84D8              ;			 6 ..... AMARILLO
 76   84D8              ; 			 7 ..... BLANCO
 77   84D8
 78   84D8 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DA 00 00        Puntero_DESPLZ defw 0
 80   84DC 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84DE 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84DF
 83   84DF              ; Variables de objeto. (Características).
 84   84DF
 85   84DF 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E0 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E1 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E2 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E3
 90   84E3 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E5 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E7 00 00        	defw 0
 93   84E9 00 00 00     	db 0,0,0
 94   84EC
 95   84EC 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84EE 00 00        	defw 0
 97   84F0 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F2 00 00 00     	db 0,0,0
 99   84F5
100   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F5
102   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F6              ;
108   84F6              ; 														DESCRIPCIÖN:
109   84F6              ;
110   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F6              ;
124   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F6
128   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F7
130   84F7              ; Movimiento.
131   84F7
132   84F7 A7 8F        Puntero_indice_mov defw Indice_mov_Derecha
133   84F9 00 00        Puntero_mov defw 0
134   84FB 00           Contador_db_mov db 0
135   84FC 00           Incrementa_puntero db 0
136   84FD 00           Repetimos_db db 0
137   84FE
138   84FE
139   84FE              ; Variables de funcionamiento. [DRAW].
140   84FE
141   84FE 00           Columnas db 0
142   84FF 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8501              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8501 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8502
146   8502              ; 52 Bytes por entidad.
147   8502              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8502              ;					         		---------;      ;---------
149   8502
150   8502
151   8502              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8502              ; Gestión de ENTIDADES.
153   8502
154   8502 00 00        Puntero_store_entidades defw 0
155   8504 00 00        Puntero_restore_entidades defw 0
156   8506 00 00        Indice_restore defw 0
157   8508 03           Numero_de_entidades db 3								; Nº de objetos en pantalla, (contando con Amadeus).
158   8509 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850A              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850A              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850A              ;														; _ (Numero_de_malotes)="0".
162   850A 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850C              ;														; _variable para almacenar lo posición del puntero_
164   850C              ; 														; _de pila, SP.
165   850C 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   850E              ;														; La utiliza la rutina [Extrae_foto_registros].
167   850E 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8510              ;														; _el snapshot de los registros de la siguiente entidad.
169   8510              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8510
171   8510              ; Gestión de FRAMES.
172   8510
173   8510 00           Switch db 0
174   8511
175   8511              ; Variables de Raster y localización en pantalla.
176   8511
177   8511 00 FF        Temp_Raster defw $ff00
178   8513
179   8513              ; Rutina principal *************************************************************************************************************************************************************************
180   8513              ;
181   8513              ;	14/11/22
182   8513
183   8513 31 FF FF     START ld sp,$ffff
184   8516
185   8516 3E A0        	ld a,$a0
186   8518 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851A ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851C F3           	DI
189   851D
190   851D 3E 01        	ld a,1
191   851F D3 FE        	out ($fe),a
192   8521
193   8521 3E 07        	ld a,%00000111
194   8523 CD 57 8C     	call Cls
195   8526
196   8526              ;	call Pinta_FILAS
197   8526
198   8526 CD 89 86     	call Pulsa_ENTER
199   8529
200   8529              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   8529              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   8529              ;	Pintamos el resto de entidades:
203   8529
204   8529 CD FC 85     	call Inicia_punteros_de_entidades
205   852C 21 08 85     	ld hl,Numero_de_entidades
206   852F 46           	ld b,(hl)
207   8530
208   8530 C5           1 push bc  												; Guardo el contador de entidades.
209   8531 CD 2B 86      	call Inicia_Puntero_objeto
210   8534 CD E0 86     	call Draw
211   8537 CD A0 7F     	call Guarda_foto_registros
212   853A CD 48 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   853D C1           	pop bc
214   853E 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8540
216   8540              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8540
218   8540 CD FC 85     	call Inicia_punteros_de_entidades
219   8543 CD 77 86     	call Restore_Primera_entidad
220   8546
221   8546 3A 08 85     	ld a,(Numero_de_entidades)
222   8549 32 09 85     	ld (Numero_de_malotes),a
223   854C
224   854C FB           2 ei
225   854D 18 FD        	jr 2B
226   854F
227   854F              ; -----------------------------------------------------------------------------------
228   854F
229   854F              Frame
230   854F
231   854F              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   854F              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   854F
234   854F 3E 07            ld a,7
235   8551 D3 FE            out ($fe),a
236   8553
237   8553 CD E4 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   8556
239   8556 3E 01            ld a,1
240   8558 D3 FE            out ($fe),a
241   855A
242   855A              ; ----------------------------------------------------------------------
243   855A
244   855A 21 00 70     	ld hl,Album_de_fotos
245   855D 22 0E 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8560              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8560 3A 08 85         ld a,(Numero_de_entidades)
248   8563 47               ld b,a
249   8564
250   8564 C5           2 push bc
251   8565
252   8565 CD 8B 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   8568
254   8568 3A F5 84      	ld a,(Ctrl_0)
255   856B CB 67        	bit 4,a
256   856D 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   856F
258   856F CD C3 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8572
260   8572 21 F5 84     	ld hl,Ctrl_0
261   8575 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
262   8577
263   8577 CD 48 86     1 call Store_Restore_entidades
264   857A
265   857A C1           	pop bc
266   857B 10 E7        	djnz 2B
267   857D
268   857D CD FC 85     	call Inicia_punteros_de_entidades
269   8580 CD 77 86     	call Restore_Primera_entidad
270   8583 CD 12 86     	call Calcula_numero_de_malotes
271   8586
272   8586 3E 00        	ld a,0
273   8588 D3 FE        	out ($fe),a
274   858A
275   858A C9           	ret
276   858B
277   858B              ; --------------------------------------------------------------------------------------------------------------
278   858B              ;
279   858B              Mov_obj
280   858B
281   858B              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
282   858B
283   858B AF           	xor a
284   858C 32 F6 84     	ld (Obj_dibujado),a
285   858F CD CD 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
286   8592              ;														; Obj_dibujado="0".
287   8592              ; Movemos Amadeus o enemigos...
288   8592
289   8592 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   8595 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   8597 C4 9D 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   859A
293   859A 3A F5 84     	ld a,(Ctrl_0)
294   859D CB 77        	bit 6,a
295   859F CC B7 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A2
297   85A2 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85A5 CB 67        	bit 4,a
299   85A7 C8           	ret z
300   85A8
301   85A8              ; ---------
302   85A8
303   85A8 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
304   85AA 32 F6 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
305   85AD CD CD 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
306   85B0
307   85B0 CD E4 85         call Repone_borrar
308   85B3
309   85B3              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
310   85B3
311   85B3 CD BA 89     	call Prepara_draw
312   85B6 CD F4 88     	call calcula_CColumnass
313   85B9 CD 2B 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
314   85BC CD 80 89     	call Define_rutina_de_impresion
315   85BF CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
316   85C2
317   85C2 C9           	ret
318   85C3
319   85C3              ; --------------------------------------------------------------------------------------------------------------
320   85C3              ;
321   85C3 CD F0 85     Borra_Pinta_obj call Repone_pintar
322   85C6 CD E0 86     	call Draw
323   85C9 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
324   85CC C9           	ret
325   85CD
326   85CD              ; --------------------------------------------------------------------------------------------------------------
327   85CD
328   85CD 21 CE 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85D0 3A F6 84     	ld a,(Obj_dibujado)
330   85D3 A7           	and a
331   85D4 28 05        	jr z,1F
332   85D6 11 EC 84     	ld de,Variables_de_pintado
333   85D9 18 03        	jr 2F
334   85DB 11 E3 84     1 ld de,Variables_de_borrado
335   85DE 01 09 00     2 ld bc,9
336   85E1 ED B0        	ldir
337   85E3 C9           	ret
338   85E4
339   85E4 21 E3 84     Repone_borrar ld hl,Variables_de_borrado
340   85E7 11 CE 84     	ld de,Filas
341   85EA 01 09 00     	ld bc,9
342   85ED ED B0        	ldir
343   85EF C9           	ret
344   85F0
345   85F0 21 EC 84     Repone_pintar ld hl,Variables_de_pintado
346   85F3 11 CE 84     	ld de,Filas
347   85F6 01 09 00     	ld bc,9
348   85F9 ED B0        	ldir
349   85FB C9           	ret
350   85FC
351   85FC              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   85FC              ;	ld (Caja_de_BORRADO),hl
353   85FC              ;	ret
354   85FC
355   85FC              ; *************************************************************************************************************************************************************
356   85FC              ;
357   85FC              ; 8/1/23
358   85FC              ;
359   85FC              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
360   85FC              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
361   85FC              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
362   85FC
363   85FC              ; Destruye HL y DE !!!!!
364   85FC
365   85FC 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
366   85FF CD 25 86         call Extrae_address
367   8602 22 02 85         ld (Puntero_store_entidades),hl
368   8605 21 C2 83     	ld hl,Indice_de_entidades+2
369   8608 22 06 85     	ld (Indice_restore),hl
370   860B CD 25 86     	call Extrae_address
371   860E 22 04 85     	ld (Puntero_restore_entidades),hl
372   8611 C9               ret
373   8612
374   8612              ; -------------------------------------------------------------------------------------------------------------
375   8612              ;
376   8612              ; 7/1/23
377   8612              ;
378   8612
379   8612 2A 0E 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   8615 AF           	xor a
381   8616 67           	ld h,a
382   8617 7D           	ld a,l
383   8618 D6 06        1 sub 6
384   861A 28 03        	jr z,2F
385   861C 24           	inc h
386   861D 18 F9        	jr 1B
387   861F 24           2 inc h
388   8620 7C           	ld a,h
389   8621 32 09 85     	ld (Numero_de_malotes),a
390   8624 C9           	ret
391   8625
392   8625              ; *************************************************************************************************************************************************************
393   8625              ;
394   8625              ; 20/10/22
395   8625              ;
396   8625              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   8625              ;
398   8625              ; Destruye el puntero y DE !!!!!
399   8625
400   8625 5E           Extrae_address ld e,(hl)
401   8626 23           	inc hl
402   8627 56           	ld d,(hl)
403   8628 2B           	dec hl
404   8629 EB           	ex de,hl
405   862A C9           	ret
406   862B
407   862B              ; *************************************************************************************************************************************************************
408   862B              ;
409   862B              ;	21/9/22
410   862B              ;
411   862B              ;   Destruye HL y BC !!!!!,
412   862B
413   862B 2A D8 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
414   862E 22 DA 84     	ld (Puntero_DESPLZ),hl
415   8631 CD 25 86     	call Extrae_address
416   8634 22 D2 84     	ld (Puntero_objeto),hl
417   8637
418   8637              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   8637
420   8637 21 10 83     	ld hl,Amadeus
421   863A ED 4B D2 84  	ld bc,(Puntero_objeto)
422   863E B7 ED 42     	sub hl,bc
423   8641 C0           	ret nz
424   8642
425   8642 21 F5 84     	ld hl,Ctrl_0
426   8645 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   8647
428   8647 C9            	ret 												; _de nuestra nave en los extremos.
429   8648
430   8648              ; *************************************************************************************************************************************************************
431   8648              ;
432   8648              ;	8/1/23
433   8648              ;
434   8648              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
435   8648              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
436   8648
437   8648              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
438   8648              ;	_de la 2ª y 3ª entidad respectivamente.
439   8648
440   8648
441   8648
442   8648              Store_Restore_entidades
443   8648
444   8648 E5           	push hl
445   8649 D5           	push de
446   864A C5            	push bc
447   864B
448   864B              ;	STORE !!!!!
449   864B              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
450   864B
451   864B 21 CE 84     	ld hl,Filas
452   864E ED 5B 02 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
453   8652 01 34 00     	ld bc,52
454   8655 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
455   8657
456   8657              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
457   8657
458   8657 2A 04 85     	ld hl,(Puntero_restore_entidades)
459   865A 22 02 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
460   865D 11 CE 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
461   8660 01 34 00     	ld bc,52
462   8663 ED B0        	ldir
463   8665
464   8665              ;	Incrementa RESTORE !!!!!
465   8665
466   8665 2A 06 85         ld hl,(Indice_restore)
467   8668 23           	inc hl
468   8669 23           	inc hl
469   866A 22 06 85     	ld (Indice_restore),hl
470   866D CD 25 86         call Extrae_address
471   8670 22 04 85         ld (Puntero_restore_entidades),hl
472   8673
473   8673 C1           	pop bc
474   8674 D1           	pop de
475   8675 E1           	pop hl
476   8676
477   8676 C9           	ret
478   8677
479   8677              ; **************************************************************************************************
480   8677              ;
481   8677              ;	29/10/22
482   8677              ;
483   8677              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
484   8677
485   8677 E5           Restore_Primera_entidad push hl
486   8678 D5           	push de
487   8679 C5            	push bc
488   867A 2A 02 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
489   867D 11 CE 84     	ld de,Filas
490   8680 01 34 00     	ld bc,52
491   8683 ED B0        	ldir
492   8685 C1           	pop bc
493   8686 D1           	pop de
494   8687 E1           	pop hl
495   8688 C9           	ret
496   8689
497   8689              ; *************************************************************************************************************************************************************
498   8689              ;
499   8689              ; Teclado.
500   8689
501   8689 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
502   868B DB FE        	in a,($fe)
503   868D E6 01        	and $01
504   868F 28 02        	jr z,1f
505   8691 18 F6        	jr Pulsa_ENTER
506   8693 C9           1 ret
507   8694
508   8694              ; **************************************************************************************************
509   8694              ;
510   8694              ; Temporización.
511   8694
512   8694              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
513   8694              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
514   8694              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
515   8694              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
516   8694
517   8694              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
518   8694              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
519   8694              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
520   8694
521   8694              ; A partir de $4f61 no hace falta DELAY.
522   8694
523   8694              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
524   8694
525   8694 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
526   8697 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
527   8698 78           	LD A,B
528   8699 A7           	AND A
529   869A 20 FB        	JR NZ,wait
530   869C C9           	RET
531   869D
532   869D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
533   869D              ;
534   869D              ;	21/4/22
535   869D
536   869D              Movimiento_Amadeus
537   869D
538   869D 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
539   869F DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
540   86A1 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
541   86A3 CC BA 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
542   86A6 3E F7        	ld a,$f7
543   86A8 DB FE        	in a,($fe)
544   86AA E6 01        	and $01
545   86AC C8           	ret z
546   86AD 3E F7        	ld a,$f7
547   86AF DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
548   86B1 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
549   86B3 CC C7 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
550   86B6 C9               ret
551   86B7
552   86B7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
553   86B7
554   86B7              ; Pinta indicadores de FILAS. ------------------------------------------------------
555   86B7
556   86B7 21 10 40     Pinta_FILAS ld hl,$4010
557   86BA              ;	ld b,9
558   86BA              ;2 push hl
559   86BA              ;	push bc
560   86BA 06 BF        	ld b,$bf
561   86BC 36 80        1 ld (hl),%10000000
562   86BE CD C6 89     	call NextScan
563   86C1 10 F9        	djnz 1B
564   86C3              ;	pop bc
565   86C3              ;	pop hl
566   86C3              ;	inc l
567   86C3              ;	djnz 2B
568   86C3
569   86C3 06 03        	ld b,3
570   86C5 21 00 47         ld hl,$4700
571   86C8 CD CE 86     3 call Bucle_1
572   86CB 10 FB            djnz 3B
573   86CD C9               ret
574   86CE
575   86CE C5           Bucle_1 push bc
576   86CF E5                   push hl
577   86D0 D1                   pop de
578   86D1 13                   inc de
579   86D2 01 FF 00             ld bc,255
580   86D5 36 FF                ld (hl),255
581   86D7 ED B0                ldir
582   86D9 23                   inc hl
583   86DA 3E 07                ld a,7
584   86DC 84                   add a,h
585   86DD 67                   ld h,a
586   86DE C1                   pop bc
587   86DF C9                   ret
588   86E0
589   86E0              ; ---------------------------------------------------------------
590   86E0
591   86E0              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E0              ; ******************************************************************************************************************************************************************************************
  2+  86E0              ;
  3+  86E0              ; 01/23
  4+  86E0              ;
  5+  86E0              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E0
  7+  86E0 CD BA 89     Draw call Prepara_draw
  8+  86E3 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86E4 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86E5 28 05        	jr z,2F
 11+  86E7 3A DE 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86EA 18 0C        	jr 1F
 13+  86EC 2A DC 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86EF 22 D0 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F2 CD 81 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86F5              ;													; _la esquina superior izquierda de la pantalla.
 17+  86F5 CD 39 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86F8 3A F5 84     1 ld a,(Ctrl_0)
 19+  86FB CB 6F        	bit 5,a
 20+  86FD 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  86FF
 22+  86FF CD 17 87     	call Comprueba_limite_horizontal
 23+  8702 CD A7 87     	call Comprueba_limite_vertical
 24+  8705
 25+  8705              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8705
 27+  8705 CD F4 88     3 call calcula_CColumnass
 28+  8708 CD 2B 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870B CD 80 89     	call Define_rutina_de_impresion
 30+  870E
 31+  870E 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8711 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8713 32 F5 84     	ld (Ctrl_0),a
 34+  8716
 35+  8716 C9           	ret
 36+  8717
 37+  8717              ; *******************************************************************************************************************************************************************************************
 38+  8717              ;	21/01/23
 39+  8717              ;
 40+  8717              ; 	Comprueba_limite_horizontal.
 41+  8717              ;
 42+  8717              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8717              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8717              ;
 45+  8717              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8717              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8717              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8717              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8717
 50+  8717
 51+  8717
 52+  8717 3A F5 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  871A CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  871C 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  871E E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8720 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8723 18 09            jr 6F
 58+  8725 CB 5F        1 bit 3,a
 59+  8727 28 0A            jr z,2F
 60+  8729 E6 F7            and $f7
 61+  872B 32 F5 84         ld (Ctrl_0),a
 62+  872E CD 81 88     6 call Inicializacion
 63+  8731 18 5B            jr 5F
 64+  8733 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  8734
 66+  8734              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8734              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8734
 69+  8734 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8735 2A FF 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  8738 CD 1F 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  873B 67           	ld h,a
 73+  873C EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  873D CD 1F 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8740 67           	ld h,a
 76+  8741 A7           	and a
 77+  8742 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8744 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8745 3A DE 84     	ld a,(Cuad_objeto)
 80+  8748 FE 02        	cp 2
 81+  874A 38 1E        	jr c,3F
 82+  874C 28 1C        	jr z,3F
 83+  874E 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  874F 28 23            jr z,7F
 85+  8751 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8753 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8755 E1           	pop hl
 88+  8756
 89+  8756              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8756              ; _para indicar con E="2" en caso necesario.
 91+  8756
 92+  8756 E5               push hl
 93+  8757 C5               push bc
 94+  8758 CD 1F 8C     	call calcula_tercio
 95+  875B FE 01        	cp 1
 96+  875D 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  875F CD 8F 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8762 28 26            jr z,9F
 99+  8764 38 24            jr c,9F
100+  8766 1E 00        11 ld e,0
101+  8768 18 22            jr 8F
102+  876A 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  876B 28 07        	jr z, 7F
104+  876D 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  876F 1E 00         	ld e,0
106+  8771 E1           	pop hl
107+  8772 18 04        	jr 4F
108+  8774 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  8776 18 15            jr 10F
110+  8778
111+  8778              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  8778              ; _para indicar con E="2" en caso necesario.
113+  8778
114+  8778 E5           4 push hl
115+  8779 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  877A CD 1F 8C     	call calcula_tercio
117+  877D FE 01        	cp 1
118+  877F 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  8781 CD 8F 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8784 28 04            jr z,9F
121+  8786 30 02            jr nc,9F
122+  8788 18 02        	jr 8F
123+  878A 1E 02        9 ld e,2
124+  878C C1           8 pop bc
125+  878D E1           10 pop hl
126+  878E C9           5 ret
127+  878F
128+  878F              ; --------------------
129+  878F              ;
130+  878F              ; 25/08/22
131+  878F
132+  878F CD 1F 8C     Comprueba_centro call calcula_tercio
133+  8792 67               ld h,a
134+  8793 08           	ex af,af
135+  8794 FE 02        	cp 2
136+  8796 38 07        	jr c,1F
137+  8798 28 05        	jr z,1F
138+  879A 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  879D 18 03        	jr 2F
140+  879F 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  87A2 08           2 ex af,af
142+  87A3 A7               and a
143+  87A4 ED 42            sbc hl,bc
144+  87A6 C9               ret
145+  87A7
146+  87A7              ; *********************************************************************************************************************************************************************************************
147+  87A7              ;
148+  87A7              ;   16/8/22
149+  87A7              ;
150+  87A7              ;	Comprueba_limite_vertical
151+  87A7              ;
152+  87A7              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  87A7              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  87A7              ;
155+  87A7
156+  87A7 2A D0 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  87AA 7D           	ld a,l
158+  87AB E6 1F        	and $1F
159+  87AD 57           	ld d,a
160+  87AE 3A 01 85     	ld a,(Limite_vertical)
161+  87B1 BA           	cp d 											; Límite - Posición.
162+  87B2 08           	ex af,af 										; Resultado de CP d en F'.
163+  87B3 3A DE 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  87B6 CB 47        	bit 0,a
165+  87B8 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  87BA
167+  87BA              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  87BA
169+  87BA 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  87BB 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  87BD
172+  87BD              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  87BD              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  87BD
175+  87BD 3A D5 84         ld a,(Coordenada_X)
176+  87C0 16 0F            ld d,Centro_izquierda
177+  87C2 A7               and a
178+  87C3 92               sub d 											 ; Posición - Centro_izquierda.
179+  87C4 28 1E            jr z,3F
180+  87C6 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  87C8              ;                                                    ; _salimos sin modificar nada.
182+  87C8 18 0E            jr 2F
183+  87CA 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  87CB 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  87CD
186+  87CD              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  87CD              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  87CD
189+  87CD 3A D5 84         ld a,(Coordenada_X)
190+  87D0 16 10            ld d,Centro_derecha
191+  87D2 A7               and a
192+  87D3 92               sub d
193+  87D4 28 0E            jr z,3F
194+  87D6 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  87D8              ;                                                    ; _salimos sin modificar nada.
196+  87D8 CB 43        2 bit 0,e
197+  87DA 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  87DC C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  87DD CD 71 88         call Modificaccionne
200+  87E0 C1           	pop bc
201+  87E1 CD 81 88         call Inicializacion
202+  87E4 C9           3 ret 				 								 ; Salimos de la rutina.
203+  87E5
204+  87E5              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  87E5
206+  87E5 C5           4 push bc
207+  87E6 01 CF 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  87E9 0A           	ld a,(bc)
209+  87EA 3D           	dec a
210+  87EB 47           	ld b,a 											 ; Columnas-1 en B.
211+  87EC 7D           	ld a,l
212+  87ED 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  87EE CB 47        	bit 0,a
214+  87F0 28 03        	jr z,5F
215+  87F2 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  87F3 18 2E        	jr 7F
217+  87F5
218+  87F5              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  87F5
220+  87F5 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  87F6 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  87F7 3A F5 84     	ld a,(Ctrl_0)
223+  87FA CB 4F        	bit 1,a
224+  87FC 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  87FE F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  87FF
227+  87FF              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  87FF
229+  87FF 1C               inc e
230+  8800 1D               dec e
231+  8801 20 07            jr nz,12F
232+  8803 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8804 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8805 22 D0 84     	ld (Posicion_actual),hl
235+  8808 18 44        13 jr 9F
236+  880A CB 43        12 bit 0,e
237+  880C 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  880E              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  880E C1           	pop bc
240+  880F 18 D3        	jr 3B
241+  8811 80           14 add b
242+  8812 6F               ld l,a
243+  8813 22 D0 84     	ld (Posicion_actual),hl
244+  8816 CD 71 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  8819 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  881B E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  881D 32 F5 84         ld (Ctrl_0),a
248+  8820 F1           	pop af
249+  8821 18 2B        	jr 9F
250+  8823
251+  8823              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8823
253+  8823 F5           7 push af
254+  8824 3A F5 84     	ld a,(Ctrl_0)
255+  8827 CB 47        	bit 0,a
256+  8829 20 1D        	jr nz,8F
257+  882B F1           	pop af
258+  882C
259+  882C              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  882C
261+  882C 1C           	inc e
262+  882D 1D               dec e
263+  882E 20 07            jr nz,10F
264+  8830 90           	sub b
265+  8831 6F               ld l,a
266+  8832 22 D0 84     	ld (Posicion_actual),hl
267+  8835 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  8837              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  8837 CB 43        10 bit 0,e
270+  8839 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  883B              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  883B C1           	pop bc
273+  883C 18 A6        	jr 3B
274+  883E 90           16 sub b
275+  883F 6F               ld l,a
276+  8840 22 D0 84     	ld (Posicion_actual),hl
277+  8843 CD 71 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  8846 18 06            jr 9F
279+  8848 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  884A 32 F5 84         ld (Ctrl_0),a
281+  884D F1           	pop af
282+  884E C1           9 pop bc
283+  884F 1E 00        	ld e,0
284+  8851 CD 81 88         call Inicializacion
285+  8854 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8855 08           	ex af,af
287+  8856 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  8857 18 8B            jr 3B
289+  8859
290+  8859              ; --------------------
291+  8859
292+  8859 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  885B CD D5 89     1 call PreviousScan
294+  885E 10 FB            djnz 1B
295+  8860 22 D0 84     	ld (Posicion_actual),hl
296+  8863 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  8864 C9           	ret
298+  8865
299+  8865              ; --------------------
300+  8865
301+  8865 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  8867 CD C6 89     1 call NextScan
303+  886A 10 FB            djnz 1B
304+  886C 22 D0 84     	ld (Posicion_actual),hl
305+  886F AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8870 C9           	ret
307+  8871
308+  8871              ; --------------------
309+  8871              ;
310+  8871              ;	22/01/23
311+  8871              ;
312+  8871              ;	E="1". Hemos cambiado de cuadrante.
313+  8871              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8871              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8871
316+  8871
317+  8871              Modificaccionne
318+  8871
319+  8871 3A DE 84     	ld a,(Cuad_objeto)
320+  8874 FE 02        	cp 2
321+  8876 CC 59 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  8879 DC 59 88         call c,Modifica_Pos_actual
323+  887C C8           	ret z
324+  887D CD 65 88         call Modifica_Pos_actual2
325+  8880 C9               ret
326+  8881
327+  8881              ; *************************************************************************************************************************************************************************************************
328+  8881              ;
329+  8881              ;	13/8/22
330+  8881              ;
331+  8881              ;	Inicializacion
332+  8881              ;
333+  8881              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  8881              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  8881              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  8881              ;
337+  8881              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  8881              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  8881              ;	_ desaparece/aparece.
340+  8881
341+  8881              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  8881              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  8881              ;
344+  8881              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  8881              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  8881              ; 		   [E] ="0"
347+  8881
348+  8881              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  8881
350+  8881 CD 1F 8C     Inicializacion call calcula_tercio
351+  8884 28 36        	jr z,primit
352+  8886 E6 02        	and 2
353+  8888 20 07        	jr nz,segmit
354+  888A 7D           	ld a,l
355+  888B FE 7F        	cp $7f
356+  888D 38 2D        	jr c,primit
357+  888F 28 2B        	jr z,primit
358+  8891 CD EE 88     segmit call column
359+  8894 38 13        	jr c,tercuad
360+  8896 3E 04        cuarcuad ld a,4
361+  8898 32 DE 84     	ld (Cuad_objeto),a
362+  889B 21 20 48     	ld hl,$4820
363+  889E 22 FF 84     	ld (Limite_horizontal),hl
364+  88A1 21 01 85     	ld hl,Limite_vertical
365+  88A4 36 0D        	ld (hl),$0d
366+  88A6 08           	ex af,af
367+  88A7 18 3C        	jr 1F
368+  88A9              tercuad
369+  88A9              ;	call Fija_punteros
370+  88A9 3E 03        	ld a,3
371+  88AB 32 DE 84     	ld (Cuad_objeto),a
372+  88AE 21 20 48     	ld hl,$4820
373+  88B1 22 FF 84     	ld (Limite_horizontal),hl
374+  88B4 21 01 85     	ld hl,Limite_vertical
375+  88B7 36 12        	ld (hl),$12
376+  88B9 08           	ex af,af
377+  88BA 18 29        	jr 1F
378+  88BC CD EE 88     primit call column
379+  88BF 38 13        	jr c, primcuad
380+  88C1              segcuad
381+  88C1              ;	call Fija_punteros
382+  88C1 3E 02        	ld a,2
383+  88C3 32 DE 84     	ld (Cuad_objeto),a
384+  88C6 21 C0 4F     	ld hl,$4fc0
385+  88C9 22 FF 84     	ld (Limite_horizontal),hl
386+  88CC 21 01 85     	ld hl,Limite_vertical
387+  88CF 36 0D        	ld (hl),$0d
388+  88D1 08           	ex af,af
389+  88D2 18 11        	jr 1F
390+  88D4              primcuad
391+  88D4              ;	call Fija_punteros
392+  88D4 3E 01        	ld a,1
393+  88D6 32 DE 84     	ld (Cuad_objeto),a
394+  88D9 21 C0 4F     	ld hl,$4fc0
395+  88DC 22 FF 84     	ld (Limite_horizontal),hl
396+  88DF 21 01 85     	ld hl,Limite_vertical
397+  88E2 36 12        	ld (hl),$12
398+  88E4 08           	ex af,af
399+  88E5 CD 2F 8F     1 call Genera_coordenadas
400+  88E8 21 F5 84     	ld hl,Ctrl_0
401+  88EB CB EE        	set 5,(hl)
402+  88ED C9           	ret
403+  88EE
404+  88EE              ; ------------------------------------------------------------------------------------------------------------------
405+  88EE
406+  88EE              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  88EE              ;
408+  88EE              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  88EE
410+  88EE 7D           column ld a,l
411+  88EF E6 1F        	and $1f
412+  88F1 FE 10         	cp $10
413+  88F3 C9            	ret
414+  88F4
415+  88F4              ; --------------------------------------------------------------------------------------------------------------------
416+  88F4              ;
417+  88F4              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  88F4              ;
419+  88F4              ; 14/12/22
420+  88F4              ;
421+  88F4              ;	Modifica: A y BC.
422+  88F4
423+  88F4 3A DE 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  88F7 E6 01        	and 1
425+  88F9 28 17        	jr z,1F
426+  88FB
427+  88FB              ; Nos encontramos en la parte izquierda de la pantalla
428+  88FB
429+  88FB 3A D5 84     	ld a,(Coordenada_X)
430+  88FE 47           	ld b,a
431+  88FF 04           	inc b											; (Coordenada_X)+1 en B.
432+  8900 79           	ld a,c
433+  8901 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8902 38 08        	jr c,2F
435+  8904 47           	ld b,a
436+  8905 79           	ld a,c
437+  8906 90           	sub b
438+  8907 32 FE 84     	ld (Columnas),a
439+  890A 18 1B        	jr 4F
440+  890C 79           2 ld a,c
441+  890D 32 FE 84     	ld (Columnas),a
442+  8910 18 15        	jr 4F
443+  8912
444+  8912              ; Nos encontramos en la parte derecha de la pantalla.
445+  8912
446+  8912 3A D5 84     1 ld a,(Coordenada_X)
447+  8915 81           	add c
448+  8916 3D           	dec a
449+  8917 D6 1F        	sub $1f
450+  8919 38 08        	jr c,3F
451+  891B 47           	ld b,a
452+  891C 79           	ld a,c
453+  891D 90           	sub b
454+  891E 32 FE 84     	ld (Columnas),a
455+  8921 18 04        	jr 4F
456+  8923 79           3 ld a,c
457+  8924 32 FE 84     	ld (Columnas),a
458+  8927 D9           4 exx
459+  8928 4F           	ld c,a
460+  8929 D9           	exx
461+  892A C9            ret
462+  892B
463+  892B              ; --------------------------------------------------------------------------------------------------------------------
464+  892B              ;
465+  892B              ; 7/1/23
466+  892B              ;
467+  892B              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  892B              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  892B              ;
470+  892B              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  892B              ;	DESTRUYE: HL,B Y A.
472+  892B
473+  892B 3A DE 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  892E FE 02        	cp 2
475+  8930 38 18        	jr c,1F
476+  8932 28 16        	jr z,1F
477+  8934 E6 01        	and 1
478+  8936 28 0D        	jr z,3F
479+  8938
480+  8938              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  8938
482+  8938 CD 74 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  893B
484+  893B 7D           9 ld a,l
485+  893C E6 1F        	and $1f
486+  893E 28 2A        	jr z,7F
487+  8940 2B           	dec hl
488+  8941 10 F8        	djnz 9B
489+  8943 18 25        	jr 7F
490+  8945
491+  8945              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8945
493+  8945 2A D0 84     3 ld hl,(Posicion_actual)
494+  8948 18 20        	jr 7F
495+  894A
496+  894A 28 14        1 jr z,2F
497+  894C
498+  894C              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  894C
500+  894C CD 74 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  894F 7D           4 ld a,l
502+  8950 E6 1F        	and $1f
503+  8952 28 03        	jr z,6F
504+  8954 2B           	dec hl
505+  8955 10 F8        	djnz 4B
506+  8957 06 0F        6 ld b,15
507+  8959 CD D5 89     5 call PreviousScan
508+  895C 10 FB        	djnz 5B
509+  895E 18 0A        	jr 7F
510+  8960
511+  8960              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  8960
513+  8960 CD 74 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  8963 06 0F        	ld b,15
515+  8965 CD D5 89     8 call PreviousScan
516+  8968 10 FB        	djnz 8B
517+  896A
518+  896A E5           7 push hl
519+  896B DD E1        	pop ix
520+  896D
521+  896D 2A D2 84     	ld hl,(Puntero_objeto)
522+  8970 E5           	push hl
523+  8971 FD E1        	pop iy
524+  8973
525+  8973 C9           	ret
526+  8974
527+  8974              ; --------------------------------------------------------------------------------------------------------------------
528+  8974              ;
529+  8974              ;	2/1/23
530+  8974              ;
531+  8974              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8974              ;
533+  8974              ;	Tras esta rutina tenemos:
534+  8974              ;
535+  8974              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8974              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8974              ;
538+  8974              ;	DESTRUYE!!!!! HL,B y A.
539+  8974
540+  8974 2A D0 84     Operandos ld hl,(Posicion_actual)
541+  8977 3A FE 84     	ld a,(Columnas)
542+  897A 3D           	dec a
543+  897B 20 01        	jr nz,1F
544+  897D 3C           	inc a
545+  897E 47           1 ld b,a
546+  897F C9           	ret
547+  8980
548+  8980              ; --------------------------------------------------------------------------------------------------------------------
549+  8980              ;
550+  8980              ;	3/1/23
551+  8980              ;
552+  8980              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  8980              ;
554+  8980              ;	Destruye: A,B,HL y DE.
555+  8980
556+  8980              Define_rutina_de_impresion
557+  8980
558+  8980 3A CF 84     	ld a,(Columns)
559+  8983 47           	ld b,a
560+  8984 3A FE 84     	ld a,(Columnas)
561+  8987 B8           	cp b
562+  8988 20 0D        	jr nz,2f
563+  898A
564+  898A              ;	La entidad se imprime entera.
565+  898A
566+  898A 21 1C 8A     	ld hl, Indice_entidades_completas
567+  898D E6 01        	and 1
568+  898F 28 02        	jr z,1F
569+  8991
570+  8991 23           	inc hl
571+  8992 23           	inc hl
572+  8993
573+  8993 CD 25 86     1 call Extrae_address
574+  8996 C9           	ret		;	ret
575+  8997
576+  8997              ;	La entidad no se imprime entera en pantalla.
577+  8997
578+  8997 3A DE 84     2 ld a,(Cuad_objeto)
579+  899A E6 01        	and 1
580+  899C 28 17        	jr z,3F
581+  899E
582+  899E              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  899E
584+  899E 21 20 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  89A1 3A CF 84     4 ld a,(Columns)
586+  89A4 E6 01        	and 1
587+  89A6 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  89A8
589+  89A8 23           	inc hl
590+  89A9 23           	inc hl
591+  89AA
592+  89AA 3A FE 84     	ld a,(Columnas)
593+  89AD E6 01        	and 1
594+  89AF 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  89B1
596+  89B1 23           	inc hl
597+  89B2 23           	inc hl
598+  89B3
599+  89B3 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  89B5
601+  89B5 21 26 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  89B8 18 E7        	jr 4B
603+  89BA
604+  89BA              ; --------------------------------------------------------------------------------------------------------------------
605+  89BA              ;
606+  89BA              ;	Prepara_draw
607+  89BA              ;
608+  89BA              ;	Es una rutina de carga.
609+  89BA              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  89BA              ;
611+  89BA              ;	FUNCIONAMIENTO:
612+  89BA              ;
613+  89BA              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  89BA              ;	- LD (Posicion_actual) del objeto en [HL].
615+  89BA              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  89BA              ;
617+  89BA              ;	DESTRUYE:
618+  89BA              ;
619+  89BA              ;	Logicamente, BC,HL y E quedan destruidos.
620+  89BA
621+  89BA 21 CE 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  89BD 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  89BE 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  89BF 4E           	ld c,(hl)
625+  89C0 2A D0 84     	ld hl,(Posicion_actual)
626+  89C3 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  89C5 C9           	ret
628+  89C6
629+  89C6              ;----------------------------------------------------------------------------------------------------------------
630+  89C6              ;
631+  89C6              ;	5/08/22
632+  89C6              ;
633+  89C6              ;   NextScan.
634+  89C6              ;
635+  89C6              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  89C6              ;
637+  89C6              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  89C6              ;
639+  89C6              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  89C6              ;
641+  89C6              ;       DESTRUIDOS: AF y HL !!!
642+  89C6              ;
643+  89C6              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  89C6              ;
645+  89C6
646+  89C6 24           NextScan inc h          ; Incrementamos el scanline.
647+  89C7 7C               ld a,h
648+  89C8 E6 07            and 7
649+  89CA C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  89CB
651+  89CB 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  89CC C6 20            add a,$20           ; Vamos a comprobarlo...
653+  89CE 6F               ld l,a
654+  89CF D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  89D0
656+  89D0 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  89D1 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  89D3 67               ld h,a
659+  89D4 C9               ret
660+  89D5
661+  89D5              ;----------------------------------------------------------------------------------------------------------------
662+  89D5              ;
663+  89D5              ;	5/08/22
664+  89D5              ;
665+  89D5              ;   PreviousScan.
666+  89D5              ;
667+  89D5              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  89D5              ;
669+  89D5              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  89D5              ;
671+  89D5              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  89D5              ;
673+  89D5              ;       DESTRUIDOS: AF y HL !!!
674+  89D5              ;
675+  89D5              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  89D5              ;
677+  89D5
678+  89D5 7C           PreviousScan ld a,h
679+  89D6 25               dec h               ; Dec H.
680+  89D7 E6 07            and 7
681+  89D9 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  89DA
683+  89DA 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  89DB D6 20            sub $20             ; Vamos a comprobarlo...
685+  89DD 6F               ld l,a
686+  89DE D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  89DF
688+  89DF 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  89E0 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  89E2 67               ld h,a
691+  89E3 C9               ret
692+  89E4
693+  89E4              ; -----------------------------------------------------------------------------------
694+  89E4              ;
695+  89E4              ;	15/1/23
696+  89E4
697+  89E4 ED 73 0A 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  89E8 31 00 70     	ld sp,Album_de_fotos
699+  89EB
700+  89EB FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  89ED E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  89EE D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  89EF
704+  89EF ED 73 0C 85  	ld (Stack_2),sp
705+  89F3 ED 7B 0A 85  	ld sp,(Stack)
706+  89F7
707+  89F7              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  89F7
709+  89F7 3E CD        	ld a,$cd
710+  89F9 32 01 8A     	ld (Imprime),a
711+  89FC EB           	ex de,hl
712+  89FD 22 02 8A     	ld (Imprime+1),hl
713+  8A00 EB           	ex de,hl
714+  8A01
715+  8A01              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A01
717+  8A01 00 00 00     Imprime db 0,0,0
718+  8A04
719+  8A04 ED 73 0A 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A08
721+  8A08 3A 09 85     	ld a,(Numero_de_malotes)
722+  8A0B 3D           	dec a
723+  8A0C 28 09        	jr z,1F
724+  8A0E 32 09 85      	ld (Numero_de_malotes),a
725+  8A11 ED 7B 0C 85  	ld sp,(Stack_2)
726+  8A15 18 D4        	jr 2B
727+  8A17
728+  8A17 AF           1 xor a
729+  8A18 32 0C 85     	ld (Stack_2),a
730+  8A1B C9           	ret
731+  8A1C
732+  8A1C
# file closed: Draw_XOR.asm
592   8A1C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A1C              ;   índices de Rutinas de impresión.
  2+  8A1C
  3+  8A1C 2C 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A1E 59 8A            defw Pinta_Amadeus_3x2
  5+  8A20
  6+  8A20 AF 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A22 4F 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A24 03 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A26
 10+  8A26 D9 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A28 DD 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2A 91 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A2C
 14+  8A2C
 15+  8A2C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A2C              ;
 17+  8A2C              ;   12/12/22
 18+  8A2C              ;
 19+  8A2C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A2C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A2C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A2C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A2C              ;
 24+  8A2C              ;   Modifica: DE y HL.
 25+  8A2C
 26+  8A2C ED 73 0A 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A30 FD F9        	ld sp,iy
 28+  8A32 06 10            ld b,16
 29+  8A34 D1           1 pop de
 30+  8A35 7B               ld a,e
 31+  8A36 AE               xor (hl)
 32+  8A37 77           	ld (hl),a
 33+  8A38 23           	inc hl
 34+  8A39 7A               ld a,d
 35+  8A3A AE               xor (hl)
 36+  8A3B 77           	ld (hl),a
 37+  8A3C 2B           	dec hl
 38+  8A3D 24           	inc h
 39+  8A3E 7C               ld a,h
 40+  8A3F E6 07            and 7
 41+  8A41 20 0A            jr nz,2F
 42+  8A43 7D               ld a,l
 43+  8A44 C6 20            add a,$20
 44+  8A46 6F               ld l,a
 45+  8A47 38 04            jr c,2F
 46+  8A49 7C               ld a,h
 47+  8A4A D6 08            sub 8
 48+  8A4C 67               ld h,a
 49+  8A4D 7C           2 ld a,h
 50+  8A4E FE 58            cp $58
 51+  8A50 28 02            jr z,3F
 52+  8A52 10 E0            djnz 1B
 53+  8A54 ED 7B 0A 85  3 ld sp,(Stack)
 54+  8A58 C9           	ret
 55+  8A59
 56+  8A59 ED 73 0A 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A5D FD F9        	ld sp,iy
 58+  8A5F 06 08            ld b,8
 59+  8A61 D1           1 pop de
 60+  8A62 7B               ld a,e
 61+  8A63 AE               xor (hl)
 62+  8A64 77           	ld (hl),a
 63+  8A65 23           	inc hl
 64+  8A66 7A               ld a,d
 65+  8A67 AE               xor (hl)
 66+  8A68 77           	ld (hl),a
 67+  8A69 23           	inc hl
 68+  8A6A D1           	pop de
 69+  8A6B 7B               ld a,e
 70+  8A6C AE               xor (hl)
 71+  8A6D 77           	ld (hl),a
 72+  8A6E 2B           	dec hl
 73+  8A6F 2B           	dec hl
 74+  8A70 24           	inc h
 75+  8A71 7C               ld a,h
 76+  8A72 E6 07            and 7
 77+  8A74 20 0A            jr nz,2F
 78+  8A76 7D               ld a,l
 79+  8A77 C6 20            add a,$20
 80+  8A79 6F               ld l,a
 81+  8A7A 38 04            jr c,2F
 82+  8A7C 7C               ld a,h
 83+  8A7D D6 08            sub 8
 84+  8A7F 67               ld h,a
 85+  8A80 7C           2 ld a,h
 86+  8A81 FE 58            cp $58
 87+  8A83 28 25            jr z,4F
 88+  8A85 7A               ld a,d
 89+  8A86 AE               xor (hl)
 90+  8A87 77               ld (hl),a
 91+  8A88 D1           	pop de
 92+  8A89 23           	inc hl
 93+  8A8A 7B               ld a,e
 94+  8A8B AE               xor (hl)
 95+  8A8C 77           	ld (hl),a
 96+  8A8D 23           	inc hl
 97+  8A8E 7A               ld a,d
 98+  8A8F AE               xor (hl)
 99+  8A90 77           	ld (hl),a
100+  8A91 2B           	dec hl
101+  8A92 2B           	dec hl
102+  8A93 24           	inc h
103+  8A94 7C               ld a,h
104+  8A95 E6 07            and 7
105+  8A97 20 0A            jr nz,3F
106+  8A99 7D               ld a,l
107+  8A9A C6 20            add a,$20
108+  8A9C 6F               ld l,a
109+  8A9D 38 04            jr c,3F
110+  8A9F 7C               ld a,h
111+  8AA0 D6 08            sub 8
112+  8AA2 67               ld h,a
113+  8AA3 7C           3 ld a,h
114+  8AA4 FE 58            cp $58
115+  8AA6 28 02            jr z,4F
116+  8AA8 10 B7            djnz 1B
117+  8AAA ED 7B 0A 85  4 ld sp,(Stack)
118+  8AAE C9           	ret
119+  8AAF
120+  8AAF              ; ---------------------------------------------------
121+  8AAF
122+  8AAF ED 73 0A 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AB3 FD F9        	ld sp,iy
124+  8AB5 06 10            ld b,16
125+  8AB7 D1           1 pop de
126+  8AB8 7A           	ld a,d
127+  8AB9 AE           	xor (hl)
128+  8ABA 77           	ld (hl),a
129+  8ABB 24           	inc h
130+  8ABC 7C               ld a,h
131+  8ABD E6 07            and 7
132+  8ABF 20 0C            jr nz,2F
133+  8AC1 7D               ld a,l
134+  8AC2 C6 20            add a,$20
135+  8AC4 6F               ld l,a
136+  8AC5 38 06            jr c,2F
137+  8AC7 7C               ld a,h
138+  8AC8 D6 08            sub 8
139+  8ACA 67               ld h,a
140+  8ACB 18 00            jr 2F
141+  8ACD 7C           2 ld a,h
142+  8ACE FE 58            cp $58
143+  8AD0 28 02            jr z,3F
144+  8AD2 10 E3            djnz 1B
145+  8AD4 ED 7B 0A 85  3 ld sp,(Stack)
146+  8AD8 C9           	ret
147+  8AD9
148+  8AD9 ED 73 0A 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8ADD FD F9        	ld sp,iy
150+  8ADF 06 10            ld b,16
151+  8AE1 D1           1 pop de
152+  8AE2 7B           	ld a,e
153+  8AE3 AE           	xor (hl)
154+  8AE4 77           	ld (hl),a
155+  8AE5 24           	inc h
156+  8AE6 7C               ld a,h
157+  8AE7 E6 07            and 7
158+  8AE9 20 0C            jr nz,2F
159+  8AEB 7D               ld a,l
160+  8AEC C6 20            add a,$20
161+  8AEE 6F               ld l,a
162+  8AEF 38 06            jr c,2F
163+  8AF1 7C               ld a,h
164+  8AF2 D6 08            sub 8
165+  8AF4 67               ld h,a
166+  8AF5 18 00            jr 2F
167+  8AF7 7C           2 ld a,h
168+  8AF8 FE 58            cp $58
169+  8AFA 28 02            jr z,3F
170+  8AFC 10 E3            djnz 1B
171+  8AFE ED 7B 0A 85  3 ld sp,(Stack)
172+  8B02 C9           	ret
173+  8B03
174+  8B03              ; ---------------------------------------------------
175+  8B03
176+  8B03 ED 73 0A 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B07 FD F9        	ld sp,iy
178+  8B09 06 08            ld b,8
179+  8B0B D1           1 pop de
180+  8B0C 7A           	ld a,d
181+  8B0D AE           	xor (hl)
182+  8B0E 77           	ld (hl),a
183+  8B0F 23           	inc hl
184+  8B10 D1           	pop de
185+  8B11 7B           	ld a,e
186+  8B12 AE           	xor (hl)
187+  8B13 77           	ld (hl),a
188+  8B14 2B           	dec hl
189+  8B15 24            	inc h
190+  8B16 7C               ld a,h
191+  8B17 E6 07            and 7
192+  8B19 20 0A            jr nz,2F
193+  8B1B 7D               ld a,l
194+  8B1C C6 20            add a,$20
195+  8B1E 6F               ld l,a
196+  8B1F 38 04            jr c,2F
197+  8B21 7C               ld a,h
198+  8B22 D6 08            sub 8
199+  8B24 67               ld h,a
200+  8B25 7C           2 ld a,h
201+  8B26 FE 58            cp $58
202+  8B28 28 20            jr z,4F
203+  8B2A D1               pop de
204+  8B2B 7B           	ld a,e
205+  8B2C AE           	xor (hl)
206+  8B2D 77           	ld (hl),a
207+  8B2E 23           	inc hl
208+  8B2F 7A           	ld a,d
209+  8B30 AE           	xor (hl)
210+  8B31 77           	ld (hl),a
211+  8B32 2B           	dec hl
212+  8B33 24           	inc h
213+  8B34 7C               ld a,h
214+  8B35 E6 07            and 7
215+  8B37 20 0A            jr nz,3F
216+  8B39 7D               ld a,l
217+  8B3A C6 20            add a,$20
218+  8B3C 6F               ld l,a
219+  8B3D 38 04            jr c,3F
220+  8B3F 7C               ld a,h
221+  8B40 D6 08            sub 8
222+  8B42 67               ld h,a
223+  8B43 7C           3 ld a,h
224+  8B44 FE 58            cp $58
225+  8B46 28 02            jr z,4F
226+  8B48 10 C1            djnz 1B
227+  8B4A ED 7B 0A 85  4 ld sp,(Stack)
228+  8B4E C9           	ret
229+  8B4F
230+  8B4F ED 73 0A 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B53 FD F9        	ld sp,iy
232+  8B55 06 08            ld b,8
233+  8B57 D1           1 pop de
234+  8B58 D1           	pop de
235+  8B59 7B           	ld a,e
236+  8B5A AE           	xor (hl)
237+  8B5B 77           	ld (hl),a
238+  8B5C 24            	inc h
239+  8B5D 7C               ld a,h
240+  8B5E E6 07            and 7
241+  8B60 20 0A            jr nz,2F
242+  8B62 7D               ld a,l
243+  8B63 C6 20            add a,$20
244+  8B65 6F               ld l,a
245+  8B66 38 04            jr c,2F
246+  8B68 7C               ld a,h
247+  8B69 D6 08            sub 8
248+  8B6B 67               ld h,a
249+  8B6C 7C           2 ld a,h
250+  8B6D FE 58            cp $58
251+  8B6F 28 1B            jr z,4F
252+  8B71 D1               pop de
253+  8B72 7A           	ld a,d
254+  8B73 AE           	xor (hl)
255+  8B74 77           	ld (hl),a
256+  8B75 24           	inc h
257+  8B76 7C               ld a,h
258+  8B77 E6 07            and 7
259+  8B79 20 0A            jr nz,3F
260+  8B7B 7D               ld a,l
261+  8B7C C6 20            add a,$20
262+  8B7E 6F               ld l,a
263+  8B7F 38 04            jr c,3F
264+  8B81 7C               ld a,h
265+  8B82 D6 08            sub 8
266+  8B84 67               ld h,a
267+  8B85 7C           3 ld a,h
268+  8B86 FE 58            cp $58
269+  8B88 28 02            jr z,4F
270+  8B8A 10 CB            djnz 1B
271+  8B8C ED 7B 0A 85  4 ld sp,(Stack)
272+  8B90 C9           	ret
273+  8B91
274+  8B91 ED 73 0A 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B95 FD F9        	ld sp,iy
276+  8B97 06 08            ld b,8
277+  8B99 D1           1 pop de
278+  8B9A 7B           	ld a,e
279+  8B9B AE           	xor (hl)
280+  8B9C 77           	ld (hl),a
281+  8B9D 23           	inc hl
282+  8B9E 7A           	ld a,d
283+  8B9F AE           	xor (hl)
284+  8BA0 77           	ld (hl),a
285+  8BA1 2B           	dec hl
286+  8BA2 24             	inc h
287+  8BA3 7C               ld a,h
288+  8BA4 E6 07            and 7
289+  8BA6 20 0A            jr nz,2F
290+  8BA8 7D               ld a,l
291+  8BA9 C6 20            add a,$20
292+  8BAB 6F               ld l,a
293+  8BAC 38 04            jr c,2F
294+  8BAE 7C               ld a,h
295+  8BAF D6 08            sub 8
296+  8BB1 67               ld h,a
297+  8BB2 7C           2 ld a,h
298+  8BB3 FE 58            cp $58
299+  8BB5 28 21            jr z,4F
300+  8BB7 D1               pop de
301+  8BB8 7A           	ld a,d
302+  8BB9 AE           	xor (hl)
303+  8BBA 77           	ld (hl),a
304+  8BBB 23           	inc hl
305+  8BBC D1               pop de
306+  8BBD 7B           	ld a,e
307+  8BBE AE           	xor (hl)
308+  8BBF 77           	ld (hl),a
309+  8BC0 2B           	dec hl
310+  8BC1 24           	inc h
311+  8BC2 7C               ld a,h
312+  8BC3 E6 07            and 7
313+  8BC5 20 0A            jr nz,3F
314+  8BC7 7D               ld a,l
315+  8BC8 C6 20            add a,$20
316+  8BCA 6F               ld l,a
317+  8BCB 38 04            jr c,3F
318+  8BCD 7C               ld a,h
319+  8BCE D6 08            sub 8
320+  8BD0 67               ld h,a
321+  8BD1 7C           3 ld a,h
322+  8BD2 FE 58            cp $58
323+  8BD4 28 02            jr z,4F
324+  8BD6 10 C1            djnz 1B
325+  8BD8 ED 7B 0A 85  4 ld sp,(Stack)
326+  8BDC C9           	ret
327+  8BDD
328+  8BDD ED 73 0A 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BE1 FD F9        	ld sp,iy
330+  8BE3 06 08            ld b,8
331+  8BE5 D1           1 pop de
332+  8BE6 7B           	ld a,e
333+  8BE7 AE           	xor (hl)
334+  8BE8 77           	ld (hl),a
335+  8BE9 24            	inc h
336+  8BEA 7C               ld a,h
337+  8BEB E6 07            and 7
338+  8BED 20 0A            jr nz,2F
339+  8BEF 7D               ld a,l
340+  8BF0 C6 20            add a,$20
341+  8BF2 6F               ld l,a
342+  8BF3 38 04            jr c,2F
343+  8BF5 7C               ld a,h
344+  8BF6 D6 08            sub 8
345+  8BF8 67               ld h,a
346+  8BF9 7C           2 ld a,h
347+  8BFA FE 58            cp $58
348+  8BFC 28 1C            jr z,4F
349+  8BFE D1               pop de
350+  8BFF 7A           	ld a,d
351+  8C00 AE           	xor (hl)
352+  8C01 77           	ld (hl),a
353+  8C02 24           	inc h
354+  8C03 7C               ld a,h
355+  8C04 E6 07            and 7
356+  8C06 20 0A            jr nz,3F
357+  8C08 7D               ld a,l
358+  8C09 C6 20            add a,$20
359+  8C0B 6F               ld l,a
360+  8C0C 38 04            jr c,3F
361+  8C0E 7C               ld a,h
362+  8C0F D6 08            sub 8
363+  8C11 67               ld h,a
364+  8C12 7C           3 ld a,h
365+  8C13 FE 58            cp $58
366+  8C15 28 03            jr z,4F
367+  8C17 D1               pop de
368+  8C18 10 CB            djnz 1B
369+  8C1A ED 7B 0A 85  4 ld sp,(Stack)
370+  8C1E C9           	ret
371+  8C1F
372+  8C1F              ; ---------------------------------------------------
373+  8C1F
# file closed: Rutinas_de_impresion_sprites.asm
593   8C1F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C1F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C1F              ;
  3+  8C1F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C1F              ;
  5+  8C1F              ; *****************************************************************************************************************************************************************************************
  6+  8C1F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C1F
  8+  8C1F 7C           calcula_tercio ld a,h
  9+  8C20 E6 18        	and $18
 10+  8C22 CB 2F        	sra a
 11+  8C24 CB 2F        	sra a
 12+  8C26 CB 2F        	sra a
 13+  8C28 C9           	ret
 14+  8C29
# file closed: calcula_tercio.asm
594   8C29              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C29              ; -----------------------------------------------------------------------------------------
  2+  8C29              ;
  3+  8C29              ;   04/11/22
  4+  8C29              ;
  5+  8C29              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C29              ;
  7+  8C29              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C29              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C29              ;
 10+  8C29              ;   DESTRUYE: HL y A. !!!!!
 11+  8C29
 12+  8C29 CD 1F 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C2C 26 58            ld h,$58
 14+  8C2E 84               add h
 15+  8C2F 67               ld h,a
 16+  8C30 C9               ret
# file closed: Calcula_direccion_atributos.asm
595   8C31              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C31              ; ********** **********
  2+  8C31              ;
  3+  8C31              ;   5/11/22
  4+  8C31              ;
  5+  8C31              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C31              ;
  7+  8C31              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C31              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C31              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C31              ;
 11+  8C31              ;   NO DESTROYERSSSS !!!!!
 12+  8C31
 13+  8C31 E5           Define_atributos push hl
 14+  8C32 C5           	push bc
 15+  8C33 D5           	push de
 16+  8C34
 17+  8C34 CD 29 8C     	call Calcula_direccion_atributos
 18+  8C37
 19+  8C37 D9               exx
 20+  8C38 E5               push hl
 21+  8C39 D9               exx
 22+  8C3A D1               pop de
 23+  8C3B
 24+  8C3B 42               ld b,d
 25+  8C3C 7B               ld a,e 									; (Attr) en A.
 26+  8C3D
 27+  8C3D C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C3E E5            	push hl 								; Guardo dirección de attr.
 29+  8C3F
 30+  8C3F              ; -----
 31+  8C3F
 32+  8C3F 77           2 ld (hl),a
 33+  8C40 0D           	dec c 									; Decremento (Columnas).
 34+  8C41 28 03        	jr z,1F
 35+  8C43 23           	inc hl
 36+  8C44 18 F9        	jr 2B
 37+  8C46
 38+  8C46 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C47 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C48
 41+  8C48 05           	dec b									; Decremento (Filas).
 42+  8C49 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C4B
 44+  8C4B 11 20 00     	ld de,32
 45+  8C4E A7           	and a
 46+  8C4F ED 5A        	adc hl,de
 47+  8C51 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C53
 49+  8C53 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C54 C1           	pop bc
 51+  8C55 E1           	pop hl
 52+  8C56
 53+  8C56 C9           	ret
 54+  8C57
# file closed: Define_atributos.asm
596   8C57              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C57              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C57              ;
  3+  8C57              ;
  4+  8C57              ;	CLS.
  5+  8C57              ;
  6+  8C57              ;	Limpia la pantalla y define sus atributos.
  7+  8C57              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C57              ;
  9+  8C57              ;	COLORES: 0 ..... NEGRO
 10+  8C57              ;    		 1 ..... AZUL
 11+  8C57              ; 			 2 ..... ROJO
 12+  8C57              ;			 3 ..... MAGENTA
 13+  8C57              ; 			 4 ..... VERDE
 14+  8C57              ; 			 5 ..... CIAN
 15+  8C57              ;			 6 ..... AMARILLO
 16+  8C57              ; 			 7 ..... BLANCO
 17+  8C57              ;
 18+  8C57              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C57              ;
 20+  8C57              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C57
 22+  8C57
 23+  8C57 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C5A 11 01 40     	LD DE,$4001
 25+  8C5D 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C60 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C62 ED B0        	LDIR
 28+  8C64 01 FF 02     	LD BC,767
 29+  8C67 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C68 ED B0        	LDIR
 31+  8C6A C9           	ret
 32+  8C6B
# file closed: Cls.asm
597   8C6B              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C6B              ; ******************************************************************************************************************************************************************************************
  2+  8C6B              ;
  3+  8C6B              ;   22/01/23
  4+  8C6B              ;
  5+  8C6B              ;	Mov_down
  6+  8C6B              ;
  7+  8C6B              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C6B              ;
  9+  8C6B              ;
 10+  8C6B 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C6E CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C70              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C70              ; 																	; _ en el caso de que no lo haya.
 14+  8C70 3A E2 84     	ld a,(Vel_down)
 15+  8C73 47           	ld b,a
 16+  8C74 2A D0 84         ld hl,(Posicion_actual)
 17+  8C77 CD 1F 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C7A E6 02        	and 2
 19+  8C7C 28 0F        	jr z,1F
 20+  8C7E
 21+  8C7E              ; Nos encontramos en el último tercio de pantalla.
 22+  8C7E              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8C7E
 24+  8C7E 7C           	ld a,h
 25+  8C7F FE 57        	cp $57
 26+  8C81 20 0A        	jr nz,1F
 27+  8C83 7D           	ld a,l
 28+  8C84 C6 20        	add $20
 29+  8C86 30 05        	jr nc,1F
 30+  8C88              ; ------------------------------
 31+  8C88 CD 19 8F     	call Reaparece_arriba
 32+  8C8B              ;	call Reinicio
 33+  8C8B              ; ------------------------------
 34+  8C8B 18 08        	jr 3F
 35+  8C8D CD C6 89     1 call NextScan
 36+  8C90 22 D0 84     	ld (Posicion_actual),hl
 37+  8C93 10 E2            djnz 2B
 38+  8C95 CD 2F 8F     3 call Genera_coordenadas
 39+  8C98 C9           	ret
 40+  8C99
 41+  8C99
 42+  8C99              ; ******************************************************************************************************************************************************************************************
 43+  8C99              ;
 44+  8C99              ;   22/01/23
 45+  8C99              ;
 46+  8C99              ;	Mov_up
 47+  8C99              ;
 48+  8C99              ; 	Mueve el Sprite hacia arriba.
 49+  8C99              ;
 50+  8C99              ;
 51+  8C99 21 F5 84     Mov_up ld hl,Ctrl_0
 52+  8C9C CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8C9E              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8C9E              ; 																		; _ en el caso de que no lo haya.
 55+  8C9E 3A E1 84     	ld a,(Vel_up)
 56+  8CA1 47           	ld b,a
 57+  8CA2 2A D0 84     	ld hl,(Posicion_actual)
 58+  8CA5 CD 1F 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CA8 A7           	and a
 60+  8CA9 20 10        	jr nz,1F
 61+  8CAB
 62+  8CAB              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CAB              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CAB
 65+  8CAB 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CAC FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CAE 20 0B            jr nz,1F
 68+  8CB0 7D               ld a,l
 69+  8CB1 D6 20            sub $20
 70+  8CB3 30 06            jr nc,1F
 71+  8CB5 25               dec h
 72+  8CB6
 73+  8CB6              ; -----------------------------
 74+  8CB6 CD 09 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CB9              ;	call Reinicio
 76+  8CB9              ; -----------------------------
 77+  8CB9
 78+  8CB9 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CBB CD D5 89     1 call PreviousScan
 80+  8CBE 22 D0 84     	ld (Posicion_actual),hl
 81+  8CC1 10 E2            djnz 3B
 82+  8CC3 CD 2F 8F     2 call Genera_coordenadas
 83+  8CC6 C9           	ret
 84+  8CC7
 85+  8CC7              ; ******************************************************************************************************************************************************************************************
 86+  8CC7              ;
 87+  8CC7              ;	19/10/22
 88+  8CC7              ;
 89+  8CC7              ;	Mov_right.
 90+  8CC7              ;
 91+  8CC7              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8CC7              ;
 93+  8CC7
 94+  8CC7 21 F5 84     Mov_right ld hl,Ctrl_0
 95+  8CCA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8CCC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8CCC              ; 																	; _ en el caso de que no lo haya.
 98+  8CCC 3A D4 84     	ld a,(CTRL_DESPLZ)
 99+  8CCF A7           	and a
100+  8CD0 28 0B        	jr z,9F
101+  8CD2
102+  8CD2 3A F5 84     	ld a,(Ctrl_0)
103+  8CD5 CB 7F        	bit 7,a
104+  8CD7 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8CD9 21 D4 84     	ld hl,CTRL_DESPLZ
106+  8CDC 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8CDD
108+  8CDD 3A F5 84     9 ld a,(Ctrl_0)
109+  8CE0 CB 77        	bit 6,a
110+  8CE2 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8CE4
112+  8CE4 CD C8 8E     	call Stop_Amadeus_right
113+  8CE7 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8CE8 18 4D        	jr 8F
115+  8CEA
116+  8CEA 3A D5 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8CED FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8CEF 20 46        	jr nz,8F
119+  8CF1
120+  8CF1 3A D4 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8CF4 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8CF5 28 40        	jr z,8F
123+  8CF7
124+  8CF7              ; ---------- ---------- ----------
125+  8CF7              ;
126+  8CF7              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8CF7
128+  8CF7 3A E0 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8CFA FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8CFC 28 11        	jr z,1F
131+  8CFE 38 06        	jr c,6F
132+  8D00 FE 04        	cp 4
133+  8D02 28 14        	jr z,7F
134+  8D04 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D06
136+  8D06              ; ---------- ---------- ----------
137+  8D06              ;
138+  8D06              ; Perfiles de velocidad
139+  8D06              ;
140+  8D06 3A D4 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D09 FE FE        	cp $fe
142+  8D0B 20 2A        	jr nz,8F
143+  8D0D 18 10        	jr 3F
144+  8D0F 3A D4 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D12 FE FD        	cp $fd
146+  8D14 20 21        	jr nz,8F
147+  8D16 18 07        	jr 3F
148+  8D18 3A D4 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D1B FE FB        	cp $fb
150+  8D1D 20 18        	jr nz,8F
151+  8D1F
152+  8D1F              ; ---------- ---------- ----------
153+  8D1F
154+  8D1F CD F7 8E     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D22              ;	call Reinicio
156+  8D22
157+  8D22              ; ---------- ---------- ----------
158+  8D22              ;
159+  8D22              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D22
161+  8D22 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D24 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D25 CD 3E 8D     	call DESPLZ_DER
164+  8D28 C1           	pop bc
165+  8D29 10 F9        	djnz 5B
166+  8D2B 2A D0 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D2E 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D2F 22 D0 84     	ld (Posicion_actual),hl
169+  8D32 CD 2F 8F     	call Genera_coordenadas
170+  8D35 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D37
172+  8D37              ; ---------- ---------- ----------
173+  8D37
174+  8D37 2A D0 84     8 ld hl,(Posicion_actual)
175+  8D3A CD 3E 8D     	call DESPLZ_DER
176+  8D3D C9           2 ret
177+  8D3E
178+  8D3E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D3E              ;
180+  8D3E              ;	22/9/22
181+  8D3E              ;
182+  8D3E
183+  8D3E CD 4D 8D     DESPLZ_DER call Desplaza_derecha
184+  8D41 CD 62 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D44 CD 8B 8D         call Ciclo_completo
186+  8D47 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D4A CB FE        	set 7,(hl)
188+  8D4C C9           	ret
189+  8D4D
190+  8D4D              ; ******************************************************************************************************************************************************************************************
191+  8D4D              ;	14/9/22
192+  8D4D              ;
193+  8D4D
194+  8D4D 3A E0 84     Desplaza_derecha ld a,(Vel_right)
195+  8D50 47           	ld b,a
196+  8D51 2A DA 84     	ld hl,(Puntero_DESPLZ)
197+  8D54 23           1 inc hl
198+  8D55 23           	inc hl
199+  8D56 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D58 22 DA 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D5B CD 25 86     	call Extrae_address
202+  8D5E 22 D2 84     	ld (Puntero_objeto),hl
203+  8D61 C9           	ret
204+  8D62
205+  8D62              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8D62              ;
207+  8D62              ;	24/7/22
208+  8D62              ;
209+  8D62              ;	modifica_parametros_1er_DESPLZ_2
210+  8D62              ;
211+  8D62              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8D62              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8D62              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8D62
215+  8D62 3A D4 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8D65 A7           	and a
217+  8D66 20 1F        	jr nz,1F
218+  8D68 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8D6A 32 D4 84         ld (CTRL_DESPLZ),a
220+  8D6D 21 CF 84     	ld hl,Columns
221+  8D70 34           	inc (hl)
222+  8D71 3A DE 84     	ld a,(Cuad_objeto)
223+  8D74 E6 01        	and 1
224+  8D76 28 0F        	jr z,1F
225+  8D78 2A D0 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8D7B 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8D7C 22 D0 84     	ld (Posicion_actual),hl
228+  8D7F CD 2F 8F     	call Genera_coordenadas
229+  8D82 CD D4 8E     	call Inc_CTRL_DESPLZ
230+  8D85 18 03        	jr 2F
231+  8D87 CD D4 8E     1 call Inc_CTRL_DESPLZ
232+  8D8A C9           2 ret
233+  8D8B
234+  8D8B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8D8B              ;
236+  8D8B              ;	24/7/22
237+  8D8B              ;
238+  8D8B              ;	Ciclo_completo.
239+  8D8B              ;
240+  8D8B              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8D8B              ;
242+  8D8B              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8D8B              ; 	Decrementamos (Columns).
244+  8D8B              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8D8B              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8D8B
247+  8D8B
248+  8D8B 3A D4 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8D8E FE FF        	cp $ff
250+  8D90 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8D92 18 25        	jr 3f
252+  8D94 21 CF 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8D97 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8D98 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8D99 32 D4 84     	ld (CTRL_DESPLZ),a
256+  8D9C 3A DE 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8D9F E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DA1 20 0A        	jr nz,2F
259+  8DA3 2A D0 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DA6 23           	inc hl
261+  8DA7 22 D0 84     	ld (Posicion_actual),hl
262+  8DAA CD 2F 8F     	call Genera_coordenadas
263+  8DAD
264+  8DAD              ; Inicia el puntero de Sprite.
265+  8DAD
266+  8DAD 2A D8 84     2 ld hl,(Indice_Sprite)
267+  8DB0 22 DA 84     	ld (Puntero_DESPLZ),hl
268+  8DB3 CD 25 86     	call Extrae_address
269+  8DB6 22 D2 84     	ld (Puntero_objeto),hl
270+  8DB9
271+  8DB9 C9           3 ret
272+  8DBA
273+  8DBA              ; ******************************************************************************************************************************************************************************************
274+  8DBA              ;
275+  8DBA              ;	21/01/23
276+  8DBA              ;
277+  8DBA              ;	Mov_left.
278+  8DBA              ;
279+  8DBA              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DBA              ;
281+  8DBA              Mov_left
282+  8DBA
283+  8DBA 21 F5 84     	ld hl,Ctrl_0
284+  8DBD CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DBF              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DBF              ; 																	; _ en el caso de que no lo haya.
287+  8DBF 3A D4 84     	ld a,(CTRL_DESPLZ)
288+  8DC2 A7           	and a
289+  8DC3 20 19        	jr nz,10F
290+  8DC5
291+  8DC5 2A D2 84     	ld hl,(Puntero_objeto)
292+  8DC8 22 DA 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8DCB
294+  8DCB 3A F5 84     	ld a,(Ctrl_0)
295+  8DCE CB 77        	bit 6,a
296+  8DD0 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8DD2
298+  8DD2 CD CE 8E     	call Stop_Amadeus_left
299+  8DD5 20 62        	jr nz,8F
300+  8DD7
301+  8DD7 2A D8 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8DDA 22 DA 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8DDD C9           	ret
304+  8DDE
305+  8DDE 3A F5 84     10 ld a,(Ctrl_0)
306+  8DE1 CB 7F        	bit 7,a
307+  8DE3 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8DE5 21 D4 84     	ld hl,CTRL_DESPLZ
309+  8DE8 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8DE9
311+  8DE9 3A D5 84     11 ld a,(Coordenada_X)
312+  8DEC A7           	and a
313+  8DED 20 4A        	jr nz,8F
314+  8DEF 3A D4 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8DF2 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8DF3 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8DF5
318+  8DF5              ; ---------- ---------- ----------
319+  8DF5
320+  8DF5 3A DF 84     	ld a,(Vel_left)
321+  8DF8 FE 02        	cp 2
322+  8DFA 28 0F        	jr z,1F
323+  8DFC 38 04        	jr c,6F
324+  8DFE FE 04        	cp 4
325+  8E00 28 12        	jr z,7F
326+  8E02
327+  8E02              ; ---------- ---------- ----------
328+  8E02
329+  8E02 3A D4 84     6 ld a,(CTRL_DESPLZ)
330+  8E05 FE F9        	cp $f9
331+  8E07 20 30        	jr nz,8F
332+  8E09 18 10        	jr 4F
333+  8E0B 3A D4 84     1 ld a,(CTRL_DESPLZ)
334+  8E0E FE FA        	cp $fa
335+  8E10 20 27        	jr nz,8F
336+  8E12 18 07        	jr 4F
337+  8E14 3A D4 84     7 ld a,(CTRL_DESPLZ)
338+  8E17 FE FC        	cp $fc
339+  8E19 20 1E        	jr nz,8F
340+  8E1B
341+  8E1B              ; ---------- ---------- ----------
342+  8E1B
343+  8E1B              4
344+  8E1B CD E5 8E     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E1E              ;	call Reinicio
346+  8E1E
347+  8E1E              ; ---------- ---------- ----------
348+  8E1E
349+  8E1E 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E20 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E21 2A D2 84     	ld hl,(Puntero_objeto)
352+  8E24 22 DA 84     	ld (Puntero_DESPLZ),hl
353+  8E27 CD 40 8E     	call DESPLZ_IZQ
354+  8E2A C1           	pop bc
355+  8E2B 10 F3        	djnz 5B
356+  8E2D 2A D0 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E30 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E31 22 D0 84     	ld (Posicion_actual),hl
359+  8E34 CD 2F 8F     	call Genera_coordenadas
360+  8E37 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E39
362+  8E39              ; ---------- ---------- ----------
363+  8E39
364+  8E39 2A D0 84     8 ld hl,(Posicion_actual)
365+  8E3C CD 40 8E     	call DESPLZ_IZQ
366+  8E3F C9           2 ret
367+  8E40
368+  8E40              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E40              ;
370+  8E40              ;	22/9/22
371+  8E40
372+  8E40              DESPLZ_IZQ
373+  8E40
374+  8E40 CD 4F 8E     	call Desplaza_izquierda
375+  8E43 CD 64 8E         call modifica_parametros_1er_DESPLZ
376+  8E46 CD 88 8E     	call Ciclo_completo_2
377+  8E49 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E4C CB BE        	res 7,(hl)
379+  8E4E C9           	ret
380+  8E4F
381+  8E4F 3A DF 84     Desplaza_izquierda ld a,(Vel_left)
382+  8E52 47           	ld b,a
383+  8E53 2A DA 84     	ld hl,(Puntero_DESPLZ)
384+  8E56 2B           1 dec hl
385+  8E57 2B           	dec hl
386+  8E58 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E5A 22 DA 84     	ld (Puntero_DESPLZ),hl
388+  8E5D CD 25 86     	call Extrae_address
389+  8E60 22 D2 84     	ld (Puntero_objeto),hl
390+  8E63 C9           	ret
391+  8E64
392+  8E64              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E64              ;
394+  8E64              ;	modifica_parametros_1er_DESPLZ
395+  8E64              ;
396+  8E64              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8E64              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8E64              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8E64
400+  8E64 3A D4 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8E67 A7           	and a
402+  8E68 20 1A        	jr nz,1F
403+  8E6A 21 CF 84     	ld hl,Columns
404+  8E6D 34           	inc (hl)
405+  8E6E 3A DE 84     	ld a,(Cuad_objeto)
406+  8E71 E6 01        	and 1
407+  8E73 20 0F        	jr nz,1F
408+  8E75 2A D0 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8E78 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8E79 22 D0 84     	ld (Posicion_actual),hl
411+  8E7C CD 2F 8F     	call Genera_coordenadas
412+  8E7F CD B7 8E     	call Dec_CTRL_DESPLZ
413+  8E82 18 03        	jr 2F
414+  8E84 CD B7 8E     1 call Dec_CTRL_DESPLZ
415+  8E87 C9           2 ret
416+  8E88
417+  8E88              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8E88              ;
419+  8E88 3A D4 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8E8B FE F8        	cp $f8
421+  8E8D 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8E8F 18 25        	jr 3f
423+  8E91 21 CF 84     1 ld hl,Columns
424+  8E94 35           	dec (hl)
425+  8E95 AF           	xor a
426+  8E96 32 D4 84     	ld (CTRL_DESPLZ),a
427+  8E99 3A DE 84     	ld a,(Cuad_objeto)
428+  8E9C E6 01        	and 1
429+  8E9E 28 0A        	jr z,2F
430+  8EA0 2A D0 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EA3 2B           	dec hl
432+  8EA4 22 D0 84     	ld (Posicion_actual),hl
433+  8EA7 CD 2F 8F     	call Genera_coordenadas
434+  8EAA
435+  8EAA              ; Inicia el puntero de Sprite.
436+  8EAA
437+  8EAA 2A D8 84     2 ld hl,(Indice_Sprite)
438+  8EAD 22 DA 84     	ld (Puntero_DESPLZ),hl
439+  8EB0 CD 25 86     	call Extrae_address
440+  8EB3 22 D2 84     	ld (Puntero_objeto),hl
441+  8EB6 C9           3 ret
442+  8EB7
443+  8EB7              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8EB7              ;
445+  8EB7              ;	Dec_CTRL_DESPLZ
446+  8EB7              ;
447+  8EB7              ;	Subrutina de [modifica_punteros].
448+  8EB7              ;
449+  8EB7              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8EB7
451+  8EB7 21 D4 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8EBA 3A DF 84     	ld a,(Vel_left)
453+  8EBD A7           	and a
454+  8EBE 28 06        	jr z,1F
455+  8EC0 47           	ld b,a
456+  8EC1 35           3 dec (hl)
457+  8EC2 10 FD        	djnz 3B
458+  8EC4 18 01        	jr 2F
459+  8EC6 35           1 dec (hl)
460+  8EC7 C9           2 ret
461+  8EC8
462+  8EC8              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8EC8              ;
464+  8EC8              ;	19/10/22
465+  8EC8              ;
466+  8EC8              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8EC8              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8EC8
469+  8EC8 3A D5 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8ECB FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8ECD C9           	ret
472+  8ECE
473+  8ECE              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8ECE              ;
475+  8ECE              ;	19/10/22
476+  8ECE              ;
477+  8ECE              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8ECE              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8ECE
480+  8ECE 3A D5 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8ED1 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8ED3 C9           	ret
483+  8ED4
484+  8ED4              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8ED4              ;
486+  8ED4              ;	24/7/22
487+  8ED4              ;
488+  8ED4              ;	Inc_CTRL_DESPLZ
489+  8ED4              ;
490+  8ED4              ;	Subrutina de [modifica_punteros].
491+  8ED4              ;
492+  8ED4              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8ED4
494+  8ED4 21 D4 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8ED7 3A E0 84     	ld a,(Vel_right)
496+  8EDA A7           	and a
497+  8EDB 28 06        	jr z,1F
498+  8EDD 47           	ld b,a
499+  8EDE 34           3 inc (hl)
500+  8EDF 10 FD        	djnz 3B
501+  8EE1 18 01        	jr 2F
502+  8EE3 34           1 inc (hl)
503+  8EE4 C9           2 ret
504+  8EE5
505+  8EE5              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8EE5
507+  8EE5 2A D0 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8EE8 01 1F 00     	ld bc,31
509+  8EEB A7           	and a
510+  8EEC ED 4A        	adc hl,bc
511+  8EEE 22 D0 84     	ld (Posicion_actual),hl
512+  8EF1 21 F5 84     	ld hl,Ctrl_0														; $xxx1
513+  8EF4 CB C6        	set 0,(hl)
514+  8EF6 C9           	ret
515+  8EF7
516+  8EF7              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8EF7
518+  8EF7 2A D0 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8EFA 01 1F 00     	ld bc,31
520+  8EFD A7           	and a
521+  8EFE ED 42        	sbc hl,bc
522+  8F00 22 D0 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F03 21 F5 84     	ld hl,Ctrl_0
524+  8F06 CB CE        	set 1,(hl)
525+  8F08 C9           	ret
526+  8F09
527+  8F09              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F09
529+  8F09 24           Reaparece_abajo inc h
530+  8F0A 01 E0 17     	ld bc,$17e0
531+  8F0D A7           	and a
532+  8F0E ED 4A        	adc hl,bc
533+  8F10 22 D0 84     	ld (Posicion_actual),hl
534+  8F13 21 F5 84     	ld hl,Ctrl_0
535+  8F16 CB D6        	set 2,(hl)
536+  8F18 C9           	ret
537+  8F19
538+  8F19              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F19
540+  8F19 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F1C A7           	and a
542+  8F1D ED 42        	sbc hl,bc
543+  8F1F 22 D0 84     	ld (Posicion_actual),hl
544+  8F22 21 F5 84     	ld hl,Ctrl_0
545+  8F25 CB DE        	set 3,(hl)
546+  8F27 C9           	ret
547+  8F28
548+  8F28              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F28
550+  8F28 2A DC 84     Reinicio ld hl,(Posicion_inicio)
551+  8F2B 22 D0 84     	ld (Posicion_actual),hl
552+  8F2E C9           	ret
# file closed: Direcciones.asm
598   8F2F              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F2F              ;	12/12/22
  2+  8F2F              ;
  3+  8F2F              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F2F              ;	Fila superior "0", Columna izquierda "0".
  5+  8F2F              ;
  6+  8F2F              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F2F              ;
  8+  8F2F              ;	Modifica: A
  9+  8F2F
 10+  8F2F C5           Genera_coordenadas push bc
 11+  8F30 E5           	push hl
 12+  8F31 2A D0 84     	ld hl,(Posicion_actual)
 13+  8F34 7D           	ld a,l
 14+  8F35 E6 1F        	and $1f
 15+  8F37 32 D5 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F3A CD 1F 8C     	call calcula_tercio
 17+  8F3D 47           	ld b,a
 18+  8F3E 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F3F 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F41 7D           	ld a,l
 21+  8F42 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F44 28 05        	jr z,2F
 23+  8F46 0C           1 inc c
 24+  8F47 D6 20        	sub 32
 25+  8F49 20 FB        	jr nz,1B
 26+  8F4B 0C           2 inc c
 27+  8F4C 04           	inc b
 28+  8F4D 05           	dec b
 29+  8F4E 28 04        	jr z,3F
 30+  8F50 3E E0        	ld a,$e0
 31+  8F52 10 F2        	djnz 1B
 32+  8F54 79           3 ld a,c
 33+  8F55 3D           	dec a
 34+  8F56 32 D6 84     	ld (Coordenada_y),a
 35+  8F59 E1           	pop hl
 36+  8F5A C1           	pop bc
 37+  8F5B C9           	ret
# file closed: Genera_coordenadas.asm
599   8F5C              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F5C
  2+  8F5C
  3+  8F5C              ;   11/8/22
  4+  8F5C              ;
  5+  8F5C              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F5C              ;
  7+  8F5C              ;   Mov_obj.asm
  8+  8F5C              ;
  9+  8F5C              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F5C              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F5C              ;
 12+  8F5C              ;   Codificación:
 13+  8F5C              ;
 14+  8F5C              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F5C
 16+  8F5C 02 10 00     Izquierda db 2,%00010000,0
 17+  8F5F 02 20 00     Derecha db 2,%00100000,0
 18+  8F62 02 80 00     Abajo db 2,%10000000,0
 19+  8F65 02 40 00     Arriba db 2,%01000000,0
 20+  8F68
 21+  8F68 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8F6C 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8F70 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8F74 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8F78 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8F7C 60 42 60 40
 25+  8F80 63
 26+  8F81 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8F85 22 A3 80 A0
 27+  8F89 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8F8D 84 A0 83 A0
 28+  8F91 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8F95 80 A3 22 A0
 29+  8F99 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8F9D 40 60 42 60
 30+  8FA1 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FA5
 32+  8FA5 5C 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FA7 5F 8F        Indice_mov_Derecha defw Derecha
 34+  8FA9 62 8F        Indice_mov_Abajo defw Abajo
 35+  8FAB 65 8F        Indice_mov_Arriba defw Arriba
 36+  8FAD 6C 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  8FAF 70 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  8FB1 68 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  8FB3 74 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  8FB5 78 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  8FB7
 42+  8FB7 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  8FBA A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  8FBB 28 02            jr z,1F
 45+  8FBD 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  8FBF 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  8FC2 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  8FC4 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  8FC7              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  8FC7 2A F9 84         ld hl,(Puntero_mov)
 51+  8FCA 7E               ld a,(hl)
 52+  8FCB 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  8FCE 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  8FCF 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  8FD2
 56+  8FD2 3A FD 84     Decoder ld a,(Repetimos_db)
 57+  8FD5 A7               and a
 58+  8FD6 20 0C            jr nz,12F
 59+  8FD8 2A F9 84         ld hl,(Puntero_mov)
 60+  8FDB 7E               ld a,(hl)
 61+  8FDC A7               and a
 62+  8FDD 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  8FDF E6 0F             and $0f
 64+  8FE1 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  8FE4              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  8FE4 2A F9 84     12 ld hl,(Puntero_mov)
 67+  8FE7 CB 7E            bit 7,(hl)
 68+  8FE9 28 03            jr z,2F
 69+  8FEB CD 6B 8C         call Mov_down
 70+  8FEE 2A F9 84     2 ld hl, (Puntero_mov)
 71+  8FF1 CB 76            bit 6,(hl)
 72+  8FF3 28 03            jr z,3F
 73+  8FF5 CD 99 8C         call Mov_up
 74+  8FF8 2A F9 84     3 ld hl, (Puntero_mov)
 75+  8FFB CB 6E            bit 5,(hl)
 76+  8FFD 28 03            jr z,4F
 77+  8FFF CD C7 8C         call Mov_right
 78+  9002 2A F9 84     4 ld hl, (Puntero_mov)
 79+  9005 CB 66            bit 4,(hl)
 80+  9007 28 03            jr z,5F
 81+  9009 CD BA 8D         call Mov_left
 82+  900C
 83+  900C              ; ---------- --------- --------- ---------- ----------
 84+  900C
 85+  900C 3A FD 84     5 ld a,(Repetimos_db)
 86+  900F A7               and a
 87+  9010 28 07            jr z,6F
 88+  9012 3D               dec a
 89+  9013 32 FD 84         ld (Repetimos_db),a
 90+  9016 28 01            jr z,6f
 91+  9018 C9           11 ret
 92+  9019 21 FB 84     6 ld hl,Contador_db_mov
 93+  901C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  901D 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9020 23               inc hl
 96+  9021 22 F9 84         ld (Puntero_mov),hl
 97+  9024 18 F2            jr 11B
 98+  9026 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  9029 3A FC 84         ld a,(Incrementa_puntero)
100+  902C 47               ld b,a
101+  902D 23           8 inc hl
102+  902E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  9030 5E               ld e,(hl)
104+  9031 23               inc hl
105+  9032 56               ld d,(hl)
106+  9033 EB               ex de,hl
107+  9034 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  9037 18 DF            jr 11B
109+  9039
110+  9039              ; ---------- --------- --------- ---------- ----------
111+  9039              ;
112+  9039              ;   11/8/22
113+  9039              ;
114+  9039              ;   Prepara_Puntero_mov
115+  9039
116+  9039 E5           Prepara_Puntero_mov push hl
117+  903A D5               push de
118+  903B 2A F7 84         ld hl,(Puntero_indice_mov)
119+  903E 5E               ld e,(hl)
120+  903F 23               inc hl
121+  9040 56               ld d,(hl)
122+  9041 EB               ex de,hl
123+  9042 22 F9 84         ld (Puntero_mov),hl
124+  9045 D1               pop de
125+  9046 E1               pop hl
126+  9047 C9               ret
127+  9048
128+  9048              ; ---------- --------- --------- ---------- ----------
129+  9048              ;
130+  9048              ;   11/8/22
131+  9048              ;
132+  9048              ;   Reinicia_el_movimiento
133+  9048
134+  9048 CD 39 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  904B AF               xor a
136+  904C 32 FB 84         ld (Contador_db_mov),a
137+  904F 32 FC 84         ld (Incrementa_puntero),a
138+  9052 C3 B7 8F         jp Movimiento
139+  9055
140+  9055              ; ---------- --------- --------- ---------- ----------
141+  9055
142+  9055
143+  9055
144+  9055
145+  9055
146+  9055
147+  9055
148+  9055
149+  9055
150+  9055
151+  9055
152+  9055
153+  9055
154+  9055
155+  9055
156+  9055
157+  9055
158+  9055
# file closed: Patrones_de_mov.asm
600   9055              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9055              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9055              ;
  3+  9055              ;	3/1/23
  4+  9055              ;
  5+  9055              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9055
  7+  9055              ;	ADC HL,SP	LD (addr),SP
  8+  9055              ;	ADD HL,SP	LD SP,(addr)
  9+  9055              ;	ADD IX,SP	LD SP,nn
 10+  9055              ; 	ADD IY,SP	LD SP,HL
 11+  9055              ;				LD SP,IX
 12+  9055              ;	DEC SP		LD SP,IY
 13+  9055
 14+  9055              ;	EX (SP),HL
 15+  9055              ;	EX (SP),IX
 16+  9055              ;	EX (SP),IY
 17+  9055
 18+  9055              ;	INC SP
 19+  9055
 20+  9055
 21+  9055                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0A 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 0E 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 0E 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0A 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
601   7FC0
602   7FC0              	SAVESNA "Pruebas.sna", START
603   7FC0
604   7FC0
605   7FC0
# file closed: Banco_de_pruebas.asm
