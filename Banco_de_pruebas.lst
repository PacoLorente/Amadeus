# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 B3 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 B5 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B B7 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF B9 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 B3 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 58 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 8F 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 02 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 31 86      	call Inicia_Puntero_objeto
210   853A CD E6 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 4E 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 02 86     	call Inicia_punteros_de_entidades
219   8549 CD 7D 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD E5 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ; ----------------------------------------------------------------------
243   8560
244   8560 21 00 70     	ld hl,Album_de_fotos
245   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8566 3A 0E 85         ld a,(Numero_de_entidades)
248   8569 47               ld b,a
249   856A
250   856A C5           2 push bc
251   856B
252   856B CD 91 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   856E
254   856E 3A F5 84      	ld a,(Ctrl_0)
255   8571 CB 67        	bit 4,a
256   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   8575
258   8575 CD C9 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8578
260   8578 21 F5 84     	ld hl,Ctrl_0
261   857B CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
262   857D
263   857D CD 4E 86     1 call Store_Restore_entidades
264   8580
265   8580 C1           	pop bc
266   8581 10 E7        	djnz 2B
267   8583
268   8583 CD 02 86     	call Inicia_punteros_de_entidades
269   8586 CD 7D 86     	call Restore_Primera_entidad
270   8589 CD 18 86     	call Calcula_numero_de_malotes
271   858C
272   858C 3E 00        	ld a,0
273   858E D3 FE        	out ($fe),a
274   8590
275   8590 C9           	ret
276   8591
277   8591              ; --------------------------------------------------------------------------------------------------------------
278   8591              ;
279   8591              Mov_obj
280   8591
281   8591              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
282   8591
283   8591 AF           	xor a
284   8592 32 F6 84     	ld (Obj_dibujado),a
285   8595 CD D3 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
286   8598              ;														; Obj_dibujado="0".
287   8598              ; Movemos Amadeus o enemigos...
288   8598
289   8598 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   859B CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   859D C4 A3 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   85A0
293   85A0 3A F5 84     	ld a,(Ctrl_0)
294   85A3 CB 77        	bit 6,a
295   85A5 CC BB 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A8
297   85A8 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85AB CB 67        	bit 4,a
299   85AD C8           	ret z
300   85AE
301   85AE              ; ---------
302   85AE
303   85AE 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
304   85B0 32 F6 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
305   85B3 CD D3 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
306   85B6
307   85B6 CD EA 85         call Repone_borrar
308   85B9
309   85B9              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
310   85B9
311   85B9 CD BB 89     	call Prepara_draw
312   85BC CD F5 88     	call calcula_CColumnass
313   85BF CD 2C 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
314   85C2 CD 81 89     	call Define_rutina_de_impresion
315   85C5 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
316   85C8
317   85C8 C9           	ret
318   85C9
319   85C9              ; --------------------------------------------------------------------------------------------------------------
320   85C9              ;
321   85C9 CD F6 85     Borra_Pinta_obj call Repone_pintar
322   85CC CD E6 86     	call Draw
323   85CF CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
324   85D2 C9           	ret
325   85D3
326   85D3              ; --------------------------------------------------------------------------------------------------------------
327   85D3
328   85D3 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85D6 3A F6 84     	ld a,(Obj_dibujado)
330   85D9 A7           	and a
331   85DA 28 05        	jr z,1F
332   85DC 11 EE 84     	ld de,Variables_de_pintado
333   85DF 18 03        	jr 2F
334   85E1 11 E7 84     1 ld de,Variables_de_borrado
335   85E4 01 07 00     2 ld bc,7
336   85E7 ED B0        	ldir
337   85E9 C9           	ret
338   85EA
339   85EA 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
340   85ED 11 D2 84     	ld de,Filas
341   85F0 01 07 00     	ld bc,7
342   85F3 ED B0        	ldir
343   85F5 C9           	ret
344   85F6
345   85F6 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
346   85F9 11 D2 84     	ld de,Filas
347   85FC 01 07 00     	ld bc,7
348   85FF ED B0        	ldir
349   8601 C9           	ret
350   8602
351   8602              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   8602              ;	ld (Caja_de_BORRADO),hl
353   8602              ;	ret
354   8602
355   8602              ; *************************************************************************************************************************************************************
356   8602              ;
357   8602              ; 8/1/23
358   8602              ;
359   8602              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
360   8602              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
361   8602              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
362   8602
363   8602              ; Destruye HL y DE !!!!!
364   8602
365   8602 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
366   8605 CD 2B 86         call Extrae_address
367   8608 22 08 85         ld (Puntero_store_entidades),hl
368   860B 21 C2 83     	ld hl,Indice_de_entidades+2
369   860E 22 0C 85     	ld (Indice_restore),hl
370   8611 CD 2B 86     	call Extrae_address
371   8614 22 0A 85     	ld (Puntero_restore_entidades),hl
372   8617 C9               ret
373   8618
374   8618              ; -------------------------------------------------------------------------------------------------------------
375   8618              ;
376   8618              ; 7/1/23
377   8618              ;
378   8618
379   8618 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   861B AF           	xor a
381   861C 67           	ld h,a
382   861D 7D           	ld a,l
383   861E D6 06        1 sub 6
384   8620 28 03        	jr z,2F
385   8622 24           	inc h
386   8623 18 F9        	jr 1B
387   8625 24           2 inc h
388   8626 7C           	ld a,h
389   8627 32 0F 85     	ld (Numero_de_malotes),a
390   862A C9           	ret
391   862B
392   862B              ; *************************************************************************************************************************************************************
393   862B              ;
394   862B              ; 20/10/22
395   862B              ;
396   862B              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   862B              ;
398   862B              ; Destruye el puntero y DE !!!!!
399   862B
400   862B 5E           Extrae_address ld e,(hl)
401   862C 23           	inc hl
402   862D 56           	ld d,(hl)
403   862E 2B           	dec hl
404   862F EB           	ex de,hl
405   8630 C9           	ret
406   8631
407   8631              ; *************************************************************************************************************************************************************
408   8631              ;
409   8631              ;	21/9/22
410   8631              ;
411   8631              ;   Destruye HL y BC !!!!!,
412   8631
413   8631 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
414   8634 22 DC 84     	ld (Puntero_DESPLZ),hl
415   8637 CD 2B 86     	call Extrae_address
416   863A 22 D6 84     	ld (Puntero_objeto),hl
417   863D
418   863D              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   863D
420   863D 21 10 83     	ld hl,Amadeus
421   8640 ED 4B D6 84  	ld bc,(Puntero_objeto)
422   8644 B7 ED 42     	sub hl,bc
423   8647 C0           	ret nz
424   8648
425   8648 21 F5 84     	ld hl,Ctrl_0
426   864B CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   864D
428   864D C9            	ret 												; _de nuestra nave en los extremos.
429   864E
430   864E              ; *************************************************************************************************************************************************************
431   864E              ;
432   864E              ;	8/1/23
433   864E              ;
434   864E              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
435   864E              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
436   864E
437   864E              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
438   864E              ;	_de la 2ª y 3ª entidad respectivamente.
439   864E
440   864E
441   864E
442   864E              Store_Restore_entidades
443   864E
444   864E E5           	push hl
445   864F D5           	push de
446   8650 C5            	push bc
447   8651
448   8651              ;	STORE !!!!!
449   8651
450   8651 21 D2 84     	ld hl,Filas
451   8654 ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
452   8658 01 36 00     	ld bc,54
453   865B ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
454   865D
455   865D              ;	Incrementa STORE y ejecuta RESTORE !!!!!
456   865D
457   865D 2A 0A 85     	ld hl,(Puntero_restore_entidades)
458   8660 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
459   8663 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
460   8666 01 36 00     	ld bc,54
461   8669 ED B0        	ldir
462   866B
463   866B              ;	Incrementa RESTORE !!!!!
464   866B
465   866B 2A 0C 85         ld hl,(Indice_restore)
466   866E 23           	inc hl
467   866F 23           	inc hl
468   8670 22 0C 85     	ld (Indice_restore),hl
469   8673 CD 2B 86         call Extrae_address
470   8676 22 0A 85         ld (Puntero_restore_entidades),hl
471   8679
472   8679 C1           	pop bc
473   867A D1           	pop de
474   867B E1           	pop hl
475   867C
476   867C C9           	ret
477   867D
478   867D              ; **************************************************************************************************
479   867D              ;
480   867D              ;	29/10/22
481   867D              ;
482   867D              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
483   867D
484   867D E5           Restore_Primera_entidad push hl
485   867E D5           	push de
486   867F C5            	push bc
487   8680 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
488   8683 11 D2 84     	ld de,Filas
489   8686 01 36 00     	ld bc,54
490   8689 ED B0        	ldir
491   868B C1           	pop bc
492   868C D1           	pop de
493   868D E1           	pop hl
494   868E C9           	ret
495   868F
496   868F              ; *************************************************************************************************************************************************************
497   868F              ;
498   868F              ; Teclado.
499   868F
500   868F 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
501   8691 DB FE        	in a,($fe)
502   8693 E6 01        	and $01
503   8695 28 02        	jr z,1f
504   8697 18 F6        	jr Pulsa_ENTER
505   8699 C9           1 ret
506   869A
507   869A              ; **************************************************************************************************
508   869A              ;
509   869A              ; Temporización.
510   869A
511   869A              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
512   869A              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
513   869A              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
514   869A              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
515   869A
516   869A              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
517   869A              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
518   869A              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
519   869A
520   869A              ; A partir de $4f61 no hace falta DELAY.
521   869A
522   869A              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
523   869A
524   869A 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
525   869D 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
526   869E 78           	LD A,B
527   869F A7           	AND A
528   86A0 20 FB        	JR NZ,wait
529   86A2 C9           	RET
530   86A3
531   86A3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
532   86A3              ;
533   86A3              ;	21/4/22
534   86A3
535   86A3              Movimiento_Amadeus
536   86A3
537   86A3 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
538   86A5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
539   86A7 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
540   86A9 CC BD 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
541   86AC 3E F7        	ld a,$f7
542   86AE DB FE        	in a,($fe)
543   86B0 E6 01        	and $01
544   86B2 C8           	ret z
545   86B3 3E F7        	ld a,$f7
546   86B5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
547   86B7 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
548   86B9 CC C8 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
549   86BC C9               ret
550   86BD
551   86BD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
552   86BD
553   86BD              ; Pinta indicadores de FILAS. ------------------------------------------------------
554   86BD
555   86BD 21 10 40     Pinta_FILAS ld hl,$4010
556   86C0              ;	ld b,9
557   86C0              ;2 push hl
558   86C0              ;	push bc
559   86C0 06 BF        	ld b,$bf
560   86C2 36 80        1 ld (hl),%10000000
561   86C4 CD C7 89     	call NextScan
562   86C7 10 F9        	djnz 1B
563   86C9              ;	pop bc
564   86C9              ;	pop hl
565   86C9              ;	inc l
566   86C9              ;	djnz 2B
567   86C9
568   86C9 06 03        	ld b,3
569   86CB 21 00 47         ld hl,$4700
570   86CE CD D4 86     3 call Bucle_1
571   86D1 10 FB            djnz 3B
572   86D3 C9               ret
573   86D4
574   86D4 C5           Bucle_1 push bc
575   86D5 E5                   push hl
576   86D6 D1                   pop de
577   86D7 13                   inc de
578   86D8 01 FF 00             ld bc,255
579   86DB 36 FF                ld (hl),255
580   86DD ED B0                ldir
581   86DF 23                   inc hl
582   86E0 3E 07                ld a,7
583   86E2 84                   add a,h
584   86E3 67                   ld h,a
585   86E4 C1                   pop bc
586   86E5 C9                   ret
587   86E6
588   86E6              ; ---------------------------------------------------------------
589   86E6
590   86E6              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E6              ; ******************************************************************************************************************************************************************************************
  2+  86E6              ;
  3+  86E6              ; 01/23
  4+  86E6              ;
  5+  86E6              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E6
  7+  86E6 CD BB 89     Draw call Prepara_draw
  8+  86E9 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86EA A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86EB 28 05        	jr z,2F
 11+  86ED 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F0 18 0C        	jr 1F
 13+  86F2 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F5 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F8 CD 82 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86FB              ;													; _la esquina superior izquierda de la pantalla.
 17+  86FB CD 3D 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86FE 3A F5 84     1 ld a,(Ctrl_0)
 19+  8701 CB 6F        	bit 5,a
 20+  8703 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8705
 22+  8705 CD 1D 87     	call Comprueba_limite_horizontal
 23+  8708 CD AB 87     	call Comprueba_limite_vertical
 24+  870B
 25+  870B              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  870B
 27+  870B CD F5 88     3 call calcula_CColumnass
 28+  870E CD 2C 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8711 CD 81 89     	call Define_rutina_de_impresion
 30+  8714
 31+  8714 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8717 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8719 32 F5 84     	ld (Ctrl_0),a
 34+  871C
 35+  871C C9           	ret
 36+  871D
 37+  871D              ; *******************************************************************************************************************************************************************************************
 38+  871D              ;	17/1/23
 39+  871D              ;
 40+  871D              ; 	Comprueba_limite_horizontal.
 41+  871D              ;
 42+  871D
 43+  871D              Comprueba_limite_horizontal
 44+  871D
 45+  871D 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^1F^ para comprobar_
 46+  8720 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 47+  8722 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 48+  8724
 49+  8724 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 50+  8726 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 51+  8729 18 09            jr 6F
 52+  872B CB 5F        1 bit 3,a
 53+  872D 28 0A            jr z,2F
 54+  872F E6 F7            and $f7
 55+  8731 32 F5 84         ld (Ctrl_0),a
 56+  8734
 57+  8734 CD 82 88     6 call Inicializacion
 58+  8737
 59+  8737 18 59            jr 5F
 60+  8739 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 61+  873A
 62+  873A              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 63+  873A              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 64+  873A
 65+  873A EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 66+  873B 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 67+  873E CD 20 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 68+  8741 67           	ld h,a
 69+  8742 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 70+  8743 CD 20 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 71+  8746 67           	ld h,a
 72+  8747 A7           	and a
 73+  8748 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 74+  874A 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 75+  874B
 76+  874B 3A E0 84     	ld a,(Cuad_objeto)
 77+  874E FE 02        	cp 2
 78+  8750 38 1C        	jr c,3F
 79+  8752 28 1A        	jr z,3F
 80+  8754
 81+  8754 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 82+  8755 28 21            jr z,7F
 83+  8757 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 84+  8759              ;	ld e,0
 85+  8759 E1           	pop hl
 86+  875A
 87+  875A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 88+  875A              ; _para indicar con E="2" en caso necesario.
 89+  875A
 90+  875A E5               push hl
 91+  875B C5               push bc
 92+  875C
 93+  875C CD 20 8C     	call calcula_tercio
 94+  875F FE 01        	cp 1
 95+  8761 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 96+  8763
 97+  8763 CD 93 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8766 28 26            jr z,9F
 99+  8768 38 24            jr c,9F
100+  876A 1E 00        11 ld e,0
101+  876C 18 22            jr 8F
102+  876E
103+  876E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  876F 28 07        	jr z, 7F
105+  8771 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8773 1E 00         	ld e,0
107+  8775 E1           	pop hl
108+  8776 18 04        	jr 4F
109+  8778 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  877A 18 15            jr 10F
111+  877C
112+  877C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  877C              ; _para indicar con E="2" en caso necesario.
114+  877C
115+  877C E5           4 push hl
116+  877D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  877E
118+  877E CD 20 8C     	call calcula_tercio
119+  8781 FE 01        	cp 1
120+  8783 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
121+  8785 CD 93 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
122+  8788 28 04            jr z,9F
123+  878A 30 02            jr nc,9F
124+  878C 18 02        	jr 8F
125+  878E 1E 02        9 ld e,2
126+  8790 C1           8 pop bc
127+  8791 E1           10 pop hl
128+  8792 C9           5 ret
129+  8793
130+  8793              ; --------------------
131+  8793              ;
132+  8793              ; 25/08/22
133+  8793
134+  8793 CD 20 8C     Comprueba_centro call calcula_tercio
135+  8796 67               ld h,a
136+  8797 08           	ex af,af
137+  8798 FE 02        	cp 2
138+  879A 38 07        	jr c,1F
139+  879C 28 05        	jr z,1F
140+  879E 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
141+  87A1 18 03        	jr 2F
142+  87A3 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
143+  87A6 08           2 ex af,af
144+  87A7 A7               and a
145+  87A8 ED 42            sbc hl,bc
146+  87AA C9               ret
147+  87AB
148+  87AB              ; *********************************************************************************************************************************************************************************************
149+  87AB              ;
150+  87AB              ;   16/8/22
151+  87AB              ;
152+  87AB              ;	Comprueba_limite_vertical
153+  87AB              ;
154+  87AB              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
155+  87AB              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
156+  87AB              ;
157+  87AB
158+  87AB              Comprueba_limite_vertical
159+  87AB
160+  87AB              ;	ld a,(Obj_dibujado)
161+  87AB              ;	and a
162+  87AB              ;	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
163+  87AB
164+  87AB              ;	jr $
165+  87AB
166+  87AB 7D           	ld a,l
167+  87AC E6 1F        	and $1F
168+  87AE 57           	ld d,a
169+  87AF 3A 03 85     	ld a,(Limite_vertical)
170+  87B2 BA           	cp d 											; Límite - Posición.
171+  87B3 08           	ex af,af 										; Resultado de CP d en F'.
172+  87B4
173+  87B4 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
174+  87B7 CB 47        	bit 0,a
175+  87B9 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
176+  87BB
177+  87BB              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
178+  87BB
179+  87BB 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
180+  87BC 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
181+  87BE
182+  87BE               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
183+  87BE              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
184+  87BE
185+  87BE 3A E1 84         ld a,(Coordenada_X)
186+  87C1 16 0F            ld d,Centro_izquierda
187+  87C3 A7               and a
188+  87C4 92               sub d 											 ; Posición - Centro_izquierda.
189+  87C5
190+  87C5 28 21            jr z,3F
191+  87C7 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
192+  87C9              ;                                                    ; _salimos sin modificar nada.
193+  87C9 18 0E            jr 2F
194+  87CB
195+  87CB 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
196+  87CC 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
197+  87CE
198+  87CE              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
199+  87CE              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
200+  87CE
201+  87CE 3A E1 84         ld a,(Coordenada_X)
202+  87D1 16 10            ld d,Centro_derecha
203+  87D3 A7               and a
204+  87D4 92               sub d
205+  87D5
206+  87D5 28 11            jr z,3F
207+  87D7 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
208+  87D9              ;                                                    ; _salimos sin modificar nada.
209+  87D9 CB 43        2 bit 0,e
210+  87DB 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
211+  87DD C5           	push bc
212+  87DE CD 71 88         call Modificaccionne
213+  87E1 C1           	pop bc
214+  87E2 CD 82 88         call Inicializacion
215+  87E5 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
216+  87E6 08           	ex af,af
217+  87E7 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
218+  87E8 C9           3 ret 				 								 ; Salimos de la rutina.
219+  87E9
220+  87E9              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
221+  87E9
222+  87E9 C5           4 push bc
223+  87EA 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
224+  87ED 0A           	ld a,(bc)
225+  87EE 3D           	dec a
226+  87EF 47           	ld b,a 											 ; Columnas-1 en B.
227+  87F0 7D           	ld a,l
228+  87F1 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
229+  87F2 CB 47        	bit 0,a
230+  87F4 28 03        	jr z,5F
231+  87F6 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
232+  87F7 18 2E        	jr 7F
233+  87F9
234+  87F9              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
235+  87F9
236+  87F9 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
237+  87FA F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
238+  87FB 3A F5 84     	ld a,(Ctrl_0)
239+  87FE CB 4F        	bit 1,a
240+  8800 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
241+  8802 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
242+  8803
243+  8803              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
244+  8803
245+  8803 1C               inc e
246+  8804 1D               dec e
247+  8805 20 07            jr nz,12F
248+  8807 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
249+  8808 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
250+  8809 22 D4 84     	ld (Posicion_actual),hl
251+  880C 18 44        13 jr 9F
252+  880E
253+  880E CB 43        12 bit 0,e
254+  8810 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
255+  8812              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
256+  8812 C1           	pop bc
257+  8813 18 D3        	jr 3B
258+  8815
259+  8815 80           14 add b
260+  8816 6F               ld l,a
261+  8817 22 D4 84     	ld (Posicion_actual),hl
262+  881A CD 71 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
263+  881D 18 33            jr 9F 											 ; _inicializamos y salimos.
264+  881F
265+  881F E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
266+  8821 32 F5 84         ld (Ctrl_0),a
267+  8824 F1           	pop af
268+  8825 18 2B        	jr 9F
269+  8827
270+  8827              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
271+  8827
272+  8827 F5           7 push af
273+  8828 3A F5 84     	ld a,(Ctrl_0)
274+  882B CB 47        	bit 0,a
275+  882D 20 1D        	jr nz,8F
276+  882F F1           	pop af
277+  8830
278+  8830              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
279+  8830
280+  8830 1C           	inc e
281+  8831 1D               dec e
282+  8832 20 07            jr nz,10F
283+  8834
284+  8834 90           	sub b
285+  8835 6F               ld l,a
286+  8836 22 D4 84     	ld (Posicion_actual),hl
287+  8839 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
288+  883B              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
289+  883B CB 43        10 bit 0,e
290+  883D 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
291+  883F              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
292+  883F C1           	pop bc
293+  8840 18 A6        	jr 3B
294+  8842
295+  8842 90           16 sub b
296+  8843 6F               ld l,a
297+  8844 22 D4 84     	ld (Posicion_actual),hl
298+  8847 CD 71 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
299+  884A 18 06            jr 9F
300+  884C
301+  884C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
302+  884E 32 F5 84         ld (Ctrl_0),a
303+  8851 F1           	pop af
304+  8852
305+  8852 C1           9 pop bc
306+  8853              ;	ld e,0
307+  8853 CD 82 88         call Inicializacion
308+  8856 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
309+  8857 08           	ex af,af
310+  8858 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
311+  8859 18 8D            jr 3B
312+  885B
313+  885B              ; --------------------
314+  885B
315+  885B              Modifica_Pos_actual
316+  885B
317+  885B              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
318+  885B
319+  885B 05               dec B                                           ; Scanlines-1 en B.
320+  885C CD D6 89     1 call PreviousScan
321+  885F 10 FB            djnz 1B
322+  8861 22 D4 84     	ld (Posicion_actual),hl
323+  8864 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
324+  8865 C9           	ret
325+  8866
326+  8866              ; --------------------
327+  8866
328+  8866              Modifica_Pos_actual2
329+  8866
330+  8866              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
331+  8866
332+  8866 05               dec B                                           ; Scanlines-1 en B.
333+  8867 CD C7 89     1 call NextScan
334+  886A 10 FB            djnz 1B
335+  886C 22 D4 84     	ld (Posicion_actual),hl
336+  886F AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
337+  8870 C9           	ret
338+  8871
339+  8871              ; --------------------
340+  8871
341+  8871              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
342+  8871              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
343+  8871
344+  8871 08           Modificaccionne ex af,af
345+  8872 FE 02            cp 2
346+  8874 F5               push af                                         ; Guardo el resultado de la comparación.
347+  8875 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
348+  8876 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
349+  8877 CC 5B 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
350+  887A DC 5B 88         call c,Modifica_Pos_actual
351+  887D C8           	ret z
352+  887E CD 66 88         call Modifica_Pos_actual2
353+  8881 C9               ret
354+  8882
355+  8882              ; *************************************************************************************************************************************************************************************************
356+  8882              ;
357+  8882              ;	13/8/22
358+  8882              ;
359+  8882              ;	Inicializacion
360+  8882              ;
361+  8882              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
362+  8882              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
363+  8882              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
364+  8882              ;
365+  8882              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
366+  8882              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
367+  8882              ;	_ desaparece/aparece.
368+  8882
369+  8882              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
370+  8882              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
371+  8882              ;
372+  8882              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
373+  8882              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
374+  8882              ; 		   [E] ="0"
375+  8882
376+  8882              ; 	OUTPUT: DESTRUYE [AF] y [D].
377+  8882
378+  8882 CD 20 8C     Inicializacion call calcula_tercio
379+  8885 28 36        	jr z,primit
380+  8887 E6 02        	and 2
381+  8889 20 07        	jr nz,segmit
382+  888B 7D           	ld a,l
383+  888C FE 7F        	cp $7f
384+  888E 38 2D        	jr c,primit
385+  8890 28 2B        	jr z,primit
386+  8892 CD EF 88     segmit call column
387+  8895 38 13        	jr c,tercuad
388+  8897 3E 04        cuarcuad ld a,4
389+  8899 32 E0 84     	ld (Cuad_objeto),a
390+  889C 21 20 48     	ld hl,$4820
391+  889F 22 01 85     	ld (Limite_horizontal),hl
392+  88A2 21 03 85     	ld hl,Limite_vertical
393+  88A5 36 0D        	ld (hl),$0d
394+  88A7 08           	ex af,af
395+  88A8 18 3C        	jr 1F
396+  88AA              tercuad
397+  88AA              ;	call Fija_punteros
398+  88AA 3E 03        	ld a,3
399+  88AC 32 E0 84     	ld (Cuad_objeto),a
400+  88AF 21 20 48     	ld hl,$4820
401+  88B2 22 01 85     	ld (Limite_horizontal),hl
402+  88B5 21 03 85     	ld hl,Limite_vertical
403+  88B8 36 12        	ld (hl),$12
404+  88BA 08           	ex af,af
405+  88BB 18 29        	jr 1F
406+  88BD CD EF 88     primit call column
407+  88C0 38 13        	jr c, primcuad
408+  88C2              segcuad
409+  88C2              ;	call Fija_punteros
410+  88C2 3E 02        	ld a,2
411+  88C4 32 E0 84     	ld (Cuad_objeto),a
412+  88C7 21 C0 4F     	ld hl,$4fc0
413+  88CA 22 01 85     	ld (Limite_horizontal),hl
414+  88CD 21 03 85     	ld hl,Limite_vertical
415+  88D0 36 0D        	ld (hl),$0d
416+  88D2 08           	ex af,af
417+  88D3 18 11        	jr 1F
418+  88D5              primcuad
419+  88D5              ;	call Fija_punteros
420+  88D5 3E 01        	ld a,1
421+  88D7 32 E0 84     	ld (Cuad_objeto),a
422+  88DA 21 C0 4F     	ld hl,$4fc0
423+  88DD 22 01 85     	ld (Limite_horizontal),hl
424+  88E0 21 03 85     	ld hl,Limite_vertical
425+  88E3 36 12        	ld (hl),$12
426+  88E5 08           	ex af,af
427+  88E6 CD 43 8F     1 call Genera_coordenadas
428+  88E9 21 F5 84     	ld hl,Ctrl_0
429+  88EC CB EE        	set 5,(hl)
430+  88EE C9           	ret
431+  88EF
432+  88EF              ; ------------------------------------------------------------------------------------------------------------------
433+  88EF
434+  88EF              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
435+  88EF              ;
436+  88EF              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
437+  88EF
438+  88EF 7D           column ld a,l
439+  88F0 E6 1F        	and $1f
440+  88F2 FE 10         	cp $10
441+  88F4 C9            	ret
442+  88F5
443+  88F5              ; --------------------------------------------------------------------------------------------------------------------
444+  88F5              ;
445+  88F5              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
446+  88F5              ;
447+  88F5              ; 14/12/22
448+  88F5              ;
449+  88F5              ;	Modifica: A y BC.
450+  88F5
451+  88F5 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
452+  88F8 E6 01        	and 1
453+  88FA 28 17        	jr z,1F
454+  88FC
455+  88FC              ; Nos encontramos en la parte izquierda de la pantalla
456+  88FC
457+  88FC 3A E1 84     	ld a,(Coordenada_X)
458+  88FF 47           	ld b,a
459+  8900 04           	inc b											; (Coordenada_X)+1 en B.
460+  8901 79           	ld a,c
461+  8902 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
462+  8903 38 08        	jr c,2F
463+  8905 47           	ld b,a
464+  8906 79           	ld a,c
465+  8907 90           	sub b
466+  8908 32 00 85     	ld (Columnas),a
467+  890B 18 1B        	jr 4F
468+  890D 79           2 ld a,c
469+  890E 32 00 85     	ld (Columnas),a
470+  8911 18 15        	jr 4F
471+  8913
472+  8913              ; Nos encontramos en la parte derecha de la pantalla.
473+  8913
474+  8913 3A E1 84     1 ld a,(Coordenada_X)
475+  8916 81           	add c
476+  8917 3D           	dec a
477+  8918 D6 1F        	sub $1f
478+  891A 38 08        	jr c,3F
479+  891C 47           	ld b,a
480+  891D 79           	ld a,c
481+  891E 90           	sub b
482+  891F 32 00 85     	ld (Columnas),a
483+  8922 18 04        	jr 4F
484+  8924 79           3 ld a,c
485+  8925 32 00 85     	ld (Columnas),a
486+  8928 D9           4 exx
487+  8929 4F           	ld c,a
488+  892A D9           	exx
489+  892B C9            ret
490+  892C
491+  892C              ; --------------------------------------------------------------------------------------------------------------------
492+  892C              ;
493+  892C              ; 7/1/23
494+  892C              ;
495+  892C              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
496+  892C              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
497+  892C              ;
498+  892C              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
499+  892C              ;	DESTRUYE: HL,B Y A.
500+  892C
501+  892C 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
502+  892F FE 02        	cp 2
503+  8931 38 18        	jr c,1F
504+  8933 28 16        	jr z,1F
505+  8935 E6 01        	and 1
506+  8937 28 0D        	jr z,3F
507+  8939
508+  8939              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
509+  8939
510+  8939 CD 75 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
511+  893C
512+  893C 7D           9 ld a,l
513+  893D E6 1F        	and $1f
514+  893F 28 2A        	jr z,7F
515+  8941 2B           	dec hl
516+  8942 10 F8        	djnz 9B
517+  8944 18 25        	jr 7F
518+  8946
519+  8946              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
520+  8946
521+  8946 2A D4 84     3 ld hl,(Posicion_actual)
522+  8949 18 20        	jr 7F
523+  894B
524+  894B 28 14        1 jr z,2F
525+  894D
526+  894D              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
527+  894D
528+  894D CD 75 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
529+  8950 7D           4 ld a,l
530+  8951 E6 1F        	and $1f
531+  8953 28 03        	jr z,6F
532+  8955 2B           	dec hl
533+  8956 10 F8        	djnz 4B
534+  8958 06 0F        6 ld b,15
535+  895A CD D6 89     5 call PreviousScan
536+  895D 10 FB        	djnz 5B
537+  895F 18 0A        	jr 7F
538+  8961
539+  8961              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
540+  8961
541+  8961 CD 75 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8964 06 0F        	ld b,15
543+  8966 CD D6 89     8 call PreviousScan
544+  8969 10 FB        	djnz 8B
545+  896B
546+  896B E5           7 push hl
547+  896C DD E1        	pop ix
548+  896E
549+  896E 2A D6 84     	ld hl,(Puntero_objeto)
550+  8971 E5           	push hl
551+  8972 FD E1        	pop iy
552+  8974
553+  8974 C9           	ret
554+  8975
555+  8975              ; --------------------------------------------------------------------------------------------------------------------
556+  8975              ;
557+  8975              ;	2/1/23
558+  8975              ;
559+  8975              ;	Sub-rutina de [Calcula_puntero_de_impresion].
560+  8975              ;
561+  8975              ;	Tras esta rutina tenemos:
562+  8975              ;
563+  8975              ;	OUTPUT: HL contiene (Posicion_actual).
564+  8975              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
565+  8975              ;
566+  8975              ;	DESTRUYE!!!!! HL,B y A.
567+  8975
568+  8975 2A D4 84     Operandos ld hl,(Posicion_actual)
569+  8978 3A 00 85     	ld a,(Columnas)
570+  897B 3D           	dec a
571+  897C 20 01        	jr nz,1F
572+  897E 3C           	inc a
573+  897F 47           1 ld b,a
574+  8980 C9           	ret
575+  8981
576+  8981              ; --------------------------------------------------------------------------------------------------------------------
577+  8981              ;
578+  8981              ;	3/1/23
579+  8981              ;
580+  8981              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
581+  8981              ;
582+  8981              ;	Destruye: A,B,HL y DE.
583+  8981
584+  8981              Define_rutina_de_impresion
585+  8981
586+  8981 3A D3 84     	ld a,(Columns)
587+  8984 47           	ld b,a
588+  8985 3A 00 85     	ld a,(Columnas)
589+  8988 B8           	cp b
590+  8989 20 0D        	jr nz,2f
591+  898B
592+  898B              ;	La entidad se imprime entera.
593+  898B
594+  898B 21 1D 8A     	ld hl, Indice_entidades_completas
595+  898E E6 01        	and 1
596+  8990 28 02        	jr z,1F
597+  8992
598+  8992 23           	inc hl
599+  8993 23           	inc hl
600+  8994
601+  8994 CD 2B 86     1 call Extrae_address
602+  8997 C9           	ret		;	ret
603+  8998
604+  8998              ;	La entidad no se imprime entera en pantalla.
605+  8998
606+  8998 3A E0 84     2 ld a,(Cuad_objeto)
607+  899B E6 01        	and 1
608+  899D 28 17        	jr z,3F
609+  899F
610+  899F              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
611+  899F
612+  899F 21 21 8A     	ld hl, Indice_entidades_incompletas_izquierda
613+  89A2 3A D3 84     4 ld a,(Columns)
614+  89A5 E6 01        	and 1
615+  89A7 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
616+  89A9
617+  89A9 23           	inc hl
618+  89AA 23           	inc hl
619+  89AB
620+  89AB 3A 00 85     	ld a,(Columnas)
621+  89AE E6 01        	and 1
622+  89B0 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
623+  89B2
624+  89B2 23           	inc hl
625+  89B3 23           	inc hl
626+  89B4
627+  89B4 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
628+  89B6
629+  89B6 21 27 8A     3 ld hl, Indice_entidades_incompletas_derecha
630+  89B9 18 E7        	jr 4B
631+  89BB
632+  89BB              ; --------------------------------------------------------------------------------------------------------------------
633+  89BB              ;
634+  89BB              ;	Prepara_draw
635+  89BB              ;
636+  89BB              ;	Es una rutina de carga.
637+  89BB              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
638+  89BB              ;
639+  89BB              ;	FUNCIONAMIENTO:
640+  89BB              ;
641+  89BB              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
642+  89BB              ;	- LD (Posicion_actual) del objeto en [HL].
643+  89BB              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
644+  89BB              ;
645+  89BB              ;	DESTRUYE:
646+  89BB              ;
647+  89BB              ;	Logicamente, BC,HL y E quedan destruidos.
648+  89BB
649+  89BB 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
650+  89BE 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
651+  89BF 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
652+  89C0 4E           	ld c,(hl)
653+  89C1 2A D4 84     	ld hl,(Posicion_actual)
654+  89C4 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
655+  89C6 C9           	ret
656+  89C7
657+  89C7              ;----------------------------------------------------------------------------------------------------------------
658+  89C7              ;
659+  89C7              ;	5/08/22
660+  89C7              ;
661+  89C7              ;   NextScan.
662+  89C7              ;
663+  89C7              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
664+  89C7              ;
665+  89C7              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
666+  89C7              ;
667+  89C7              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
668+  89C7              ;
669+  89C7              ;       DESTRUIDOS: AF y HL !!!
670+  89C7              ;
671+  89C7              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
672+  89C7              ;
673+  89C7
674+  89C7 24           NextScan inc h          ; Incrementamos el scanline.
675+  89C8 7C               ld a,h
676+  89C9 E6 07            and 7
677+  89CB C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
678+  89CC
679+  89CC 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
680+  89CD C6 20            add a,$20           ; Vamos a comprobarlo...
681+  89CF 6F               ld l,a
682+  89D0 D8               ret c               ; Salimos si se produce el cambio de tercio.
683+  89D1
684+  89D1 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
685+  89D2 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
686+  89D4 67               ld h,a
687+  89D5 C9               ret
688+  89D6
689+  89D6              ;----------------------------------------------------------------------------------------------------------------
690+  89D6              ;
691+  89D6              ;	5/08/22
692+  89D6              ;
693+  89D6              ;   PreviousScan.
694+  89D6              ;
695+  89D6              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
696+  89D6              ;
697+  89D6              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
698+  89D6              ;
699+  89D6              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
700+  89D6              ;
701+  89D6              ;       DESTRUIDOS: AF y HL !!!
702+  89D6              ;
703+  89D6              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
704+  89D6              ;
705+  89D6
706+  89D6 7C           PreviousScan ld a,h
707+  89D7 25               dec h               ; Dec H.
708+  89D8 E6 07            and 7
709+  89DA C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
710+  89DB
711+  89DB 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
712+  89DC D6 20            sub $20             ; Vamos a comprobarlo...
713+  89DE 6F               ld l,a
714+  89DF D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
715+  89E0
716+  89E0 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
717+  89E1 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
718+  89E3 67               ld h,a
719+  89E4 C9               ret
720+  89E5
721+  89E5              ; -----------------------------------------------------------------------------------
722+  89E5              ;
723+  89E5              ;	15/1/23
724+  89E5
725+  89E5 ED 73 10 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
726+  89E9 31 00 70     	ld sp,Album_de_fotos
727+  89EC
728+  89EC FD E1        2 pop iy																	; (Puntero_objeto) en IY.
729+  89EE E1           	pop hl																	; Puntero de impresión de pantalla en HL.
730+  89EF D1           	pop de																	; Dirección de la rutina de impresión en DE.
731+  89F0
732+  89F0 ED 73 12 85  	ld (Stack_2),sp
733+  89F4 ED 7B 10 85  	ld sp,(Stack)
734+  89F8
735+  89F8              ; Fabrica la llamada a la correspondiente rutina de impresión.
736+  89F8
737+  89F8 3E CD        	ld a,$cd
738+  89FA 32 02 8A     	ld (Imprime),a
739+  89FD EB           	ex de,hl
740+  89FE 22 03 8A     	ld (Imprime+1),hl
741+  8A01 EB           	ex de,hl
742+  8A02
743+  8A02              ; Ejecuta la llamada:	CALL $xx,xx
744+  8A02
745+  8A02 00 00 00     Imprime db 0,0,0
746+  8A05
747+  8A05 ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
748+  8A09
749+  8A09 3A 0F 85     	ld a,(Numero_de_malotes)
750+  8A0C 3D           	dec a
751+  8A0D 28 09        	jr z,1F
752+  8A0F 32 0F 85      	ld (Numero_de_malotes),a
753+  8A12 ED 7B 12 85  	ld sp,(Stack_2)
754+  8A16 18 D4        	jr 2B
755+  8A18
756+  8A18 AF           1 xor a
757+  8A19 32 12 85     	ld (Stack_2),a
758+  8A1C C9           	ret
759+  8A1D
760+  8A1D
# file closed: Draw_XOR.asm
591   8A1D              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A1D              ;   índices de Rutinas de impresión.
  2+  8A1D
  3+  8A1D 2D 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A1F 5A 8A            defw Pinta_Amadeus_3x2
  5+  8A21
  6+  8A21 B0 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A23 50 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A25 04 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A27
 10+  8A27 DA 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A29 DE 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2B 92 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A2D
 14+  8A2D
 15+  8A2D              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A2D              ;
 17+  8A2D              ;   12/12/22
 18+  8A2D              ;
 19+  8A2D              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A2D              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A2D              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A2D              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A2D              ;
 24+  8A2D              ;   Modifica: DE y HL.
 25+  8A2D
 26+  8A2D ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A31 FD F9        	ld sp,iy
 28+  8A33 06 10            ld b,16
 29+  8A35 D1           1 pop de
 30+  8A36 7B               ld a,e
 31+  8A37 AE               xor (hl)
 32+  8A38 77           	ld (hl),a
 33+  8A39 23           	inc hl
 34+  8A3A 7A               ld a,d
 35+  8A3B AE               xor (hl)
 36+  8A3C 77           	ld (hl),a
 37+  8A3D 2B           	dec hl
 38+  8A3E 24           	inc h
 39+  8A3F 7C               ld a,h
 40+  8A40 E6 07            and 7
 41+  8A42 20 0A            jr nz,2F
 42+  8A44 7D               ld a,l
 43+  8A45 C6 20            add a,$20
 44+  8A47 6F               ld l,a
 45+  8A48 38 04            jr c,2F
 46+  8A4A 7C               ld a,h
 47+  8A4B D6 08            sub 8
 48+  8A4D 67               ld h,a
 49+  8A4E 7C           2 ld a,h
 50+  8A4F FE 58            cp $58
 51+  8A51 28 02            jr z,3F
 52+  8A53 10 E0            djnz 1B
 53+  8A55 ED 7B 10 85  3 ld sp,(Stack)
 54+  8A59 C9           	ret
 55+  8A5A
 56+  8A5A ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A5E FD F9        	ld sp,iy
 58+  8A60 06 08            ld b,8
 59+  8A62 D1           1 pop de
 60+  8A63 7B               ld a,e
 61+  8A64 AE               xor (hl)
 62+  8A65 77           	ld (hl),a
 63+  8A66 23           	inc hl
 64+  8A67 7A               ld a,d
 65+  8A68 AE               xor (hl)
 66+  8A69 77           	ld (hl),a
 67+  8A6A 23           	inc hl
 68+  8A6B D1           	pop de
 69+  8A6C 7B               ld a,e
 70+  8A6D AE               xor (hl)
 71+  8A6E 77           	ld (hl),a
 72+  8A6F 2B           	dec hl
 73+  8A70 2B           	dec hl
 74+  8A71 24           	inc h
 75+  8A72 7C               ld a,h
 76+  8A73 E6 07            and 7
 77+  8A75 20 0A            jr nz,2F
 78+  8A77 7D               ld a,l
 79+  8A78 C6 20            add a,$20
 80+  8A7A 6F               ld l,a
 81+  8A7B 38 04            jr c,2F
 82+  8A7D 7C               ld a,h
 83+  8A7E D6 08            sub 8
 84+  8A80 67               ld h,a
 85+  8A81 7C           2 ld a,h
 86+  8A82 FE 58            cp $58
 87+  8A84 28 25            jr z,4F
 88+  8A86 7A               ld a,d
 89+  8A87 AE               xor (hl)
 90+  8A88 77               ld (hl),a
 91+  8A89 D1           	pop de
 92+  8A8A 23           	inc hl
 93+  8A8B 7B               ld a,e
 94+  8A8C AE               xor (hl)
 95+  8A8D 77           	ld (hl),a
 96+  8A8E 23           	inc hl
 97+  8A8F 7A               ld a,d
 98+  8A90 AE               xor (hl)
 99+  8A91 77           	ld (hl),a
100+  8A92 2B           	dec hl
101+  8A93 2B           	dec hl
102+  8A94 24           	inc h
103+  8A95 7C               ld a,h
104+  8A96 E6 07            and 7
105+  8A98 20 0A            jr nz,3F
106+  8A9A 7D               ld a,l
107+  8A9B C6 20            add a,$20
108+  8A9D 6F               ld l,a
109+  8A9E 38 04            jr c,3F
110+  8AA0 7C               ld a,h
111+  8AA1 D6 08            sub 8
112+  8AA3 67               ld h,a
113+  8AA4 7C           3 ld a,h
114+  8AA5 FE 58            cp $58
115+  8AA7 28 02            jr z,4F
116+  8AA9 10 B7            djnz 1B
117+  8AAB ED 7B 10 85  4 ld sp,(Stack)
118+  8AAF C9           	ret
119+  8AB0
120+  8AB0              ; ---------------------------------------------------
121+  8AB0
122+  8AB0 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AB4 FD F9        	ld sp,iy
124+  8AB6 06 10            ld b,16
125+  8AB8 D1           1 pop de
126+  8AB9 7A           	ld a,d
127+  8ABA AE           	xor (hl)
128+  8ABB 77           	ld (hl),a
129+  8ABC 24           	inc h
130+  8ABD 7C               ld a,h
131+  8ABE E6 07            and 7
132+  8AC0 20 0C            jr nz,2F
133+  8AC2 7D               ld a,l
134+  8AC3 C6 20            add a,$20
135+  8AC5 6F               ld l,a
136+  8AC6 38 06            jr c,2F
137+  8AC8 7C               ld a,h
138+  8AC9 D6 08            sub 8
139+  8ACB 67               ld h,a
140+  8ACC 18 00            jr 2F
141+  8ACE 7C           2 ld a,h
142+  8ACF FE 58            cp $58
143+  8AD1 28 02            jr z,3F
144+  8AD3 10 E3            djnz 1B
145+  8AD5 ED 7B 10 85  3 ld sp,(Stack)
146+  8AD9 C9           	ret
147+  8ADA
148+  8ADA ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8ADE FD F9        	ld sp,iy
150+  8AE0 06 10            ld b,16
151+  8AE2 D1           1 pop de
152+  8AE3 7B           	ld a,e
153+  8AE4 AE           	xor (hl)
154+  8AE5 77           	ld (hl),a
155+  8AE6 24           	inc h
156+  8AE7 7C               ld a,h
157+  8AE8 E6 07            and 7
158+  8AEA 20 0C            jr nz,2F
159+  8AEC 7D               ld a,l
160+  8AED C6 20            add a,$20
161+  8AEF 6F               ld l,a
162+  8AF0 38 06            jr c,2F
163+  8AF2 7C               ld a,h
164+  8AF3 D6 08            sub 8
165+  8AF5 67               ld h,a
166+  8AF6 18 00            jr 2F
167+  8AF8 7C           2 ld a,h
168+  8AF9 FE 58            cp $58
169+  8AFB 28 02            jr z,3F
170+  8AFD 10 E3            djnz 1B
171+  8AFF ED 7B 10 85  3 ld sp,(Stack)
172+  8B03 C9           	ret
173+  8B04
174+  8B04              ; ---------------------------------------------------
175+  8B04
176+  8B04 ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B08 FD F9        	ld sp,iy
178+  8B0A 06 08            ld b,8
179+  8B0C D1           1 pop de
180+  8B0D 7A           	ld a,d
181+  8B0E AE           	xor (hl)
182+  8B0F 77           	ld (hl),a
183+  8B10 23           	inc hl
184+  8B11 D1           	pop de
185+  8B12 7B           	ld a,e
186+  8B13 AE           	xor (hl)
187+  8B14 77           	ld (hl),a
188+  8B15 2B           	dec hl
189+  8B16 24            	inc h
190+  8B17 7C               ld a,h
191+  8B18 E6 07            and 7
192+  8B1A 20 0A            jr nz,2F
193+  8B1C 7D               ld a,l
194+  8B1D C6 20            add a,$20
195+  8B1F 6F               ld l,a
196+  8B20 38 04            jr c,2F
197+  8B22 7C               ld a,h
198+  8B23 D6 08            sub 8
199+  8B25 67               ld h,a
200+  8B26 7C           2 ld a,h
201+  8B27 FE 58            cp $58
202+  8B29 28 20            jr z,4F
203+  8B2B D1               pop de
204+  8B2C 7B           	ld a,e
205+  8B2D AE           	xor (hl)
206+  8B2E 77           	ld (hl),a
207+  8B2F 23           	inc hl
208+  8B30 7A           	ld a,d
209+  8B31 AE           	xor (hl)
210+  8B32 77           	ld (hl),a
211+  8B33 2B           	dec hl
212+  8B34 24           	inc h
213+  8B35 7C               ld a,h
214+  8B36 E6 07            and 7
215+  8B38 20 0A            jr nz,3F
216+  8B3A 7D               ld a,l
217+  8B3B C6 20            add a,$20
218+  8B3D 6F               ld l,a
219+  8B3E 38 04            jr c,3F
220+  8B40 7C               ld a,h
221+  8B41 D6 08            sub 8
222+  8B43 67               ld h,a
223+  8B44 7C           3 ld a,h
224+  8B45 FE 58            cp $58
225+  8B47 28 02            jr z,4F
226+  8B49 10 C1            djnz 1B
227+  8B4B ED 7B 10 85  4 ld sp,(Stack)
228+  8B4F C9           	ret
229+  8B50
230+  8B50 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B54 FD F9        	ld sp,iy
232+  8B56 06 08            ld b,8
233+  8B58 D1           1 pop de
234+  8B59 D1           	pop de
235+  8B5A 7B           	ld a,e
236+  8B5B AE           	xor (hl)
237+  8B5C 77           	ld (hl),a
238+  8B5D 24            	inc h
239+  8B5E 7C               ld a,h
240+  8B5F E6 07            and 7
241+  8B61 20 0A            jr nz,2F
242+  8B63 7D               ld a,l
243+  8B64 C6 20            add a,$20
244+  8B66 6F               ld l,a
245+  8B67 38 04            jr c,2F
246+  8B69 7C               ld a,h
247+  8B6A D6 08            sub 8
248+  8B6C 67               ld h,a
249+  8B6D 7C           2 ld a,h
250+  8B6E FE 58            cp $58
251+  8B70 28 1B            jr z,4F
252+  8B72 D1               pop de
253+  8B73 7A           	ld a,d
254+  8B74 AE           	xor (hl)
255+  8B75 77           	ld (hl),a
256+  8B76 24           	inc h
257+  8B77 7C               ld a,h
258+  8B78 E6 07            and 7
259+  8B7A 20 0A            jr nz,3F
260+  8B7C 7D               ld a,l
261+  8B7D C6 20            add a,$20
262+  8B7F 6F               ld l,a
263+  8B80 38 04            jr c,3F
264+  8B82 7C               ld a,h
265+  8B83 D6 08            sub 8
266+  8B85 67               ld h,a
267+  8B86 7C           3 ld a,h
268+  8B87 FE 58            cp $58
269+  8B89 28 02            jr z,4F
270+  8B8B 10 CB            djnz 1B
271+  8B8D ED 7B 10 85  4 ld sp,(Stack)
272+  8B91 C9           	ret
273+  8B92
274+  8B92 ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B96 FD F9        	ld sp,iy
276+  8B98 06 08            ld b,8
277+  8B9A D1           1 pop de
278+  8B9B 7B           	ld a,e
279+  8B9C AE           	xor (hl)
280+  8B9D 77           	ld (hl),a
281+  8B9E 23           	inc hl
282+  8B9F 7A           	ld a,d
283+  8BA0 AE           	xor (hl)
284+  8BA1 77           	ld (hl),a
285+  8BA2 2B           	dec hl
286+  8BA3 24             	inc h
287+  8BA4 7C               ld a,h
288+  8BA5 E6 07            and 7
289+  8BA7 20 0A            jr nz,2F
290+  8BA9 7D               ld a,l
291+  8BAA C6 20            add a,$20
292+  8BAC 6F               ld l,a
293+  8BAD 38 04            jr c,2F
294+  8BAF 7C               ld a,h
295+  8BB0 D6 08            sub 8
296+  8BB2 67               ld h,a
297+  8BB3 7C           2 ld a,h
298+  8BB4 FE 58            cp $58
299+  8BB6 28 21            jr z,4F
300+  8BB8 D1               pop de
301+  8BB9 7A           	ld a,d
302+  8BBA AE           	xor (hl)
303+  8BBB 77           	ld (hl),a
304+  8BBC 23           	inc hl
305+  8BBD D1               pop de
306+  8BBE 7B           	ld a,e
307+  8BBF AE           	xor (hl)
308+  8BC0 77           	ld (hl),a
309+  8BC1 2B           	dec hl
310+  8BC2 24           	inc h
311+  8BC3 7C               ld a,h
312+  8BC4 E6 07            and 7
313+  8BC6 20 0A            jr nz,3F
314+  8BC8 7D               ld a,l
315+  8BC9 C6 20            add a,$20
316+  8BCB 6F               ld l,a
317+  8BCC 38 04            jr c,3F
318+  8BCE 7C               ld a,h
319+  8BCF D6 08            sub 8
320+  8BD1 67               ld h,a
321+  8BD2 7C           3 ld a,h
322+  8BD3 FE 58            cp $58
323+  8BD5 28 02            jr z,4F
324+  8BD7 10 C1            djnz 1B
325+  8BD9 ED 7B 10 85  4 ld sp,(Stack)
326+  8BDD C9           	ret
327+  8BDE
328+  8BDE ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BE2 FD F9        	ld sp,iy
330+  8BE4 06 08            ld b,8
331+  8BE6 D1           1 pop de
332+  8BE7 7B           	ld a,e
333+  8BE8 AE           	xor (hl)
334+  8BE9 77           	ld (hl),a
335+  8BEA 24            	inc h
336+  8BEB 7C               ld a,h
337+  8BEC E6 07            and 7
338+  8BEE 20 0A            jr nz,2F
339+  8BF0 7D               ld a,l
340+  8BF1 C6 20            add a,$20
341+  8BF3 6F               ld l,a
342+  8BF4 38 04            jr c,2F
343+  8BF6 7C               ld a,h
344+  8BF7 D6 08            sub 8
345+  8BF9 67               ld h,a
346+  8BFA 7C           2 ld a,h
347+  8BFB FE 58            cp $58
348+  8BFD 28 1C            jr z,4F
349+  8BFF D1               pop de
350+  8C00 7A           	ld a,d
351+  8C01 AE           	xor (hl)
352+  8C02 77           	ld (hl),a
353+  8C03 24           	inc h
354+  8C04 7C               ld a,h
355+  8C05 E6 07            and 7
356+  8C07 20 0A            jr nz,3F
357+  8C09 7D               ld a,l
358+  8C0A C6 20            add a,$20
359+  8C0C 6F               ld l,a
360+  8C0D 38 04            jr c,3F
361+  8C0F 7C               ld a,h
362+  8C10 D6 08            sub 8
363+  8C12 67               ld h,a
364+  8C13 7C           3 ld a,h
365+  8C14 FE 58            cp $58
366+  8C16 28 03            jr z,4F
367+  8C18 D1               pop de
368+  8C19 10 CB            djnz 1B
369+  8C1B ED 7B 10 85  4 ld sp,(Stack)
370+  8C1F C9           	ret
371+  8C20
372+  8C20              ; ---------------------------------------------------
373+  8C20
# file closed: Rutinas_de_impresion_sprites.asm
592   8C20              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C20              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C20              ;
  3+  8C20              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C20              ;
  5+  8C20              ; *****************************************************************************************************************************************************************************************
  6+  8C20              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C20
  8+  8C20 7C           calcula_tercio ld a,h
  9+  8C21 E6 18        	and $18
 10+  8C23 CB 2F        	sra a
 11+  8C25 CB 2F        	sra a
 12+  8C27 CB 2F        	sra a
 13+  8C29 C9           	ret
 14+  8C2A
# file closed: calcula_tercio.asm
593   8C2A              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C2A              ; -----------------------------------------------------------------------------------------
  2+  8C2A              ;
  3+  8C2A              ;   04/11/22
  4+  8C2A              ;
  5+  8C2A              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C2A              ;
  7+  8C2A              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C2A              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C2A              ;
 10+  8C2A              ;   DESTRUYE: HL y A. !!!!!
 11+  8C2A
 12+  8C2A CD 20 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C2D 26 58            ld h,$58
 14+  8C2F 84               add h
 15+  8C30 67               ld h,a
 16+  8C31 C9               ret
# file closed: Calcula_direccion_atributos.asm
594   8C32              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C32              ; ********** **********
  2+  8C32              ;
  3+  8C32              ;   5/11/22
  4+  8C32              ;
  5+  8C32              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C32              ;
  7+  8C32              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C32              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C32              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C32              ;
 11+  8C32              ;   NO DESTROYERSSSS !!!!!
 12+  8C32
 13+  8C32 E5           Define_atributos push hl
 14+  8C33 C5           	push bc
 15+  8C34 D5           	push de
 16+  8C35
 17+  8C35 CD 2A 8C     	call Calcula_direccion_atributos
 18+  8C38
 19+  8C38 D9               exx
 20+  8C39 E5               push hl
 21+  8C3A D9               exx
 22+  8C3B D1               pop de
 23+  8C3C
 24+  8C3C 42               ld b,d
 25+  8C3D 7B               ld a,e 									; (Attr) en A.
 26+  8C3E
 27+  8C3E C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C3F E5            	push hl 								; Guardo dirección de attr.
 29+  8C40
 30+  8C40              ; -----
 31+  8C40
 32+  8C40 77           2 ld (hl),a
 33+  8C41 0D           	dec c 									; Decremento (Columnas).
 34+  8C42 28 03        	jr z,1F
 35+  8C44 23           	inc hl
 36+  8C45 18 F9        	jr 2B
 37+  8C47
 38+  8C47 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C48 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C49
 41+  8C49 05           	dec b									; Decremento (Filas).
 42+  8C4A 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C4C
 44+  8C4C 11 20 00     	ld de,32
 45+  8C4F A7           	and a
 46+  8C50 ED 5A        	adc hl,de
 47+  8C52 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C54
 49+  8C54 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C55 C1           	pop bc
 51+  8C56 E1           	pop hl
 52+  8C57
 53+  8C57 C9           	ret
 54+  8C58
# file closed: Define_atributos.asm
595   8C58              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C58              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C58              ;
  3+  8C58              ;
  4+  8C58              ;	CLS.
  5+  8C58              ;
  6+  8C58              ;	Limpia la pantalla y define sus atributos.
  7+  8C58              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C58              ;
  9+  8C58              ;	COLORES: 0 ..... NEGRO
 10+  8C58              ;    		 1 ..... AZUL
 11+  8C58              ; 			 2 ..... ROJO
 12+  8C58              ;			 3 ..... MAGENTA
 13+  8C58              ; 			 4 ..... VERDE
 14+  8C58              ; 			 5 ..... CIAN
 15+  8C58              ;			 6 ..... AMARILLO
 16+  8C58              ; 			 7 ..... BLANCO
 17+  8C58              ;
 18+  8C58              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C58              ;
 20+  8C58              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C58
 22+  8C58
 23+  8C58 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C5B 11 01 40     	LD DE,$4001
 25+  8C5E 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C61 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C63 ED B0        	LDIR
 28+  8C65 01 FF 02     	LD BC,767
 29+  8C68 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C69 ED B0        	LDIR
 31+  8C6B C9           	ret
 32+  8C6C
# file closed: Cls.asm
596   8C6C              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C6C              ; ******************************************************************************************************************************************************************************************
  2+  8C6C              ;
  3+  8C6C              ;   19/10/22
  4+  8C6C              ;
  5+  8C6C              ;	Mov_down
  6+  8C6C              ;
  7+  8C6C              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C6C              ;
  9+  8C6C              ;
 10+  8C6C 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C6F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C71              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C71              ; 																	; _ en el caso de que no lo haya.
 14+  8C71 3A E6 84     	ld a,(Vel_down)
 15+  8C74 47           	ld b,a
 16+  8C75 2A D4 84         ld hl,(Posicion_actual)
 17+  8C78 CD 20 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C7B E6 02        	and 2
 19+  8C7D 28 0F        	jr z,1F
 20+  8C7F 7C           	ld a,h
 21+  8C80 FE 57        	cp $57
 22+  8C82 20 0A        	jr nz,1F
 23+  8C84 7D           	ld a,l
 24+  8C85 C6 20        	add $20
 25+  8C87 30 05        	jr nc,1F
 26+  8C89
 27+  8C89              ; ------------------------------
 28+  8C89 CD 2A 8F     	call Reaparece_arriba
 29+  8C8C              ;	call Reinicio
 30+  8C8C              ; ------------------------------
 31+  8C8C
 32+  8C8C 18 08        	jr 3F
 33+  8C8E CD C7 89     1 call NextScan
 34+  8C91 22 D4 84     	ld (Posicion_actual),hl
 35+  8C94 10 E2            djnz 2B
 36+  8C96 CD 43 8F     3 call Genera_coordenadas
 37+  8C99 C9           	ret
 38+  8C9A
 39+  8C9A
 40+  8C9A              ; ******************************************************************************************************************************************************************************************
 41+  8C9A              ;
 42+  8C9A              ;   19/10/22
 43+  8C9A              ;
 44+  8C9A              ;	Mov_up
 45+  8C9A              ;
 46+  8C9A              ; 	Mueve el Sprite hacia arriba.
 47+  8C9A              ;
 48+  8C9A              ;
 49+  8C9A 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C9D CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C9F              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C9F              ; 																		; _ en el caso de que no lo haya.
 53+  8C9F 3A E5 84     	ld a,(Vel_up)
 54+  8CA2 47           	ld b,a
 55+  8CA3 2A D4 84     	ld hl,(Posicion_actual)
 56+  8CA6 CD 20 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CA9 A7           	and a
 58+  8CAA 20 10        	jr nz,1F
 59+  8CAC 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CAD FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CAF 20 0B            jr nz,1F
 62+  8CB1 7D               ld a,l
 63+  8CB2 D6 20            sub $20
 64+  8CB4 30 06            jr nc,1F
 65+  8CB6 25               dec h
 66+  8CB7
 67+  8CB7              ; -----------------------------
 68+  8CB7 CD 1A 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CBA              ;	call Reinicio
 70+  8CBA              ; -----------------------------
 71+  8CBA
 72+  8CBA 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CBC CD D6 89     1 call PreviousScan
 74+  8CBF 22 D4 84     	ld (Posicion_actual),hl
 75+  8CC2 10 E2            djnz 3B
 76+  8CC4 CD 43 8F     2 call Genera_coordenadas
 77+  8CC7 C9           	ret
 78+  8CC8
 79+  8CC8              ; ******************************************************************************************************************************************************************************************
 80+  8CC8              ;
 81+  8CC8              ;	19/10/22
 82+  8CC8              ;
 83+  8CC8              ;	Mov_right.
 84+  8CC8              ;
 85+  8CC8              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CC8              ;
 87+  8CC8
 88+  8CC8 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CCB CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CCD              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CCD              ; 																	; _ en el caso de que no lo haya.
 92+  8CCD 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CD0 A7           	and a
 94+  8CD1 28 0B        	jr z,9F
 95+  8CD3
 96+  8CD3 3A F5 84     	ld a,(Ctrl_0)
 97+  8CD6 CB 7F        	bit 7,a
 98+  8CD8 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CDA 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CDD 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CDE
102+  8CDE 3A F5 84     9 ld a,(Ctrl_0)
103+  8CE1 CB 77        	bit 6,a
104+  8CE3 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CE5
106+  8CE5 CD D9 8E     	call Stop_Amadeus_right
107+  8CE8 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CE9 18 4F        	jr 8F
109+  8CEB
110+  8CEB 3A E1 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CEE FE 1E        	cp 30															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CF0 20 48        	jr nz,8F
113+  8CF2
114+  8CF2
115+  8CF2 18 FE        	jr $	;! Quiero que se pare en el último char. de la línea !!!!!!!!!!
116+  8CF4
117+  8CF4
118+  8CF4 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
119+  8CF7 A7           	and a 															; _[3] para continuar con el DESPLZ.
120+  8CF8 28 40        	jr z,8F
121+  8CFA
122+  8CFA              ; ---------- ---------- ----------
123+  8CFA              ;
124+  8CFA              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
125+  8CFA
126+  8CFA 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
127+  8CFD FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
128+  8CFF 28 11        	jr z,1F
129+  8D01 38 06        	jr c,6F
130+  8D03 FE 04        	cp 4
131+  8D05 28 14        	jr z,7F
132+  8D07 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
133+  8D09
134+  8D09              ; ---------- ---------- ----------
135+  8D09              ;
136+  8D09              ; Perfiles de velocidad
137+  8D09              ;
138+  8D09 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
139+  8D0C FE FE        	cp $fe
140+  8D0E 20 2A        	jr nz,8F
141+  8D10 18 10        	jr 3F
142+  8D12 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
143+  8D15 FE FD        	cp $fd
144+  8D17 20 21        	jr nz,8F
145+  8D19 18 07        	jr 3F
146+  8D1B 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
147+  8D1E FE FB        	cp $fb
148+  8D20 20 18        	jr nz,8F
149+  8D22
150+  8D22              ; ---------- ---------- ----------
151+  8D22
152+  8D22 CD 08 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
153+  8D25              ;	call Reinicio
154+  8D25
155+  8D25              ; ---------- ---------- ----------
156+  8D25              ;
157+  8D25              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
158+  8D25
159+  8D25 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
160+  8D27 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
161+  8D28 CD 41 8D     	call DESPLZ_DER
162+  8D2B C1           	pop bc
163+  8D2C 10 F9        	djnz 5B
164+  8D2E 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
165+  8D31 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
166+  8D32 22 D4 84     	ld (Posicion_actual),hl
167+  8D35 CD 43 8F     	call Genera_coordenadas
168+  8D38 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
169+  8D3A
170+  8D3A              ; ---------- ---------- ----------
171+  8D3A
172+  8D3A 2A D4 84     8 ld hl,(Posicion_actual)
173+  8D3D CD 41 8D     	call DESPLZ_DER
174+  8D40 C9           2 ret
175+  8D41
176+  8D41              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
177+  8D41              ;
178+  8D41              ;	22/9/22
179+  8D41              ;
180+  8D41
181+  8D41 CD 50 8D     DESPLZ_DER call Desplaza_derecha
182+  8D44 CD 65 8D         call modifica_parametros_1er_DESPLZ_2
183+  8D47 CD 8E 8D         call Ciclo_completo
184+  8D4A 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
185+  8D4D CB FE        	set 7,(hl)
186+  8D4F C9           	ret
187+  8D50
188+  8D50              ; ******************************************************************************************************************************************************************************************
189+  8D50              ;	14/9/22
190+  8D50              ;
191+  8D50
192+  8D50 3A E4 84     Desplaza_derecha ld a,(Vel_right)
193+  8D53 47           	ld b,a
194+  8D54 2A DC 84     	ld hl,(Puntero_DESPLZ)
195+  8D57 23           1 inc hl
196+  8D58 23           	inc hl
197+  8D59 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
198+  8D5B 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
199+  8D5E CD 2B 86     	call Extrae_address
200+  8D61 22 D6 84     	ld (Puntero_objeto),hl
201+  8D64 C9           	ret
202+  8D65
203+  8D65              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
204+  8D65              ;
205+  8D65              ;	24/7/22
206+  8D65              ;
207+  8D65              ;	modifica_parametros_1er_DESPLZ_2
208+  8D65              ;
209+  8D65              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
210+  8D65              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
211+  8D65              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
212+  8D65
213+  8D65 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
214+  8D68 A7           	and a
215+  8D69 20 1F        	jr nz,1F
216+  8D6B D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
217+  8D6D 32 D8 84         ld (CTRL_DESPLZ),a
218+  8D70 21 D3 84     	ld hl,Columns
219+  8D73 34           	inc (hl)
220+  8D74 3A E0 84     	ld a,(Cuad_objeto)
221+  8D77 E6 01        	and 1
222+  8D79 28 0F        	jr z,1F
223+  8D7B 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
224+  8D7E 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
225+  8D7F 22 D4 84     	ld (Posicion_actual),hl
226+  8D82 CD 43 8F     	call Genera_coordenadas
227+  8D85 CD E5 8E     	call Inc_CTRL_DESPLZ
228+  8D88 18 03        	jr 2F
229+  8D8A CD E5 8E     1 call Inc_CTRL_DESPLZ
230+  8D8D C9           2 ret
231+  8D8E
232+  8D8E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
233+  8D8E              ;
234+  8D8E              ;	24/7/22
235+  8D8E              ;
236+  8D8E              ;	Ciclo_completo.
237+  8D8E              ;
238+  8D8E              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
239+  8D8E              ;
240+  8D8E              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
241+  8D8E              ; 	Decrementamos (Columns).
242+  8D8E              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
243+  8D8E              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
244+  8D8E
245+  8D8E
246+  8D8E 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
247+  8D91 FE FF        	cp $ff
248+  8D93 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
249+  8D95 18 25        	jr 3f
250+  8D97 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
251+  8D9A 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
252+  8D9B AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
253+  8D9C 32 D8 84     	ld (CTRL_DESPLZ),a
254+  8D9F 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
255+  8DA2 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
256+  8DA4 20 0A        	jr nz,2F
257+  8DA6 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
258+  8DA9 23           	inc hl
259+  8DAA 22 D4 84     	ld (Posicion_actual),hl
260+  8DAD CD 43 8F     	call Genera_coordenadas
261+  8DB0
262+  8DB0              ; Inicia el puntero de Sprite.
263+  8DB0
264+  8DB0 2A DA 84     2 ld hl,(Indice_Sprite)
265+  8DB3 22 DC 84     	ld (Puntero_DESPLZ),hl
266+  8DB6 CD 2B 86     	call Extrae_address
267+  8DB9 22 D6 84     	ld (Puntero_objeto),hl
268+  8DBC
269+  8DBC C9           3 ret
270+  8DBD
271+  8DBD              ; ******************************************************************************************************************************************************************************************
272+  8DBD              ;
273+  8DBD              ;	19/10/22
274+  8DBD              ;
275+  8DBD              ;	Mov_left.
276+  8DBD              ;
277+  8DBD              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
278+  8DBD              ;
279+  8DBD              Mov_left
280+  8DBD
281+  8DBD 21 F5 84     	ld hl,Ctrl_0
282+  8DC0 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
283+  8DC2              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
284+  8DC2              ; 																	; _ en el caso de que no lo haya.
285+  8DC2 3A D8 84     	ld a,(CTRL_DESPLZ)
286+  8DC5 A7           	and a
287+  8DC6 20 19        	jr nz,10F
288+  8DC8
289+  8DC8 2A D6 84     	ld hl,(Puntero_objeto)
290+  8DCB 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
291+  8DCE
292+  8DCE 3A F5 84     	ld a,(Ctrl_0)
293+  8DD1 CB 77        	bit 6,a
294+  8DD3 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
295+  8DD5
296+  8DD5 CD DF 8E     	call Stop_Amadeus_left
297+  8DD8 20 5F        	jr nz,3F
298+  8DDA
299+  8DDA 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
300+  8DDD 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
301+  8DE0 C9           	ret
302+  8DE1
303+  8DE1 3A F5 84     10 ld a,(Ctrl_0)
304+  8DE4 CB 7F        	bit 7,a
305+  8DE6 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
306+  8DE8 21 D8 84     	ld hl,CTRL_DESPLZ
307+  8DEB 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
308+  8DEC
309+  8DEC 3A E1 84     11 ld a,(Coordenada_X)
310+  8DEF A7           	and a
311+  8DF0 20 47        	jr nz,3F
312+  8DF2 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
313+  8DF5 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
314+  8DF6 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
315+  8DF8
316+  8DF8              ; ---------- ---------- ----------
317+  8DF8
318+  8DF8 3A E3 84     	ld a,(Vel_left)
319+  8DFB FE 02        	cp 2
320+  8DFD 28 0F        	jr z,1F
321+  8DFF 38 04        	jr c,6F
322+  8E01 FE 04        	cp 4
323+  8E03 28 12        	jr z,7F
324+  8E05
325+  8E05              ; ---------- ---------- ----------
326+  8E05
327+  8E05 3A D8 84     6 ld a,(CTRL_DESPLZ)
328+  8E08 FE F9        	cp $f9
329+  8E0A 20 2D        	jr nz,3F
330+  8E0C 18 10        	jr 4F
331+  8E0E 3A D8 84     1 ld a,(CTRL_DESPLZ)
332+  8E11 FE FA        	cp $fa
333+  8E13 20 24        	jr nz,3F
334+  8E15 18 07        	jr 4F
335+  8E17 3A D8 84     7 ld a,(CTRL_DESPLZ)
336+  8E1A FE FC        	cp $fc
337+  8E1C 20 1B        	jr nz,3F
338+  8E1E
339+  8E1E              ; ---------- ---------- ----------
340+  8E1E
341+  8E1E CD F6 8E     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
342+  8E21              ;	call Reinicio
343+  8E21
344+  8E21              ; ---------- ---------- ----------
345+  8E21
346+  8E21 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
347+  8E23 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
348+  8E24 2A D6 84     	ld hl,(Puntero_objeto)
349+  8E27 22 DC 84     	ld (Puntero_DESPLZ),hl
350+  8E2A CD 60 8E     	call DESPLZ_IZQ
351+  8E2D C1           	pop bc
352+  8E2E 10 F3        	djnz 5B
353+  8E30 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
354+  8E33 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
355+  8E34 22 D4 84     	ld (Posicion_actual),hl
356+  8E37 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
357+  8E39
358+  8E39              ; ---------- ---------- ----------
359+  8E39
360+  8E39 3A E3 84     3 ld a,(Vel_left)
361+  8E3C FE 08        	cp 8
362+  8E3E 20 16        	jr nz,8F
363+  8E40 2A D4 84     	ld hl,(Posicion_actual)
364+  8E43 7D           	ld a,l
365+  8E44 E6 1F        	and $1f
366+  8E46 20 05        	jr nz,9F
367+  8E48
368+  8E48              ; ---------- ---------- ----------
369+  8E48
370+  8E48 CD F6 8E     	call Reaparece_derecha
371+  8E4B
372+  8E4B              ; ---------- ---------- ----------
373+  8E4B
374+  8E4B 18 0F        	jr 2F
375+  8E4D 2A D4 84     9 ld hl,(Posicion_actual)
376+  8E50 2B           	dec hl
377+  8E51 22 D4 84     	ld (Posicion_actual),hl
378+  8E54 18 06        	jr 2F
379+  8E56 2A D4 84     8 ld hl,(Posicion_actual)
380+  8E59 CD 60 8E     	call DESPLZ_IZQ
381+  8E5C CD 43 8F     2 call Genera_coordenadas
382+  8E5F C9           	ret
383+  8E60
384+  8E60              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
385+  8E60              ;
386+  8E60              ;	22/9/22
387+  8E60
388+  8E60 CD 6F 8E     DESPLZ_IZQ call Desplaza_izquierda
389+  8E63 CD 84 8E         call modifica_parametros_1er_DESPLZ
390+  8E66 CD A5 8E     	call Ciclo_completo_2
391+  8E69 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
392+  8E6C CB BE        	res 7,(hl)
393+  8E6E C9           	ret
394+  8E6F
395+  8E6F 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
396+  8E72 47           	ld b,a
397+  8E73 2A DC 84     	ld hl,(Puntero_DESPLZ)
398+  8E76 2B           1 dec hl
399+  8E77 2B           	dec hl
400+  8E78 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
401+  8E7A 22 DC 84     	ld (Puntero_DESPLZ),hl
402+  8E7D CD 2B 86     	call Extrae_address
403+  8E80 22 04 85     	ld (Caja_de_DESPLZ),hl
404+  8E83 C9           	ret
405+  8E84
406+  8E84              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
407+  8E84              ;
408+  8E84              ;	modifica_parametros_1er_DESPLZ
409+  8E84              ;
410+  8E84              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
411+  8E84              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
412+  8E84              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
413+  8E84
414+  8E84 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
415+  8E87 A7           	and a
416+  8E88 20 17        	jr nz,1F
417+  8E8A 21 D3 84     	ld hl,Columns
418+  8E8D 34           	inc (hl)
419+  8E8E 3A E0 84     	ld a,(Cuad_objeto)
420+  8E91 E6 01        	and 1
421+  8E93 20 0C        	jr nz,1F
422+  8E95 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
423+  8E98 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
424+  8E99 22 D4 84     	ld (Posicion_actual),hl
425+  8E9C CD C8 8E     	call Dec_CTRL_DESPLZ
426+  8E9F 18 03        	jr 2F
427+  8EA1 CD C8 8E     1 call Dec_CTRL_DESPLZ
428+  8EA4 C9           2 ret
429+  8EA5
430+  8EA5              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
431+  8EA5              ;
432+  8EA5 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
433+  8EA8 FE F8        	cp $f8
434+  8EAA 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
435+  8EAC 18 19        	jr 3f
436+  8EAE 21 D3 84     1 ld hl,Columns
437+  8EB1 35           	dec (hl)
438+  8EB2 AF           	xor a
439+  8EB3 32 D8 84     	ld (CTRL_DESPLZ),a
440+  8EB6 3A E0 84     	ld a,(Cuad_objeto)
441+  8EB9 E6 01        	and 1
442+  8EBB 28 07        	jr z,2F
443+  8EBD 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
444+  8EC0 2B           	dec hl
445+  8EC1 22 D4 84     	ld (Posicion_actual),hl
446+  8EC4 CD 43 8F     2 call Genera_coordenadas
447+  8EC7 C9           3 ret
448+  8EC8
449+  8EC8              ; ---------- ---------- ---------- ---------- ---------- ----------
450+  8EC8              ;
451+  8EC8              ;	Dec_CTRL_DESPLZ
452+  8EC8              ;
453+  8EC8              ;	Subrutina de [modifica_punteros].
454+  8EC8              ;
455+  8EC8              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
456+  8EC8
457+  8EC8 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
458+  8ECB 3A E3 84     	ld a,(Vel_left)
459+  8ECE A7           	and a
460+  8ECF 28 06        	jr z,1F
461+  8ED1 47           	ld b,a
462+  8ED2 35           3 dec (hl)
463+  8ED3 10 FD        	djnz 3B
464+  8ED5 18 01        	jr 2F
465+  8ED7 35           1 dec (hl)
466+  8ED8 C9           2 ret
467+  8ED9
468+  8ED9              ; ---------- ---------- ---------- ---------- ---------- ----------
469+  8ED9              ;
470+  8ED9              ;	19/10/22
471+  8ED9              ;
472+  8ED9              ;	(cp 29) para un Amadeus de 3 Columns.
473+  8ED9              ;	(cp 30)   ""  ""    ""     2 Columns.
474+  8ED9
475+  8ED9 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
476+  8EDC FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
477+  8EDE C9           	ret
478+  8EDF
479+  8EDF              ; ---------- ---------- ---------- ---------- ---------- ----------
480+  8EDF              ;
481+  8EDF              ;	19/10/22
482+  8EDF              ;
483+  8EDF              ;	(cp 2) para un Amadeus de 3 Columns.
484+  8EDF              ;	(cp 1)   ""  ""    ""     2 Columns.
485+  8EDF
486+  8EDF 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
487+  8EE2 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
488+  8EE4 C9           	ret
489+  8EE5
490+  8EE5              ; ---------- ---------- ---------- ---------- ---------- ----------
491+  8EE5              ;
492+  8EE5              ;	24/7/22
493+  8EE5              ;
494+  8EE5              ;	Inc_CTRL_DESPLZ
495+  8EE5              ;
496+  8EE5              ;	Subrutina de [modifica_punteros].
497+  8EE5              ;
498+  8EE5              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
499+  8EE5
500+  8EE5 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
501+  8EE8 3A E4 84     	ld a,(Vel_right)
502+  8EEB A7           	and a
503+  8EEC 28 06        	jr z,1F
504+  8EEE 47           	ld b,a
505+  8EEF 34           3 inc (hl)
506+  8EF0 10 FD        	djnz 3B
507+  8EF2 18 01        	jr 2F
508+  8EF4 34           1 inc (hl)
509+  8EF5 C9           2 ret
510+  8EF6
511+  8EF6              ; ---------- ---------- ---------- ---------- ---------- ----------
512+  8EF6
513+  8EF6 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
514+  8EF9 01 1F 00     	ld bc,31
515+  8EFC A7           	and a
516+  8EFD ED 4A        	adc hl,bc
517+  8EFF 22 D4 84     	ld (Posicion_actual),hl
518+  8F02 21 F5 84     	ld hl,Ctrl_0														; $xxx1
519+  8F05 CB C6        	set 0,(hl)
520+  8F07 C9           	ret
521+  8F08
522+  8F08              ; ---------- ---------- ---------- ---------- ---------- ----------
523+  8F08
524+  8F08 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
525+  8F0B 01 1F 00     	ld bc,31
526+  8F0E A7           	and a
527+  8F0F ED 42        	sbc hl,bc
528+  8F11 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
529+  8F14 21 F5 84     	ld hl,Ctrl_0
530+  8F17 CB CE        	set 1,(hl)
531+  8F19 C9           	ret
532+  8F1A
533+  8F1A              ; ---------- ---------- ---------- ---------- ---------- ----------
534+  8F1A
535+  8F1A 24           Reaparece_abajo inc h
536+  8F1B 01 E0 17     	ld bc,$17e0
537+  8F1E A7           	and a
538+  8F1F ED 4A        	adc hl,bc
539+  8F21 22 D4 84     	ld (Posicion_actual),hl
540+  8F24 21 F5 84     	ld hl,Ctrl_0
541+  8F27 CB D6        	set 2,(hl)
542+  8F29 C9           	ret
543+  8F2A
544+  8F2A              ; ---------- ---------- ---------- ---------- ---------- ----------
545+  8F2A
546+  8F2A 01 E0 17     Reaparece_arriba ld bc,$17e0
547+  8F2D A7           	and a
548+  8F2E ED 42        	sbc hl,bc
549+  8F30 22 D4 84     	ld (Posicion_actual),hl
550+  8F33 21 F5 84     	ld hl,Ctrl_0
551+  8F36 CB DE        	set 3,(hl)
552+  8F38 C9           	ret
553+  8F39
554+  8F39              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
555+  8F39
556+  8F39 2A DE 84     Reinicio ld hl,(Posicion_inicio)
557+  8F3C
558+  8F3C              ;	ld (Posicion_actual),hl
559+  8F3C 21 00 00     	ld hl,0
560+  8F3F 22 D4 84     	ld (Posicion_actual),hl
561+  8F42
562+  8F42
563+  8F42 C9           	ret
# file closed: Direcciones.asm
597   8F43              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F43              ;	12/12/22
  2+  8F43              ;
  3+  8F43              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F43              ;	Fila superior "0", Columna izquierda "0".
  5+  8F43              ;
  6+  8F43              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F43              ;
  8+  8F43              ;	Modifica: A
  9+  8F43
 10+  8F43 C5           Genera_coordenadas push bc
 11+  8F44 E5           	push hl
 12+  8F45 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F48 7D           	ld a,l
 14+  8F49 E6 1F        	and $1f
 15+  8F4B 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F4E CD 20 8C     	call calcula_tercio
 17+  8F51 47           	ld b,a
 18+  8F52 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F53 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F55 7D           	ld a,l
 21+  8F56 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F58 28 05        	jr z,2F
 23+  8F5A 0C           1 inc c
 24+  8F5B D6 20        	sub 32
 25+  8F5D 20 FB        	jr nz,1B
 26+  8F5F 0C           2 inc c
 27+  8F60 04           	inc b
 28+  8F61 05           	dec b
 29+  8F62 28 04        	jr z,3F
 30+  8F64 3E E0        	ld a,$e0
 31+  8F66 10 F2        	djnz 1B
 32+  8F68 79           3 ld a,c
 33+  8F69 3D           	dec a
 34+  8F6A 32 E2 84     	ld (Coordenada_y),a
 35+  8F6D E1           	pop hl
 36+  8F6E C1           	pop bc
 37+  8F6F C9           	ret
# file closed: Genera_coordenadas.asm
598   8F70              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F70
  2+  8F70
  3+  8F70              ;   11/8/22
  4+  8F70              ;
  5+  8F70              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F70              ;
  7+  8F70              ;   Mov_obj.asm
  8+  8F70              ;
  9+  8F70              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F70              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F70              ;
 12+  8F70              ;   Codificación:
 13+  8F70              ;
 14+  8F70              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F70              ;
 16+  8F70
 17+  8F70 02 10 00     Izquierda db 2,%00010000,0
 18+  8F73 02 20 00     Derecha db 2,%00100000,0
 19+  8F76 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F7A 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F7E 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F82 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F86 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F8A 60 42 60 40
 23+  8F8E 63
 24+  8F8F 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8F93 22 A3 80 A0
 25+  8F97 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8F9B 84 A0 83 A0
 26+  8F9F 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FA3 80 A3 22 A0
 27+  8FA7 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FAB 40 60 42 60
 28+  8FAF 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FB3
 30+  8FB3 73 8F        Indice_mov_Badsat defw Derecha
 31+  8FB5 7A 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FB7 82 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FB9 76 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FBB
 35+  8FBB 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FBE A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FBF 28 02            jr z,1F
 38+  8FC1 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FC3
 40+  8FC3 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FC6 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FC8 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FCB              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FCB 2A F9 84         ld hl,(Puntero_mov)
 45+  8FCE 7E               ld a,(hl)
 46+  8FCF 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FD2 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FD3 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FD6
 50+  8FD6 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  8FD9 A7               and a
 52+  8FDA 20 0C            jr nz,12F
 53+  8FDC 2A F9 84         ld hl,(Puntero_mov)
 54+  8FDF 7E               ld a,(hl)
 55+  8FE0 A7               and a
 56+  8FE1 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FE3
 58+  8FE3 E6 0F            and $0f
 59+  8FE5 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  8FE8              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  8FE8 2A F9 84     12 ld hl,(Puntero_mov)
 62+  8FEB CB 7E            bit 7,(hl)
 63+  8FED 28 03            jr z,2F
 64+  8FEF CD 6C 8C         call Mov_down
 65+  8FF2 2A F9 84     2 ld hl, (Puntero_mov)
 66+  8FF5 CB 76            bit 6,(hl)
 67+  8FF7 28 03            jr z,3F
 68+  8FF9 CD 9A 8C         call Mov_up
 69+  8FFC 2A F9 84     3 ld hl, (Puntero_mov)
 70+  8FFF CB 6E            bit 5,(hl)
 71+  9001 28 03            jr z,4F
 72+  9003 CD C8 8C         call Mov_right
 73+  9006 2A F9 84     4 ld hl, (Puntero_mov)
 74+  9009 CB 66            bit 4,(hl)
 75+  900B 28 03            jr z,5F
 76+  900D CD BD 8D         call Mov_left
 77+  9010
 78+  9010              ; ---------- --------- --------- ---------- ----------
 79+  9010
 80+  9010 3A FD 84     5 ld a,(Repetimos_db)
 81+  9013 A7               and a
 82+  9014 28 07            jr z,6F
 83+  9016 3D               dec a
 84+  9017 32 FD 84         ld (Repetimos_db),a
 85+  901A 28 01            jr z,6f
 86+  901C C9           11 ret
 87+  901D 21 FB 84     6 ld hl,Contador_db_mov
 88+  9020 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9021 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9024 23               inc hl
 91+  9025 22 F9 84         ld (Puntero_mov),hl
 92+  9028 18 F2            jr 11B
 93+  902A 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  902D 3A FC 84         ld a,(Incrementa_puntero)
 95+  9030 47               ld b,a
 96+  9031 23           8 inc hl
 97+  9032 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9034 5E               ld e,(hl)
 99+  9035 23               inc hl
100+  9036 56               ld d,(hl)
101+  9037 EB               ex de,hl
102+  9038 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  903B 18 DF            jr 11B
104+  903D
105+  903D              ; ---------- --------- --------- ---------- ----------
106+  903D              ;
107+  903D              ;   11/8/22
108+  903D              ;
109+  903D              ;   Prepara_Puntero_mov
110+  903D
111+  903D E5           Prepara_Puntero_mov push hl
112+  903E D5               push de
113+  903F 2A F7 84         ld hl,(Puntero_indice_mov)
114+  9042 5E               ld e,(hl)
115+  9043 23               inc hl
116+  9044 56               ld d,(hl)
117+  9045 EB               ex de,hl
118+  9046 22 F9 84         ld (Puntero_mov),hl
119+  9049 D1               pop de
120+  904A E1               pop hl
121+  904B C9               ret
122+  904C
123+  904C              ; ---------- --------- --------- ---------- ----------
124+  904C              ;
125+  904C              ;   11/8/22
126+  904C              ;
127+  904C              ;   Reinicia_el_movimiento
128+  904C
129+  904C CD 3D 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  904F AF               xor a
131+  9050 32 FB 84         ld (Contador_db_mov),a
132+  9053 32 FC 84         ld (Incrementa_puntero),a
133+  9056 C3 BB 8F         jp Movimiento
134+  9059
135+  9059              ; ---------- --------- --------- ---------- ----------
136+  9059
137+  9059
138+  9059
139+  9059
140+  9059
141+  9059
142+  9059
143+  9059
144+  9059
145+  9059
146+  9059
147+  9059
148+  9059
149+  9059
150+  9059
151+  9059
152+  9059
153+  9059
# file closed: Patrones_de_mov.asm
599   9059              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9059              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9059              ;
  3+  9059              ;	3/1/23
  4+  9059              ;
  5+  9059              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9059
  7+  9059              ;	ADC HL,SP	LD (addr),SP
  8+  9059              ;	ADD HL,SP	LD SP,(addr)
  9+  9059              ;	ADD IX,SP	LD SP,nn
 10+  9059              ; 	ADD IY,SP	LD SP,HL
 11+  9059              ;				LD SP,IX
 12+  9059              ;	DEC SP		LD SP,IY
 13+  9059
 14+  9059              ;	EX (SP),HL
 15+  9059              ;	EX (SP),IX
 16+  9059              ;	EX (SP),IY
 17+  9059
 18+  9059              ;	INC SP
 19+  9059
 20+  9059
 21+  9059                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
600   7FC0
601   7FC0              	SAVESNA "Pruebas.sna", START
602   7FC0
603   7FC0
604   7FC0
# file closed: Banco_de_pruebas.asm
