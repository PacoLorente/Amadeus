# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 AA 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 AC 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B AE 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF B0 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 AA 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 51 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 8F 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 02 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 31 86      	call Inicia_Puntero_objeto
210   853A CD E6 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 4E 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 02 86     	call Inicia_punteros_de_entidades
219   8549 CD 7D 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD DE 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ; ----------------------------------------------------------------------
243   8560
244   8560 21 00 70     	ld hl,Album_de_fotos
245   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8566 3A 0E 85         ld a,(Numero_de_entidades)
248   8569 47               ld b,a
249   856A
250   856A C5           2 push bc
251   856B
252   856B CD 91 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   856E
254   856E 3A F5 84      	ld a,(Ctrl_0)
255   8571 CB 67        	bit 4,a
256   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   8575
258   8575 CD C9 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8578
260   8578 21 F5 84     	ld hl,Ctrl_0
261   857B CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
262   857D
263   857D CD 4E 86     1 call Store_Restore_entidades
264   8580
265   8580 C1           	pop bc
266   8581 10 E7        	djnz 2B
267   8583
268   8583 CD 02 86     	call Inicia_punteros_de_entidades
269   8586 CD 7D 86     	call Restore_Primera_entidad
270   8589 CD 18 86     	call Calcula_numero_de_malotes
271   858C
272   858C 3E 00        	ld a,0
273   858E D3 FE        	out ($fe),a
274   8590
275   8590 C9           	ret
276   8591
277   8591              ; --------------------------------------------------------------------------------------------------------------
278   8591              ;
279   8591              Mov_obj
280   8591
281   8591              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
282   8591
283   8591 AF           	xor a
284   8592 32 F6 84     	ld (Obj_dibujado),a
285   8595 CD D3 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
286   8598              ;														; Obj_dibujado="0".
287   8598              ; Movemos Amadeus o enemigos...
288   8598
289   8598 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   859B CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   859D C4 A3 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   85A0
293   85A0 3A F5 84     	ld a,(Ctrl_0)
294   85A3 CB 77        	bit 6,a
295   85A5 CC B2 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A8
297   85A8 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85AB CB 67        	bit 4,a
299   85AD C8           	ret z
300   85AE
301   85AE              ; ---------
302   85AE
303   85AE 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
304   85B0 32 F6 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
305   85B3 CD D3 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
306   85B6
307   85B6 CD EA 85         call Repone_borrar
308   85B9
309   85B9              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
310   85B9
311   85B9 CD B4 89     	call Prepara_draw
312   85BC CD EE 88     	call calcula_CColumnass
313   85BF CD 25 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
314   85C2 CD 7A 89     	call Define_rutina_de_impresion
315   85C5 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
316   85C8
317   85C8 C9           	ret
318   85C9
319   85C9              ; --------------------------------------------------------------------------------------------------------------
320   85C9              ;
321   85C9 CD F6 85     Borra_Pinta_obj call Repone_pintar
322   85CC CD E6 86     	call Draw
323   85CF CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
324   85D2 C9           	ret
325   85D3
326   85D3              ; --------------------------------------------------------------------------------------------------------------
327   85D3
328   85D3 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85D6 3A F6 84     	ld a,(Obj_dibujado)
330   85D9 A7           	and a
331   85DA 28 05        	jr z,1F
332   85DC 11 EE 84     	ld de,Variables_de_pintado
333   85DF 18 03        	jr 2F
334   85E1 11 E7 84     1 ld de,Variables_de_borrado
335   85E4 01 07 00     2 ld bc,7
336   85E7 ED B0        	ldir
337   85E9 C9           	ret
338   85EA
339   85EA 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
340   85ED 11 D2 84     	ld de,Filas
341   85F0 01 07 00     	ld bc,7
342   85F3 ED B0        	ldir
343   85F5 C9           	ret
344   85F6
345   85F6 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
346   85F9 11 D2 84     	ld de,Filas
347   85FC 01 07 00     	ld bc,7
348   85FF ED B0        	ldir
349   8601 C9           	ret
350   8602
351   8602              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   8602              ;	ld (Caja_de_BORRADO),hl
353   8602              ;	ret
354   8602
355   8602              ; *************************************************************************************************************************************************************
356   8602              ;
357   8602              ; 8/1/23
358   8602              ;
359   8602              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
360   8602              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
361   8602              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
362   8602
363   8602              ; Destruye HL y DE !!!!!
364   8602
365   8602 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
366   8605 CD 2B 86         call Extrae_address
367   8608 22 08 85         ld (Puntero_store_entidades),hl
368   860B 21 C2 83     	ld hl,Indice_de_entidades+2
369   860E 22 0C 85     	ld (Indice_restore),hl
370   8611 CD 2B 86     	call Extrae_address
371   8614 22 0A 85     	ld (Puntero_restore_entidades),hl
372   8617 C9               ret
373   8618
374   8618              ; -------------------------------------------------------------------------------------------------------------
375   8618              ;
376   8618              ; 7/1/23
377   8618              ;
378   8618
379   8618 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   861B AF           	xor a
381   861C 67           	ld h,a
382   861D 7D           	ld a,l
383   861E D6 06        1 sub 6
384   8620 28 03        	jr z,2F
385   8622 24           	inc h
386   8623 18 F9        	jr 1B
387   8625 24           2 inc h
388   8626 7C           	ld a,h
389   8627 32 0F 85     	ld (Numero_de_malotes),a
390   862A C9           	ret
391   862B
392   862B              ; *************************************************************************************************************************************************************
393   862B              ;
394   862B              ; 20/10/22
395   862B              ;
396   862B              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   862B              ;
398   862B              ; Destruye el puntero y DE !!!!!
399   862B
400   862B 5E           Extrae_address ld e,(hl)
401   862C 23           	inc hl
402   862D 56           	ld d,(hl)
403   862E 2B           	dec hl
404   862F EB           	ex de,hl
405   8630 C9           	ret
406   8631
407   8631              ; *************************************************************************************************************************************************************
408   8631              ;
409   8631              ;	21/9/22
410   8631              ;
411   8631              ;   Destruye HL y BC !!!!!,
412   8631
413   8631 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
414   8634 22 DC 84     	ld (Puntero_DESPLZ),hl
415   8637 CD 2B 86     	call Extrae_address
416   863A 22 D6 84     	ld (Puntero_objeto),hl
417   863D
418   863D              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   863D
420   863D 21 10 83     	ld hl,Amadeus
421   8640 ED 4B D6 84  	ld bc,(Puntero_objeto)
422   8644 B7 ED 42     	sub hl,bc
423   8647 C0           	ret nz
424   8648
425   8648 21 F5 84     	ld hl,Ctrl_0
426   864B CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   864D
428   864D C9            	ret 												; _de nuestra nave en los extremos.
429   864E
430   864E              ; *************************************************************************************************************************************************************
431   864E              ;
432   864E              ;	8/1/23
433   864E              ;
434   864E              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
435   864E              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
436   864E
437   864E              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
438   864E              ;	_de la 2ª y 3ª entidad respectivamente.
439   864E
440   864E
441   864E
442   864E              Store_Restore_entidades
443   864E
444   864E E5           	push hl
445   864F D5           	push de
446   8650 C5            	push bc
447   8651
448   8651              ;	STORE !!!!!
449   8651
450   8651 21 D2 84     	ld hl,Filas
451   8654 ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
452   8658 01 36 00     	ld bc,54
453   865B ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
454   865D
455   865D              ;	Incrementa STORE y ejecuta RESTORE !!!!!
456   865D
457   865D 2A 0A 85     	ld hl,(Puntero_restore_entidades)
458   8660 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
459   8663 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
460   8666 01 36 00     	ld bc,54
461   8669 ED B0        	ldir
462   866B
463   866B              ;	Incrementa RESTORE !!!!!
464   866B
465   866B 2A 0C 85         ld hl,(Indice_restore)
466   866E 23           	inc hl
467   866F 23           	inc hl
468   8670 22 0C 85     	ld (Indice_restore),hl
469   8673 CD 2B 86         call Extrae_address
470   8676 22 0A 85         ld (Puntero_restore_entidades),hl
471   8679
472   8679 C1           	pop bc
473   867A D1           	pop de
474   867B E1           	pop hl
475   867C
476   867C C9           	ret
477   867D
478   867D              ; **************************************************************************************************
479   867D              ;
480   867D              ;	29/10/22
481   867D              ;
482   867D              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
483   867D
484   867D E5           Restore_Primera_entidad push hl
485   867E D5           	push de
486   867F C5            	push bc
487   8680 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
488   8683 11 D2 84     	ld de,Filas
489   8686 01 36 00     	ld bc,54
490   8689 ED B0        	ldir
491   868B C1           	pop bc
492   868C D1           	pop de
493   868D E1           	pop hl
494   868E C9           	ret
495   868F
496   868F              ; *************************************************************************************************************************************************************
497   868F              ;
498   868F              ; Teclado.
499   868F
500   868F 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
501   8691 DB FE        	in a,($fe)
502   8693 E6 01        	and $01
503   8695 28 02        	jr z,1f
504   8697 18 F6        	jr Pulsa_ENTER
505   8699 C9           1 ret
506   869A
507   869A              ; **************************************************************************************************
508   869A              ;
509   869A              ; Temporización.
510   869A
511   869A              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
512   869A              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
513   869A              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
514   869A              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
515   869A
516   869A              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
517   869A              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
518   869A              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
519   869A
520   869A              ; A partir de $4f61 no hace falta DELAY.
521   869A
522   869A              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
523   869A
524   869A 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
525   869D 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
526   869E 78           	LD A,B
527   869F A7           	AND A
528   86A0 20 FB        	JR NZ,wait
529   86A2 C9           	RET
530   86A3
531   86A3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
532   86A3              ;
533   86A3              ;	21/4/22
534   86A3
535   86A3              Movimiento_Amadeus
536   86A3
537   86A3 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
538   86A5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
539   86A7 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
540   86A9 CC B4 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
541   86AC 3E F7        	ld a,$f7
542   86AE DB FE        	in a,($fe)
543   86B0 E6 01        	and $01
544   86B2 C8           	ret z
545   86B3 3E F7        	ld a,$f7
546   86B5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
547   86B7 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
548   86B9 CC C1 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
549   86BC C9               ret
550   86BD
551   86BD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
552   86BD
553   86BD              ; Pinta indicadores de FILAS. ------------------------------------------------------
554   86BD
555   86BD 21 10 40     Pinta_FILAS ld hl,$4010
556   86C0              ;	ld b,9
557   86C0              ;2 push hl
558   86C0              ;	push bc
559   86C0 06 BF        	ld b,$bf
560   86C2 36 80        1 ld (hl),%10000000
561   86C4 CD C0 89     	call NextScan
562   86C7 10 F9        	djnz 1B
563   86C9              ;	pop bc
564   86C9              ;	pop hl
565   86C9              ;	inc l
566   86C9              ;	djnz 2B
567   86C9
568   86C9 06 03        	ld b,3
569   86CB 21 00 47         ld hl,$4700
570   86CE CD D4 86     3 call Bucle_1
571   86D1 10 FB            djnz 3B
572   86D3 C9               ret
573   86D4
574   86D4 C5           Bucle_1 push bc
575   86D5 E5                   push hl
576   86D6 D1                   pop de
577   86D7 13                   inc de
578   86D8 01 FF 00             ld bc,255
579   86DB 36 FF                ld (hl),255
580   86DD ED B0                ldir
581   86DF 23                   inc hl
582   86E0 3E 07                ld a,7
583   86E2 84                   add a,h
584   86E3 67                   ld h,a
585   86E4 C1                   pop bc
586   86E5 C9                   ret
587   86E6
588   86E6              ; ---------------------------------------------------------------
589   86E6
590   86E6              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E6              ; ******************************************************************************************************************************************************************************************
  2+  86E6              ;
  3+  86E6              ; 17/08/22
  4+  86E6              ;
  5+  86E6              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E6
  7+  86E6 CD B4 89     Draw call Prepara_draw
  8+  86E9 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86EA A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86EB 28 05        	jr z,2F
 11+  86ED 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F0 18 0C        	jr 1F
 13+  86F2 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F5 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F8 CD 7B 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86FB              ;													; _la esquina superior izquierda de la pantalla.
 17+  86FB CD 34 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86FE 3A F5 84     1 ld a,(Ctrl_0)
 19+  8701 CB 6F        	bit 5,a
 20+  8703 20 00        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8705
 22+  8705              ;	call Comprueba_limite_horizontal
 23+  8705              ;	call Comprueba_limite_vertical
 24+  8705
 25+  8705              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8705
 27+  8705 CD EE 88     3 call calcula_CColumnass
 28+  8708 CD 25 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870B CD 7A 89     	call Define_rutina_de_impresion
 30+  870E
 31+  870E 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8711 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8713 32 F5 84     	ld (Ctrl_0),a
 34+  8716
 35+  8716 C9           	ret
 36+  8717
 37+  8717              ; *******************************************************************************************************************************************************************************************
 38+  8717              ;	23/8/22
 39+  8717              ;
 40+  8717              ; 	Comprueba_limite_horizontal.
 41+  8717              ;
 42+  8717
 43+  8717              Comprueba_limite_horizontal
 44+  8717
 45+  8717 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^1F^ para comprobar_
 46+  871A CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 47+  871C 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 48+  871E
 49+  871E E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 50+  8720 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 51+  8723 18 09            jr 6F
 52+  8725 CB 5F        1 bit 3,a
 53+  8727 28 0A            jr z,2F
 54+  8729 E6 F7            and $f7
 55+  872B 32 F5 84         ld (Ctrl_0),a
 56+  872E
 57+  872E CD 7B 88     6 call Inicializacion
 58+  8731
 59+  8731              ;    push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  8731              ;	ex af,af
 61+  8731              ;	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  8731
 63+  8731 18 56            jr 5F
 64+  8733 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 65+  8734
 66+  8734              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8734              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8734
 69+  8734 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8735 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  8738 CD 19 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  873B 67           	ld h,a
 73+  873C EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  873D CD 19 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8740 67           	ld h,a
 76+  8741 A7           	and a
 77+  8742 ED 52        	sbc hl,de 										; Posicíon - Límite.
 78+  8744
 79+  8744 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 80+  8745 FE 02        	cp 2
 81+  8747 38 1C        	jr c,3F
 82+  8749 28 1A        	jr z,3F
 83+  874B
 84+  874B 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  874C 28 21            jr z,7F
 86+  874E 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 87+  8750              ;	ld e,0
 88+  8750 E1           	pop hl
 89+  8751
 90+  8751              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8751              ; _para indicar con E="2" en caso necesario.
 92+  8751
 93+  8751 E5               push hl
 94+  8752 C5               push bc
 95+  8753
 96+  8753 CD 19 8C     	call calcula_tercio
 97+  8756 FE 01        	cp 1
 98+  8758 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 99+  875A
100+  875A CD 8A 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
101+  875D 28 26            jr z,9F
102+  875F 38 24            jr c,9F
103+  8761 1E 00        11 ld e,0
104+  8763 18 22            jr 8F
105+  8765
106+  8765 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
107+  8766 28 07        	jr z, 7F
108+  8768 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
109+  876A 1E 00         	ld e,0
110+  876C E1           	pop hl
111+  876D 18 04        	jr 4F
112+  876F 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
113+  8771 18 15            jr 10F
114+  8773
115+  8773              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
116+  8773              ; _para indicar con E="2" en caso necesario.
117+  8773
118+  8773 E5           4 push hl
119+  8774 C5               push bc
120+  8775
121+  8775 CD 19 8C     	call calcula_tercio
122+  8778 FE 01        	cp 1
123+  877A 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
124+  877C
125+  877C CD 8A 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
126+  877F 28 04            jr z,9F
127+  8781 30 02            jr nc,9F
128+  8783 18 02        	jr 8F
129+  8785 1E 02        9 ld e,2
130+  8787 C1           8 pop bc
131+  8788 E1           10 pop hl
132+  8789 C9           5 ret
133+  878A
134+  878A              ; --------------------
135+  878A              ;
136+  878A              ; 25/08/22
137+  878A
138+  878A CD 19 8C     Comprueba_centro call calcula_tercio
139+  878D 67               ld h,a
140+  878E 08           	ex af,af
141+  878F FE 02        	cp 2
142+  8791 38 07        	jr c,1F
143+  8793 28 05        	jr z,1F
144+  8795 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
145+  8798 18 03        	jr 2F
146+  879A 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
147+  879D 08           2 ex af,af
148+  879E A7               and a
149+  879F ED 42            sbc hl,bc
150+  87A1 C9               ret
151+  87A2
152+  87A2              ; *********************************************************************************************************************************************************************************************
153+  87A2              ;
154+  87A2              ;   16/8/22
155+  87A2              ;
156+  87A2              ;	Comprueba_limite_vertical
157+  87A2              ;
158+  87A2              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
159+  87A2              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
160+  87A2              ;
161+  87A2
162+  87A2 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
163+  87A5 A7           	and a
164+  87A6 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
165+  87A7
166+  87A7 7D           	ld a,l
167+  87A8 E6 1F        	and $1F
168+  87AA 57           	ld d,a
169+  87AB 3A 03 85     	ld a,(Limite_vertical)
170+  87AE BA           	cp d 											; Límite - Posición.
171+  87AF
172+  87AF 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
173+  87B0 CB 47        	bit 0,a
174+  87B2 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
175+  87B4
176+  87B4              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
177+  87B4
178+  87B4 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
179+  87B5 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
180+  87B7
181+  87B7               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
182+  87B7              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
183+  87B7
184+  87B7 3A E1 84         ld a,(Coordenada_X)
185+  87BA 16 0F            ld d,Centro_izquierda
186+  87BC A7               and a
187+  87BD 92               sub d 											 ; Posición - Centro_izquierda.
188+  87BE
189+  87BE 28 21            jr z,3F
190+  87C0 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
191+  87C2              ;                                                    ; _salimos sin modificar nada.
192+  87C2 18 0E            jr 2F
193+  87C4
194+  87C4 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
195+  87C5 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
196+  87C7
197+  87C7              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
198+  87C7              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
199+  87C7
200+  87C7 3A E1 84         ld a,(Coordenada_X)
201+  87CA 16 10            ld d,Centro_derecha
202+  87CC A7               and a
203+  87CD 92               sub d
204+  87CE
205+  87CE 28 11            jr z,3F
206+  87D0 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
207+  87D2              ;                                                    ; _salimos sin modificar nada.
208+  87D2 CB 43        2 bit 0,e
209+  87D4 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
210+  87D6 C5           	push bc
211+  87D7 CD 6A 88         call Modificaccionne
212+  87DA C1           	pop bc
213+  87DB CD 7B 88         call Inicializacion
214+  87DE F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
215+  87DF 08           	ex af,af
216+  87E0 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
217+  87E1 C9           3 ret 				 								 ; Salimos de la rutina.
218+  87E2
219+  87E2              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
220+  87E2
221+  87E2 C5           4 push bc
222+  87E3 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
223+  87E6 0A           	ld a,(bc)
224+  87E7 3D           	dec a
225+  87E8 47           	ld b,a 											 ; Columnas-1 en B.
226+  87E9 7D           	ld a,l
227+  87EA 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
228+  87EB CB 47        	bit 0,a
229+  87ED 28 03        	jr z,5F
230+  87EF 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
231+  87F0 18 2E        	jr 7F
232+  87F2
233+  87F2              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
234+  87F2
235+  87F2 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
236+  87F3 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
237+  87F4 3A F5 84     	ld a,(Ctrl_0)
238+  87F7 CB 4F        	bit 1,a
239+  87F9 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
240+  87FB F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
241+  87FC
242+  87FC              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
243+  87FC
244+  87FC 1C               inc e
245+  87FD 1D               dec e
246+  87FE 20 07            jr nz,12F
247+  8800 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
248+  8801 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
249+  8802 22 D4 84     	ld (Posicion_actual),hl
250+  8805 18 44        13 jr 9F
251+  8807
252+  8807 CB 43        12 bit 0,e
253+  8809 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
254+  880B              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
255+  880B C1           	pop bc
256+  880C 18 D3        	jr 3B
257+  880E
258+  880E 80           14 add b
259+  880F 6F               ld l,a
260+  8810 22 D4 84     	ld (Posicion_actual),hl
261+  8813 CD 6A 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
262+  8816 18 33            jr 9F 											 ; _inicializamos y salimos.
263+  8818
264+  8818 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
265+  881A 32 F5 84         ld (Ctrl_0),a
266+  881D F1           	pop af
267+  881E 18 2B        	jr 9F
268+  8820
269+  8820              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
270+  8820
271+  8820 F5           7 push af
272+  8821 3A F5 84     	ld a,(Ctrl_0)
273+  8824 CB 47        	bit 0,a
274+  8826 20 1D        	jr nz,8F
275+  8828 F1           	pop af
276+  8829
277+  8829              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
278+  8829
279+  8829 1C           	inc e
280+  882A 1D               dec e
281+  882B 20 07            jr nz,10F
282+  882D
283+  882D 90           	sub b
284+  882E 6F               ld l,a
285+  882F 22 D4 84     	ld (Posicion_actual),hl
286+  8832 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
287+  8834              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
288+  8834 CB 43        10 bit 0,e
289+  8836 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
290+  8838              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
291+  8838 C1           	pop bc
292+  8839 18 A6        	jr 3B
293+  883B
294+  883B 90           16 sub b
295+  883C 6F               ld l,a
296+  883D 22 D4 84     	ld (Posicion_actual),hl
297+  8840 CD 6A 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
298+  8843 18 06            jr 9F
299+  8845
300+  8845 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
301+  8847 32 F5 84         ld (Ctrl_0),a
302+  884A F1           	pop af
303+  884B
304+  884B C1           9 pop bc
305+  884C              ;	ld e,0
306+  884C CD 7B 88         call Inicializacion
307+  884F F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
308+  8850 08           	ex af,af
309+  8851 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
310+  8852 18 8D            jr 3B
311+  8854
312+  8854              ; --------------------
313+  8854
314+  8854              Modifica_Pos_actual
315+  8854
316+  8854              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
317+  8854 05               dec B                                           ; Scanlines-1 en B.
318+  8855 CD CF 89     1 call PreviousScan
319+  8858 10 FB            djnz 1B
320+  885A 22 D4 84     	ld (Posicion_actual),hl
321+  885D AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
322+  885E C9           	ret
323+  885F
324+  885F              ; --------------------
325+  885F
326+  885F              Modifica_Pos_actual2
327+  885F
328+  885F              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
329+  885F 05               dec B                                           ; Scanlines-1 en B.
330+  8860 CD C0 89     1 call NextScan
331+  8863 10 FB            djnz 1B
332+  8865 22 D4 84     	ld (Posicion_actual),hl
333+  8868 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
334+  8869 C9           	ret
335+  886A
336+  886A              ; --------------------
337+  886A
338+  886A              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
339+  886A              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
340+  886A
341+  886A 08           Modificaccionne ex af,af
342+  886B FE 02            cp 2
343+  886D F5               push af                                         ; Guardo el resultado de la comparación.
344+  886E 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
345+  886F F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
346+  8870 CC 54 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
347+  8873 DC 54 88         call c,Modifica_Pos_actual
348+  8876 C8           	ret z
349+  8877 CD 5F 88         call Modifica_Pos_actual2
350+  887A C9               ret
351+  887B
352+  887B              ; *************************************************************************************************************************************************************************************************
353+  887B              ;
354+  887B              ;	13/8/22
355+  887B              ;
356+  887B              ;	Inicializacion
357+  887B              ;
358+  887B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
359+  887B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
360+  887B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
361+  887B              ;
362+  887B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
363+  887B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
364+  887B              ;	_ desaparece/aparece.
365+  887B
366+  887B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
367+  887B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
368+  887B              ;
369+  887B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
370+  887B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
371+  887B              ; 		   [E] ="0"
372+  887B
373+  887B              ; 	OUTPUT: DESTRUYE [AF] y [D].
374+  887B
375+  887B CD 19 8C     Inicializacion call calcula_tercio
376+  887E 28 36        	jr z,primit
377+  8880 E6 02        	and 2
378+  8882 20 07        	jr nz,segmit
379+  8884 7D           	ld a,l
380+  8885 FE 7F        	cp $7f
381+  8887 38 2D        	jr c,primit
382+  8889 28 2B        	jr z,primit
383+  888B CD E8 88     segmit call column
384+  888E 38 13        	jr c,tercuad
385+  8890 3E 04        cuarcuad ld a,4
386+  8892 32 E0 84     	ld (Cuad_objeto),a
387+  8895 21 20 48     	ld hl,$4820
388+  8898 22 01 85     	ld (Limite_horizontal),hl
389+  889B 21 03 85     	ld hl,Limite_vertical
390+  889E 36 0D        	ld (hl),$0d
391+  88A0 08           	ex af,af
392+  88A1 18 3C        	jr 1F
393+  88A3              tercuad
394+  88A3              ;	call Fija_punteros
395+  88A3 3E 03        	ld a,3
396+  88A5 32 E0 84     	ld (Cuad_objeto),a
397+  88A8 21 20 48     	ld hl,$4820
398+  88AB 22 01 85     	ld (Limite_horizontal),hl
399+  88AE 21 03 85     	ld hl,Limite_vertical
400+  88B1 36 12        	ld (hl),$12
401+  88B3 08           	ex af,af
402+  88B4 18 29        	jr 1F
403+  88B6 CD E8 88     primit call column
404+  88B9 38 13        	jr c, primcuad
405+  88BB              segcuad
406+  88BB              ;	call Fija_punteros
407+  88BB 3E 02        	ld a,2
408+  88BD 32 E0 84     	ld (Cuad_objeto),a
409+  88C0 21 C0 4F     	ld hl,$4fc0
410+  88C3 22 01 85     	ld (Limite_horizontal),hl
411+  88C6 21 03 85     	ld hl,Limite_vertical
412+  88C9 36 0D        	ld (hl),$0d
413+  88CB 08           	ex af,af
414+  88CC 18 11        	jr 1F
415+  88CE              primcuad
416+  88CE              ;	call Fija_punteros
417+  88CE 3E 01        	ld a,1
418+  88D0 32 E0 84     	ld (Cuad_objeto),a
419+  88D3 21 C0 4F     	ld hl,$4fc0
420+  88D6 22 01 85     	ld (Limite_horizontal),hl
421+  88D9 21 03 85     	ld hl,Limite_vertical
422+  88DC 36 12        	ld (hl),$12
423+  88DE 08           	ex af,af
424+  88DF CD 3A 8F     1 call Genera_coordenadas
425+  88E2 21 F5 84     	ld hl,Ctrl_0
426+  88E5 CB EE        	set 5,(hl)
427+  88E7 C9           	ret
428+  88E8
429+  88E8              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
430+  88E8              ;
431+  88E8              ;	14/9/22
432+  88E8              ;
433+  88E8              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
434+  88E8              ;
435+  88E8              ;	La rutina fija el puntero de dibujado/borrado.
436+  88E8              ;
437+  88E8              ;	Función:
438+  88E8              ;
439+  88E8              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
440+  88E8
441+  88E8              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
442+  88E8              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
443+  88E8              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
444+  88E8              ;	and a
445+  88E8              ;	jr z,1F
446+  88E8              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
447+  88E8              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
448+  88E8              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
449+  88E8              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
450+  88E8              ;	ld (Puntero_objeto),hl
451+  88E8              ;	jr 3F
452+  88E8              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
453+  88E8              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
454+  88E8              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
455+  88E8              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
456+  88E8              ;	ld (Puntero_objeto),hl
457+  88E8              ;	jr 3F
458+  88E8              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
459+  88E8              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
460+  88E8              ;3 pop de
461+  88E8              ;	pop bc
462+  88E8              ;	ret
463+  88E8
464+  88E8              ; ------------------------------------------------------------------------------------------------------------------
465+  88E8
466+  88E8              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
467+  88E8              ;
468+  88E8              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
469+  88E8
470+  88E8 7D           column ld a,l
471+  88E9 E6 1F        	and $1f
472+  88EB FE 10         	cp $10
473+  88ED C9            	ret
474+  88EE
475+  88EE              ; --------------------------------------------------------------------------------------------------------------------
476+  88EE              ;
477+  88EE              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
478+  88EE              ;
479+  88EE              ; 14/12/22
480+  88EE              ;
481+  88EE              ;	Modifica: A y BC.
482+  88EE
483+  88EE 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
484+  88F1 E6 01        	and 1
485+  88F3 28 17        	jr z,1F
486+  88F5
487+  88F5              ; Nos encontramos en la parte izquierda de la pantalla
488+  88F5
489+  88F5 3A E1 84     	ld a,(Coordenada_X)
490+  88F8 47           	ld b,a
491+  88F9 04           	inc b											; (Coordenada_X)+1 en B.
492+  88FA 79           	ld a,c
493+  88FB 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
494+  88FC 38 08        	jr c,2F
495+  88FE 47           	ld b,a
496+  88FF 79           	ld a,c
497+  8900 90           	sub b
498+  8901 32 00 85     	ld (Columnas),a
499+  8904 18 1B        	jr 4F
500+  8906 79           2 ld a,c
501+  8907 32 00 85     	ld (Columnas),a
502+  890A 18 15        	jr 4F
503+  890C
504+  890C              ; Nos encontramos en la parte derecha de la pantalla.
505+  890C
506+  890C 3A E1 84     1 ld a,(Coordenada_X)
507+  890F 81           	add c
508+  8910 3D           	dec a
509+  8911 D6 1F        	sub $1f
510+  8913 38 08        	jr c,3F
511+  8915 47           	ld b,a
512+  8916 79           	ld a,c
513+  8917 90           	sub b
514+  8918 32 00 85     	ld (Columnas),a
515+  891B 18 04        	jr 4F
516+  891D 79           3 ld a,c
517+  891E 32 00 85     	ld (Columnas),a
518+  8921 D9           4 exx
519+  8922 4F           	ld c,a
520+  8923 D9           	exx
521+  8924 C9            ret
522+  8925
523+  8925              ; --------------------------------------------------------------------------------------------------------------------
524+  8925              ;
525+  8925              ; 7/1/23
526+  8925              ;
527+  8925              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
528+  8925              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
529+  8925              ;
530+  8925              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
531+  8925              ;	DESTRUYE: HL,B Y A.
532+  8925
533+  8925 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
534+  8928 FE 02        	cp 2
535+  892A 38 18        	jr c,1F
536+  892C 28 16        	jr z,1F
537+  892E E6 01        	and 1
538+  8930 28 0D        	jr z,3F
539+  8932
540+  8932              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
541+  8932
542+  8932 CD 6E 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
543+  8935
544+  8935 7D           9 ld a,l
545+  8936 E6 1F        	and $1f
546+  8938 28 2A        	jr z,7F
547+  893A 2B           	dec hl
548+  893B 10 F8        	djnz 9B
549+  893D 18 25        	jr 7F
550+  893F
551+  893F              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
552+  893F
553+  893F 2A D4 84     3 ld hl,(Posicion_actual)
554+  8942 18 20        	jr 7F
555+  8944
556+  8944 28 14        1 jr z,2F
557+  8946
558+  8946              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
559+  8946
560+  8946 CD 6E 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
561+  8949 7D           4 ld a,l
562+  894A E6 1F        	and $1f
563+  894C 28 03        	jr z,6F
564+  894E 2B           	dec hl
565+  894F 10 F8        	djnz 4B
566+  8951 06 0F        6 ld b,15
567+  8953 CD CF 89     5 call PreviousScan
568+  8956 10 FB        	djnz 5B
569+  8958 18 0A        	jr 7F
570+  895A
571+  895A              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
572+  895A
573+  895A CD 6E 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
574+  895D 06 0F        	ld b,15
575+  895F CD CF 89     8 call PreviousScan
576+  8962 10 FB        	djnz 8B
577+  8964
578+  8964 E5           7 push hl
579+  8965 DD E1        	pop ix
580+  8967
581+  8967 2A D6 84     	ld hl,(Puntero_objeto)
582+  896A E5           	push hl
583+  896B FD E1        	pop iy
584+  896D
585+  896D C9           	ret
586+  896E
587+  896E              ; --------------------------------------------------------------------------------------------------------------------
588+  896E              ;
589+  896E              ;	2/1/23
590+  896E              ;
591+  896E              ;	Sub-rutina de [Calcula_puntero_de_impresion].
592+  896E              ;
593+  896E              ;	Tras esta rutina tenemos:
594+  896E              ;
595+  896E              ;	OUTPUT: HL contiene (Posicion_actual).
596+  896E              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
597+  896E              ;
598+  896E              ;	DESTRUYE!!!!! HL,B y A.
599+  896E
600+  896E 2A D4 84     Operandos ld hl,(Posicion_actual)
601+  8971 3A 00 85     	ld a,(Columnas)
602+  8974 3D           	dec a
603+  8975 20 01        	jr nz,1F
604+  8977 3C           	inc a
605+  8978 47           1 ld b,a
606+  8979 C9           	ret
607+  897A
608+  897A              ; --------------------------------------------------------------------------------------------------------------------
609+  897A              ;
610+  897A              ;	3/1/23
611+  897A              ;
612+  897A              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
613+  897A              ;
614+  897A              ;	Destruye: A,B,HL y DE.
615+  897A
616+  897A              Define_rutina_de_impresion
617+  897A
618+  897A 3A D3 84     	ld a,(Columns)
619+  897D 47           	ld b,a
620+  897E 3A 00 85     	ld a,(Columnas)
621+  8981 B8           	cp b
622+  8982 20 0D        	jr nz,2f
623+  8984
624+  8984              ;	La entidad se imprime entera.
625+  8984
626+  8984 21 16 8A     	ld hl, Indice_entidades_completas
627+  8987 E6 01        	and 1
628+  8989 28 02        	jr z,1F
629+  898B
630+  898B 23           	inc hl
631+  898C 23           	inc hl
632+  898D
633+  898D CD 2B 86     1 call Extrae_address
634+  8990 C9           	ret		;	ret
635+  8991
636+  8991              ;	La entidad no se imprime entera en pantalla.
637+  8991
638+  8991 3A E0 84     2 ld a,(Cuad_objeto)
639+  8994 E6 01        	and 1
640+  8996 28 17        	jr z,3F
641+  8998
642+  8998              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
643+  8998
644+  8998 21 1A 8A     	ld hl, Indice_entidades_incompletas_izquierda
645+  899B 3A D3 84     4 ld a,(Columns)
646+  899E E6 01        	and 1
647+  89A0 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
648+  89A2
649+  89A2 23           	inc hl
650+  89A3 23           	inc hl
651+  89A4
652+  89A4 3A 00 85     	ld a,(Columnas)
653+  89A7 E6 01        	and 1
654+  89A9 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
655+  89AB
656+  89AB 23           	inc hl
657+  89AC 23           	inc hl
658+  89AD
659+  89AD 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
660+  89AF
661+  89AF 21 20 8A     3 ld hl, Indice_entidades_incompletas_derecha
662+  89B2 18 E7        	jr 4B
663+  89B4
664+  89B4              ; --------------------------------------------------------------------------------------------------------------------
665+  89B4              ;
666+  89B4              ;	Prepara_draw
667+  89B4              ;
668+  89B4              ;	Es una rutina de carga.
669+  89B4              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
670+  89B4              ;
671+  89B4              ;	FUNCIONAMIENTO:
672+  89B4              ;
673+  89B4              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
674+  89B4              ;	- LD (Posicion_actual) del objeto en [HL].
675+  89B4              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
676+  89B4              ;
677+  89B4              ;	DESTRUYE:
678+  89B4              ;
679+  89B4              ;	Logicamente, BC,HL y E quedan destruidos.
680+  89B4
681+  89B4 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
682+  89B7 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
683+  89B8 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
684+  89B9 4E           	ld c,(hl)
685+  89BA 2A D4 84     	ld hl,(Posicion_actual)
686+  89BD 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
687+  89BF C9           	ret
688+  89C0
689+  89C0              ;----------------------------------------------------------------------------------------------------------------
690+  89C0              ;
691+  89C0              ;	5/08/22
692+  89C0              ;
693+  89C0              ;   NextScan.
694+  89C0              ;
695+  89C0              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
696+  89C0              ;
697+  89C0              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
698+  89C0              ;
699+  89C0              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
700+  89C0              ;
701+  89C0              ;       DESTRUIDOS: AF y HL !!!
702+  89C0              ;
703+  89C0              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
704+  89C0              ;
705+  89C0
706+  89C0 24           NextScan inc h          ; Incrementamos el scanline.
707+  89C1 7C               ld a,h
708+  89C2 E6 07            and 7
709+  89C4 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
710+  89C5
711+  89C5 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
712+  89C6 C6 20            add a,$20           ; Vamos a comprobarlo...
713+  89C8 6F               ld l,a
714+  89C9 D8               ret c               ; Salimos si se produce el cambio de tercio.
715+  89CA
716+  89CA 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
717+  89CB D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
718+  89CD 67               ld h,a
719+  89CE C9               ret
720+  89CF
721+  89CF              ;----------------------------------------------------------------------------------------------------------------
722+  89CF              ;
723+  89CF              ;	5/08/22
724+  89CF              ;
725+  89CF              ;   PreviousScan.
726+  89CF              ;
727+  89CF              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
728+  89CF              ;
729+  89CF              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
730+  89CF              ;
731+  89CF              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
732+  89CF              ;
733+  89CF              ;       DESTRUIDOS: AF y HL !!!
734+  89CF              ;
735+  89CF              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
736+  89CF              ;
737+  89CF
738+  89CF 7C           PreviousScan ld a,h
739+  89D0 25               dec h               ; Dec H.
740+  89D1 E6 07            and 7
741+  89D3 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
742+  89D4
743+  89D4 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
744+  89D5 D6 20            sub $20             ; Vamos a comprobarlo...
745+  89D7 6F               ld l,a
746+  89D8 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
747+  89D9
748+  89D9 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
749+  89DA C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
750+  89DC 67               ld h,a
751+  89DD C9               ret
752+  89DE
753+  89DE              ; -----------------------------------------------------------------------------------
754+  89DE              ;
755+  89DE              ;	15/1/23
756+  89DE
757+  89DE ED 73 10 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
758+  89E2 31 00 70     	ld sp,Album_de_fotos
759+  89E5
760+  89E5 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
761+  89E7 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
762+  89E8 D1           	pop de																	; Dirección de la rutina de impresión en DE.
763+  89E9
764+  89E9 ED 73 12 85  	ld (Stack_2),sp
765+  89ED ED 7B 10 85  	ld sp,(Stack)
766+  89F1
767+  89F1              ; Fabrica la llamada a la correspondiente rutina de impresión.
768+  89F1
769+  89F1 3E CD        	ld a,$cd
770+  89F3 32 FB 89     	ld (Imprime),a
771+  89F6 EB           	ex de,hl
772+  89F7 22 FC 89     	ld (Imprime+1),hl
773+  89FA EB           	ex de,hl
774+  89FB
775+  89FB              ; Ejecuta la llamada:	CALL $xx,xx
776+  89FB
777+  89FB 00 00 00     Imprime db 0,0,0
778+  89FE
779+  89FE ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
780+  8A02
781+  8A02 3A 0F 85     	ld a,(Numero_de_malotes)
782+  8A05 3D           	dec a
783+  8A06 28 09        	jr z,1F
784+  8A08 32 0F 85      	ld (Numero_de_malotes),a
785+  8A0B ED 7B 12 85  	ld sp,(Stack_2)
786+  8A0F 18 D4        	jr 2B
787+  8A11
788+  8A11 AF           1 xor a
789+  8A12 32 12 85     	ld (Stack_2),a
790+  8A15 C9           	ret
791+  8A16
792+  8A16
# file closed: Draw_XOR.asm
591   8A16              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A16              ;   índices de Rutinas de impresión.
  2+  8A16
  3+  8A16 26 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A18 53 8A            defw Pinta_Amadeus_3x2
  5+  8A1A
  6+  8A1A A9 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A1C 49 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A1E FD 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A20
 10+  8A20 D3 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A22 D7 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A24 8B 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A26
 14+  8A26
 15+  8A26              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A26              ;
 17+  8A26              ;   12/12/22
 18+  8A26              ;
 19+  8A26              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A26              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A26              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A26              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A26              ;
 24+  8A26              ;   Modifica: DE y HL.
 25+  8A26
 26+  8A26 ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A2A FD F9        	ld sp,iy
 28+  8A2C 06 10            ld b,16
 29+  8A2E D1           1 pop de
 30+  8A2F 7B               ld a,e
 31+  8A30 AE               xor (hl)
 32+  8A31 77           	ld (hl),a
 33+  8A32 23           	inc hl
 34+  8A33 7A               ld a,d
 35+  8A34 AE               xor (hl)
 36+  8A35 77           	ld (hl),a
 37+  8A36 2B           	dec hl
 38+  8A37 24           	inc h
 39+  8A38 7C               ld a,h
 40+  8A39 E6 07            and 7
 41+  8A3B 20 0A            jr nz,2F
 42+  8A3D 7D               ld a,l
 43+  8A3E C6 20            add a,$20
 44+  8A40 6F               ld l,a
 45+  8A41 38 04            jr c,2F
 46+  8A43 7C               ld a,h
 47+  8A44 D6 08            sub 8
 48+  8A46 67               ld h,a
 49+  8A47 7C           2 ld a,h
 50+  8A48 FE 58            cp $58
 51+  8A4A 28 02            jr z,3F
 52+  8A4C 10 E0            djnz 1B
 53+  8A4E ED 7B 10 85  3 ld sp,(Stack)
 54+  8A52 C9           	ret
 55+  8A53
 56+  8A53 ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A57 FD F9        	ld sp,iy
 58+  8A59 06 08            ld b,8
 59+  8A5B D1           1 pop de
 60+  8A5C 7B               ld a,e
 61+  8A5D AE               xor (hl)
 62+  8A5E 77           	ld (hl),a
 63+  8A5F 23           	inc hl
 64+  8A60 7A               ld a,d
 65+  8A61 AE               xor (hl)
 66+  8A62 77           	ld (hl),a
 67+  8A63 23           	inc hl
 68+  8A64 D1           	pop de
 69+  8A65 7B               ld a,e
 70+  8A66 AE               xor (hl)
 71+  8A67 77           	ld (hl),a
 72+  8A68 2B           	dec hl
 73+  8A69 2B           	dec hl
 74+  8A6A 24           	inc h
 75+  8A6B 7C               ld a,h
 76+  8A6C E6 07            and 7
 77+  8A6E 20 0A            jr nz,2F
 78+  8A70 7D               ld a,l
 79+  8A71 C6 20            add a,$20
 80+  8A73 6F               ld l,a
 81+  8A74 38 04            jr c,2F
 82+  8A76 7C               ld a,h
 83+  8A77 D6 08            sub 8
 84+  8A79 67               ld h,a
 85+  8A7A 7C           2 ld a,h
 86+  8A7B FE 58            cp $58
 87+  8A7D 28 25            jr z,4F
 88+  8A7F 7A               ld a,d
 89+  8A80 AE               xor (hl)
 90+  8A81 77               ld (hl),a
 91+  8A82 D1           	pop de
 92+  8A83 23           	inc hl
 93+  8A84 7B               ld a,e
 94+  8A85 AE               xor (hl)
 95+  8A86 77           	ld (hl),a
 96+  8A87 23           	inc hl
 97+  8A88 7A               ld a,d
 98+  8A89 AE               xor (hl)
 99+  8A8A 77           	ld (hl),a
100+  8A8B 2B           	dec hl
101+  8A8C 2B           	dec hl
102+  8A8D 24           	inc h
103+  8A8E 7C               ld a,h
104+  8A8F E6 07            and 7
105+  8A91 20 0A            jr nz,3F
106+  8A93 7D               ld a,l
107+  8A94 C6 20            add a,$20
108+  8A96 6F               ld l,a
109+  8A97 38 04            jr c,3F
110+  8A99 7C               ld a,h
111+  8A9A D6 08            sub 8
112+  8A9C 67               ld h,a
113+  8A9D 7C           3 ld a,h
114+  8A9E FE 58            cp $58
115+  8AA0 28 02            jr z,4F
116+  8AA2 10 B7            djnz 1B
117+  8AA4 ED 7B 10 85  4 ld sp,(Stack)
118+  8AA8 C9           	ret
119+  8AA9
120+  8AA9              ; ---------------------------------------------------
121+  8AA9
122+  8AA9 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AAD FD F9        	ld sp,iy
124+  8AAF 06 10            ld b,16
125+  8AB1 D1           1 pop de
126+  8AB2 7A           	ld a,d
127+  8AB3 AE           	xor (hl)
128+  8AB4 77           	ld (hl),a
129+  8AB5 24           	inc h
130+  8AB6 7C               ld a,h
131+  8AB7 E6 07            and 7
132+  8AB9 20 0C            jr nz,2F
133+  8ABB 7D               ld a,l
134+  8ABC C6 20            add a,$20
135+  8ABE 6F               ld l,a
136+  8ABF 38 06            jr c,2F
137+  8AC1 7C               ld a,h
138+  8AC2 D6 08            sub 8
139+  8AC4 67               ld h,a
140+  8AC5 18 00            jr 2F
141+  8AC7 7C           2 ld a,h
142+  8AC8 FE 58            cp $58
143+  8ACA 28 02            jr z,3F
144+  8ACC 10 E3            djnz 1B
145+  8ACE ED 7B 10 85  3 ld sp,(Stack)
146+  8AD2 C9           	ret
147+  8AD3
148+  8AD3 ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AD7 FD F9        	ld sp,iy
150+  8AD9 06 10            ld b,16
151+  8ADB D1           1 pop de
152+  8ADC 7B           	ld a,e
153+  8ADD AE           	xor (hl)
154+  8ADE 77           	ld (hl),a
155+  8ADF 24           	inc h
156+  8AE0 7C               ld a,h
157+  8AE1 E6 07            and 7
158+  8AE3 20 0C            jr nz,2F
159+  8AE5 7D               ld a,l
160+  8AE6 C6 20            add a,$20
161+  8AE8 6F               ld l,a
162+  8AE9 38 06            jr c,2F
163+  8AEB 7C               ld a,h
164+  8AEC D6 08            sub 8
165+  8AEE 67               ld h,a
166+  8AEF 18 00            jr 2F
167+  8AF1 7C           2 ld a,h
168+  8AF2 FE 58            cp $58
169+  8AF4 28 02            jr z,3F
170+  8AF6 10 E3            djnz 1B
171+  8AF8 ED 7B 10 85  3 ld sp,(Stack)
172+  8AFC C9           	ret
173+  8AFD
174+  8AFD              ; ---------------------------------------------------
175+  8AFD
176+  8AFD ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B01 FD F9        	ld sp,iy
178+  8B03 06 08            ld b,8
179+  8B05 D1           1 pop de
180+  8B06 7A           	ld a,d
181+  8B07 AE           	xor (hl)
182+  8B08 77           	ld (hl),a
183+  8B09 23           	inc hl
184+  8B0A D1           	pop de
185+  8B0B 7B           	ld a,e
186+  8B0C AE           	xor (hl)
187+  8B0D 77           	ld (hl),a
188+  8B0E 2B           	dec hl
189+  8B0F 24            	inc h
190+  8B10 7C               ld a,h
191+  8B11 E6 07            and 7
192+  8B13 20 0A            jr nz,2F
193+  8B15 7D               ld a,l
194+  8B16 C6 20            add a,$20
195+  8B18 6F               ld l,a
196+  8B19 38 04            jr c,2F
197+  8B1B 7C               ld a,h
198+  8B1C D6 08            sub 8
199+  8B1E 67               ld h,a
200+  8B1F 7C           2 ld a,h
201+  8B20 FE 58            cp $58
202+  8B22 28 20            jr z,4F
203+  8B24 D1               pop de
204+  8B25 7B           	ld a,e
205+  8B26 AE           	xor (hl)
206+  8B27 77           	ld (hl),a
207+  8B28 23           	inc hl
208+  8B29 7A           	ld a,d
209+  8B2A AE           	xor (hl)
210+  8B2B 77           	ld (hl),a
211+  8B2C 2B           	dec hl
212+  8B2D 24           	inc h
213+  8B2E 7C               ld a,h
214+  8B2F E6 07            and 7
215+  8B31 20 0A            jr nz,3F
216+  8B33 7D               ld a,l
217+  8B34 C6 20            add a,$20
218+  8B36 6F               ld l,a
219+  8B37 38 04            jr c,3F
220+  8B39 7C               ld a,h
221+  8B3A D6 08            sub 8
222+  8B3C 67               ld h,a
223+  8B3D 7C           3 ld a,h
224+  8B3E FE 58            cp $58
225+  8B40 28 02            jr z,4F
226+  8B42 10 C1            djnz 1B
227+  8B44 ED 7B 10 85  4 ld sp,(Stack)
228+  8B48 C9           	ret
229+  8B49
230+  8B49 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B4D FD F9        	ld sp,iy
232+  8B4F 06 08            ld b,8
233+  8B51 D1           1 pop de
234+  8B52 D1           	pop de
235+  8B53 7B           	ld a,e
236+  8B54 AE           	xor (hl)
237+  8B55 77           	ld (hl),a
238+  8B56 24            	inc h
239+  8B57 7C               ld a,h
240+  8B58 E6 07            and 7
241+  8B5A 20 0A            jr nz,2F
242+  8B5C 7D               ld a,l
243+  8B5D C6 20            add a,$20
244+  8B5F 6F               ld l,a
245+  8B60 38 04            jr c,2F
246+  8B62 7C               ld a,h
247+  8B63 D6 08            sub 8
248+  8B65 67               ld h,a
249+  8B66 7C           2 ld a,h
250+  8B67 FE 58            cp $58
251+  8B69 28 1B            jr z,4F
252+  8B6B D1               pop de
253+  8B6C 7A           	ld a,d
254+  8B6D AE           	xor (hl)
255+  8B6E 77           	ld (hl),a
256+  8B6F 24           	inc h
257+  8B70 7C               ld a,h
258+  8B71 E6 07            and 7
259+  8B73 20 0A            jr nz,3F
260+  8B75 7D               ld a,l
261+  8B76 C6 20            add a,$20
262+  8B78 6F               ld l,a
263+  8B79 38 04            jr c,3F
264+  8B7B 7C               ld a,h
265+  8B7C D6 08            sub 8
266+  8B7E 67               ld h,a
267+  8B7F 7C           3 ld a,h
268+  8B80 FE 58            cp $58
269+  8B82 28 02            jr z,4F
270+  8B84 10 CB            djnz 1B
271+  8B86 ED 7B 10 85  4 ld sp,(Stack)
272+  8B8A C9           	ret
273+  8B8B
274+  8B8B ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B8F FD F9        	ld sp,iy
276+  8B91 06 08            ld b,8
277+  8B93 D1           1 pop de
278+  8B94 7B           	ld a,e
279+  8B95 AE           	xor (hl)
280+  8B96 77           	ld (hl),a
281+  8B97 23           	inc hl
282+  8B98 7A           	ld a,d
283+  8B99 AE           	xor (hl)
284+  8B9A 77           	ld (hl),a
285+  8B9B 2B           	dec hl
286+  8B9C 24             	inc h
287+  8B9D 7C               ld a,h
288+  8B9E E6 07            and 7
289+  8BA0 20 0A            jr nz,2F
290+  8BA2 7D               ld a,l
291+  8BA3 C6 20            add a,$20
292+  8BA5 6F               ld l,a
293+  8BA6 38 04            jr c,2F
294+  8BA8 7C               ld a,h
295+  8BA9 D6 08            sub 8
296+  8BAB 67               ld h,a
297+  8BAC 7C           2 ld a,h
298+  8BAD FE 58            cp $58
299+  8BAF 28 21            jr z,4F
300+  8BB1 D1               pop de
301+  8BB2 7A           	ld a,d
302+  8BB3 AE           	xor (hl)
303+  8BB4 77           	ld (hl),a
304+  8BB5 23           	inc hl
305+  8BB6 D1               pop de
306+  8BB7 7B           	ld a,e
307+  8BB8 AE           	xor (hl)
308+  8BB9 77           	ld (hl),a
309+  8BBA 2B           	dec hl
310+  8BBB 24           	inc h
311+  8BBC 7C               ld a,h
312+  8BBD E6 07            and 7
313+  8BBF 20 0A            jr nz,3F
314+  8BC1 7D               ld a,l
315+  8BC2 C6 20            add a,$20
316+  8BC4 6F               ld l,a
317+  8BC5 38 04            jr c,3F
318+  8BC7 7C               ld a,h
319+  8BC8 D6 08            sub 8
320+  8BCA 67               ld h,a
321+  8BCB 7C           3 ld a,h
322+  8BCC FE 58            cp $58
323+  8BCE 28 02            jr z,4F
324+  8BD0 10 C1            djnz 1B
325+  8BD2 ED 7B 10 85  4 ld sp,(Stack)
326+  8BD6 C9           	ret
327+  8BD7
328+  8BD7 ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BDB FD F9        	ld sp,iy
330+  8BDD 06 08            ld b,8
331+  8BDF D1           1 pop de
332+  8BE0 7B           	ld a,e
333+  8BE1 AE           	xor (hl)
334+  8BE2 77           	ld (hl),a
335+  8BE3 24            	inc h
336+  8BE4 7C               ld a,h
337+  8BE5 E6 07            and 7
338+  8BE7 20 0A            jr nz,2F
339+  8BE9 7D               ld a,l
340+  8BEA C6 20            add a,$20
341+  8BEC 6F               ld l,a
342+  8BED 38 04            jr c,2F
343+  8BEF 7C               ld a,h
344+  8BF0 D6 08            sub 8
345+  8BF2 67               ld h,a
346+  8BF3 7C           2 ld a,h
347+  8BF4 FE 58            cp $58
348+  8BF6 28 1C            jr z,4F
349+  8BF8 D1               pop de
350+  8BF9 7A           	ld a,d
351+  8BFA AE           	xor (hl)
352+  8BFB 77           	ld (hl),a
353+  8BFC 24           	inc h
354+  8BFD 7C               ld a,h
355+  8BFE E6 07            and 7
356+  8C00 20 0A            jr nz,3F
357+  8C02 7D               ld a,l
358+  8C03 C6 20            add a,$20
359+  8C05 6F               ld l,a
360+  8C06 38 04            jr c,3F
361+  8C08 7C               ld a,h
362+  8C09 D6 08            sub 8
363+  8C0B 67               ld h,a
364+  8C0C 7C           3 ld a,h
365+  8C0D FE 58            cp $58
366+  8C0F 28 03            jr z,4F
367+  8C11 D1               pop de
368+  8C12 10 CB            djnz 1B
369+  8C14 ED 7B 10 85  4 ld sp,(Stack)
370+  8C18 C9           	ret
371+  8C19
372+  8C19              ; ---------------------------------------------------
373+  8C19
# file closed: Rutinas_de_impresion_sprites.asm
592   8C19              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C19              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C19              ;
  3+  8C19              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C19              ;
  5+  8C19              ; *****************************************************************************************************************************************************************************************
  6+  8C19              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C19
  8+  8C19 7C           calcula_tercio ld a,h
  9+  8C1A E6 18        	and $18
 10+  8C1C CB 2F        	sra a
 11+  8C1E CB 2F        	sra a
 12+  8C20 CB 2F        	sra a
 13+  8C22 C9           	ret
 14+  8C23
# file closed: calcula_tercio.asm
593   8C23              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C23              ; -----------------------------------------------------------------------------------------
  2+  8C23              ;
  3+  8C23              ;   04/11/22
  4+  8C23              ;
  5+  8C23              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C23              ;
  7+  8C23              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C23              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C23              ;
 10+  8C23              ;   DESTRUYE: HL y A. !!!!!
 11+  8C23
 12+  8C23 CD 19 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C26 26 58            ld h,$58
 14+  8C28 84               add h
 15+  8C29 67               ld h,a
 16+  8C2A C9               ret
# file closed: Calcula_direccion_atributos.asm
594   8C2B              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C2B              ; ********** **********
  2+  8C2B              ;
  3+  8C2B              ;   5/11/22
  4+  8C2B              ;
  5+  8C2B              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C2B              ;
  7+  8C2B              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C2B              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C2B              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C2B              ;
 11+  8C2B              ;   NO DESTROYERSSSS !!!!!
 12+  8C2B
 13+  8C2B E5           Define_atributos push hl
 14+  8C2C C5           	push bc
 15+  8C2D D5           	push de
 16+  8C2E
 17+  8C2E CD 23 8C     	call Calcula_direccion_atributos
 18+  8C31
 19+  8C31 D9               exx
 20+  8C32 E5               push hl
 21+  8C33 D9               exx
 22+  8C34 D1               pop de
 23+  8C35
 24+  8C35 42               ld b,d
 25+  8C36 7B               ld a,e 									; (Attr) en A.
 26+  8C37
 27+  8C37 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C38 E5            	push hl 								; Guardo dirección de attr.
 29+  8C39
 30+  8C39              ; -----
 31+  8C39
 32+  8C39 77           2 ld (hl),a
 33+  8C3A 0D           	dec c 									; Decremento (Columnas).
 34+  8C3B 28 03        	jr z,1F
 35+  8C3D 23           	inc hl
 36+  8C3E 18 F9        	jr 2B
 37+  8C40
 38+  8C40 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C41 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C42
 41+  8C42 05           	dec b									; Decremento (Filas).
 42+  8C43 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C45
 44+  8C45 11 20 00     	ld de,32
 45+  8C48 A7           	and a
 46+  8C49 ED 5A        	adc hl,de
 47+  8C4B 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C4D
 49+  8C4D D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C4E C1           	pop bc
 51+  8C4F E1           	pop hl
 52+  8C50
 53+  8C50 C9           	ret
 54+  8C51
# file closed: Define_atributos.asm
595   8C51              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C51              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C51              ;
  3+  8C51              ;
  4+  8C51              ;	CLS.
  5+  8C51              ;
  6+  8C51              ;	Limpia la pantalla y define sus atributos.
  7+  8C51              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C51              ;
  9+  8C51              ;	COLORES: 0 ..... NEGRO
 10+  8C51              ;    		 1 ..... AZUL
 11+  8C51              ; 			 2 ..... ROJO
 12+  8C51              ;			 3 ..... MAGENTA
 13+  8C51              ; 			 4 ..... VERDE
 14+  8C51              ; 			 5 ..... CIAN
 15+  8C51              ;			 6 ..... AMARILLO
 16+  8C51              ; 			 7 ..... BLANCO
 17+  8C51              ;
 18+  8C51              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C51              ;
 20+  8C51              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C51
 22+  8C51
 23+  8C51 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C54 11 01 40     	LD DE,$4001
 25+  8C57 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C5A 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C5C ED B0        	LDIR
 28+  8C5E 01 FF 02     	LD BC,767
 29+  8C61 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C62 ED B0        	LDIR
 31+  8C64 C9           	ret
 32+  8C65
# file closed: Cls.asm
596   8C65              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C65              ; ******************************************************************************************************************************************************************************************
  2+  8C65              ;
  3+  8C65              ;   19/10/22
  4+  8C65              ;
  5+  8C65              ;	Mov_down
  6+  8C65              ;
  7+  8C65              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C65              ;
  9+  8C65              ;
 10+  8C65 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C68 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C6A              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C6A              ; 																	; _ en el caso de que no lo haya.
 14+  8C6A 3A E6 84     	ld a,(Vel_down)
 15+  8C6D 47           	ld b,a
 16+  8C6E 2A D4 84         ld hl,(Posicion_actual)
 17+  8C71 CD 19 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C74 E6 02        	and 2
 19+  8C76 28 0F        	jr z,1F
 20+  8C78 7C           	ld a,h
 21+  8C79 FE 57        	cp $57
 22+  8C7B 20 0A        	jr nz,1F
 23+  8C7D 7D           	ld a,l
 24+  8C7E C6 20        	add $20
 25+  8C80 30 05        	jr nc,1F
 26+  8C82
 27+  8C82              ; ------------------------------
 28+  8C82 CD 21 8F     	call Reaparece_arriba
 29+  8C85              ;	call Reinicio
 30+  8C85              ; ------------------------------
 31+  8C85
 32+  8C85 18 08        	jr 3F
 33+  8C87 CD C0 89     1 call NextScan
 34+  8C8A 22 D4 84     	ld (Posicion_actual),hl
 35+  8C8D 10 E2            djnz 2B
 36+  8C8F CD 3A 8F     3 call Genera_coordenadas
 37+  8C92 C9           	ret
 38+  8C93
 39+  8C93
 40+  8C93              ; ******************************************************************************************************************************************************************************************
 41+  8C93              ;
 42+  8C93              ;   19/10/22
 43+  8C93              ;
 44+  8C93              ;	Mov_up
 45+  8C93              ;
 46+  8C93              ; 	Mueve el Sprite hacia arriba.
 47+  8C93              ;
 48+  8C93              ;
 49+  8C93 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C96 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C98              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C98              ; 																		; _ en el caso de que no lo haya.
 53+  8C98 3A E5 84     	ld a,(Vel_up)
 54+  8C9B 47           	ld b,a
 55+  8C9C 2A D4 84     	ld hl,(Posicion_actual)
 56+  8C9F CD 19 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CA2 A7           	and a
 58+  8CA3 20 10        	jr nz,1F
 59+  8CA5 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CA6 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CA8 20 0B            jr nz,1F
 62+  8CAA 7D               ld a,l
 63+  8CAB D6 20            sub $20
 64+  8CAD 30 06            jr nc,1F
 65+  8CAF 25               dec h
 66+  8CB0
 67+  8CB0              ; -----------------------------
 68+  8CB0 CD 11 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CB3              ;	call Reinicio
 70+  8CB3              ; -----------------------------
 71+  8CB3
 72+  8CB3 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CB5 CD CF 89     1 call PreviousScan
 74+  8CB8 22 D4 84     	ld (Posicion_actual),hl
 75+  8CBB 10 E2            djnz 3B
 76+  8CBD CD 3A 8F     2 call Genera_coordenadas
 77+  8CC0 C9           	ret
 78+  8CC1
 79+  8CC1              ; ******************************************************************************************************************************************************************************************
 80+  8CC1              ;
 81+  8CC1              ;	19/10/22
 82+  8CC1              ;
 83+  8CC1              ;	Mov_right.
 84+  8CC1              ;
 85+  8CC1              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CC1              ;
 87+  8CC1
 88+  8CC1 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CC4 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CC6              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CC6              ; 																	; _ en el caso de que no lo haya.
 92+  8CC6 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CC9 A7           	and a
 94+  8CCA 28 0B        	jr z,9F
 95+  8CCC
 96+  8CCC 3A F5 84     	ld a,(Ctrl_0)
 97+  8CCF CB 7F        	bit 7,a
 98+  8CD1 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CD3 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CD6 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CD7
102+  8CD7 3A F5 84     9 ld a,(Ctrl_0)
103+  8CDA CB 77        	bit 6,a
104+  8CDC 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CDE
106+  8CDE CD D0 8E     	call Stop_Amadeus_right
107+  8CE1 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CE2 18 4D        	jr 8F
109+  8CE4
110+  8CE4 3A E1 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CE7 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CE9 20 46        	jr nz,8F
113+  8CEB
114+  8CEB 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CEE A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CEF 28 40        	jr z,8F
117+  8CF1
118+  8CF1              ; ---------- ---------- ----------
119+  8CF1              ;
120+  8CF1              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
121+  8CF1
122+  8CF1 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
123+  8CF4 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
124+  8CF6 28 11        	jr z,1F
125+  8CF8 38 06        	jr c,6F
126+  8CFA FE 04        	cp 4
127+  8CFC 28 14        	jr z,7F
128+  8CFE 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
129+  8D00
130+  8D00              ; ---------- ---------- ----------
131+  8D00              ;
132+  8D00              ; Perfiles de velocidad
133+  8D00              ;
134+  8D00 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
135+  8D03 FE FE        	cp $fe
136+  8D05 20 2A        	jr nz,8F
137+  8D07 18 10        	jr 3F
138+  8D09 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
139+  8D0C FE FD        	cp $fd
140+  8D0E 20 21        	jr nz,8F
141+  8D10 18 07        	jr 3F
142+  8D12 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
143+  8D15 FE FB        	cp $fb
144+  8D17 20 18        	jr nz,8F
145+  8D19
146+  8D19              ; ---------- ---------- ----------
147+  8D19
148+  8D19 CD FF 8E     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
149+  8D1C              ;	call Reinicio
150+  8D1C
151+  8D1C              ; ---------- ---------- ----------
152+  8D1C              ;
153+  8D1C              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
154+  8D1C
155+  8D1C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
156+  8D1E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
157+  8D1F CD 38 8D     	call DESPLZ_DER
158+  8D22 C1           	pop bc
159+  8D23 10 F9        	djnz 5B
160+  8D25 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
161+  8D28 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
162+  8D29 22 D4 84     	ld (Posicion_actual),hl
163+  8D2C CD 3A 8F     	call Genera_coordenadas
164+  8D2F 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
165+  8D31
166+  8D31              ; ---------- ---------- ----------
167+  8D31
168+  8D31 2A D4 84     8 ld hl,(Posicion_actual)
169+  8D34 CD 38 8D     	call DESPLZ_DER
170+  8D37 C9           2 ret
171+  8D38
172+  8D38              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
173+  8D38              ;
174+  8D38              ;	22/9/22
175+  8D38              ;
176+  8D38
177+  8D38 CD 47 8D     DESPLZ_DER call Desplaza_derecha
178+  8D3B CD 5C 8D         call modifica_parametros_1er_DESPLZ_2
179+  8D3E CD 85 8D         call Ciclo_completo
180+  8D41 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
181+  8D44 CB FE        	set 7,(hl)
182+  8D46 C9           	ret
183+  8D47
184+  8D47              ; ******************************************************************************************************************************************************************************************
185+  8D47              ;	14/9/22
186+  8D47              ;
187+  8D47
188+  8D47 3A E4 84     Desplaza_derecha ld a,(Vel_right)
189+  8D4A 47           	ld b,a
190+  8D4B 2A DC 84     	ld hl,(Puntero_DESPLZ)
191+  8D4E 23           1 inc hl
192+  8D4F 23           	inc hl
193+  8D50 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
194+  8D52 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
195+  8D55 CD 2B 86     	call Extrae_address
196+  8D58 22 D6 84     	ld (Puntero_objeto),hl
197+  8D5B C9           	ret
198+  8D5C
199+  8D5C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
200+  8D5C              ;
201+  8D5C              ;	24/7/22
202+  8D5C              ;
203+  8D5C              ;	modifica_parametros_1er_DESPLZ_2
204+  8D5C              ;
205+  8D5C              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
206+  8D5C              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
207+  8D5C              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
208+  8D5C
209+  8D5C 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
210+  8D5F A7           	and a
211+  8D60 20 1F        	jr nz,1F
212+  8D62 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
213+  8D64 32 D8 84         ld (CTRL_DESPLZ),a
214+  8D67 21 D3 84     	ld hl,Columns
215+  8D6A 34           	inc (hl)
216+  8D6B 3A E0 84     	ld a,(Cuad_objeto)
217+  8D6E E6 01        	and 1
218+  8D70 28 0F        	jr z,1F
219+  8D72 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
220+  8D75 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
221+  8D76 22 D4 84     	ld (Posicion_actual),hl
222+  8D79 CD 3A 8F     	call Genera_coordenadas
223+  8D7C CD DC 8E     	call Inc_CTRL_DESPLZ
224+  8D7F 18 03        	jr 2F
225+  8D81 CD DC 8E     1 call Inc_CTRL_DESPLZ
226+  8D84 C9           2 ret
227+  8D85
228+  8D85              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
229+  8D85              ;
230+  8D85              ;	24/7/22
231+  8D85              ;
232+  8D85              ;	Ciclo_completo.
233+  8D85              ;
234+  8D85              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
235+  8D85              ;
236+  8D85              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
237+  8D85              ; 	Decrementamos (Columns).
238+  8D85              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
239+  8D85              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
240+  8D85
241+  8D85
242+  8D85 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
243+  8D88 FE FF        	cp $ff
244+  8D8A 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
245+  8D8C 18 25        	jr 3f
246+  8D8E 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
247+  8D91 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
248+  8D92 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
249+  8D93 32 D8 84     	ld (CTRL_DESPLZ),a
250+  8D96 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
251+  8D99 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
252+  8D9B 20 0A        	jr nz,2F
253+  8D9D 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
254+  8DA0 23           	inc hl
255+  8DA1 22 D4 84     	ld (Posicion_actual),hl
256+  8DA4 CD 3A 8F     	call Genera_coordenadas
257+  8DA7
258+  8DA7              ; Inicia el puntero de Sprite.
259+  8DA7
260+  8DA7 2A DA 84     2 ld hl,(Indice_Sprite)
261+  8DAA 22 DC 84     	ld (Puntero_DESPLZ),hl
262+  8DAD CD 2B 86     	call Extrae_address
263+  8DB0 22 D6 84     	ld (Puntero_objeto),hl
264+  8DB3
265+  8DB3 C9           3 ret
266+  8DB4
267+  8DB4              ; ******************************************************************************************************************************************************************************************
268+  8DB4              ;
269+  8DB4              ;	19/10/22
270+  8DB4              ;
271+  8DB4              ;	Mov_left.
272+  8DB4              ;
273+  8DB4              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
274+  8DB4              ;
275+  8DB4              Mov_left
276+  8DB4
277+  8DB4 21 F5 84     	ld hl,Ctrl_0
278+  8DB7 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
279+  8DB9              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
280+  8DB9              ; 																	; _ en el caso de que no lo haya.
281+  8DB9 3A D8 84     	ld a,(CTRL_DESPLZ)
282+  8DBC A7           	and a
283+  8DBD 20 19        	jr nz,10F
284+  8DBF
285+  8DBF 2A D6 84     	ld hl,(Puntero_objeto)
286+  8DC2 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
287+  8DC5
288+  8DC5 3A F5 84     	ld a,(Ctrl_0)
289+  8DC8 CB 77        	bit 6,a
290+  8DCA 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
291+  8DCC
292+  8DCC CD D6 8E     	call Stop_Amadeus_left
293+  8DCF 20 5F        	jr nz,3F
294+  8DD1
295+  8DD1 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
296+  8DD4 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
297+  8DD7 C9           	ret
298+  8DD8
299+  8DD8 3A F5 84     10 ld a,(Ctrl_0)
300+  8DDB CB 7F        	bit 7,a
301+  8DDD 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
302+  8DDF 21 D8 84     	ld hl,CTRL_DESPLZ
303+  8DE2 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
304+  8DE3
305+  8DE3 3A E1 84     11 ld a,(Coordenada_X)
306+  8DE6 A7           	and a
307+  8DE7 20 47        	jr nz,3F
308+  8DE9 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
309+  8DEC A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
310+  8DED 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
311+  8DEF
312+  8DEF              ; ---------- ---------- ----------
313+  8DEF
314+  8DEF 3A E3 84     	ld a,(Vel_left)
315+  8DF2 FE 02        	cp 2
316+  8DF4 28 0F        	jr z,1F
317+  8DF6 38 04        	jr c,6F
318+  8DF8 FE 04        	cp 4
319+  8DFA 28 12        	jr z,7F
320+  8DFC
321+  8DFC              ; ---------- ---------- ----------
322+  8DFC
323+  8DFC 3A D8 84     6 ld a,(CTRL_DESPLZ)
324+  8DFF FE F9        	cp $f9
325+  8E01 20 2D        	jr nz,3F
326+  8E03 18 10        	jr 4F
327+  8E05 3A D8 84     1 ld a,(CTRL_DESPLZ)
328+  8E08 FE FA        	cp $fa
329+  8E0A 20 24        	jr nz,3F
330+  8E0C 18 07        	jr 4F
331+  8E0E 3A D8 84     7 ld a,(CTRL_DESPLZ)
332+  8E11 FE FC        	cp $fc
333+  8E13 20 1B        	jr nz,3F
334+  8E15
335+  8E15              ; ---------- ---------- ----------
336+  8E15
337+  8E15 CD ED 8E     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
338+  8E18              ;	call Reinicio
339+  8E18
340+  8E18              ; ---------- ---------- ----------
341+  8E18
342+  8E18 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
343+  8E1A C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
344+  8E1B 2A D6 84     	ld hl,(Puntero_objeto)
345+  8E1E 22 DC 84     	ld (Puntero_DESPLZ),hl
346+  8E21 CD 57 8E     	call DESPLZ_IZQ
347+  8E24 C1           	pop bc
348+  8E25 10 F3        	djnz 5B
349+  8E27 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
350+  8E2A 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
351+  8E2B 22 D4 84     	ld (Posicion_actual),hl
352+  8E2E 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
353+  8E30
354+  8E30              ; ---------- ---------- ----------
355+  8E30
356+  8E30 3A E3 84     3 ld a,(Vel_left)
357+  8E33 FE 08        	cp 8
358+  8E35 20 16        	jr nz,8F
359+  8E37 2A D4 84     	ld hl,(Posicion_actual)
360+  8E3A 7D           	ld a,l
361+  8E3B E6 1F        	and $1f
362+  8E3D 20 05        	jr nz,9F
363+  8E3F
364+  8E3F              ; ---------- ---------- ----------
365+  8E3F
366+  8E3F CD ED 8E     	call Reaparece_derecha
367+  8E42
368+  8E42              ; ---------- ---------- ----------
369+  8E42
370+  8E42 18 0F        	jr 2F
371+  8E44 2A D4 84     9 ld hl,(Posicion_actual)
372+  8E47 2B           	dec hl
373+  8E48 22 D4 84     	ld (Posicion_actual),hl
374+  8E4B 18 06        	jr 2F
375+  8E4D 2A D4 84     8 ld hl,(Posicion_actual)
376+  8E50 CD 57 8E     	call DESPLZ_IZQ
377+  8E53 CD 3A 8F     2 call Genera_coordenadas
378+  8E56 C9           	ret
379+  8E57
380+  8E57              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
381+  8E57              ;
382+  8E57              ;	22/9/22
383+  8E57
384+  8E57 CD 66 8E     DESPLZ_IZQ call Desplaza_izquierda
385+  8E5A CD 7B 8E         call modifica_parametros_1er_DESPLZ
386+  8E5D CD 9C 8E     	call Ciclo_completo_2
387+  8E60 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
388+  8E63 CB BE        	res 7,(hl)
389+  8E65 C9           	ret
390+  8E66
391+  8E66 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
392+  8E69 47           	ld b,a
393+  8E6A 2A DC 84     	ld hl,(Puntero_DESPLZ)
394+  8E6D 2B           1 dec hl
395+  8E6E 2B           	dec hl
396+  8E6F 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
397+  8E71 22 DC 84     	ld (Puntero_DESPLZ),hl
398+  8E74 CD 2B 86     	call Extrae_address
399+  8E77 22 04 85     	ld (Caja_de_DESPLZ),hl
400+  8E7A C9           	ret
401+  8E7B
402+  8E7B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
403+  8E7B              ;
404+  8E7B              ;	modifica_parametros_1er_DESPLZ
405+  8E7B              ;
406+  8E7B              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
407+  8E7B              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
408+  8E7B              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
409+  8E7B
410+  8E7B 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
411+  8E7E A7           	and a
412+  8E7F 20 17        	jr nz,1F
413+  8E81 21 D3 84     	ld hl,Columns
414+  8E84 34           	inc (hl)
415+  8E85 3A E0 84     	ld a,(Cuad_objeto)
416+  8E88 E6 01        	and 1
417+  8E8A 20 0C        	jr nz,1F
418+  8E8C 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
419+  8E8F 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
420+  8E90 22 D4 84     	ld (Posicion_actual),hl
421+  8E93 CD BF 8E     	call Dec_CTRL_DESPLZ
422+  8E96 18 03        	jr 2F
423+  8E98 CD BF 8E     1 call Dec_CTRL_DESPLZ
424+  8E9B C9           2 ret
425+  8E9C
426+  8E9C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
427+  8E9C              ;
428+  8E9C 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
429+  8E9F FE F8        	cp $f8
430+  8EA1 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
431+  8EA3 18 19        	jr 3f
432+  8EA5 21 D3 84     1 ld hl,Columns
433+  8EA8 35           	dec (hl)
434+  8EA9 AF           	xor a
435+  8EAA 32 D8 84     	ld (CTRL_DESPLZ),a
436+  8EAD 3A E0 84     	ld a,(Cuad_objeto)
437+  8EB0 E6 01        	and 1
438+  8EB2 28 07        	jr z,2F
439+  8EB4 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
440+  8EB7 2B           	dec hl
441+  8EB8 22 D4 84     	ld (Posicion_actual),hl
442+  8EBB CD 3A 8F     2 call Genera_coordenadas
443+  8EBE C9           3 ret
444+  8EBF
445+  8EBF              ; ---------- ---------- ---------- ---------- ---------- ----------
446+  8EBF              ;
447+  8EBF              ;	Dec_CTRL_DESPLZ
448+  8EBF              ;
449+  8EBF              ;	Subrutina de [modifica_punteros].
450+  8EBF              ;
451+  8EBF              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
452+  8EBF
453+  8EBF 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
454+  8EC2 3A E3 84     	ld a,(Vel_left)
455+  8EC5 A7           	and a
456+  8EC6 28 06        	jr z,1F
457+  8EC8 47           	ld b,a
458+  8EC9 35           3 dec (hl)
459+  8ECA 10 FD        	djnz 3B
460+  8ECC 18 01        	jr 2F
461+  8ECE 35           1 dec (hl)
462+  8ECF C9           2 ret
463+  8ED0
464+  8ED0              ; ---------- ---------- ---------- ---------- ---------- ----------
465+  8ED0              ;
466+  8ED0              ;	19/10/22
467+  8ED0              ;
468+  8ED0              ;	(cp 29) para un Amadeus de 3 Columns.
469+  8ED0              ;	(cp 30)   ""  ""    ""     2 Columns.
470+  8ED0
471+  8ED0 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
472+  8ED3 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
473+  8ED5 C9           	ret
474+  8ED6
475+  8ED6              ; ---------- ---------- ---------- ---------- ---------- ----------
476+  8ED6              ;
477+  8ED6              ;	19/10/22
478+  8ED6              ;
479+  8ED6              ;	(cp 2) para un Amadeus de 3 Columns.
480+  8ED6              ;	(cp 1)   ""  ""    ""     2 Columns.
481+  8ED6
482+  8ED6 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
483+  8ED9 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
484+  8EDB C9           	ret
485+  8EDC
486+  8EDC              ; ---------- ---------- ---------- ---------- ---------- ----------
487+  8EDC              ;
488+  8EDC              ;	24/7/22
489+  8EDC              ;
490+  8EDC              ;	Inc_CTRL_DESPLZ
491+  8EDC              ;
492+  8EDC              ;	Subrutina de [modifica_punteros].
493+  8EDC              ;
494+  8EDC              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
495+  8EDC
496+  8EDC 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
497+  8EDF 3A E4 84     	ld a,(Vel_right)
498+  8EE2 A7           	and a
499+  8EE3 28 06        	jr z,1F
500+  8EE5 47           	ld b,a
501+  8EE6 34           3 inc (hl)
502+  8EE7 10 FD        	djnz 3B
503+  8EE9 18 01        	jr 2F
504+  8EEB 34           1 inc (hl)
505+  8EEC C9           2 ret
506+  8EED
507+  8EED              ; ---------- ---------- ---------- ---------- ---------- ----------
508+  8EED
509+  8EED 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
510+  8EF0 01 1F 00     	ld bc,31
511+  8EF3 A7           	and a
512+  8EF4 ED 4A        	adc hl,bc
513+  8EF6 22 D4 84     	ld (Posicion_actual),hl
514+  8EF9 21 F5 84     	ld hl,Ctrl_0														; $xxx1
515+  8EFC CB C6        	set 0,(hl)
516+  8EFE C9           	ret
517+  8EFF
518+  8EFF              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8EFF
520+  8EFF 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
521+  8F02 01 1F 00     	ld bc,31
522+  8F05 A7           	and a
523+  8F06 ED 42        	sbc hl,bc
524+  8F08 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
525+  8F0B 21 F5 84     	ld hl,Ctrl_0
526+  8F0E CB CE        	set 1,(hl)
527+  8F10 C9           	ret
528+  8F11
529+  8F11              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F11
531+  8F11 24           Reaparece_abajo inc h
532+  8F12 01 E0 17     	ld bc,$17e0
533+  8F15 A7           	and a
534+  8F16 ED 4A        	adc hl,bc
535+  8F18 22 D4 84     	ld (Posicion_actual),hl
536+  8F1B 21 F5 84     	ld hl,Ctrl_0
537+  8F1E CB D6        	set 2,(hl)
538+  8F20 C9           	ret
539+  8F21
540+  8F21              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F21
542+  8F21 01 E0 17     Reaparece_arriba ld bc,$17e0
543+  8F24 A7           	and a
544+  8F25 ED 42        	sbc hl,bc
545+  8F27 22 D4 84     	ld (Posicion_actual),hl
546+  8F2A 21 F5 84     	ld hl,Ctrl_0
547+  8F2D CB DE        	set 3,(hl)
548+  8F2F C9           	ret
549+  8F30
550+  8F30              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
551+  8F30
552+  8F30 2A DE 84     Reinicio ld hl,(Posicion_inicio)
553+  8F33
554+  8F33              ;	ld (Posicion_actual),hl
555+  8F33 21 00 00     	ld hl,0
556+  8F36 22 D4 84     	ld (Posicion_actual),hl
557+  8F39
558+  8F39
559+  8F39 C9           	ret
# file closed: Direcciones.asm
597   8F3A              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F3A              ;	12/12/22
  2+  8F3A              ;
  3+  8F3A              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F3A              ;	Fila superior "0", Columna izquierda "0".
  5+  8F3A              ;
  6+  8F3A              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F3A              ;
  8+  8F3A              ;	Modifica: A
  9+  8F3A
 10+  8F3A C5           Genera_coordenadas push bc
 11+  8F3B E5           	push hl
 12+  8F3C 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F3F 7D           	ld a,l
 14+  8F40 E6 1F        	and $1f
 15+  8F42 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F45 CD 19 8C     	call calcula_tercio
 17+  8F48 47           	ld b,a
 18+  8F49 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F4A 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F4C 7D           	ld a,l
 21+  8F4D E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F4F 28 05        	jr z,2F
 23+  8F51 0C           1 inc c
 24+  8F52 D6 20        	sub 32
 25+  8F54 20 FB        	jr nz,1B
 26+  8F56 0C           2 inc c
 27+  8F57 04           	inc b
 28+  8F58 05           	dec b
 29+  8F59 28 04        	jr z,3F
 30+  8F5B 3E E0        	ld a,$e0
 31+  8F5D 10 F2        	djnz 1B
 32+  8F5F 79           3 ld a,c
 33+  8F60 3D           	dec a
 34+  8F61 32 E2 84     	ld (Coordenada_y),a
 35+  8F64 E1           	pop hl
 36+  8F65 C1           	pop bc
 37+  8F66 C9           	ret
# file closed: Genera_coordenadas.asm
598   8F67              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F67
  2+  8F67
  3+  8F67              ;   11/8/22
  4+  8F67              ;
  5+  8F67              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F67              ;
  7+  8F67              ;   Mov_obj.asm
  8+  8F67              ;
  9+  8F67              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F67              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F67              ;
 12+  8F67              ;   Codificación:
 13+  8F67              ;
 14+  8F67              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F67              ;
 16+  8F67
 17+  8F67 02 10 00     Izquierda db 2,%00010000,0
 18+  8F6A 02 20 00     Derecha db 2,%00100000,0
 19+  8F6D 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F71 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F75 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F79 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F7D 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F81 60 42 60 40
 23+  8F85 63
 24+  8F86 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8F8A 22 A3 80 A0
 25+  8F8E 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8F92 84 A0 83 A0
 26+  8F96 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8F9A 80 A3 22 A0
 27+  8F9E 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FA2 40 60 42 60
 28+  8FA6 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FAA
 30+  8FAA 6A 8F        Indice_mov_Badsat defw Derecha
 31+  8FAC 71 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FAE 79 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FB0 6D 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FB2
 35+  8FB2 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FB5 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FB6 28 02            jr z,1F
 38+  8FB8 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FBA
 40+  8FBA 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FBD C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FBF 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FC2              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FC2 2A F9 84         ld hl,(Puntero_mov)
 45+  8FC5 7E               ld a,(hl)
 46+  8FC6 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FC9 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FCA 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FCD
 50+  8FCD 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  8FD0 A7               and a
 52+  8FD1 20 0C            jr nz,12F
 53+  8FD3 2A F9 84         ld hl,(Puntero_mov)
 54+  8FD6 7E               ld a,(hl)
 55+  8FD7 A7               and a
 56+  8FD8 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FDA
 58+  8FDA E6 0F            and $0f
 59+  8FDC 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  8FDF              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  8FDF 2A F9 84     12 ld hl,(Puntero_mov)
 62+  8FE2 CB 7E            bit 7,(hl)
 63+  8FE4 28 03            jr z,2F
 64+  8FE6 CD 65 8C         call Mov_down
 65+  8FE9 2A F9 84     2 ld hl, (Puntero_mov)
 66+  8FEC CB 76            bit 6,(hl)
 67+  8FEE 28 03            jr z,3F
 68+  8FF0 CD 93 8C         call Mov_up
 69+  8FF3 2A F9 84     3 ld hl, (Puntero_mov)
 70+  8FF6 CB 6E            bit 5,(hl)
 71+  8FF8 28 03            jr z,4F
 72+  8FFA CD C1 8C         call Mov_right
 73+  8FFD 2A F9 84     4 ld hl, (Puntero_mov)
 74+  9000 CB 66            bit 4,(hl)
 75+  9002 28 03            jr z,5F
 76+  9004 CD B4 8D         call Mov_left
 77+  9007
 78+  9007              ; ---------- --------- --------- ---------- ----------
 79+  9007
 80+  9007 3A FD 84     5 ld a,(Repetimos_db)
 81+  900A A7               and a
 82+  900B 28 07            jr z,6F
 83+  900D 3D               dec a
 84+  900E 32 FD 84         ld (Repetimos_db),a
 85+  9011 28 01            jr z,6f
 86+  9013 C9           11 ret
 87+  9014 21 FB 84     6 ld hl,Contador_db_mov
 88+  9017 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9018 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  901B 23               inc hl
 91+  901C 22 F9 84         ld (Puntero_mov),hl
 92+  901F 18 F2            jr 11B
 93+  9021 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9024 3A FC 84         ld a,(Incrementa_puntero)
 95+  9027 47               ld b,a
 96+  9028 23           8 inc hl
 97+  9029 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  902B 5E               ld e,(hl)
 99+  902C 23               inc hl
100+  902D 56               ld d,(hl)
101+  902E EB               ex de,hl
102+  902F 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  9032 18 DF            jr 11B
104+  9034
105+  9034              ; ---------- --------- --------- ---------- ----------
106+  9034              ;
107+  9034              ;   11/8/22
108+  9034              ;
109+  9034              ;   Prepara_Puntero_mov
110+  9034
111+  9034 E5           Prepara_Puntero_mov push hl
112+  9035 D5               push de
113+  9036 2A F7 84         ld hl,(Puntero_indice_mov)
114+  9039 5E               ld e,(hl)
115+  903A 23               inc hl
116+  903B 56               ld d,(hl)
117+  903C EB               ex de,hl
118+  903D 22 F9 84         ld (Puntero_mov),hl
119+  9040 D1               pop de
120+  9041 E1               pop hl
121+  9042 C9               ret
122+  9043
123+  9043              ; ---------- --------- --------- ---------- ----------
124+  9043              ;
125+  9043              ;   11/8/22
126+  9043              ;
127+  9043              ;   Reinicia_el_movimiento
128+  9043
129+  9043 CD 34 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  9046 AF               xor a
131+  9047 32 FB 84         ld (Contador_db_mov),a
132+  904A 32 FC 84         ld (Incrementa_puntero),a
133+  904D C3 B2 8F         jp Movimiento
134+  9050
135+  9050              ; ---------- --------- --------- ---------- ----------
136+  9050
137+  9050
138+  9050
139+  9050
140+  9050
141+  9050
142+  9050
143+  9050
144+  9050
145+  9050
146+  9050
147+  9050
148+  9050
149+  9050
150+  9050
151+  9050
152+  9050
153+  9050
# file closed: Patrones_de_mov.asm
599   9050              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9050              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9050              ;
  3+  9050              ;	3/1/23
  4+  9050              ;
  5+  9050              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9050
  7+  9050              ;	ADC HL,SP	LD (addr),SP
  8+  9050              ;	ADD HL,SP	LD SP,(addr)
  9+  9050              ;	ADD IX,SP	LD SP,nn
 10+  9050              ; 	ADD IY,SP	LD SP,HL
 11+  9050              ;				LD SP,IX
 12+  9050              ;	DEC SP		LD SP,IY
 13+  9050
 14+  9050              ;	EX (SP),HL
 15+  9050              ;	EX (SP),IX
 16+  9050              ;	EX (SP),IY
 17+  9050
 18+  9050              ;	INC SP
 19+  9050
 20+  9050
 21+  9050                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
600   7FC0
601   7FC0              	SAVESNA "Pruebas.sna", START
602   7FC0
603   7FC0
604   7FC0
# file closed: Banco_de_pruebas.asm
