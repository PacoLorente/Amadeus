# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 7D 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 31/01/23
  5+  83C0
  6+  83C0              Indice_de_entidades									; 56 Bytes por entidad.
  7+  83C0
  8+  83C0 04 84        	defw Entidad_1
  9+  83C2 3C 84        	defw Entidad_2
 10+  83C4 74 84        	defw Entidad_3
 11+  83C6 AC 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6
 28+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite_der).
 29+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite_izq).
 30+  83DA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83DC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83DE
 33+  83DE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83E0 04           	db 4 											; (Cuad_objeto).
 35+  83E1
 36+  83E1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83E5
 38+  83E5 00 00        	db 0,0											; Variables_de_borrado
 39+  83E7 00 00        	defw 0											;	" " " " " " "
 40+  83E9 00 00        	defw 0											;	" " " " " " "
 41+  83EB 00 00 00     	db 0,0,0										;	" " " " " " "
 42+  83EE
 43+  83EE 00 00        	db 0,0											; Variables_de_pintado
 44+  83F0 00 00        	defw 0											;	" " " " " " "
 45+  83F2 00 00        	defw 0											;	" " " " " " "
 46+  83F4 00 00 00     	db 0,0,0										;	" " " " " " "
 47+  83F7
 48+  83F7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  83F9
 50+  83F9 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  83FD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8400
 53+  8400 00           	db 0 											; (Columnas).
 54+  8401 00 00        	defw 0											; (Limite_horizontal).
 55+  8403 00           	db 0											; (Limite_vertical).
 56+  8404
 57+  8404              ; ---------- ---------- ---------- ---------- ----------
 58+  8404
 59+  8404 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8406 00 00        	defw 0											; (Posicion_actual).
 61+  8408 00 00        	defw 0 											; (Puntero_objeto).
 62+  840A 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 63+  840D
 64+  840D 00           	db %00000000 									; (Attr).
 65+  840E
 66+  840E 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8410 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8412 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8414 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8416
 71+  8416 00 00        	defw 0											; (Posicion_inicio).
 72+  8418 00           	db 0											; (Cuad_objeto).
 73+  8419
 74+  8419 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  841D
 76+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 77+  841F 00 00        	defw 0											;	" " " " " " "
 78+  8421 00 00        	defw 0											;	" " " " " " "
 79+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 80+  8426
 81+  8426 00 00        	db 0,0											; Variables_de_pintado
 82+  8428 00 00        	defw 0											;	" " " " " " "
 83+  842A 00 00        	defw 0											;	" " " " " " "
 84+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 85+  842F
 86+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8431
 88+  8431 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  8438
 91+  8438 00           	db 0 											; (Columnas).
 92+  8439 00 00        	defw 0											; (Limite_horizontal).
 93+  843B 00           	db 0											; (Limite_vertical).
 94+  843C
 95+  843C              ; ---------- ---------- ---------- ---------- ----------
 96+  843C
 97+  843C 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  843E 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8440 00 00        	defw 0											; (Puntero_objeto).
100+  8442 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
101+  8445
102+  8445 02           	db %00000010									; (Attr).
103+  8446
104+  8446 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  8448 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  844A 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  844C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  844E
109+  844E 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8450 02           	db 2											; (Cuad_objeto).
111+  8451
112+  8451 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8455
114+  8455 00 00        	db 0,0											; Variables_de_borrado
115+  8457 00 00        	defw 0										 	;	" " " " " " "
116+  8459 00 00        	defw 0											;	" " " " " " "
117+  845B 00 00 00     	db 0,0,0										;	" " " " " " "
118+  845E
119+  845E 00 00        	db 0,0											; Variables_de_pintado
120+  8460 00 00        	defw 0											;	" " " " " " "
121+  8462 00 00        	defw 0											;	" " " " " " "
122+  8464 00 00 00     	db 0,0,0										;	" " " " " " "
123+  8467
124+  8467 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  8469
126+  8469 72 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  846D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8470
129+  8470 00           	db 0 											; (Columnas).
130+  8471 00 00        	defw 0											; (Limite_horizontal).
131+  8473 00           	db 0											; (Limite_vertical).
132+  8474
133+  8474              ; ---------- ---------- ---------- ---------- ----------
134+  8474
135+  8474 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  8476 00 00        	defw 0                                          ; (Posicion_actual).
137+  8478 00 00        	defw 0											; (Puntero_objeto).
138+  847A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
139+  847D
140+  847D 04           	db %00000100									; (Attr).
141+  847E
142+  847E 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8480 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8482
145+  8482 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  8486
148+  8486 A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  8488 01           	db 1											; (Cuad_objeto).
150+  8489
151+  8489 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  848D
153+  848D 00 00        	db 0,0											; Variables_de_borrado
154+  848F 00 00        	defw 0										 	;	" " " " " " "
155+  8491 00 00        	defw 0											;	" " " " " " "
156+  8493 00 00 00     	db 0,0,0										;	" " " " " " "
157+  8496
158+  8496 00 00        	db 0,0											; Variables_de_pintado
159+  8498 00 00        	defw 0											;	" " " " " " "
160+  849A 00 00        	defw 0											;	" " " " " " "
161+  849C 00 00 00     	db 0,0,0										;	" " " " " " "
162+  849F
163+  849F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84A1
165+  84A1 74 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84A5 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84A8
168+  84A8 00           	db 0 											; (Columnas).
169+  84A9 00 00        	defw 0											; (Limite_horizontal).
170+  84AB 00           	db 0											; (Limite_vertical).
171+  84AC
172+  84AC              ; ---------- ---------- ---------- ---------- ----------
173+  84AC
174+  84AC 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84AE 00 00        	defw 0                                          ; (Posicion_actual).
176+  84B0 00 00        	defw 0 											; (Puntero_objeto).
177+  84B2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
178+  84B5
179+  84B5 01           	db %00000001									; (Attr).
180+  84B6
181+  84B6 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84B8 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84BA
184+  84BA 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84BE
187+  84BE BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84C0 00           	db 0											; (Cuad_objeto).
189+  84C1
190+  84C1 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84C5
192+  84C5 00 00        	db 0,0											; Variables_de_borrado
193+  84C7 00 00        	defw 0										 	;	" " " " " " "
194+  84C9 00 00        	defw 0											;	" " " " " " "
195+  84CB 00 00 00     	db 0,0,0										;	" " " " " " "
196+  84CE
197+  84CE 00 00        	db 0,0											; Variables_de_pintado
198+  84D0 00 00        	defw 0											;	" " " " " " "
199+  84D2 00 00        	defw 0											;	" " " " " " "
200+  84D4 00 00 00     	db 0,0,0										;	" " " " " " "
201+  84D7
202+  84D7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84D9
204+  84D9 64 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84DD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84E0
207+  84E0 00           	db 0 											; (Columnas).
208+  84E1 00 00        	defw 0											; (Limite_horizontal).
209+  84E3 00           	db 0											; (Limite_vertical).
210+  84E4
# file closed: Entidades.asm
 21   84E4
 22   84E4              ; ******************************************************************************************************************************************************************************************
 23   84E4              ; Constantes.
 24   84E4              ; ******************************************************************************************************************************************************************************************
 25   84E4              ;
 26   84E4              ; 8/11/22
 27   84E4              ;
 28   84E4              ; Constantes generales.
 29   84E4              ;
 30   84E4
 31   84E4              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84E4              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84E4              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84E4              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84E4              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84E4
 37   84E4              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84E4              ;                               				        ; De momento situamos este almacén en $7000.
 39   84E4
 40   84E4
 41   84E4              ; ******************************************************************************************************************************************************************************************
 42   84E4              ; Variables.
 43   84E4              ; ******************************************************************************************************************************************************************************************
 44   84E4              ;
 45   84E4              ; 10/11/22
 46   84E4              ;
 47   84E4              ; Variables de DRAW. (Motor principal).
 48   84E4              ;
 49   84E4              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84E4
 51   84E4 02           Filas db 2												; Filas. [DRAW]
 52   84E5 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84E6 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84E8 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84EA 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84EB              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84EB              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84EB              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84EB 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84EC 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84ED
 62   84ED              ; ---------- ---------- ----------
 63   84ED
 64   84ED
 65   84ED 04           Attr db %00000100										; Atributos de la entidad:
 66   84EE
 67   84EE              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84EE              ;
 69   84EE              ;	COLORES: 0 ..... NEGRO
 70   84EE              ;    		 1 ..... AZUL
 71   84EE              ; 			 2 ..... ROJO
 72   84EE              ;			 3 ..... MAGENTA
 73   84EE              ; 			 4 ..... VERDE
 74   84EE              ; 			 5 ..... CIAN
 75   84EE              ;			 6 ..... AMARILLO
 76   84EE              ; 			 7 ..... BLANCO
 77   84EE
 78   84EE 80 81        Indice_Sprite_der defw Indice_Badsat_der
 79   84F0 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   84F2 00 00        Puntero_DESPLZ_der defw 0
 81   84F4 00 00        Puntero_DESPLZ_izq defw 0
 82   84F6
 83   84F6 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   84F8 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   84F9
 86   84F9              ; Variables de objeto. (Características).
 87   84F9
 88   84F9 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   84FA 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   84FB 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   84FC 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   84FD
 93   84FD 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   84FF 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   8501 00 00        	defw 0
 96   8503 00 00 00     	db 0,0,0
 97   8506
 98   8506 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   8508 00 00        	defw 0
100   850A 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   850C 00 00 00     	db 0,0,0
102   850F
103   850F              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   850F
105   850F 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   8510              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   8510              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   8510              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   8510              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   8510              ;
111   8510              ; 														DESCRIPCIÖN:
112   8510              ;
113   8510              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   8510              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   8510              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   8510              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   8510              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   8510              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   8510              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   8510              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   8510              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   8510              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   8510              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   8510              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   8510              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   8510              ;
127   8510              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   8510              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   8510              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   8510
131   8510 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   8511
133   8511              ; Movimiento.
134   8511
135   8511 62 90        Puntero_indice_mov defw Indice_mov_Derecha_e_izquierda
136   8513 00 00        Puntero_mov defw 0
137   8515 00           Contador_db_mov db 0
138   8516 00           Incrementa_puntero db 0
139   8517 00           Repetimos_db db 0
140   8518
141   8518
142   8518              ; Variables de funcionamiento. [DRAW].
143   8518
144   8518 00           Columnas db 0
145   8519 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
146   851B              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   851B 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
148   851C
149   851C              ; 52 Bytes por entidad.
150   851C              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
151   851C              ;					         		---------;      ;---------
152   851C
153   851C
154   851C              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
155   851C              ; Gestión de ENTIDADES.
156   851C
157   851C 00 00        Puntero_store_entidades defw 0
158   851E 00 00        Puntero_restore_entidades defw 0
159   8520 00 00        Indice_restore defw 0
160   8522 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
161   8523 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
162   8524              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
163   8524              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
164   8524              ;														; _ (Numero_de_malotes)="0".
165   8524 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
166   8526              ;														; _variable para almacenar lo posición del puntero_
167   8526              ; 														; _de pila, SP.
168   8526 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
169   8528              ;														; La utiliza la rutina [Extrae_foto_registros].
170   8528 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
171   852A              ;														; _el snapshot de los registros de la siguiente entidad.
172   852A              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
173   852A
174   852A              ; Gestión de FRAMES.
175   852A
176   852A 00           Switch db 0
177   852B
178   852B              ; Variables de Raster y localización en pantalla.
179   852B
180   852B 00 FF        Temp_Raster defw $ff00
181   852D
182   852D              ; Rutina principal *************************************************************************************************************************************************************************
183   852D              ;
184   852D              ;	14/11/22
185   852D
186   852D 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
187   8530
188   8530 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
189   8532 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
190   8534 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
191   8536 F3           	DI
192   8537
193   8537 3E 01        	ld a,1
194   8539 D3 FE        	out ($fe),a
195   853B
196   853B 3E 07        	ld a,%00000111
197   853D CD F1 8C     	call Cls
198   8540
199   8540              ;	call Pinta_FILAS
200   8540
201   8540 CD 1E 87     	call Pulsa_ENTER
202   8543
203   8543 21 22 85     	ld hl,Numero_de_entidades
204   8546 46           	ld b,(hl)
205   8547 04           	inc b
206   8548 05           	dec b
207   8549 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
208   854B
209   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
210   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
211   854B              ;	Pintamos el resto de entidades:
212   854B
213   854B CD 63 86     	call Inicia_punteros_de_entidades
214   854E
215   854E              ;	INICIA ENTIDADES!!!!!
216   854E
217   854E C5           1 push bc  												; Guardo el contador de entidades.
218   854F CD 96 86      	call Inicia_Puntero_objeto
219   8552 CD 75 87     	call Draw
220   8555 CD A0 7F     	call Guarda_foto_registros
221   8558 CD B9 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
222   855B C1           	pop bc
223   855C 10 F0        	djnz 1B  											; Decremento el contador de entidades.
224   855E
225   855E              ; 	INICIA AMADEUS!!!!!
226   855E
227   855E CD FA 86     3 call Restore_Amadeus
228   8561 CD 96 86     	call Inicia_Puntero_objeto
229   8564 CD 75 87     	call Draw
230   8567 CD A0 7F     	call Guarda_foto_registros
231   856A CD 0C 87     	call Store_Amadeus
232   856D
233   856D              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
234   856D
235   856D CD 63 86     	call Inicia_punteros_de_entidades
236   8570 CD E8 86     	call Restore_Primera_entidad
237   8573 3A 22 85     	ld a,(Numero_de_entidades)
238   8576 3C           	inc a
239   8577 32 23 85     	ld (Numero_de_malotes),a
240   857A
241   857A FB           2 ei
242   857B 18 FD        	jr 2B
243   857D
244   857D              ; -----------------------------------------------------------------------------------
245   857D
246   857D              Frame
247   857D
248   857D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
249   857D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
250   857D
251   857D 3E 07            ld a,7
252   857F D3 FE            out ($fe),a
253   8581 CD 79 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
254   8584 3E 01            ld a,1
255   8586 D3 FE            out ($fe),a
256   8588
257   8588              ; ----------------------------------------------------------------------
258   8588
259   8588 21 00 70     	ld hl,Album_de_fotos
260   858B 22 28 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
261   858E              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
262   858E 3A 22 85         ld a,(Numero_de_entidades)
263   8591 47               ld b,a
264   8592 A7           	and a
265   8593 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
266   8595
267   8595 C5           2 push bc
268   8596 CD DC 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
269   8599 3A 0F 85     	ld a,(Ctrl_0)
270   859C CB 67        	bit 4,a
271   859E 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
272   85A0 CD 2A 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   85A3 21 0F 85     1 ld hl,Ctrl_0
274   85A6 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
275   85A8 AF           	xor a
276   85A9 32 10 85     	ld (Obj_dibujado),a
277   85AC CD B9 86     	call Store_Restore_entidades
278   85AF C1           	pop bc
279   85B0 10 E3        	djnz 2B
280   85B2
281   85B2 CD FA 86     4 call Restore_Amadeus
282   85B5 CD FB 85     	call Mov_Amadeus
283   85B8 3A 0F 85     	ld a,(Ctrl_0)
284   85BB CB 67        	bit 4,a
285   85BD 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
286   85BF CD 2A 86     	call Guarda_foto_entidad_a_pintar
287   85C2
288   85C2
289   85C2 21 0F 85     3 ld hl,Ctrl_0
290   85C5 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
291   85C7 AF           	xor a
292   85C8 32 10 85     	ld (Obj_dibujado),a
293   85CB CD 0C 87     	call Store_Amadeus
294   85CE
295   85CE              ; -----
296   85CE
297   85CE CD 63 86     	call Inicia_punteros_de_entidades
298   85D1 CD E8 86     	call Restore_Primera_entidad
299   85D4 CD 79 86     	call Calcula_numero_de_malotes
300   85D7
301   85D7 3E 00        	ld a,0
302   85D9 D3 FE        	out ($fe),a
303   85DB C9           	ret
304   85DC
305   85DC              ; --------------------------------------------------------------------------------------------------------------
306   85DC              ;
307   85DC              ;	29/1/23
308   85DC
309   85DC              Mov_obj
310   85DC
311   85DC              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
312   85DC
313   85DC AF           	xor a
314   85DD 32 10 85     	ld (Obj_dibujado),a
315   85E0 CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
316   85E3              ;														; Obj_dibujado="0".
317   85E3              ; Movemos Entidades malignas.
318   85E3
319   85E3 CD 76 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
320   85E6 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
321   85E9 CB 67        	bit 4,a
322   85EB C8           	ret z
323   85EC
324   85EC              ; ---------
325   85EC
326   85EC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
327   85EE 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
328   85F1 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
329   85F4 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
330   85F7 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
331   85FA C9           	ret													; _de la misma.
332   85FB
333   85FB              ; --------------------------------------------------------------------------------------------------------------
334   85FB              ;
335   85FB              ;	29/1/23
336   85FB
337   85FB              Mov_Amadeus
338   85FB
339   85FB AF           	xor a
340   85FC 32 10 85     	ld (Obj_dibujado),a
341   85FF CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
342   8602              ;														; Obj_dibujado="0".
343   8602              ; Movemos Amadeus.
344   8602
345   8602 CD 32 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
346   8605 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
347   8608 CB 67        	bit 4,a
348   860A C8           	ret z
349   860B
350   860B              ; ---------
351   860B
352   860B 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
353   860D 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
354   8610 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
355   8613 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
356   8616 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
357   8619 C9           	ret													; _de la nave.
358   861A
359   861A              ; --------------------------------------------------------------------------------------------------------------
360   861A              ;
361   861A              ;	31/01/23
362   861A              ;
363   861A              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
364   861A
365   861A              Guarda_foto_entidad_a_borrar
366   861A
367   861A CD 4F 8A     	call Prepara_draw
368   861D CD 89 89     	call calcula_CColumnass
369   8620 CD C0 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
370   8623 CD 15 8A     	call Define_rutina_de_impresion
371   8626 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
372   8629 C9           	ret
373   862A
374   862A              ; --------------------------------------------------------------------------------------------------------------
375   862A              ;
376   862A              ;	31/01/23
377   862A              ;
378   862A              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
379   862A              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
380   862A
381   862A              Guarda_foto_entidad_a_pintar
382   862A
383   862A CD 57 86     	call Repone_pintar
384   862D CD 75 87     	call Draw
385   8630 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
386   8633 C9           	ret
387   8634
388   8634              ; --------------------------------------------------------------------------------------------------------------
389   8634              ;
390   8634              ;
391   8634
392   8634 21 E4 84     Prepara_var_pintado_borrado	ld hl,Filas
393   8637 3A 10 85     	ld a,(Obj_dibujado)
394   863A A7           	and a
395   863B 28 05        	jr z,1F
396   863D 11 06 85     	ld de,Variables_de_pintado
397   8640 18 03        	jr 2F
398   8642 11 FD 84     1 ld de,Variables_de_borrado
399   8645 01 09 00     2 ld bc,9
400   8648 ED B0        	ldir
401   864A C9           	ret
402   864B
403   864B              ; --------------------------------------------------------------------------------------------------------------
404   864B
405   864B 21 FD 84     Repone_borrar ld hl,Variables_de_borrado
406   864E 11 E4 84     	ld de,Filas
407   8651 01 09 00     	ld bc,9
408   8654 ED B0        	ldir
409   8656 C9           	ret
410   8657
411   8657 21 06 85     Repone_pintar ld hl,Variables_de_pintado
412   865A 11 E4 84     	ld de,Filas
413   865D 01 09 00     	ld bc,9
414   8660 ED B0        	ldir
415   8662 C9           	ret
416   8663
417   8663              ; *************************************************************************************************************************************************************
418   8663              ;
419   8663              ; 8/1/23
420   8663              ;
421   8663              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
422   8663              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
423   8663              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
424   8663
425   8663              ; Destruye HL y DE !!!!!
426   8663
427   8663              Inicia_punteros_de_entidades
428   8663
429   8663 21 C0 83     	ld hl,Indice_de_entidades
430   8666 CD 90 86         call Extrae_address
431   8669 22 1C 85         ld (Puntero_store_entidades),hl
432   866C 21 C2 83     	ld hl,Indice_de_entidades+2
433   866F 22 20 85     	ld (Indice_restore),hl
434   8672 CD 90 86     	call Extrae_address
435   8675 22 1E 85     	ld (Puntero_restore_entidades),hl
436   8678 C9               ret
437   8679
438   8679              ; -------------------------------------------------------------------------------------------------------------
439   8679              ;
440   8679              ; 30/1/23
441   8679              ;
442   8679
443   8679 2A 28 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
444   867C 7D           	ld a,l
445   867D A7           	and a
446   867E 28 0C        	jr z,3F
447   8680 AF           	xor a
448   8681 67           	ld h,a
449   8682 7D           	ld a,l
450   8683 D6 06        1 sub 6
451   8685 28 03        	jr z,2F
452   8687 24           	inc h
453   8688 18 F9        	jr 1B
454   868A 24           2 inc h
455   868B 7C           	ld a,h
456   868C 32 23 85     3 ld (Numero_de_malotes),a
457   868F C9           	ret
458   8690
459   8690              ; *************************************************************************************************************************************************************
460   8690              ;
461   8690              ; 20/10/22
462   8690              ;
463   8690              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
464   8690              ;
465   8690              ; Destruye el puntero y DE !!!!!
466   8690
467   8690 5E           Extrae_address ld e,(hl)
468   8691 23           	inc hl
469   8692 56           	ld d,(hl)
470   8693 2B           	dec hl
471   8694 EB           	ex de,hl
472   8695 C9           	ret
473   8696
474   8696              ; *************************************************************************************************************************************************************
475   8696              ;
476   8696              ;	31/01/23
477   8696              ;
478   8696              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
479   8696              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
480   8696              ;
481   8696              ;   Destruye HL y BC !!!!!,
482   8696              ;
483   8696              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
484   8696              ;					"0" ..... Izquierda.
485   8696
486   8696              Inicia_Puntero_objeto
487   8696
488   8696 2A EE 84     	ld hl,(Indice_Sprite_der)
489   8699 22 F2 84     	ld (Puntero_DESPLZ_der),hl
490   869C CD 90 86     	call Extrae_address
491   869F 22 E8 84     	ld (Puntero_objeto),hl
492   86A2
493   86A2 2A F0 84     	ld hl,(Indice_Sprite_izq)
494   86A5 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
495   86A8              ;	call Extrae_address
496   86A8              ;	ld (Puntero_objeto),hl
497   86A8
498   86A8              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
499   86A8
500   86A8 21 10 83     	ld hl,Amadeus
501   86AB ED 4B E8 84  	ld bc,(Puntero_objeto)
502   86AF B7 ED 42     	sub hl,bc
503   86B2 C0           	ret nz
504   86B3 21 0F 85     	ld hl,Ctrl_0
505   86B6 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
506   86B8 C9           	ret 												; _de nuestra nave en los extremos.
507   86B9
508   86B9              ; *************************************************************************************************************************************************************
509   86B9              ;
510   86B9              ;	8/1/23
511   86B9              ;
512   86B9              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
513   86B9              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
514   86B9
515   86B9              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
516   86B9              ;	_de la 2ª y 3ª entidad respectivamente.
517   86B9
518   86B9
519   86B9
520   86B9              Store_Restore_entidades
521   86B9
522   86B9 E5           	push hl
523   86BA D5           	push de
524   86BB C5            	push bc
525   86BC
526   86BC              ;	STORE !!!!!
527   86BC              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
528   86BC
529   86BC 21 E4 84     	ld hl,Filas
530   86BF ED 5B 1C 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
531   86C3 01 38 00     	ld bc,56
532   86C6 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
533   86C8
534   86C8              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
535   86C8
536   86C8 2A 1E 85     	ld hl,(Puntero_restore_entidades)
537   86CB 22 1C 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
538   86CE 11 E4 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
539   86D1 01 38 00     	ld bc,56
540   86D4 ED B0        	ldir
541   86D6
542   86D6              ;	Incrementa RESTORE !!!!!
543   86D6
544   86D6 2A 20 85         ld hl,(Indice_restore)
545   86D9 23           	inc hl
546   86DA 23           	inc hl
547   86DB 22 20 85     	ld (Indice_restore),hl
548   86DE CD 90 86         call Extrae_address
549   86E1 22 1E 85         ld (Puntero_restore_entidades),hl
550   86E4 C1           	pop bc
551   86E5 D1           	pop de
552   86E6 E1           	pop hl
553   86E7 C9           	ret
554   86E8
555   86E8              ; **************************************************************************************************
556   86E8              ;
557   86E8              ;	29/10/22
558   86E8              ;
559   86E8              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
560   86E8
561   86E8 E5           Restore_Primera_entidad push hl
562   86E9 D5           	push de
563   86EA C5            	push bc
564   86EB 2A 1C 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
565   86EE 11 E4 84     	ld de,Filas
566   86F1 01 38 00     	ld bc,56
567   86F4 ED B0        	ldir
568   86F6 C1           	pop bc
569   86F7 D1           	pop de
570   86F8 E1           	pop hl
571   86F9 C9           	ret
572   86FA
573   86FA              ; **************************************************************************************************
574   86FA              ;
575   86FA              ;	25/01/23
576   86FA              ;
577   86FA              ;	Restore_Amadeus
578   86FA              ;
579   86FA              ;	Cargamos en DRAW los parámetros de Amadeus.
580   86FA              ;
581   86FA
582   86FA E5           Restore_Amadeus	push hl
583   86FB D5           	push de
584   86FC C5            	push bc
585   86FD 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
586   8700 11 E4 84     	ld de,Filas
587   8703 01 38 00     	ld bc,56
588   8706 ED B0        	ldir
589   8708 C1           	pop bc
590   8709 D1           	pop de
591   870A E1           	pop hl
592   870B C9           	ret
593   870C
594   870C              ; *************************************************************************************************************************************************************
595   870C              ;
596   870C              ;	29/01/23
597   870C              ;
598   870C              ;	Store_Amadeus
599   870C              ;
600   870C              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
601   870C              ;
602   870C
603   870C E5           Store_Amadeus push hl
604   870D D5           	push de
605   870E C5            	push bc
606   870F 21 E4 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
607   8712 11 CC 83     	ld de,Amadeus_db
608   8715 01 38 00     	ld bc,56
609   8718 ED B0        	ldir
610   871A C1           	pop bc
611   871B D1           	pop de
612   871C E1           	pop hl
613   871D C9           	ret
614   871E
615   871E              ; **************************************************************************************************
616   871E
617   871E              ; Teclado.
618   871E
619   871E 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
620   8720 DB FE        	in a,($fe)
621   8722 E6 01        	and $01
622   8724 28 02        	jr z,1f
623   8726 18 F6        	jr Pulsa_ENTER
624   8728 C9           1 ret
625   8729
626   8729              ; **************************************************************************************************
627   8729              ;
628   8729              ; Temporización.
629   8729
630   8729              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
631   8729              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
632   8729              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
633   8729              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
634   8729
635   8729              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
636   8729              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
637   8729              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
638   8729
639   8729              ; A partir de $4f61 no hace falta DELAY.
640   8729
641   8729              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
642   8729
643   8729 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
644   872C 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
645   872D 78           	LD A,B
646   872E A7           	AND A
647   872F 20 FB        	JR NZ,wait
648   8731 C9           	RET
649   8732
650   8732              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651   8732              ;
652   8732              ;	21/4/22
653   8732
654   8732              Movimiento_Amadeus
655   8732
656   8732 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
657   8734 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
658   8736 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
659   8738 CC 62 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
660   873B 3E F7        	ld a,$f7
661   873D DB FE        	in a,($fe)
662   873F E6 01        	and $01
663   8741 C8           	ret z
664   8742 3E F7        	ld a,$f7
665   8744 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
666   8746 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
667   8748 CC 61 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
668   874B C9               ret
669   874C
670   874C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
671   874C
672   874C              ; Pinta indicadores de FILAS. ------------------------------------------------------
673   874C
674   874C 21 10 40     Pinta_FILAS ld hl,$4010
675   874F              ;	ld b,9
676   874F              ;2 push hl
677   874F              ;	push bc
678   874F 06 BF        	ld b,$bf
679   8751 36 80        1 ld (hl),%10000000
680   8753 CD 5B 8A     	call NextScan
681   8756 10 F9        	djnz 1B
682   8758              ;	pop bc
683   8758              ;	pop hl
684   8758              ;	inc l
685   8758              ;	djnz 2B
686   8758 06 03        	ld b,3
687   875A 21 00 47         ld hl,$4700
688   875D CD 63 87     3 call Bucle_1
689   8760 10 FB            djnz 3B
690   8762 C9               ret
691   8763
692   8763 C5           Bucle_1 push bc
693   8764 E5                   push hl
694   8765 D1                   pop de
695   8766 13                   inc de
696   8767 01 FF 00             ld bc,255
697   876A 36 FF                ld (hl),255
698   876C ED B0                ldir
699   876E 23                   inc hl
700   876F 3E 07                ld a,7
701   8771 84                   add a,h
702   8772 67                   ld h,a
703   8773 C1                   pop bc
704   8774 C9                   ret
705   8775
706   8775              ; ---------------------------------------------------------------
707   8775
708   8775              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8775              ; ******************************************************************************************************************************************************************************************
  2+  8775              ;
  3+  8775              ; 01/23
  4+  8775              ;
  5+  8775              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8775
  7+  8775 CD 4F 8A     Draw call Prepara_draw
  8+  8778 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8779 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  877A 28 05        	jr z,2F
 11+  877C 3A F8 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  877F 18 0C        	jr 1F
 13+  8781 2A F6 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8784 22 E6 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8787 CD 16 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  878A              ;													; _la esquina superior izquierda de la pantalla.
 17+  878A CD F8 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  878D 3A 0F 85     1 ld a,(Ctrl_0)
 19+  8790 CB 6F        	bit 5,a
 20+  8792 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8794
 22+  8794 CD AC 87     	call Comprueba_limite_horizontal
 23+  8797 CD 3C 88     	call Comprueba_limite_vertical
 24+  879A
 25+  879A              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  879A
 27+  879A CD 89 89     3 call calcula_CColumnass
 28+  879D CD C0 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  87A0 CD 15 8A     	call Define_rutina_de_impresion
 30+  87A3
 31+  87A3 3A 0F 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  87A6 CB AF        	res 5,a											; _a ser de utilidad.
 33+  87A8 32 0F 85     	ld (Ctrl_0),a
 34+  87AB
 35+  87AB C9           	ret
 36+  87AC
 37+  87AC              ; *******************************************************************************************************************************************************************************************
 38+  87AC              ;	21/01/23
 39+  87AC              ;
 40+  87AC              ; 	Comprueba_limite_horizontal.
 41+  87AC              ;
 42+  87AC              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  87AC              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  87AC              ;
 45+  87AC              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  87AC              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  87AC              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  87AC              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  87AC
 50+  87AC
 51+  87AC
 52+  87AC 3A 0F 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  87AF CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  87B1 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  87B3 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  87B5 32 0F 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  87B8 18 09            jr 6F
 58+  87BA CB 5F        1 bit 3,a
 59+  87BC 28 0A            jr z,2F
 60+  87BE E6 F7            and $f7
 61+  87C0 32 0F 85         ld (Ctrl_0),a
 62+  87C3 CD 16 89     6 call Inicializacion
 63+  87C6 18 5B            jr 5F
 64+  87C8 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87C9
 66+  87C9              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87C9              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87C9
 69+  87C9 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87CA 2A 19 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87CD CD B9 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87D0 67           	ld h,a
 73+  87D1 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87D2 CD B9 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  87D5 67           	ld h,a
 76+  87D6 A7           	and a
 77+  87D7 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  87D9 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  87DA 3A F8 84     	ld a,(Cuad_objeto)
 80+  87DD FE 02        	cp 2
 81+  87DF 38 1E        	jr c,3F
 82+  87E1 28 1C        	jr z,3F
 83+  87E3 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  87E4 28 23            jr z,7F
 85+  87E6 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  87E8 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  87EA E1           	pop hl
 88+  87EB
 89+  87EB              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  87EB              ; _para indicar con E="2" en caso necesario.
 91+  87EB
 92+  87EB E5               push hl
 93+  87EC C5               push bc
 94+  87ED CD B9 8C     	call calcula_tercio
 95+  87F0 FE 01        	cp 1
 96+  87F2 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  87F4 CD 24 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87F7 28 26            jr z,9F
 99+  87F9 38 24            jr c,9F
100+  87FB 1E 00        11 ld e,0
101+  87FD 18 22            jr 8F
102+  87FF 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  8800 28 07        	jr z, 7F
104+  8802 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  8804 1E 00         	ld e,0
106+  8806 E1           	pop hl
107+  8807 18 04        	jr 4F
108+  8809 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  880B 18 15            jr 10F
110+  880D
111+  880D              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  880D              ; _para indicar con E="2" en caso necesario.
113+  880D
114+  880D E5           4 push hl
115+  880E C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  880F CD B9 8C     	call calcula_tercio
117+  8812 FE 01        	cp 1
118+  8814 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  8816 CD 24 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8819 28 04            jr z,9F
121+  881B 30 02            jr nc,9F
122+  881D 18 02        	jr 8F
123+  881F 1E 02        9 ld e,2
124+  8821 C1           8 pop bc
125+  8822 E1           10 pop hl
126+  8823 C9           5 ret
127+  8824
128+  8824              ; --------------------
129+  8824              ;
130+  8824              ; 25/08/22
131+  8824
132+  8824 CD B9 8C     Comprueba_centro call calcula_tercio
133+  8827 67               ld h,a
134+  8828 08           	ex af,af
135+  8829 FE 02        	cp 2
136+  882B 38 07        	jr c,1F
137+  882D 28 05        	jr z,1F
138+  882F 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  8832 18 03        	jr 2F
140+  8834 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  8837 08           2 ex af,af
142+  8838 A7               and a
143+  8839 ED 42            sbc hl,bc
144+  883B C9               ret
145+  883C
146+  883C              ; *********************************************************************************************************************************************************************************************
147+  883C              ;
148+  883C              ;   16/8/22
149+  883C              ;
150+  883C              ;	Comprueba_limite_vertical
151+  883C              ;
152+  883C              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  883C              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  883C              ;
155+  883C
156+  883C 2A E6 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  883F 7D           	ld a,l
158+  8840 E6 1F        	and $1F
159+  8842 57           	ld d,a
160+  8843 3A 1B 85     	ld a,(Limite_vertical)
161+  8846 BA           	cp d 											; Límite - Posición.
162+  8847 08           	ex af,af 										; Resultado de CP d en F'.
163+  8848 3A F8 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  884B CB 47        	bit 0,a
165+  884D 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  884F
167+  884F              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  884F
169+  884F 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  8850 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  8852
172+  8852              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  8852              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  8852
175+  8852 3A EB 84         ld a,(Coordenada_X)
176+  8855 16 0F            ld d,Centro_izquierda
177+  8857 A7               and a
178+  8858 92               sub d 											 ; Posición - Centro_izquierda.
179+  8859 28 1E            jr z,3F
180+  885B 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  885D              ;                                                    ; _salimos sin modificar nada.
182+  885D 18 0E            jr 2F
183+  885F 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  8860 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  8862
186+  8862              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  8862              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  8862
189+  8862 3A EB 84         ld a,(Coordenada_X)
190+  8865 16 10            ld d,Centro_derecha
191+  8867 A7               and a
192+  8868 92               sub d
193+  8869 28 0E            jr z,3F
194+  886B 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  886D              ;                                                    ; _salimos sin modificar nada.
196+  886D CB 43        2 bit 0,e
197+  886F 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8871 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  8872 CD 06 89         call Modificaccionne
200+  8875 C1           	pop bc
201+  8876 CD 16 89         call Inicializacion
202+  8879 C9           3 ret 				 								 ; Salimos de la rutina.
203+  887A
204+  887A              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  887A
206+  887A C5           4 push bc
207+  887B 01 E5 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  887E 0A           	ld a,(bc)
209+  887F 3D           	dec a
210+  8880 47           	ld b,a 											 ; Columnas-1 en B.
211+  8881 7D           	ld a,l
212+  8882 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  8883 CB 47        	bit 0,a
214+  8885 28 03        	jr z,5F
215+  8887 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8888 18 2E        	jr 7F
217+  888A
218+  888A              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  888A
220+  888A 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  888B F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  888C 3A 0F 85     	ld a,(Ctrl_0)
223+  888F CB 4F        	bit 1,a
224+  8891 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8893 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8894
227+  8894              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8894
229+  8894 1C               inc e
230+  8895 1D               dec e
231+  8896 20 07            jr nz,12F
232+  8898 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8899 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  889A 22 E6 84     	ld (Posicion_actual),hl
235+  889D 18 44        13 jr 9F
236+  889F CB 43        12 bit 0,e
237+  88A1 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  88A3              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  88A3 C1           	pop bc
240+  88A4 18 D3        	jr 3B
241+  88A6 80           14 add b
242+  88A7 6F               ld l,a
243+  88A8 22 E6 84     	ld (Posicion_actual),hl
244+  88AB CD 06 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  88AE 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  88B0 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  88B2 32 0F 85         ld (Ctrl_0),a
248+  88B5 F1           	pop af
249+  88B6 18 2B        	jr 9F
250+  88B8
251+  88B8              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  88B8
253+  88B8 F5           7 push af
254+  88B9 3A 0F 85     	ld a,(Ctrl_0)
255+  88BC CB 47        	bit 0,a
256+  88BE 20 1D        	jr nz,8F
257+  88C0 F1           	pop af
258+  88C1
259+  88C1              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88C1
261+  88C1 1C           	inc e
262+  88C2 1D               dec e
263+  88C3 20 07            jr nz,10F
264+  88C5 90           	sub b
265+  88C6 6F               ld l,a
266+  88C7 22 E6 84     	ld (Posicion_actual),hl
267+  88CA 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88CC              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88CC CB 43        10 bit 0,e
270+  88CE 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88D0              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88D0 C1           	pop bc
273+  88D1 18 A6        	jr 3B
274+  88D3 90           16 sub b
275+  88D4 6F               ld l,a
276+  88D5 22 E6 84     	ld (Posicion_actual),hl
277+  88D8 CD 06 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  88DB 18 06            jr 9F
279+  88DD E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  88DF 32 0F 85         ld (Ctrl_0),a
281+  88E2 F1           	pop af
282+  88E3 C1           9 pop bc
283+  88E4 1E 00        	ld e,0
284+  88E6 CD 16 89         call Inicializacion
285+  88E9 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  88EA 08           	ex af,af
287+  88EB F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  88EC 18 8B            jr 3B
289+  88EE
290+  88EE              ; --------------------
291+  88EE
292+  88EE 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  88F0 CD 6A 8A     1 call PreviousScan
294+  88F3 10 FB            djnz 1B
295+  88F5 22 E6 84     	ld (Posicion_actual),hl
296+  88F8 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88F9 C9           	ret
298+  88FA
299+  88FA              ; --------------------
300+  88FA
301+  88FA 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  88FC CD 5B 8A     1 call NextScan
303+  88FF 10 FB            djnz 1B
304+  8901 22 E6 84     	ld (Posicion_actual),hl
305+  8904 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8905 C9           	ret
307+  8906
308+  8906              ; --------------------
309+  8906              ;
310+  8906              ;	22/01/23
311+  8906              ;
312+  8906              ;	E="1". Hemos cambiado de cuadrante.
313+  8906              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8906              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8906
316+  8906
317+  8906              Modificaccionne
318+  8906
319+  8906 3A F8 84     	ld a,(Cuad_objeto)
320+  8909 FE 02        	cp 2
321+  890B CC EE 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  890E DC EE 88         call c,Modifica_Pos_actual
323+  8911 C8           	ret z
324+  8912 CD FA 88         call Modifica_Pos_actual2
325+  8915 C9               ret
326+  8916
327+  8916              ; *************************************************************************************************************************************************************************************************
328+  8916              ;
329+  8916              ;	13/8/22
330+  8916              ;
331+  8916              ;	Inicializacion
332+  8916              ;
333+  8916              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  8916              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  8916              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  8916              ;
337+  8916              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  8916              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  8916              ;	_ desaparece/aparece.
340+  8916
341+  8916              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  8916              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  8916              ;
344+  8916              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  8916              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  8916              ; 		   [E] ="0"
347+  8916
348+  8916              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  8916
350+  8916 CD B9 8C     Inicializacion call calcula_tercio
351+  8919 28 36        	jr z,primit
352+  891B E6 02        	and 2
353+  891D 20 07        	jr nz,segmit
354+  891F 7D           	ld a,l
355+  8920 FE 7F        	cp $7f
356+  8922 38 2D        	jr c,primit
357+  8924 28 2B        	jr z,primit
358+  8926 CD 83 89     segmit call column
359+  8929 38 13        	jr c,tercuad
360+  892B 3E 04        cuarcuad ld a,4
361+  892D 32 F8 84     	ld (Cuad_objeto),a
362+  8930 21 20 48     	ld hl,$4820
363+  8933 22 19 85     	ld (Limite_horizontal),hl
364+  8936 21 1B 85     	ld hl,Limite_vertical
365+  8939 36 0D        	ld (hl),$0d
366+  893B 08           	ex af,af
367+  893C 18 3C        	jr 1F
368+  893E              tercuad
369+  893E              ;	call Fija_punteros
370+  893E 3E 03        	ld a,3
371+  8940 32 F8 84     	ld (Cuad_objeto),a
372+  8943 21 20 48     	ld hl,$4820
373+  8946 22 19 85     	ld (Limite_horizontal),hl
374+  8949 21 1B 85     	ld hl,Limite_vertical
375+  894C 36 12        	ld (hl),$12
376+  894E 08           	ex af,af
377+  894F 18 29        	jr 1F
378+  8951 CD 83 89     primit call column
379+  8954 38 13        	jr c, primcuad
380+  8956              segcuad
381+  8956              ;	call Fija_punteros
382+  8956 3E 02        	ld a,2
383+  8958 32 F8 84     	ld (Cuad_objeto),a
384+  895B 21 C0 4F     	ld hl,$4fc0
385+  895E 22 19 85     	ld (Limite_horizontal),hl
386+  8961 21 1B 85     	ld hl,Limite_vertical
387+  8964 36 0D        	ld (hl),$0d
388+  8966 08           	ex af,af
389+  8967 18 11        	jr 1F
390+  8969              primcuad
391+  8969              ;	call Fija_punteros
392+  8969 3E 01        	ld a,1
393+  896B 32 F8 84     	ld (Cuad_objeto),a
394+  896E 21 C0 4F     	ld hl,$4fc0
395+  8971 22 19 85     	ld (Limite_horizontal),hl
396+  8974 21 1B 85     	ld hl,Limite_vertical
397+  8977 36 12        	ld (hl),$12
398+  8979 08           	ex af,af
399+  897A CD E5 8F     1 call Genera_coordenadas
400+  897D 21 0F 85     	ld hl,Ctrl_0
401+  8980 CB EE        	set 5,(hl)
402+  8982 C9           	ret
403+  8983
404+  8983              ; ------------------------------------------------------------------------------------------------------------------
405+  8983
406+  8983              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  8983              ;
408+  8983              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  8983
410+  8983 7D           column ld a,l
411+  8984 E6 1F        	and $1f
412+  8986 FE 10         	cp $10
413+  8988 C9            	ret
414+  8989
415+  8989              ; --------------------------------------------------------------------------------------------------------------------
416+  8989              ;
417+  8989              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  8989              ;
419+  8989              ; 14/12/22
420+  8989              ;
421+  8989              ;	Modifica: A y BC.
422+  8989
423+  8989 3A F8 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  898C E6 01        	and 1
425+  898E 28 17        	jr z,1F
426+  8990
427+  8990              ; Nos encontramos en la parte izquierda de la pantalla
428+  8990
429+  8990 3A EB 84     	ld a,(Coordenada_X)
430+  8993 47           	ld b,a
431+  8994 04           	inc b											; (Coordenada_X)+1 en B.
432+  8995 79           	ld a,c
433+  8996 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8997 38 08        	jr c,2F
435+  8999 47           	ld b,a
436+  899A 79           	ld a,c
437+  899B 90           	sub b
438+  899C 32 18 85     	ld (Columnas),a
439+  899F 18 1B        	jr 4F
440+  89A1 79           2 ld a,c
441+  89A2 32 18 85     	ld (Columnas),a
442+  89A5 18 15        	jr 4F
443+  89A7
444+  89A7              ; Nos encontramos en la parte derecha de la pantalla.
445+  89A7
446+  89A7 3A EB 84     1 ld a,(Coordenada_X)
447+  89AA 81           	add c
448+  89AB 3D           	dec a
449+  89AC D6 1F        	sub $1f
450+  89AE 38 08        	jr c,3F
451+  89B0 47           	ld b,a
452+  89B1 79           	ld a,c
453+  89B2 90           	sub b
454+  89B3 32 18 85     	ld (Columnas),a
455+  89B6 18 04        	jr 4F
456+  89B8 79           3 ld a,c
457+  89B9 32 18 85     	ld (Columnas),a
458+  89BC D9           4 exx
459+  89BD 4F           	ld c,a
460+  89BE D9           	exx
461+  89BF C9            ret
462+  89C0
463+  89C0              ; --------------------------------------------------------------------------------------------------------------------
464+  89C0              ;
465+  89C0              ; 7/1/23
466+  89C0              ;
467+  89C0              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89C0              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89C0              ;
470+  89C0              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89C0              ;	DESTRUYE: HL,B Y A.
472+  89C0
473+  89C0 3A F8 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89C3 FE 02        	cp 2
475+  89C5 38 18        	jr c,1F
476+  89C7 28 16        	jr z,1F
477+  89C9 E6 01        	and 1
478+  89CB 28 0D        	jr z,3F
479+  89CD
480+  89CD              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89CD
482+  89CD CD 09 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89D0
484+  89D0 7D           9 ld a,l
485+  89D1 E6 1F        	and $1f
486+  89D3 28 2A        	jr z,7F
487+  89D5 2B           	dec hl
488+  89D6 10 F8        	djnz 9B
489+  89D8 18 25        	jr 7F
490+  89DA
491+  89DA              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  89DA
493+  89DA 2A E6 84     3 ld hl,(Posicion_actual)
494+  89DD 18 20        	jr 7F
495+  89DF
496+  89DF 28 14        1 jr z,2F
497+  89E1
498+  89E1              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  89E1
500+  89E1 CD 09 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  89E4 7D           4 ld a,l
502+  89E5 E6 1F        	and $1f
503+  89E7 28 03        	jr z,6F
504+  89E9 2B           	dec hl
505+  89EA 10 F8        	djnz 4B
506+  89EC 06 0F        6 ld b,15
507+  89EE CD 6A 8A     5 call PreviousScan
508+  89F1 10 FB        	djnz 5B
509+  89F3 18 0A        	jr 7F
510+  89F5
511+  89F5              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89F5
513+  89F5 CD 09 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89F8 06 0F        	ld b,15
515+  89FA CD 6A 8A     8 call PreviousScan
516+  89FD 10 FB        	djnz 8B
517+  89FF
518+  89FF E5           7 push hl
519+  8A00 DD E1        	pop ix
520+  8A02
521+  8A02 2A E8 84     	ld hl,(Puntero_objeto)
522+  8A05 E5           	push hl
523+  8A06 FD E1        	pop iy
524+  8A08
525+  8A08 C9           	ret
526+  8A09
527+  8A09              ; --------------------------------------------------------------------------------------------------------------------
528+  8A09              ;
529+  8A09              ;	2/1/23
530+  8A09              ;
531+  8A09              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8A09              ;
533+  8A09              ;	Tras esta rutina tenemos:
534+  8A09              ;
535+  8A09              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8A09              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8A09              ;
538+  8A09              ;	DESTRUYE!!!!! HL,B y A.
539+  8A09
540+  8A09 2A E6 84     Operandos ld hl,(Posicion_actual)
541+  8A0C 3A 18 85     	ld a,(Columnas)
542+  8A0F 3D           	dec a
543+  8A10 20 01        	jr nz,1F
544+  8A12 3C           	inc a
545+  8A13 47           1 ld b,a
546+  8A14 C9           	ret
547+  8A15
548+  8A15              ; --------------------------------------------------------------------------------------------------------------------
549+  8A15              ;
550+  8A15              ;	3/1/23
551+  8A15              ;
552+  8A15              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  8A15              ;
554+  8A15              ;	Destruye: A,B,HL y DE.
555+  8A15
556+  8A15              Define_rutina_de_impresion
557+  8A15
558+  8A15 3A E5 84     	ld a,(Columns)
559+  8A18 47           	ld b,a
560+  8A19 3A 18 85     	ld a,(Columnas)
561+  8A1C B8           	cp b
562+  8A1D 20 0D        	jr nz,2f
563+  8A1F
564+  8A1F              ;	La entidad se imprime entera.
565+  8A1F
566+  8A1F 21 B6 8A     	ld hl, Indice_entidades_completas
567+  8A22 E6 01        	and 1
568+  8A24 28 02        	jr z,1F
569+  8A26
570+  8A26 23           	inc hl
571+  8A27 23           	inc hl
572+  8A28
573+  8A28 CD 90 86     1 call Extrae_address
574+  8A2B C9           	ret		;	ret
575+  8A2C
576+  8A2C              ;	La entidad no se imprime entera en pantalla.
577+  8A2C
578+  8A2C 3A F8 84     2 ld a,(Cuad_objeto)
579+  8A2F E6 01        	and 1
580+  8A31 28 17        	jr z,3F
581+  8A33
582+  8A33              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A33
584+  8A33 21 BA 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A36 3A E5 84     4 ld a,(Columns)
586+  8A39 E6 01        	and 1
587+  8A3B 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A3D
589+  8A3D 23           	inc hl
590+  8A3E 23           	inc hl
591+  8A3F
592+  8A3F 3A 18 85     	ld a,(Columnas)
593+  8A42 E6 01        	and 1
594+  8A44 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A46
596+  8A46 23           	inc hl
597+  8A47 23           	inc hl
598+  8A48
599+  8A48 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A4A
601+  8A4A 21 C0 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A4D 18 E7        	jr 4B
603+  8A4F
604+  8A4F              ; --------------------------------------------------------------------------------------------------------------------
605+  8A4F              ;
606+  8A4F              ;	Prepara_draw
607+  8A4F              ;
608+  8A4F              ;	Es una rutina de carga.
609+  8A4F              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A4F              ;
611+  8A4F              ;	FUNCIONAMIENTO:
612+  8A4F              ;
613+  8A4F              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A4F              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A4F              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A4F              ;
617+  8A4F              ;	DESTRUYE:
618+  8A4F              ;
619+  8A4F              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A4F
621+  8A4F 21 E4 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A52 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A53 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A54 4E           	ld c,(hl)
625+  8A55 2A E6 84     	ld hl,(Posicion_actual)
626+  8A58 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A5A C9           	ret
628+  8A5B
629+  8A5B              ;----------------------------------------------------------------------------------------------------------------
630+  8A5B              ;
631+  8A5B              ;	5/08/22
632+  8A5B              ;
633+  8A5B              ;   NextScan.
634+  8A5B              ;
635+  8A5B              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A5B              ;
637+  8A5B              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A5B              ;
639+  8A5B              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A5B              ;
641+  8A5B              ;       DESTRUIDOS: AF y HL !!!
642+  8A5B              ;
643+  8A5B              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A5B              ;
645+  8A5B
646+  8A5B 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A5C 7C               ld a,h
648+  8A5D E6 07            and 7
649+  8A5F C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A60
651+  8A60 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A61 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A63 6F               ld l,a
654+  8A64 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A65
656+  8A65 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A66 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A68 67               ld h,a
659+  8A69 C9               ret
660+  8A6A
661+  8A6A              ;----------------------------------------------------------------------------------------------------------------
662+  8A6A              ;
663+  8A6A              ;	5/08/22
664+  8A6A              ;
665+  8A6A              ;   PreviousScan.
666+  8A6A              ;
667+  8A6A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A6A              ;
669+  8A6A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A6A              ;
671+  8A6A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A6A              ;
673+  8A6A              ;       DESTRUIDOS: AF y HL !!!
674+  8A6A              ;
675+  8A6A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A6A              ;
677+  8A6A
678+  8A6A 7C           PreviousScan ld a,h
679+  8A6B 25               dec h               ; Dec H.
680+  8A6C E6 07            and 7
681+  8A6E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A6F
683+  8A6F 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A70 D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A72 6F               ld l,a
686+  8A73 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A74
688+  8A74 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A75 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A77 67               ld h,a
691+  8A78 C9               ret
692+  8A79
693+  8A79              ; -----------------------------------------------------------------------------------
694+  8A79              ;
695+  8A79              ;	15/1/23
696+  8A79
697+  8A79              Extrae_foto_registros
698+  8A79
699+  8A79 3A 23 85     	ld a,(Numero_de_malotes)
700+  8A7C A7           	and a
701+  8A7D C8           	ret z
702+  8A7E
703+  8A7E
704+  8A7E ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
705+  8A82 31 00 70     	ld sp,Album_de_fotos
706+  8A85
707+  8A85 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
708+  8A87 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
709+  8A88 D1           	pop de																	; Dirección de la rutina de impresión en DE.
710+  8A89
711+  8A89 ED 73 26 85  	ld (Stack_2),sp
712+  8A8D ED 7B 24 85  	ld sp,(Stack)
713+  8A91
714+  8A91              ; Fabrica la llamada a la correspondiente rutina de impresión.
715+  8A91
716+  8A91 3E CD        	ld a,$cd
717+  8A93 32 9B 8A     	ld (Imprime),a
718+  8A96 EB           	ex de,hl
719+  8A97 22 9C 8A     	ld (Imprime+1),hl
720+  8A9A EB           	ex de,hl
721+  8A9B
722+  8A9B              ; Ejecuta la llamada:	CALL $xx,xx
723+  8A9B
724+  8A9B 00 00 00     Imprime db 0,0,0
725+  8A9E
726+  8A9E ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
727+  8AA2
728+  8AA2 3A 23 85     	ld a,(Numero_de_malotes)
729+  8AA5 3D           	dec a
730+  8AA6 28 09        	jr z,1F
731+  8AA8 32 23 85      	ld (Numero_de_malotes),a
732+  8AAB ED 7B 26 85  	ld sp,(Stack_2)
733+  8AAF 18 D4        	jr 2B
734+  8AB1
735+  8AB1 AF           1 xor a
736+  8AB2 32 26 85     	ld (Stack_2),a
737+  8AB5 C9           	ret
738+  8AB6
739+  8AB6
# file closed: Draw_XOR.asm
709   8AB6              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8AB6              ;   índices de Rutinas de impresión.
  2+  8AB6
  3+  8AB6 C6 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AB8 F3 8A            defw Pinta_Amadeus_3x2
  5+  8ABA
  6+  8ABA 49 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8ABC E9 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8ABE 9D 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AC0
 10+  8AC0 73 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AC2 77 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AC4 2B 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AC6
 14+  8AC6
 15+  8AC6              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AC6              ;
 17+  8AC6              ;   12/12/22
 18+  8AC6              ;
 19+  8AC6              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AC6              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AC6              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AC6              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AC6              ;
 24+  8AC6              ;   Modifica: DE y HL.
 25+  8AC6
 26+  8AC6 ED 73 24 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8ACA FD F9        	ld sp,iy
 28+  8ACC 06 10            ld b,16
 29+  8ACE D1           1 pop de
 30+  8ACF 7B               ld a,e
 31+  8AD0 AE               xor (hl)
 32+  8AD1 77           	ld (hl),a
 33+  8AD2 23           	inc hl
 34+  8AD3 7A               ld a,d
 35+  8AD4 AE               xor (hl)
 36+  8AD5 77           	ld (hl),a
 37+  8AD6 2B           	dec hl
 38+  8AD7 24           	inc h
 39+  8AD8 7C               ld a,h
 40+  8AD9 E6 07            and 7
 41+  8ADB 20 0A            jr nz,2F
 42+  8ADD 7D               ld a,l
 43+  8ADE C6 20            add a,$20
 44+  8AE0 6F               ld l,a
 45+  8AE1 38 04            jr c,2F
 46+  8AE3 7C               ld a,h
 47+  8AE4 D6 08            sub 8
 48+  8AE6 67               ld h,a
 49+  8AE7 7C           2 ld a,h
 50+  8AE8 FE 58            cp $58
 51+  8AEA 28 02            jr z,3F
 52+  8AEC 10 E0            djnz 1B
 53+  8AEE ED 7B 24 85  3 ld sp,(Stack)
 54+  8AF2 C9           	ret
 55+  8AF3
 56+  8AF3 ED 73 24 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8AF7 FD F9        	ld sp,iy
 58+  8AF9 06 08            ld b,8
 59+  8AFB D1           1 pop de
 60+  8AFC 7B               ld a,e
 61+  8AFD AE               xor (hl)
 62+  8AFE 77           	ld (hl),a
 63+  8AFF 23           	inc hl
 64+  8B00 7A               ld a,d
 65+  8B01 AE               xor (hl)
 66+  8B02 77           	ld (hl),a
 67+  8B03 23           	inc hl
 68+  8B04 D1           	pop de
 69+  8B05 7B               ld a,e
 70+  8B06 AE               xor (hl)
 71+  8B07 77           	ld (hl),a
 72+  8B08 2B           	dec hl
 73+  8B09 2B           	dec hl
 74+  8B0A 24           	inc h
 75+  8B0B 7C               ld a,h
 76+  8B0C E6 07            and 7
 77+  8B0E 20 0A            jr nz,2F
 78+  8B10 7D               ld a,l
 79+  8B11 C6 20            add a,$20
 80+  8B13 6F               ld l,a
 81+  8B14 38 04            jr c,2F
 82+  8B16 7C               ld a,h
 83+  8B17 D6 08            sub 8
 84+  8B19 67               ld h,a
 85+  8B1A 7C           2 ld a,h
 86+  8B1B FE 58            cp $58
 87+  8B1D 28 25            jr z,4F
 88+  8B1F 7A               ld a,d
 89+  8B20 AE               xor (hl)
 90+  8B21 77               ld (hl),a
 91+  8B22 D1           	pop de
 92+  8B23 23           	inc hl
 93+  8B24 7B               ld a,e
 94+  8B25 AE               xor (hl)
 95+  8B26 77           	ld (hl),a
 96+  8B27 23           	inc hl
 97+  8B28 7A               ld a,d
 98+  8B29 AE               xor (hl)
 99+  8B2A 77           	ld (hl),a
100+  8B2B 2B           	dec hl
101+  8B2C 2B           	dec hl
102+  8B2D 24           	inc h
103+  8B2E 7C               ld a,h
104+  8B2F E6 07            and 7
105+  8B31 20 0A            jr nz,3F
106+  8B33 7D               ld a,l
107+  8B34 C6 20            add a,$20
108+  8B36 6F               ld l,a
109+  8B37 38 04            jr c,3F
110+  8B39 7C               ld a,h
111+  8B3A D6 08            sub 8
112+  8B3C 67               ld h,a
113+  8B3D 7C           3 ld a,h
114+  8B3E FE 58            cp $58
115+  8B40 28 02            jr z,4F
116+  8B42 10 B7            djnz 1B
117+  8B44 ED 7B 24 85  4 ld sp,(Stack)
118+  8B48 C9           	ret
119+  8B49
120+  8B49              ; ---------------------------------------------------
121+  8B49
122+  8B49 ED 73 24 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B4D FD F9        	ld sp,iy
124+  8B4F 06 10            ld b,16
125+  8B51 D1           1 pop de
126+  8B52 7A           	ld a,d
127+  8B53 AE           	xor (hl)
128+  8B54 77           	ld (hl),a
129+  8B55 24           	inc h
130+  8B56 7C               ld a,h
131+  8B57 E6 07            and 7
132+  8B59 20 0C            jr nz,2F
133+  8B5B 7D               ld a,l
134+  8B5C C6 20            add a,$20
135+  8B5E 6F               ld l,a
136+  8B5F 38 06            jr c,2F
137+  8B61 7C               ld a,h
138+  8B62 D6 08            sub 8
139+  8B64 67               ld h,a
140+  8B65 18 00            jr 2F
141+  8B67 7C           2 ld a,h
142+  8B68 FE 58            cp $58
143+  8B6A 28 02            jr z,3F
144+  8B6C 10 E3            djnz 1B
145+  8B6E ED 7B 24 85  3 ld sp,(Stack)
146+  8B72 C9           	ret
147+  8B73
148+  8B73 ED 73 24 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B77 FD F9        	ld sp,iy
150+  8B79 06 10            ld b,16
151+  8B7B D1           1 pop de
152+  8B7C 7B           	ld a,e
153+  8B7D AE           	xor (hl)
154+  8B7E 77           	ld (hl),a
155+  8B7F 24           	inc h
156+  8B80 7C               ld a,h
157+  8B81 E6 07            and 7
158+  8B83 20 0C            jr nz,2F
159+  8B85 7D               ld a,l
160+  8B86 C6 20            add a,$20
161+  8B88 6F               ld l,a
162+  8B89 38 06            jr c,2F
163+  8B8B 7C               ld a,h
164+  8B8C D6 08            sub 8
165+  8B8E 67               ld h,a
166+  8B8F 18 00            jr 2F
167+  8B91 7C           2 ld a,h
168+  8B92 FE 58            cp $58
169+  8B94 28 02            jr z,3F
170+  8B96 10 E3            djnz 1B
171+  8B98 ED 7B 24 85  3 ld sp,(Stack)
172+  8B9C C9           	ret
173+  8B9D
174+  8B9D              ; ---------------------------------------------------
175+  8B9D
176+  8B9D ED 73 24 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BA1 FD F9        	ld sp,iy
178+  8BA3 06 08            ld b,8
179+  8BA5 D1           1 pop de
180+  8BA6 7A           	ld a,d
181+  8BA7 AE           	xor (hl)
182+  8BA8 77           	ld (hl),a
183+  8BA9 23           	inc hl
184+  8BAA D1           	pop de
185+  8BAB 7B           	ld a,e
186+  8BAC AE           	xor (hl)
187+  8BAD 77           	ld (hl),a
188+  8BAE 2B           	dec hl
189+  8BAF 24            	inc h
190+  8BB0 7C               ld a,h
191+  8BB1 E6 07            and 7
192+  8BB3 20 0A            jr nz,2F
193+  8BB5 7D               ld a,l
194+  8BB6 C6 20            add a,$20
195+  8BB8 6F               ld l,a
196+  8BB9 38 04            jr c,2F
197+  8BBB 7C               ld a,h
198+  8BBC D6 08            sub 8
199+  8BBE 67               ld h,a
200+  8BBF 7C           2 ld a,h
201+  8BC0 FE 58            cp $58
202+  8BC2 28 20            jr z,4F
203+  8BC4 D1               pop de
204+  8BC5 7B           	ld a,e
205+  8BC6 AE           	xor (hl)
206+  8BC7 77           	ld (hl),a
207+  8BC8 23           	inc hl
208+  8BC9 7A           	ld a,d
209+  8BCA AE           	xor (hl)
210+  8BCB 77           	ld (hl),a
211+  8BCC 2B           	dec hl
212+  8BCD 24           	inc h
213+  8BCE 7C               ld a,h
214+  8BCF E6 07            and 7
215+  8BD1 20 0A            jr nz,3F
216+  8BD3 7D               ld a,l
217+  8BD4 C6 20            add a,$20
218+  8BD6 6F               ld l,a
219+  8BD7 38 04            jr c,3F
220+  8BD9 7C               ld a,h
221+  8BDA D6 08            sub 8
222+  8BDC 67               ld h,a
223+  8BDD 7C           3 ld a,h
224+  8BDE FE 58            cp $58
225+  8BE0 28 02            jr z,4F
226+  8BE2 10 C1            djnz 1B
227+  8BE4 ED 7B 24 85  4 ld sp,(Stack)
228+  8BE8 C9           	ret
229+  8BE9
230+  8BE9 ED 73 24 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8BED FD F9        	ld sp,iy
232+  8BEF 06 08            ld b,8
233+  8BF1 D1           1 pop de
234+  8BF2 D1           	pop de
235+  8BF3 7B           	ld a,e
236+  8BF4 AE           	xor (hl)
237+  8BF5 77           	ld (hl),a
238+  8BF6 24            	inc h
239+  8BF7 7C               ld a,h
240+  8BF8 E6 07            and 7
241+  8BFA 20 0A            jr nz,2F
242+  8BFC 7D               ld a,l
243+  8BFD C6 20            add a,$20
244+  8BFF 6F               ld l,a
245+  8C00 38 04            jr c,2F
246+  8C02 7C               ld a,h
247+  8C03 D6 08            sub 8
248+  8C05 67               ld h,a
249+  8C06 7C           2 ld a,h
250+  8C07 FE 58            cp $58
251+  8C09 28 1B            jr z,4F
252+  8C0B D1               pop de
253+  8C0C 7A           	ld a,d
254+  8C0D AE           	xor (hl)
255+  8C0E 77           	ld (hl),a
256+  8C0F 24           	inc h
257+  8C10 7C               ld a,h
258+  8C11 E6 07            and 7
259+  8C13 20 0A            jr nz,3F
260+  8C15 7D               ld a,l
261+  8C16 C6 20            add a,$20
262+  8C18 6F               ld l,a
263+  8C19 38 04            jr c,3F
264+  8C1B 7C               ld a,h
265+  8C1C D6 08            sub 8
266+  8C1E 67               ld h,a
267+  8C1F 7C           3 ld a,h
268+  8C20 FE 58            cp $58
269+  8C22 28 02            jr z,4F
270+  8C24 10 CB            djnz 1B
271+  8C26 ED 7B 24 85  4 ld sp,(Stack)
272+  8C2A C9           	ret
273+  8C2B
274+  8C2B ED 73 24 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C2F FD F9        	ld sp,iy
276+  8C31 06 08            ld b,8
277+  8C33 D1           1 pop de
278+  8C34 7B           	ld a,e
279+  8C35 AE           	xor (hl)
280+  8C36 77           	ld (hl),a
281+  8C37 23           	inc hl
282+  8C38 7A           	ld a,d
283+  8C39 AE           	xor (hl)
284+  8C3A 77           	ld (hl),a
285+  8C3B 2B           	dec hl
286+  8C3C 24             	inc h
287+  8C3D 7C               ld a,h
288+  8C3E E6 07            and 7
289+  8C40 20 0A            jr nz,2F
290+  8C42 7D               ld a,l
291+  8C43 C6 20            add a,$20
292+  8C45 6F               ld l,a
293+  8C46 38 04            jr c,2F
294+  8C48 7C               ld a,h
295+  8C49 D6 08            sub 8
296+  8C4B 67               ld h,a
297+  8C4C 7C           2 ld a,h
298+  8C4D FE 58            cp $58
299+  8C4F 28 21            jr z,4F
300+  8C51 D1               pop de
301+  8C52 7A           	ld a,d
302+  8C53 AE           	xor (hl)
303+  8C54 77           	ld (hl),a
304+  8C55 23           	inc hl
305+  8C56 D1               pop de
306+  8C57 7B           	ld a,e
307+  8C58 AE           	xor (hl)
308+  8C59 77           	ld (hl),a
309+  8C5A 2B           	dec hl
310+  8C5B 24           	inc h
311+  8C5C 7C               ld a,h
312+  8C5D E6 07            and 7
313+  8C5F 20 0A            jr nz,3F
314+  8C61 7D               ld a,l
315+  8C62 C6 20            add a,$20
316+  8C64 6F               ld l,a
317+  8C65 38 04            jr c,3F
318+  8C67 7C               ld a,h
319+  8C68 D6 08            sub 8
320+  8C6A 67               ld h,a
321+  8C6B 7C           3 ld a,h
322+  8C6C FE 58            cp $58
323+  8C6E 28 02            jr z,4F
324+  8C70 10 C1            djnz 1B
325+  8C72 ED 7B 24 85  4 ld sp,(Stack)
326+  8C76 C9           	ret
327+  8C77
328+  8C77 ED 73 24 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C7B FD F9        	ld sp,iy
330+  8C7D 06 08            ld b,8
331+  8C7F D1           1 pop de
332+  8C80 7B           	ld a,e
333+  8C81 AE           	xor (hl)
334+  8C82 77           	ld (hl),a
335+  8C83 24            	inc h
336+  8C84 7C               ld a,h
337+  8C85 E6 07            and 7
338+  8C87 20 0A            jr nz,2F
339+  8C89 7D               ld a,l
340+  8C8A C6 20            add a,$20
341+  8C8C 6F               ld l,a
342+  8C8D 38 04            jr c,2F
343+  8C8F 7C               ld a,h
344+  8C90 D6 08            sub 8
345+  8C92 67               ld h,a
346+  8C93 7C           2 ld a,h
347+  8C94 FE 58            cp $58
348+  8C96 28 1C            jr z,4F
349+  8C98 D1               pop de
350+  8C99 7A           	ld a,d
351+  8C9A AE           	xor (hl)
352+  8C9B 77           	ld (hl),a
353+  8C9C 24           	inc h
354+  8C9D 7C               ld a,h
355+  8C9E E6 07            and 7
356+  8CA0 20 0A            jr nz,3F
357+  8CA2 7D               ld a,l
358+  8CA3 C6 20            add a,$20
359+  8CA5 6F               ld l,a
360+  8CA6 38 04            jr c,3F
361+  8CA8 7C               ld a,h
362+  8CA9 D6 08            sub 8
363+  8CAB 67               ld h,a
364+  8CAC 7C           3 ld a,h
365+  8CAD FE 58            cp $58
366+  8CAF 28 03            jr z,4F
367+  8CB1 D1               pop de
368+  8CB2 10 CB            djnz 1B
369+  8CB4 ED 7B 24 85  4 ld sp,(Stack)
370+  8CB8 C9           	ret
371+  8CB9
372+  8CB9              ; ---------------------------------------------------
373+  8CB9
# file closed: Rutinas_de_impresion_sprites.asm
710   8CB9              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CB9              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CB9              ;
  3+  8CB9              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CB9              ;
  5+  8CB9              ; *****************************************************************************************************************************************************************************************
  6+  8CB9              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CB9
  8+  8CB9 7C           calcula_tercio ld a,h
  9+  8CBA E6 18        	and $18
 10+  8CBC CB 2F        	sra a
 11+  8CBE CB 2F        	sra a
 12+  8CC0 CB 2F        	sra a
 13+  8CC2 C9           	ret
 14+  8CC3
# file closed: calcula_tercio.asm
711   8CC3              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CC3              ; -----------------------------------------------------------------------------------------
  2+  8CC3              ;
  3+  8CC3              ;   04/11/22
  4+  8CC3              ;
  5+  8CC3              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CC3              ;
  7+  8CC3              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CC3              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CC3              ;
 10+  8CC3              ;   DESTRUYE: HL y A. !!!!!
 11+  8CC3
 12+  8CC3 CD B9 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CC6 26 58            ld h,$58
 14+  8CC8 84               add h
 15+  8CC9 67               ld h,a
 16+  8CCA C9               ret
# file closed: Calcula_direccion_atributos.asm
712   8CCB              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CCB              ; ********** **********
  2+  8CCB              ;
  3+  8CCB              ;   5/11/22
  4+  8CCB              ;
  5+  8CCB              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CCB              ;
  7+  8CCB              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CCB              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CCB              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CCB              ;
 11+  8CCB              ;   NO DESTROYERSSSS !!!!!
 12+  8CCB
 13+  8CCB E5           Define_atributos push hl
 14+  8CCC C5           	push bc
 15+  8CCD D5           	push de
 16+  8CCE
 17+  8CCE CD C3 8C     	call Calcula_direccion_atributos
 18+  8CD1
 19+  8CD1 D9               exx
 20+  8CD2 E5               push hl
 21+  8CD3 D9               exx
 22+  8CD4 D1               pop de
 23+  8CD5
 24+  8CD5 42               ld b,d
 25+  8CD6 7B               ld a,e 									; (Attr) en A.
 26+  8CD7
 27+  8CD7 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8CD8 E5            	push hl 								; Guardo dirección de attr.
 29+  8CD9
 30+  8CD9              ; -----
 31+  8CD9
 32+  8CD9 77           2 ld (hl),a
 33+  8CDA 0D           	dec c 									; Decremento (Columnas).
 34+  8CDB 28 03        	jr z,1F
 35+  8CDD 23           	inc hl
 36+  8CDE 18 F9        	jr 2B
 37+  8CE0
 38+  8CE0 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8CE1 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8CE2
 41+  8CE2 05           	dec b									; Decremento (Filas).
 42+  8CE3 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8CE5
 44+  8CE5 11 20 00     	ld de,32
 45+  8CE8 A7           	and a
 46+  8CE9 ED 5A        	adc hl,de
 47+  8CEB 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8CED
 49+  8CED D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8CEE C1           	pop bc
 51+  8CEF E1           	pop hl
 52+  8CF0
 53+  8CF0 C9           	ret
 54+  8CF1
# file closed: Define_atributos.asm
713   8CF1              	include "Cls.asm"
# file opened: Cls.asm
  1+  8CF1              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8CF1              ;
  3+  8CF1              ;
  4+  8CF1              ;	CLS.
  5+  8CF1              ;
  6+  8CF1              ;	Limpia la pantalla y define sus atributos.
  7+  8CF1              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8CF1              ;
  9+  8CF1              ;	COLORES: 0 ..... NEGRO
 10+  8CF1              ;    		 1 ..... AZUL
 11+  8CF1              ; 			 2 ..... ROJO
 12+  8CF1              ;			 3 ..... MAGENTA
 13+  8CF1              ; 			 4 ..... VERDE
 14+  8CF1              ; 			 5 ..... CIAN
 15+  8CF1              ;			 6 ..... AMARILLO
 16+  8CF1              ; 			 7 ..... BLANCO
 17+  8CF1              ;
 18+  8CF1              ;	INPUT: A contiene los atributos de pantalla.
 19+  8CF1              ;
 20+  8CF1              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8CF1
 22+  8CF1
 23+  8CF1 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8CF4 11 01 40     	LD DE,$4001
 25+  8CF7 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CFA 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8CFC ED B0        	LDIR
 28+  8CFE 01 FF 02     	LD BC,767
 29+  8D01 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D02 ED B0        	LDIR
 31+  8D04 C9           	ret
 32+  8D05
# file closed: Cls.asm
714   8D05              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D05              ; ******************************************************************************************************************************************************************************************
  2+  8D05              ;
  3+  8D05              ;   22/01/23
  4+  8D05              ;
  5+  8D05              ;	Mov_down
  6+  8D05              ;
  7+  8D05              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D05              ;
  9+  8D05              ;
 10+  8D05 21 0F 85     Mov_down ld hl,Ctrl_0
 11+  8D08 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D0A              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D0A              ; 																	; _ en el caso de que no lo haya.
 14+  8D0A 3A FC 84     	ld a,(Vel_down)
 15+  8D0D 47           	ld b,a
 16+  8D0E 2A E6 84         ld hl,(Posicion_actual)
 17+  8D11 CD B9 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D14 E6 02        	and 2
 19+  8D16 28 0F        	jr z,1F
 20+  8D18
 21+  8D18              ; Nos encontramos en el último tercio de pantalla.
 22+  8D18              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D18
 24+  8D18 7C           	ld a,h
 25+  8D19 FE 57        	cp $57
 26+  8D1B 20 0A        	jr nz,1F
 27+  8D1D 7D           	ld a,l
 28+  8D1E C6 20        	add $20
 29+  8D20 30 05        	jr nc,1F
 30+  8D22              ; ------------------------------
 31+  8D22 CD CF 8F     	call Reaparece_arriba
 32+  8D25              ;	call Reinicio
 33+  8D25              ; ------------------------------
 34+  8D25 18 08        	jr 3F
 35+  8D27 CD 5B 8A     1 call NextScan
 36+  8D2A 22 E6 84     	ld (Posicion_actual),hl
 37+  8D2D 10 E2            djnz 2B
 38+  8D2F CD E5 8F     3 call Genera_coordenadas
 39+  8D32 C9           	ret
 40+  8D33
 41+  8D33
 42+  8D33              ; ******************************************************************************************************************************************************************************************
 43+  8D33              ;
 44+  8D33              ;   22/01/23
 45+  8D33              ;
 46+  8D33              ;	Mov_up
 47+  8D33              ;
 48+  8D33              ; 	Mueve el Sprite hacia arriba.
 49+  8D33              ;
 50+  8D33              ;
 51+  8D33 21 0F 85     Mov_up ld hl,Ctrl_0
 52+  8D36 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D38              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D38              ; 																		; _ en el caso de que no lo haya.
 55+  8D38 3A FB 84     	ld a,(Vel_up)
 56+  8D3B 47           	ld b,a
 57+  8D3C 2A E6 84     	ld hl,(Posicion_actual)
 58+  8D3F CD B9 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D42 A7           	and a
 60+  8D43 20 10        	jr nz,1F
 61+  8D45
 62+  8D45              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D45              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D45
 65+  8D45 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D46 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D48 20 0B            jr nz,1F
 68+  8D4A 7D               ld a,l
 69+  8D4B D6 20            sub $20
 70+  8D4D 30 06            jr nc,1F
 71+  8D4F 25               dec h
 72+  8D50
 73+  8D50              ; -----------------------------
 74+  8D50 CD BF 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D53              ;	call Reinicio
 76+  8D53              ; -----------------------------
 77+  8D53
 78+  8D53 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D55 CD 6A 8A     1 call PreviousScan
 80+  8D58 22 E6 84     	ld (Posicion_actual),hl
 81+  8D5B 10 E2            djnz 3B
 82+  8D5D CD E5 8F     2 call Genera_coordenadas
 83+  8D60 C9           	ret
 84+  8D61
 85+  8D61              ; ******************************************************************************************************************************************************************************************
 86+  8D61              ;
 87+  8D61              ;	19/10/22
 88+  8D61              ;
 89+  8D61              ;	Mov_right.
 90+  8D61              ;
 91+  8D61              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D61              ;
 93+  8D61
 94+  8D61 21 0F 85     Mov_right ld hl,Ctrl_0
 95+  8D64 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D66              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D66              ; 																	; _ en el caso de que no lo haya.
 98+  8D66 3A EA 84     	ld a,(CTRL_DESPLZ)
 99+  8D69 A7           	and a
100+  8D6A 28 0B        	jr z,9F
101+  8D6C
102+  8D6C 3A 0F 85     	ld a,(Ctrl_0)
103+  8D6F CB 7F        	bit 7,a
104+  8D71 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D73 21 EA 84     	ld hl,CTRL_DESPLZ
106+  8D76 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D77
108+  8D77 3A 0F 85     9 ld a,(Ctrl_0)
109+  8D7A CB 77        	bit 6,a
110+  8D7C 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D7E
112+  8D7E CD 7E 8F     	call Stop_Amadeus_right
113+  8D81 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D82 18 4D        	jr 8F
115+  8D84
116+  8D84 3A EB 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D87 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D89 20 46        	jr nz,8F
119+  8D8B
120+  8D8B 3A EA 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D8E A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D8F 28 40        	jr z,8F
123+  8D91
124+  8D91              ; ---------- ---------- ----------
125+  8D91              ;
126+  8D91              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D91
128+  8D91 3A FA 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D94 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D96 28 11        	jr z,1F
131+  8D98 38 06        	jr c,6F
132+  8D9A FE 04        	cp 4
133+  8D9C 28 14        	jr z,7F
134+  8D9E 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8DA0
136+  8DA0              ; ---------- ---------- ----------
137+  8DA0              ;
138+  8DA0              ; Perfiles de velocidad
139+  8DA0              ;
140+  8DA0
141+  8DA0 3A EA 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
142+  8DA3 FE FE        	cp $fe
143+  8DA5 20 2A        	jr nz,8F
144+  8DA7 18 10        	jr 3F
145+  8DA9 3A EA 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
146+  8DAC FE FD        	cp $fd
147+  8DAE 20 21        	jr nz,8F
148+  8DB0 18 07        	jr 3F
149+  8DB2 3A EA 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
150+  8DB5 FE FB        	cp $fb
151+  8DB7 20 18        	jr nz,8F
152+  8DB9
153+  8DB9              ; ---------- ---------- ----------
154+  8DB9
155+  8DB9 CD AD 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
156+  8DBC              ;	call Reinicio
157+  8DBC
158+  8DBC              ; ---------- ---------- ----------
159+  8DBC              ;
160+  8DBC              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
161+  8DBC
162+  8DBC 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
163+  8DBE C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
164+  8DBF CD D8 8D     	call DESPLZ_DER
165+  8DC2 C1           	pop bc
166+  8DC3 10 F9        	djnz 5B
167+  8DC5 2A E6 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
168+  8DC8 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
169+  8DC9 22 E6 84     	ld (Posicion_actual),hl
170+  8DCC CD E5 8F     	call Genera_coordenadas
171+  8DCF 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
172+  8DD1
173+  8DD1              ; ---------- ---------- ----------
174+  8DD1
175+  8DD1 2A E6 84     8 ld hl,(Posicion_actual)
176+  8DD4 CD D8 8D     	call DESPLZ_DER
177+  8DD7 C9           2 ret
178+  8DD8
179+  8DD8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
180+  8DD8              ;
181+  8DD8              ;	22/9/22
182+  8DD8              ;
183+  8DD8
184+  8DD8 CD E7 8D     DESPLZ_DER call Desplaza_derecha
185+  8DDB CD 0A 8E         call modifica_parametros_1er_DESPLZ_2
186+  8DDE CD 33 8E         call Ciclo_completo
187+  8DE1 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
188+  8DE4 CB FE        	set 7,(hl)
189+  8DE6 C9           	ret
190+  8DE7
191+  8DE7              ; ******************************************************************************************************************************************************************************************
192+  8DE7              ;	14/9/22
193+  8DE7              ;
194+  8DE7
195+  8DE7 3A FA 84     Desplaza_derecha ld a,(Vel_right)
196+  8DEA 47           	ld b,a
197+  8DEB 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
198+  8DEE
199+  8DEE 23           1 inc hl
200+  8DEF 23           	inc hl
201+  8DF0 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
202+  8DF2 22 F2 84     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
203+  8DF5 CD 90 86     	call Extrae_address
204+  8DF8 22 E8 84     	ld (Puntero_objeto),hl
205+  8DFB
206+  8DFB              ; Modifica (Puntero_DESPLZ_izq).
207+  8DFB
208+  8DFB 3A FA 84     	ld a,(Vel_right)
209+  8DFE 47           	ld b,a
210+  8DFF 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
211+  8E02 23           1 inc hl
212+  8E03 23           	inc hl
213+  8E04 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
214+  8E06 22 F4 84     	ld (Puntero_DESPLZ_izq),hl 										; _por el índice del Sprite.
215+  8E09
216+  8E09 C9           	ret
217+  8E0A
218+  8E0A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8E0A              ;
220+  8E0A              ;	24/7/22
221+  8E0A              ;
222+  8E0A              ;	modifica_parametros_1er_DESPLZ_2
223+  8E0A              ;
224+  8E0A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8E0A              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8E0A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8E0A
228+  8E0A 3A EA 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8E0D A7           	and a
230+  8E0E 20 1F        	jr nz,1F
231+  8E10 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8E12 32 EA 84         ld (CTRL_DESPLZ),a
233+  8E15 21 E5 84     	ld hl,Columns
234+  8E18 34           	inc (hl)
235+  8E19 3A F8 84     	ld a,(Cuad_objeto)
236+  8E1C E6 01        	and 1
237+  8E1E 28 0F        	jr z,1F
238+  8E20 2A E6 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
239+  8E23 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
240+  8E24 22 E6 84     	ld (Posicion_actual),hl
241+  8E27 CD E5 8F     	call Genera_coordenadas
242+  8E2A CD 8A 8F     	call Inc_CTRL_DESPLZ
243+  8E2D 18 03        	jr 2F
244+  8E2F CD 8A 8F     1 call Inc_CTRL_DESPLZ
245+  8E32 C9           2 ret
246+  8E33
247+  8E33              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8E33              ;
249+  8E33              ;	24/7/22
250+  8E33              ;
251+  8E33              ;	Ciclo_completo.
252+  8E33              ;
253+  8E33              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
254+  8E33              ;
255+  8E33              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
256+  8E33              ; 	Decrementamos (Columns).
257+  8E33              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
258+  8E33              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
259+  8E33
260+  8E33
261+  8E33 3A EA 84     Ciclo_completo ld a,(CTRL_DESPLZ)
262+  8E36 FE FF        	cp $ff
263+  8E38 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
264+  8E3A 18 25        	jr 3f
265+  8E3C 21 E5 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
266+  8E3F 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
267+  8E40 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
268+  8E41 32 EA 84     	ld (CTRL_DESPLZ),a
269+  8E44 3A F8 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
270+  8E47 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
271+  8E49 20 0A        	jr nz,2F
272+  8E4B 2A E6 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
273+  8E4E 23           	inc hl
274+  8E4F 22 E6 84     	ld (Posicion_actual),hl
275+  8E52 CD E5 8F     	call Genera_coordenadas
276+  8E55
277+  8E55              ; Inicia el puntero de Sprite.
278+  8E55
279+  8E55 2A EE 84     2 ld hl,(Indice_Sprite_der)
280+  8E58 22 F2 84     	ld (Puntero_DESPLZ_der),hl
281+  8E5B CD 90 86     	call Extrae_address
282+  8E5E 22 E8 84     	ld (Puntero_objeto),hl
283+  8E61
284+  8E61 C9           3 ret
285+  8E62
286+  8E62              ; ******************************************************************************************************************************************************************************************
287+  8E62              ;
288+  8E62              ;	21/01/23
289+  8E62              ;
290+  8E62              ;	Mov_left.
291+  8E62              ;
292+  8E62              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
293+  8E62              ;
294+  8E62              Mov_left
295+  8E62
296+  8E62
297+  8E62              ;	jr $
298+  8E62
299+  8E62 21 0F 85     	ld hl,Ctrl_0
300+  8E65 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
301+  8E67              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
302+  8E67              ; 																	; _ en el caso de que no lo haya.
303+  8E67 3A EA 84     	ld a,(CTRL_DESPLZ)
304+  8E6A A7           	and a
305+  8E6B 20 19        	jr nz,10F
306+  8E6D
307+  8E6D 2A E8 84     	ld hl,(Puntero_objeto)
308+  8E70 22 F4 84     	ld (Puntero_DESPLZ_izq),hl 										; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
309+  8E73
310+  8E73 3A 0F 85     	ld a,(Ctrl_0)
311+  8E76 CB 77        	bit 6,a
312+  8E78 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
313+  8E7A
314+  8E7A CD 84 8F     	call Stop_Amadeus_left
315+  8E7D 20 62        	jr nz,8F
316+  8E7F
317+  8E7F 2A F0 84     	ld hl,(Indice_Sprite_izq) 										; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
318+  8E82 22 F4 84     	ld (Puntero_DESPLZ_izq),hl 										; _de movimiento es hacia la derecha.
319+  8E85 C9           	ret
320+  8E86
321+  8E86 3A 0F 85     10 ld a,(Ctrl_0)
322+  8E89 CB 7F        	bit 7,a
323+  8E8B 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
324+  8E8D 21 EA 84     	ld hl,CTRL_DESPLZ
325+  8E90 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
326+  8E91
327+  8E91 3A EB 84     11 ld a,(Coordenada_X)
328+  8E94 A7           	and a
329+  8E95 20 4A        	jr nz,8F
330+  8E97 3A EA 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
331+  8E9A A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
332+  8E9B 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
333+  8E9D
334+  8E9D              ; ---------- ---------- ----------
335+  8E9D
336+  8E9D 3A F9 84     	ld a,(Vel_left)
337+  8EA0 FE 02        	cp 2
338+  8EA2 28 0F        	jr z,1F
339+  8EA4 38 04        	jr c,6F
340+  8EA6 FE 04        	cp 4
341+  8EA8 28 12        	jr z,7F
342+  8EAA
343+  8EAA              ; ---------- ---------- ----------
344+  8EAA
345+  8EAA 3A EA 84     6 ld a,(CTRL_DESPLZ)
346+  8EAD FE F9        	cp $f9
347+  8EAF 20 30        	jr nz,8F
348+  8EB1 18 10        	jr 4F
349+  8EB3 3A EA 84     1 ld a,(CTRL_DESPLZ)
350+  8EB6 FE FA        	cp $fa
351+  8EB8 20 27        	jr nz,8F
352+  8EBA 18 07        	jr 4F
353+  8EBC 3A EA 84     7 ld a,(CTRL_DESPLZ)
354+  8EBF FE FC        	cp $fc
355+  8EC1 20 1E        	jr nz,8F
356+  8EC3
357+  8EC3              ; ---------- ---------- ----------
358+  8EC3
359+  8EC3              4
360+  8EC3 CD 9B 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
361+  8EC6              ;	call Reinicio
362+  8EC6
363+  8EC6              ; ---------- ---------- ----------
364+  8EC6
365+  8EC6 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
366+  8EC8 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
367+  8EC9 2A E8 84     	ld hl,(Puntero_objeto)
368+  8ECC 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
369+  8ECF CD E8 8E     	call DESPLZ_IZQ
370+  8ED2 C1           	pop bc
371+  8ED3 10 F3        	djnz 5B
372+  8ED5 2A E6 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
373+  8ED8 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
374+  8ED9 22 E6 84     	ld (Posicion_actual),hl
375+  8EDC CD E5 8F     	call Genera_coordenadas
376+  8EDF 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
377+  8EE1
378+  8EE1              ; ---------- ---------- ----------
379+  8EE1
380+  8EE1 2A E6 84     8 ld hl,(Posicion_actual)
381+  8EE4 CD E8 8E     	call DESPLZ_IZQ
382+  8EE7 C9           2 ret
383+  8EE8
384+  8EE8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
385+  8EE8              ;
386+  8EE8              ;	22/9/22
387+  8EE8
388+  8EE8              DESPLZ_IZQ
389+  8EE8
390+  8EE8 CD F7 8E     	call Desplaza_izquierda
391+  8EEB CD 1A 8F         call modifica_parametros_1er_DESPLZ
392+  8EEE CD 3E 8F     	call Ciclo_completo_2
393+  8EF1 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
394+  8EF4 CB BE        	res 7,(hl)
395+  8EF6 C9           	ret
396+  8EF7
397+  8EF7 3A F9 84     Desplaza_izquierda ld a,(Vel_left)
398+  8EFA 47           	ld b,a
399+  8EFB 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
400+  8EFE
401+  8EFE 2B           1 dec hl
402+  8EFF 2B           	dec hl
403+  8F00 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
404+  8F02 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
405+  8F05 CD 90 86     	call Extrae_address
406+  8F08 22 E8 84     	ld (Puntero_objeto),hl
407+  8F0B
408+  8F0B              ; Modifica (Puntero_DESPLZ_der).
409+  8F0B
410+  8F0B 3A F9 84     	ld a,(Vel_left)
411+  8F0E 47           	ld b,a
412+  8F0F 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
413+  8F12
414+  8F12 2B           1 dec hl
415+  8F13 2B           	dec hl
416+  8F14 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
417+  8F16 22 F2 84     	ld (Puntero_DESPLZ_der),hl
418+  8F19
419+  8F19 C9           	ret
420+  8F1A
421+  8F1A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
422+  8F1A              ;
423+  8F1A              ;	modifica_parametros_1er_DESPLZ
424+  8F1A              ;
425+  8F1A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
426+  8F1A              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
427+  8F1A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
428+  8F1A
429+  8F1A 3A EA 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
430+  8F1D A7           	and a
431+  8F1E 20 1A        	jr nz,1F
432+  8F20 21 E5 84     	ld hl,Columns
433+  8F23 34           	inc (hl)
434+  8F24 3A F8 84     	ld a,(Cuad_objeto)
435+  8F27 E6 01        	and 1
436+  8F29 20 0F        	jr nz,1F
437+  8F2B 2A E6 84     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
438+  8F2E 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
439+  8F2F 22 E6 84     	ld (Posicion_actual),hl
440+  8F32 CD E5 8F     	call Genera_coordenadas
441+  8F35 CD 6D 8F     	call Dec_CTRL_DESPLZ
442+  8F38 18 03        	jr 2F
443+  8F3A CD 6D 8F     1 call Dec_CTRL_DESPLZ
444+  8F3D C9           2 ret
445+  8F3E
446+  8F3E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
447+  8F3E              ;
448+  8F3E
449+  8F3E 3A EA 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
450+  8F41 FE F8        	cp $f8
451+  8F43 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
452+  8F45 18 25        	jr 3f
453+  8F47 21 E5 84     1 ld hl,Columns
454+  8F4A 35           	dec (hl)
455+  8F4B AF           	xor a
456+  8F4C 32 EA 84     	ld (CTRL_DESPLZ),a
457+  8F4F 3A F8 84     	ld a,(Cuad_objeto)
458+  8F52 E6 01        	and 1
459+  8F54 28 0A        	jr z,2F
460+  8F56 2A E6 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
461+  8F59 2B           	dec hl
462+  8F5A 22 E6 84     	ld (Posicion_actual),hl
463+  8F5D CD E5 8F     	call Genera_coordenadas
464+  8F60
465+  8F60              ; Inicia el puntero de Sprite.
466+  8F60
467+  8F60 2A F0 84     2 ld hl,(Indice_Sprite_izq)
468+  8F63 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
469+  8F66 CD 90 86     	call Extrae_address
470+  8F69 22 E8 84     	ld (Puntero_objeto),hl
471+  8F6C C9           3 ret
472+  8F6D
473+  8F6D              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8F6D              ;
475+  8F6D              ;	Dec_CTRL_DESPLZ
476+  8F6D              ;
477+  8F6D              ;	Subrutina de [modifica_punteros].
478+  8F6D              ;
479+  8F6D              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
480+  8F6D
481+  8F6D 21 EA 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
482+  8F70 3A F9 84     	ld a,(Vel_left)
483+  8F73 A7           	and a
484+  8F74 28 06        	jr z,1F
485+  8F76 47           	ld b,a
486+  8F77 35           3 dec (hl)
487+  8F78 10 FD        	djnz 3B
488+  8F7A 18 01        	jr 2F
489+  8F7C 35           1 dec (hl)
490+  8F7D C9           2 ret
491+  8F7E
492+  8F7E              ; ---------- ---------- ---------- ---------- ---------- ----------
493+  8F7E              ;
494+  8F7E              ;	19/10/22
495+  8F7E              ;
496+  8F7E              ;	(cp 29) para un Amadeus de 3 Columns.
497+  8F7E              ;	(cp 30)   ""  ""    ""     2 Columns.
498+  8F7E
499+  8F7E 3A EB 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
500+  8F81 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
501+  8F83 C9           	ret
502+  8F84
503+  8F84              ; ---------- ---------- ---------- ---------- ---------- ----------
504+  8F84              ;
505+  8F84              ;	19/10/22
506+  8F84              ;
507+  8F84              ;	(cp 2) para un Amadeus de 3 Columns.
508+  8F84              ;	(cp 1)   ""  ""    ""     2 Columns.
509+  8F84
510+  8F84 3A EB 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
511+  8F87 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
512+  8F89 C9           	ret
513+  8F8A
514+  8F8A              ; ---------- ---------- ---------- ---------- ---------- ----------
515+  8F8A              ;
516+  8F8A              ;	24/7/22
517+  8F8A              ;
518+  8F8A              ;	Inc_CTRL_DESPLZ
519+  8F8A              ;
520+  8F8A              ;	Subrutina de [modifica_punteros].
521+  8F8A              ;
522+  8F8A              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
523+  8F8A
524+  8F8A 21 EA 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
525+  8F8D 3A FA 84     	ld a,(Vel_right)
526+  8F90 A7           	and a
527+  8F91 28 06        	jr z,1F
528+  8F93 47           	ld b,a
529+  8F94 34           3 inc (hl)
530+  8F95 10 FD        	djnz 3B
531+  8F97 18 01        	jr 2F
532+  8F99 34           1 inc (hl)
533+  8F9A C9           2 ret
534+  8F9B
535+  8F9B              ; ---------- ---------- ---------- ---------- ---------- ----------
536+  8F9B
537+  8F9B 2A E6 84     Reaparece_derecha ld hl,(Posicion_actual)
538+  8F9E 01 1F 00     	ld bc,31
539+  8FA1 A7           	and a
540+  8FA2 ED 4A        	adc hl,bc
541+  8FA4 22 E6 84     	ld (Posicion_actual),hl
542+  8FA7 21 0F 85     	ld hl,Ctrl_0														; $xxx1
543+  8FAA CB C6        	set 0,(hl)
544+  8FAC C9           	ret
545+  8FAD
546+  8FAD              ; ---------- ---------- ---------- ---------- ---------- ----------
547+  8FAD
548+  8FAD 2A E6 84     Reaparece_izquierda ld hl,(Posicion_actual)
549+  8FB0 01 1F 00     	ld bc,31
550+  8FB3 A7           	and a
551+  8FB4 ED 42        	sbc hl,bc
552+  8FB6 22 E6 84     	ld (Posicion_actual),hl 											; $xx1x
553+  8FB9 21 0F 85     	ld hl,Ctrl_0
554+  8FBC CB CE        	set 1,(hl)
555+  8FBE C9           	ret
556+  8FBF
557+  8FBF              ; ---------- ---------- ---------- ---------- ---------- ----------
558+  8FBF
559+  8FBF 24           Reaparece_abajo inc h
560+  8FC0 01 E0 17     	ld bc,$17e0
561+  8FC3 A7           	and a
562+  8FC4 ED 4A        	adc hl,bc
563+  8FC6 22 E6 84     	ld (Posicion_actual),hl
564+  8FC9 21 0F 85     	ld hl,Ctrl_0
565+  8FCC CB D6        	set 2,(hl)
566+  8FCE C9           	ret
567+  8FCF
568+  8FCF              ; ---------- ---------- ---------- ---------- ---------- ----------
569+  8FCF
570+  8FCF 01 E0 17     Reaparece_arriba ld bc,$17e0
571+  8FD2 A7           	and a
572+  8FD3 ED 42        	sbc hl,bc
573+  8FD5 22 E6 84     	ld (Posicion_actual),hl
574+  8FD8 21 0F 85     	ld hl,Ctrl_0
575+  8FDB CB DE        	set 3,(hl)
576+  8FDD C9           	ret
577+  8FDE
578+  8FDE              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
579+  8FDE
580+  8FDE 2A F6 84     Reinicio ld hl,(Posicion_inicio)
581+  8FE1 22 E6 84     	ld (Posicion_actual),hl
582+  8FE4 C9           	ret
# file closed: Direcciones.asm
715   8FE5              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FE5              ;	12/12/22
  2+  8FE5              ;
  3+  8FE5              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FE5              ;	Fila superior "0", Columna izquierda "0".
  5+  8FE5              ;
  6+  8FE5              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FE5              ;
  8+  8FE5              ;	Modifica: A
  9+  8FE5
 10+  8FE5 C5           Genera_coordenadas push bc
 11+  8FE6 E5           	push hl
 12+  8FE7 2A E6 84     	ld hl,(Posicion_actual)
 13+  8FEA 7D           	ld a,l
 14+  8FEB E6 1F        	and $1f
 15+  8FED 32 EB 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FF0 CD B9 8C     	call calcula_tercio
 17+  8FF3 47           	ld b,a
 18+  8FF4 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FF5 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FF7 7D           	ld a,l
 21+  8FF8 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FFA 28 05        	jr z,2F
 23+  8FFC 0C           1 inc c
 24+  8FFD D6 20        	sub 32
 25+  8FFF 20 FB        	jr nz,1B
 26+  9001 0C           2 inc c
 27+  9002 04           	inc b
 28+  9003 05           	dec b
 29+  9004 28 04        	jr z,3F
 30+  9006 3E E0        	ld a,$e0
 31+  9008 10 F2        	djnz 1B
 32+  900A 79           3 ld a,c
 33+  900B 3D           	dec a
 34+  900C 32 EC 84     	ld (Coordenada_y),a
 35+  900F E1           	pop hl
 36+  9010 C1           	pop bc
 37+  9011 C9           	ret
# file closed: Genera_coordenadas.asm
716   9012              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9012
  2+  9012
  3+  9012              ;   11/8/22
  4+  9012              ;
  5+  9012              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9012              ;
  7+  9012              ;   Mov_obj.asm
  8+  9012              ;
  9+  9012              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9012              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9012              ;
 12+  9012              ;   Codificación:
 13+  9012              ;
 14+  9012              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9012
 16+  9012 02 10 00     Izquierda db 2,%00010000,0
 17+  9015 02 20 00     Derecha db 2,%00100000,0
 18+  9018 02 80 00     Abajo db 2,%10000000,0
 19+  901B 02 40 00     Arriba db 2,%01000000,0
 20+  901E
 21+  901E 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  9022 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  9026 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  902A 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  902E 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  9032 60 42 60 40
 25+  9036 63
 26+  9037 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  903B 22 A3 80 A0
 27+  903F 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  9043 84 A0 83 A0
 28+  9047 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  904B 80 A3 22 A0
 29+  904F 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  9053 40 60 42 60
 30+  9057 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  905B 06 2F 2F 2F  Derecha_e_izquierda db 6,%00101111,%00101111,%00101111,%00101001,%00011110,0
 31+  905F 29 1E 00
 32+  9062
 33+  9062
 34+  9062 5B 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 35+  9064 12 90        Indice_mov_Izquierda defw Izquierda
 36+  9066 15 90        Indice_mov_Derecha defw Derecha
 37+  9068 18 90        Indice_mov_Abajo defw Abajo
 38+  906A 1B 90        Indice_mov_Arriba defw Arriba
 39+  906C 22 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 40+  906E 26 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 41+  9070 1E 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 42+  9072 2A 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 43+  9074 2E 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 44+  9076
 45+  9076 3A 15 85     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 46+  9079 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 47+  907A 28 02            jr z,1F
 48+  907C 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 49+  907E 3A 16 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 50+  9081 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 51+  9083 32 16 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 52+  9086              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 53+  9086 2A 13 85         ld hl,(Puntero_mov)
 54+  9089 7E               ld a,(hl)
 55+  908A 32 15 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 56+  908D 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 57+  908E 22 13 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 58+  9091
 59+  9091 3A 17 85     Decoder ld a,(Repetimos_db)
 60+  9094 A7               and a
 61+  9095 20 0C            jr nz,12F
 62+  9097 2A 13 85         ld hl,(Puntero_mov)
 63+  909A 7E               ld a,(hl)
 64+  909B A7               and a
 65+  909C 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 66+  909E E6 0F             and $0f
 67+  90A0 32 17 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 68+  90A3              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 69+  90A3 2A 13 85     12 ld hl,(Puntero_mov)
 70+  90A6 CB 7E            bit 7,(hl)
 71+  90A8 28 03            jr z,2F
 72+  90AA CD 05 8D         call Mov_down
 73+  90AD 2A 13 85     2 ld hl, (Puntero_mov)
 74+  90B0 CB 76            bit 6,(hl)
 75+  90B2 28 03            jr z,3F
 76+  90B4 CD 33 8D         call Mov_up
 77+  90B7 2A 13 85     3 ld hl, (Puntero_mov)
 78+  90BA CB 6E            bit 5,(hl)
 79+  90BC 28 03            jr z,4F
 80+  90BE CD 61 8D         call Mov_right
 81+  90C1 2A 13 85     4 ld hl, (Puntero_mov)
 82+  90C4 CB 66            bit 4,(hl)
 83+  90C6 28 03            jr z,5F
 84+  90C8 CD 62 8E         call Mov_left
 85+  90CB
 86+  90CB              ; ---------- --------- --------- ---------- ----------
 87+  90CB
 88+  90CB 3A 17 85     5 ld a,(Repetimos_db)
 89+  90CE A7               and a
 90+  90CF 28 07            jr z,6F
 91+  90D1 3D               dec a
 92+  90D2 32 17 85         ld (Repetimos_db),a
 93+  90D5 28 01            jr z,6f
 94+  90D7 C9           11 ret
 95+  90D8 21 15 85     6 ld hl,Contador_db_mov
 96+  90DB 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 97+  90DC 2A 13 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 98+  90DF 23               inc hl
 99+  90E0 22 13 85         ld (Puntero_mov),hl
100+  90E3 18 F2            jr 11B
101+  90E5 2A 11 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
102+  90E8 3A 16 85         ld a,(Incrementa_puntero)
103+  90EB 47               ld b,a
104+  90EC 23           8 inc hl
105+  90ED 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
106+  90EF 5E               ld e,(hl)
107+  90F0 23               inc hl
108+  90F1 56               ld d,(hl)
109+  90F2 EB               ex de,hl
110+  90F3 22 13 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
111+  90F6 18 DF            jr 11B
112+  90F8
113+  90F8              ; ---------- --------- --------- ---------- ----------
114+  90F8              ;
115+  90F8              ;   11/8/22
116+  90F8              ;
117+  90F8              ;   Prepara_Puntero_mov
118+  90F8
119+  90F8 E5           Prepara_Puntero_mov push hl
120+  90F9 D5               push de
121+  90FA 2A 11 85         ld hl,(Puntero_indice_mov)
122+  90FD 5E               ld e,(hl)
123+  90FE 23               inc hl
124+  90FF 56               ld d,(hl)
125+  9100 EB               ex de,hl
126+  9101 22 13 85         ld (Puntero_mov),hl
127+  9104 D1               pop de
128+  9105 E1               pop hl
129+  9106 C9               ret
130+  9107
131+  9107              ; ---------- --------- --------- ---------- ----------
132+  9107              ;
133+  9107              ;   11/8/22
134+  9107              ;
135+  9107              ;   Reinicia_el_movimiento
136+  9107
137+  9107 CD F8 90     Reinicia_el_movimiento call Prepara_Puntero_mov
138+  910A AF               xor a
139+  910B 32 15 85         ld (Contador_db_mov),a
140+  910E 32 16 85         ld (Incrementa_puntero),a
141+  9111 C3 76 90         jp Movimiento
142+  9114
143+  9114              ; ---------- --------- --------- ---------- ----------
144+  9114
145+  9114
146+  9114
147+  9114
148+  9114
149+  9114
150+  9114
151+  9114
152+  9114
153+  9114
154+  9114
155+  9114
156+  9114
157+  9114
158+  9114
159+  9114
160+  9114
161+  9114
# file closed: Patrones_de_mov.asm
717   9114              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9114              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9114              ;
  3+  9114              ;	3/1/23
  4+  9114              ;
  5+  9114              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9114
  7+  9114              ;	ADC HL,SP	LD (addr),SP
  8+  9114              ;	ADD HL,SP	LD SP,(addr)
  9+  9114              ;	ADD IX,SP	LD SP,nn
 10+  9114              ; 	ADD IY,SP	LD SP,HL
 11+  9114              ;				LD SP,IX
 12+  9114              ;	DEC SP		LD SP,IY
 13+  9114
 14+  9114              ;	EX (SP),HL
 15+  9114              ;	EX (SP),IX
 16+  9114              ;	EX (SP),IY
 17+  9114
 18+  9114              ;	INC SP
 19+  9114
 20+  9114
 21+  9114                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 24 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 28 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 28 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 24 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
718   7FC0
719   7FC0              	SAVESNA "Pruebas.sna", START
720   7FC0
721   7FC0
722   7FC0
# file closed: Banco_de_pruebas.asm
