# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 FF 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 01 90 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B 03 90 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF 05 90 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 FF 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 4F 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 95 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 08 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 37 86      	call Inicia_Puntero_objeto
210   853A CD EC 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 54 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 08 86     	call Inicia_punteros_de_entidades
219   8549 CD 83 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD EC 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ; ----------------------------------------------------------------------
243   8560
244   8560 21 00 70     	ld hl,Album_de_fotos
245   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8566 3A 0E 85         ld a,(Numero_de_entidades)
248   8569 47               ld b,a
249   856A
250   856A C5           2 push bc
251   856B CD 97 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
252   856E 3A F5 84      	ld a,(Ctrl_0)
253   8571 CB 67        	bit 4,a
254   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
255   8575
256   8575              ; ---------
257   8575
258   8575 CD CB 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8578 21 F5 84     	ld hl,Ctrl_0
260   857B CB A6            res 4,(hl)
261   857D
262   857D CD 54 86     1 call Store_Restore_entidades
263   8580
264   8580 C1           	pop bc
265   8581 10 E7        	djnz 2B
266   8583
267   8583 CD 08 86     	call Inicia_punteros_de_entidades
268   8586 CD 83 86     	call Restore_Primera_entidad
269   8589 CD 1E 86     	call Calcula_numero_de_malotes
270   858C
271   858C 21 00 70     	ld hl,Album_de_fotos
272   858F 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
273   8592              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
274   8592 3E 00        	ld a,0
275   8594 D3 FE        	out ($fe),a
276   8596 C9           	ret
277   8597
278   8597              ; --------------------------------------------------------------------------------------------------------------
279   8597              ;
280   8597              Mov_obj
281   8597
282   8597              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
283   8597
284   8597              ; 	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
285   8597 CD D9 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
286   859A
287   859A 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
288   859C 32 F6 84     	ld (Obj_dibujado),a
289   859F
290   859F              ; Movemos Amadeus o enemigos...
291   859F
292   859F 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
293   85A2 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
294   85A4 C4 A9 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
295   85A7
296   85A7 3A F5 84     	ld a,(Ctrl_0)
297   85AA CB 77        	bit 6,a
298   85AC CC 07 90     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
299   85AF
300   85AF 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
301   85B2 CB 67        	bit 4,a
302   85B4 C8           	ret z
303   85B5
304   85B5              ; ---------
305   85B5
306   85B5 CD D9 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
307   85B8 CD F0 85         call Repone_borrar
308   85BB              ;	call Draw											; Preparamos las variables para borrar.
309   85BB
310   85BB CD C2 89     	call Prepara_draw
311   85BE CD FC 88     	call calcula_CColumnass
312   85C1 CD 33 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
313   85C4 CD 88 89     	call Define_rutina_de_impresion
314   85C7 CD A0 7F     	call Guarda_foto_registros
315   85CA
316   85CA C9           	ret
317   85CB
318   85CB              ; --------------------------------------------------------------------------------------------------------------
319   85CB              ;
320   85CB AF           Borra_Pinta_obj xor a
321   85CC 32 F6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
322   85CF CD FC 85     	call Repone_pintar
323   85D2 CD EC 86     	call Draw
324   85D5 CD A0 7F     	call Guarda_foto_registros
325   85D8 C9           	ret
326   85D9
327   85D9              ; --------------------------------------------------------------------------------------------------------------
328   85D9
329   85D9 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
330   85DC 3A F6 84     	ld a,(Obj_dibujado)
331   85DF A7           	and a
332   85E0 28 05        	jr z,1F
333   85E2 11 EE 84     	ld de,Variables_de_pintado
334   85E5 18 03        	jr 2F
335   85E7 11 E7 84     1 ld de,Variables_de_borrado
336   85EA 01 07 00     2 ld bc,7
337   85ED ED B0        	ldir
338   85EF C9           	ret
339   85F0
340   85F0 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
341   85F3 11 D2 84     	ld de,Filas
342   85F6 01 07 00     	ld bc,7
343   85F9 ED B0        	ldir
344   85FB C9           	ret
345   85FC
346   85FC 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
347   85FF 11 D2 84     	ld de,Filas
348   8602 01 07 00     	ld bc,7
349   8605 ED B0        	ldir
350   8607 C9           	ret
351   8608
352   8608              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
353   8608              ;	ld (Caja_de_BORRADO),hl
354   8608              ;	ret
355   8608
356   8608              ; *************************************************************************************************************************************************************
357   8608              ;
358   8608              ; 8/1/23
359   8608              ;
360   8608              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
361   8608              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
362   8608              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
363   8608
364   8608              ; Destruye HL y DE !!!!!
365   8608
366   8608 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
367   860B CD 31 86         call Extrae_address
368   860E 22 08 85         ld (Puntero_store_entidades),hl
369   8611 21 C2 83     	ld hl,Indice_de_entidades+2
370   8614 22 0C 85     	ld (Indice_restore),hl
371   8617 CD 31 86     	call Extrae_address
372   861A 22 0A 85     	ld (Puntero_restore_entidades),hl
373   861D C9               ret
374   861E
375   861E              ; -------------------------------------------------------------------------------------------------------------
376   861E              ;
377   861E              ; 7/1/23
378   861E              ;
379   861E
380   861E 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
381   8621 AF           	xor a
382   8622 67           	ld h,a
383   8623 7D           	ld a,l
384   8624 D6 06        1 sub 6
385   8626 28 03        	jr z,2F
386   8628 24           	inc h
387   8629 18 F9        	jr 1B
388   862B 24           2 inc h
389   862C 7C           	ld a,h
390   862D 32 0F 85     	ld (Numero_de_malotes),a
391   8630 C9           	ret
392   8631
393   8631              ; *************************************************************************************************************************************************************
394   8631              ;
395   8631              ; 20/10/22
396   8631              ;
397   8631              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
398   8631              ;
399   8631              ; Destruye el puntero y DE !!!!!
400   8631
401   8631 5E           Extrae_address ld e,(hl)
402   8632 23           	inc hl
403   8633 56           	ld d,(hl)
404   8634 2B           	dec hl
405   8635 EB           	ex de,hl
406   8636 C9           	ret
407   8637
408   8637              ; *************************************************************************************************************************************************************
409   8637              ;
410   8637              ;	21/9/22
411   8637              ;
412   8637              ;   Destruye HL y BC !!!!!,
413   8637
414   8637 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
415   863A 22 DC 84     	ld (Puntero_DESPLZ),hl
416   863D CD 31 86     	call Extrae_address
417   8640 22 D6 84     	ld (Puntero_objeto),hl
418   8643
419   8643              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
420   8643
421   8643 21 10 83     	ld hl,Amadeus
422   8646 ED 4B D6 84  	ld bc,(Puntero_objeto)
423   864A B7 ED 42     	sub hl,bc
424   864D C0           	ret nz
425   864E
426   864E 21 F5 84     	ld hl,Ctrl_0
427   8651 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
428   8653
429   8653 C9            	ret 												; _de nuestra nave en los extremos.
430   8654
431   8654              ; *************************************************************************************************************************************************************
432   8654              ;
433   8654              ;	8/1/23
434   8654              ;
435   8654              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
436   8654              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
437   8654
438   8654              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
439   8654              ;	_de la 2ª y 3ª entidad respectivamente.
440   8654
441   8654
442   8654
443   8654              Store_Restore_entidades
444   8654
445   8654 E5           	push hl
446   8655 D5           	push de
447   8656 C5            	push bc
448   8657
449   8657              ;	STORE !!!!!
450   8657
451   8657 21 D2 84     	ld hl,Filas
452   865A ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
453   865E 01 36 00     	ld bc,54
454   8661 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
455   8663
456   8663              ;	Incrementa STORE y ejecuta RESTORE !!!!!
457   8663
458   8663 2A 0A 85     	ld hl,(Puntero_restore_entidades)
459   8666 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
460   8669 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
461   866C 01 36 00     	ld bc,54
462   866F ED B0        	ldir
463   8671
464   8671              ;	Incrementa RESTORE !!!!!
465   8671
466   8671 2A 0C 85         ld hl,(Indice_restore)
467   8674 23           	inc hl
468   8675 23           	inc hl
469   8676 22 0C 85     	ld (Indice_restore),hl
470   8679 CD 31 86         call Extrae_address
471   867C 22 0A 85         ld (Puntero_restore_entidades),hl
472   867F
473   867F C1           	pop bc
474   8680 D1           	pop de
475   8681 E1           	pop hl
476   8682
477   8682 C9           	ret
478   8683
479   8683              ; **************************************************************************************************
480   8683              ;
481   8683              ;	29/10/22
482   8683              ;
483   8683              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
484   8683
485   8683 E5           Restore_Primera_entidad push hl
486   8684 D5           	push de
487   8685 C5            	push bc
488   8686 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
489   8689 11 D2 84     	ld de,Filas
490   868C 01 36 00     	ld bc,54
491   868F ED B0        	ldir
492   8691 C1           	pop bc
493   8692 D1           	pop de
494   8693 E1           	pop hl
495   8694 C9           	ret
496   8695
497   8695              ; *************************************************************************************************************************************************************
498   8695              ;
499   8695              ; Teclado.
500   8695
501   8695 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
502   8697 DB FE        	in a,($fe)
503   8699 E6 01        	and $01
504   869B 28 02        	jr z,1f
505   869D 18 F6        	jr Pulsa_ENTER
506   869F C9           1 ret
507   86A0
508   86A0              ; **************************************************************************************************
509   86A0              ;
510   86A0              ; Temporización.
511   86A0
512   86A0              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
513   86A0              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
514   86A0              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
515   86A0              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
516   86A0
517   86A0              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
518   86A0              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
519   86A0              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
520   86A0
521   86A0              ; A partir de $4f61 no hace falta DELAY.
522   86A0
523   86A0              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
524   86A0
525   86A0 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
526   86A3 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
527   86A4 78           	LD A,B
528   86A5 A7           	AND A
529   86A6 20 FB        	JR NZ,wait
530   86A8 C9           	RET
531   86A9
532   86A9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
533   86A9              ;
534   86A9              ;	21/4/22
535   86A9
536   86A9              Movimiento_Amadeus
537   86A9
538   86A9 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
539   86AB DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
540   86AD E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
541   86AF CC CE 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
542   86B2 3E F7        	ld a,$f7
543   86B4 DB FE        	in a,($fe)
544   86B6 E6 01        	and $01
545   86B8 C8           	ret z
546   86B9 3E F7        	ld a,$f7
547   86BB DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
548   86BD E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
549   86BF CC BF 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
550   86C2 C9               ret
551   86C3
552   86C3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
553   86C3
554   86C3              ; Pinta indicadores de FILAS. ------------------------------------------------------
555   86C3
556   86C3 21 10 40     Pinta_FILAS ld hl,$4010
557   86C6              ;	ld b,9
558   86C6              ;2 push hl
559   86C6              ;	push bc
560   86C6 06 BF        	ld b,$bf
561   86C8 36 80        1 ld (hl),%10000000
562   86CA CD CE 89     	call NextScan
563   86CD 10 F9        	djnz 1B
564   86CF              ;	pop bc
565   86CF              ;	pop hl
566   86CF              ;	inc l
567   86CF              ;	djnz 2B
568   86CF
569   86CF 06 03        	ld b,3
570   86D1 21 00 47         ld hl,$4700
571   86D4 CD DA 86     3 call Bucle_1
572   86D7 10 FB            djnz 3B
573   86D9 C9               ret
574   86DA
575   86DA C5           Bucle_1 push bc
576   86DB E5                   push hl
577   86DC D1                   pop de
578   86DD 13                   inc de
579   86DE 01 FF 00             ld bc,255
580   86E1 36 FF                ld (hl),255
581   86E3 ED B0                ldir
582   86E5 23                   inc hl
583   86E6 3E 07                ld a,7
584   86E8 84                   add a,h
585   86E9 67                   ld h,a
586   86EA C1                   pop bc
587   86EB C9                   ret
588   86EC
589   86EC              ; ---------------------------------------------------------------
590   86EC
591   86EC              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86EC              ; ******************************************************************************************************************************************************************************************
  2+  86EC              ;
  3+  86EC              ; 17/08/22
  4+  86EC              ;
  5+  86EC              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86EC
  7+  86EC CD C2 89     Draw call Prepara_draw
  8+  86EF 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86F0 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86F1 28 05        	jr z,2F
 11+  86F3 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F6 18 0C        	jr 1F
 13+  86F8 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86FB 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86FE CD 89 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8701              ;													; _la esquina superior izquierda de la pantalla.
 17+  8701 CD 89 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8704 3A F5 84     1 ld a,(Ctrl_0)
 19+  8707 CB 6F        	bit 5,a
 20+  8709 20 00        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  870B
 22+  870B              ;	call Comprueba_limite_horizontal
 23+  870B              ;	call Comprueba_limite_vertical
 24+  870B
 25+  870B              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  870B
 27+  870B CD FC 88     3 call calcula_CColumnass
 28+  870E CD 33 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8711 CD 88 89     	call Define_rutina_de_impresion
 30+  8714
 31+  8714 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8717 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8719 32 F5 84     	ld (Ctrl_0),a
 34+  871C
 35+  871C C9           	ret
 36+  871D
 37+  871D              ; *******************************************************************************************************************************************************************************************
 38+  871D              ;	23/8/22
 39+  871D              ;
 40+  871D              ; 	Comprueba_limite_horizontal.
 41+  871D              ;
 42+  871D
 43+  871D 3A F6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  8720 A7           	and a
 45+  8721 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  8722
 47+  8722 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8725 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8727 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  8729
 51+  8729 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  872B 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  872E 18 09            jr 6F
 54+  8730 CB 5F        1 bit 3,a
 55+  8732 28 0D            jr z,2F
 56+  8734 E6 F7            and $f7
 57+  8736 32 F5 84         ld (Ctrl_0),a
 58+  8739 CD 89 88     6 call Inicializacion
 59+  873C F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  873D 08           	ex af,af
 61+  873E F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  873F 18 56            jr 5F
 63+  8741 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  8742
 65+  8742              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  8742              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  8742
 68+  8742 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8743 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8746 CD 17 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  8749 67           	ld h,a
 72+  874A EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  874B CD 17 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  874E 67           	ld h,a
 75+  874F A7           	and a
 76+  8750 ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  8752
 78+  8752 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8753 FE 02        	cp 2
 80+  8755 38 1C        	jr c,3F
 81+  8757 28 1A        	jr z,3F
 82+  8759
 83+  8759 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  875A 28 21            jr z,7F
 85+  875C 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  875E              ;	ld e,0
 87+  875E E1           	pop hl
 88+  875F
 89+  875F              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  875F              ; _para indicar con E="2" en caso necesario.
 91+  875F
 92+  875F E5               push hl
 93+  8760 C5               push bc
 94+  8761
 95+  8761 CD 17 8C     	call calcula_tercio
 96+  8764 FE 01        	cp 1
 97+  8766 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8768
 99+  8768 CD 98 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  876B 28 26            jr z,9F
101+  876D 38 24            jr c,9F
102+  876F 1E 00        11 ld e,0
103+  8771 18 22            jr 8F
104+  8773
105+  8773 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8774 28 07        	jr z, 7F
107+  8776 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  8778 1E 00         	ld e,0
109+  877A E1           	pop hl
110+  877B 18 04        	jr 4F
111+  877D 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  877F 18 15            jr 10F
113+  8781
114+  8781              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  8781              ; _para indicar con E="2" en caso necesario.
116+  8781
117+  8781 E5           4 push hl
118+  8782 C5               push bc
119+  8783
120+  8783 CD 17 8C     	call calcula_tercio
121+  8786 FE 01        	cp 1
122+  8788 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  878A
124+  878A CD 98 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  878D 28 04            jr z,9F
126+  878F 30 02            jr nc,9F
127+  8791 18 02        	jr 8F
128+  8793 1E 02        9 ld e,2
129+  8795 C1           8 pop bc
130+  8796 E1           10 pop hl
131+  8797 C9           5 ret
132+  8798
133+  8798              ; --------------------
134+  8798              ;
135+  8798              ; 25/08/22
136+  8798
137+  8798 CD 17 8C     Comprueba_centro call calcula_tercio
138+  879B 67               ld h,a
139+  879C 08           	ex af,af
140+  879D FE 02        	cp 2
141+  879F 38 07        	jr c,1F
142+  87A1 28 05        	jr z,1F
143+  87A3 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  87A6 18 03        	jr 2F
145+  87A8 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87AB 08           2 ex af,af
147+  87AC A7               and a
148+  87AD ED 42            sbc hl,bc
149+  87AF C9               ret
150+  87B0
151+  87B0              ; *********************************************************************************************************************************************************************************************
152+  87B0              ;
153+  87B0              ;   16/8/22
154+  87B0              ;
155+  87B0              ;	Comprueba_limite_vertical
156+  87B0              ;
157+  87B0              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87B0              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87B0              ;
160+  87B0
161+  87B0 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87B3 A7           	and a
163+  87B4 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87B5
165+  87B5 7D           	ld a,l
166+  87B6 E6 1F        	and $1F
167+  87B8 57           	ld d,a
168+  87B9 3A 03 85     	ld a,(Limite_vertical)
169+  87BC BA           	cp d 											; Límite - Posición.
170+  87BD
171+  87BD 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87BE CB 47        	bit 0,a
173+  87C0 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87C2
175+  87C2              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87C2
177+  87C2 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87C3 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87C5
180+  87C5               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87C5              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87C5
183+  87C5 3A E1 84         ld a,(Coordenada_X)
184+  87C8 16 0F            ld d,Centro_izquierda
185+  87CA A7               and a
186+  87CB 92               sub d 											 ; Posición - Centro_izquierda.
187+  87CC
188+  87CC 28 21            jr z,3F
189+  87CE 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87D0              ;                                                    ; _salimos sin modificar nada.
191+  87D0 18 0E            jr 2F
192+  87D2
193+  87D2 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87D3 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87D5
196+  87D5              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87D5              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87D5
199+  87D5 3A E1 84         ld a,(Coordenada_X)
200+  87D8 16 10            ld d,Centro_derecha
201+  87DA A7               and a
202+  87DB 92               sub d
203+  87DC
204+  87DC 28 11            jr z,3F
205+  87DE 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87E0              ;                                                    ; _salimos sin modificar nada.
207+  87E0 CB 43        2 bit 0,e
208+  87E2 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87E4 C5           	push bc
210+  87E5 CD 78 88         call Modificaccionne
211+  87E8 C1           	pop bc
212+  87E9 CD 89 88         call Inicializacion
213+  87EC F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87ED 08           	ex af,af
215+  87EE F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87EF C9           3 ret 				 								 ; Salimos de la rutina.
217+  87F0
218+  87F0              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87F0
220+  87F0 C5           4 push bc
221+  87F1 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87F4 0A           	ld a,(bc)
223+  87F5 3D           	dec a
224+  87F6 47           	ld b,a 											 ; Columnas-1 en B.
225+  87F7 7D           	ld a,l
226+  87F8 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87F9 CB 47        	bit 0,a
228+  87FB 28 03        	jr z,5F
229+  87FD 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87FE 18 2E        	jr 7F
231+  8800
232+  8800              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  8800
234+  8800 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  8801 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  8802 3A F5 84     	ld a,(Ctrl_0)
237+  8805 CB 4F        	bit 1,a
238+  8807 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  8809 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  880A
241+  880A              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  880A
243+  880A 1C               inc e
244+  880B 1D               dec e
245+  880C 20 07            jr nz,12F
246+  880E 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  880F 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  8810 22 D4 84     	ld (Posicion_actual),hl
249+  8813 18 44        13 jr 9F
250+  8815
251+  8815 CB 43        12 bit 0,e
252+  8817 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  8819              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  8819 C1           	pop bc
255+  881A 18 D3        	jr 3B
256+  881C
257+  881C 80           14 add b
258+  881D 6F               ld l,a
259+  881E 22 D4 84     	ld (Posicion_actual),hl
260+  8821 CD 78 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8824 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8826
263+  8826 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  8828 32 F5 84         ld (Ctrl_0),a
265+  882B F1           	pop af
266+  882C 18 2B        	jr 9F
267+  882E
268+  882E              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  882E
270+  882E F5           7 push af
271+  882F 3A F5 84     	ld a,(Ctrl_0)
272+  8832 CB 47        	bit 0,a
273+  8834 20 1D        	jr nz,8F
274+  8836 F1           	pop af
275+  8837
276+  8837              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8837
278+  8837 1C           	inc e
279+  8838 1D               dec e
280+  8839 20 07            jr nz,10F
281+  883B
282+  883B 90           	sub b
283+  883C 6F               ld l,a
284+  883D 22 D4 84     	ld (Posicion_actual),hl
285+  8840 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  8842              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  8842 CB 43        10 bit 0,e
288+  8844 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8846              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8846 C1           	pop bc
291+  8847 18 A6        	jr 3B
292+  8849
293+  8849 90           16 sub b
294+  884A 6F               ld l,a
295+  884B 22 D4 84     	ld (Posicion_actual),hl
296+  884E CD 78 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  8851 18 06            jr 9F
298+  8853
299+  8853 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8855 32 F5 84         ld (Ctrl_0),a
301+  8858 F1           	pop af
302+  8859
303+  8859 C1           9 pop bc
304+  885A              ;	ld e,0
305+  885A CD 89 88         call Inicializacion
306+  885D F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  885E 08           	ex af,af
308+  885F F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  8860 18 8D            jr 3B
310+  8862
311+  8862              ; --------------------
312+  8862
313+  8862              Modifica_Pos_actual
314+  8862
315+  8862              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  8862 05               dec B                                           ; Scanlines-1 en B.
317+  8863 CD DD 89     1 call PreviousScan
318+  8866 10 FB            djnz 1B
319+  8868 22 D4 84     	ld (Posicion_actual),hl
320+  886B AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  886C C9           	ret
322+  886D
323+  886D              ; --------------------
324+  886D
325+  886D              Modifica_Pos_actual2
326+  886D
327+  886D              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  886D 05               dec B                                           ; Scanlines-1 en B.
329+  886E CD CE 89     1 call NextScan
330+  8871 10 FB            djnz 1B
331+  8873 22 D4 84     	ld (Posicion_actual),hl
332+  8876 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8877 C9           	ret
334+  8878
335+  8878              ; --------------------
336+  8878
337+  8878              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  8878              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  8878
340+  8878 08           Modificaccionne ex af,af
341+  8879 FE 02            cp 2
342+  887B F5               push af                                         ; Guardo el resultado de la comparación.
343+  887C 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  887D F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  887E CC 62 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  8881 DC 62 88         call c,Modifica_Pos_actual
347+  8884 C8           	ret z
348+  8885 CD 6D 88         call Modifica_Pos_actual2
349+  8888 C9               ret
350+  8889
351+  8889              ; *************************************************************************************************************************************************************************************************
352+  8889              ;
353+  8889              ;	13/8/22
354+  8889              ;
355+  8889              ;	Inicializacion
356+  8889              ;
357+  8889              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  8889              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  8889              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  8889              ;
361+  8889              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  8889              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  8889              ;	_ desaparece/aparece.
364+  8889
365+  8889              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  8889              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  8889              ;
368+  8889              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  8889              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  8889              ; 		   [E] ="0"
371+  8889
372+  8889              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  8889
374+  8889 CD 17 8C     Inicializacion call calcula_tercio
375+  888C 28 36        	jr z,primit
376+  888E E6 02        	and 2
377+  8890 20 07        	jr nz,segmit
378+  8892 7D           	ld a,l
379+  8893 FE 7F        	cp $7f
380+  8895 38 2D        	jr c,primit
381+  8897 28 2B        	jr z,primit
382+  8899 CD F6 88     segmit call column
383+  889C 38 13        	jr c,tercuad
384+  889E 3E 04        cuarcuad ld a,4
385+  88A0 32 E0 84     	ld (Cuad_objeto),a
386+  88A3 21 20 48     	ld hl,$4820
387+  88A6 22 01 85     	ld (Limite_horizontal),hl
388+  88A9 21 03 85     	ld hl,Limite_vertical
389+  88AC 36 0D        	ld (hl),$0d
390+  88AE 08           	ex af,af
391+  88AF 18 3C        	jr 1F
392+  88B1              tercuad
393+  88B1              ;	call Fija_punteros
394+  88B1 3E 03        	ld a,3
395+  88B3 32 E0 84     	ld (Cuad_objeto),a
396+  88B6 21 20 48     	ld hl,$4820
397+  88B9 22 01 85     	ld (Limite_horizontal),hl
398+  88BC 21 03 85     	ld hl,Limite_vertical
399+  88BF 36 12        	ld (hl),$12
400+  88C1 08           	ex af,af
401+  88C2 18 29        	jr 1F
402+  88C4 CD F6 88     primit call column
403+  88C7 38 13        	jr c, primcuad
404+  88C9              segcuad
405+  88C9              ;	call Fija_punteros
406+  88C9 3E 02        	ld a,2
407+  88CB 32 E0 84     	ld (Cuad_objeto),a
408+  88CE 21 C0 4F     	ld hl,$4fc0
409+  88D1 22 01 85     	ld (Limite_horizontal),hl
410+  88D4 21 03 85     	ld hl,Limite_vertical
411+  88D7 36 0D        	ld (hl),$0d
412+  88D9 08           	ex af,af
413+  88DA 18 11        	jr 1F
414+  88DC              primcuad
415+  88DC              ;	call Fija_punteros
416+  88DC 3E 01        	ld a,1
417+  88DE 32 E0 84     	ld (Cuad_objeto),a
418+  88E1 21 C0 4F     	ld hl,$4fc0
419+  88E4 22 01 85     	ld (Limite_horizontal),hl
420+  88E7 21 03 85     	ld hl,Limite_vertical
421+  88EA 36 12        	ld (hl),$12
422+  88EC 08           	ex af,af
423+  88ED CD 8F 8F     1 call Genera_coordenadas
424+  88F0 21 F5 84     	ld hl,Ctrl_0
425+  88F3 CB EE        	set 5,(hl)
426+  88F5 C9           	ret
427+  88F6
428+  88F6              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88F6              ;
430+  88F6              ;	14/9/22
431+  88F6              ;
432+  88F6              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88F6              ;
434+  88F6              ;	La rutina fija el puntero de dibujado/borrado.
435+  88F6              ;
436+  88F6              ;	Función:
437+  88F6              ;
438+  88F6              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88F6
440+  88F6              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88F6              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88F6              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88F6              ;	and a
444+  88F6              ;	jr z,1F
445+  88F6              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88F6              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88F6              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88F6              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88F6              ;	ld (Puntero_objeto),hl
450+  88F6              ;	jr 3F
451+  88F6              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88F6              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88F6              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88F6              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88F6              ;	ld (Puntero_objeto),hl
456+  88F6              ;	jr 3F
457+  88F6              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88F6              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88F6              ;3 pop de
460+  88F6              ;	pop bc
461+  88F6              ;	ret
462+  88F6
463+  88F6              ; ------------------------------------------------------------------------------------------------------------------
464+  88F6
465+  88F6              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88F6              ;
467+  88F6              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88F6
469+  88F6 7D           column ld a,l
470+  88F7 E6 1F        	and $1f
471+  88F9 FE 10         	cp $10
472+  88FB C9            	ret
473+  88FC
474+  88FC              ; --------------------------------------------------------------------------------------------------------------------
475+  88FC              ;
476+  88FC              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88FC              ;
478+  88FC              ; 14/12/22
479+  88FC              ;
480+  88FC              ;	Modifica: A y BC.
481+  88FC
482+  88FC 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  88FF E6 01        	and 1
484+  8901 28 17        	jr z,1F
485+  8903
486+  8903              ; Nos encontramos en la parte izquierda de la pantalla
487+  8903
488+  8903 3A E1 84     	ld a,(Coordenada_X)
489+  8906 47           	ld b,a
490+  8907 04           	inc b											; (Coordenada_X)+1 en B.
491+  8908 79           	ld a,c
492+  8909 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  890A 38 08        	jr c,2F
494+  890C 47           	ld b,a
495+  890D 79           	ld a,c
496+  890E 90           	sub b
497+  890F 32 00 85     	ld (Columnas),a
498+  8912 18 1B        	jr 4F
499+  8914 79           2 ld a,c
500+  8915 32 00 85     	ld (Columnas),a
501+  8918 18 15        	jr 4F
502+  891A
503+  891A              ; Nos encontramos en la parte derecha de la pantalla.
504+  891A
505+  891A 3A E1 84     1 ld a,(Coordenada_X)
506+  891D 81           	add c
507+  891E 3D           	dec a
508+  891F D6 1F        	sub $1f
509+  8921 38 08        	jr c,3F
510+  8923 47           	ld b,a
511+  8924 79           	ld a,c
512+  8925 90           	sub b
513+  8926 32 00 85     	ld (Columnas),a
514+  8929 18 04        	jr 4F
515+  892B 79           3 ld a,c
516+  892C 32 00 85     	ld (Columnas),a
517+  892F D9           4 exx
518+  8930 4F           	ld c,a
519+  8931 D9           	exx
520+  8932 C9            ret
521+  8933
522+  8933              ; --------------------------------------------------------------------------------------------------------------------
523+  8933              ;
524+  8933              ; 7/1/23
525+  8933              ;
526+  8933              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  8933              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  8933              ;
529+  8933              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  8933              ;	DESTRUYE: HL,B Y A.
531+  8933
532+  8933 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  8936 FE 02        	cp 2
534+  8938 38 18        	jr c,1F
535+  893A 28 16        	jr z,1F
536+  893C E6 01        	and 1
537+  893E 28 0D        	jr z,3F
538+  8940
539+  8940              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  8940
541+  8940 CD 7C 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8943
543+  8943 7D           9 ld a,l
544+  8944 E6 1F        	and $1f
545+  8946 28 2A        	jr z,7F
546+  8948 2B           	dec hl
547+  8949 10 F8        	djnz 9B
548+  894B 18 25        	jr 7F
549+  894D
550+  894D              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  894D
552+  894D 2A D4 84     3 ld hl,(Posicion_actual)
553+  8950 18 20        	jr 7F
554+  8952
555+  8952 28 14        1 jr z,2F
556+  8954
557+  8954              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  8954
559+  8954 CD 7C 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  8957 7D           4 ld a,l
561+  8958 E6 1F        	and $1f
562+  895A 28 03        	jr z,6F
563+  895C 2B           	dec hl
564+  895D 10 F8        	djnz 4B
565+  895F 06 0F        6 ld b,15
566+  8961 CD DD 89     5 call PreviousScan
567+  8964 10 FB        	djnz 5B
568+  8966 18 0A        	jr 7F
569+  8968
570+  8968              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  8968
572+  8968 CD 7C 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  896B 06 0F        	ld b,15
574+  896D CD DD 89     8 call PreviousScan
575+  8970 10 FB        	djnz 8B
576+  8972
577+  8972 E5           7 push hl
578+  8973 DD E1        	pop ix
579+  8975
580+  8975 2A D6 84     	ld hl,(Puntero_objeto)
581+  8978 E5           	push hl
582+  8979 FD E1        	pop iy
583+  897B
584+  897B C9           	ret
585+  897C
586+  897C              ; --------------------------------------------------------------------------------------------------------------------
587+  897C              ;
588+  897C              ;	2/1/23
589+  897C              ;
590+  897C              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  897C              ;
592+  897C              ;	Tras esta rutina tenemos:
593+  897C              ;
594+  897C              ;	OUTPUT: HL contiene (Posicion_actual).
595+  897C              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  897C              ;
597+  897C              ;	DESTRUYE!!!!! HL,B y A.
598+  897C
599+  897C 2A D4 84     Operandos ld hl,(Posicion_actual)
600+  897F 3A 00 85     	ld a,(Columnas)
601+  8982 3D           	dec a
602+  8983 20 01        	jr nz,1F
603+  8985 3C           	inc a
604+  8986 47           1 ld b,a
605+  8987 C9           	ret
606+  8988
607+  8988              ; --------------------------------------------------------------------------------------------------------------------
608+  8988              ;
609+  8988              ;	3/1/23
610+  8988              ;
611+  8988              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  8988              ;
613+  8988              ;	Destruye: A,B,HL y DE.
614+  8988
615+  8988              Define_rutina_de_impresion
616+  8988
617+  8988 3A D3 84     	ld a,(Columns)
618+  898B 47           	ld b,a
619+  898C 3A 00 85     	ld a,(Columnas)
620+  898F B8           	cp b
621+  8990 20 0D        	jr nz,2f
622+  8992
623+  8992              ;	La entidad se imprime entera.
624+  8992
625+  8992 21 24 8A     	ld hl, Indice_entidades_completas
626+  8995 E6 01        	and 1
627+  8997 28 02        	jr z,1F
628+  8999
629+  8999 23           	inc hl
630+  899A 23           	inc hl
631+  899B
632+  899B CD 31 86     1 call Extrae_address
633+  899E C9           	ret		;	ret
634+  899F
635+  899F              ;	La entidad no se imprime entera en pantalla.
636+  899F
637+  899F 3A E0 84     2 ld a,(Cuad_objeto)
638+  89A2 E6 01        	and 1
639+  89A4 28 17        	jr z,3F
640+  89A6
641+  89A6              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  89A6
643+  89A6 21 28 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  89A9 3A D3 84     4 ld a,(Columns)
645+  89AC E6 01        	and 1
646+  89AE 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89B0
648+  89B0 23           	inc hl
649+  89B1 23           	inc hl
650+  89B2
651+  89B2 3A 00 85     	ld a,(Columnas)
652+  89B5 E6 01        	and 1
653+  89B7 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89B9
655+  89B9 23           	inc hl
656+  89BA 23           	inc hl
657+  89BB
658+  89BB 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89BD
660+  89BD 21 2E 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89C0 18 E7        	jr 4B
662+  89C2
663+  89C2              ; --------------------------------------------------------------------------------------------------------------------
664+  89C2              ;
665+  89C2              ;	Prepara_draw
666+  89C2              ;
667+  89C2              ;	Es una rutina de carga.
668+  89C2              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89C2              ;
670+  89C2              ;	FUNCIONAMIENTO:
671+  89C2              ;
672+  89C2              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89C2              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89C2              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89C2              ;
676+  89C2              ;	DESTRUYE:
677+  89C2              ;
678+  89C2              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89C2
680+  89C2 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89C5 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89C6 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89C7 4E           	ld c,(hl)
684+  89C8 2A D4 84     	ld hl,(Posicion_actual)
685+  89CB 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89CD C9           	ret
687+  89CE
688+  89CE              ;----------------------------------------------------------------------------------------------------------------
689+  89CE              ;
690+  89CE              ;	5/08/22
691+  89CE              ;
692+  89CE              ;   NextScan.
693+  89CE              ;
694+  89CE              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89CE              ;
696+  89CE              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89CE              ;
698+  89CE              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89CE              ;
700+  89CE              ;       DESTRUIDOS: AF y HL !!!
701+  89CE              ;
702+  89CE              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89CE              ;
704+  89CE
705+  89CE 24           NextScan inc h          ; Incrementamos el scanline.
706+  89CF 7C               ld a,h
707+  89D0 E6 07            and 7
708+  89D2 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89D3
710+  89D3 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
711+  89D4 C6 20            add a,$20           ; Vamos a comprobarlo...
712+  89D6 6F               ld l,a
713+  89D7 D8               ret c               ; Salimos si se produce el cambio de tercio.
714+  89D8
715+  89D8 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
716+  89D9 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
717+  89DB 67               ld h,a
718+  89DC C9               ret
719+  89DD
720+  89DD              ;----------------------------------------------------------------------------------------------------------------
721+  89DD              ;
722+  89DD              ;	5/08/22
723+  89DD              ;
724+  89DD              ;   PreviousScan.
725+  89DD              ;
726+  89DD              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
727+  89DD              ;
728+  89DD              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
729+  89DD              ;
730+  89DD              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
731+  89DD              ;
732+  89DD              ;       DESTRUIDOS: AF y HL !!!
733+  89DD              ;
734+  89DD              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
735+  89DD              ;
736+  89DD
737+  89DD 7C           PreviousScan ld a,h
738+  89DE 25               dec h               ; Dec H.
739+  89DF E6 07            and 7
740+  89E1 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
741+  89E2
742+  89E2 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
743+  89E3 D6 20            sub $20             ; Vamos a comprobarlo...
744+  89E5 6F               ld l,a
745+  89E6 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
746+  89E7
747+  89E7 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
748+  89E8 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
749+  89EA 67               ld h,a
750+  89EB C9               ret
751+  89EC
752+  89EC              ; -----------------------------------------------------------------------------------
753+  89EC              ;
754+  89EC              ;	07/01/23
755+  89EC
756+  89EC              Extrae_foto_registros
757+  89EC
758+  89EC ED 73 10 85  	ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
759+  89F0 31 00 70     	ld sp,Album_de_fotos
760+  89F3 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
761+  89F5 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
762+  89F6 D1           	pop de																	; Dirección de la rutina de impresión en DE.
763+  89F7
764+  89F7 ED 73 12 85  	ld (Stack_2),sp
765+  89FB ED 7B 10 85  	ld sp,(Stack)
766+  89FF 3E CD        	ld a,$cd
767+  8A01 32 09 8A     	ld (Imprime),a
768+  8A04 EB           	ex de,hl
769+  8A05 22 0A 8A     	ld (Imprime+1),hl
770+  8A08 EB           	ex de,hl
771+  8A09
772+  8A09 00 00 00     Imprime db 0,0,0
773+  8A0C ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
774+  8A10 3A 0F 85     	ld a,(Numero_de_malotes)
775+  8A13 3D           	dec a
776+  8A14 28 09        	jr z,1F
777+  8A16 32 0F 85      	ld (Numero_de_malotes),a
778+  8A19 ED 7B 12 85  	ld sp,(Stack_2)
779+  8A1D 18 D4        	jr 2B
780+  8A1F
781+  8A1F AF           1 xor a
782+  8A20 32 12 85     	ld (Stack_2),a
783+  8A23 C9           	ret
784+  8A24
785+  8A24
# file closed: Draw_XOR.asm
592   8A24              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A24              ;   índices de Rutinas de impresión.
  2+  8A24
  3+  8A24 34 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A26 5D 8A            defw Pinta_Amadeus_3x2
  5+  8A28
  6+  8A28 A7 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A2A 47 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A2C FB 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A2E
 10+  8A2E D1 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A30 D5 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A32 89 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A34
 14+  8A34
 15+  8A34              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A34              ;
 17+  8A34              ;   12/12/22
 18+  8A34              ;
 19+  8A34              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A34              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A34              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A34              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A34              ;
 24+  8A34              ;   Modifica: DE y HL.
 25+  8A34
 26+  8A34 ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A38 FD F9        	ld sp,iy
 28+  8A3A 06 10            ld b,16
 29+  8A3C D1           1 pop de
 30+  8A3D 73           	ld (hl),e
 31+  8A3E 23           	inc hl
 32+  8A3F 72           	ld (hl),d
 33+  8A40 2B           	dec hl
 34+  8A41
 35+  8A41 24           	inc h
 36+  8A42 7C               ld a,h
 37+  8A43 E6 07            and 7
 38+  8A45 20 0A            jr nz,2F
 39+  8A47
 40+  8A47 7D               ld a,l
 41+  8A48 C6 20            add a,$20
 42+  8A4A 6F               ld l,a
 43+  8A4B 38 04            jr c,2F
 44+  8A4D
 45+  8A4D 7C               ld a,h
 46+  8A4E D6 08            sub 8
 47+  8A50 67               ld h,a
 48+  8A51
 49+  8A51 7C           2 ld a,h
 50+  8A52 FE 58            cp $58
 51+  8A54 28 02            jr z,3F
 52+  8A56 10 E4            djnz 1B
 53+  8A58 ED 7B 10 85  3 ld sp,(Stack)
 54+  8A5C C9           	ret
 55+  8A5D
 56+  8A5D ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A61 FD F9        	ld sp,iy
 58+  8A63 06 08            ld b,8
 59+  8A65 D1           1 pop de
 60+  8A66 73           	ld (hl),e
 61+  8A67 23           	inc hl
 62+  8A68 72           	ld (hl),d
 63+  8A69 23           	inc hl
 64+  8A6A D1           	pop de
 65+  8A6B 73           	ld (hl),e
 66+  8A6C 2B           	dec hl
 67+  8A6D 2B           	dec hl
 68+  8A6E 24           	inc h
 69+  8A6F 7C               ld a,h
 70+  8A70 E6 07            and 7
 71+  8A72 20 0A            jr nz,2F
 72+  8A74 7D               ld a,l
 73+  8A75 C6 20            add a,$20
 74+  8A77 6F               ld l,a
 75+  8A78 38 04            jr c,2F
 76+  8A7A 7C               ld a,h
 77+  8A7B D6 08            sub 8
 78+  8A7D 67               ld h,a
 79+  8A7E 7C           2 ld a,h
 80+  8A7F FE 58            cp $58
 81+  8A81 28 1F            jr z,4F
 82+  8A83 72               ld (hl),d
 83+  8A84 D1           	pop de
 84+  8A85 23           	inc hl
 85+  8A86 73           	ld (hl),e
 86+  8A87 23           	inc hl
 87+  8A88 72           	ld (hl),d
 88+  8A89 2B           	dec hl
 89+  8A8A 2B           	dec hl
 90+  8A8B 24           	inc h
 91+  8A8C 7C               ld a,h
 92+  8A8D E6 07            and 7
 93+  8A8F 20 0A            jr nz,3F
 94+  8A91 7D               ld a,l
 95+  8A92 C6 20            add a,$20
 96+  8A94 6F               ld l,a
 97+  8A95 38 04            jr c,3F
 98+  8A97 7C               ld a,h
 99+  8A98 D6 08            sub 8
100+  8A9A 67               ld h,a
101+  8A9B 7C           3 ld a,h
102+  8A9C FE 58            cp $58
103+  8A9E 28 02            jr z,4F
104+  8AA0 10 C3            djnz 1B
105+  8AA2 ED 7B 10 85  4 ld sp,(Stack)
106+  8AA6 C9           	ret
107+  8AA7
108+  8AA7              ; ---------------------------------------------------
109+  8AA7
110+  8AA7 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AAB FD F9        	ld sp,iy
112+  8AAD 06 10            ld b,16
113+  8AAF D1           1 pop de
114+  8AB0 7A           	ld a,d
115+  8AB1 AE           	xor (hl)
116+  8AB2 77           	ld (hl),a
117+  8AB3 24           	inc h
118+  8AB4 7C               ld a,h
119+  8AB5 E6 07            and 7
120+  8AB7 20 0C            jr nz,2F
121+  8AB9 7D               ld a,l
122+  8ABA C6 20            add a,$20
123+  8ABC 6F               ld l,a
124+  8ABD 38 06            jr c,2F
125+  8ABF 7C               ld a,h
126+  8AC0 D6 08            sub 8
127+  8AC2 67               ld h,a
128+  8AC3 18 00            jr 2F
129+  8AC5 7C           2 ld a,h
130+  8AC6 FE 58            cp $58
131+  8AC8 28 02            jr z,3F
132+  8ACA 10 E3            djnz 1B
133+  8ACC ED 7B 10 85  3 ld sp,(Stack)
134+  8AD0 C9           	ret
135+  8AD1
136+  8AD1 ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8AD5 FD F9        	ld sp,iy
138+  8AD7 06 10            ld b,16
139+  8AD9 D1           1 pop de
140+  8ADA 7B           	ld a,e
141+  8ADB AE           	xor (hl)
142+  8ADC 77           	ld (hl),a
143+  8ADD 24           	inc h
144+  8ADE 7C               ld a,h
145+  8ADF E6 07            and 7
146+  8AE1 20 0C            jr nz,2F
147+  8AE3 7D               ld a,l
148+  8AE4 C6 20            add a,$20
149+  8AE6 6F               ld l,a
150+  8AE7 38 06            jr c,2F
151+  8AE9 7C               ld a,h
152+  8AEA D6 08            sub 8
153+  8AEC 67               ld h,a
154+  8AED 18 00            jr 2F
155+  8AEF 7C           2 ld a,h
156+  8AF0 FE 58            cp $58
157+  8AF2 28 02            jr z,3F
158+  8AF4 10 E3            djnz 1B
159+  8AF6 ED 7B 10 85  3 ld sp,(Stack)
160+  8AFA C9           	ret
161+  8AFB
162+  8AFB              ; ---------------------------------------------------
163+  8AFB
164+  8AFB ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8AFF FD F9        	ld sp,iy
166+  8B01 06 08            ld b,8
167+  8B03 D1           1 pop de
168+  8B04 7A           	ld a,d
169+  8B05 AE           	xor (hl)
170+  8B06 77           	ld (hl),a
171+  8B07 23           	inc hl
172+  8B08 D1           	pop de
173+  8B09 7B           	ld a,e
174+  8B0A AE           	xor (hl)
175+  8B0B 77           	ld (hl),a
176+  8B0C 2B           	dec hl
177+  8B0D 24            	inc h
178+  8B0E 7C               ld a,h
179+  8B0F E6 07            and 7
180+  8B11 20 0A            jr nz,2F
181+  8B13 7D               ld a,l
182+  8B14 C6 20            add a,$20
183+  8B16 6F               ld l,a
184+  8B17 38 04            jr c,2F
185+  8B19 7C               ld a,h
186+  8B1A D6 08            sub 8
187+  8B1C 67               ld h,a
188+  8B1D 7C           2 ld a,h
189+  8B1E FE 58            cp $58
190+  8B20 28 20            jr z,4F
191+  8B22 D1               pop de
192+  8B23 7B           	ld a,e
193+  8B24 AE           	xor (hl)
194+  8B25 77           	ld (hl),a
195+  8B26 23           	inc hl
196+  8B27 7A           	ld a,d
197+  8B28 AE           	xor (hl)
198+  8B29 77           	ld (hl),a
199+  8B2A 2B           	dec hl
200+  8B2B 24           	inc h
201+  8B2C 7C               ld a,h
202+  8B2D E6 07            and 7
203+  8B2F 20 0A            jr nz,3F
204+  8B31 7D               ld a,l
205+  8B32 C6 20            add a,$20
206+  8B34 6F               ld l,a
207+  8B35 38 04            jr c,3F
208+  8B37 7C               ld a,h
209+  8B38 D6 08            sub 8
210+  8B3A 67               ld h,a
211+  8B3B 7C           3 ld a,h
212+  8B3C FE 58            cp $58
213+  8B3E 28 02            jr z,4F
214+  8B40 10 C1            djnz 1B
215+  8B42 ED 7B 10 85  4 ld sp,(Stack)
216+  8B46 C9           	ret
217+  8B47
218+  8B47 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B4B FD F9        	ld sp,iy
220+  8B4D 06 08            ld b,8
221+  8B4F D1           1 pop de
222+  8B50 D1           	pop de
223+  8B51 7B           	ld a,e
224+  8B52 AE           	xor (hl)
225+  8B53 77           	ld (hl),a
226+  8B54 24            	inc h
227+  8B55 7C               ld a,h
228+  8B56 E6 07            and 7
229+  8B58 20 0A            jr nz,2F
230+  8B5A 7D               ld a,l
231+  8B5B C6 20            add a,$20
232+  8B5D 6F               ld l,a
233+  8B5E 38 04            jr c,2F
234+  8B60 7C               ld a,h
235+  8B61 D6 08            sub 8
236+  8B63 67               ld h,a
237+  8B64 7C           2 ld a,h
238+  8B65 FE 58            cp $58
239+  8B67 28 1B            jr z,4F
240+  8B69 D1               pop de
241+  8B6A 7A           	ld a,d
242+  8B6B AE           	xor (hl)
243+  8B6C 77           	ld (hl),a
244+  8B6D 24           	inc h
245+  8B6E 7C               ld a,h
246+  8B6F E6 07            and 7
247+  8B71 20 0A            jr nz,3F
248+  8B73 7D               ld a,l
249+  8B74 C6 20            add a,$20
250+  8B76 6F               ld l,a
251+  8B77 38 04            jr c,3F
252+  8B79 7C               ld a,h
253+  8B7A D6 08            sub 8
254+  8B7C 67               ld h,a
255+  8B7D 7C           3 ld a,h
256+  8B7E FE 58            cp $58
257+  8B80 28 02            jr z,4F
258+  8B82 10 CB            djnz 1B
259+  8B84 ED 7B 10 85  4 ld sp,(Stack)
260+  8B88 C9           	ret
261+  8B89
262+  8B89 ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8B8D FD F9        	ld sp,iy
264+  8B8F 06 08            ld b,8
265+  8B91 D1           1 pop de
266+  8B92 7B           	ld a,e
267+  8B93 AE           	xor (hl)
268+  8B94 77           	ld (hl),a
269+  8B95 23           	inc hl
270+  8B96 7A           	ld a,d
271+  8B97 AE           	xor (hl)
272+  8B98 77           	ld (hl),a
273+  8B99 2B           	dec hl
274+  8B9A 24             	inc h
275+  8B9B 7C               ld a,h
276+  8B9C E6 07            and 7
277+  8B9E 20 0A            jr nz,2F
278+  8BA0 7D               ld a,l
279+  8BA1 C6 20            add a,$20
280+  8BA3 6F               ld l,a
281+  8BA4 38 04            jr c,2F
282+  8BA6 7C               ld a,h
283+  8BA7 D6 08            sub 8
284+  8BA9 67               ld h,a
285+  8BAA 7C           2 ld a,h
286+  8BAB FE 58            cp $58
287+  8BAD 28 21            jr z,4F
288+  8BAF D1               pop de
289+  8BB0 7A           	ld a,d
290+  8BB1 AE           	xor (hl)
291+  8BB2 77           	ld (hl),a
292+  8BB3 23           	inc hl
293+  8BB4 D1               pop de
294+  8BB5 7B           	ld a,e
295+  8BB6 AE           	xor (hl)
296+  8BB7 77           	ld (hl),a
297+  8BB8 2B           	dec hl
298+  8BB9 24           	inc h
299+  8BBA 7C               ld a,h
300+  8BBB E6 07            and 7
301+  8BBD 20 0A            jr nz,3F
302+  8BBF 7D               ld a,l
303+  8BC0 C6 20            add a,$20
304+  8BC2 6F               ld l,a
305+  8BC3 38 04            jr c,3F
306+  8BC5 7C               ld a,h
307+  8BC6 D6 08            sub 8
308+  8BC8 67               ld h,a
309+  8BC9 7C           3 ld a,h
310+  8BCA FE 58            cp $58
311+  8BCC 28 02            jr z,4F
312+  8BCE 10 C1            djnz 1B
313+  8BD0 ED 7B 10 85  4 ld sp,(Stack)
314+  8BD4 C9           	ret
315+  8BD5
316+  8BD5 ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8BD9 FD F9        	ld sp,iy
318+  8BDB 06 08            ld b,8
319+  8BDD D1           1 pop de
320+  8BDE 7B           	ld a,e
321+  8BDF AE           	xor (hl)
322+  8BE0 77           	ld (hl),a
323+  8BE1 24            	inc h
324+  8BE2 7C               ld a,h
325+  8BE3 E6 07            and 7
326+  8BE5 20 0A            jr nz,2F
327+  8BE7 7D               ld a,l
328+  8BE8 C6 20            add a,$20
329+  8BEA 6F               ld l,a
330+  8BEB 38 04            jr c,2F
331+  8BED 7C               ld a,h
332+  8BEE D6 08            sub 8
333+  8BF0 67               ld h,a
334+  8BF1 7C           2 ld a,h
335+  8BF2 FE 58            cp $58
336+  8BF4 28 1C            jr z,4F
337+  8BF6 D1               pop de
338+  8BF7 7A           	ld a,d
339+  8BF8 AE           	xor (hl)
340+  8BF9 77           	ld (hl),a
341+  8BFA 24           	inc h
342+  8BFB 7C               ld a,h
343+  8BFC E6 07            and 7
344+  8BFE 20 0A            jr nz,3F
345+  8C00 7D               ld a,l
346+  8C01 C6 20            add a,$20
347+  8C03 6F               ld l,a
348+  8C04 38 04            jr c,3F
349+  8C06 7C               ld a,h
350+  8C07 D6 08            sub 8
351+  8C09 67               ld h,a
352+  8C0A 7C           3 ld a,h
353+  8C0B FE 58            cp $58
354+  8C0D 28 03            jr z,4F
355+  8C0F D1               pop de
356+  8C10 10 CB            djnz 1B
357+  8C12 ED 7B 10 85  4 ld sp,(Stack)
358+  8C16 C9           	ret
359+  8C17
360+  8C17              ; ---------------------------------------------------
361+  8C17
# file closed: Rutinas_de_impresion_sprites.asm
593   8C17              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C17              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C17              ;
  3+  8C17              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C17              ;
  5+  8C17              ; *****************************************************************************************************************************************************************************************
  6+  8C17              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C17
  8+  8C17 7C           calcula_tercio ld a,h
  9+  8C18 E6 18        	and $18
 10+  8C1A CB 2F        	sra a
 11+  8C1C CB 2F        	sra a
 12+  8C1E CB 2F        	sra a
 13+  8C20 C9           	ret
 14+  8C21
# file closed: calcula_tercio.asm
594   8C21              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C21              ; -----------------------------------------------------------------------------------------
  2+  8C21              ;
  3+  8C21              ;   04/11/22
  4+  8C21              ;
  5+  8C21              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C21              ;
  7+  8C21              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C21              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C21              ;
 10+  8C21              ;   DESTRUYE: HL y A. !!!!!
 11+  8C21
 12+  8C21 CD 17 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C24 26 58            ld h,$58
 14+  8C26 84               add h
 15+  8C27 67               ld h,a
 16+  8C28 C9               ret
# file closed: Calcula_direccion_atributos.asm
595   8C29              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C29              ; ********** **********
  2+  8C29              ;
  3+  8C29              ;   5/11/22
  4+  8C29              ;
  5+  8C29              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C29              ;
  7+  8C29              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C29              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C29              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C29              ;
 11+  8C29              ;   NO DESTROYERSSSS !!!!!
 12+  8C29
 13+  8C29 E5           Define_atributos push hl
 14+  8C2A C5           	push bc
 15+  8C2B D5           	push de
 16+  8C2C
 17+  8C2C CD 21 8C     	call Calcula_direccion_atributos
 18+  8C2F
 19+  8C2F D9               exx
 20+  8C30 E5               push hl
 21+  8C31 D9               exx
 22+  8C32 D1               pop de
 23+  8C33
 24+  8C33 42               ld b,d
 25+  8C34 7B               ld a,e 									; (Attr) en A.
 26+  8C35
 27+  8C35 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C36 E5            	push hl 								; Guardo dirección de attr.
 29+  8C37
 30+  8C37              ; -----
 31+  8C37
 32+  8C37 77           2 ld (hl),a
 33+  8C38 0D           	dec c 									; Decremento (Columnas).
 34+  8C39 28 03        	jr z,1F
 35+  8C3B 23           	inc hl
 36+  8C3C 18 F9        	jr 2B
 37+  8C3E
 38+  8C3E E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C3F C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C40
 41+  8C40 05           	dec b									; Decremento (Filas).
 42+  8C41 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C43
 44+  8C43 11 20 00     	ld de,32
 45+  8C46 A7           	and a
 46+  8C47 ED 5A        	adc hl,de
 47+  8C49 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C4B
 49+  8C4B D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C4C C1           	pop bc
 51+  8C4D E1           	pop hl
 52+  8C4E
 53+  8C4E C9           	ret
 54+  8C4F
# file closed: Define_atributos.asm
596   8C4F              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C4F              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C4F              ;
  3+  8C4F              ;
  4+  8C4F              ;	CLS.
  5+  8C4F              ;
  6+  8C4F              ;	Limpia la pantalla y define sus atributos.
  7+  8C4F              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C4F              ;
  9+  8C4F              ;	COLORES: 0 ..... NEGRO
 10+  8C4F              ;    		 1 ..... AZUL
 11+  8C4F              ; 			 2 ..... ROJO
 12+  8C4F              ;			 3 ..... MAGENTA
 13+  8C4F              ; 			 4 ..... VERDE
 14+  8C4F              ; 			 5 ..... CIAN
 15+  8C4F              ;			 6 ..... AMARILLO
 16+  8C4F              ; 			 7 ..... BLANCO
 17+  8C4F              ;
 18+  8C4F              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C4F              ;
 20+  8C4F              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C4F
 22+  8C4F
 23+  8C4F 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C52 11 01 40     	LD DE,$4001
 25+  8C55 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C58 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C5A ED B0        	LDIR
 28+  8C5C 01 FF 02     	LD BC,767
 29+  8C5F 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C60 ED B0        	LDIR
 31+  8C62 C9           	ret
 32+  8C63
# file closed: Cls.asm
597   8C63              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C63              ; ******************************************************************************************************************************************************************************************
  2+  8C63              ;
  3+  8C63              ;   19/10/22
  4+  8C63              ;
  5+  8C63              ;	Mov_down
  6+  8C63              ;
  7+  8C63              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C63              ;
  9+  8C63              ;
 10+  8C63 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C66 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C68              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C68              ; 																	; _ en el caso de que no lo haya.
 14+  8C68 3A E6 84     	ld a,(Vel_down)
 15+  8C6B 47           	ld b,a
 16+  8C6C 2A D4 84         ld hl,(Posicion_actual)
 17+  8C6F CD 17 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C72 E6 02        	and 2
 19+  8C74 28 0F        	jr z,1F
 20+  8C76 7C           	ld a,h
 21+  8C77 FE 57        	cp $57
 22+  8C79 20 0A        	jr nz,1F
 23+  8C7B 7D           	ld a,l
 24+  8C7C C6 20        	add $20
 25+  8C7E 30 05        	jr nc,1F
 26+  8C80
 27+  8C80              ; ------------------------------
 28+  8C80 CD 76 8F     	call Reaparece_arriba
 29+  8C83              ;	call Reinicio
 30+  8C83              ; ------------------------------
 31+  8C83
 32+  8C83 18 08        	jr 3F
 33+  8C85 CD CE 89     1 call NextScan
 34+  8C88 22 D4 84     	ld (Posicion_actual),hl
 35+  8C8B 10 E2            djnz 2B
 36+  8C8D CD 8F 8F     3 call Genera_coordenadas
 37+  8C90 C9           	ret
 38+  8C91
 39+  8C91
 40+  8C91              ; ******************************************************************************************************************************************************************************************
 41+  8C91              ;
 42+  8C91              ;   19/10/22
 43+  8C91              ;
 44+  8C91              ;	Mov_up
 45+  8C91              ;
 46+  8C91              ; 	Mueve el Sprite hacia arriba.
 47+  8C91              ;
 48+  8C91              ;
 49+  8C91 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C94 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C96              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C96              ; 																		; _ en el caso de que no lo haya.
 53+  8C96 3A E5 84     	ld a,(Vel_up)
 54+  8C99 47           	ld b,a
 55+  8C9A 2A D4 84     	ld hl,(Posicion_actual)
 56+  8C9D CD 17 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CA0 A7           	and a
 58+  8CA1 20 10        	jr nz,1F
 59+  8CA3 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CA4 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CA6 20 0B            jr nz,1F
 62+  8CA8 7D               ld a,l
 63+  8CA9 D6 20            sub $20
 64+  8CAB 30 06            jr nc,1F
 65+  8CAD 25               dec h
 66+  8CAE
 67+  8CAE              ; -----------------------------
 68+  8CAE CD 66 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CB1              ;	call Reinicio
 70+  8CB1              ; -----------------------------
 71+  8CB1
 72+  8CB1 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CB3 CD DD 89     1 call PreviousScan
 74+  8CB6 22 D4 84     	ld (Posicion_actual),hl
 75+  8CB9 10 E2            djnz 3B
 76+  8CBB CD 8F 8F     2 call Genera_coordenadas
 77+  8CBE C9           	ret
 78+  8CBF
 79+  8CBF              ; ******************************************************************************************************************************************************************************************
 80+  8CBF              ;
 81+  8CBF              ;	19/10/22
 82+  8CBF              ;
 83+  8CBF              ;	Mov_right.
 84+  8CBF              ;
 85+  8CBF              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CBF              ;
 87+  8CBF
 88+  8CBF 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CC2 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CC4              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CC4              ; 																	; _ en el caso de que no lo haya.
 92+  8CC4 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CC7 A7           	and a
 94+  8CC8 28 0B        	jr z,10F
 95+  8CCA
 96+  8CCA 3A F5 84     	ld a,(Ctrl_0)
 97+  8CCD CB 7F        	bit 7,a
 98+  8CCF 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CD1 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CD4 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CD5
102+  8CD5 3A F5 84     10 ld a,(Ctrl_0)
103+  8CD8 CB 77        	bit 6,a
104+  8CDA 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CDC
106+  8CDC CD 25 8F     	call Stop_Amadeus_right
107+  8CDF C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CE0 18 4A        	jr 3F
109+  8CE2
110+  8CE2 3A E1 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CE5 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CE7 20 43        	jr nz,3F
113+  8CE9
114+  8CE9 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CEC A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CED 28 3D        	jr z,3F
117+  8CEF
118+  8CEF              ; ---------- ---------- ----------
119+  8CEF
120+  8CEF 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
121+  8CF2 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
122+  8CF4 28 11        	jr z,1F
123+  8CF6 38 06        	jr c,6F
124+  8CF8 FE 04        	cp 4
125+  8CFA 28 14        	jr z,7F
126+  8CFC 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
127+  8CFE
128+  8CFE              ; ---------- ---------- ----------
129+  8CFE              ;
130+  8CFE              ; Perfiles de velocidad
131+  8CFE              ;
132+  8CFE 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
133+  8D01 FE FE        	cp $fe
134+  8D03 20 27        	jr nz,3F
135+  8D05 18 10        	jr 4F
136+  8D07 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
137+  8D0A FE FD        	cp $fd
138+  8D0C 20 1E        	jr nz,3F
139+  8D0E 18 07        	jr 4F
140+  8D10 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
141+  8D13 FE FB        	cp $fb
142+  8D15 20 15        	jr nz,3F
143+  8D17
144+  8D17              ; ---------- ---------- ----------
145+  8D17
146+  8D17 CD 54 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
147+  8D1A              ;	call Reinicio
148+  8D1A
149+  8D1A              ; ---------- ---------- ----------
150+  8D1A
151+  8D1A 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
152+  8D1C C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
153+  8D1D CD 55 8D     	call DESPLZ_DER
154+  8D20 C1           	pop bc
155+  8D21 10 F9        	djnz 5B
156+  8D23 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
157+  8D26 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
158+  8D27 22 D4 84     	ld (Posicion_actual),hl
159+  8D2A 18 25        	jr 2F 															; Salimos para pintar la nueva posición.
160+  8D2C
161+  8D2C              ; ---------- ---------- ----------
162+  8D2C
163+  8D2C 3A E4 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
164+  8D2F FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
165+  8D31 20 18        	jr nz,8F
166+  8D33 2A D4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
167+  8D36 7D           	ld a,l
168+  8D37 E6 1F        	and $1f
169+  8D39 FE 1F        	cp 31
170+  8D3B 20 05        	jr nz,9F
171+  8D3D
172+  8D3D              ; ---------- ---------- ----------
173+  8D3D
174+  8D3D CD 54 8F     	call Reaparece_izquierda
175+  8D40
176+  8D40              ; ---------- ---------- ----------
177+  8D40
178+  8D40 18 0F        	jr 2F
179+  8D42 2A D4 84     9 ld hl,(Posicion_actual)
180+  8D45 23           	inc hl
181+  8D46 22 D4 84     	ld (Posicion_actual),hl
182+  8D49 18 06        	jr 2F
183+  8D4B 2A D4 84     8 ld hl,(Posicion_actual)
184+  8D4E CD 55 8D     	call DESPLZ_DER
185+  8D51 CD 8F 8F     2 call Genera_coordenadas
186+  8D54 C9           	ret
187+  8D55
188+  8D55              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
189+  8D55              ;
190+  8D55              ;	22/9/22
191+  8D55              ;
192+  8D55
193+  8D55 CD 64 8D     DESPLZ_DER call Desplaza_derecha
194+  8D58 CD 79 8D         call modifica_parametros_1er_DESPLZ_2
195+  8D5B CD 9F 8D         call Ciclo_completo
196+  8D5E 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
197+  8D61 CB FE        	set 7,(hl)
198+  8D63 C9           	ret
199+  8D64
200+  8D64              ; ******************************************************************************************************************************************************************************************
201+  8D64              ;	14/9/22
202+  8D64              ;
203+  8D64
204+  8D64 3A E4 84     Desplaza_derecha ld a,(Vel_right)
205+  8D67 47           	ld b,a
206+  8D68 2A DC 84     	ld hl,(Puntero_DESPLZ)
207+  8D6B 23           1 inc hl
208+  8D6C 23           	inc hl
209+  8D6D 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
210+  8D6F 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
211+  8D72 CD 31 86     	call Extrae_address
212+  8D75
213+  8D75              ;	ld (Caja_de_DESPLZ),hl
214+  8D75 22 D6 84     	ld (Puntero_objeto),hl
215+  8D78
216+  8D78 C9           	ret
217+  8D79
218+  8D79              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8D79              ;
220+  8D79              ;	24/7/22
221+  8D79              ;
222+  8D79              ;	modifica_parametros_1er_DESPLZ_2
223+  8D79              ;
224+  8D79              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8D79              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8D79              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8D79
228+  8D79 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8D7C A7           	and a
230+  8D7D 20 1C        	jr nz,1F
231+  8D7F D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8D81 32 D8 84         ld (CTRL_DESPLZ),a
233+  8D84
234+  8D84 21 D3 84     	ld hl,Columns
235+  8D87 34           	inc (hl)
236+  8D88
237+  8D88 3A E0 84     	ld a,(Cuad_objeto)
238+  8D8B E6 01        	and 1
239+  8D8D 28 0C        	jr z,1F
240+  8D8F 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
241+  8D92 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
242+  8D93 22 D4 84     	ld (Posicion_actual),hl
243+  8D96 CD 31 8F     	call Inc_CTRL_DESPLZ
244+  8D99 18 03        	jr 2F
245+  8D9B CD 31 8F     1 call Inc_CTRL_DESPLZ
246+  8D9E C9           2 ret
247+  8D9F
248+  8D9F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
249+  8D9F              ;
250+  8D9F              ;	24/7/22
251+  8D9F              ;
252+  8D9F              ;	Ciclo_completo.
253+  8D9F              ;
254+  8D9F              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
255+  8D9F              ;
256+  8D9F              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
257+  8D9F              ; 	Decrementamos (Columns).
258+  8D9F              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
259+  8D9F              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
260+  8D9F
261+  8D9F
262+  8D9F 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
263+  8DA2 FE FF        	cp $ff
264+  8DA4 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
265+  8DA6 18 25        	jr 3f
266+  8DA8 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
267+  8DAB 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
268+  8DAC AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
269+  8DAD 32 D8 84     	ld (CTRL_DESPLZ),a
270+  8DB0 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
271+  8DB3 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
272+  8DB5 20 0A        	jr nz,2F
273+  8DB7 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
274+  8DBA 23           	inc hl
275+  8DBB 22 D4 84     	ld (Posicion_actual),hl
276+  8DBE
277+  8DBE CD 8F 8F     	call Genera_coordenadas
278+  8DC1
279+  8DC1
280+  8DC1 2A DA 84     2 ld hl,(Indice_Sprite)
281+  8DC4 22 DC 84     	ld (Puntero_DESPLZ),hl
282+  8DC7 CD 31 86     	call Extrae_address
283+  8DCA 22 D6 84     	ld (Puntero_objeto),hl
284+  8DCD C9           3 ret
285+  8DCE
286+  8DCE              ; ******************************************************************************************************************************************************************************************
287+  8DCE              ;
288+  8DCE              ;	19/10/22
289+  8DCE              ;
290+  8DCE              ;	Mov_left.
291+  8DCE              ;
292+  8DCE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
293+  8DCE              ;
294+  8DCE              Mov_left
295+  8DCE
296+  8DCE 21 F5 84     	ld hl,Ctrl_0
297+  8DD1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
298+  8DD3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
299+  8DD3              ; 																	; _ en el caso de que no lo haya.
300+  8DD3 3A D8 84     	ld a,(CTRL_DESPLZ)
301+  8DD6 A7           	and a
302+  8DD7 20 19        	jr nz,10F
303+  8DD9
304+  8DD9 2A D6 84     	ld hl,(Puntero_objeto)
305+  8DDC 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
306+  8DDF
307+  8DDF 3A F5 84     	ld a,(Ctrl_0)
308+  8DE2 CB 77        	bit 6,a
309+  8DE4 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
310+  8DE6
311+  8DE6 CD 2B 8F     	call Stop_Amadeus_left
312+  8DE9 20 5F        	jr nz,3F
313+  8DEB
314+  8DEB 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
315+  8DEE 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
316+  8DF1 C9           	ret
317+  8DF2
318+  8DF2 3A F5 84     10 ld a,(Ctrl_0)
319+  8DF5 CB 7F        	bit 7,a
320+  8DF7 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
321+  8DF9 21 D8 84     	ld hl,CTRL_DESPLZ
322+  8DFC 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
323+  8DFD
324+  8DFD 3A E1 84     11 ld a,(Coordenada_X)
325+  8E00 A7           	and a
326+  8E01 20 47        	jr nz,3F
327+  8E03 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
328+  8E06 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
329+  8E07 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
330+  8E09
331+  8E09              ; ---------- ---------- ----------
332+  8E09
333+  8E09 3A E3 84     	ld a,(Vel_left)
334+  8E0C FE 02        	cp 2
335+  8E0E 28 0F        	jr z,1F
336+  8E10 38 04        	jr c,6F
337+  8E12 FE 04        	cp 4
338+  8E14 28 12        	jr z,7F
339+  8E16
340+  8E16              ; ---------- ---------- ----------
341+  8E16
342+  8E16 3A D8 84     6 ld a,(CTRL_DESPLZ)
343+  8E19 FE F9        	cp $f9
344+  8E1B 20 2D        	jr nz,3F
345+  8E1D 18 10        	jr 4F
346+  8E1F 3A D8 84     1 ld a,(CTRL_DESPLZ)
347+  8E22 FE FA        	cp $fa
348+  8E24 20 24        	jr nz,3F
349+  8E26 18 07        	jr 4F
350+  8E28 3A D8 84     7 ld a,(CTRL_DESPLZ)
351+  8E2B FE FC        	cp $fc
352+  8E2D 20 1B        	jr nz,3F
353+  8E2F
354+  8E2F              ; ---------- ---------- ----------
355+  8E2F
356+  8E2F CD 42 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
357+  8E32              ;	call Reinicio
358+  8E32
359+  8E32              ; ---------- ---------- ----------
360+  8E32
361+  8E32 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
362+  8E34 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
363+  8E35 2A D6 84     	ld hl,(Puntero_objeto)
364+  8E38 22 DC 84     	ld (Puntero_DESPLZ),hl
365+  8E3B CD 71 8E     	call DESPLZ_IZQ
366+  8E3E C1           	pop bc
367+  8E3F 10 F3        	djnz 5B
368+  8E41 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
369+  8E44 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
370+  8E45 22 D4 84     	ld (Posicion_actual),hl
371+  8E48 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
372+  8E4A
373+  8E4A              ; ---------- ---------- ----------
374+  8E4A
375+  8E4A 3A E3 84     3 ld a,(Vel_left)
376+  8E4D FE 08        	cp 8
377+  8E4F 20 16        	jr nz,8F
378+  8E51 2A D4 84     	ld hl,(Posicion_actual)
379+  8E54 7D           	ld a,l
380+  8E55 E6 1F        	and $1f
381+  8E57 20 05        	jr nz,9F
382+  8E59
383+  8E59              ; ---------- ---------- ----------
384+  8E59
385+  8E59 CD 42 8F     	call Reaparece_derecha
386+  8E5C
387+  8E5C              ; ---------- ---------- ----------
388+  8E5C
389+  8E5C 18 0F        	jr 2F
390+  8E5E 2A D4 84     9 ld hl,(Posicion_actual)
391+  8E61 2B           	dec hl
392+  8E62 22 D4 84     	ld (Posicion_actual),hl
393+  8E65 18 06        	jr 2F
394+  8E67 2A D4 84     8 ld hl,(Posicion_actual)
395+  8E6A CD 71 8E     	call DESPLZ_IZQ
396+  8E6D CD 8F 8F     2 call Genera_coordenadas
397+  8E70 C9           	ret
398+  8E71
399+  8E71              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
400+  8E71              ;
401+  8E71              ;	22/9/22
402+  8E71
403+  8E71 CD 80 8E     DESPLZ_IZQ call Desplaza_izquierda
404+  8E74 CD 95 8E         call modifica_parametros_1er_DESPLZ
405+  8E77 CD B6 8E     	call Ciclo_completo_2
406+  8E7A 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
407+  8E7D CB BE        	res 7,(hl)
408+  8E7F C9           	ret
409+  8E80
410+  8E80 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
411+  8E83 47           	ld b,a
412+  8E84 2A DC 84     	ld hl,(Puntero_DESPLZ)
413+  8E87 2B           1 dec hl
414+  8E88 2B           	dec hl
415+  8E89 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
416+  8E8B 22 DC 84     	ld (Puntero_DESPLZ),hl
417+  8E8E CD 31 86     	call Extrae_address
418+  8E91 22 04 85     	ld (Caja_de_DESPLZ),hl
419+  8E94 C9           	ret
420+  8E95
421+  8E95              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
422+  8E95              ;
423+  8E95              ;	modifica_parametros_1er_DESPLZ
424+  8E95              ;
425+  8E95              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
426+  8E95              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
427+  8E95              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
428+  8E95
429+  8E95 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
430+  8E98 A7           	and a
431+  8E99 20 17        	jr nz,1F
432+  8E9B 21 D3 84     	ld hl,Columns
433+  8E9E 34           	inc (hl)
434+  8E9F 3A E0 84     	ld a,(Cuad_objeto)
435+  8EA2 E6 01        	and 1
436+  8EA4 20 0C        	jr nz,1F
437+  8EA6 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
438+  8EA9 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
439+  8EAA 22 D4 84     	ld (Posicion_actual),hl
440+  8EAD CD 14 8F     	call Dec_CTRL_DESPLZ
441+  8EB0 18 03        	jr 2F
442+  8EB2 CD 14 8F     1 call Dec_CTRL_DESPLZ
443+  8EB5 C9           2 ret
444+  8EB6
445+  8EB6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
446+  8EB6              ;
447+  8EB6 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
448+  8EB9 FE F8        	cp $f8
449+  8EBB 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
450+  8EBD 18 19        	jr 3f
451+  8EBF 21 D3 84     1 ld hl,Columns
452+  8EC2 35           	dec (hl)
453+  8EC3 AF           	xor a
454+  8EC4 32 D8 84     	ld (CTRL_DESPLZ),a
455+  8EC7 3A E0 84     	ld a,(Cuad_objeto)
456+  8ECA E6 01        	and 1
457+  8ECC 28 07        	jr z,2F
458+  8ECE 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
459+  8ED1 2B           	dec hl
460+  8ED2 22 D4 84     	ld (Posicion_actual),hl
461+  8ED5 CD 8F 8F     2 call Genera_coordenadas
462+  8ED8 C9           3 ret
463+  8ED9
464+  8ED9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
465+  8ED9
466+  8ED9 CD C2 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
467+  8EDC              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
468+  8EDC              ;																	; Filas * Columnas en DE´.
469+  8EDC 3A E0 84     	ld a,(Cuad_objeto)
470+  8EDF FE 02        	cp 2
471+  8EE1 38 1A        	jr c,2F
472+  8EE3 28 18        	jr z,2F
473+  8EE5 E6 01        	and 1
474+  8EE7 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
475+  8EE9              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
476+  8EE9              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
477+  8EE9 C5           	push bc
478+  8EEA E5           	push hl
479+  8EEB 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
480+  8EED 0D           	dec c
481+  8EEE 2A FE 84     	ld hl,(Puntero_datas)
482+  8EF1 A7           	and a
483+  8EF2 ED 4A        	adc hl,bc
484+  8EF4 22 FE 84     	ld (Puntero_datas),hl
485+  8EF7 E1           	pop hl
486+  8EF8 C1           	pop bc
487+  8EF9 18 18        	jr 4F
488+  8EFB              1
489+  8EFB              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
490+  8EFB 18 16        	jr 4F
491+  8EFD E6 01        2 and 1
492+  8EFF 28 02        	jr z,3F
493+  8F01              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
494+  8F01 18 10        	jr 4F
495+  8F03              3
496+  8F03              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
497+  8F03 C5           	push bc
498+  8F04 E5           	push hl
499+  8F05 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
500+  8F07 0D           	dec c
501+  8F08 2A FE 84     	ld hl,(Puntero_datas)
502+  8F0B A7           	and a
503+  8F0C ED 42        	sbc hl,bc
504+  8F0E 22 FE 84     	ld (Puntero_datas),hl
505+  8F11 E1           	pop hl
506+  8F12 C1           	pop bc
507+  8F13 C9           4 ret
508+  8F14
509+  8F14              ; ---------- ---------- ---------- ---------- ---------- ----------
510+  8F14              ;
511+  8F14              ;	Dec_CTRL_DESPLZ
512+  8F14              ;
513+  8F14              ;	Subrutina de [modifica_punteros].
514+  8F14              ;
515+  8F14              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
516+  8F14
517+  8F14 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
518+  8F17 3A E3 84     	ld a,(Vel_left)
519+  8F1A A7           	and a
520+  8F1B 28 06        	jr z,1F
521+  8F1D 47           	ld b,a
522+  8F1E 35           3 dec (hl)
523+  8F1F 10 FD        	djnz 3B
524+  8F21 18 01        	jr 2F
525+  8F23 35           1 dec (hl)
526+  8F24 C9           2 ret
527+  8F25
528+  8F25              ; ---------- ---------- ---------- ---------- ---------- ----------
529+  8F25              ;
530+  8F25              ;	19/10/22
531+  8F25              ;
532+  8F25              ;	(cp 29) para un Amadeus de 3 Columns.
533+  8F25              ;	(cp 30)   ""  ""    ""     2 Columns.
534+  8F25
535+  8F25 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
536+  8F28 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
537+  8F2A C9           	ret
538+  8F2B
539+  8F2B              ; ---------- ---------- ---------- ---------- ---------- ----------
540+  8F2B              ;
541+  8F2B              ;	19/10/22
542+  8F2B              ;
543+  8F2B              ;	(cp 2) para un Amadeus de 3 Columns.
544+  8F2B              ;	(cp 1)   ""  ""    ""     2 Columns.
545+  8F2B
546+  8F2B 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
547+  8F2E FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
548+  8F30 C9           	ret
549+  8F31
550+  8F31              ; ---------- ---------- ---------- ---------- ---------- ----------
551+  8F31              ;
552+  8F31              ;	24/7/22
553+  8F31              ;
554+  8F31              ;	Inc_CTRL_DESPLZ
555+  8F31              ;
556+  8F31              ;	Subrutina de [modifica_punteros].
557+  8F31              ;
558+  8F31              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
559+  8F31
560+  8F31 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
561+  8F34 3A E4 84     	ld a,(Vel_right)
562+  8F37 A7           	and a
563+  8F38 28 06        	jr z,1F
564+  8F3A 47           	ld b,a
565+  8F3B 34           3 inc (hl)
566+  8F3C 10 FD        	djnz 3B
567+  8F3E 18 01        	jr 2F
568+  8F40 34           1 inc (hl)
569+  8F41 C9           2 ret
570+  8F42
571+  8F42              ; ---------- ---------- ---------- ---------- ---------- ----------
572+  8F42
573+  8F42 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
574+  8F45 01 1F 00     	ld bc,31
575+  8F48 A7           	and a
576+  8F49 ED 4A        	adc hl,bc
577+  8F4B 22 D4 84     	ld (Posicion_actual),hl
578+  8F4E 21 F5 84     	ld hl,Ctrl_0														; $xxx1
579+  8F51 CB C6        	set 0,(hl)
580+  8F53 C9           	ret
581+  8F54
582+  8F54              ; ---------- ---------- ---------- ---------- ---------- ----------
583+  8F54
584+  8F54 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
585+  8F57 01 1F 00     	ld bc,31
586+  8F5A A7           	and a
587+  8F5B ED 42        	sbc hl,bc
588+  8F5D 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
589+  8F60 21 F5 84     	ld hl,Ctrl_0
590+  8F63 CB CE        	set 1,(hl)
591+  8F65 C9           	ret
592+  8F66
593+  8F66              ; ---------- ---------- ---------- ---------- ---------- ----------
594+  8F66
595+  8F66 24           Reaparece_abajo inc h
596+  8F67 01 E0 17     	ld bc,$17e0
597+  8F6A A7           	and a
598+  8F6B ED 4A        	adc hl,bc
599+  8F6D 22 D4 84     	ld (Posicion_actual),hl
600+  8F70 21 F5 84     	ld hl,Ctrl_0
601+  8F73 CB D6        	set 2,(hl)
602+  8F75 C9           	ret
603+  8F76
604+  8F76              ; ---------- ---------- ---------- ---------- ---------- ----------
605+  8F76
606+  8F76 01 E0 17     Reaparece_arriba ld bc,$17e0
607+  8F79 A7           	and a
608+  8F7A ED 42        	sbc hl,bc
609+  8F7C 22 D4 84     	ld (Posicion_actual),hl
610+  8F7F 21 F5 84     	ld hl,Ctrl_0
611+  8F82 CB DE        	set 3,(hl)
612+  8F84 C9           	ret
613+  8F85
614+  8F85              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
615+  8F85
616+  8F85 2A DE 84     Reinicio ld hl,(Posicion_inicio)
617+  8F88
618+  8F88              ;	ld (Posicion_actual),hl
619+  8F88 21 00 00     	ld hl,0
620+  8F8B 22 D4 84     	ld (Posicion_actual),hl
621+  8F8E
622+  8F8E
623+  8F8E C9           	ret
# file closed: Direcciones.asm
598   8F8F              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F8F              ;	12/12/22
  2+  8F8F              ;
  3+  8F8F              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F8F              ;	Fila superior "0", Columna izquierda "0".
  5+  8F8F              ;
  6+  8F8F              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F8F              ;
  8+  8F8F              ;	Modifica: A
  9+  8F8F
 10+  8F8F C5           Genera_coordenadas push bc
 11+  8F90 E5           	push hl
 12+  8F91 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F94 7D           	ld a,l
 14+  8F95 E6 1F        	and $1f
 15+  8F97 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F9A CD 17 8C     	call calcula_tercio
 17+  8F9D 47           	ld b,a
 18+  8F9E 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F9F 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FA1 7D           	ld a,l
 21+  8FA2 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FA4 28 05        	jr z,2F
 23+  8FA6 0C           1 inc c
 24+  8FA7 D6 20        	sub 32
 25+  8FA9 20 FB        	jr nz,1B
 26+  8FAB 0C           2 inc c
 27+  8FAC 04           	inc b
 28+  8FAD 05           	dec b
 29+  8FAE 28 04        	jr z,3F
 30+  8FB0 3E E0        	ld a,$e0
 31+  8FB2 10 F2        	djnz 1B
 32+  8FB4 79           3 ld a,c
 33+  8FB5 3D           	dec a
 34+  8FB6 32 E2 84     	ld (Coordenada_y),a
 35+  8FB9 E1           	pop hl
 36+  8FBA C1           	pop bc
 37+  8FBB C9           	ret
# file closed: Genera_coordenadas.asm
599   8FBC              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FBC
  2+  8FBC
  3+  8FBC              ;   11/8/22
  4+  8FBC              ;
  5+  8FBC              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FBC              ;
  7+  8FBC              ;   Mov_obj.asm
  8+  8FBC              ;
  9+  8FBC              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FBC              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FBC              ;
 12+  8FBC              ;   Codificación:
 13+  8FBC              ;
 14+  8FBC              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FBC              ;
 16+  8FBC
 17+  8FBC 02 10 00     Izquierda db 2,%00010000,0
 18+  8FBF 02 20 00     Derecha db 2,%00100000,0
 19+  8FC2 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FC6 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FCA 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FCE 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FD2 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FD6 60 42 60 40
 23+  8FDA 63
 24+  8FDB 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FDF 22 A3 80 A0
 25+  8FE3 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FE7 84 A0 83 A0
 26+  8FEB 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FEF 80 A3 22 A0
 27+  8FF3 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FF7 40 60 42 60
 28+  8FFB 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FFF
 30+  8FFF BF 8F        Indice_mov_Badsat defw Derecha
 31+  9001 C6 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  9003 CE 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  9005 C2 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  9007
 35+  9007 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  900A A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  900B 28 02            jr z,1F
 38+  900D 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  900F
 40+  900F 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  9012 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  9014 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  9017              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  9017 2A F9 84         ld hl,(Puntero_mov)
 45+  901A 7E               ld a,(hl)
 46+  901B 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  901E 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  901F 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  9022
 50+  9022 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  9025 A7               and a
 52+  9026 20 0C            jr nz,12F
 53+  9028 2A F9 84         ld hl,(Puntero_mov)
 54+  902B 7E               ld a,(hl)
 55+  902C A7               and a
 56+  902D 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  902F
 58+  902F E6 0F            and $0f
 59+  9031 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  9034              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  9034 2A F9 84     12 ld hl,(Puntero_mov)
 62+  9037 CB 7E            bit 7,(hl)
 63+  9039 28 03            jr z,2F
 64+  903B CD 63 8C         call Mov_down
 65+  903E 2A F9 84     2 ld hl, (Puntero_mov)
 66+  9041 CB 76            bit 6,(hl)
 67+  9043 28 03            jr z,3F
 68+  9045 CD 91 8C         call Mov_up
 69+  9048 2A F9 84     3 ld hl, (Puntero_mov)
 70+  904B CB 6E            bit 5,(hl)
 71+  904D 28 03            jr z,4F
 72+  904F CD BF 8C         call Mov_right
 73+  9052 2A F9 84     4 ld hl, (Puntero_mov)
 74+  9055 CB 66            bit 4,(hl)
 75+  9057 28 03            jr z,5F
 76+  9059 CD CE 8D         call Mov_left
 77+  905C
 78+  905C              ; ---------- --------- --------- ---------- ----------
 79+  905C
 80+  905C 3A FD 84     5 ld a,(Repetimos_db)
 81+  905F A7               and a
 82+  9060 28 07            jr z,6F
 83+  9062 3D               dec a
 84+  9063 32 FD 84         ld (Repetimos_db),a
 85+  9066 28 01            jr z,6f
 86+  9068 C9           11 ret
 87+  9069 21 FB 84     6 ld hl,Contador_db_mov
 88+  906C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  906D 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9070 23               inc hl
 91+  9071 22 F9 84         ld (Puntero_mov),hl
 92+  9074 18 F2            jr 11B
 93+  9076 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9079 3A FC 84         ld a,(Incrementa_puntero)
 95+  907C 47               ld b,a
 96+  907D 23           8 inc hl
 97+  907E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9080 5E               ld e,(hl)
 99+  9081 23               inc hl
100+  9082 56               ld d,(hl)
101+  9083 EB               ex de,hl
102+  9084 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  9087 18 DF            jr 11B
104+  9089
105+  9089              ; ---------- --------- --------- ---------- ----------
106+  9089              ;
107+  9089              ;   11/8/22
108+  9089              ;
109+  9089              ;   Prepara_Puntero_mov
110+  9089
111+  9089 E5           Prepara_Puntero_mov push hl
112+  908A D5               push de
113+  908B 2A F7 84         ld hl,(Puntero_indice_mov)
114+  908E 5E               ld e,(hl)
115+  908F 23               inc hl
116+  9090 56               ld d,(hl)
117+  9091 EB               ex de,hl
118+  9092 22 F9 84         ld (Puntero_mov),hl
119+  9095 D1               pop de
120+  9096 E1               pop hl
121+  9097 C9               ret
122+  9098
123+  9098              ; ---------- --------- --------- ---------- ----------
124+  9098              ;
125+  9098              ;   11/8/22
126+  9098              ;
127+  9098              ;   Reinicia_el_movimiento
128+  9098
129+  9098 CD 89 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  909B AF               xor a
131+  909C 32 FB 84         ld (Contador_db_mov),a
132+  909F 32 FC 84         ld (Incrementa_puntero),a
133+  90A2 C3 07 90         jp Movimiento
134+  90A5
135+  90A5              ; ---------- --------- --------- ---------- ----------
136+  90A5
137+  90A5
138+  90A5
139+  90A5
140+  90A5
141+  90A5
142+  90A5
143+  90A5
144+  90A5
145+  90A5
146+  90A5
147+  90A5
148+  90A5
149+  90A5
150+  90A5
151+  90A5
152+  90A5
153+  90A5
# file closed: Patrones_de_mov.asm
600   90A5              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90A5              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90A5              ;
  3+  90A5              ;	3/1/23
  4+  90A5              ;
  5+  90A5              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90A5
  7+  90A5              ;	ADC HL,SP	LD (addr),SP
  8+  90A5              ;	ADD HL,SP	LD SP,(addr)
  9+  90A5              ;	ADD IX,SP	LD SP,nn
 10+  90A5              ; 	ADD IY,SP	LD SP,HL
 11+  90A5              ;				LD SP,IX
 12+  90A5              ;	DEC SP		LD SP,IY
 13+  90A5
 14+  90A5              ;	EX (SP),HL
 15+  90A5              ;	EX (SP),IX
 16+  90A5              ;	EX (SP),IY
 17+  90A5
 18+  90A5              ;	INC SP
 19+  90A5
 20+  90A5
 21+  90A5                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
601   7FC0
602   7FC0              	SAVESNA "Pruebas.sna", START
603   7FC0
604   7FC0
605   7FC0
# file closed: Banco_de_pruebas.asm
