# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 65 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 00 84        	defw Entidad_1
  9+  83C2 34 84        	defw Entidad_2
 10+  83C4 68 84        	defw Entidad_3
 11+  83C6 9C 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 28+  83D8 00 00        	defw 0		 									; (Puntero_DESPLZ).
 29+  83DA D0 50        	defw $50d0										; (Posicion_inicio).
 30+  83DC 04           	db 4 											; (Cuad_objeto).
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 33+  83E1
 34+  83E1 00 00        	db 0,0											; Variables_de_borrado
 35+  83E3 00 00        	defw 0											;	" " " " " " "
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00 00     	db 0,0,0										;	" " " " " " "
 38+  83EA
 39+  83EA 00 00        	db 0,0											; Variables_de_pintado
 40+  83EC 00 00        	defw 0											;	" " " " " " "
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00 00     	db 0,0,0										;	" " " " " " "
 43+  83F3
 44+  83F3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 45+  83F5
 46+  83F5 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 47+  83F9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 48+  83FC
 49+  83FC 00           	db 0 											; (Columnas).
 50+  83FD 00 00        	defw 0											; (Limite_horizontal).
 51+  83FF 00           	db 0											; (Limite_vertical).
 52+  8400
 53+  8400              ; ---------- ---------- ---------- ---------- ----------
 54+  8400
 55+  8400 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 56+  8402 00 00        	defw 0											; (Posicion_actual).
 57+  8404 00 00        	defw 0 											; (Puntero_objeto).
 58+  8406 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 59+  8409
 60+  8409 00           	db %00000000 									; (Attr).
 61+  840A 00 00        	defw 0											; (Indice_Sprite).
 62+  840C 00 00        	defw 0											; (Puntero_DESPLZ).
 63+  840E 00 00        	defw 0											; (Posicion_inicio).
 64+  8410 00           	db 0											; (Cuad_objeto).
 65+  8411
 66+  8411 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 67+  8415
 68+  8415 00 00        	db 0,0										    ; Variables_de_borrado
 69+  8417 00 00        	defw 0											;	" " " " " " "
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00 00     	db 0,0,0										;	" " " " " " "
 72+  841E
 73+  841E 00 00        	db 0,0											; Variables_de_pintado
 74+  8420 00 00        	defw 0											;	" " " " " " "
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00 00     	db 0,0,0										;	" " " " " " "
 77+  8427
 78+  8427 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 79+  8429
 80+  8429 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 81+  842D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 82+  8430
 83+  8430 00           	db 0 											; (Columnas).
 84+  8431 00 00        	defw 0											; (Limite_horizontal).
 85+  8433 00           	db 0											; (Limite_vertical).
 86+  8434
 87+  8434              ; ---------- ---------- ---------- ---------- ----------
 88+  8434
 89+  8434 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 90+  8436 00 00        	defw 0                                          ; (Posicion_actual).
 91+  8438 00 00        	defw 0											; (Puntero_objeto).
 92+  843A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 93+  843D
 94+  843D 02           	db %00000010									; (Attr).
 95+  843E 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 96+  8440 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 97+  8442 7E 47        	defw $477e                                      ; (Posicion_inicio).
 98+  8444 02           	db 2											; (Cuad_objeto).
 99+  8445
100+  8445 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
101+  8449
102+  8449 00 00        	db 0,0											; Variables_de_borrado
103+  844B 00 00        	defw 0										 	;	" " " " " " "
104+  844D 00 00        	defw 0											;	" " " " " " "
105+  844F 00 00 00     	db 0,0,0										;	" " " " " " "
106+  8452
107+  8452 00 00        	db 0,0											; Variables_de_pintado
108+  8454 00 00        	defw 0											;	" " " " " " "
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00 00     	db 0,0,0										;	" " " " " " "
111+  845B
112+  845B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
113+  845D
114+  845D 35 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
115+  8461 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
116+  8464
117+  8464 00           	db 0 											; (Columnas).
118+  8465 00 00        	defw 0											; (Limite_horizontal).
119+  8467 00           	db 0											; (Limite_vertical).
120+  8468
121+  8468              ; ---------- ---------- ---------- ---------- ----------
122+  8468
123+  8468 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
124+  846A 00 00        	defw 0                                          ; (Posicion_actual).
125+  846C 00 00        	defw 0											; (Puntero_objeto).
126+  846E 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
127+  8471
128+  8471 04           	db %00000100									; (Attr).
129+  8472 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
130+  8474 00 00        	defw 0                                          ; (Puntero_DESPLZ).
131+  8476 A1 47        	defw $47a1                                      ; (Posicion_inicio).
132+  8478 01           	db 1											; (Cuad_objeto).
133+  8479
134+  8479 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
135+  847D
136+  847D 00 00        	db 0,0											; Variables_de_borrado
137+  847F 00 00        	defw 0										 	;	" " " " " " "
138+  8481 00 00        	defw 0											;	" " " " " " "
139+  8483 00 00 00     	db 0,0,0										;	" " " " " " "
140+  8486
141+  8486 00 00        	db 0,0											; Variables_de_pintado
142+  8488 00 00        	defw 0											;	" " " " " " "
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00 00     	db 0,0,0										;	" " " " " " "
145+  848F
146+  848F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
147+  8491
148+  8491 37 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
149+  8495 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
150+  8498
151+  8498 00           	db 0 											; (Columnas).
152+  8499 00 00        	defw 0											; (Limite_horizontal).
153+  849B 00           	db 0											; (Limite_vertical).
154+  849C
155+  849C              ; ---------- ---------- ---------- ---------- ----------
156+  849C
157+  849C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
158+  849E 00 00        	defw 0                                          ; (Posicion_actual).
159+  84A0 00 00        	defw 0 											; (Puntero_objeto).
160+  84A2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
161+  84A5
162+  84A5 01           	db %00000001									; (Attr).
163+  84A6 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
164+  84A8 00 00        	defw 0                                          ; (Puntero_DESPLZ).
165+  84AA BE 47        	defw $47be                                      ; (Posicion_inicio).
166+  84AC 00           	db 0											; (Cuad_objeto).
167+  84AD
168+  84AD 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
169+  84B1
170+  84B1 00 00        	db 0,0											; Variables_de_borrado
171+  84B3 00 00        	defw 0										 	;	" " " " " " "
172+  84B5 00 00        	defw 0											;	" " " " " " "
173+  84B7 00 00 00     	db 0,0,0										;	" " " " " " "
174+  84BA
175+  84BA 00 00        	db 0,0											; Variables_de_pintado
176+  84BC 00 00        	defw 0											;	" " " " " " "
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84C3
180+  84C3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
181+  84C5
182+  84C5 27 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
183+  84C9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
184+  84CC
185+  84CC 00           	db 0 											; (Columnas).
186+  84CD 00 00        	defw 0											; (Limite_horizontal).
187+  84CF 00           	db 0											; (Limite_vertical).
188+  84D0
# file closed: Entidades.asm
 21   84D0
 22   84D0              ; ******************************************************************************************************************************************************************************************
 23   84D0              ; Constantes.
 24   84D0              ; ******************************************************************************************************************************************************************************************
 25   84D0              ;
 26   84D0              ; 8/11/22
 27   84D0              ;
 28   84D0              ; Constantes generales.
 29   84D0              ;
 30   84D0
 31   84D0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D0
 37   84D0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D0
 40   84D0
 41   84D0              ; ******************************************************************************************************************************************************************************************
 42   84D0              ; Variables.
 43   84D0              ; ******************************************************************************************************************************************************************************************
 44   84D0              ;
 45   84D0              ; 10/11/22
 46   84D0              ;
 47   84D0              ; Variables de DRAW. (Motor principal).
 48   84D0              ;
 49   84D0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D0
 51   84D0 02           Filas db 2												; Filas. [DRAW]
 52   84D1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D2 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D9
 62   84D9              ; ---------- ---------- ----------
 63   84D9
 64   84D9
 65   84D9 04           Attr db %00000100										; Atributos de la entidad:
 66   84DA
 67   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DA              ;
 69   84DA              ;	COLORES: 0 ..... NEGRO
 70   84DA              ;    		 1 ..... AZUL
 71   84DA              ; 			 2 ..... ROJO
 72   84DA              ;			 3 ..... MAGENTA
 73   84DA              ; 			 4 ..... VERDE
 74   84DA              ; 			 5 ..... CIAN
 75   84DA              ;			 6 ..... AMARILLO
 76   84DA              ; 			 7 ..... BLANCO
 77   84DA
 78   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DC 00 00        Puntero_DESPLZ defw 0
 80   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E1
 83   84E1              ; Variables de objeto. (Características).
 84   84E1
 85   84E1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E4 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E5
 90   84E5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E9 00 00        	defw 0
 93   84EB 00 00 00     	db 0,0,0
 94   84EE
 95   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F0 00 00        	defw 0
 97   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F4 00 00 00     	db 0,0,0
 99   84F7
100   84F7              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F7
102   84F7 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F8              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F8              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F8              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F8              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F8              ;
108   84F8              ; 														DESCRIPCIÖN:
109   84F8              ;
110   84F8              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F8              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F8              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F8              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F8              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F8              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F8              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F8              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F8              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F8              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F8              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F8              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F8              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F8              ;
124   84F8              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F8              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F8              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F8
128   84F8 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F9
130   84F9              ; Movimiento.
131   84F9
132   84F9 29 90        Puntero_indice_mov defw Indice_mov_Derecha
133   84FB 00 00        Puntero_mov defw 0
134   84FD 00           Contador_db_mov db 0
135   84FE 00           Incrementa_puntero db 0
136   84FF 00           Repetimos_db db 0
137   8500
138   8500
139   8500              ; Variables de funcionamiento. [DRAW].
140   8500
141   8500 00           Columnas db 0
142   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8504
146   8504              ; 52 Bytes por entidad.
147   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8504              ;					         		---------;      ;---------
149   8504
150   8504
151   8504              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8504              ; Gestión de ENTIDADES.
153   8504
154   8504 00 00        Puntero_store_entidades defw 0
155   8506 00 00        Puntero_restore_entidades defw 0
156   8508 00 00        Indice_restore defw 0
157   850A 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850C              ;														; _ (Numero_de_malotes)="0".
162   850C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850E              ;														; _variable para almacenar lo posición del puntero_
164   850E              ; 														; _de pila, SP.
165   850E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8510              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8510 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8512              ;														; _el snapshot de los registros de la siguiente entidad.
169   8512              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8512
171   8512              ; Gestión de FRAMES.
172   8512
173   8512 00           Switch db 0
174   8513
175   8513              ; Variables de Raster y localización en pantalla.
176   8513
177   8513 00 FF        Temp_Raster defw $ff00
178   8515
179   8515              ; Rutina principal *************************************************************************************************************************************************************************
180   8515              ;
181   8515              ;	14/11/22
182   8515
183   8515 31 FF FF     START ld sp,$ffff
184   8518
185   8518 3E A0        	ld a,$a0
186   851A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851E F3           	DI
189   851F
190   851F 3E 01        	ld a,1
191   8521 D3 FE        	out ($fe),a
192   8523
193   8523 3E 07        	ld a,%00000111
194   8525 CD D9 8C     	call Cls
195   8528
196   8528              ;	call Pinta_FILAS
197   8528
198   8528 CD 06 87     	call Pulsa_ENTER
199   852B
200   852B 21 0A 85     	ld hl,Numero_de_entidades
201   852E 46           	ld b,(hl)
202   852F 04           	inc b
203   8530 05           	dec b
204   8531 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 51 86     	call Inicia_punteros_de_entidades
211   8536
212   8536              ;	INICIA ENTIDADES!!!!!
213   8536
214   8536 C5           1 push bc  												; Guardo el contador de entidades.
215   8537 CD 84 86      	call Inicia_Puntero_objeto
216   853A CD 5D 87     	call Draw
217   853D CD A0 7F     	call Guarda_foto_registros
218   8540 CD A1 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8543 C1           	pop bc
220   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   8546
222   8546              ; 	INICIA AMADEUS!!!!!
223   8546
224   8546 CD E2 86     3 call Restore_Amadeus
225   8549 CD 84 86     	call Inicia_Puntero_objeto
226   854C CD 5D 87     	call Draw
227   854F CD A0 7F     	call Guarda_foto_registros
228   8552 CD F4 86     	call Store_Amadeus
229   8555
230   8555              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   8555
232   8555 CD 51 86     	call Inicia_punteros_de_entidades
233   8558 CD D0 86     	call Restore_Primera_entidad
234   855B 3A 0A 85     	ld a,(Numero_de_entidades)
235   855E 3C           	inc a
236   855F 32 0B 85     	ld (Numero_de_malotes),a
237   8562
238   8562 FB           2 ei
239   8563 18 FD        	jr 2B
240   8565
241   8565              ; -----------------------------------------------------------------------------------
242   8565
243   8565              Frame
244   8565
245   8565              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
246   8565              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
247   8565
248   8565 3E 07            ld a,7
249   8567 D3 FE            out ($fe),a
250   8569 CD 61 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
251   856C 3E 01            ld a,1
252   856E D3 FE            out ($fe),a
253   8570
254   8570              ; ----------------------------------------------------------------------
255   8570
256   8570 21 00 70     	ld hl,Album_de_fotos
257   8573 22 10 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
258   8576              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
259   8576 3A 0A 85         ld a,(Numero_de_entidades)
260   8579 47               ld b,a
261   857A A7           	and a
262   857B 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
263   857D
264   857D C5           2 push bc
265   857E CD CA 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
266   8581 3A F7 84     	ld a,(Ctrl_0)
267   8584 CB 67        	bit 4,a
268   8586 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
269   8588 CD 18 86         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
270   858B 21 F7 84     1 ld hl,Ctrl_0
271   858E CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
272   8590 AF           	xor a
273   8591 32 F8 84     	ld (Obj_dibujado),a
274   8594 CD A1 86     	call Store_Restore_entidades
275   8597 C1           	pop bc
276   8598 10 E3        	djnz 2B
277   859A
278   859A CD E2 86     4 call Restore_Amadeus
279   859D CD E9 85     	call Mov_Amadeus
280   85A0 3A F7 84     	ld a,(Ctrl_0)
281   85A3 CB 67        	bit 4,a
282   85A5 28 09        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
283   85A7 CD 45 86      	call Repone_pintar
284   85AA CD 5D 87     	call Draw
285   85AD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
286   85B0
287   85B0 21 F7 84     3 ld hl,Ctrl_0
288   85B3 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
289   85B5 AF           	xor a
290   85B6 32 F8 84     	ld (Obj_dibujado),a
291   85B9 CD F4 86     	call Store_Amadeus
292   85BC
293   85BC              ; -----
294   85BC
295   85BC CD 51 86     	call Inicia_punteros_de_entidades
296   85BF CD D0 86     	call Restore_Primera_entidad
297   85C2 CD 67 86     	call Calcula_numero_de_malotes
298   85C5
299   85C5 3E 00        	ld a,0
300   85C7 D3 FE        	out ($fe),a
301   85C9 C9           	ret
302   85CA
303   85CA              ; --------------------------------------------------------------------------------------------------------------
304   85CA              ;
305   85CA              ;	29/1/23
306   85CA
307   85CA              Mov_obj
308   85CA
309   85CA              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
310   85CA
311   85CA AF           	xor a
312   85CB 32 F8 84     	ld (Obj_dibujado),a
313   85CE CD 22 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
314   85D1              ;														; Obj_dibujado="0".
315   85D1              ; Movemos Entidades malignas.
316   85D1
317   85D1 CD 39 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
318   85D4 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
319   85D7 CB 67        	bit 4,a
320   85D9 C8           	ret z
321   85DA
322   85DA              ; ---------
323   85DA
324   85DA 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
325   85DC 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
326   85DF CD 22 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
327   85E2 CD 39 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
328   85E5 CD 08 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
329   85E8 C9           	ret													; _de la misma.
330   85E9
331   85E9              ; --------------------------------------------------------------------------------------------------------------
332   85E9              ;
333   85E9              ;	29/1/23
334   85E9
335   85E9              Mov_Amadeus
336   85E9
337   85E9 AF           	xor a
338   85EA 32 F8 84     	ld (Obj_dibujado),a
339   85ED CD 22 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
340   85F0              ;														; Obj_dibujado="0".
341   85F0              ; Movemos Amadeus.
342   85F0
343   85F0 CD 1A 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
344   85F3 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
345   85F6 CB 67        	bit 4,a
346   85F8 C8           	ret z
347   85F9
348   85F9              ; ---------
349   85F9
350   85F9 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
351   85FB 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
352   85FE CD 22 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
353   8601 CD 39 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
354   8604 CD 08 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
355   8607 C9           	ret													; _de la misma.
356   8608
357   8608              ; --------------------------------------------------------------------------------------------------------------
358   8608              ;
359   8608              ;	29/01/23
360   8608              ;
361   8608              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN").
362   8608
363   8608 CD 37 8A     Guarda_foto_Amadeus	call Prepara_draw
364   860B CD 71 89     	call calcula_CColumnass
365   860E CD A8 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
366   8611 CD FD 89     	call Define_rutina_de_impresion
367   8614 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
368   8617 C9           	ret
369   8618
370   8618              ; --------------------------------------------------------------------------------------------------------------
371   8618
372   8618 CD 45 86     Borra_Pinta_obj call Repone_pintar
373   861B CD 5D 87     	call Draw
374   861E CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
375   8621 C9           	ret
376   8622
377   8622              ; --------------------------------------------------------------------------------------------------------------
378   8622
379   8622 21 D0 84     Prepara_var_pintado_borrado	ld hl,Filas
380   8625 3A F8 84     	ld a,(Obj_dibujado)
381   8628 A7           	and a
382   8629 28 05        	jr z,1F
383   862B 11 EE 84     	ld de,Variables_de_pintado
384   862E 18 03        	jr 2F
385   8630 11 E5 84     1 ld de,Variables_de_borrado
386   8633 01 09 00     2 ld bc,9
387   8636 ED B0        	ldir
388   8638 C9           	ret
389   8639
390   8639 21 E5 84     Repone_borrar ld hl,Variables_de_borrado
391   863C 11 D0 84     	ld de,Filas
392   863F 01 09 00     	ld bc,9
393   8642 ED B0        	ldir
394   8644 C9           	ret
395   8645
396   8645 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
397   8648 11 D0 84     	ld de,Filas
398   864B 01 09 00     	ld bc,9
399   864E ED B0        	ldir
400   8650 C9           	ret
401   8651
402   8651              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
403   8651              ;	ld (Caja_de_BORRADO),hl
404   8651              ;	ret
405   8651
406   8651              ; *************************************************************************************************************************************************************
407   8651              ;
408   8651              ; 8/1/23
409   8651              ;
410   8651              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
411   8651              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
412   8651              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
413   8651
414   8651              ; Destruye HL y DE !!!!!
415   8651
416   8651 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
417   8654 CD 7E 86         call Extrae_address
418   8657 22 04 85         ld (Puntero_store_entidades),hl
419   865A 21 C2 83     	ld hl,Indice_de_entidades+2
420   865D 22 08 85     	ld (Indice_restore),hl
421   8660 CD 7E 86     	call Extrae_address
422   8663 22 06 85     	ld (Puntero_restore_entidades),hl
423   8666 C9               ret
424   8667
425   8667              ; -------------------------------------------------------------------------------------------------------------
426   8667              ;
427   8667              ; 30/1/23
428   8667              ;
429   8667
430   8667 2A 10 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
431   866A 7D           	ld a,l
432   866B A7           	and a
433   866C 28 0C        	jr z,3F
434   866E AF           	xor a
435   866F 67           	ld h,a
436   8670 7D           	ld a,l
437   8671 D6 06        1 sub 6
438   8673 28 03        	jr z,2F
439   8675 24           	inc h
440   8676 18 F9        	jr 1B
441   8678 24           2 inc h
442   8679 7C           	ld a,h
443   867A 32 0B 85     3 ld (Numero_de_malotes),a
444   867D C9           	ret
445   867E
446   867E              ; *************************************************************************************************************************************************************
447   867E              ;
448   867E              ; 20/10/22
449   867E              ;
450   867E              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
451   867E              ;
452   867E              ; Destruye el puntero y DE !!!!!
453   867E
454   867E 5E           Extrae_address ld e,(hl)
455   867F 23           	inc hl
456   8680 56           	ld d,(hl)
457   8681 2B           	dec hl
458   8682 EB           	ex de,hl
459   8683 C9           	ret
460   8684
461   8684              ; *************************************************************************************************************************************************************
462   8684              ;
463   8684              ;	21/9/22
464   8684              ;
465   8684              ;   Destruye HL y BC !!!!!,
466   8684
467   8684 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
468   8687 22 DC 84     	ld (Puntero_DESPLZ),hl
469   868A CD 7E 86     	call Extrae_address
470   868D 22 D4 84     	ld (Puntero_objeto),hl
471   8690
472   8690              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
473   8690
474   8690 21 10 83     	ld hl,Amadeus
475   8693 ED 4B D4 84  	ld bc,(Puntero_objeto)
476   8697 B7 ED 42     	sub hl,bc
477   869A C0           	ret nz
478   869B 21 F7 84     	ld hl,Ctrl_0
479   869E CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
480   86A0 C9           	ret 												; _de nuestra nave en los extremos.
481   86A1
482   86A1              ; *************************************************************************************************************************************************************
483   86A1              ;
484   86A1              ;	8/1/23
485   86A1              ;
486   86A1              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
487   86A1              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
488   86A1
489   86A1              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
490   86A1              ;	_de la 2ª y 3ª entidad respectivamente.
491   86A1
492   86A1
493   86A1
494   86A1              Store_Restore_entidades
495   86A1
496   86A1 E5           	push hl
497   86A2 D5           	push de
498   86A3 C5            	push bc
499   86A4
500   86A4              ;	STORE !!!!!
501   86A4              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
502   86A4
503   86A4 21 D0 84     	ld hl,Filas
504   86A7 ED 5B 04 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
505   86AB 01 34 00     	ld bc,52
506   86AE ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
507   86B0
508   86B0              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
509   86B0
510   86B0 2A 06 85     	ld hl,(Puntero_restore_entidades)
511   86B3 22 04 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
512   86B6 11 D0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
513   86B9 01 34 00     	ld bc,52
514   86BC ED B0        	ldir
515   86BE
516   86BE              ;	Incrementa RESTORE !!!!!
517   86BE
518   86BE 2A 08 85         ld hl,(Indice_restore)
519   86C1 23           	inc hl
520   86C2 23           	inc hl
521   86C3 22 08 85     	ld (Indice_restore),hl
522   86C6 CD 7E 86         call Extrae_address
523   86C9 22 06 85         ld (Puntero_restore_entidades),hl
524   86CC C1           	pop bc
525   86CD D1           	pop de
526   86CE E1           	pop hl
527   86CF C9           	ret
528   86D0
529   86D0              ; **************************************************************************************************
530   86D0              ;
531   86D0              ;	29/10/22
532   86D0              ;
533   86D0              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
534   86D0
535   86D0 E5           Restore_Primera_entidad push hl
536   86D1 D5           	push de
537   86D2 C5            	push bc
538   86D3 2A 04 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
539   86D6 11 D0 84     	ld de,Filas
540   86D9 01 34 00     	ld bc,52
541   86DC ED B0        	ldir
542   86DE C1           	pop bc
543   86DF D1           	pop de
544   86E0 E1           	pop hl
545   86E1 C9           	ret
546   86E2
547   86E2              ; **************************************************************************************************
548   86E2              ;
549   86E2              ;	25/01/23
550   86E2              ;
551   86E2              ;	Restore_Amadeus
552   86E2              ;
553   86E2              ;	Cargamos en DRAW los parámetros de Amadeus.
554   86E2              ;
555   86E2
556   86E2 E5           Restore_Amadeus	push hl
557   86E3 D5           	push de
558   86E4 C5            	push bc
559   86E5 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
560   86E8 11 D0 84     	ld de,Filas
561   86EB 01 34 00     	ld bc,52
562   86EE ED B0        	ldir
563   86F0 C1           	pop bc
564   86F1 D1           	pop de
565   86F2 E1           	pop hl
566   86F3 C9           	ret
567   86F4
568   86F4              ; *************************************************************************************************************************************************************
569   86F4              ;
570   86F4              ;	29/01/23
571   86F4              ;
572   86F4              ;	Store_Amadeus
573   86F4              ;
574   86F4              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
575   86F4              ;
576   86F4
577   86F4 E5           Store_Amadeus push hl
578   86F5 D5           	push de
579   86F6 C5            	push bc
580   86F7 21 D0 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
581   86FA 11 CC 83     	ld de,Amadeus_db
582   86FD 01 34 00     	ld bc,52
583   8700 ED B0        	ldir
584   8702 C1           	pop bc
585   8703 D1           	pop de
586   8704 E1           	pop hl
587   8705 C9           	ret
588   8706
589   8706              ; **************************************************************************************************
590   8706
591   8706              ; Teclado.
592   8706
593   8706 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
594   8708 DB FE        	in a,($fe)
595   870A E6 01        	and $01
596   870C 28 02        	jr z,1f
597   870E 18 F6        	jr Pulsa_ENTER
598   8710 C9           1 ret
599   8711
600   8711              ; **************************************************************************************************
601   8711              ;
602   8711              ; Temporización.
603   8711
604   8711              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
605   8711              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
606   8711              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
607   8711              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
608   8711
609   8711              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
610   8711              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
611   8711              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
612   8711
613   8711              ; A partir de $4f61 no hace falta DELAY.
614   8711
615   8711              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
616   8711
617   8711 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
618   8714 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
619   8715 78           	LD A,B
620   8716 A7           	AND A
621   8717 20 FB        	JR NZ,wait
622   8719 C9           	RET
623   871A
624   871A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
625   871A              ;
626   871A              ;	21/4/22
627   871A
628   871A              Movimiento_Amadeus
629   871A
630   871A 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
631   871C DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
632   871E E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
633   8720 CC 3C 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
634   8723 3E F7        	ld a,$f7
635   8725 DB FE        	in a,($fe)
636   8727 E6 01        	and $01
637   8729 C8           	ret z
638   872A 3E F7        	ld a,$f7
639   872C DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
640   872E E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
641   8730 CC 49 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
642   8733 C9               ret
643   8734
644   8734              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
645   8734
646   8734              ; Pinta indicadores de FILAS. ------------------------------------------------------
647   8734
648   8734 21 10 40     Pinta_FILAS ld hl,$4010
649   8737              ;	ld b,9
650   8737              ;2 push hl
651   8737              ;	push bc
652   8737 06 BF        	ld b,$bf
653   8739 36 80        1 ld (hl),%10000000
654   873B CD 43 8A     	call NextScan
655   873E 10 F9        	djnz 1B
656   8740              ;	pop bc
657   8740              ;	pop hl
658   8740              ;	inc l
659   8740              ;	djnz 2B
660   8740 06 03        	ld b,3
661   8742 21 00 47         ld hl,$4700
662   8745 CD 4B 87     3 call Bucle_1
663   8748 10 FB            djnz 3B
664   874A C9               ret
665   874B
666   874B C5           Bucle_1 push bc
667   874C E5                   push hl
668   874D D1                   pop de
669   874E 13                   inc de
670   874F 01 FF 00             ld bc,255
671   8752 36 FF                ld (hl),255
672   8754 ED B0                ldir
673   8756 23                   inc hl
674   8757 3E 07                ld a,7
675   8759 84                   add a,h
676   875A 67                   ld h,a
677   875B C1                   pop bc
678   875C C9                   ret
679   875D
680   875D              ; ---------------------------------------------------------------
681   875D
682   875D              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  875D              ; ******************************************************************************************************************************************************************************************
  2+  875D              ;
  3+  875D              ; 01/23
  4+  875D              ;
  5+  875D              ; DRAW. ************************************************************************************************************************************************************************************
  6+  875D
  7+  875D CD 37 8A     Draw call Prepara_draw
  8+  8760 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8761 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8762 28 05        	jr z,2F
 11+  8764 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  8767 18 0C        	jr 1F
 13+  8769 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  876C 22 D2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  876F CD FE 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8772              ;													; _la esquina superior izquierda de la pantalla.
 17+  8772 CD BB 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8775 3A F7 84     1 ld a,(Ctrl_0)
 19+  8778 CB 6F        	bit 5,a
 20+  877A 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  877C
 22+  877C CD 94 87     	call Comprueba_limite_horizontal
 23+  877F CD 24 88     	call Comprueba_limite_vertical
 24+  8782
 25+  8782              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8782
 27+  8782 CD 71 89     3 call calcula_CColumnass
 28+  8785 CD A8 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8788 CD FD 89     	call Define_rutina_de_impresion
 30+  878B
 31+  878B 3A F7 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  878E CB AF        	res 5,a											; _a ser de utilidad.
 33+  8790 32 F7 84     	ld (Ctrl_0),a
 34+  8793
 35+  8793 C9           	ret
 36+  8794
 37+  8794              ; *******************************************************************************************************************************************************************************************
 38+  8794              ;	21/01/23
 39+  8794              ;
 40+  8794              ; 	Comprueba_limite_horizontal.
 41+  8794              ;
 42+  8794              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8794              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8794              ;
 45+  8794              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8794              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8794              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8794              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8794
 50+  8794
 51+  8794
 52+  8794 3A F7 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  8797 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  8799 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  879B E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  879D 32 F7 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  87A0 18 09            jr 6F
 58+  87A2 CB 5F        1 bit 3,a
 59+  87A4 28 0A            jr z,2F
 60+  87A6 E6 F7            and $f7
 61+  87A8 32 F7 84         ld (Ctrl_0),a
 62+  87AB CD FE 88     6 call Inicializacion
 63+  87AE 18 5B            jr 5F
 64+  87B0 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87B1
 66+  87B1              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87B1              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87B1
 69+  87B1 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87B2 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87B5 CD A1 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87B8 67           	ld h,a
 73+  87B9 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87BA CD A1 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  87BD 67           	ld h,a
 76+  87BE A7           	and a
 77+  87BF ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  87C1 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  87C2 3A E0 84     	ld a,(Cuad_objeto)
 80+  87C5 FE 02        	cp 2
 81+  87C7 38 1E        	jr c,3F
 82+  87C9 28 1C        	jr z,3F
 83+  87CB 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  87CC 28 23            jr z,7F
 85+  87CE 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  87D0 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  87D2 E1           	pop hl
 88+  87D3
 89+  87D3              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  87D3              ; _para indicar con E="2" en caso necesario.
 91+  87D3
 92+  87D3 E5               push hl
 93+  87D4 C5               push bc
 94+  87D5 CD A1 8C     	call calcula_tercio
 95+  87D8 FE 01        	cp 1
 96+  87DA 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  87DC CD 0C 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87DF 28 26            jr z,9F
 99+  87E1 38 24            jr c,9F
100+  87E3 1E 00        11 ld e,0
101+  87E5 18 22            jr 8F
102+  87E7 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  87E8 28 07        	jr z, 7F
104+  87EA 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  87EC 1E 00         	ld e,0
106+  87EE E1           	pop hl
107+  87EF 18 04        	jr 4F
108+  87F1 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  87F3 18 15            jr 10F
110+  87F5
111+  87F5              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  87F5              ; _para indicar con E="2" en caso necesario.
113+  87F5
114+  87F5 E5           4 push hl
115+  87F6 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  87F7 CD A1 8C     	call calcula_tercio
117+  87FA FE 01        	cp 1
118+  87FC 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87FE CD 0C 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8801 28 04            jr z,9F
121+  8803 30 02            jr nc,9F
122+  8805 18 02        	jr 8F
123+  8807 1E 02        9 ld e,2
124+  8809 C1           8 pop bc
125+  880A E1           10 pop hl
126+  880B C9           5 ret
127+  880C
128+  880C              ; --------------------
129+  880C              ;
130+  880C              ; 25/08/22
131+  880C
132+  880C CD A1 8C     Comprueba_centro call calcula_tercio
133+  880F 67               ld h,a
134+  8810 08           	ex af,af
135+  8811 FE 02        	cp 2
136+  8813 38 07        	jr c,1F
137+  8815 28 05        	jr z,1F
138+  8817 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  881A 18 03        	jr 2F
140+  881C 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  881F 08           2 ex af,af
142+  8820 A7               and a
143+  8821 ED 42            sbc hl,bc
144+  8823 C9               ret
145+  8824
146+  8824              ; *********************************************************************************************************************************************************************************************
147+  8824              ;
148+  8824              ;   16/8/22
149+  8824              ;
150+  8824              ;	Comprueba_limite_vertical
151+  8824              ;
152+  8824              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  8824              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  8824              ;
155+  8824
156+  8824 2A D2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  8827 7D           	ld a,l
158+  8828 E6 1F        	and $1F
159+  882A 57           	ld d,a
160+  882B 3A 03 85     	ld a,(Limite_vertical)
161+  882E BA           	cp d 											; Límite - Posición.
162+  882F 08           	ex af,af 										; Resultado de CP d en F'.
163+  8830 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  8833 CB 47        	bit 0,a
165+  8835 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  8837
167+  8837              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  8837
169+  8837 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  8838 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  883A
172+  883A              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  883A              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  883A
175+  883A 3A D7 84         ld a,(Coordenada_X)
176+  883D 16 0F            ld d,Centro_izquierda
177+  883F A7               and a
178+  8840 92               sub d 											 ; Posición - Centro_izquierda.
179+  8841 28 1E            jr z,3F
180+  8843 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  8845              ;                                                    ; _salimos sin modificar nada.
182+  8845 18 0E            jr 2F
183+  8847 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  8848 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  884A
186+  884A              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  884A              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  884A
189+  884A 3A D7 84         ld a,(Coordenada_X)
190+  884D 16 10            ld d,Centro_derecha
191+  884F A7               and a
192+  8850 92               sub d
193+  8851 28 0E            jr z,3F
194+  8853 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  8855              ;                                                    ; _salimos sin modificar nada.
196+  8855 CB 43        2 bit 0,e
197+  8857 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8859 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  885A CD EE 88         call Modificaccionne
200+  885D C1           	pop bc
201+  885E CD FE 88         call Inicializacion
202+  8861 C9           3 ret 				 								 ; Salimos de la rutina.
203+  8862
204+  8862              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  8862
206+  8862 C5           4 push bc
207+  8863 01 D1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  8866 0A           	ld a,(bc)
209+  8867 3D           	dec a
210+  8868 47           	ld b,a 											 ; Columnas-1 en B.
211+  8869 7D           	ld a,l
212+  886A 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  886B CB 47        	bit 0,a
214+  886D 28 03        	jr z,5F
215+  886F 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8870 18 2E        	jr 7F
217+  8872
218+  8872              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  8872
220+  8872 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  8873 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  8874 3A F7 84     	ld a,(Ctrl_0)
223+  8877 CB 4F        	bit 1,a
224+  8879 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  887B F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  887C
227+  887C              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  887C
229+  887C 1C               inc e
230+  887D 1D               dec e
231+  887E 20 07            jr nz,12F
232+  8880 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8881 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8882 22 D2 84     	ld (Posicion_actual),hl
235+  8885 18 44        13 jr 9F
236+  8887 CB 43        12 bit 0,e
237+  8889 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  888B              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  888B C1           	pop bc
240+  888C 18 D3        	jr 3B
241+  888E 80           14 add b
242+  888F 6F               ld l,a
243+  8890 22 D2 84     	ld (Posicion_actual),hl
244+  8893 CD EE 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  8896 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  8898 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  889A 32 F7 84         ld (Ctrl_0),a
248+  889D F1           	pop af
249+  889E 18 2B        	jr 9F
250+  88A0
251+  88A0              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  88A0
253+  88A0 F5           7 push af
254+  88A1 3A F7 84     	ld a,(Ctrl_0)
255+  88A4 CB 47        	bit 0,a
256+  88A6 20 1D        	jr nz,8F
257+  88A8 F1           	pop af
258+  88A9
259+  88A9              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88A9
261+  88A9 1C           	inc e
262+  88AA 1D               dec e
263+  88AB 20 07            jr nz,10F
264+  88AD 90           	sub b
265+  88AE 6F               ld l,a
266+  88AF 22 D2 84     	ld (Posicion_actual),hl
267+  88B2 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88B4              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88B4 CB 43        10 bit 0,e
270+  88B6 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88B8              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88B8 C1           	pop bc
273+  88B9 18 A6        	jr 3B
274+  88BB 90           16 sub b
275+  88BC 6F               ld l,a
276+  88BD 22 D2 84     	ld (Posicion_actual),hl
277+  88C0 CD EE 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  88C3 18 06            jr 9F
279+  88C5 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  88C7 32 F7 84         ld (Ctrl_0),a
281+  88CA F1           	pop af
282+  88CB C1           9 pop bc
283+  88CC 1E 00        	ld e,0
284+  88CE CD FE 88         call Inicializacion
285+  88D1 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  88D2 08           	ex af,af
287+  88D3 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  88D4 18 8B            jr 3B
289+  88D6
290+  88D6              ; --------------------
291+  88D6
292+  88D6 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  88D8 CD 52 8A     1 call PreviousScan
294+  88DB 10 FB            djnz 1B
295+  88DD 22 D2 84     	ld (Posicion_actual),hl
296+  88E0 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88E1 C9           	ret
298+  88E2
299+  88E2              ; --------------------
300+  88E2
301+  88E2 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  88E4 CD 43 8A     1 call NextScan
303+  88E7 10 FB            djnz 1B
304+  88E9 22 D2 84     	ld (Posicion_actual),hl
305+  88EC AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  88ED C9           	ret
307+  88EE
308+  88EE              ; --------------------
309+  88EE              ;
310+  88EE              ;	22/01/23
311+  88EE              ;
312+  88EE              ;	E="1". Hemos cambiado de cuadrante.
313+  88EE              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  88EE              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  88EE
316+  88EE
317+  88EE              Modificaccionne
318+  88EE
319+  88EE 3A E0 84     	ld a,(Cuad_objeto)
320+  88F1 FE 02        	cp 2
321+  88F3 CC D6 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  88F6 DC D6 88         call c,Modifica_Pos_actual
323+  88F9 C8           	ret z
324+  88FA CD E2 88         call Modifica_Pos_actual2
325+  88FD C9               ret
326+  88FE
327+  88FE              ; *************************************************************************************************************************************************************************************************
328+  88FE              ;
329+  88FE              ;	13/8/22
330+  88FE              ;
331+  88FE              ;	Inicializacion
332+  88FE              ;
333+  88FE              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88FE              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88FE              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88FE              ;
337+  88FE              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88FE              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88FE              ;	_ desaparece/aparece.
340+  88FE
341+  88FE              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88FE              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88FE              ;
344+  88FE              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88FE              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88FE              ; 		   [E] ="0"
347+  88FE
348+  88FE              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88FE
350+  88FE CD A1 8C     Inicializacion call calcula_tercio
351+  8901 28 36        	jr z,primit
352+  8903 E6 02        	and 2
353+  8905 20 07        	jr nz,segmit
354+  8907 7D           	ld a,l
355+  8908 FE 7F        	cp $7f
356+  890A 38 2D        	jr c,primit
357+  890C 28 2B        	jr z,primit
358+  890E CD 6B 89     segmit call column
359+  8911 38 13        	jr c,tercuad
360+  8913 3E 04        cuarcuad ld a,4
361+  8915 32 E0 84     	ld (Cuad_objeto),a
362+  8918 21 20 48     	ld hl,$4820
363+  891B 22 01 85     	ld (Limite_horizontal),hl
364+  891E 21 03 85     	ld hl,Limite_vertical
365+  8921 36 0D        	ld (hl),$0d
366+  8923 08           	ex af,af
367+  8924 18 3C        	jr 1F
368+  8926              tercuad
369+  8926              ;	call Fija_punteros
370+  8926 3E 03        	ld a,3
371+  8928 32 E0 84     	ld (Cuad_objeto),a
372+  892B 21 20 48     	ld hl,$4820
373+  892E 22 01 85     	ld (Limite_horizontal),hl
374+  8931 21 03 85     	ld hl,Limite_vertical
375+  8934 36 12        	ld (hl),$12
376+  8936 08           	ex af,af
377+  8937 18 29        	jr 1F
378+  8939 CD 6B 89     primit call column
379+  893C 38 13        	jr c, primcuad
380+  893E              segcuad
381+  893E              ;	call Fija_punteros
382+  893E 3E 02        	ld a,2
383+  8940 32 E0 84     	ld (Cuad_objeto),a
384+  8943 21 C0 4F     	ld hl,$4fc0
385+  8946 22 01 85     	ld (Limite_horizontal),hl
386+  8949 21 03 85     	ld hl,Limite_vertical
387+  894C 36 0D        	ld (hl),$0d
388+  894E 08           	ex af,af
389+  894F 18 11        	jr 1F
390+  8951              primcuad
391+  8951              ;	call Fija_punteros
392+  8951 3E 01        	ld a,1
393+  8953 32 E0 84     	ld (Cuad_objeto),a
394+  8956 21 C0 4F     	ld hl,$4fc0
395+  8959 22 01 85     	ld (Limite_horizontal),hl
396+  895C 21 03 85     	ld hl,Limite_vertical
397+  895F 36 12        	ld (hl),$12
398+  8961 08           	ex af,af
399+  8962 CD B1 8F     1 call Genera_coordenadas
400+  8965 21 F7 84     	ld hl,Ctrl_0
401+  8968 CB EE        	set 5,(hl)
402+  896A C9           	ret
403+  896B
404+  896B              ; ------------------------------------------------------------------------------------------------------------------
405+  896B
406+  896B              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  896B              ;
408+  896B              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  896B
410+  896B 7D           column ld a,l
411+  896C E6 1F        	and $1f
412+  896E FE 10         	cp $10
413+  8970 C9            	ret
414+  8971
415+  8971              ; --------------------------------------------------------------------------------------------------------------------
416+  8971              ;
417+  8971              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  8971              ;
419+  8971              ; 14/12/22
420+  8971              ;
421+  8971              ;	Modifica: A y BC.
422+  8971
423+  8971 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  8974 E6 01        	and 1
425+  8976 28 17        	jr z,1F
426+  8978
427+  8978              ; Nos encontramos en la parte izquierda de la pantalla
428+  8978
429+  8978 3A D7 84     	ld a,(Coordenada_X)
430+  897B 47           	ld b,a
431+  897C 04           	inc b											; (Coordenada_X)+1 en B.
432+  897D 79           	ld a,c
433+  897E 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  897F 38 08        	jr c,2F
435+  8981 47           	ld b,a
436+  8982 79           	ld a,c
437+  8983 90           	sub b
438+  8984 32 00 85     	ld (Columnas),a
439+  8987 18 1B        	jr 4F
440+  8989 79           2 ld a,c
441+  898A 32 00 85     	ld (Columnas),a
442+  898D 18 15        	jr 4F
443+  898F
444+  898F              ; Nos encontramos en la parte derecha de la pantalla.
445+  898F
446+  898F 3A D7 84     1 ld a,(Coordenada_X)
447+  8992 81           	add c
448+  8993 3D           	dec a
449+  8994 D6 1F        	sub $1f
450+  8996 38 08        	jr c,3F
451+  8998 47           	ld b,a
452+  8999 79           	ld a,c
453+  899A 90           	sub b
454+  899B 32 00 85     	ld (Columnas),a
455+  899E 18 04        	jr 4F
456+  89A0 79           3 ld a,c
457+  89A1 32 00 85     	ld (Columnas),a
458+  89A4 D9           4 exx
459+  89A5 4F           	ld c,a
460+  89A6 D9           	exx
461+  89A7 C9            ret
462+  89A8
463+  89A8              ; --------------------------------------------------------------------------------------------------------------------
464+  89A8              ;
465+  89A8              ; 7/1/23
466+  89A8              ;
467+  89A8              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89A8              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89A8              ;
470+  89A8              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89A8              ;	DESTRUYE: HL,B Y A.
472+  89A8
473+  89A8 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89AB FE 02        	cp 2
475+  89AD 38 18        	jr c,1F
476+  89AF 28 16        	jr z,1F
477+  89B1 E6 01        	and 1
478+  89B3 28 0D        	jr z,3F
479+  89B5
480+  89B5              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89B5
482+  89B5 CD F1 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89B8
484+  89B8 7D           9 ld a,l
485+  89B9 E6 1F        	and $1f
486+  89BB 28 2A        	jr z,7F
487+  89BD 2B           	dec hl
488+  89BE 10 F8        	djnz 9B
489+  89C0 18 25        	jr 7F
490+  89C2
491+  89C2              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  89C2
493+  89C2 2A D2 84     3 ld hl,(Posicion_actual)
494+  89C5 18 20        	jr 7F
495+  89C7
496+  89C7 28 14        1 jr z,2F
497+  89C9
498+  89C9              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  89C9
500+  89C9 CD F1 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  89CC 7D           4 ld a,l
502+  89CD E6 1F        	and $1f
503+  89CF 28 03        	jr z,6F
504+  89D1 2B           	dec hl
505+  89D2 10 F8        	djnz 4B
506+  89D4 06 0F        6 ld b,15
507+  89D6 CD 52 8A     5 call PreviousScan
508+  89D9 10 FB        	djnz 5B
509+  89DB 18 0A        	jr 7F
510+  89DD
511+  89DD              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89DD
513+  89DD CD F1 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89E0 06 0F        	ld b,15
515+  89E2 CD 52 8A     8 call PreviousScan
516+  89E5 10 FB        	djnz 8B
517+  89E7
518+  89E7 E5           7 push hl
519+  89E8 DD E1        	pop ix
520+  89EA
521+  89EA 2A D4 84     	ld hl,(Puntero_objeto)
522+  89ED E5           	push hl
523+  89EE FD E1        	pop iy
524+  89F0
525+  89F0 C9           	ret
526+  89F1
527+  89F1              ; --------------------------------------------------------------------------------------------------------------------
528+  89F1              ;
529+  89F1              ;	2/1/23
530+  89F1              ;
531+  89F1              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  89F1              ;
533+  89F1              ;	Tras esta rutina tenemos:
534+  89F1              ;
535+  89F1              ;	OUTPUT: HL contiene (Posicion_actual).
536+  89F1              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  89F1              ;
538+  89F1              ;	DESTRUYE!!!!! HL,B y A.
539+  89F1
540+  89F1 2A D2 84     Operandos ld hl,(Posicion_actual)
541+  89F4 3A 00 85     	ld a,(Columnas)
542+  89F7 3D           	dec a
543+  89F8 20 01        	jr nz,1F
544+  89FA 3C           	inc a
545+  89FB 47           1 ld b,a
546+  89FC C9           	ret
547+  89FD
548+  89FD              ; --------------------------------------------------------------------------------------------------------------------
549+  89FD              ;
550+  89FD              ;	3/1/23
551+  89FD              ;
552+  89FD              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89FD              ;
554+  89FD              ;	Destruye: A,B,HL y DE.
555+  89FD
556+  89FD              Define_rutina_de_impresion
557+  89FD
558+  89FD 3A D1 84     	ld a,(Columns)
559+  8A00 47           	ld b,a
560+  8A01 3A 00 85     	ld a,(Columnas)
561+  8A04 B8           	cp b
562+  8A05 20 0D        	jr nz,2f
563+  8A07
564+  8A07              ;	La entidad se imprime entera.
565+  8A07
566+  8A07 21 9E 8A     	ld hl, Indice_entidades_completas
567+  8A0A E6 01        	and 1
568+  8A0C 28 02        	jr z,1F
569+  8A0E
570+  8A0E 23           	inc hl
571+  8A0F 23           	inc hl
572+  8A10
573+  8A10 CD 7E 86     1 call Extrae_address
574+  8A13 C9           	ret		;	ret
575+  8A14
576+  8A14              ;	La entidad no se imprime entera en pantalla.
577+  8A14
578+  8A14 3A E0 84     2 ld a,(Cuad_objeto)
579+  8A17 E6 01        	and 1
580+  8A19 28 17        	jr z,3F
581+  8A1B
582+  8A1B              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A1B
584+  8A1B 21 A2 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A1E 3A D1 84     4 ld a,(Columns)
586+  8A21 E6 01        	and 1
587+  8A23 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A25
589+  8A25 23           	inc hl
590+  8A26 23           	inc hl
591+  8A27
592+  8A27 3A 00 85     	ld a,(Columnas)
593+  8A2A E6 01        	and 1
594+  8A2C 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A2E
596+  8A2E 23           	inc hl
597+  8A2F 23           	inc hl
598+  8A30
599+  8A30 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A32
601+  8A32 21 A8 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A35 18 E7        	jr 4B
603+  8A37
604+  8A37              ; --------------------------------------------------------------------------------------------------------------------
605+  8A37              ;
606+  8A37              ;	Prepara_draw
607+  8A37              ;
608+  8A37              ;	Es una rutina de carga.
609+  8A37              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A37              ;
611+  8A37              ;	FUNCIONAMIENTO:
612+  8A37              ;
613+  8A37              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A37              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A37              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A37              ;
617+  8A37              ;	DESTRUYE:
618+  8A37              ;
619+  8A37              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A37
621+  8A37 21 D0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A3A 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A3B 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A3C 4E           	ld c,(hl)
625+  8A3D 2A D2 84     	ld hl,(Posicion_actual)
626+  8A40 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A42 C9           	ret
628+  8A43
629+  8A43              ;----------------------------------------------------------------------------------------------------------------
630+  8A43              ;
631+  8A43              ;	5/08/22
632+  8A43              ;
633+  8A43              ;   NextScan.
634+  8A43              ;
635+  8A43              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A43              ;
637+  8A43              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A43              ;
639+  8A43              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A43              ;
641+  8A43              ;       DESTRUIDOS: AF y HL !!!
642+  8A43              ;
643+  8A43              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A43              ;
645+  8A43
646+  8A43 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A44 7C               ld a,h
648+  8A45 E6 07            and 7
649+  8A47 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A48
651+  8A48 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A49 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A4B 6F               ld l,a
654+  8A4C D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A4D
656+  8A4D 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A4E D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A50 67               ld h,a
659+  8A51 C9               ret
660+  8A52
661+  8A52              ;----------------------------------------------------------------------------------------------------------------
662+  8A52              ;
663+  8A52              ;	5/08/22
664+  8A52              ;
665+  8A52              ;   PreviousScan.
666+  8A52              ;
667+  8A52              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A52              ;
669+  8A52              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A52              ;
671+  8A52              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A52              ;
673+  8A52              ;       DESTRUIDOS: AF y HL !!!
674+  8A52              ;
675+  8A52              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A52              ;
677+  8A52
678+  8A52 7C           PreviousScan ld a,h
679+  8A53 25               dec h               ; Dec H.
680+  8A54 E6 07            and 7
681+  8A56 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A57
683+  8A57 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A58 D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A5A 6F               ld l,a
686+  8A5B D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A5C
688+  8A5C 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A5D C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A5F 67               ld h,a
691+  8A60 C9               ret
692+  8A61
693+  8A61              ; -----------------------------------------------------------------------------------
694+  8A61              ;
695+  8A61              ;	15/1/23
696+  8A61
697+  8A61              Extrae_foto_registros
698+  8A61
699+  8A61 3A 0B 85     	ld a,(Numero_de_malotes)
700+  8A64 A7           	and a
701+  8A65 C8           	ret z
702+  8A66
703+  8A66
704+  8A66 ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
705+  8A6A 31 00 70     	ld sp,Album_de_fotos
706+  8A6D
707+  8A6D FD E1        2 pop iy																	; (Puntero_objeto) en IY.
708+  8A6F E1           	pop hl																	; Puntero de impresión de pantalla en HL.
709+  8A70 D1           	pop de																	; Dirección de la rutina de impresión en DE.
710+  8A71
711+  8A71 ED 73 0E 85  	ld (Stack_2),sp
712+  8A75 ED 7B 0C 85  	ld sp,(Stack)
713+  8A79
714+  8A79              ; Fabrica la llamada a la correspondiente rutina de impresión.
715+  8A79
716+  8A79 3E CD        	ld a,$cd
717+  8A7B 32 83 8A     	ld (Imprime),a
718+  8A7E EB           	ex de,hl
719+  8A7F 22 84 8A     	ld (Imprime+1),hl
720+  8A82 EB           	ex de,hl
721+  8A83
722+  8A83              ; Ejecuta la llamada:	CALL $xx,xx
723+  8A83
724+  8A83 00 00 00     Imprime db 0,0,0
725+  8A86
726+  8A86 ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
727+  8A8A
728+  8A8A 3A 0B 85     	ld a,(Numero_de_malotes)
729+  8A8D 3D           	dec a
730+  8A8E 28 09        	jr z,1F
731+  8A90 32 0B 85      	ld (Numero_de_malotes),a
732+  8A93 ED 7B 0E 85  	ld sp,(Stack_2)
733+  8A97 18 D4        	jr 2B
734+  8A99
735+  8A99 AF           1 xor a
736+  8A9A 32 0E 85     	ld (Stack_2),a
737+  8A9D C9           	ret
738+  8A9E
739+  8A9E
# file closed: Draw_XOR.asm
683   8A9E              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A9E              ;   índices de Rutinas de impresión.
  2+  8A9E
  3+  8A9E AE 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AA0 DB 8A            defw Pinta_Amadeus_3x2
  5+  8AA2
  6+  8AA2 31 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AA4 D1 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AA6 85 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AA8
 10+  8AA8 5B 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AAA 5F 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AAC 13 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AAE
 14+  8AAE
 15+  8AAE              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AAE              ;
 17+  8AAE              ;   12/12/22
 18+  8AAE              ;
 19+  8AAE              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AAE              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AAE              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AAE              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AAE              ;
 24+  8AAE              ;   Modifica: DE y HL.
 25+  8AAE
 26+  8AAE ED 73 0C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AB2 FD F9        	ld sp,iy
 28+  8AB4 06 10            ld b,16
 29+  8AB6 D1           1 pop de
 30+  8AB7 7B               ld a,e
 31+  8AB8 AE               xor (hl)
 32+  8AB9 77           	ld (hl),a
 33+  8ABA 23           	inc hl
 34+  8ABB 7A               ld a,d
 35+  8ABC AE               xor (hl)
 36+  8ABD 77           	ld (hl),a
 37+  8ABE 2B           	dec hl
 38+  8ABF 24           	inc h
 39+  8AC0 7C               ld a,h
 40+  8AC1 E6 07            and 7
 41+  8AC3 20 0A            jr nz,2F
 42+  8AC5 7D               ld a,l
 43+  8AC6 C6 20            add a,$20
 44+  8AC8 6F               ld l,a
 45+  8AC9 38 04            jr c,2F
 46+  8ACB 7C               ld a,h
 47+  8ACC D6 08            sub 8
 48+  8ACE 67               ld h,a
 49+  8ACF 7C           2 ld a,h
 50+  8AD0 FE 58            cp $58
 51+  8AD2 28 02            jr z,3F
 52+  8AD4 10 E0            djnz 1B
 53+  8AD6 ED 7B 0C 85  3 ld sp,(Stack)
 54+  8ADA C9           	ret
 55+  8ADB
 56+  8ADB ED 73 0C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8ADF FD F9        	ld sp,iy
 58+  8AE1 06 08            ld b,8
 59+  8AE3 D1           1 pop de
 60+  8AE4 7B               ld a,e
 61+  8AE5 AE               xor (hl)
 62+  8AE6 77           	ld (hl),a
 63+  8AE7 23           	inc hl
 64+  8AE8 7A               ld a,d
 65+  8AE9 AE               xor (hl)
 66+  8AEA 77           	ld (hl),a
 67+  8AEB 23           	inc hl
 68+  8AEC D1           	pop de
 69+  8AED 7B               ld a,e
 70+  8AEE AE               xor (hl)
 71+  8AEF 77           	ld (hl),a
 72+  8AF0 2B           	dec hl
 73+  8AF1 2B           	dec hl
 74+  8AF2 24           	inc h
 75+  8AF3 7C               ld a,h
 76+  8AF4 E6 07            and 7
 77+  8AF6 20 0A            jr nz,2F
 78+  8AF8 7D               ld a,l
 79+  8AF9 C6 20            add a,$20
 80+  8AFB 6F               ld l,a
 81+  8AFC 38 04            jr c,2F
 82+  8AFE 7C               ld a,h
 83+  8AFF D6 08            sub 8
 84+  8B01 67               ld h,a
 85+  8B02 7C           2 ld a,h
 86+  8B03 FE 58            cp $58
 87+  8B05 28 25            jr z,4F
 88+  8B07 7A               ld a,d
 89+  8B08 AE               xor (hl)
 90+  8B09 77               ld (hl),a
 91+  8B0A D1           	pop de
 92+  8B0B 23           	inc hl
 93+  8B0C 7B               ld a,e
 94+  8B0D AE               xor (hl)
 95+  8B0E 77           	ld (hl),a
 96+  8B0F 23           	inc hl
 97+  8B10 7A               ld a,d
 98+  8B11 AE               xor (hl)
 99+  8B12 77           	ld (hl),a
100+  8B13 2B           	dec hl
101+  8B14 2B           	dec hl
102+  8B15 24           	inc h
103+  8B16 7C               ld a,h
104+  8B17 E6 07            and 7
105+  8B19 20 0A            jr nz,3F
106+  8B1B 7D               ld a,l
107+  8B1C C6 20            add a,$20
108+  8B1E 6F               ld l,a
109+  8B1F 38 04            jr c,3F
110+  8B21 7C               ld a,h
111+  8B22 D6 08            sub 8
112+  8B24 67               ld h,a
113+  8B25 7C           3 ld a,h
114+  8B26 FE 58            cp $58
115+  8B28 28 02            jr z,4F
116+  8B2A 10 B7            djnz 1B
117+  8B2C ED 7B 0C 85  4 ld sp,(Stack)
118+  8B30 C9           	ret
119+  8B31
120+  8B31              ; ---------------------------------------------------
121+  8B31
122+  8B31 ED 73 0C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B35 FD F9        	ld sp,iy
124+  8B37 06 10            ld b,16
125+  8B39 D1           1 pop de
126+  8B3A 7A           	ld a,d
127+  8B3B AE           	xor (hl)
128+  8B3C 77           	ld (hl),a
129+  8B3D 24           	inc h
130+  8B3E 7C               ld a,h
131+  8B3F E6 07            and 7
132+  8B41 20 0C            jr nz,2F
133+  8B43 7D               ld a,l
134+  8B44 C6 20            add a,$20
135+  8B46 6F               ld l,a
136+  8B47 38 06            jr c,2F
137+  8B49 7C               ld a,h
138+  8B4A D6 08            sub 8
139+  8B4C 67               ld h,a
140+  8B4D 18 00            jr 2F
141+  8B4F 7C           2 ld a,h
142+  8B50 FE 58            cp $58
143+  8B52 28 02            jr z,3F
144+  8B54 10 E3            djnz 1B
145+  8B56 ED 7B 0C 85  3 ld sp,(Stack)
146+  8B5A C9           	ret
147+  8B5B
148+  8B5B ED 73 0C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B5F FD F9        	ld sp,iy
150+  8B61 06 10            ld b,16
151+  8B63 D1           1 pop de
152+  8B64 7B           	ld a,e
153+  8B65 AE           	xor (hl)
154+  8B66 77           	ld (hl),a
155+  8B67 24           	inc h
156+  8B68 7C               ld a,h
157+  8B69 E6 07            and 7
158+  8B6B 20 0C            jr nz,2F
159+  8B6D 7D               ld a,l
160+  8B6E C6 20            add a,$20
161+  8B70 6F               ld l,a
162+  8B71 38 06            jr c,2F
163+  8B73 7C               ld a,h
164+  8B74 D6 08            sub 8
165+  8B76 67               ld h,a
166+  8B77 18 00            jr 2F
167+  8B79 7C           2 ld a,h
168+  8B7A FE 58            cp $58
169+  8B7C 28 02            jr z,3F
170+  8B7E 10 E3            djnz 1B
171+  8B80 ED 7B 0C 85  3 ld sp,(Stack)
172+  8B84 C9           	ret
173+  8B85
174+  8B85              ; ---------------------------------------------------
175+  8B85
176+  8B85 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B89 FD F9        	ld sp,iy
178+  8B8B 06 08            ld b,8
179+  8B8D D1           1 pop de
180+  8B8E 7A           	ld a,d
181+  8B8F AE           	xor (hl)
182+  8B90 77           	ld (hl),a
183+  8B91 23           	inc hl
184+  8B92 D1           	pop de
185+  8B93 7B           	ld a,e
186+  8B94 AE           	xor (hl)
187+  8B95 77           	ld (hl),a
188+  8B96 2B           	dec hl
189+  8B97 24            	inc h
190+  8B98 7C               ld a,h
191+  8B99 E6 07            and 7
192+  8B9B 20 0A            jr nz,2F
193+  8B9D 7D               ld a,l
194+  8B9E C6 20            add a,$20
195+  8BA0 6F               ld l,a
196+  8BA1 38 04            jr c,2F
197+  8BA3 7C               ld a,h
198+  8BA4 D6 08            sub 8
199+  8BA6 67               ld h,a
200+  8BA7 7C           2 ld a,h
201+  8BA8 FE 58            cp $58
202+  8BAA 28 20            jr z,4F
203+  8BAC D1               pop de
204+  8BAD 7B           	ld a,e
205+  8BAE AE           	xor (hl)
206+  8BAF 77           	ld (hl),a
207+  8BB0 23           	inc hl
208+  8BB1 7A           	ld a,d
209+  8BB2 AE           	xor (hl)
210+  8BB3 77           	ld (hl),a
211+  8BB4 2B           	dec hl
212+  8BB5 24           	inc h
213+  8BB6 7C               ld a,h
214+  8BB7 E6 07            and 7
215+  8BB9 20 0A            jr nz,3F
216+  8BBB 7D               ld a,l
217+  8BBC C6 20            add a,$20
218+  8BBE 6F               ld l,a
219+  8BBF 38 04            jr c,3F
220+  8BC1 7C               ld a,h
221+  8BC2 D6 08            sub 8
222+  8BC4 67               ld h,a
223+  8BC5 7C           3 ld a,h
224+  8BC6 FE 58            cp $58
225+  8BC8 28 02            jr z,4F
226+  8BCA 10 C1            djnz 1B
227+  8BCC ED 7B 0C 85  4 ld sp,(Stack)
228+  8BD0 C9           	ret
229+  8BD1
230+  8BD1 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8BD5 FD F9        	ld sp,iy
232+  8BD7 06 08            ld b,8
233+  8BD9 D1           1 pop de
234+  8BDA D1           	pop de
235+  8BDB 7B           	ld a,e
236+  8BDC AE           	xor (hl)
237+  8BDD 77           	ld (hl),a
238+  8BDE 24            	inc h
239+  8BDF 7C               ld a,h
240+  8BE0 E6 07            and 7
241+  8BE2 20 0A            jr nz,2F
242+  8BE4 7D               ld a,l
243+  8BE5 C6 20            add a,$20
244+  8BE7 6F               ld l,a
245+  8BE8 38 04            jr c,2F
246+  8BEA 7C               ld a,h
247+  8BEB D6 08            sub 8
248+  8BED 67               ld h,a
249+  8BEE 7C           2 ld a,h
250+  8BEF FE 58            cp $58
251+  8BF1 28 1B            jr z,4F
252+  8BF3 D1               pop de
253+  8BF4 7A           	ld a,d
254+  8BF5 AE           	xor (hl)
255+  8BF6 77           	ld (hl),a
256+  8BF7 24           	inc h
257+  8BF8 7C               ld a,h
258+  8BF9 E6 07            and 7
259+  8BFB 20 0A            jr nz,3F
260+  8BFD 7D               ld a,l
261+  8BFE C6 20            add a,$20
262+  8C00 6F               ld l,a
263+  8C01 38 04            jr c,3F
264+  8C03 7C               ld a,h
265+  8C04 D6 08            sub 8
266+  8C06 67               ld h,a
267+  8C07 7C           3 ld a,h
268+  8C08 FE 58            cp $58
269+  8C0A 28 02            jr z,4F
270+  8C0C 10 CB            djnz 1B
271+  8C0E ED 7B 0C 85  4 ld sp,(Stack)
272+  8C12 C9           	ret
273+  8C13
274+  8C13 ED 73 0C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C17 FD F9        	ld sp,iy
276+  8C19 06 08            ld b,8
277+  8C1B D1           1 pop de
278+  8C1C 7B           	ld a,e
279+  8C1D AE           	xor (hl)
280+  8C1E 77           	ld (hl),a
281+  8C1F 23           	inc hl
282+  8C20 7A           	ld a,d
283+  8C21 AE           	xor (hl)
284+  8C22 77           	ld (hl),a
285+  8C23 2B           	dec hl
286+  8C24 24             	inc h
287+  8C25 7C               ld a,h
288+  8C26 E6 07            and 7
289+  8C28 20 0A            jr nz,2F
290+  8C2A 7D               ld a,l
291+  8C2B C6 20            add a,$20
292+  8C2D 6F               ld l,a
293+  8C2E 38 04            jr c,2F
294+  8C30 7C               ld a,h
295+  8C31 D6 08            sub 8
296+  8C33 67               ld h,a
297+  8C34 7C           2 ld a,h
298+  8C35 FE 58            cp $58
299+  8C37 28 21            jr z,4F
300+  8C39 D1               pop de
301+  8C3A 7A           	ld a,d
302+  8C3B AE           	xor (hl)
303+  8C3C 77           	ld (hl),a
304+  8C3D 23           	inc hl
305+  8C3E D1               pop de
306+  8C3F 7B           	ld a,e
307+  8C40 AE           	xor (hl)
308+  8C41 77           	ld (hl),a
309+  8C42 2B           	dec hl
310+  8C43 24           	inc h
311+  8C44 7C               ld a,h
312+  8C45 E6 07            and 7
313+  8C47 20 0A            jr nz,3F
314+  8C49 7D               ld a,l
315+  8C4A C6 20            add a,$20
316+  8C4C 6F               ld l,a
317+  8C4D 38 04            jr c,3F
318+  8C4F 7C               ld a,h
319+  8C50 D6 08            sub 8
320+  8C52 67               ld h,a
321+  8C53 7C           3 ld a,h
322+  8C54 FE 58            cp $58
323+  8C56 28 02            jr z,4F
324+  8C58 10 C1            djnz 1B
325+  8C5A ED 7B 0C 85  4 ld sp,(Stack)
326+  8C5E C9           	ret
327+  8C5F
328+  8C5F ED 73 0C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C63 FD F9        	ld sp,iy
330+  8C65 06 08            ld b,8
331+  8C67 D1           1 pop de
332+  8C68 7B           	ld a,e
333+  8C69 AE           	xor (hl)
334+  8C6A 77           	ld (hl),a
335+  8C6B 24            	inc h
336+  8C6C 7C               ld a,h
337+  8C6D E6 07            and 7
338+  8C6F 20 0A            jr nz,2F
339+  8C71 7D               ld a,l
340+  8C72 C6 20            add a,$20
341+  8C74 6F               ld l,a
342+  8C75 38 04            jr c,2F
343+  8C77 7C               ld a,h
344+  8C78 D6 08            sub 8
345+  8C7A 67               ld h,a
346+  8C7B 7C           2 ld a,h
347+  8C7C FE 58            cp $58
348+  8C7E 28 1C            jr z,4F
349+  8C80 D1               pop de
350+  8C81 7A           	ld a,d
351+  8C82 AE           	xor (hl)
352+  8C83 77           	ld (hl),a
353+  8C84 24           	inc h
354+  8C85 7C               ld a,h
355+  8C86 E6 07            and 7
356+  8C88 20 0A            jr nz,3F
357+  8C8A 7D               ld a,l
358+  8C8B C6 20            add a,$20
359+  8C8D 6F               ld l,a
360+  8C8E 38 04            jr c,3F
361+  8C90 7C               ld a,h
362+  8C91 D6 08            sub 8
363+  8C93 67               ld h,a
364+  8C94 7C           3 ld a,h
365+  8C95 FE 58            cp $58
366+  8C97 28 03            jr z,4F
367+  8C99 D1               pop de
368+  8C9A 10 CB            djnz 1B
369+  8C9C ED 7B 0C 85  4 ld sp,(Stack)
370+  8CA0 C9           	ret
371+  8CA1
372+  8CA1              ; ---------------------------------------------------
373+  8CA1
# file closed: Rutinas_de_impresion_sprites.asm
684   8CA1              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CA1              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CA1              ;
  3+  8CA1              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CA1              ;
  5+  8CA1              ; *****************************************************************************************************************************************************************************************
  6+  8CA1              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CA1
  8+  8CA1 7C           calcula_tercio ld a,h
  9+  8CA2 E6 18        	and $18
 10+  8CA4 CB 2F        	sra a
 11+  8CA6 CB 2F        	sra a
 12+  8CA8 CB 2F        	sra a
 13+  8CAA C9           	ret
 14+  8CAB
# file closed: calcula_tercio.asm
685   8CAB              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CAB              ; -----------------------------------------------------------------------------------------
  2+  8CAB              ;
  3+  8CAB              ;   04/11/22
  4+  8CAB              ;
  5+  8CAB              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CAB              ;
  7+  8CAB              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CAB              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CAB              ;
 10+  8CAB              ;   DESTRUYE: HL y A. !!!!!
 11+  8CAB
 12+  8CAB CD A1 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CAE 26 58            ld h,$58
 14+  8CB0 84               add h
 15+  8CB1 67               ld h,a
 16+  8CB2 C9               ret
# file closed: Calcula_direccion_atributos.asm
686   8CB3              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CB3              ; ********** **********
  2+  8CB3              ;
  3+  8CB3              ;   5/11/22
  4+  8CB3              ;
  5+  8CB3              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CB3              ;
  7+  8CB3              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CB3              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CB3              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CB3              ;
 11+  8CB3              ;   NO DESTROYERSSSS !!!!!
 12+  8CB3
 13+  8CB3 E5           Define_atributos push hl
 14+  8CB4 C5           	push bc
 15+  8CB5 D5           	push de
 16+  8CB6
 17+  8CB6 CD AB 8C     	call Calcula_direccion_atributos
 18+  8CB9
 19+  8CB9 D9               exx
 20+  8CBA E5               push hl
 21+  8CBB D9               exx
 22+  8CBC D1               pop de
 23+  8CBD
 24+  8CBD 42               ld b,d
 25+  8CBE 7B               ld a,e 									; (Attr) en A.
 26+  8CBF
 27+  8CBF C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8CC0 E5            	push hl 								; Guardo dirección de attr.
 29+  8CC1
 30+  8CC1              ; -----
 31+  8CC1
 32+  8CC1 77           2 ld (hl),a
 33+  8CC2 0D           	dec c 									; Decremento (Columnas).
 34+  8CC3 28 03        	jr z,1F
 35+  8CC5 23           	inc hl
 36+  8CC6 18 F9        	jr 2B
 37+  8CC8
 38+  8CC8 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8CC9 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8CCA
 41+  8CCA 05           	dec b									; Decremento (Filas).
 42+  8CCB 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8CCD
 44+  8CCD 11 20 00     	ld de,32
 45+  8CD0 A7           	and a
 46+  8CD1 ED 5A        	adc hl,de
 47+  8CD3 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8CD5
 49+  8CD5 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8CD6 C1           	pop bc
 51+  8CD7 E1           	pop hl
 52+  8CD8
 53+  8CD8 C9           	ret
 54+  8CD9
# file closed: Define_atributos.asm
687   8CD9              	include "Cls.asm"
# file opened: Cls.asm
  1+  8CD9              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8CD9              ;
  3+  8CD9              ;
  4+  8CD9              ;	CLS.
  5+  8CD9              ;
  6+  8CD9              ;	Limpia la pantalla y define sus atributos.
  7+  8CD9              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8CD9              ;
  9+  8CD9              ;	COLORES: 0 ..... NEGRO
 10+  8CD9              ;    		 1 ..... AZUL
 11+  8CD9              ; 			 2 ..... ROJO
 12+  8CD9              ;			 3 ..... MAGENTA
 13+  8CD9              ; 			 4 ..... VERDE
 14+  8CD9              ; 			 5 ..... CIAN
 15+  8CD9              ;			 6 ..... AMARILLO
 16+  8CD9              ; 			 7 ..... BLANCO
 17+  8CD9              ;
 18+  8CD9              ;	INPUT: A contiene los atributos de pantalla.
 19+  8CD9              ;
 20+  8CD9              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8CD9
 22+  8CD9
 23+  8CD9 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8CDC 11 01 40     	LD DE,$4001
 25+  8CDF 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CE2 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8CE4 ED B0        	LDIR
 28+  8CE6 01 FF 02     	LD BC,767
 29+  8CE9 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8CEA ED B0        	LDIR
 31+  8CEC C9           	ret
 32+  8CED
# file closed: Cls.asm
688   8CED              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8CED              ; ******************************************************************************************************************************************************************************************
  2+  8CED              ;
  3+  8CED              ;   22/01/23
  4+  8CED              ;
  5+  8CED              ;	Mov_down
  6+  8CED              ;
  7+  8CED              ; 	Mueve el Sprite X px hacia abajo.
  8+  8CED              ;
  9+  8CED              ;
 10+  8CED 21 F7 84     Mov_down ld hl,Ctrl_0
 11+  8CF0 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8CF2              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8CF2              ; 																	; _ en el caso de que no lo haya.
 14+  8CF2 3A E4 84     	ld a,(Vel_down)
 15+  8CF5 47           	ld b,a
 16+  8CF6 2A D2 84         ld hl,(Posicion_actual)
 17+  8CF9 CD A1 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8CFC E6 02        	and 2
 19+  8CFE 28 0F        	jr z,1F
 20+  8D00
 21+  8D00              ; Nos encontramos en el último tercio de pantalla.
 22+  8D00              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D00
 24+  8D00 7C           	ld a,h
 25+  8D01 FE 57        	cp $57
 26+  8D03 20 0A        	jr nz,1F
 27+  8D05 7D           	ld a,l
 28+  8D06 C6 20        	add $20
 29+  8D08 30 05        	jr nc,1F
 30+  8D0A              ; ------------------------------
 31+  8D0A CD 9B 8F     	call Reaparece_arriba
 32+  8D0D              ;	call Reinicio
 33+  8D0D              ; ------------------------------
 34+  8D0D 18 08        	jr 3F
 35+  8D0F CD 43 8A     1 call NextScan
 36+  8D12 22 D2 84     	ld (Posicion_actual),hl
 37+  8D15 10 E2            djnz 2B
 38+  8D17 CD B1 8F     3 call Genera_coordenadas
 39+  8D1A C9           	ret
 40+  8D1B
 41+  8D1B
 42+  8D1B              ; ******************************************************************************************************************************************************************************************
 43+  8D1B              ;
 44+  8D1B              ;   22/01/23
 45+  8D1B              ;
 46+  8D1B              ;	Mov_up
 47+  8D1B              ;
 48+  8D1B              ; 	Mueve el Sprite hacia arriba.
 49+  8D1B              ;
 50+  8D1B              ;
 51+  8D1B 21 F7 84     Mov_up ld hl,Ctrl_0
 52+  8D1E CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D20              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D20              ; 																		; _ en el caso de que no lo haya.
 55+  8D20 3A E3 84     	ld a,(Vel_up)
 56+  8D23 47           	ld b,a
 57+  8D24 2A D2 84     	ld hl,(Posicion_actual)
 58+  8D27 CD A1 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D2A A7           	and a
 60+  8D2B 20 10        	jr nz,1F
 61+  8D2D
 62+  8D2D              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D2D              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D2D
 65+  8D2D 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D2E FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D30 20 0B            jr nz,1F
 68+  8D32 7D               ld a,l
 69+  8D33 D6 20            sub $20
 70+  8D35 30 06            jr nc,1F
 71+  8D37 25               dec h
 72+  8D38
 73+  8D38              ; -----------------------------
 74+  8D38 CD 8B 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D3B              ;	call Reinicio
 76+  8D3B              ; -----------------------------
 77+  8D3B
 78+  8D3B 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D3D CD 52 8A     1 call PreviousScan
 80+  8D40 22 D2 84     	ld (Posicion_actual),hl
 81+  8D43 10 E2            djnz 3B
 82+  8D45 CD B1 8F     2 call Genera_coordenadas
 83+  8D48 C9           	ret
 84+  8D49
 85+  8D49              ; ******************************************************************************************************************************************************************************************
 86+  8D49              ;
 87+  8D49              ;	19/10/22
 88+  8D49              ;
 89+  8D49              ;	Mov_right.
 90+  8D49              ;
 91+  8D49              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D49              ;
 93+  8D49
 94+  8D49 21 F7 84     Mov_right ld hl,Ctrl_0
 95+  8D4C CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D4E              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D4E              ; 																	; _ en el caso de que no lo haya.
 98+  8D4E 3A D6 84     	ld a,(CTRL_DESPLZ)
 99+  8D51 A7           	and a
100+  8D52 28 0B        	jr z,9F
101+  8D54
102+  8D54 3A F7 84     	ld a,(Ctrl_0)
103+  8D57 CB 7F        	bit 7,a
104+  8D59 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D5B 21 D6 84     	ld hl,CTRL_DESPLZ
106+  8D5E 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D5F
108+  8D5F 3A F7 84     9 ld a,(Ctrl_0)
109+  8D62 CB 77        	bit 6,a
110+  8D64 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D66
112+  8D66 CD 4A 8F     	call Stop_Amadeus_right
113+  8D69 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D6A 18 4D        	jr 8F
115+  8D6C
116+  8D6C 3A D7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D6F FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D71 20 46        	jr nz,8F
119+  8D73
120+  8D73 3A D6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D76 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D77 28 40        	jr z,8F
123+  8D79
124+  8D79              ; ---------- ---------- ----------
125+  8D79              ;
126+  8D79              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D79
128+  8D79 3A E2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D7C FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D7E 28 11        	jr z,1F
131+  8D80 38 06        	jr c,6F
132+  8D82 FE 04        	cp 4
133+  8D84 28 14        	jr z,7F
134+  8D86 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D88
136+  8D88              ; ---------- ---------- ----------
137+  8D88              ;
138+  8D88              ; Perfiles de velocidad
139+  8D88              ;
140+  8D88
141+  8D88 3A D6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
142+  8D8B FE FE        	cp $fe
143+  8D8D 20 2A        	jr nz,8F
144+  8D8F 18 10        	jr 3F
145+  8D91 3A D6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
146+  8D94 FE FD        	cp $fd
147+  8D96 20 21        	jr nz,8F
148+  8D98 18 07        	jr 3F
149+  8D9A 3A D6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
150+  8D9D FE FB        	cp $fb
151+  8D9F 20 18        	jr nz,8F
152+  8DA1
153+  8DA1              ; ---------- ---------- ----------
154+  8DA1
155+  8DA1 CD 79 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
156+  8DA4              ;	call Reinicio
157+  8DA4
158+  8DA4              ; ---------- ---------- ----------
159+  8DA4              ;
160+  8DA4              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
161+  8DA4
162+  8DA4 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
163+  8DA6 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
164+  8DA7 CD C0 8D     	call DESPLZ_DER
165+  8DAA C1           	pop bc
166+  8DAB 10 F9        	djnz 5B
167+  8DAD 2A D2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
168+  8DB0 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
169+  8DB1 22 D2 84     	ld (Posicion_actual),hl
170+  8DB4 CD B1 8F     	call Genera_coordenadas
171+  8DB7 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
172+  8DB9
173+  8DB9              ; ---------- ---------- ----------
174+  8DB9
175+  8DB9 2A D2 84     8 ld hl,(Posicion_actual)
176+  8DBC CD C0 8D     	call DESPLZ_DER
177+  8DBF C9           2 ret
178+  8DC0
179+  8DC0              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
180+  8DC0              ;
181+  8DC0              ;	22/9/22
182+  8DC0              ;
183+  8DC0
184+  8DC0 CD CF 8D     DESPLZ_DER call Desplaza_derecha
185+  8DC3 CD E4 8D         call modifica_parametros_1er_DESPLZ_2
186+  8DC6 CD 0D 8E         call Ciclo_completo
187+  8DC9 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
188+  8DCC CB FE        	set 7,(hl)
189+  8DCE C9           	ret
190+  8DCF
191+  8DCF              ; ******************************************************************************************************************************************************************************************
192+  8DCF              ;	14/9/22
193+  8DCF              ;
194+  8DCF
195+  8DCF 3A E2 84     Desplaza_derecha ld a,(Vel_right)
196+  8DD2 47           	ld b,a
197+  8DD3 2A DC 84     	ld hl,(Puntero_DESPLZ)
198+  8DD6 23           1 inc hl
199+  8DD7 23           	inc hl
200+  8DD8 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
201+  8DDA 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
202+  8DDD CD 7E 86     	call Extrae_address
203+  8DE0 22 D4 84     	ld (Puntero_objeto),hl
204+  8DE3 C9           	ret
205+  8DE4
206+  8DE4              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
207+  8DE4              ;
208+  8DE4              ;	24/7/22
209+  8DE4              ;
210+  8DE4              ;	modifica_parametros_1er_DESPLZ_2
211+  8DE4              ;
212+  8DE4              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
213+  8DE4              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
214+  8DE4              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
215+  8DE4
216+  8DE4 3A D6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
217+  8DE7 A7           	and a
218+  8DE8 20 1F        	jr nz,1F
219+  8DEA D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
220+  8DEC 32 D6 84         ld (CTRL_DESPLZ),a
221+  8DEF 21 D1 84     	ld hl,Columns
222+  8DF2 34           	inc (hl)
223+  8DF3 3A E0 84     	ld a,(Cuad_objeto)
224+  8DF6 E6 01        	and 1
225+  8DF8 28 0F        	jr z,1F
226+  8DFA 2A D2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
227+  8DFD 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
228+  8DFE 22 D2 84     	ld (Posicion_actual),hl
229+  8E01 CD B1 8F     	call Genera_coordenadas
230+  8E04 CD 56 8F     	call Inc_CTRL_DESPLZ
231+  8E07 18 03        	jr 2F
232+  8E09 CD 56 8F     1 call Inc_CTRL_DESPLZ
233+  8E0C C9           2 ret
234+  8E0D
235+  8E0D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
236+  8E0D              ;
237+  8E0D              ;	24/7/22
238+  8E0D              ;
239+  8E0D              ;	Ciclo_completo.
240+  8E0D              ;
241+  8E0D              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
242+  8E0D              ;
243+  8E0D              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
244+  8E0D              ; 	Decrementamos (Columns).
245+  8E0D              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
246+  8E0D              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
247+  8E0D
248+  8E0D
249+  8E0D 3A D6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
250+  8E10 FE FF        	cp $ff
251+  8E12 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
252+  8E14 18 25        	jr 3f
253+  8E16 21 D1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
254+  8E19 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
255+  8E1A AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
256+  8E1B 32 D6 84     	ld (CTRL_DESPLZ),a
257+  8E1E 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
258+  8E21 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
259+  8E23 20 0A        	jr nz,2F
260+  8E25 2A D2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
261+  8E28 23           	inc hl
262+  8E29 22 D2 84     	ld (Posicion_actual),hl
263+  8E2C CD B1 8F     	call Genera_coordenadas
264+  8E2F
265+  8E2F              ; Inicia el puntero de Sprite.
266+  8E2F
267+  8E2F 2A DA 84     2 ld hl,(Indice_Sprite)
268+  8E32 22 DC 84     	ld (Puntero_DESPLZ),hl
269+  8E35 CD 7E 86     	call Extrae_address
270+  8E38 22 D4 84     	ld (Puntero_objeto),hl
271+  8E3B
272+  8E3B C9           3 ret
273+  8E3C
274+  8E3C              ; ******************************************************************************************************************************************************************************************
275+  8E3C              ;
276+  8E3C              ;	21/01/23
277+  8E3C              ;
278+  8E3C              ;	Mov_left.
279+  8E3C              ;
280+  8E3C              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
281+  8E3C              ;
282+  8E3C              Mov_left
283+  8E3C
284+  8E3C 21 F7 84     	ld hl,Ctrl_0
285+  8E3F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
286+  8E41              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
287+  8E41              ; 																	; _ en el caso de que no lo haya.
288+  8E41 3A D6 84     	ld a,(CTRL_DESPLZ)
289+  8E44 A7           	and a
290+  8E45 20 19        	jr nz,10F
291+  8E47
292+  8E47 2A D4 84     	ld hl,(Puntero_objeto)
293+  8E4A 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
294+  8E4D
295+  8E4D 3A F7 84     	ld a,(Ctrl_0)
296+  8E50 CB 77        	bit 6,a
297+  8E52 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
298+  8E54
299+  8E54 CD 50 8F     	call Stop_Amadeus_left
300+  8E57 20 62        	jr nz,8F
301+  8E59
302+  8E59 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
303+  8E5C 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
304+  8E5F C9           	ret
305+  8E60
306+  8E60 3A F7 84     10 ld a,(Ctrl_0)
307+  8E63 CB 7F        	bit 7,a
308+  8E65 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
309+  8E67 21 D6 84     	ld hl,CTRL_DESPLZ
310+  8E6A 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
311+  8E6B
312+  8E6B 3A D7 84     11 ld a,(Coordenada_X)
313+  8E6E A7           	and a
314+  8E6F 20 4A        	jr nz,8F
315+  8E71 3A D6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
316+  8E74 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
317+  8E75 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
318+  8E77
319+  8E77              ; ---------- ---------- ----------
320+  8E77
321+  8E77 3A E1 84     	ld a,(Vel_left)
322+  8E7A FE 02        	cp 2
323+  8E7C 28 0F        	jr z,1F
324+  8E7E 38 04        	jr c,6F
325+  8E80 FE 04        	cp 4
326+  8E82 28 12        	jr z,7F
327+  8E84
328+  8E84              ; ---------- ---------- ----------
329+  8E84
330+  8E84 3A D6 84     6 ld a,(CTRL_DESPLZ)
331+  8E87 FE F9        	cp $f9
332+  8E89 20 30        	jr nz,8F
333+  8E8B 18 10        	jr 4F
334+  8E8D 3A D6 84     1 ld a,(CTRL_DESPLZ)
335+  8E90 FE FA        	cp $fa
336+  8E92 20 27        	jr nz,8F
337+  8E94 18 07        	jr 4F
338+  8E96 3A D6 84     7 ld a,(CTRL_DESPLZ)
339+  8E99 FE FC        	cp $fc
340+  8E9B 20 1E        	jr nz,8F
341+  8E9D
342+  8E9D              ; ---------- ---------- ----------
343+  8E9D
344+  8E9D              4
345+  8E9D CD 67 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
346+  8EA0              ;	call Reinicio
347+  8EA0
348+  8EA0              ; ---------- ---------- ----------
349+  8EA0
350+  8EA0 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
351+  8EA2 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
352+  8EA3 2A D4 84     	ld hl,(Puntero_objeto)
353+  8EA6 22 DC 84     	ld (Puntero_DESPLZ),hl
354+  8EA9 CD C2 8E     	call DESPLZ_IZQ
355+  8EAC C1           	pop bc
356+  8EAD 10 F3        	djnz 5B
357+  8EAF 2A D2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
358+  8EB2 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
359+  8EB3 22 D2 84     	ld (Posicion_actual),hl
360+  8EB6 CD B1 8F     	call Genera_coordenadas
361+  8EB9 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8EBB
363+  8EBB              ; ---------- ---------- ----------
364+  8EBB
365+  8EBB 2A D2 84     8 ld hl,(Posicion_actual)
366+  8EBE CD C2 8E     	call DESPLZ_IZQ
367+  8EC1 C9           2 ret
368+  8EC2
369+  8EC2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
370+  8EC2              ;
371+  8EC2              ;	22/9/22
372+  8EC2
373+  8EC2              DESPLZ_IZQ
374+  8EC2
375+  8EC2 CD D1 8E     	call Desplaza_izquierda
376+  8EC5 CD E6 8E         call modifica_parametros_1er_DESPLZ
377+  8EC8 CD 0A 8F     	call Ciclo_completo_2
378+  8ECB 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
379+  8ECE CB BE        	res 7,(hl)
380+  8ED0 C9           	ret
381+  8ED1 3A E1 84     Desplaza_izquierda ld a,(Vel_left)
382+  8ED4 47           	ld b,a
383+  8ED5 2A DC 84     	ld hl,(Puntero_DESPLZ)
384+  8ED8 2B           1 dec hl
385+  8ED9 2B           	dec hl
386+  8EDA 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8EDC 22 DC 84     	ld (Puntero_DESPLZ),hl
388+  8EDF CD 7E 86     	call Extrae_address
389+  8EE2 22 D4 84     	ld (Puntero_objeto),hl
390+  8EE5 C9           	ret
391+  8EE6
392+  8EE6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8EE6              ;
394+  8EE6              ;	modifica_parametros_1er_DESPLZ
395+  8EE6              ;
396+  8EE6              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8EE6              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8EE6              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8EE6
400+  8EE6 3A D6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8EE9 A7           	and a
402+  8EEA 20 1A        	jr nz,1F
403+  8EEC 21 D1 84     	ld hl,Columns
404+  8EEF 34           	inc (hl)
405+  8EF0 3A E0 84     	ld a,(Cuad_objeto)
406+  8EF3 E6 01        	and 1
407+  8EF5 20 0F        	jr nz,1F
408+  8EF7 2A D2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8EFA 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8EFB 22 D2 84     	ld (Posicion_actual),hl
411+  8EFE CD B1 8F     	call Genera_coordenadas
412+  8F01 CD 39 8F     	call Dec_CTRL_DESPLZ
413+  8F04 18 03        	jr 2F
414+  8F06 CD 39 8F     1 call Dec_CTRL_DESPLZ
415+  8F09 C9           2 ret
416+  8F0A
417+  8F0A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8F0A              ;
419+  8F0A
420+  8F0A 3A D6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
421+  8F0D FE F8        	cp $f8
422+  8F0F 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
423+  8F11 18 25        	jr 3f
424+  8F13 21 D1 84     1 ld hl,Columns
425+  8F16 35           	dec (hl)
426+  8F17 AF           	xor a
427+  8F18 32 D6 84     	ld (CTRL_DESPLZ),a
428+  8F1B 3A E0 84     	ld a,(Cuad_objeto)
429+  8F1E E6 01        	and 1
430+  8F20 28 0A        	jr z,2F
431+  8F22 2A D2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
432+  8F25 2B           	dec hl
433+  8F26 22 D2 84     	ld (Posicion_actual),hl
434+  8F29 CD B1 8F     	call Genera_coordenadas
435+  8F2C
436+  8F2C              ; Inicia el puntero de Sprite.
437+  8F2C
438+  8F2C 2A DA 84     2 ld hl,(Indice_Sprite)
439+  8F2F 22 DC 84     	ld (Puntero_DESPLZ),hl
440+  8F32 CD 7E 86     	call Extrae_address
441+  8F35 22 D4 84     	ld (Puntero_objeto),hl
442+  8F38 C9           3 ret
443+  8F39
444+  8F39              ; ---------- ---------- ---------- ---------- ---------- ----------
445+  8F39              ;
446+  8F39              ;	Dec_CTRL_DESPLZ
447+  8F39              ;
448+  8F39              ;	Subrutina de [modifica_punteros].
449+  8F39              ;
450+  8F39              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
451+  8F39
452+  8F39 21 D6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
453+  8F3C 3A E1 84     	ld a,(Vel_left)
454+  8F3F A7           	and a
455+  8F40 28 06        	jr z,1F
456+  8F42 47           	ld b,a
457+  8F43 35           3 dec (hl)
458+  8F44 10 FD        	djnz 3B
459+  8F46 18 01        	jr 2F
460+  8F48 35           1 dec (hl)
461+  8F49 C9           2 ret
462+  8F4A
463+  8F4A              ; ---------- ---------- ---------- ---------- ---------- ----------
464+  8F4A              ;
465+  8F4A              ;	19/10/22
466+  8F4A              ;
467+  8F4A              ;	(cp 29) para un Amadeus de 3 Columns.
468+  8F4A              ;	(cp 30)   ""  ""    ""     2 Columns.
469+  8F4A
470+  8F4A 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
471+  8F4D FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
472+  8F4F C9           	ret
473+  8F50
474+  8F50              ; ---------- ---------- ---------- ---------- ---------- ----------
475+  8F50              ;
476+  8F50              ;	19/10/22
477+  8F50              ;
478+  8F50              ;	(cp 2) para un Amadeus de 3 Columns.
479+  8F50              ;	(cp 1)   ""  ""    ""     2 Columns.
480+  8F50
481+  8F50 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
482+  8F53 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
483+  8F55 C9           	ret
484+  8F56
485+  8F56              ; ---------- ---------- ---------- ---------- ---------- ----------
486+  8F56              ;
487+  8F56              ;	24/7/22
488+  8F56              ;
489+  8F56              ;	Inc_CTRL_DESPLZ
490+  8F56              ;
491+  8F56              ;	Subrutina de [modifica_punteros].
492+  8F56              ;
493+  8F56              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
494+  8F56
495+  8F56 21 D6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
496+  8F59 3A E2 84     	ld a,(Vel_right)
497+  8F5C A7           	and a
498+  8F5D 28 06        	jr z,1F
499+  8F5F 47           	ld b,a
500+  8F60 34           3 inc (hl)
501+  8F61 10 FD        	djnz 3B
502+  8F63 18 01        	jr 2F
503+  8F65 34           1 inc (hl)
504+  8F66 C9           2 ret
505+  8F67
506+  8F67              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F67
508+  8F67 2A D2 84     Reaparece_derecha ld hl,(Posicion_actual)
509+  8F6A 01 1F 00     	ld bc,31
510+  8F6D A7           	and a
511+  8F6E ED 4A        	adc hl,bc
512+  8F70 22 D2 84     	ld (Posicion_actual),hl
513+  8F73 21 F7 84     	ld hl,Ctrl_0														; $xxx1
514+  8F76 CB C6        	set 0,(hl)
515+  8F78 C9           	ret
516+  8F79
517+  8F79              ; ---------- ---------- ---------- ---------- ---------- ----------
518+  8F79
519+  8F79 2A D2 84     Reaparece_izquierda ld hl,(Posicion_actual)
520+  8F7C 01 1F 00     	ld bc,31
521+  8F7F A7           	and a
522+  8F80 ED 42        	sbc hl,bc
523+  8F82 22 D2 84     	ld (Posicion_actual),hl 											; $xx1x
524+  8F85 21 F7 84     	ld hl,Ctrl_0
525+  8F88 CB CE        	set 1,(hl)
526+  8F8A C9           	ret
527+  8F8B
528+  8F8B              ; ---------- ---------- ---------- ---------- ---------- ----------
529+  8F8B
530+  8F8B 24           Reaparece_abajo inc h
531+  8F8C 01 E0 17     	ld bc,$17e0
532+  8F8F A7           	and a
533+  8F90 ED 4A        	adc hl,bc
534+  8F92 22 D2 84     	ld (Posicion_actual),hl
535+  8F95 21 F7 84     	ld hl,Ctrl_0
536+  8F98 CB D6        	set 2,(hl)
537+  8F9A C9           	ret
538+  8F9B
539+  8F9B              ; ---------- ---------- ---------- ---------- ---------- ----------
540+  8F9B
541+  8F9B 01 E0 17     Reaparece_arriba ld bc,$17e0
542+  8F9E A7           	and a
543+  8F9F ED 42        	sbc hl,bc
544+  8FA1 22 D2 84     	ld (Posicion_actual),hl
545+  8FA4 21 F7 84     	ld hl,Ctrl_0
546+  8FA7 CB DE        	set 3,(hl)
547+  8FA9 C9           	ret
548+  8FAA
549+  8FAA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
550+  8FAA
551+  8FAA 2A DE 84     Reinicio ld hl,(Posicion_inicio)
552+  8FAD 22 D2 84     	ld (Posicion_actual),hl
553+  8FB0 C9           	ret
# file closed: Direcciones.asm
689   8FB1              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FB1              ;	12/12/22
  2+  8FB1              ;
  3+  8FB1              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FB1              ;	Fila superior "0", Columna izquierda "0".
  5+  8FB1              ;
  6+  8FB1              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FB1              ;
  8+  8FB1              ;	Modifica: A
  9+  8FB1
 10+  8FB1 C5           Genera_coordenadas push bc
 11+  8FB2 E5           	push hl
 12+  8FB3 2A D2 84     	ld hl,(Posicion_actual)
 13+  8FB6 7D           	ld a,l
 14+  8FB7 E6 1F        	and $1f
 15+  8FB9 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FBC CD A1 8C     	call calcula_tercio
 17+  8FBF 47           	ld b,a
 18+  8FC0 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FC1 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FC3 7D           	ld a,l
 21+  8FC4 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FC6 28 05        	jr z,2F
 23+  8FC8 0C           1 inc c
 24+  8FC9 D6 20        	sub 32
 25+  8FCB 20 FB        	jr nz,1B
 26+  8FCD 0C           2 inc c
 27+  8FCE 04           	inc b
 28+  8FCF 05           	dec b
 29+  8FD0 28 04        	jr z,3F
 30+  8FD2 3E E0        	ld a,$e0
 31+  8FD4 10 F2        	djnz 1B
 32+  8FD6 79           3 ld a,c
 33+  8FD7 3D           	dec a
 34+  8FD8 32 D8 84     	ld (Coordenada_y),a
 35+  8FDB E1           	pop hl
 36+  8FDC C1           	pop bc
 37+  8FDD C9           	ret
# file closed: Genera_coordenadas.asm
690   8FDE              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FDE
  2+  8FDE
  3+  8FDE              ;   11/8/22
  4+  8FDE              ;
  5+  8FDE              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FDE              ;
  7+  8FDE              ;   Mov_obj.asm
  8+  8FDE              ;
  9+  8FDE              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FDE              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FDE              ;
 12+  8FDE              ;   Codificación:
 13+  8FDE              ;
 14+  8FDE              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FDE
 16+  8FDE 02 10 00     Izquierda db 2,%00010000,0
 17+  8FE1 02 20 00     Derecha db 2,%00100000,0
 18+  8FE4 02 80 00     Abajo db 2,%10000000,0
 19+  8FE7 02 40 00     Arriba db 2,%01000000,0
 20+  8FEA
 21+  8FEA 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8FEE 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8FF2 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8FF6 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8FFA 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8FFE 60 42 60 40
 25+  9002 63
 26+  9003 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  9007 22 A3 80 A0
 27+  900B 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  900F 84 A0 83 A0
 28+  9013 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  9017 80 A3 22 A0
 29+  901B 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  901F 40 60 42 60
 30+  9023 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  9027
 32+  9027 DE 8F        Indice_mov_Izquierda defw Izquierda
 33+  9029 E1 8F        Indice_mov_Derecha defw Derecha
 34+  902B E4 8F        Indice_mov_Abajo defw Abajo
 35+  902D E7 8F        Indice_mov_Arriba defw Arriba
 36+  902F EE 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  9031 F2 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  9033 EA 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  9035 F6 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  9037 FA 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  9039
 42+  9039 3A FD 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  903C A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  903D 28 02            jr z,1F
 45+  903F 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  9041 3A FE 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  9044 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  9046 32 FE 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  9049              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  9049 2A FB 84         ld hl,(Puntero_mov)
 51+  904C 7E               ld a,(hl)
 52+  904D 32 FD 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  9050 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  9051 22 FB 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  9054
 56+  9054 3A FF 84     Decoder ld a,(Repetimos_db)
 57+  9057 A7               and a
 58+  9058 20 0C            jr nz,12F
 59+  905A 2A FB 84         ld hl,(Puntero_mov)
 60+  905D 7E               ld a,(hl)
 61+  905E A7               and a
 62+  905F 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  9061 E6 0F             and $0f
 64+  9063 32 FF 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  9066              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  9066 2A FB 84     12 ld hl,(Puntero_mov)
 67+  9069 CB 7E            bit 7,(hl)
 68+  906B 28 03            jr z,2F
 69+  906D CD ED 8C         call Mov_down
 70+  9070 2A FB 84     2 ld hl, (Puntero_mov)
 71+  9073 CB 76            bit 6,(hl)
 72+  9075 28 03            jr z,3F
 73+  9077 CD 1B 8D         call Mov_up
 74+  907A 2A FB 84     3 ld hl, (Puntero_mov)
 75+  907D CB 6E            bit 5,(hl)
 76+  907F 28 03            jr z,4F
 77+  9081 CD 49 8D         call Mov_right
 78+  9084 2A FB 84     4 ld hl, (Puntero_mov)
 79+  9087 CB 66            bit 4,(hl)
 80+  9089 28 03            jr z,5F
 81+  908B CD 3C 8E         call Mov_left
 82+  908E
 83+  908E              ; ---------- --------- --------- ---------- ----------
 84+  908E
 85+  908E 3A FF 84     5 ld a,(Repetimos_db)
 86+  9091 A7               and a
 87+  9092 28 07            jr z,6F
 88+  9094 3D               dec a
 89+  9095 32 FF 84         ld (Repetimos_db),a
 90+  9098 28 01            jr z,6f
 91+  909A C9           11 ret
 92+  909B 21 FD 84     6 ld hl,Contador_db_mov
 93+  909E 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  909F 2A FB 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  90A2 23               inc hl
 96+  90A3 22 FB 84         ld (Puntero_mov),hl
 97+  90A6 18 F2            jr 11B
 98+  90A8 2A F9 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  90AB 3A FE 84         ld a,(Incrementa_puntero)
100+  90AE 47               ld b,a
101+  90AF 23           8 inc hl
102+  90B0 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  90B2 5E               ld e,(hl)
104+  90B3 23               inc hl
105+  90B4 56               ld d,(hl)
106+  90B5 EB               ex de,hl
107+  90B6 22 FB 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  90B9 18 DF            jr 11B
109+  90BB
110+  90BB              ; ---------- --------- --------- ---------- ----------
111+  90BB              ;
112+  90BB              ;   11/8/22
113+  90BB              ;
114+  90BB              ;   Prepara_Puntero_mov
115+  90BB
116+  90BB E5           Prepara_Puntero_mov push hl
117+  90BC D5               push de
118+  90BD 2A F9 84         ld hl,(Puntero_indice_mov)
119+  90C0 5E               ld e,(hl)
120+  90C1 23               inc hl
121+  90C2 56               ld d,(hl)
122+  90C3 EB               ex de,hl
123+  90C4 22 FB 84         ld (Puntero_mov),hl
124+  90C7 D1               pop de
125+  90C8 E1               pop hl
126+  90C9 C9               ret
127+  90CA
128+  90CA              ; ---------- --------- --------- ---------- ----------
129+  90CA              ;
130+  90CA              ;   11/8/22
131+  90CA              ;
132+  90CA              ;   Reinicia_el_movimiento
133+  90CA
134+  90CA CD BB 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  90CD AF               xor a
136+  90CE 32 FD 84         ld (Contador_db_mov),a
137+  90D1 32 FE 84         ld (Incrementa_puntero),a
138+  90D4 C3 39 90         jp Movimiento
139+  90D7
140+  90D7              ; ---------- --------- --------- ---------- ----------
141+  90D7
142+  90D7
143+  90D7
144+  90D7
145+  90D7
146+  90D7
147+  90D7
148+  90D7
149+  90D7
150+  90D7
151+  90D7
152+  90D7
153+  90D7
154+  90D7
155+  90D7
156+  90D7
157+  90D7
158+  90D7
# file closed: Patrones_de_mov.asm
691   90D7              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90D7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90D7              ;
  3+  90D7              ;	3/1/23
  4+  90D7              ;
  5+  90D7              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90D7
  7+  90D7              ;	ADC HL,SP	LD (addr),SP
  8+  90D7              ;	ADD HL,SP	LD SP,(addr)
  9+  90D7              ;	ADD IX,SP	LD SP,nn
 10+  90D7              ; 	ADD IY,SP	LD SP,HL
 11+  90D7              ;				LD SP,IX
 12+  90D7              ;	DEC SP		LD SP,IY
 13+  90D7
 14+  90D7              ;	EX (SP),HL
 15+  90D7              ;	EX (SP),IX
 16+  90D7              ;	EX (SP),IY
 17+  90D7
 18+  90D7              ;	INC SP
 19+  90D7
 20+  90D7
 21+  90D7                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 10 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 10 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
692   7FC0
693   7FC0              	SAVESNA "Pruebas.sna", START
694   7FC0
695   7FC0
696   7FC0
# file closed: Banco_de_pruebas.asm
