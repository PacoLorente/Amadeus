# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 71 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									 ; 58 Bytes por entidad.
  7+  83C0
  8+  83C0 08 84        	defw Badsat
  9+  83C2 42 84        	defw Badsat2
 10+  83C4 7C 84        	defw Badsat3
 11+  83C6 B6 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 23+  83D0 00 00        	defw 0 											; (Posicion_actual).
 24+  83D2 00 00        	defw 0 											; (Puntero_objeto).
 25+  83D4 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 26+  83D7
 27+  83D7 05           	db %00000101									; (Attr).
 28+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 29+  83DA 00 00        	defw 0	 										; (Puntero_DESPLZ).
 30+  83DC CF 50        	defw $50cf										; (Posicion_inicio).
 31+  83DE 00           	db 0 											; (Cuad_objeto).
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 34+  83E3
 35+  83E3 00 00        	db 0,0											; Variables_de_borrado
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00        	defw 0											;	" " " " " " "
 38+  83E9 00 00 00     	db 0,0,0										;	" " " " " " "
 39+  83EC
 40+  83EC 00 00        	db 0,0											; Variables_de_pintado
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00        	defw 0											;	" " " " " " "
 43+  83F2 00 00 00     	db 0,0,0										;	" " " " " " "
 44+  83F5
 45+  83F5 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 46+  83F7
 47+  83F7 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 48+  83FB 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 49+  83FE
 50+  83FE 00           	db 0 											; (Columnas).
 51+  83FF 00 00        	defw 0											; (Limite_horizontal).
 52+  8401 00           	db 0											; (Limite_vertical).
 53+  8402 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 53+  8406 00 00
 54+  8408
 55+  8408              ; ---------- ---------- ---------- ---------- ----------
 56+  8408
 57+  8408 02 02        Badsat db 2,2										; (Filas) / (Columns).
 58+  840A 00 00        	defw 0											; (Posicion_actual).
 59+  840C 00 00        	defw 0 											; (Puntero_objeto).
 60+  840E 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 61+  8411
 62+  8411 06           	db %00000110 									; (Attr).
 63+  8412 80 81        	defw Indice_Badsat_der							; (Indice_Sprite).
 64+  8414 00 00        	defw 0											; (Puntero_DESPLZ).
 65+  8416 A1 47        	defw $47a1										; (Posicion_inicio).
 66+  8418 00           	db 0											; (Cuad_objeto).
 67+  8419
 68+  8419 01 01 01 02  	db 1,1,1,2										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 69+  841D
 70+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 71+  841F 00 00        	defw 0											;	" " " " " " "
 72+  8421 00 00        	defw 0											;	" " " " " " "
 73+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 74+  8426
 75+  8426 00 00        	db 0,0											; Variables_de_pintado
 76+  8428 00 00        	defw 0											;	" " " " " " "
 77+  842A 00 00        	defw 0											;	" " " " " " "
 78+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 79+  842F
 80+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 81+  8431
 82+  8431 C6 8F 00 00  	defw Indice_mov_Derecha,0 						; (Puntero_indice_mov) / (Puntero_mov).
 83+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 84+  8438
 85+  8438 00           	db 0 											; (Columnas).
 86+  8439 00 00        	defw 0											; (Limite_horizontal).
 87+  843B 00           	db 0											; (Limite_vertical).
 88+  843C 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 88+  8440 00 00
 89+  8442
 90+  8442              ; ---------- ---------- ---------- ---------- ----------
 91+  8442
 92+  8442 02 02        Badsat2 db 2,2		                                ; (Filas) / (Columns).
 93+  8444 00 00        	defw 0                                          ; (Posicion_actual).
 94+  8446 00 00        	defw 0											; (Puntero_objeto).
 95+  8448 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 96+  844B
 97+  844B 02           	db %00000010									; (Attr).
 98+  844C 80 81        	defw Indice_Badsat_der	                        ; (Indice_Sprite).
 99+  844E 00 00        	defw 0                                          ; (Puntero_DESPLZ).
100+  8450 61 47        	defw $4761                                      ; (Posicion_inicio).
101+  8452 00           	db 0											; (Cuad_objeto).
102+  8453
103+  8453 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
104+  8457
105+  8457 00 00        	db 0,0											; Variables_de_borrado
106+  8459 00 00        	defw 0										 	;	" " " " " " "
107+  845B 00 00        	defw 0											;	" " " " " " "
108+  845D 00 00 00     	db 0,0,0										;	" " " " " " "
109+  8460
110+  8460 00 00        	db 0,0											; Variables_de_pintado
111+  8462 00 00        	defw 0											;	" " " " " " "
112+  8464 00 00        	defw 0											;	" " " " " " "
113+  8466 00 00 00     	db 0,0,0										;	" " " " " " "
114+  8469
115+  8469 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
116+  846B
117+  846B CC 8F 00 00  	defw Indice_mov_Badsat2,0                       ; (Puntero_indice_mov) / (Puntero_mov).
118+  846F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
119+  8472
120+  8472 00           	db 0 											; (Columnas).
121+  8473 00 00        	defw 0											; (Limite_horizontal).
122+  8475 00           	db 0											; (Limite_vertical).
123+  8476 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
123+  847A 00 00
124+  847C
125+  847C              ; ---------- ---------- ---------- ---------- ----------
126+  847C
127+  847C 02 02        Badsat3 db 2,2                                 		; (Filas) / (Columns).
128+  847E 00 00        	defw 0                                          ; (Posicion_actual).
129+  8480 00 00        	defw 0											; (Puntero_objeto).
130+  8482 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
131+  8485
132+  8485 04           	db %00000100									; (Attr).
133+  8486 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
134+  8488 00 00        	defw 0                                          ; (Puntero_DESPLZ).
135+  848A 7E 47        	defw $477e                                      ; (Posicion_inicio).
136+  848C 00           	db 0											; (Cuad_objeto).
137+  848D
138+  848D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
139+  8491
140+  8491 00 00        	db 0,0											; Variables_de_borrado
141+  8493 00 00        	defw 0										 	;	" " " " " " "
142+  8495 00 00        	defw 0											;	" " " " " " "
143+  8497 00 00 00     	db 0,0,0										;	" " " " " " "
144+  849A
145+  849A 00 00        	db 0,0											; Variables_de_pintado
146+  849C 00 00        	defw 0											;	" " " " " " "
147+  849E 00 00        	defw 0											;	" " " " " " "
148+  84A0 00 00 00     	db 0,0,0										;	" " " " " " "
149+  84A3
150+  84A3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
151+  84A5
152+  84A5 CE 8F 00 00  	defw Indice_mov_Badsat3,0                       ; (Puntero_indice_mov) / (Puntero_mov).
153+  84A9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
154+  84AC
155+  84AC 00           	db 0 											; (Columnas).
156+  84AD 00 00        	defw 0											; (Limite_horizontal).
157+  84AF 00           	db 0											; (Limite_vertical).
158+  84B0 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
158+  84B4 00 00
159+  84B6
160+  84B6              ; ---------- ---------- ---------- ---------- ----------
161+  84B6
162+  84B6 02 02        Badsat4 db 2,2                                  	; (Filas) / (Columns).
163+  84B8 00 00        	defw 0                                          ; (Posicion_actual).
164+  84BA 00 00        	defw 0 											; (Puntero_objeto).
165+  84BC 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
166+  84BF
167+  84BF 01           	db %00000001									; (Attr).
168+  84C0 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
169+  84C2 00 00        	defw 0                                          ; (Puntero_DESPLZ).
170+  84C4 BE 47        	defw $47be                                      ; (Posicion_inicio).
171+  84C6 00           	db 0											; (Cuad_objeto).
172+  84C7
173+  84C7 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
174+  84CB
175+  84CB 00 00        	db 0,0											; Variables_de_borrado
176+  84CD 00 00        	defw 0										 	;	" " " " " " "
177+  84CF 00 00        	defw 0											;	" " " " " " "
178+  84D1 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84D4
180+  84D4 00 00        	db 0,0											; Variables_de_pintado
181+  84D6 00 00        	defw 0											;	" " " " " " "
182+  84D8 00 00        	defw 0											;	" " " " " " "
183+  84DA 00 00 00     	db 0,0,0										;	" " " " " " "
184+  84DD
185+  84DD 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
186+  84DF
187+  84DF D0 8F 00 00  	defw Indice_mov_Badsat4,0                       ; (Puntero_indice_mov) / (Puntero_mov).
188+  84E3 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
189+  84E6
190+  84E6 00           	db 0 											; (Columnas).
191+  84E7 00 00        	defw 0											; (Limite_horizontal).
192+  84E9 00           	db 0											; (Limite_vertical).
193+  84EA 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
193+  84EE 00 00
# file closed: Base_de_datos_Sprites.asm
 21   84F0
 22   84F0              ; ******************************************************************************************************************************************************************************************
 23   84F0              ; Constantes.
 24   84F0              ; ******************************************************************************************************************************************************************************************
 25   84F0              ;
 26   84F0              ; 8/11/22
 27   84F0              ;
 28   84F0              ; Constantes generales.
 29   84F0              ;
 30   84F0
 31   84F0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84F0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84F0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84F0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84F0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84F0
 37   84F0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84F0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84F0
 40   84F0
 41   84F0              ; ******************************************************************************************************************************************************************************************
 42   84F0              ; Variables.
 43   84F0              ; ******************************************************************************************************************************************************************************************
 44   84F0              ;
 45   84F0              ; 10/11/22
 46   84F0              ;
 47   84F0              ; Variables de DRAW. (Motor principal).
 48   84F0              ;
 49   84F0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84F0
 51   84F0 02           Filas db 2												; Filas. [DRAW]
 52   84F1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84F2 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 54   84F4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84F6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84F7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84F7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84F7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84F7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84F8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84F9
 62   84F9              ; ---------- ---------- ----------
 63   84F9
 64   84F9
 65   84F9 04           Attr db %00000100										; Atributos de la entidad:
 66   84FA
 67   84FA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84FA              ;
 69   84FA              ;	COLORES: 0 ..... NEGRO
 70   84FA              ;    		 1 ..... AZUL
 71   84FA              ; 			 2 ..... ROJO
 72   84FA              ;			 3 ..... MAGENTA
 73   84FA              ; 			 4 ..... VERDE
 74   84FA              ; 			 5 ..... CIAN
 75   84FA              ;			 6 ..... AMARILLO
 76   84FA              ; 			 7 ..... BLANCO
 77   84FA
 78   84FA 00 80        Indice_Sprite defw Indice_Badsat_izq
 79   84FC 00 00        Puntero_DESPLZ defw 0
 80   84FE 2F 47        Posicion_inicio defw $472f								; Dirección de pantalla donde aparece el objeto. [DRAW]
 81   8500 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   8501
 83   8501              ; Variables de objeto. (Características).
 84   8501
 85   8501 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   8502 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   8503 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   8504 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   8505
 90   8505 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   8507 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   8509 00 00        	defw 0
 93   850B 00 00 00     	db 0,0,0
 94   850E
 95   850E 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   8510 00 00        	defw 0
 97   8512 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   8514 00 00 00     	db 0,0,0
 99   8517
100   8517              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   8517
102   8517 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   8518              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   8518              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   8518              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   8518              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   8518              ;
108   8518              ; 														DESCRIPCIÖN:
109   8518              ;
110   8518              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   8518              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   8518              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   8518              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   8518              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   8518              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   8518              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   8518              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   8518              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   8518              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   8518              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   8518              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   8518              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   8518              ;
124   8518              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   8518              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   8518              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   8518
128   8518 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   8519
130   8519              ; Movimiento.
131   8519
132   8519 C8 8F        Puntero_indice_mov defw Indice_mov_Abajo
133   851B 00 00        Puntero_mov defw 0
134   851D 00           Contador_db_mov db 0
135   851E 00           Incrementa_puntero db 0
136   851F 00           Repetimos_db db 0
137   8520
138   8520
139   8520              ; Variables de funcionamiento. [DRAW].
140   8520
141   8520 00           Columnas db 0
142   8521 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8523              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8523 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8524
146   8524
147   8524              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8524
149   8524              ; Gestión de ENTIDADES.
150   8524
151   8524 00 00        Puntero_store_entidades defw 0
152   8526 00 00        Puntero_restore_entidades defw 0
153   8528 00 00        Indice_restore defw 0
154   852A
155   852A              ; 58 Bytes por entidad.
156   852A              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
157   852A
158   852A 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   852B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   852C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   852C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   852C              ;														; _ (Numero_de_malotes)="0".
163   852C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   852E              ;														; _variable para almacenar lo posición del puntero_
165   852E              ; 														; _de pila, SP.
166   852E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   8530              ;														; La utiliza la rutina [Extrae_foto_registros].
168   8530 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   8532              ;														; _el snapshot de los registros de la siguiente entidad.
170   8532              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   8532
172   8532              ; Gestión de FRAMES.
173   8532
174   8532 00           Switch db 0
175   8533
176   8533              ; Variables de Raster y localización en pantalla.
177   8533
178   8533 00 FF        Temp_Raster defw $ff00
179   8535
180   8535              ; Rutina principal *************************************************************************************************************************************************************************
181   8535              ;
182   8535              ;	14/11/22
183   8535
184   8535 31 FF FF     START ld sp,$ffff
185   8538
186   8538 3E A0        	ld a,$a0
187   853A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
188   853C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
189   853E F3           	DI
190   853F
191   853F 3E 01        	ld a,1
192   8541 D3 FE        	out ($fe),a
193   8543
194   8543 3E 07        	ld a,%00000111
195   8545 CD 76 8C     	call Cls
196   8548
197   8548              ;	call Pinta_FILAS
198   8548
199   8548 CD AB 86     	call Pulsa_ENTER
200   854B
201   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
202   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
203   854B              ;	Pintamos el resto de entidades:
204   854B
205   854B CD 1E 86     	call Inicia_punteros_de_entidades
206   854E 21 2A 85     	ld hl,Numero_de_entidades
207   8551 46           	ld b,(hl)
208   8552
209   8552 C5           1 push bc  												; Guardo el contador de entidades.
210   8553 CD 4D 86      	call Inicia_Puntero_objeto
211   8556 CD 02 87     	call Draw
212   8559 CD A0 7F     	call Guarda_foto_registros
213   855C CD 6A 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
214   855F C1           	pop bc
215   8560 10 F0        	djnz 1B  											; Decremento el contador de entidades.
216   8562
217   8562              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
218   8562
219   8562 CD 1E 86     	call Inicia_punteros_de_entidades
220   8565 CD 99 86     	call Restore_Primera_entidad
221   8568
222   8568 3A 2A 85     	ld a,(Numero_de_entidades)
223   856B 32 2B 85     	ld (Numero_de_malotes),a
224   856E
225   856E FB           2 ei
226   856F 18 FD        	jr 2B
227   8571
228   8571              ; -----------------------------------------------------------------------------------
229   8571
230   8571              Frame
231   8571
232   8571              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
233   8571              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
234   8571
235   8571 3E 07            ld a,7
236   8573 D3 FE            out ($fe),a
237   8575
238   8575 CD 03 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
239   8578
240   8578 3E 01            ld a,1
241   857A D3 FE            out ($fe),a
242   857C
243   857C              ; ----------------------------------------------------------------------
244   857C
245   857C 21 00 70     	ld hl,Album_de_fotos
246   857F 22 30 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
247   8582              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
248   8582 3A 2A 85         ld a,(Numero_de_entidades)
249   8585 47               ld b,a
250   8586
251   8586 C5           2 push bc
252   8587
253   8587 CD AD 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
254   858A
255   858A 3A 17 85      	ld a,(Ctrl_0)
256   858D CB 67        	bit 4,a
257   858F 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
258   8591
259   8591 CD E5 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
260   8594
261   8594 21 17 85     	ld hl,Ctrl_0
262   8597 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
263   8599
264   8599 CD 6A 86     1 call Store_Restore_entidades
265   859C
266   859C C1           	pop bc
267   859D 10 E7        	djnz 2B
268   859F
269   859F CD 1E 86     	call Inicia_punteros_de_entidades
270   85A2 CD 99 86     	call Restore_Primera_entidad
271   85A5 CD 34 86     	call Calcula_numero_de_malotes
272   85A8
273   85A8 3E 00        	ld a,0
274   85AA D3 FE        	out ($fe),a
275   85AC
276   85AC C9           	ret
277   85AD
278   85AD              ; --------------------------------------------------------------------------------------------------------------
279   85AD              ;
280   85AD              Mov_obj
281   85AD
282   85AD              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
283   85AD
284   85AD AF           	xor a
285   85AE 32 18 85     	ld (Obj_dibujado),a
286   85B1 CD EF 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
287   85B4              ;														; Obj_dibujado="0".
288   85B4              ; Movemos Amadeus o enemigos...
289   85B4
290   85B4 3A 17 85     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
291   85B7 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
292   85B9 C4 BF 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
293   85BC
294   85BC 3A 17 85     	ld a,(Ctrl_0)
295   85BF CB 77        	bit 6,a
296   85C1 CC D2 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
297   85C4
298   85C4 3A 17 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
299   85C7 CB 67        	bit 4,a
300   85C9 C8           	ret z
301   85CA
302   85CA              ; ---------
303   85CA
304   85CA 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
305   85CC 32 18 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
306   85CF CD EF 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
307   85D2
308   85D2 CD 06 86         call Repone_borrar
309   85D5
310   85D5              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
311   85D5
312   85D5 CD D9 89     	call Prepara_draw
313   85D8 CD 13 89     	call calcula_CColumnass
314   85DB CD 4A 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
315   85DE CD 9F 89     	call Define_rutina_de_impresion
316   85E1 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
317   85E4
318   85E4 C9           	ret
319   85E5
320   85E5              ; --------------------------------------------------------------------------------------------------------------
321   85E5              ;
322   85E5 CD 12 86     Borra_Pinta_obj call Repone_pintar
323   85E8 CD 02 87     	call Draw
324   85EB CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
325   85EE C9           	ret
326   85EF
327   85EF              ; --------------------------------------------------------------------------------------------------------------
328   85EF
329   85EF 21 F0 84     Prepara_var_pintado_borrado	ld hl,Filas
330   85F2 3A 18 85     	ld a,(Obj_dibujado)
331   85F5 A7           	and a
332   85F6 28 05        	jr z,1F
333   85F8 11 0E 85     	ld de,Variables_de_pintado
334   85FB 18 03        	jr 2F
335   85FD 11 05 85     1 ld de,Variables_de_borrado
336   8600 01 09 00     2 ld bc,9
337   8603 ED B0        	ldir
338   8605 C9           	ret
339   8606
340   8606 21 05 85     Repone_borrar ld hl,Variables_de_borrado
341   8609 11 F0 84     	ld de,Filas
342   860C 01 09 00     	ld bc,9
343   860F ED B0        	ldir
344   8611 C9           	ret
345   8612
346   8612 21 0E 85     Repone_pintar ld hl,Variables_de_pintado
347   8615 11 F0 84     	ld de,Filas
348   8618 01 09 00     	ld bc,9
349   861B ED B0        	ldir
350   861D C9           	ret
351   861E
352   861E              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
353   861E              ;	ld (Caja_de_BORRADO),hl
354   861E              ;	ret
355   861E
356   861E              ; *************************************************************************************************************************************************************
357   861E              ;
358   861E              ; 8/1/23
359   861E              ;
360   861E              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
361   861E              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
362   861E              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
363   861E
364   861E              ; Destruye HL y DE !!!!!
365   861E
366   861E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
367   8621 CD 47 86         call Extrae_address
368   8624 22 24 85         ld (Puntero_store_entidades),hl
369   8627 21 C2 83     	ld hl,Indice_de_entidades+2
370   862A 22 28 85     	ld (Indice_restore),hl
371   862D CD 47 86     	call Extrae_address
372   8630 22 26 85     	ld (Puntero_restore_entidades),hl
373   8633 C9               ret
374   8634
375   8634              ; -------------------------------------------------------------------------------------------------------------
376   8634              ;
377   8634              ; 7/1/23
378   8634              ;
379   8634
380   8634 2A 30 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
381   8637 AF           	xor a
382   8638 67           	ld h,a
383   8639 7D           	ld a,l
384   863A D6 06        1 sub 6
385   863C 28 03        	jr z,2F
386   863E 24           	inc h
387   863F 18 F9        	jr 1B
388   8641 24           2 inc h
389   8642 7C           	ld a,h
390   8643 32 2B 85     	ld (Numero_de_malotes),a
391   8646 C9           	ret
392   8647
393   8647              ; *************************************************************************************************************************************************************
394   8647              ;
395   8647              ; 20/10/22
396   8647              ;
397   8647              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
398   8647              ;
399   8647              ; Destruye el puntero y DE !!!!!
400   8647
401   8647 5E           Extrae_address ld e,(hl)
402   8648 23           	inc hl
403   8649 56           	ld d,(hl)
404   864A 2B           	dec hl
405   864B EB           	ex de,hl
406   864C C9           	ret
407   864D
408   864D              ; *************************************************************************************************************************************************************
409   864D              ;
410   864D              ;	21/9/22
411   864D              ;
412   864D              ;   Destruye HL y BC !!!!!,
413   864D
414   864D 2A FA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
415   8650 22 FC 84     	ld (Puntero_DESPLZ),hl
416   8653 CD 47 86     	call Extrae_address
417   8656 22 F4 84     	ld (Puntero_objeto),hl
418   8659
419   8659              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
420   8659
421   8659 21 10 83     	ld hl,Amadeus
422   865C ED 4B F4 84  	ld bc,(Puntero_objeto)
423   8660 B7 ED 42     	sub hl,bc
424   8663 C0           	ret nz
425   8664
426   8664 21 17 85     	ld hl,Ctrl_0
427   8667 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
428   8669
429   8669 C9            	ret 												; _de nuestra nave en los extremos.
430   866A
431   866A              ; *************************************************************************************************************************************************************
432   866A              ;
433   866A              ;	8/1/23
434   866A              ;
435   866A              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
436   866A              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
437   866A
438   866A              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
439   866A              ;	_de la 2ª y 3ª entidad respectivamente.
440   866A
441   866A
442   866A
443   866A              Store_Restore_entidades
444   866A
445   866A E5           	push hl
446   866B D5           	push de
447   866C C5            	push bc
448   866D
449   866D              ;	STORE !!!!!
450   866D
451   866D 21 F0 84     	ld hl,Filas
452   8670 ED 5B 24 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
453   8674 01 3A 00     	ld bc,58
454   8677 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
455   8679
456   8679              ;	Incrementa STORE y ejecuta RESTORE !!!!!
457   8679
458   8679 2A 26 85     	ld hl,(Puntero_restore_entidades)
459   867C 22 24 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
460   867F 11 F0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
461   8682 01 3A 00     	ld bc,58
462   8685 ED B0        	ldir
463   8687
464   8687              ;	Incrementa RESTORE !!!!!
465   8687
466   8687 2A 28 85         ld hl,(Indice_restore)
467   868A 23           	inc hl
468   868B 23           	inc hl
469   868C 22 28 85     	ld (Indice_restore),hl
470   868F CD 47 86         call Extrae_address
471   8692 22 26 85         ld (Puntero_restore_entidades),hl
472   8695
473   8695 C1           	pop bc
474   8696 D1           	pop de
475   8697 E1           	pop hl
476   8698
477   8698 C9           	ret
478   8699
479   8699              ; **************************************************************************************************
480   8699              ;
481   8699              ;	29/10/22
482   8699              ;
483   8699              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
484   8699
485   8699 E5           Restore_Primera_entidad push hl
486   869A D5           	push de
487   869B C5            	push bc
488   869C 2A 24 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
489   869F 11 F0 84     	ld de,Filas
490   86A2 01 3A 00     	ld bc,58
491   86A5 ED B0        	ldir
492   86A7 C1           	pop bc
493   86A8 D1           	pop de
494   86A9 E1           	pop hl
495   86AA C9           	ret
496   86AB
497   86AB              ; *************************************************************************************************************************************************************
498   86AB              ;
499   86AB              ; Teclado.
500   86AB
501   86AB 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
502   86AD DB FE        	in a,($fe)
503   86AF E6 01        	and $01
504   86B1 28 02        	jr z,1f
505   86B3 18 F6        	jr Pulsa_ENTER
506   86B5 C9           1 ret
507   86B6
508   86B6              ; **************************************************************************************************
509   86B6              ;
510   86B6              ; Temporización.
511   86B6
512   86B6              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
513   86B6              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
514   86B6              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
515   86B6              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
516   86B6
517   86B6              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
518   86B6              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
519   86B6              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
520   86B6
521   86B6              ; A partir de $4f61 no hace falta DELAY.
522   86B6
523   86B6              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
524   86B6
525   86B6 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
526   86B9 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
527   86BA 78           	LD A,B
528   86BB A7           	AND A
529   86BC 20 FB        	JR NZ,wait
530   86BE C9           	RET
531   86BF
532   86BF              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
533   86BF              ;
534   86BF              ;	21/4/22
535   86BF
536   86BF              Movimiento_Amadeus
537   86BF
538   86BF 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
539   86C1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
540   86C3 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
541   86C5 CC D9 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
542   86C8 3E F7        	ld a,$f7
543   86CA DB FE        	in a,($fe)
544   86CC E6 01        	and $01
545   86CE C8           	ret z
546   86CF 3E F7        	ld a,$f7
547   86D1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
548   86D3 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
549   86D5 CC E6 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
550   86D8 C9               ret
551   86D9
552   86D9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
553   86D9
554   86D9              ; Pinta indicadores de FILAS. ------------------------------------------------------
555   86D9
556   86D9 21 10 40     Pinta_FILAS ld hl,$4010
557   86DC              ;	ld b,9
558   86DC              ;2 push hl
559   86DC              ;	push bc
560   86DC 06 BF        	ld b,$bf
561   86DE 36 80        1 ld (hl),%10000000
562   86E0 CD E5 89     	call NextScan
563   86E3 10 F9        	djnz 1B
564   86E5              ;	pop bc
565   86E5              ;	pop hl
566   86E5              ;	inc l
567   86E5              ;	djnz 2B
568   86E5
569   86E5 06 03        	ld b,3
570   86E7 21 00 47         ld hl,$4700
571   86EA CD F0 86     3 call Bucle_1
572   86ED 10 FB            djnz 3B
573   86EF C9               ret
574   86F0
575   86F0 C5           Bucle_1 push bc
576   86F1 E5                   push hl
577   86F2 D1                   pop de
578   86F3 13                   inc de
579   86F4 01 FF 00             ld bc,255
580   86F7 36 FF                ld (hl),255
581   86F9 ED B0                ldir
582   86FB 23                   inc hl
583   86FC 3E 07                ld a,7
584   86FE 84                   add a,h
585   86FF 67                   ld h,a
586   8700 C1                   pop bc
587   8701 C9                   ret
588   8702
589   8702              ; ---------------------------------------------------------------
590   8702
591   8702              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8702              ; ******************************************************************************************************************************************************************************************
  2+  8702              ;
  3+  8702              ; 01/23
  4+  8702              ;
  5+  8702              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8702
  7+  8702 CD D9 89     Draw call Prepara_draw
  8+  8705 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8706 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8707 28 05        	jr z,2F
 11+  8709 3A 00 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  870C 18 0C        	jr 1F
 13+  870E 2A FE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8711 22 F2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8714 CD A0 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8717              ;													; _la esquina superior izquierda de la pantalla.
 17+  8717 CD 54 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  871A 3A 17 85     1 ld a,(Ctrl_0)
 19+  871D CB 6F        	bit 5,a
 20+  871F 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8721
 22+  8721 CD 39 87     	call Comprueba_limite_horizontal
 23+  8724 CD C9 87     	call Comprueba_limite_vertical
 24+  8727
 25+  8727              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8727
 27+  8727 CD 13 89     3 call calcula_CColumnass
 28+  872A CD 4A 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  872D CD 9F 89     	call Define_rutina_de_impresion
 30+  8730
 31+  8730 3A 17 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8733 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8735 32 17 85     	ld (Ctrl_0),a
 34+  8738
 35+  8738 C9           	ret
 36+  8739
 37+  8739              ; *******************************************************************************************************************************************************************************************
 38+  8739              ;	21/01/23
 39+  8739              ;
 40+  8739              ; 	Comprueba_limite_horizontal.
 41+  8739              ;
 42+  8739              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8739              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8739              ;
 45+  8739              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8739              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8739              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8739              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8739
 50+  8739
 51+  8739
 52+  8739              Comprueba_limite_horizontal
 53+  8739
 54+  8739 3A 17 85     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 55+  873C CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 56+  873E 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 57+  8740 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 58+  8742 32 17 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 59+  8745 18 09            jr 6F
 60+  8747 CB 5F        1 bit 3,a
 61+  8749 28 0A            jr z,2F
 62+  874B E6 F7            and $f7
 63+  874D 32 17 85         ld (Ctrl_0),a
 64+  8750 CD A0 88     6 call Inicializacion
 65+  8753 18 5B            jr 5F
 66+  8755 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 67+  8756
 68+  8756              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 69+  8756              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 70+  8756
 71+  8756 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 72+  8757 2A 21 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 73+  875A CD 3E 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 74+  875D 67           	ld h,a
 75+  875E EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 76+  875F CD 3E 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 77+  8762 67           	ld h,a
 78+  8763 A7           	and a
 79+  8764 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 80+  8766 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 81+  8767 3A 00 85     	ld a,(Cuad_objeto)
 82+  876A FE 02        	cp 2
 83+  876C 38 1E        	jr c,3F
 84+  876E 28 1C        	jr z,3F
 85+  8770 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 86+  8771 28 23            jr z,7F
 87+  8773 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 88+  8775 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 89+  8777 E1           	pop hl
 90+  8778
 91+  8778              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 92+  8778              ; _para indicar con E="2" en caso necesario.
 93+  8778
 94+  8778 E5               push hl
 95+  8779 C5               push bc
 96+  877A CD 3E 8C     	call calcula_tercio
 97+  877D FE 01        	cp 1
 98+  877F 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 99+  8781 CD B1 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  8784 28 26            jr z,9F
101+  8786 38 24            jr c,9F
102+  8788 1E 00        11 ld e,0
103+  878A 18 22            jr 8F
104+  878C 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
105+  878D 28 07        	jr z, 7F
106+  878F 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
107+  8791 1E 00         	ld e,0
108+  8793 E1           	pop hl
109+  8794 18 04        	jr 4F
110+  8796 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
111+  8798 18 15            jr 10F
112+  879A
113+  879A              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
114+  879A              ; _para indicar con E="2" en caso necesario.
115+  879A
116+  879A E5           4 push hl
117+  879B C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
118+  879C CD 3E 8C     	call calcula_tercio
119+  879F FE 01        	cp 1
120+  87A1 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
121+  87A3 CD B1 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
122+  87A6 28 04            jr z,9F
123+  87A8 30 02            jr nc,9F
124+  87AA 18 02        	jr 8F
125+  87AC 1E 02        9 ld e,2
126+  87AE C1           8 pop bc
127+  87AF E1           10 pop hl
128+  87B0 C9           5 ret
129+  87B1
130+  87B1              ; --------------------
131+  87B1              ;
132+  87B1              ; 25/08/22
133+  87B1
134+  87B1 CD 3E 8C     Comprueba_centro call calcula_tercio
135+  87B4 67               ld h,a
136+  87B5 08           	ex af,af
137+  87B6 FE 02        	cp 2
138+  87B8 38 07        	jr c,1F
139+  87BA 28 05        	jr z,1F
140+  87BC 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
141+  87BF 18 03        	jr 2F
142+  87C1 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
143+  87C4 08           2 ex af,af
144+  87C5 A7               and a
145+  87C6 ED 42            sbc hl,bc
146+  87C8 C9               ret
147+  87C9
148+  87C9              ; *********************************************************************************************************************************************************************************************
149+  87C9              ;
150+  87C9              ;   16/8/22
151+  87C9              ;
152+  87C9              ;	Comprueba_limite_vertical
153+  87C9              ;
154+  87C9              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
155+  87C9              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
156+  87C9              ;
157+  87C9
158+  87C9 7D           Comprueba_limite_vertical ld a,l
159+  87CA E6 1F        	and $1F
160+  87CC 57           	ld d,a
161+  87CD 3A 23 85     	ld a,(Limite_vertical)
162+  87D0 BA           	cp d 											; Límite - Posición.
163+  87D1
164+  87D1 08           	ex af,af 										; Resultado de CP d en F'.
165+  87D2 3A 00 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
166+  87D5 CB 47        	bit 0,a
167+  87D7 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
168+  87D9
169+  87D9              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
170+  87D9
171+  87D9 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
172+  87DA 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
173+  87DC
174+  87DC              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
175+  87DC              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
176+  87DC
177+  87DC 3A F7 84         ld a,(Coordenada_X)
178+  87DF 16 0F            ld d,Centro_izquierda
179+  87E1 A7               and a
180+  87E2 92               sub d 											 ; Posición - Centro_izquierda.
181+  87E3 28 1E            jr z,3F
182+  87E5 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
183+  87E7              ;                                                    ; _salimos sin modificar nada.
184+  87E7 18 0E            jr 2F
185+  87E9 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
186+  87EA 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
187+  87EC
188+  87EC              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
189+  87EC              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
190+  87EC
191+  87EC 3A F7 84         ld a,(Coordenada_X)
192+  87EF 16 10            ld d,Centro_derecha
193+  87F1 A7               and a
194+  87F2 92               sub d
195+  87F3 28 0E            jr z,3F
196+  87F5 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
197+  87F7              ;                                                    ; _salimos sin modificar nada.
198+  87F7 CB 43        2 bit 0,e
199+  87F9 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
200+  87FB C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
201+  87FC CD 90 88         call Modificaccionne
202+  87FF C1           	pop bc
203+  8800 CD A0 88         call Inicializacion
204+  8803 C9           3 ret 				 								 ; Salimos de la rutina.
205+  8804
206+  8804              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
207+  8804
208+  8804 C5           4 push bc
209+  8805 01 F1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
210+  8808 0A           	ld a,(bc)
211+  8809 3D           	dec a
212+  880A 47           	ld b,a 											 ; Columnas-1 en B.
213+  880B 7D           	ld a,l
214+  880C 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
215+  880D CB 47        	bit 0,a
216+  880F 28 03        	jr z,5F
217+  8811 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
218+  8812 18 2E        	jr 7F
219+  8814
220+  8814              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
221+  8814
222+  8814 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
223+  8815 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
224+  8816 3A 17 85     	ld a,(Ctrl_0)
225+  8819 CB 4F        	bit 1,a
226+  881B 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
227+  881D F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
228+  881E
229+  881E              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
230+  881E
231+  881E 1C               inc e
232+  881F 1D               dec e
233+  8820 20 07            jr nz,12F
234+  8822 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
235+  8823 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
236+  8824 22 F2 84     	ld (Posicion_actual),hl
237+  8827 18 44        13 jr 9F
238+  8829 CB 43        12 bit 0,e
239+  882B 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
240+  882D              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
241+  882D C1           	pop bc
242+  882E 18 D3        	jr 3B
243+  8830 80           14 add b
244+  8831 6F               ld l,a
245+  8832 22 F2 84     	ld (Posicion_actual),hl
246+  8835 CD 90 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
247+  8838 18 33            jr 9F 											 ; _inicializamos y salimos.
248+  883A E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
249+  883C 32 17 85         ld (Ctrl_0),a
250+  883F F1           	pop af
251+  8840 18 2B        	jr 9F
252+  8842
253+  8842              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
254+  8842
255+  8842 F5           7 push af
256+  8843 3A 17 85     	ld a,(Ctrl_0)
257+  8846 CB 47        	bit 0,a
258+  8848 20 1D        	jr nz,8F
259+  884A F1           	pop af
260+  884B
261+  884B              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
262+  884B
263+  884B 1C           	inc e
264+  884C 1D               dec e
265+  884D 20 07            jr nz,10F
266+  884F 90           	sub b
267+  8850 6F               ld l,a
268+  8851 22 F2 84     	ld (Posicion_actual),hl
269+  8854 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
270+  8856              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
271+  8856 CB 43        10 bit 0,e
272+  8858 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
273+  885A              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
274+  885A C1           	pop bc
275+  885B 18 A6        	jr 3B
276+  885D 90           16 sub b
277+  885E 6F               ld l,a
278+  885F 22 F2 84     	ld (Posicion_actual),hl
279+  8862 CD 90 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
280+  8865 18 06            jr 9F
281+  8867 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
282+  8869 32 17 85         ld (Ctrl_0),a
283+  886C F1           	pop af
284+  886D C1           9 pop bc
285+  886E 1E 00        	ld e,0
286+  8870 CD A0 88         call Inicializacion
287+  8873 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
288+  8874 08           	ex af,af
289+  8875 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
290+  8876 18 8B            jr 3B
291+  8878
292+  8878              ; --------------------
293+  8878
294+  8878 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
295+  887A CD F4 89     1 call PreviousScan
296+  887D 10 FB            djnz 1B
297+  887F 22 F2 84     	ld (Posicion_actual),hl
298+  8882 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
299+  8883 C9           	ret
300+  8884
301+  8884              ; --------------------
302+  8884
303+  8884 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
304+  8886 CD E5 89     1 call NextScan
305+  8889 10 FB            djnz 1B
306+  888B 22 F2 84     	ld (Posicion_actual),hl
307+  888E AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
308+  888F C9           	ret
309+  8890
310+  8890              ; --------------------
311+  8890              ;
312+  8890              ;	22/01/23
313+  8890              ;
314+  8890              ;	E="1". Hemos cambiado de cuadrante.
315+  8890              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
316+  8890              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
317+  8890
318+  8890
319+  8890              Modificaccionne
320+  8890
321+  8890 3A 00 85     	ld a,(Cuad_objeto)
322+  8893 FE 02        	cp 2
323+  8895 CC 78 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
324+  8898 DC 78 88         call c,Modifica_Pos_actual
325+  889B C8           	ret z
326+  889C CD 84 88         call Modifica_Pos_actual2
327+  889F C9               ret
328+  88A0
329+  88A0              ; *************************************************************************************************************************************************************************************************
330+  88A0              ;
331+  88A0              ;	13/8/22
332+  88A0              ;
333+  88A0              ;	Inicializacion
334+  88A0              ;
335+  88A0              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
336+  88A0              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
337+  88A0              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
338+  88A0              ;
339+  88A0              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
340+  88A0              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
341+  88A0              ;	_ desaparece/aparece.
342+  88A0
343+  88A0              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
344+  88A0              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
345+  88A0              ;
346+  88A0              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
347+  88A0              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
348+  88A0              ; 		   [E] ="0"
349+  88A0
350+  88A0              ; 	OUTPUT: DESTRUYE [AF] y [D].
351+  88A0
352+  88A0 CD 3E 8C     Inicializacion call calcula_tercio
353+  88A3 28 36        	jr z,primit
354+  88A5 E6 02        	and 2
355+  88A7 20 07        	jr nz,segmit
356+  88A9 7D           	ld a,l
357+  88AA FE 7F        	cp $7f
358+  88AC 38 2D        	jr c,primit
359+  88AE 28 2B        	jr z,primit
360+  88B0 CD 0D 89     segmit call column
361+  88B3 38 13        	jr c,tercuad
362+  88B5 3E 04        cuarcuad ld a,4
363+  88B7 32 00 85     	ld (Cuad_objeto),a
364+  88BA 21 20 48     	ld hl,$4820
365+  88BD 22 21 85     	ld (Limite_horizontal),hl
366+  88C0 21 23 85     	ld hl,Limite_vertical
367+  88C3 36 0D        	ld (hl),$0d
368+  88C5 08           	ex af,af
369+  88C6 18 3C        	jr 1F
370+  88C8              tercuad
371+  88C8              ;	call Fija_punteros
372+  88C8 3E 03        	ld a,3
373+  88CA 32 00 85     	ld (Cuad_objeto),a
374+  88CD 21 20 48     	ld hl,$4820
375+  88D0 22 21 85     	ld (Limite_horizontal),hl
376+  88D3 21 23 85     	ld hl,Limite_vertical
377+  88D6 36 12        	ld (hl),$12
378+  88D8 08           	ex af,af
379+  88D9 18 29        	jr 1F
380+  88DB CD 0D 89     primit call column
381+  88DE 38 13        	jr c, primcuad
382+  88E0              segcuad
383+  88E0              ;	call Fija_punteros
384+  88E0 3E 02        	ld a,2
385+  88E2 32 00 85     	ld (Cuad_objeto),a
386+  88E5 21 C0 4F     	ld hl,$4fc0
387+  88E8 22 21 85     	ld (Limite_horizontal),hl
388+  88EB 21 23 85     	ld hl,Limite_vertical
389+  88EE 36 0D        	ld (hl),$0d
390+  88F0 08           	ex af,af
391+  88F1 18 11        	jr 1F
392+  88F3              primcuad
393+  88F3              ;	call Fija_punteros
394+  88F3 3E 01        	ld a,1
395+  88F5 32 00 85     	ld (Cuad_objeto),a
396+  88F8 21 C0 4F     	ld hl,$4fc0
397+  88FB 22 21 85     	ld (Limite_horizontal),hl
398+  88FE 21 23 85     	ld hl,Limite_vertical
399+  8901 36 12        	ld (hl),$12
400+  8903 08           	ex af,af
401+  8904 CD 4E 8F     1 call Genera_coordenadas
402+  8907 21 17 85     	ld hl,Ctrl_0
403+  890A CB EE        	set 5,(hl)
404+  890C C9           	ret
405+  890D
406+  890D              ; ------------------------------------------------------------------------------------------------------------------
407+  890D
408+  890D              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
409+  890D              ;
410+  890D              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
411+  890D
412+  890D 7D           column ld a,l
413+  890E E6 1F        	and $1f
414+  8910 FE 10         	cp $10
415+  8912 C9            	ret
416+  8913
417+  8913              ; --------------------------------------------------------------------------------------------------------------------
418+  8913              ;
419+  8913              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
420+  8913              ;
421+  8913              ; 14/12/22
422+  8913              ;
423+  8913              ;	Modifica: A y BC.
424+  8913
425+  8913 3A 00 85     calcula_CColumnass ld a,(Cuad_objeto)
426+  8916 E6 01        	and 1
427+  8918 28 17        	jr z,1F
428+  891A
429+  891A              ; Nos encontramos en la parte izquierda de la pantalla
430+  891A
431+  891A 3A F7 84     	ld a,(Coordenada_X)
432+  891D 47           	ld b,a
433+  891E 04           	inc b											; (Coordenada_X)+1 en B.
434+  891F 79           	ld a,c
435+  8920 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
436+  8921 38 08        	jr c,2F
437+  8923 47           	ld b,a
438+  8924 79           	ld a,c
439+  8925 90           	sub b
440+  8926 32 20 85     	ld (Columnas),a
441+  8929 18 1B        	jr 4F
442+  892B 79           2 ld a,c
443+  892C 32 20 85     	ld (Columnas),a
444+  892F 18 15        	jr 4F
445+  8931
446+  8931              ; Nos encontramos en la parte derecha de la pantalla.
447+  8931
448+  8931 3A F7 84     1 ld a,(Coordenada_X)
449+  8934 81           	add c
450+  8935 3D           	dec a
451+  8936 D6 1F        	sub $1f
452+  8938 38 08        	jr c,3F
453+  893A 47           	ld b,a
454+  893B 79           	ld a,c
455+  893C 90           	sub b
456+  893D 32 20 85     	ld (Columnas),a
457+  8940 18 04        	jr 4F
458+  8942 79           3 ld a,c
459+  8943 32 20 85     	ld (Columnas),a
460+  8946 D9           4 exx
461+  8947 4F           	ld c,a
462+  8948 D9           	exx
463+  8949 C9            ret
464+  894A
465+  894A              ; --------------------------------------------------------------------------------------------------------------------
466+  894A              ;
467+  894A              ; 7/1/23
468+  894A              ;
469+  894A              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
470+  894A              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
471+  894A              ;
472+  894A              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
473+  894A              ;	DESTRUYE: HL,B Y A.
474+  894A
475+  894A 3A 00 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
476+  894D FE 02        	cp 2
477+  894F 38 18        	jr c,1F
478+  8951 28 16        	jr z,1F
479+  8953 E6 01        	and 1
480+  8955 28 0D        	jr z,3F
481+  8957
482+  8957              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
483+  8957
484+  8957 CD 93 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
485+  895A
486+  895A 7D           9 ld a,l
487+  895B E6 1F        	and $1f
488+  895D 28 2A        	jr z,7F
489+  895F 2B           	dec hl
490+  8960 10 F8        	djnz 9B
491+  8962 18 25        	jr 7F
492+  8964
493+  8964              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
494+  8964
495+  8964 2A F2 84     3 ld hl,(Posicion_actual)
496+  8967 18 20        	jr 7F
497+  8969
498+  8969 28 14        1 jr z,2F
499+  896B
500+  896B              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
501+  896B
502+  896B CD 93 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
503+  896E 7D           4 ld a,l
504+  896F E6 1F        	and $1f
505+  8971 28 03        	jr z,6F
506+  8973 2B           	dec hl
507+  8974 10 F8        	djnz 4B
508+  8976 06 0F        6 ld b,15
509+  8978 CD F4 89     5 call PreviousScan
510+  897B 10 FB        	djnz 5B
511+  897D 18 0A        	jr 7F
512+  897F
513+  897F              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
514+  897F
515+  897F CD 93 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
516+  8982 06 0F        	ld b,15
517+  8984 CD F4 89     8 call PreviousScan
518+  8987 10 FB        	djnz 8B
519+  8989
520+  8989 E5           7 push hl
521+  898A DD E1        	pop ix
522+  898C
523+  898C 2A F4 84     	ld hl,(Puntero_objeto)
524+  898F E5           	push hl
525+  8990 FD E1        	pop iy
526+  8992
527+  8992 C9           	ret
528+  8993
529+  8993              ; --------------------------------------------------------------------------------------------------------------------
530+  8993              ;
531+  8993              ;	2/1/23
532+  8993              ;
533+  8993              ;	Sub-rutina de [Calcula_puntero_de_impresion].
534+  8993              ;
535+  8993              ;	Tras esta rutina tenemos:
536+  8993              ;
537+  8993              ;	OUTPUT: HL contiene (Posicion_actual).
538+  8993              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
539+  8993              ;
540+  8993              ;	DESTRUYE!!!!! HL,B y A.
541+  8993
542+  8993 2A F2 84     Operandos ld hl,(Posicion_actual)
543+  8996 3A 20 85     	ld a,(Columnas)
544+  8999 3D           	dec a
545+  899A 20 01        	jr nz,1F
546+  899C 3C           	inc a
547+  899D 47           1 ld b,a
548+  899E C9           	ret
549+  899F
550+  899F              ; --------------------------------------------------------------------------------------------------------------------
551+  899F              ;
552+  899F              ;	3/1/23
553+  899F              ;
554+  899F              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
555+  899F              ;
556+  899F              ;	Destruye: A,B,HL y DE.
557+  899F
558+  899F              Define_rutina_de_impresion
559+  899F
560+  899F 3A F1 84     	ld a,(Columns)
561+  89A2 47           	ld b,a
562+  89A3 3A 20 85     	ld a,(Columnas)
563+  89A6 B8           	cp b
564+  89A7 20 0D        	jr nz,2f
565+  89A9
566+  89A9              ;	La entidad se imprime entera.
567+  89A9
568+  89A9 21 3B 8A     	ld hl, Indice_entidades_completas
569+  89AC E6 01        	and 1
570+  89AE 28 02        	jr z,1F
571+  89B0
572+  89B0 23           	inc hl
573+  89B1 23           	inc hl
574+  89B2
575+  89B2 CD 47 86     1 call Extrae_address
576+  89B5 C9           	ret		;	ret
577+  89B6
578+  89B6              ;	La entidad no se imprime entera en pantalla.
579+  89B6
580+  89B6 3A 00 85     2 ld a,(Cuad_objeto)
581+  89B9 E6 01        	and 1
582+  89BB 28 17        	jr z,3F
583+  89BD
584+  89BD              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
585+  89BD
586+  89BD 21 3F 8A     	ld hl, Indice_entidades_incompletas_izquierda
587+  89C0 3A F1 84     4 ld a,(Columns)
588+  89C3 E6 01        	and 1
589+  89C5 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
590+  89C7
591+  89C7 23           	inc hl
592+  89C8 23           	inc hl
593+  89C9
594+  89C9 3A 20 85     	ld a,(Columnas)
595+  89CC E6 01        	and 1
596+  89CE 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
597+  89D0
598+  89D0 23           	inc hl
599+  89D1 23           	inc hl
600+  89D2
601+  89D2 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
602+  89D4
603+  89D4 21 45 8A     3 ld hl, Indice_entidades_incompletas_derecha
604+  89D7 18 E7        	jr 4B
605+  89D9
606+  89D9              ; --------------------------------------------------------------------------------------------------------------------
607+  89D9              ;
608+  89D9              ;	Prepara_draw
609+  89D9              ;
610+  89D9              ;	Es una rutina de carga.
611+  89D9              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
612+  89D9              ;
613+  89D9              ;	FUNCIONAMIENTO:
614+  89D9              ;
615+  89D9              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
616+  89D9              ;	- LD (Posicion_actual) del objeto en [HL].
617+  89D9              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
618+  89D9              ;
619+  89D9              ;	DESTRUYE:
620+  89D9              ;
621+  89D9              ;	Logicamente, BC,HL y E quedan destruidos.
622+  89D9
623+  89D9 21 F0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
624+  89DC 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
625+  89DD 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
626+  89DE 4E           	ld c,(hl)
627+  89DF 2A F2 84     	ld hl,(Posicion_actual)
628+  89E2 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
629+  89E4 C9           	ret
630+  89E5
631+  89E5              ;----------------------------------------------------------------------------------------------------------------
632+  89E5              ;
633+  89E5              ;	5/08/22
634+  89E5              ;
635+  89E5              ;   NextScan.
636+  89E5              ;
637+  89E5              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
638+  89E5              ;
639+  89E5              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
640+  89E5              ;
641+  89E5              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
642+  89E5              ;
643+  89E5              ;       DESTRUIDOS: AF y HL !!!
644+  89E5              ;
645+  89E5              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
646+  89E5              ;
647+  89E5
648+  89E5 24           NextScan inc h          ; Incrementamos el scanline.
649+  89E6 7C               ld a,h
650+  89E7 E6 07            and 7
651+  89E9 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
652+  89EA
653+  89EA 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
654+  89EB C6 20            add a,$20           ; Vamos a comprobarlo...
655+  89ED 6F               ld l,a
656+  89EE D8               ret c               ; Salimos si se produce el cambio de tercio.
657+  89EF
658+  89EF 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
659+  89F0 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
660+  89F2 67               ld h,a
661+  89F3 C9               ret
662+  89F4
663+  89F4              ;----------------------------------------------------------------------------------------------------------------
664+  89F4              ;
665+  89F4              ;	5/08/22
666+  89F4              ;
667+  89F4              ;   PreviousScan.
668+  89F4              ;
669+  89F4              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
670+  89F4              ;
671+  89F4              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
672+  89F4              ;
673+  89F4              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
674+  89F4              ;
675+  89F4              ;       DESTRUIDOS: AF y HL !!!
676+  89F4              ;
677+  89F4              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
678+  89F4              ;
679+  89F4
680+  89F4 7C           PreviousScan ld a,h
681+  89F5 25               dec h               ; Dec H.
682+  89F6 E6 07            and 7
683+  89F8 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
684+  89F9
685+  89F9 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
686+  89FA D6 20            sub $20             ; Vamos a comprobarlo...
687+  89FC 6F               ld l,a
688+  89FD D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
689+  89FE
690+  89FE 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
691+  89FF C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
692+  8A01 67               ld h,a
693+  8A02 C9               ret
694+  8A03
695+  8A03              ; -----------------------------------------------------------------------------------
696+  8A03              ;
697+  8A03              ;	15/1/23
698+  8A03
699+  8A03 ED 73 2C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
700+  8A07 31 00 70     	ld sp,Album_de_fotos
701+  8A0A
702+  8A0A FD E1        2 pop iy																	; (Puntero_objeto) en IY.
703+  8A0C E1           	pop hl																	; Puntero de impresión de pantalla en HL.
704+  8A0D D1           	pop de																	; Dirección de la rutina de impresión en DE.
705+  8A0E
706+  8A0E ED 73 2E 85  	ld (Stack_2),sp
707+  8A12 ED 7B 2C 85  	ld sp,(Stack)
708+  8A16
709+  8A16              ; Fabrica la llamada a la correspondiente rutina de impresión.
710+  8A16
711+  8A16 3E CD        	ld a,$cd
712+  8A18 32 20 8A     	ld (Imprime),a
713+  8A1B EB           	ex de,hl
714+  8A1C 22 21 8A     	ld (Imprime+1),hl
715+  8A1F EB           	ex de,hl
716+  8A20
717+  8A20              ; Ejecuta la llamada:	CALL $xx,xx
718+  8A20
719+  8A20 00 00 00     Imprime db 0,0,0
720+  8A23
721+  8A23 ED 73 2C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
722+  8A27
723+  8A27 3A 2B 85     	ld a,(Numero_de_malotes)
724+  8A2A 3D           	dec a
725+  8A2B 28 09        	jr z,1F
726+  8A2D 32 2B 85      	ld (Numero_de_malotes),a
727+  8A30 ED 7B 2E 85  	ld sp,(Stack_2)
728+  8A34 18 D4        	jr 2B
729+  8A36
730+  8A36 AF           1 xor a
731+  8A37 32 2E 85     	ld (Stack_2),a
732+  8A3A C9           	ret
733+  8A3B
734+  8A3B
# file closed: Draw_XOR.asm
592   8A3B              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A3B              ;   índices de Rutinas de impresión.
  2+  8A3B
  3+  8A3B 4B 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A3D 78 8A            defw Pinta_Amadeus_3x2
  5+  8A3F
  6+  8A3F CE 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A41 6E 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A43 22 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A45
 10+  8A45 F8 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A47 FC 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A49 B0 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A4B
 14+  8A4B
 15+  8A4B              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A4B              ;
 17+  8A4B              ;   12/12/22
 18+  8A4B              ;
 19+  8A4B              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A4B              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A4B              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A4B              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A4B              ;
 24+  8A4B              ;   Modifica: DE y HL.
 25+  8A4B
 26+  8A4B ED 73 2C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A4F FD F9        	ld sp,iy
 28+  8A51 06 10            ld b,16
 29+  8A53 D1           1 pop de
 30+  8A54 7B               ld a,e
 31+  8A55 AE               xor (hl)
 32+  8A56 77           	ld (hl),a
 33+  8A57 23           	inc hl
 34+  8A58 7A               ld a,d
 35+  8A59 AE               xor (hl)
 36+  8A5A 77           	ld (hl),a
 37+  8A5B 2B           	dec hl
 38+  8A5C 24           	inc h
 39+  8A5D 7C               ld a,h
 40+  8A5E E6 07            and 7
 41+  8A60 20 0A            jr nz,2F
 42+  8A62 7D               ld a,l
 43+  8A63 C6 20            add a,$20
 44+  8A65 6F               ld l,a
 45+  8A66 38 04            jr c,2F
 46+  8A68 7C               ld a,h
 47+  8A69 D6 08            sub 8
 48+  8A6B 67               ld h,a
 49+  8A6C 7C           2 ld a,h
 50+  8A6D FE 58            cp $58
 51+  8A6F 28 02            jr z,3F
 52+  8A71 10 E0            djnz 1B
 53+  8A73 ED 7B 2C 85  3 ld sp,(Stack)
 54+  8A77 C9           	ret
 55+  8A78
 56+  8A78 ED 73 2C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A7C FD F9        	ld sp,iy
 58+  8A7E 06 08            ld b,8
 59+  8A80 D1           1 pop de
 60+  8A81 7B               ld a,e
 61+  8A82 AE               xor (hl)
 62+  8A83 77           	ld (hl),a
 63+  8A84 23           	inc hl
 64+  8A85 7A               ld a,d
 65+  8A86 AE               xor (hl)
 66+  8A87 77           	ld (hl),a
 67+  8A88 23           	inc hl
 68+  8A89 D1           	pop de
 69+  8A8A 7B               ld a,e
 70+  8A8B AE               xor (hl)
 71+  8A8C 77           	ld (hl),a
 72+  8A8D 2B           	dec hl
 73+  8A8E 2B           	dec hl
 74+  8A8F 24           	inc h
 75+  8A90 7C               ld a,h
 76+  8A91 E6 07            and 7
 77+  8A93 20 0A            jr nz,2F
 78+  8A95 7D               ld a,l
 79+  8A96 C6 20            add a,$20
 80+  8A98 6F               ld l,a
 81+  8A99 38 04            jr c,2F
 82+  8A9B 7C               ld a,h
 83+  8A9C D6 08            sub 8
 84+  8A9E 67               ld h,a
 85+  8A9F 7C           2 ld a,h
 86+  8AA0 FE 58            cp $58
 87+  8AA2 28 25            jr z,4F
 88+  8AA4 7A               ld a,d
 89+  8AA5 AE               xor (hl)
 90+  8AA6 77               ld (hl),a
 91+  8AA7 D1           	pop de
 92+  8AA8 23           	inc hl
 93+  8AA9 7B               ld a,e
 94+  8AAA AE               xor (hl)
 95+  8AAB 77           	ld (hl),a
 96+  8AAC 23           	inc hl
 97+  8AAD 7A               ld a,d
 98+  8AAE AE               xor (hl)
 99+  8AAF 77           	ld (hl),a
100+  8AB0 2B           	dec hl
101+  8AB1 2B           	dec hl
102+  8AB2 24           	inc h
103+  8AB3 7C               ld a,h
104+  8AB4 E6 07            and 7
105+  8AB6 20 0A            jr nz,3F
106+  8AB8 7D               ld a,l
107+  8AB9 C6 20            add a,$20
108+  8ABB 6F               ld l,a
109+  8ABC 38 04            jr c,3F
110+  8ABE 7C               ld a,h
111+  8ABF D6 08            sub 8
112+  8AC1 67               ld h,a
113+  8AC2 7C           3 ld a,h
114+  8AC3 FE 58            cp $58
115+  8AC5 28 02            jr z,4F
116+  8AC7 10 B7            djnz 1B
117+  8AC9 ED 7B 2C 85  4 ld sp,(Stack)
118+  8ACD C9           	ret
119+  8ACE
120+  8ACE              ; ---------------------------------------------------
121+  8ACE
122+  8ACE ED 73 2C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AD2 FD F9        	ld sp,iy
124+  8AD4 06 10            ld b,16
125+  8AD6 D1           1 pop de
126+  8AD7 7A           	ld a,d
127+  8AD8 AE           	xor (hl)
128+  8AD9 77           	ld (hl),a
129+  8ADA 24           	inc h
130+  8ADB 7C               ld a,h
131+  8ADC E6 07            and 7
132+  8ADE 20 0C            jr nz,2F
133+  8AE0 7D               ld a,l
134+  8AE1 C6 20            add a,$20
135+  8AE3 6F               ld l,a
136+  8AE4 38 06            jr c,2F
137+  8AE6 7C               ld a,h
138+  8AE7 D6 08            sub 8
139+  8AE9 67               ld h,a
140+  8AEA 18 00            jr 2F
141+  8AEC 7C           2 ld a,h
142+  8AED FE 58            cp $58
143+  8AEF 28 02            jr z,3F
144+  8AF1 10 E3            djnz 1B
145+  8AF3 ED 7B 2C 85  3 ld sp,(Stack)
146+  8AF7 C9           	ret
147+  8AF8
148+  8AF8 ED 73 2C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AFC FD F9        	ld sp,iy
150+  8AFE 06 10            ld b,16
151+  8B00 D1           1 pop de
152+  8B01 7B           	ld a,e
153+  8B02 AE           	xor (hl)
154+  8B03 77           	ld (hl),a
155+  8B04 24           	inc h
156+  8B05 7C               ld a,h
157+  8B06 E6 07            and 7
158+  8B08 20 0C            jr nz,2F
159+  8B0A 7D               ld a,l
160+  8B0B C6 20            add a,$20
161+  8B0D 6F               ld l,a
162+  8B0E 38 06            jr c,2F
163+  8B10 7C               ld a,h
164+  8B11 D6 08            sub 8
165+  8B13 67               ld h,a
166+  8B14 18 00            jr 2F
167+  8B16 7C           2 ld a,h
168+  8B17 FE 58            cp $58
169+  8B19 28 02            jr z,3F
170+  8B1B 10 E3            djnz 1B
171+  8B1D ED 7B 2C 85  3 ld sp,(Stack)
172+  8B21 C9           	ret
173+  8B22
174+  8B22              ; ---------------------------------------------------
175+  8B22
176+  8B22 ED 73 2C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B26 FD F9        	ld sp,iy
178+  8B28 06 08            ld b,8
179+  8B2A D1           1 pop de
180+  8B2B 7A           	ld a,d
181+  8B2C AE           	xor (hl)
182+  8B2D 77           	ld (hl),a
183+  8B2E 23           	inc hl
184+  8B2F D1           	pop de
185+  8B30 7B           	ld a,e
186+  8B31 AE           	xor (hl)
187+  8B32 77           	ld (hl),a
188+  8B33 2B           	dec hl
189+  8B34 24            	inc h
190+  8B35 7C               ld a,h
191+  8B36 E6 07            and 7
192+  8B38 20 0A            jr nz,2F
193+  8B3A 7D               ld a,l
194+  8B3B C6 20            add a,$20
195+  8B3D 6F               ld l,a
196+  8B3E 38 04            jr c,2F
197+  8B40 7C               ld a,h
198+  8B41 D6 08            sub 8
199+  8B43 67               ld h,a
200+  8B44 7C           2 ld a,h
201+  8B45 FE 58            cp $58
202+  8B47 28 20            jr z,4F
203+  8B49 D1               pop de
204+  8B4A 7B           	ld a,e
205+  8B4B AE           	xor (hl)
206+  8B4C 77           	ld (hl),a
207+  8B4D 23           	inc hl
208+  8B4E 7A           	ld a,d
209+  8B4F AE           	xor (hl)
210+  8B50 77           	ld (hl),a
211+  8B51 2B           	dec hl
212+  8B52 24           	inc h
213+  8B53 7C               ld a,h
214+  8B54 E6 07            and 7
215+  8B56 20 0A            jr nz,3F
216+  8B58 7D               ld a,l
217+  8B59 C6 20            add a,$20
218+  8B5B 6F               ld l,a
219+  8B5C 38 04            jr c,3F
220+  8B5E 7C               ld a,h
221+  8B5F D6 08            sub 8
222+  8B61 67               ld h,a
223+  8B62 7C           3 ld a,h
224+  8B63 FE 58            cp $58
225+  8B65 28 02            jr z,4F
226+  8B67 10 C1            djnz 1B
227+  8B69 ED 7B 2C 85  4 ld sp,(Stack)
228+  8B6D C9           	ret
229+  8B6E
230+  8B6E ED 73 2C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B72 FD F9        	ld sp,iy
232+  8B74 06 08            ld b,8
233+  8B76 D1           1 pop de
234+  8B77 D1           	pop de
235+  8B78 7B           	ld a,e
236+  8B79 AE           	xor (hl)
237+  8B7A 77           	ld (hl),a
238+  8B7B 24            	inc h
239+  8B7C 7C               ld a,h
240+  8B7D E6 07            and 7
241+  8B7F 20 0A            jr nz,2F
242+  8B81 7D               ld a,l
243+  8B82 C6 20            add a,$20
244+  8B84 6F               ld l,a
245+  8B85 38 04            jr c,2F
246+  8B87 7C               ld a,h
247+  8B88 D6 08            sub 8
248+  8B8A 67               ld h,a
249+  8B8B 7C           2 ld a,h
250+  8B8C FE 58            cp $58
251+  8B8E 28 1B            jr z,4F
252+  8B90 D1               pop de
253+  8B91 7A           	ld a,d
254+  8B92 AE           	xor (hl)
255+  8B93 77           	ld (hl),a
256+  8B94 24           	inc h
257+  8B95 7C               ld a,h
258+  8B96 E6 07            and 7
259+  8B98 20 0A            jr nz,3F
260+  8B9A 7D               ld a,l
261+  8B9B C6 20            add a,$20
262+  8B9D 6F               ld l,a
263+  8B9E 38 04            jr c,3F
264+  8BA0 7C               ld a,h
265+  8BA1 D6 08            sub 8
266+  8BA3 67               ld h,a
267+  8BA4 7C           3 ld a,h
268+  8BA5 FE 58            cp $58
269+  8BA7 28 02            jr z,4F
270+  8BA9 10 CB            djnz 1B
271+  8BAB ED 7B 2C 85  4 ld sp,(Stack)
272+  8BAF C9           	ret
273+  8BB0
274+  8BB0 ED 73 2C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8BB4 FD F9        	ld sp,iy
276+  8BB6 06 08            ld b,8
277+  8BB8 D1           1 pop de
278+  8BB9 7B           	ld a,e
279+  8BBA AE           	xor (hl)
280+  8BBB 77           	ld (hl),a
281+  8BBC 23           	inc hl
282+  8BBD 7A           	ld a,d
283+  8BBE AE           	xor (hl)
284+  8BBF 77           	ld (hl),a
285+  8BC0 2B           	dec hl
286+  8BC1 24             	inc h
287+  8BC2 7C               ld a,h
288+  8BC3 E6 07            and 7
289+  8BC5 20 0A            jr nz,2F
290+  8BC7 7D               ld a,l
291+  8BC8 C6 20            add a,$20
292+  8BCA 6F               ld l,a
293+  8BCB 38 04            jr c,2F
294+  8BCD 7C               ld a,h
295+  8BCE D6 08            sub 8
296+  8BD0 67               ld h,a
297+  8BD1 7C           2 ld a,h
298+  8BD2 FE 58            cp $58
299+  8BD4 28 21            jr z,4F
300+  8BD6 D1               pop de
301+  8BD7 7A           	ld a,d
302+  8BD8 AE           	xor (hl)
303+  8BD9 77           	ld (hl),a
304+  8BDA 23           	inc hl
305+  8BDB D1               pop de
306+  8BDC 7B           	ld a,e
307+  8BDD AE           	xor (hl)
308+  8BDE 77           	ld (hl),a
309+  8BDF 2B           	dec hl
310+  8BE0 24           	inc h
311+  8BE1 7C               ld a,h
312+  8BE2 E6 07            and 7
313+  8BE4 20 0A            jr nz,3F
314+  8BE6 7D               ld a,l
315+  8BE7 C6 20            add a,$20
316+  8BE9 6F               ld l,a
317+  8BEA 38 04            jr c,3F
318+  8BEC 7C               ld a,h
319+  8BED D6 08            sub 8
320+  8BEF 67               ld h,a
321+  8BF0 7C           3 ld a,h
322+  8BF1 FE 58            cp $58
323+  8BF3 28 02            jr z,4F
324+  8BF5 10 C1            djnz 1B
325+  8BF7 ED 7B 2C 85  4 ld sp,(Stack)
326+  8BFB C9           	ret
327+  8BFC
328+  8BFC ED 73 2C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C00 FD F9        	ld sp,iy
330+  8C02 06 08            ld b,8
331+  8C04 D1           1 pop de
332+  8C05 7B           	ld a,e
333+  8C06 AE           	xor (hl)
334+  8C07 77           	ld (hl),a
335+  8C08 24            	inc h
336+  8C09 7C               ld a,h
337+  8C0A E6 07            and 7
338+  8C0C 20 0A            jr nz,2F
339+  8C0E 7D               ld a,l
340+  8C0F C6 20            add a,$20
341+  8C11 6F               ld l,a
342+  8C12 38 04            jr c,2F
343+  8C14 7C               ld a,h
344+  8C15 D6 08            sub 8
345+  8C17 67               ld h,a
346+  8C18 7C           2 ld a,h
347+  8C19 FE 58            cp $58
348+  8C1B 28 1C            jr z,4F
349+  8C1D D1               pop de
350+  8C1E 7A           	ld a,d
351+  8C1F AE           	xor (hl)
352+  8C20 77           	ld (hl),a
353+  8C21 24           	inc h
354+  8C22 7C               ld a,h
355+  8C23 E6 07            and 7
356+  8C25 20 0A            jr nz,3F
357+  8C27 7D               ld a,l
358+  8C28 C6 20            add a,$20
359+  8C2A 6F               ld l,a
360+  8C2B 38 04            jr c,3F
361+  8C2D 7C               ld a,h
362+  8C2E D6 08            sub 8
363+  8C30 67               ld h,a
364+  8C31 7C           3 ld a,h
365+  8C32 FE 58            cp $58
366+  8C34 28 03            jr z,4F
367+  8C36 D1               pop de
368+  8C37 10 CB            djnz 1B
369+  8C39 ED 7B 2C 85  4 ld sp,(Stack)
370+  8C3D C9           	ret
371+  8C3E
372+  8C3E              ; ---------------------------------------------------
373+  8C3E
# file closed: Rutinas_de_impresion_sprites.asm
593   8C3E              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C3E              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C3E              ;
  3+  8C3E              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C3E              ;
  5+  8C3E              ; *****************************************************************************************************************************************************************************************
  6+  8C3E              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C3E
  8+  8C3E 7C           calcula_tercio ld a,h
  9+  8C3F E6 18        	and $18
 10+  8C41 CB 2F        	sra a
 11+  8C43 CB 2F        	sra a
 12+  8C45 CB 2F        	sra a
 13+  8C47 C9           	ret
 14+  8C48
# file closed: calcula_tercio.asm
594   8C48              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C48              ; -----------------------------------------------------------------------------------------
  2+  8C48              ;
  3+  8C48              ;   04/11/22
  4+  8C48              ;
  5+  8C48              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C48              ;
  7+  8C48              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C48              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C48              ;
 10+  8C48              ;   DESTRUYE: HL y A. !!!!!
 11+  8C48
 12+  8C48 CD 3E 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C4B 26 58            ld h,$58
 14+  8C4D 84               add h
 15+  8C4E 67               ld h,a
 16+  8C4F C9               ret
# file closed: Calcula_direccion_atributos.asm
595   8C50              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C50              ; ********** **********
  2+  8C50              ;
  3+  8C50              ;   5/11/22
  4+  8C50              ;
  5+  8C50              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C50              ;
  7+  8C50              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C50              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C50              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C50              ;
 11+  8C50              ;   NO DESTROYERSSSS !!!!!
 12+  8C50
 13+  8C50 E5           Define_atributos push hl
 14+  8C51 C5           	push bc
 15+  8C52 D5           	push de
 16+  8C53
 17+  8C53 CD 48 8C     	call Calcula_direccion_atributos
 18+  8C56
 19+  8C56 D9               exx
 20+  8C57 E5               push hl
 21+  8C58 D9               exx
 22+  8C59 D1               pop de
 23+  8C5A
 24+  8C5A 42               ld b,d
 25+  8C5B 7B               ld a,e 									; (Attr) en A.
 26+  8C5C
 27+  8C5C C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C5D E5            	push hl 								; Guardo dirección de attr.
 29+  8C5E
 30+  8C5E              ; -----
 31+  8C5E
 32+  8C5E 77           2 ld (hl),a
 33+  8C5F 0D           	dec c 									; Decremento (Columnas).
 34+  8C60 28 03        	jr z,1F
 35+  8C62 23           	inc hl
 36+  8C63 18 F9        	jr 2B
 37+  8C65
 38+  8C65 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C66 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C67
 41+  8C67 05           	dec b									; Decremento (Filas).
 42+  8C68 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C6A
 44+  8C6A 11 20 00     	ld de,32
 45+  8C6D A7           	and a
 46+  8C6E ED 5A        	adc hl,de
 47+  8C70 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C72
 49+  8C72 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C73 C1           	pop bc
 51+  8C74 E1           	pop hl
 52+  8C75
 53+  8C75 C9           	ret
 54+  8C76
# file closed: Define_atributos.asm
596   8C76              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C76              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C76              ;
  3+  8C76              ;
  4+  8C76              ;	CLS.
  5+  8C76              ;
  6+  8C76              ;	Limpia la pantalla y define sus atributos.
  7+  8C76              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C76              ;
  9+  8C76              ;	COLORES: 0 ..... NEGRO
 10+  8C76              ;    		 1 ..... AZUL
 11+  8C76              ; 			 2 ..... ROJO
 12+  8C76              ;			 3 ..... MAGENTA
 13+  8C76              ; 			 4 ..... VERDE
 14+  8C76              ; 			 5 ..... CIAN
 15+  8C76              ;			 6 ..... AMARILLO
 16+  8C76              ; 			 7 ..... BLANCO
 17+  8C76              ;
 18+  8C76              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C76              ;
 20+  8C76              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C76
 22+  8C76
 23+  8C76 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C79 11 01 40     	LD DE,$4001
 25+  8C7C 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C7F 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C81 ED B0        	LDIR
 28+  8C83 01 FF 02     	LD BC,767
 29+  8C86 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C87 ED B0        	LDIR
 31+  8C89 C9           	ret
 32+  8C8A
# file closed: Cls.asm
597   8C8A              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C8A              ; ******************************************************************************************************************************************************************************************
  2+  8C8A              ;
  3+  8C8A              ;   22/01/23
  4+  8C8A              ;
  5+  8C8A              ;	Mov_down
  6+  8C8A              ;
  7+  8C8A              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C8A              ;
  9+  8C8A              ;
 10+  8C8A 21 17 85     Mov_down ld hl,Ctrl_0
 11+  8C8D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C8F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C8F              ; 																	; _ en el caso de que no lo haya.
 14+  8C8F 3A 04 85     	ld a,(Vel_down)
 15+  8C92 47           	ld b,a
 16+  8C93 2A F2 84         ld hl,(Posicion_actual)
 17+  8C96 CD 3E 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C99 E6 02        	and 2
 19+  8C9B 28 0F        	jr z,1F
 20+  8C9D
 21+  8C9D              ; Nos encontramos en el último tercio de pantalla.
 22+  8C9D              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8C9D
 24+  8C9D 7C           	ld a,h
 25+  8C9E FE 57        	cp $57
 26+  8CA0 20 0A        	jr nz,1F
 27+  8CA2 7D           	ld a,l
 28+  8CA3 C6 20        	add $20
 29+  8CA5 30 05        	jr nc,1F
 30+  8CA7              ; ------------------------------
 31+  8CA7 CD 38 8F     	call Reaparece_arriba
 32+  8CAA              ;	call Reinicio
 33+  8CAA              ; ------------------------------
 34+  8CAA 18 08        	jr 3F
 35+  8CAC CD E5 89     1 call NextScan
 36+  8CAF 22 F2 84     	ld (Posicion_actual),hl
 37+  8CB2 10 E2            djnz 2B
 38+  8CB4 CD 4E 8F     3 call Genera_coordenadas
 39+  8CB7 C9           	ret
 40+  8CB8
 41+  8CB8
 42+  8CB8              ; ******************************************************************************************************************************************************************************************
 43+  8CB8              ;
 44+  8CB8              ;   22/01/23
 45+  8CB8              ;
 46+  8CB8              ;	Mov_up
 47+  8CB8              ;
 48+  8CB8              ; 	Mueve el Sprite hacia arriba.
 49+  8CB8              ;
 50+  8CB8              ;
 51+  8CB8 21 17 85     Mov_up ld hl,Ctrl_0
 52+  8CBB CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8CBD              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8CBD              ; 																		; _ en el caso de que no lo haya.
 55+  8CBD 3A 03 85     	ld a,(Vel_up)
 56+  8CC0 47           	ld b,a
 57+  8CC1 2A F2 84     	ld hl,(Posicion_actual)
 58+  8CC4 CD 3E 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CC7 A7           	and a
 60+  8CC8 20 10        	jr nz,1F
 61+  8CCA
 62+  8CCA              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CCA              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CCA
 65+  8CCA 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CCB FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CCD 20 0B            jr nz,1F
 68+  8CCF 7D               ld a,l
 69+  8CD0 D6 20            sub $20
 70+  8CD2 30 06            jr nc,1F
 71+  8CD4 25               dec h
 72+  8CD5
 73+  8CD5              ; -----------------------------
 74+  8CD5 CD 28 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CD8              ;	call Reinicio
 76+  8CD8              ; -----------------------------
 77+  8CD8
 78+  8CD8 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CDA CD F4 89     1 call PreviousScan
 80+  8CDD 22 F2 84     	ld (Posicion_actual),hl
 81+  8CE0 10 E2            djnz 3B
 82+  8CE2 CD 4E 8F     2 call Genera_coordenadas
 83+  8CE5 C9           	ret
 84+  8CE6
 85+  8CE6              ; ******************************************************************************************************************************************************************************************
 86+  8CE6              ;
 87+  8CE6              ;	19/10/22
 88+  8CE6              ;
 89+  8CE6              ;	Mov_right.
 90+  8CE6              ;
 91+  8CE6              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8CE6              ;
 93+  8CE6
 94+  8CE6 21 17 85     Mov_right ld hl,Ctrl_0
 95+  8CE9 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8CEB              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8CEB              ; 																	; _ en el caso de que no lo haya.
 98+  8CEB 3A F6 84     	ld a,(CTRL_DESPLZ)
 99+  8CEE A7           	and a
100+  8CEF 28 0B        	jr z,9F
101+  8CF1
102+  8CF1 3A 17 85     	ld a,(Ctrl_0)
103+  8CF4 CB 7F        	bit 7,a
104+  8CF6 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8CF8 21 F6 84     	ld hl,CTRL_DESPLZ
106+  8CFB 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8CFC
108+  8CFC 3A 17 85     9 ld a,(Ctrl_0)
109+  8CFF CB 77        	bit 6,a
110+  8D01 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D03
112+  8D03 CD E7 8E     	call Stop_Amadeus_right
113+  8D06 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D07 18 4D        	jr 8F
115+  8D09
116+  8D09 3A F7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D0C FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D0E 20 46        	jr nz,8F
119+  8D10
120+  8D10 3A F6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D13 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D14 28 40        	jr z,8F
123+  8D16
124+  8D16              ; ---------- ---------- ----------
125+  8D16              ;
126+  8D16              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D16
128+  8D16 3A 02 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D19 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D1B 28 11        	jr z,1F
131+  8D1D 38 06        	jr c,6F
132+  8D1F FE 04        	cp 4
133+  8D21 28 14        	jr z,7F
134+  8D23 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D25
136+  8D25              ; ---------- ---------- ----------
137+  8D25              ;
138+  8D25              ; Perfiles de velocidad
139+  8D25              ;
140+  8D25 3A F6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D28 FE FE        	cp $fe
142+  8D2A 20 2A        	jr nz,8F
143+  8D2C 18 10        	jr 3F
144+  8D2E 3A F6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D31 FE FD        	cp $fd
146+  8D33 20 21        	jr nz,8F
147+  8D35 18 07        	jr 3F
148+  8D37 3A F6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D3A FE FB        	cp $fb
150+  8D3C 20 18        	jr nz,8F
151+  8D3E
152+  8D3E              ; ---------- ---------- ----------
153+  8D3E
154+  8D3E CD 16 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D41              ;	call Reinicio
156+  8D41
157+  8D41              ; ---------- ---------- ----------
158+  8D41              ;
159+  8D41              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D41
161+  8D41 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D43 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D44 CD 5D 8D     	call DESPLZ_DER
164+  8D47 C1           	pop bc
165+  8D48 10 F9        	djnz 5B
166+  8D4A 2A F2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D4D 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D4E 22 F2 84     	ld (Posicion_actual),hl
169+  8D51 CD 4E 8F     	call Genera_coordenadas
170+  8D54 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D56
172+  8D56              ; ---------- ---------- ----------
173+  8D56
174+  8D56 2A F2 84     8 ld hl,(Posicion_actual)
175+  8D59 CD 5D 8D     	call DESPLZ_DER
176+  8D5C C9           2 ret
177+  8D5D
178+  8D5D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D5D              ;
180+  8D5D              ;	22/9/22
181+  8D5D              ;
182+  8D5D
183+  8D5D CD 6C 8D     DESPLZ_DER call Desplaza_derecha
184+  8D60 CD 81 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D63 CD AA 8D         call Ciclo_completo
186+  8D66 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D69 CB FE        	set 7,(hl)
188+  8D6B C9           	ret
189+  8D6C
190+  8D6C              ; ******************************************************************************************************************************************************************************************
191+  8D6C              ;	14/9/22
192+  8D6C              ;
193+  8D6C
194+  8D6C 3A 02 85     Desplaza_derecha ld a,(Vel_right)
195+  8D6F 47           	ld b,a
196+  8D70 2A FC 84     	ld hl,(Puntero_DESPLZ)
197+  8D73 23           1 inc hl
198+  8D74 23           	inc hl
199+  8D75 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D77 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D7A CD 47 86     	call Extrae_address
202+  8D7D 22 F4 84     	ld (Puntero_objeto),hl
203+  8D80 C9           	ret
204+  8D81
205+  8D81              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8D81              ;
207+  8D81              ;	24/7/22
208+  8D81              ;
209+  8D81              ;	modifica_parametros_1er_DESPLZ_2
210+  8D81              ;
211+  8D81              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8D81              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8D81              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8D81
215+  8D81 3A F6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8D84 A7           	and a
217+  8D85 20 1F        	jr nz,1F
218+  8D87 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8D89 32 F6 84         ld (CTRL_DESPLZ),a
220+  8D8C 21 F1 84     	ld hl,Columns
221+  8D8F 34           	inc (hl)
222+  8D90 3A 00 85     	ld a,(Cuad_objeto)
223+  8D93 E6 01        	and 1
224+  8D95 28 0F        	jr z,1F
225+  8D97 2A F2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8D9A 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8D9B 22 F2 84     	ld (Posicion_actual),hl
228+  8D9E CD 4E 8F     	call Genera_coordenadas
229+  8DA1 CD F3 8E     	call Inc_CTRL_DESPLZ
230+  8DA4 18 03        	jr 2F
231+  8DA6 CD F3 8E     1 call Inc_CTRL_DESPLZ
232+  8DA9 C9           2 ret
233+  8DAA
234+  8DAA              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8DAA              ;
236+  8DAA              ;	24/7/22
237+  8DAA              ;
238+  8DAA              ;	Ciclo_completo.
239+  8DAA              ;
240+  8DAA              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8DAA              ;
242+  8DAA              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8DAA              ; 	Decrementamos (Columns).
244+  8DAA              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8DAA              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8DAA
247+  8DAA
248+  8DAA 3A F6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8DAD FE FF        	cp $ff
250+  8DAF 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8DB1 18 25        	jr 3f
252+  8DB3 21 F1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8DB6 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8DB7 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8DB8 32 F6 84     	ld (CTRL_DESPLZ),a
256+  8DBB 3A 00 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8DBE E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DC0 20 0A        	jr nz,2F
259+  8DC2 2A F2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DC5 23           	inc hl
261+  8DC6 22 F2 84     	ld (Posicion_actual),hl
262+  8DC9 CD 4E 8F     	call Genera_coordenadas
263+  8DCC
264+  8DCC              ; Inicia el puntero de Sprite.
265+  8DCC
266+  8DCC 2A FA 84     2 ld hl,(Indice_Sprite)
267+  8DCF 22 FC 84     	ld (Puntero_DESPLZ),hl
268+  8DD2 CD 47 86     	call Extrae_address
269+  8DD5 22 F4 84     	ld (Puntero_objeto),hl
270+  8DD8
271+  8DD8 C9           3 ret
272+  8DD9
273+  8DD9              ; ******************************************************************************************************************************************************************************************
274+  8DD9              ;
275+  8DD9              ;	21/01/23
276+  8DD9              ;
277+  8DD9              ;	Mov_left.
278+  8DD9              ;
279+  8DD9              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DD9              ;
281+  8DD9              Mov_left
282+  8DD9
283+  8DD9 21 17 85     	ld hl,Ctrl_0
284+  8DDC CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DDE              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DDE              ; 																	; _ en el caso de que no lo haya.
287+  8DDE 3A F6 84     	ld a,(CTRL_DESPLZ)
288+  8DE1 A7           	and a
289+  8DE2 20 19        	jr nz,10F
290+  8DE4
291+  8DE4 2A F4 84     	ld hl,(Puntero_objeto)
292+  8DE7 22 FC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8DEA
294+  8DEA 3A 17 85     	ld a,(Ctrl_0)
295+  8DED CB 77        	bit 6,a
296+  8DEF 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8DF1
298+  8DF1 CD ED 8E     	call Stop_Amadeus_left
299+  8DF4 20 62        	jr nz,8F
300+  8DF6
301+  8DF6 2A FA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8DF9 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8DFC C9           	ret
304+  8DFD
305+  8DFD 3A 17 85     10 ld a,(Ctrl_0)
306+  8E00 CB 7F        	bit 7,a
307+  8E02 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8E04 21 F6 84     	ld hl,CTRL_DESPLZ
309+  8E07 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8E08
311+  8E08 3A F7 84     11 ld a,(Coordenada_X)
312+  8E0B A7           	and a
313+  8E0C 20 4A        	jr nz,8F
314+  8E0E 3A F6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8E11 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8E12 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8E14
318+  8E14              ; ---------- ---------- ----------
319+  8E14
320+  8E14 3A 01 85     	ld a,(Vel_left)
321+  8E17 FE 02        	cp 2
322+  8E19 28 0F        	jr z,1F
323+  8E1B 38 04        	jr c,6F
324+  8E1D FE 04        	cp 4
325+  8E1F 28 12        	jr z,7F
326+  8E21
327+  8E21              ; ---------- ---------- ----------
328+  8E21
329+  8E21 3A F6 84     6 ld a,(CTRL_DESPLZ)
330+  8E24 FE F9        	cp $f9
331+  8E26 20 30        	jr nz,8F
332+  8E28 18 10        	jr 4F
333+  8E2A 3A F6 84     1 ld a,(CTRL_DESPLZ)
334+  8E2D FE FA        	cp $fa
335+  8E2F 20 27        	jr nz,8F
336+  8E31 18 07        	jr 4F
337+  8E33 3A F6 84     7 ld a,(CTRL_DESPLZ)
338+  8E36 FE FC        	cp $fc
339+  8E38 20 1E        	jr nz,8F
340+  8E3A
341+  8E3A              ; ---------- ---------- ----------
342+  8E3A
343+  8E3A              4
344+  8E3A              ;	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E3A CD 47 8F     	call Reinicio
346+  8E3D
347+  8E3D              ; ---------- ---------- ----------
348+  8E3D
349+  8E3D 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E3F C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E40 2A F4 84     	ld hl,(Puntero_objeto)
352+  8E43 22 FC 84     	ld (Puntero_DESPLZ),hl
353+  8E46 CD 5F 8E     	call DESPLZ_IZQ
354+  8E49 C1           	pop bc
355+  8E4A 10 F3        	djnz 5B
356+  8E4C 2A F2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E4F 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E50 22 F2 84     	ld (Posicion_actual),hl
359+  8E53 CD 4E 8F     	call Genera_coordenadas
360+  8E56 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E58
362+  8E58              ; ---------- ---------- ----------
363+  8E58
364+  8E58 2A F2 84     8 ld hl,(Posicion_actual)
365+  8E5B CD 5F 8E     	call DESPLZ_IZQ
366+  8E5E C9           2 ret
367+  8E5F
368+  8E5F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E5F              ;
370+  8E5F              ;	22/9/22
371+  8E5F
372+  8E5F              DESPLZ_IZQ
373+  8E5F
374+  8E5F CD 6E 8E     	call Desplaza_izquierda
375+  8E62 CD 83 8E         call modifica_parametros_1er_DESPLZ
376+  8E65 CD A7 8E     	call Ciclo_completo_2
377+  8E68 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E6B CB BE        	res 7,(hl)
379+  8E6D C9           	ret
380+  8E6E
381+  8E6E 3A 01 85     Desplaza_izquierda ld a,(Vel_left)
382+  8E71 47           	ld b,a
383+  8E72 2A FC 84     	ld hl,(Puntero_DESPLZ)
384+  8E75 2B           1 dec hl
385+  8E76 2B           	dec hl
386+  8E77 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E79 22 FC 84     	ld (Puntero_DESPLZ),hl
388+  8E7C CD 47 86     	call Extrae_address
389+  8E7F 22 F4 84     	ld (Puntero_objeto),hl
390+  8E82 C9           	ret
391+  8E83
392+  8E83              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E83              ;
394+  8E83              ;	modifica_parametros_1er_DESPLZ
395+  8E83              ;
396+  8E83              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8E83              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8E83              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8E83
400+  8E83 3A F6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8E86 A7           	and a
402+  8E87 20 1A        	jr nz,1F
403+  8E89 21 F1 84     	ld hl,Columns
404+  8E8C 34           	inc (hl)
405+  8E8D 3A 00 85     	ld a,(Cuad_objeto)
406+  8E90 E6 01        	and 1
407+  8E92 20 0F        	jr nz,1F
408+  8E94 2A F2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8E97 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8E98 22 F2 84     	ld (Posicion_actual),hl
411+  8E9B CD 4E 8F     	call Genera_coordenadas
412+  8E9E CD D6 8E     	call Dec_CTRL_DESPLZ
413+  8EA1 18 03        	jr 2F
414+  8EA3 CD D6 8E     1 call Dec_CTRL_DESPLZ
415+  8EA6 C9           2 ret
416+  8EA7
417+  8EA7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8EA7              ;
419+  8EA7 3A F6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8EAA FE F8        	cp $f8
421+  8EAC 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8EAE 18 25        	jr 3f
423+  8EB0 21 F1 84     1 ld hl,Columns
424+  8EB3 35           	dec (hl)
425+  8EB4 AF           	xor a
426+  8EB5 32 F6 84     	ld (CTRL_DESPLZ),a
427+  8EB8 3A 00 85     	ld a,(Cuad_objeto)
428+  8EBB E6 01        	and 1
429+  8EBD 28 0A        	jr z,2F
430+  8EBF 2A F2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EC2 2B           	dec hl
432+  8EC3 22 F2 84     	ld (Posicion_actual),hl
433+  8EC6 CD 4E 8F     	call Genera_coordenadas
434+  8EC9
435+  8EC9              ; Inicia el puntero de Sprite.
436+  8EC9
437+  8EC9 2A FA 84     2 ld hl,(Indice_Sprite)
438+  8ECC 22 FC 84     	ld (Puntero_DESPLZ),hl
439+  8ECF CD 47 86     	call Extrae_address
440+  8ED2 22 F4 84     	ld (Puntero_objeto),hl
441+  8ED5 C9           3 ret
442+  8ED6
443+  8ED6              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8ED6              ;
445+  8ED6              ;	Dec_CTRL_DESPLZ
446+  8ED6              ;
447+  8ED6              ;	Subrutina de [modifica_punteros].
448+  8ED6              ;
449+  8ED6              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8ED6
451+  8ED6 21 F6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8ED9 3A 01 85     	ld a,(Vel_left)
453+  8EDC A7           	and a
454+  8EDD 28 06        	jr z,1F
455+  8EDF 47           	ld b,a
456+  8EE0 35           3 dec (hl)
457+  8EE1 10 FD        	djnz 3B
458+  8EE3 18 01        	jr 2F
459+  8EE5 35           1 dec (hl)
460+  8EE6 C9           2 ret
461+  8EE7
462+  8EE7              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8EE7              ;
464+  8EE7              ;	19/10/22
465+  8EE7              ;
466+  8EE7              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8EE7              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8EE7
469+  8EE7 3A F7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8EEA FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8EEC C9           	ret
472+  8EED
473+  8EED              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8EED              ;
475+  8EED              ;	19/10/22
476+  8EED              ;
477+  8EED              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8EED              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8EED
480+  8EED 3A F7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8EF0 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8EF2 C9           	ret
483+  8EF3
484+  8EF3              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8EF3              ;
486+  8EF3              ;	24/7/22
487+  8EF3              ;
488+  8EF3              ;	Inc_CTRL_DESPLZ
489+  8EF3              ;
490+  8EF3              ;	Subrutina de [modifica_punteros].
491+  8EF3              ;
492+  8EF3              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8EF3
494+  8EF3 21 F6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8EF6 3A 02 85     	ld a,(Vel_right)
496+  8EF9 A7           	and a
497+  8EFA 28 06        	jr z,1F
498+  8EFC 47           	ld b,a
499+  8EFD 34           3 inc (hl)
500+  8EFE 10 FD        	djnz 3B
501+  8F00 18 01        	jr 2F
502+  8F02 34           1 inc (hl)
503+  8F03 C9           2 ret
504+  8F04
505+  8F04              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8F04
507+  8F04 2A F2 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8F07 01 1F 00     	ld bc,31
509+  8F0A A7           	and a
510+  8F0B ED 4A        	adc hl,bc
511+  8F0D 22 F2 84     	ld (Posicion_actual),hl
512+  8F10 21 17 85     	ld hl,Ctrl_0														; $xxx1
513+  8F13 CB C6        	set 0,(hl)
514+  8F15 C9           	ret
515+  8F16
516+  8F16              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8F16
518+  8F16 2A F2 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8F19 01 1F 00     	ld bc,31
520+  8F1C A7           	and a
521+  8F1D ED 42        	sbc hl,bc
522+  8F1F 22 F2 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F22 21 17 85     	ld hl,Ctrl_0
524+  8F25 CB CE        	set 1,(hl)
525+  8F27 C9           	ret
526+  8F28
527+  8F28              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F28
529+  8F28 24           Reaparece_abajo inc h
530+  8F29 01 E0 17     	ld bc,$17e0
531+  8F2C A7           	and a
532+  8F2D ED 4A        	adc hl,bc
533+  8F2F 22 F2 84     	ld (Posicion_actual),hl
534+  8F32 21 17 85     	ld hl,Ctrl_0
535+  8F35 CB D6        	set 2,(hl)
536+  8F37 C9           	ret
537+  8F38
538+  8F38              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F38
540+  8F38 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F3B A7           	and a
542+  8F3C ED 42        	sbc hl,bc
543+  8F3E 22 F2 84     	ld (Posicion_actual),hl
544+  8F41 21 17 85     	ld hl,Ctrl_0
545+  8F44 CB DE        	set 3,(hl)
546+  8F46 C9           	ret
547+  8F47
548+  8F47              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F47
550+  8F47 2A FE 84     Reinicio ld hl,(Posicion_inicio)
551+  8F4A 22 F2 84     	ld (Posicion_actual),hl
552+  8F4D C9           	ret
# file closed: Direcciones.asm
598   8F4E              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F4E              ;	12/12/22
  2+  8F4E              ;
  3+  8F4E              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F4E              ;	Fila superior "0", Columna izquierda "0".
  5+  8F4E              ;
  6+  8F4E              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F4E              ;
  8+  8F4E              ;	Modifica: A
  9+  8F4E
 10+  8F4E C5           Genera_coordenadas push bc
 11+  8F4F E5           	push hl
 12+  8F50 2A F2 84     	ld hl,(Posicion_actual)
 13+  8F53 7D           	ld a,l
 14+  8F54 E6 1F        	and $1f
 15+  8F56 32 F7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F59 CD 3E 8C     	call calcula_tercio
 17+  8F5C 47           	ld b,a
 18+  8F5D 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F5E 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F60 7D           	ld a,l
 21+  8F61 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F63 28 05        	jr z,2F
 23+  8F65 0C           1 inc c
 24+  8F66 D6 20        	sub 32
 25+  8F68 20 FB        	jr nz,1B
 26+  8F6A 0C           2 inc c
 27+  8F6B 04           	inc b
 28+  8F6C 05           	dec b
 29+  8F6D 28 04        	jr z,3F
 30+  8F6F 3E E0        	ld a,$e0
 31+  8F71 10 F2        	djnz 1B
 32+  8F73 79           3 ld a,c
 33+  8F74 3D           	dec a
 34+  8F75 32 F8 84     	ld (Coordenada_y),a
 35+  8F78 E1           	pop hl
 36+  8F79 C1           	pop bc
 37+  8F7A C9           	ret
# file closed: Genera_coordenadas.asm
599   8F7B              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F7B
  2+  8F7B
  3+  8F7B              ;   11/8/22
  4+  8F7B              ;
  5+  8F7B              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F7B              ;
  7+  8F7B              ;   Mov_obj.asm
  8+  8F7B              ;
  9+  8F7B              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F7B              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F7B              ;
 12+  8F7B              ;   Codificación:
 13+  8F7B              ;
 14+  8F7B              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F7B
 16+  8F7B 02 10 00     Izquierda db 2,%00010000,0
 17+  8F7E 02 20 00     Derecha db 2,%00100000,0
 18+  8F81 02 80 00     Abajo db 2,%10000000,0
 19+  8F84 02 40 00     Arriba db 2,%01000000,0
 20+  8F87
 21+  8F87 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8F8B 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8F8F 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8F93 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8F97 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8F9B 60 42 60 40
 25+  8F9F 63
 26+  8FA0 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FA4 22 A3 80 A0
 27+  8FA8 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8FAC 84 A0 83 A0
 28+  8FB0 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8FB4 80 A3 22 A0
 29+  8FB8 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8FBC 40 60 42 60
 30+  8FC0 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FC4
 32+  8FC4 7B 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FC6 7E 8F        Indice_mov_Derecha defw Derecha
 34+  8FC8 81 8F        Indice_mov_Abajo defw Abajo
 35+  8FCA 84 8F        Indice_mov_Arriba defw Arriba
 36+  8FCC 8B 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 37+  8FCE 93 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 38+  8FD0 87 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 39+  8FD2
 40+  8FD2 3A 1D 85     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 41+  8FD5 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 42+  8FD6 28 02            jr z,1F
 43+  8FD8 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 44+  8FDA
 45+  8FDA 3A 1E 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 46+  8FDD C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 47+  8FDF 32 1E 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 48+  8FE2              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 49+  8FE2 2A 1B 85         ld hl,(Puntero_mov)
 50+  8FE5 7E               ld a,(hl)
 51+  8FE6 32 1D 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 52+  8FE9 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 53+  8FEA 22 1B 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 54+  8FED
 55+  8FED 3A 1F 85     Decoder ld a,(Repetimos_db)
 56+  8FF0 A7               and a
 57+  8FF1 20 0C            jr nz,12F
 58+  8FF3 2A 1B 85         ld hl,(Puntero_mov)
 59+  8FF6 7E               ld a,(hl)
 60+  8FF7 A7               and a
 61+  8FF8 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 62+  8FFA
 63+  8FFA E6 0F            and $0f
 64+  8FFC 32 1F 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  8FFF              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  8FFF 2A 1B 85     12 ld hl,(Puntero_mov)
 67+  9002 CB 7E            bit 7,(hl)
 68+  9004 28 03            jr z,2F
 69+  9006 CD 8A 8C         call Mov_down
 70+  9009 2A 1B 85     2 ld hl, (Puntero_mov)
 71+  900C CB 76            bit 6,(hl)
 72+  900E 28 03            jr z,3F
 73+  9010 CD B8 8C         call Mov_up
 74+  9013 2A 1B 85     3 ld hl, (Puntero_mov)
 75+  9016 CB 6E            bit 5,(hl)
 76+  9018 28 03            jr z,4F
 77+  901A CD E6 8C         call Mov_right
 78+  901D 2A 1B 85     4 ld hl, (Puntero_mov)
 79+  9020 CB 66            bit 4,(hl)
 80+  9022 28 03            jr z,5F
 81+  9024 CD D9 8D         call Mov_left
 82+  9027
 83+  9027              ; ---------- --------- --------- ---------- ----------
 84+  9027
 85+  9027 3A 1F 85     5 ld a,(Repetimos_db)
 86+  902A A7               and a
 87+  902B 28 07            jr z,6F
 88+  902D 3D               dec a
 89+  902E 32 1F 85         ld (Repetimos_db),a
 90+  9031 28 01            jr z,6f
 91+  9033 C9           11 ret
 92+  9034 21 1D 85     6 ld hl,Contador_db_mov
 93+  9037 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  9038 2A 1B 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  903B 23               inc hl
 96+  903C 22 1B 85         ld (Puntero_mov),hl
 97+  903F 18 F2            jr 11B
 98+  9041 2A 19 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  9044 3A 1E 85         ld a,(Incrementa_puntero)
100+  9047 47               ld b,a
101+  9048 23           8 inc hl
102+  9049 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  904B 5E               ld e,(hl)
104+  904C 23               inc hl
105+  904D 56               ld d,(hl)
106+  904E EB               ex de,hl
107+  904F 22 1B 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  9052 18 DF            jr 11B
109+  9054
110+  9054              ; ---------- --------- --------- ---------- ----------
111+  9054              ;
112+  9054              ;   11/8/22
113+  9054              ;
114+  9054              ;   Prepara_Puntero_mov
115+  9054
116+  9054 E5           Prepara_Puntero_mov push hl
117+  9055 D5               push de
118+  9056 2A 19 85         ld hl,(Puntero_indice_mov)
119+  9059 5E               ld e,(hl)
120+  905A 23               inc hl
121+  905B 56               ld d,(hl)
122+  905C EB               ex de,hl
123+  905D 22 1B 85         ld (Puntero_mov),hl
124+  9060 D1               pop de
125+  9061 E1               pop hl
126+  9062 C9               ret
127+  9063
128+  9063              ; ---------- --------- --------- ---------- ----------
129+  9063              ;
130+  9063              ;   11/8/22
131+  9063              ;
132+  9063              ;   Reinicia_el_movimiento
133+  9063
134+  9063 CD 54 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  9066 AF               xor a
136+  9067 32 1D 85         ld (Contador_db_mov),a
137+  906A 32 1E 85         ld (Incrementa_puntero),a
138+  906D C3 D2 8F         jp Movimiento
139+  9070
140+  9070              ; ---------- --------- --------- ---------- ----------
141+  9070
142+  9070
143+  9070
144+  9070
145+  9070
146+  9070
147+  9070
148+  9070
149+  9070
150+  9070
151+  9070
152+  9070
153+  9070
154+  9070
155+  9070
156+  9070
157+  9070
158+  9070
# file closed: Patrones_de_mov.asm
600   9070              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9070              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9070              ;
  3+  9070              ;	3/1/23
  4+  9070              ;
  5+  9070              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9070
  7+  9070              ;	ADC HL,SP	LD (addr),SP
  8+  9070              ;	ADD HL,SP	LD SP,(addr)
  9+  9070              ;	ADD IX,SP	LD SP,nn
 10+  9070              ; 	ADD IY,SP	LD SP,HL
 11+  9070              ;				LD SP,IX
 12+  9070              ;	DEC SP		LD SP,IY
 13+  9070
 14+  9070              ;	EX (SP),HL
 15+  9070              ;	EX (SP),IX
 16+  9070              ;	EX (SP),IY
 17+  9070
 18+  9070              ;	INC SP
 19+  9070
 20+  9070
 21+  9070                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 2C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 30 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 30 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 2C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
601   7FC0
602   7FC0              	SAVESNA "Pruebas.sna", START
603   7FC0
604   7FC0
605   7FC0
# file closed: Banco_de_pruebas.asm
