# file opened: Banco_de_pruebas.asm
   1  0000              ;	25/9/22
   2  0000
   3  0000
   4  0000              	DEVICE ZXSPECTRUM48
   5  0000
   6  0000              	org $a0ff
   7  A0FF
   8  A0FF              ;	Vector de interrupciones.
   9  A0FF
  10  A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
  11  A101
  12  A101              	org $a101
  13  A101
  14  A101 CD 21 85     	call Frame
  15  A104 ED 4D        	reti
  16  A106
  17  A106              ; ----- ----- ----- ----- -----
  18  A106
  19  A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
   1+ A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   2+ A106              ;
   3+ A106              ;	3/12/22
   4+ A106              ;
   5+ A106              ;	Sprites e índices.
   6+ A106
   7+ A106              	org $8000
   8+ 8000
   9+ 8000              ; Badsat_der. 2x2.
  10+ 8000
  11+ 8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
  12+ 8002 30 80        	defw Badsat_izq_f8
  13+ 8004 60 80        	defw Badsat_izq_f9
  14+ 8006 90 80        	defw Badsat_izq_fa
  15+ 8008 C0 80        	defw Badsat_izq_fb
  16+ 800A F0 80        	defw Badsat_izq_fc
  17+ 800C 20 81        	defw Badsat_izq_fd
  18+ 800E 50 81        	defw Badsat_izq_fe
  19+ 8010
  20+ 8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
  20+ 8014 02 2A 02 55
  21+ 8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
  21+ 801C 7F E8 03 60
  22+ 8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
  22+ 8024 2B E8 54 40
  23+ 8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
  23+ 802C 28 00 10 00
  24+ 8030
  25+ 8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
  25+ 8034 0A 00 01 15
  26+ 8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
  26+ 803C 01 55 00 01
  27+ 8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
  27+ 8044 00 01 B0 00
  28+ 8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
  28+ 804C FC 00 15 F4
  29+ 8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
  29+ 8054 55 30 00 2A
  30+ 8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
  30+ 805C 00 08 00 00
  31+ 8060
  32+ 8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
  32+ 8064 85 00 00 8A
  33+ 8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
  33+ 806C 00 AA 80 00
  34+ 8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
  34+ 8074 00 00 D8 00
  35+ 8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
  35+ 807C FE 00 0A FA
  36+ 8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
  36+ 8084 2A 98 00 15
  37+ 8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
  37+ 808C 00 04 00 00
  38+ 8090
  39+ 8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
  39+ 8094 42 80 00 45
  40+ 8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
  40+ 809C 00 55 40 00
  41+ 80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
  41+ 80A4 00 00 6C 00
  42+ 80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
  42+ 80AC FF 00 05 7D
  43+ 80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
  43+ 80B4 15 4C 00 0A
  44+ 80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
  44+ 80BC 00 02 00 00
  45+ 80C0
  46+ 80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
  46+ 80C4 21 40 00 22
  47+ 80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
  47+ 80CC 00 2A A0 00
  48+ 80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
  48+ 80D4 80 00 36 00
  49+ 80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
  49+ 80DC 7F 80 02 BE
  50+ 80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
  50+ 80E4 0A A6 00 05
  51+ 80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
  51+ 80EC 00 01 00 00
  52+ 80F0
  53+ 80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
  53+ 80F4 10 A0 00 11
  54+ 80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
  54+ 80FC 00 15 50 00
  55+ 8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
  55+ 8104 40 00 1B 00
  56+ 8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
  56+ 810C BF C0 01 5F
  57+ 8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
  57+ 8114 05 53 00 02
  58+ 8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
  58+ 811C 00 00 80 00
  59+ 8120
  60+ 8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
  60+ 8124 08 50 00 08
  61+ 8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
  61+ 812C 00 0A A8 00
  62+ 8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
  62+ 8134 A0 00 0D 80
  63+ 8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
  63+ 813C 5F F8 00 AF
  64+ 8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
  64+ 8144 02 A9 00 01
  65+ 8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
  65+ 814C 00 00 40 00
  66+ 8150
  67+ 8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
  67+ 8154 04 28 00 04
  68+ 8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
  68+ 815C 00 05 54 00
  69+ 8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
  69+ 8164 D0 00 06 C0
  70+ 8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
  70+ 816C 2F FC 00 57
  71+ 8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
  71+ 8174 01 54 80 00
  72+ 8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
  72+ 817C 00 00 20 00
  73+ 8180
  74+ 8180              ; ----------------------------------------------------------------------------------------
  75+ 8180
  76+ 8180 90 81        Indice_Badsat_der defw Badsat_derecha
  77+ 8182 B0 81        	defw Badsat_der_f8
  78+ 8184 E0 81        	defw Badsat_der_f9
  79+ 8186 10 82        	defw Badsat_der_fa
  80+ 8188 40 82        	defw Badsat_der_fb
  81+ 818A 70 82        	defw Badsat_der_fc
  82+ 818C A0 82        	defw Badsat_der_fd
  83+ 818E D0 82        	defw Badsat_der_fe
  84+ 8190
  85+ 8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
  85+ 8194 54 40 AA 40
  86+ 8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
  86+ 819C 17 FE 06 C0
  87+ 81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
  87+ 81A4 17 D4 02 2A
  88+ 81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
  88+ 81AC 00 14 00 08
  89+ 81B0
  90+ 81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
  90+ 81B4 20 00 2A 20
  91+ 81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
  91+ 81BC 2A A0 00 15
  92+ 81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
  92+ 81C4 00 03 60 00
  93+ 81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
  93+ 81CC F4 00 0B EA
  94+ 81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
  94+ 81D4 03 2A 80 00
  95+ 81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
  95+ 81DC 00 00 04 00
  96+ 81E0
  97+ 81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
  97+ 81E4 10 00 15 10
  98+ 81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
  98+ 81EC 15 50 00 0A
  99+ 81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
  99+ 81F4 80 01 B0 00
 100+ 81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
 100+ 81FC FA 00 05 F5
 101+ 8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
 101+ 8204 01 95 40 00
 102+ 8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
 102+ 820C 00 00 02 00
 103+ 8210
 104+ 8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
 104+ 8214 08 00 0A 88
 105+ 8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
 105+ 821C 0A A8 00 05
 106+ 8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
 106+ 8224 C0 00 D8 00
 107+ 8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
 107+ 822C FD 00 02 FA
 108+ 8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
 108+ 8234 00 CA A0 00
 109+ 8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
 109+ 823C 80 00 01 00
 110+ 8240
 111+ 8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
 111+ 8244 84 00 05 44
 112+ 8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
 112+ 824C 05 54 00 02
 113+ 8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
 113+ 8254 E0 00 6C 00
 114+ 8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
 114+ 825C FE 80 01 7D
 115+ 8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
 115+ 8264 00 65 50 00
 116+ 8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
 116+ 826C 40 00 00 80
 117+ 8270
 118+ 8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
 118+ 8274 42 00 02 A2
 119+ 8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
 119+ 827C 02 AA 00 01
 120+ 8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
 120+ 8284 F0 00 36 00
 121+ 8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
 121+ 828C FF 40 00 BE
 122+ 8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
 122+ 8294 00 32 A8 00
 123+ 8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
 123+ 829C A0 00 00 40
 124+ 82A0
 125+ 82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
 125+ 82A4 A1 00 01 51
 126+ 82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
 126+ 82AC 01 55 00 00
 127+ 82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
 127+ 82B4 F8 00 1B 00
 128+ 82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
 128+ 82BC FF A0 00 1F
 129+ 82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
 129+ 82C4 00 09 54 00
 130+ 82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
 130+ 82CC 50 00 00 20
 131+ 82D0
 132+ 82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
 132+ 82D4 50 80 00 A8
 133+ 82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
 133+ 82DC 00 AA 80 00
 134+ 82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
 134+ 82E4 FC 00 0D 80
 135+ 82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
 135+ 82EC FF D0 00 0F
 136+ 82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
 136+ 82F4 00 04 AA 00
 137+ 82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
 137+ 82FC 28 00 00 10
 138+ 8300
 139+ 8300              ; Amadeus. 2x2.
 140+ 8300
 141+ 8300 10 83        Indice_Amadeus defw Amadeus
 142+ 8302 00 00        	defw 0
 143+ 8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
 144+ 8306 00 00        	defw 0
 145+ 8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
 146+ 830A 00 00        	defw 0
 147+ 830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
 148+ 830E 00 00        	defw 0	 								; (Fín de índice).
 149+ 8310
 150+ 8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
 150+ 8314 26 64 24 24
 151+ 8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
 151+ 831C 6F F6 67 E6
 152+ 8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
 152+ 8324 F7 EF FF FF
 153+ 8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
 153+ 832C 8B D1 71 8E
 154+ 8330
 155+ 8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
 155+ 8334 F1 00 09 99
 156+ 8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
 156+ 833C 0B 0D 00 1B
 157+ 8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
 157+ 8344 80 19 F9 80
 158+ 8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
 158+ 834C F3 C0 3D FB
 159+ 8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
 159+ 8354 3E F7 C0 3E
 160+ 8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
 160+ 835C 40 1C 63 80
 161+ 8360
 162+ 8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
 162+ 8364 3C 40 02 66
 163+ 8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
 163+ 836C 02 C3 40 06
 164+ 8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
 164+ 8374 60 06 7E 60
 165+ 8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
 165+ 837C 3C F0 0F 7E
 166+ 8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
 166+ 8384 0F BD F0 0F
 167+ 8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
 167+ 838C 10 07 18 E0
 168+ 8390
 169+ 8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
 169+ 8394 8F 10 00 99
 170+ 8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
 170+ 839C 00 B0 D0 01
 171+ 83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
 171+ 83A4 D8 01 9F 98
 172+ 83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
 172+ 83AC CF 3C 03 DF
 173+ 83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
 173+ 83B4 03 EF 7C 03
 174+ 83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
 174+ 83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
  20  83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
   1+ 83C0
   2+ 83C0              ; Base de datos de entidades e Índice.
   3+ 83C0              ;
   4+ 83C0              ; 05/11/22
   5+ 83C0
   6+ 83C0              Indice_de_entidades
   7+ 83C0
   8+ 83C0 FA 83        	defw Badsat
   9+ 83C2              ;	defw Badsat2
  10+ 83C2              ;	defw Badsat3
  11+ 83C2              ;	defw Badsat4
  12+ 83C2 C8 83        	defw Amadeus_db
  13+ 83C4              ;	...
  14+ 83C4              ;	...
  15+ 83C4              ;	+ entidades ...
  16+ 83C4
  17+ 83C4 00 00        	defw 0
  18+ 83C6 00 00        	defw 0
  19+ 83C8
  20+ 83C8              ; ---------- ---------- ---------- ---------- ----------
  21+ 83C8
  22+ 83C8 02 02        Amadeus_db db 2,2
  23+ 83CA 00 00        	defw 0
  24+ 83CC 00           	db 0
  25+ 83CD
  26+ 83CD 05           	db %00000101
  27+ 83CE 00 83        	defw Indice_Amadeus
  28+ 83D0 00 00        	defw 0
  29+ 83D2 CF 50        	defw $50cf
  30+ 83D4 00 00 00     	db 0,0,0
  31+ 83D7
  32+ 83D7 02 02 00 00  	db 2,2,0,0
  33+ 83DB
  34+ 83DB 00 00        	db 0,0
  35+ 83DD 00 00        	defw 0
  36+ 83DF 00           	db 0
  37+ 83E0 00 00        	db 0,0
  38+ 83E2 00 00        	defw 0
  39+ 83E4 00           	db 0
  40+ 83E5
  41+ 83E5 00 00        	db 0,0
  42+ 83E7
  43+ 83E7 00 00 00 00  	defw 0,0
  44+ 83EB 00 00 00     	db 0,0,0
  45+ 83EE
  46+ 83EE 00 00        	defw 0
  47+ 83F0 00 00        	defw 0
  48+ 83F2 00           	db 0
  49+ 83F3 00 00        	defw 0
  50+ 83F5 00           	db 0
  51+ 83F6
  52+ 83F6 00 00 00 00  	defw 0,0
  53+ 83FA
  54+ 83FA              ; ---------- ---------- ---------- ---------- ----------
  55+ 83FA
  56+ 83FA 02 02        Badsat db 2,2
  57+ 83FC 00 00        	defw 0
  58+ 83FE 00           	db 0
  59+ 83FF
  60+ 83FF 06           	db %00000110
  61+ 8400 80 81        	defw Indice_Badsat_der
  62+ 8402 00 00        	defw 0
  63+ 8404 A1 47        	defw $47a1
  64+ 8406 00 00 00     	db 0,0,0
  65+ 8409
  66+ 8409 01 01 01 02  	db 1,1,1,2
  67+ 840D
  68+ 840D 00 00        	db 0,0
  69+ 840F 00 00        	defw 0
  70+ 8411 00           	db 0
  71+ 8412 00 00        	db 0,0
  72+ 8414 00 00        	defw 0
  73+ 8416 00           	db 0
  74+ 8417
  75+ 8417 00 00        	db 0,0
  76+ 8419
  77+ 8419 7E 91 00 00  	defw Indice_mov_Badsat,0
  78+ 841D 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
  79+ 8420
  80+ 8420 00 00        	defw 0
  81+ 8422 00 00        	defw 0
  82+ 8424 00           	db 0
  83+ 8425 00 00        	defw 0
  84+ 8427 00           	db 0
  85+ 8428
  86+ 8428 00 00 00 00  	defw 0,0
  87+ 842C
  88+ 842C              ; ---------- ---------- ---------- ---------- ----------
  89+ 842C
  90+ 842C 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
  91+ 842E 00 00        	defw 0                                            ; Posicion_actual
  92+ 8430 00           	db 0                                              ; CTRL_DESPLZ
  93+ 8431
  94+ 8431 02           	db %00000010
  95+ 8432 00 80        	defw Indice_Badsat_izq	                          ; Indice_Sprite
  96+ 8434 00 00        	defw 0                                            ; Puntero_DESPLZ
  97+ 8436 61 47        	defw $4761                                        ; Posicion_inicio
  98+ 8438 00 00 00     	db 0,0,0
  99+ 843B
 100+ 843B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 101+ 843F
 102+ 843F 00 00        	db 0,0
 103+ 8441 00 00        	defw 0
 104+ 8443 00           	db 0
 105+ 8444 00 00        	db 0,0
 106+ 8446 00 00        	defw 0
 107+ 8448 00           	db 0
 108+ 8449
 109+ 8449 00 00        	db 0,0
 110+ 844B
 111+ 844B 80 91 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
 112+ 844F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 113+ 8452
 114+ 8452 00 00        	defw 0
 115+ 8454 00 00        	defw 0
 116+ 8456 00           	db 0
 117+ 8457 00 00        	defw 0
 118+ 8459 00           	db 0
 119+ 845A
 120+ 845A 00 00 00 00  	defw 0,0
 121+ 845E
 122+ 845E              ; ---------- ---------- ---------- ---------- ----------
 123+ 845E
 124+ 845E 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
 125+ 8460 00 00        	defw 0                                            ; Posicion_actual
 126+ 8462 00           	db 0                                              ; CTRL_DESPLZ
 127+ 8463
 128+ 8463 04           	db %00000100
 129+ 8464 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
 130+ 8466 00 00        	defw 0                                            ; Puntero_DESPLZ
 131+ 8468 7E 47        	defw $477e                                        ; Posicion_inicio
 132+ 846A 00 00 00     	db 0,0,0
 133+ 846D
 134+ 846D 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 135+ 8471
 136+ 8471 00 00        	db 0,0
 137+ 8473 00 00        	defw 0
 138+ 8475 00           	db 0
 139+ 8476 00 00        	db 0,0
 140+ 8478 00 00        	defw 0
 141+ 847A 00           	db 0
 142+ 847B
 143+ 847B 00 00        	db 0,0
 144+ 847D
 145+ 847D 82 91 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
 146+ 8481 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 147+ 8484
 148+ 8484 00 00        	defw 0
 149+ 8486 00 00        	defw 0
 150+ 8488 00           	db 0
 151+ 8489 00 00        	defw 0
 152+ 848B 00           	db 0
 153+ 848C
 154+ 848C 00 00 00 00  	defw 0,0
 155+ 8490
 156+ 8490              ; ---------- ---------- ---------- ---------- ----------
 157+ 8490
 158+ 8490 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
 159+ 8492 00 00        	defw 0                                            ; Posicion_actual
 160+ 8494 00           	db 0                                              ; CTRL_DESPLZ
 161+ 8495
 162+ 8495 01           	db %00000001
 163+ 8496 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
 164+ 8498 00 00        	defw 0                                            ; Puntero_DESPLZ
 165+ 849A BE 47        	defw $47be                                        ; Posicion_inicio
 166+ 849C 00 00 00     	db 0,0,0
 167+ 849F
 168+ 849F 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 169+ 84A3
 170+ 84A3 00 00        	db 0,0
 171+ 84A5 00 00        	defw 0
 172+ 84A7 00           	db 0
 173+ 84A8 00 00        	db 0,0
 174+ 84AA 00 00        	defw 0
 175+ 84AC 00           	db 0
 176+ 84AD
 177+ 84AD 00 00        	db 0,0
 178+ 84AF
 179+ 84AF 84 91 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
 180+ 84B3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 181+ 84B6
 182+ 84B6 00 00        	defw 0
 183+ 84B8 00 00        	defw 0
 184+ 84BA 00           	db 0
 185+ 84BB 00 00        	defw 0
 186+ 84BD 00           	db 0
 187+ 84BE
 188+ 84BE 00 00 00 00  	defw 0,0
 189+ 84C2
# file closed: Base_de_datos_Sprites.asm
  21  84C2
  22  84C2              ; ******************************************************************************************************************************************************************************************
  23  84C2              ; Constantes.
  24  84C2              ; ******************************************************************************************************************************************************************************************
  25  84C2              ;
  26  84C2              ; 8/11/22
  27  84C2              ;
  28  84C2              ; Constantes generales.
  29  84C2              ;
  30  84C2
  31  84C2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
  32  84C2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
  33  84C2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
  34  84C2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
  35  84C2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
  36  84C2
  37  84C2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
  38  84C2              ;                               				        ; De momento situamos este almacén en $7000.
  39  84C2
  40  84C2
  41  84C2              ; ******************************************************************************************************************************************************************************************
  42  84C2              ; Variables.
  43  84C2              ; ******************************************************************************************************************************************************************************************
  44  84C2              ;
  45  84C2              ; 10/11/22
  46  84C2              ;
  47  84C2              ; Variables de DRAW. (Motor principal).
  48  84C2              ;
  49  84C2
  50  84C2 02           Filas db 2												; Filas. [DRAW]
  51  84C3 02           Columns db 2  											; Columnas. [DRAW]
  52  84C4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
  53  84C6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
  54  84C7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
  55  84C7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
  56  84C7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
  57  84C7 06           Attr db %00000110										; Atributos de la entidad:
  58  84C8
  59  84C8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  60  84C8              ;
  61  84C8              ;	COLORES: 0 ..... NEGRO
  62  84C8              ;    		 1 ..... AZUL
  63  84C8              ; 			 2 ..... ROJO
  64  84C8              ;			 3 ..... MAGENTA
  65  84C8              ; 			 4 ..... VERDE
  66  84C8              ; 			 5 ..... CIAN
  67  84C8              ;			 6 ..... AMARILLO
  68  84C8              ; 			 7 ..... BLANCO
  69  84C8
  70  84C8 80 81        Indice_Sprite defw Indice_Badsat_der
  71  84CA 00 00        Puntero_DESPLZ defw 0
  72  84CC A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
  73  84CE 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
  74  84CF 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
  75  84D0 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
  76  84D1
  77  84D1              ; Variables de objeto. (Características).
  78  84D1
  79  84D1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
  80  84D2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
  81  84D3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
  82  84D4 03           Vel_down db 3 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
  83  84D5
  84  84D5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
  85  84D7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
  86  84D9 00           	db 0
  87  84DA 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
  88  84DC 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
  89  84DE 00           	db 0
  90  84DF
  91  84DF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
  92  84DF
  93  84DF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
  94  84E0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
  95  84E0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
  96  84E0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
  97  84E0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
  98  84E0              ;
  99  84E0              ; 														DESCRIPCIÖN:
 100  84E0              ;
 101  84E0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
 102  84E0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
 103  84E0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
 104  84E0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
 105  84E0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
 106  84E0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
 107  84E0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
 108  84E0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
 109  84E0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
 110  84E0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
 111  84E0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
 112  84E0              ;
 113  84E0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
 114  84E0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
 115  84E0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
 116  84E0
 117  84E0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
 118  84E1
 119  84E1              ; Movimiento.
 120  84E1
 121  84E1 7E 91        Puntero_indice_mov defw Indice_mov_Badsat
 122  84E3 00 00        Puntero_mov defw 0
 123  84E5 00           Contador_db_mov db 0
 124  84E6 00           Incrementa_puntero db 0
 125  84E7 00           Repetimos_db db 0
 126  84E8
 127  84E8
 128  84E8              ; Variables de funcionamiento. [DRAW].
 129  84E8
 130  84E8 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 131  84EA 00 00        Puntero_datas defw 0
 132  84EC 00           Columnas db 0
 133  84ED 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
 134  84EF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
 135  84EF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
 136  84F0
 137  84F0
 138  84F0              ; Cajas. Almacenes.
 139  84F0
 140  84F0 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
 141  84F2 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
 142  84F4
 143  84F4              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
 144  84F4
 145  84F4              ; Gestión de ENTIDADES.
 146  84F4
 147  84F4 00 00        Puntero_store_entidades defw 0
 148  84F6 00 00        Puntero_restore_entidades defw 0
 149  84F8 00 00        Indice_restore defw 0
 150  84FA
 151  84FA              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
 152  84FA
 153  84FA 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
 154  84FB 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
 155  84FC              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
 156  84FC              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
 157  84FC              ;														; _ (Numero_de_malotes)="0".
 158  84FC 00 00        Stack defw 0 											; La rutina de pintado, [Pintorrejeo], utiliza esta_
 159  84FE              ;														; _variable para almacenar lo posición del puntero_
 160  84FE              ; 														; _de pila, SP.
 161  84FE 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
 162  8500              ;														; La utiliza la rutina [Extrae_foto_registros].
 163  8500 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
 164  8502              ;														; _el snapshot de los registros de la siguiente entidad.
 165  8502              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
 166  8502
 167  8502              ; Gestión de FRAMES.
 168  8502
 169  8502 00           Switch db 0
 170  8503
 171  8503              ; Variables de Raster y localización en pantalla.
 172  8503
 173  8503 00 FF        Temp_Raster defw $ff00
 174  8505
 175  8505              ; Rutina principal *************************************************************************************************************************************************************************
 176  8505              ;
 177  8505              ;	14/11/22
 178  8505
 179  8505 31 FF FF     START ld sp,$ffff
 180  8508
 181  8508 3E A0        	ld a,$a0
 182  850A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
 183  850C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
 184  850E F3           	DI
 185  850F
 186  850F              ;	xor a												 ; Borde NEGRO. PAPER CYAN, INK BLACK.
 187  850F              ;	out ($fe),a
 188  850F
 189  850F 3E 01        	ld a,1
 190  8511 D3 FE        	out ($fe),a
 191  8513
 192  8513 3E 07        	ld a,%00000111
 193  8515 CD A7 8D     	call Cls
 194  8518
 195  8518 CD 64 86     	call Pinta_FILAS
 196  851B
 197  851B CD 36 86     	call Pulsa_ENTER
 198  851E
 199  851E              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
 200  851E              ;   Inicialmente tengo cargado a Amadeus en el engine.
 201  851E              ;	Pintamos el resto de entidades:
 202  851E
 203  851E              ;	call Inicia_punteros_de_entidades
 204  851E              ;	ld hl,Numero_de_entidades
 205  851E              ;	ld b,(hl)
 206  851E
 207  851E              ;1 push bc  												; Guardo el contador de entidades.
 208  851E              ; 	call Inicia_sprite
 209  851E              ;	call Draw
 210  851E              ;	call Guarda_foto_registros
 211  851E              ;	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
 212  851E              ;	pop bc
 213  851E              ;	djnz 1B  											; Decremento (CONTANDOR AMADEUS).
 214  851E
 215  851E              ; Volvemos a situar los punteros STORE/RESTORE de entidades en AMADEUS y cargamos los datos de nuestra nave en el engine.
 216  851E
 217  851E              ;    call Inicia_punteros_de_entidades
 218  851E              ;    call Restore_Primera_entidad
 219  851E
 220  851E FB           4 ei
 221  851F 18 FD        	jr 4B
 222  8521
 223  8521              ; -----------------------------------------------------------------------------------
 224  8521
 225  8521              Frame
 226  8521
 227  8521              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
 228  8521              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
 229  8521
 230  8521
 231  8521              ;	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
 232  8521
 233  8521              ;	ld a,7
 234  8521              ;    out ($fe),a
 235  8521              ;	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
 236  8521
 237  8521
 238  8521
 239  8521              ;	ld a,7
 240  8521               ;   out ($fe),a
 241  8521
 242  8521              ;    call DELAY
 243  8521
 244  8521              ;    ld a,7
 245  8521              ;    out ($fe),a
 246  8521
 247  8521
 248  8521              ;    call DELAY
 249  8521
 250  8521
 251  8521 3E 01            ld a,1
 252  8523 D3 FE            out ($fe),a
 253  8525
 254  8525
 255  8525
 256  8525              ;	ld hl,$4000
 257  8525              ;    ld b,8
 258  8525              ;    call Pinta_enemigo_3x2
 259  8525
 260  8525              ;    ld hl,$4041
 261  8525              ;    ld b,8
 262  8525              ;    call Pinta_enemigo_3x2
 263  8525
 264  8525              ;	ld hl,$4082
 265  8525              ;    ld b,8
 266  8525              ;    call Pinta_enemigo_3x2
 267  8525
 268  8525              ;    ld hl,$40c3
 269  8525              ;    ld b,8
 270  8525              ;    call Pinta_enemigo_3x2
 271  8525
 272  8525              ;    ld hl,$4804
 273  8525              ;    ld b,16
 274  8525              ;    call Pinta_enemigo_2x2
 275  8525
 276  8525              ; -----
 277  8525
 278  8525 21 C1 50     	ld hl,$50c1
 279  8528 06 08        	ld b,8
 280  852A CD 83 8C     	call Pinta_enemigo_3x2_izquierda_2columnas
 281  852D
 282  852D AF               xor a
 283  852E D3 FE            out ($fe),a
 284  8530
 285  8530
 286  8530              ; ----------------------------------------------------------------------
 287  8530
 288  8530              ;;	ld a,1
 289  8530              ;;	out ($fe),a
 290  8530
 291  8530              ;;	ld hl,Album_de_fotos
 292  8530              ;;    ld (Stack_snapshot),hl								; Nos situamos al principio del álbum de fotos.
 293  8530              ;;    ld a,(Numero_de_entidades)
 294  8530              ;;    ld b,a
 295  8530
 296  8530              ;;2 push bc
 297  8530
 298  8530              ;;	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
 299  8530
 300  8530              ;; 	ld a,(Ctrl_0)
 301  8530              ;;	bit 4,a
 302  8530              ;;	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
 303  8530              ; ---------
 304  8530
 305  8530              ;    call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
 306  8530
 307  8530              ;	ld hl,Ctrl_0
 308  8530              ;    res 4,(hl)
 309  8530
 310  8530              ;1 call Store_Restore_entidades
 311  8530
 312  8530              ;	pop bc
 313  8530              ;	djnz 2B
 314  8530
 315  8530              ;	call Inicia_punteros_de_entidades
 316  8530              ;	call Restore_Primera_entidad
 317  8530
 318  8530              ;	ld a,0
 319  8530              ;	out ($fe),a
 320  8530
 321  8530              ;	jr $
 322  8530
 323  8530 C9           	ret
 324  8531
 325  8531              ; --------------------------------------------------------------------------------------------------------------
 326  8531              ;
 327  8531              Mov_obj
 328  8531
 329  8531 CD A2 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
 330  8534 CD 73 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´.
 331  8537
 332  8537 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla. En este caso, (Mod_puntero_datas) sitúa_
 333  8539 32 E0 84     	ld (Obj_dibujado),a 								; (Puntero_datas) en la Caja_de_BORRADO.
 334  853C
 335  853C              ; Movemos Amadeus o enemigos...
 336  853C
 337  853C 3A DF 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
 338  853F CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
 339  8541 C4 4A 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
 340  8544
 341  8544 3A DF 84     	ld a,(Ctrl_0)
 342  8547 CB 77        	bit 6,a
 343  8549 CC 86 91     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
 344  854C
 345  854C 3A DF 84     	ld a,(Ctrl_0) 										; Salimos de la rutina si no ha habido movimiento.
 346  854F CB 67        	bit 4,a
 347  8551 C8           	ret z
 348  8552              ; ---------
 349  8552
 350  8552 CD 73 85         call Prepara_var_pintado_borrado	                ; Almaceno las `VARIABLES DE PINTADO´.
 351  8555 CD 8A 85         call Repone_borrar
 352  8558 CD 2B 90     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
 353  855B CD 8D 86     	call Draw											; Preparamos las variables para borrar.
 354  855E CD A0 7F     	call Guarda_foto_registros
 355  8561
 356  8561 C9           	ret
 357  8562
 358  8562              ; --------------------------------------------------------------------------------------------------------------
 359  8562              ;
 360  8562 AF           Borra_Pinta_obj xor a
 361  8563 32 E0 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
 362  8566 CD 96 85     	call Repone_pintar
 363  8569 CD 2B 90     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
 364  856C CD 8D 86     	call Draw
 365  856F CD A0 7F     	call Guarda_foto_registros
 366  8572 C9           	ret
 367  8573
 368  8573              ; --------------------------------------------------------------------------------------------------------------
 369  8573
 370  8573 21 C2 84     Prepara_var_pintado_borrado	ld hl,Filas
 371  8576 3A E0 84     	ld a,(Obj_dibujado)
 372  8579 A7           	and a
 373  857A 28 05        	jr z,1F
 374  857C 11 DA 84     	ld de,Variables_de_pintado
 375  857F 18 03        	jr 2F
 376  8581 11 D5 84     1 ld de,Variables_de_borrado
 377  8584 01 05 00     2 ld bc,5
 378  8587 ED B0        	ldir
 379  8589 C9           	ret
 380  858A
 381  858A 21 D5 84     Repone_borrar ld hl,Variables_de_borrado
 382  858D 11 C2 84     	ld de,Filas
 383  8590 01 05 00     	ld bc,5
 384  8593 ED B0        	ldir
 385  8595 C9           	ret
 386  8596
 387  8596 21 DA 84     Repone_pintar ld hl,Variables_de_pintado
 388  8599 11 C2 84     	ld de,Filas
 389  859C 01 05 00     	ld bc,5
 390  859F ED B0        	ldir
 391  85A1 C9           	ret
 392  85A2
 393  85A2 2A F0 84     Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
 394  85A5 22 F2 84     	ld (Caja_de_BORRADO),hl
 395  85A8 C9           	ret
 396  85A9
 397  85A9              ; *************************************************************************************************************************************************************
 398  85A9              ;
 399  85A9              ; 21/10/22
 400  85A9              ;
 401  85A9              ; Sitúa el puntero (Puntero_store_entidades) en la 1ª entidad del índice.
 402  85A9              ; Sitúa el puntero (Puntero_restore_entidades) en el 1er `enemigo', (2º entidad del índice).
 403  85A9              ; Destruye HL y DE !!!!!
 404  85A9
 405  85A9 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
 406  85AC CD D2 85         call Extrae_address
 407  85AF 22 F4 84         ld (Puntero_store_entidades),hl
 408  85B2
 409  85B2 21 C2 83     	ld hl,Indice_de_entidades+2
 410  85B5 22 F8 84     	ld (Indice_restore),hl
 411  85B8 CD D2 85     	call Extrae_address
 412  85BB 22 F6 84     	ld (Puntero_restore_entidades),hl
 413  85BE
 414  85BE C9               ret
 415  85BF
 416  85BF              ; -------------------------------------------------------------------------------------------------------------
 417  85BF              ;
 418  85BF              ; 16/11/22
 419  85BF
 420  85BF 2A 00 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
 421  85C2 AF           	xor a
 422  85C3 67           	ld h,a
 423  85C4 7D           	ld a,l
 424  85C5 D6 0E        1 sub 14
 425  85C7 28 03        	jr z,2F
 426  85C9 24           	inc h
 427  85CA 18 F9        	jr 1B
 428  85CC 24           2 inc h
 429  85CD 7C           	ld a,h
 430  85CE 32 FB 84     	ld (Numero_de_malotes),a
 431  85D1 C9           	ret
 432  85D2
 433  85D2              ; *************************************************************************************************************************************************************
 434  85D2              ;
 435  85D2              ; 20/10/22
 436  85D2              ;
 437  85D2              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
 438  85D2              ;
 439  85D2              ; Destruye el puntero y DE !!!!!
 440  85D2
 441  85D2 5E           Extrae_address ld e,(hl)
 442  85D3 23           	inc hl
 443  85D4 56           	ld d,(hl)
 444  85D5 2B           	dec hl
 445  85D6 EB           	ex de,hl
 446  85D7 C9           	ret
 447  85D8
 448  85D8              ; *************************************************************************************************************************************************************
 449  85D8              ;
 450  85D8              ;	21/9/22
 451  85D8              ;
 452  85D8              ;   Destruye HL !!!!!,
 453  85D8
 454  85D8 2A C8 84     Inicia_sprite ld hl,(Indice_Sprite)
 455  85DB 22 CA 84     	ld (Puntero_DESPLZ),hl
 456  85DE CD D2 85     	call Extrae_address
 457  85E1 22 E8 84     	ld (Puntero_objeto),hl
 458  85E4
 459  85E4              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
 460  85E4
 461  85E4 21 10 83     	ld hl,Amadeus
 462  85E7 ED 4B E8 84  	ld bc,(Puntero_objeto)
 463  85EB B7 ED 42     	sub hl,bc
 464  85EE C0           	ret nz
 465  85EF
 466  85EF 21 DF 84     	ld hl,Ctrl_0
 467  85F2 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
 468  85F4
 469  85F4 C9            	ret 												; _de nuestra nave en los extremos.
 470  85F5
 471  85F5              ; *************************************************************************************************************************************************************
 472  85F5              ;
 473  85F5              ;	22/10/22
 474  85F5              ;
 475  85F5              ;	Almacena los datos del Sprite que tenemos cargado en DRAW, en su respectiva BASE DE DATOS.
 476  85F5
 477  85F5              Store_Restore_entidades
 478  85F5
 479  85F5 E5           	push hl
 480  85F6 D5           	push de
 481  85F7 C5            	push bc
 482  85F8
 483  85F8              ;	STORE !!!!!
 484  85F8
 485  85F8 21 C2 84     	ld hl,Filas
 486  85FB ED 5B F4 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
 487  85FF 01 32 00     	ld bc,50
 488  8602 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
 489  8604
 490  8604              ;	Incrementa STORE y ejecuta RESTORE !!!!!
 491  8604
 492  8604 2A F6 84     	ld hl,(Puntero_restore_entidades)
 493  8607 22 F4 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
 494  860A 11 C2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
 495  860D 01 32 00     	ld bc,50
 496  8610 ED B0        	ldir
 497  8612
 498  8612              ;	Incrementa RESTORE !!!!!
 499  8612
 500  8612 2A F8 84         ld hl,(Indice_restore)
 501  8615 23           	inc hl
 502  8616 23           	inc hl
 503  8617 22 F8 84     	ld (Indice_restore),hl
 504  861A CD D2 85         call Extrae_address
 505  861D 22 F6 84         ld (Puntero_restore_entidades),hl
 506  8620
 507  8620 C1           	pop bc
 508  8621 D1           	pop de
 509  8622 E1           	pop hl
 510  8623
 511  8623 C9           	ret
 512  8624
 513  8624              ; **************************************************************************************************
 514  8624              ;
 515  8624              ;	29/10/22
 516  8624              ;
 517  8624              ;	Cargamos los datos de la 1º entidad en el `engine'.
 518  8624
 519  8624 E5           Restore_Primera_entidad push hl
 520  8625 D5           	push de
 521  8626 C5            	push bc
 522  8627
 523  8627 2A F4 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de Amadeus.
 524  862A 11 C2 84     	ld de,Filas
 525  862D 01 32 00     	ld bc,50
 526  8630 ED B0        	ldir
 527  8632
 528  8632 C1           	pop bc
 529  8633 D1           	pop de
 530  8634 E1           	pop hl
 531  8635
 532  8635 C9           	ret
 533  8636
 534  8636              ; *************************************************************************************************************************************************************
 535  8636              ;
 536  8636              ; Teclado.
 537  8636
 538  8636 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
 539  8638 DB FE        	in a,($fe)
 540  863A E6 01        	and $01
 541  863C 28 02        	jr z,1f
 542  863E 18 F6        	jr Pulsa_ENTER
 543  8640 C9           1 ret
 544  8641
 545  8641              ; **************************************************************************************************
 546  8641              ;
 547  8641              ; Temporización.
 548  8641
 549  8641              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
 550  8641              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
 551  8641              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
 552  8641              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
 553  8641
 554  8641              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
 555  8641              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
 556  8641              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
 557  8641
 558  8641              ; A partir de $4f61 no hace falta DELAY.
 559  8641
 560  8641              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
 561  8641
 562  8641 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
 563  8644 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
 564  8645 78           	LD A,B
 565  8646 A7           	AND A
 566  8647 20 FB        	JR NZ,wait
 567  8649 C9           	RET
 568  864A
 569  864A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 570  864A              ;
 571  864A              ;	21/4/22
 572  864A
 573  864A              Movimiento_Amadeus
 574  864A
 575  864A 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
 576  864C DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
 577  864E E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
 578  8650 CC 20 8F         call z,Mov_left											;			"			"			"			"			"			"			"			"
 579  8653 3E F7        	ld a,$f7
 580  8655 DB FE        	in a,($fe)
 581  8657 E6 01        	and $01
 582  8659 C8           	ret z
 583  865A 3E F7        	ld a,$f7
 584  865C DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
 585  865E E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
 586  8660 CC 11 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
 587  8663 C9               ret
 588  8664
 589  8664              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 590  8664
 591  8664              ; Pinta indicadores de FILAS. ------------------------------------------------------
 592  8664
 593  8664 21 10 40     Pinta_FILAS ld hl,$4010
 594  8667              ;	ld b,9
 595  8667              ;2 push hl
 596  8667              ;	push bc
 597  8667 06 BF        	ld b,$bf
 598  8669 36 80        1 ld (hl),%10000000
 599  866B CD 8E 8A     	call NextScan
 600  866E 10 F9        	djnz 1B
 601  8670              ;	pop bc
 602  8670              ;	pop hl
 603  8670              ;	inc l
 604  8670              ;	djnz 2B
 605  8670
 606  8670 06 03        	ld b,3
 607  8672 21 00 47         ld hl,$4700
 608  8675 CD 7B 86     3 call Bucle_1
 609  8678 10 FB            djnz 3B
 610  867A C9               ret
 611  867B
 612  867B C5           Bucle_1 push bc
 613  867C E5                   push hl
 614  867D D1                   pop de
 615  867E 13                   inc de
 616  867F 01 FF 00             ld bc,255
 617  8682 36 FF                ld (hl),255
 618  8684 ED B0                ldir
 619  8686 23                   inc hl
 620  8687 3E 07                ld a,7
 621  8689 84                   add a,h
 622  868A 67                   ld h,a
 623  868B C1                   pop bc
 624  868C C9                   ret
 625  868D
 626  868D              ; ---------------------------------------------------------------
 627  868D
 628  868D              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
   1+ 868D              ; ******************************************************************************************************************************************************************************************
   2+ 868D              ;
   3+ 868D              ; 17/08/22
   4+ 868D              ;
   5+ 868D              ; DRAW. ************************************************************************************************************************************************************************************
   6+ 868D              ;
   7+ 868D              ; Rutina para pintar objetos en pantalla.
   8+ 868D              ;
   9+ 868D              ; Está diseñada para PINTAR un objeto de ( X Filas x Y Columnas) en pantalla, ej.: (2x2), (3x3), (5x5), etc.
  10+ 868D              ; El tamaño del objeto a imprimir lo definen las variables de programa: (Filas) y (Columns). Ambas son variables de 1 byte y representan caracteres completos de pantalla,_
  11+ 868D              ; _ ejemplo.: 2 (filas de alto) x 4 (columnas de ancho).
  12+ 868D              ;
  13+ 868D              ; La rutina PINTA pinta el objeto o sprite, en la dirección de mem. de pantalla que contiene la variable de programa (Posicion_actual).
  14+ 868D              ; Esta dirección indica, donde se va a imprimir `la 1ª línea del 1er char´ que compone el objeto.
  15+ 868D              ; La rutina divide la pantalla en cuatro cuadrantes e imprime de manera distinta en función del cuadrante de pantalla en el que nos encontremos.
  16+ 868D              ; Esto se hace así con la finalidad de poder "esconder" objetos en cualquier borde de la pantalla y tener un control total de la misma.
  17+ 868D              ;
  18+ 868D              ; El `paso´ de un cuadrante a otro de la pantalla es detectado automáticamente por la rutina, modificando el puntero (Posición_actual).
  19+ 868D              ; La dirección de mem. donde se encuentran los gráficos del objeto a imprimir se encuentra almacenada en la variable de programa, (Puntero_objeto).
  20+ 868D              ;
  21+ 868D              ;
  22+ 868D              ;		1. Función XOR cuando queremos que el objeto `pase´ por `delante´ del escenario. En ese caso, la variable de programa (Obj_atras)="0".
  23+ 868D              ;		2. Función OR cuando queremos que el objeto `pase´ por `detrás´ del fondo. En ese caso, la variable de programa (Obj_atras)="1".
  24+ 868D              ;
  25+ 868D              ;
  26+ 868D              ; INPUT:  AF --
  27+ 868D              ;		  DE --
  28+ 868D              ; 		  IX --
  29+ 868D              ; 		  IY --
  30+ 868D              ;		  HL apunta a la dirección de memoria de pantalla donde se va a pintar el objeto.
  31+ 868D              ; 		  BC contiene: Filas/Columnas del objeto. Ejempl.: 5x5, 3x3, 2x3, 4x2, etc.
  32+ 868D              ; 		  El registro E="0".
  33+ 868D
  34+ 868D              ; OUTPUT: DESTRUYE AF,BC,DE y HL.
  35+ 868D              ;
  36+ 868D              ;
  37+ 868D CD AD 89     Draw call Prepara_draw
  38+ 8690
  39+ 8690 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  40+ 8691 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
  41+ 8692 28 05        	jr z,2F
  42+ 8694
  43+ 8694 3A CE 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
  44+ 8697 18 0C        	jr 1F
  45+ 8699
  46+ 8699 2A CC 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
  47+ 869C 22 C4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
  48+ 869F              ;		 											; _ cuadrante a (Posicion_actual)).
  49+ 869F CD 2B 88     	call Inicializacion
  50+ 86A2 CD 08 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
  51+ 86A5
  52+ 86A5 F5           1 push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
  53+ 86A6 08           	ex af,af
  54+ 86A7 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
  55+ 86A8
  56+ 86A8              ; En este punto, el objeto existe. (Posicion_actual)<>"0" y el objeto tiene asignado un cuadrante. En función de la posición que ocupa en pantalla vamos a calcular los_
  57+ 86A8              ; _ límites horizontal y vertical.
  58+ 86A8
  59+ 86A8 CD B9 86         call Comprueba_limite_horizontal
  60+ 86AB CD 4C 87     	call Comprueba_limite_vertical
  61+ 86AE
  62+ 86AE C5           3 push bc 											; Guardo el nº de filas y columnas del objeto en BC´.
  63+ 86AF D9           	exx
  64+ 86B0 C1           	pop bc
  65+ 86B1 D9           	exx
  66+ 86B2
  67+ 86B2 CD 89 89     	call calcolumn
  68+ 86B5 CD B9 89         call Converter
  69+ 86B8 C9           	ret
  70+ 86B9
  71+ 86B9              ; *******************************************************************************************************************************************************************************************
  72+ 86B9              ;	23/8/22
  73+ 86B9              ;
  74+ 86B9              ; 	Comprueba_limite_horizontal.
  75+ 86B9              ;
  76+ 86B9
  77+ 86B9 3A E0 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
  78+ 86BC A7           	and a
  79+ 86BD C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
  80+ 86BE
  81+ 86BE 3A DF 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
  82+ 86C1 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
  83+ 86C3 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
  84+ 86C5 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
  85+ 86C7 32 DF 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
  86+ 86CA 18 09            jr 6F
  87+ 86CC CB 5F        1 bit 3,a
  88+ 86CE 28 0D            jr z,2F
  89+ 86D0 E6 F7            and $f7
  90+ 86D2 32 DF 84         ld (Ctrl_0),a
  91+ 86D5 CD 2B 88     6 call Inicializacion
  92+ 86D8 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
  93+ 86D9 08           	ex af,af
  94+ 86DA F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
  95+ 86DB 18 56            jr 5F
  96+ 86DD E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
  97+ 86DE
  98+ 86DE              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  99+ 86DE              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 100+ 86DE
 101+ 86DE EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 102+ 86DF 2A ED 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 103+ 86E2 CD 6F 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 104+ 86E5 67           	ld h,a
 105+ 86E6 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 106+ 86E7 CD 6F 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 107+ 86EA 67           	ld h,a
 108+ 86EB A7           	and a
 109+ 86EC ED 52        	sbc hl,de 										; Posicíon - Límite.
 110+ 86EE
 111+ 86EE 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 112+ 86EF FE 02        	cp 2
 113+ 86F1 38 1C        	jr c,3F
 114+ 86F3 28 1A        	jr z,3F
 115+ 86F5
 116+ 86F5 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 117+ 86F6 28 21            jr z,7F
 118+ 86F8 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 119+ 86FA              ;	ld e,0
 120+ 86FA E1           	pop hl
 121+ 86FB
 122+ 86FB              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 123+ 86FB              ; _para indicar con E="2" en caso necesario.
 124+ 86FB
 125+ 86FB E5               push hl
 126+ 86FC C5               push bc
 127+ 86FD
 128+ 86FD CD 6F 8D     	call calcula_tercio
 129+ 8700 FE 01        	cp 1
 130+ 8702 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 131+ 8704
 132+ 8704 CD 34 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 133+ 8707 28 26            jr z,9F
 134+ 8709 38 24            jr c,9F
 135+ 870B 1E 00        11 ld e,0
 136+ 870D 18 22            jr 8F
 137+ 870F
 138+ 870F 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 139+ 8710 28 07        	jr z, 7F
 140+ 8712 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
 141+ 8714 1E 00         	ld e,0
 142+ 8716 E1           	pop hl
 143+ 8717 18 04        	jr 4F
 144+ 8719 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
 145+ 871B 18 15            jr 10F
 146+ 871D
 147+ 871D              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 148+ 871D              ; _para indicar con E="2" en caso necesario.
 149+ 871D
 150+ 871D E5           4 push hl
 151+ 871E C5               push bc
 152+ 871F
 153+ 871F CD 6F 8D     	call calcula_tercio
 154+ 8722 FE 01        	cp 1
 155+ 8724 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 156+ 8726
 157+ 8726 CD 34 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
 158+ 8729 28 04            jr z,9F
 159+ 872B 30 02            jr nc,9F
 160+ 872D 18 02        	jr 8F
 161+ 872F 1E 02        9 ld e,2
 162+ 8731 C1           8 pop bc
 163+ 8732 E1           10 pop hl
 164+ 8733 C9           5 ret
 165+ 8734
 166+ 8734              ; --------------------
 167+ 8734              ;
 168+ 8734              ; 25/08/22
 169+ 8734
 170+ 8734 CD 6F 8D     Comprueba_centro call calcula_tercio
 171+ 8737 67               ld h,a
 172+ 8738 08           	ex af,af
 173+ 8739 FE 02        	cp 2
 174+ 873B 38 07        	jr c,1F
 175+ 873D 28 05        	jr z,1F
 176+ 873F 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
 177+ 8742 18 03        	jr 2F
 178+ 8744 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
 179+ 8747 08           2 ex af,af
 180+ 8748 A7               and a
 181+ 8749 ED 42            sbc hl,bc
 182+ 874B C9               ret
 183+ 874C
 184+ 874C              ; *********************************************************************************************************************************************************************************************
 185+ 874C              ;
 186+ 874C              ;   16/8/22
 187+ 874C              ;
 188+ 874C              ;	Comprueba_limite_vertical
 189+ 874C              ;
 190+ 874C              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
 191+ 874C              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
 192+ 874C              ;
 193+ 874C
 194+ 874C 3A E0 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
 195+ 874F A7           	and a
 196+ 8750 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 197+ 8751
 198+ 8751 7D           	ld a,l
 199+ 8752 E6 1F        	and $1F
 200+ 8754 57           	ld d,a
 201+ 8755 3A EF 84     	ld a,(Limite_vertical)
 202+ 8758 BA           	cp d 											; Límite - Posición.
 203+ 8759
 204+ 8759 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
 205+ 875A CB 47        	bit 0,a
 206+ 875C 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
 207+ 875E
 208+ 875E              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
 209+ 875E
 210+ 875E 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
 211+ 875F 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
 212+ 8761
 213+ 8761               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
 214+ 8761              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
 215+ 8761
 216+ 8761 3A CF 84         ld a,(Coordenada_X)
 217+ 8764 16 0F            ld d,Centro_izquierda
 218+ 8766 A7               and a
 219+ 8767 92               sub d 											 ; Posición - Centro_izquierda.
 220+ 8768
 221+ 8768 28 21            jr z,3F
 222+ 876A 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
 223+ 876C              ;                                                    ; _salimos sin modificar nada.
 224+ 876C 18 0E            jr 2F
 225+ 876E
 226+ 876E 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
 227+ 876F 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
 228+ 8771
 229+ 8771              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
 230+ 8771              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
 231+ 8771
 232+ 8771 3A CF 84         ld a,(Coordenada_X)
 233+ 8774 16 10            ld d,Centro_derecha
 234+ 8776 A7               and a
 235+ 8777 92               sub d
 236+ 8778
 237+ 8778 28 11            jr z,3F
 238+ 877A 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
 239+ 877C              ;                                                    ; _salimos sin modificar nada.
 240+ 877C CB 43        2 bit 0,e
 241+ 877E 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
 242+ 8780 C5           	push bc
 243+ 8781 CD 1A 88         call Modificaccionne
 244+ 8784 C1           	pop bc
 245+ 8785 CD 2B 88         call Inicializacion
 246+ 8788 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 247+ 8789 08           	ex af,af
 248+ 878A F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
 249+ 878B C9           3 ret 				 								 ; Salimos de la rutina.
 250+ 878C
 251+ 878C              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
 252+ 878C
 253+ 878C C5           4 push bc
 254+ 878D 01 C3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
 255+ 8790 0A           	ld a,(bc)
 256+ 8791 3D           	dec a
 257+ 8792 47           	ld b,a 											 ; Columnas-1 en B.
 258+ 8793 7D           	ld a,l
 259+ 8794 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
 260+ 8795 CB 47        	bit 0,a
 261+ 8797 28 03        	jr z,5F
 262+ 8799 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
 263+ 879A 18 2E        	jr 7F
 264+ 879C
 265+ 879C              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
 266+ 879C
 267+ 879C 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
 268+ 879D F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
 269+ 879E 3A DF 84     	ld a,(Ctrl_0)
 270+ 87A1 CB 4F        	bit 1,a
 271+ 87A3 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
 272+ 87A5 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
 273+ 87A6
 274+ 87A6              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
 275+ 87A6
 276+ 87A6 1C               inc e
 277+ 87A7 1D               dec e
 278+ 87A8 20 07            jr nz,12F
 279+ 87AA 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
 280+ 87AB 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
 281+ 87AC 22 C4 84     	ld (Posicion_actual),hl
 282+ 87AF 18 44        13 jr 9F
 283+ 87B1
 284+ 87B1 CB 43        12 bit 0,e
 285+ 87B3 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
 286+ 87B5              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
 287+ 87B5 C1           	pop bc
 288+ 87B6 18 D3        	jr 3B
 289+ 87B8
 290+ 87B8 80           14 add b
 291+ 87B9 6F               ld l,a
 292+ 87BA 22 C4 84     	ld (Posicion_actual),hl
 293+ 87BD CD 1A 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
 294+ 87C0 18 33            jr 9F 											 ; _inicializamos y salimos.
 295+ 87C2
 296+ 87C2 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
 297+ 87C4 32 DF 84         ld (Ctrl_0),a
 298+ 87C7 F1           	pop af
 299+ 87C8 18 2B        	jr 9F
 300+ 87CA
 301+ 87CA              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
 302+ 87CA
 303+ 87CA F5           7 push af
 304+ 87CB 3A DF 84     	ld a,(Ctrl_0)
 305+ 87CE CB 47        	bit 0,a
 306+ 87D0 20 1D        	jr nz,8F
 307+ 87D2 F1           	pop af
 308+ 87D3
 309+ 87D3              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
 310+ 87D3
 311+ 87D3 1C           	inc e
 312+ 87D4 1D               dec e
 313+ 87D5 20 07            jr nz,10F
 314+ 87D7
 315+ 87D7 90           	sub b
 316+ 87D8 6F               ld l,a
 317+ 87D9 22 C4 84     	ld (Posicion_actual),hl
 318+ 87DC 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
 319+ 87DE              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
 320+ 87DE CB 43        10 bit 0,e
 321+ 87E0 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
 322+ 87E2              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
 323+ 87E2 C1           	pop bc
 324+ 87E3 18 A6        	jr 3B
 325+ 87E5
 326+ 87E5 90           16 sub b
 327+ 87E6 6F               ld l,a
 328+ 87E7 22 C4 84     	ld (Posicion_actual),hl
 329+ 87EA CD 1A 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
 330+ 87ED 18 06            jr 9F
 331+ 87EF
 332+ 87EF E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
 333+ 87F1 32 DF 84         ld (Ctrl_0),a
 334+ 87F4 F1           	pop af
 335+ 87F5
 336+ 87F5 C1           9 pop bc
 337+ 87F6              ;	ld e,0
 338+ 87F6 CD 2B 88         call Inicializacion
 339+ 87F9 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 340+ 87FA 08           	ex af,af
 341+ 87FB F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 342+ 87FC 18 8D            jr 3B
 343+ 87FE
 344+ 87FE              ; --------------------
 345+ 87FE
 346+ 87FE CD E6 90     Modifica_Pos_actual call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
 347+ 8801 05               dec B                                           ; Scanlines-1 en B.
 348+ 8802 CD A0 8A     1 call PreviousScan
 349+ 8805 10 FB            djnz 1B
 350+ 8807 22 C4 84     	ld (Posicion_actual),hl
 351+ 880A AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
 352+ 880B C9           	ret
 353+ 880C
 354+ 880C              ; --------------------
 355+ 880C
 356+ 880C CD E6 90     Modifica_Pos_actual2 call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
 357+ 880F 05               dec B                                           ; Scanlines-1 en B.
 358+ 8810 CD 8E 8A     1 call NextScan
 359+ 8813 10 FB            djnz 1B
 360+ 8815 22 C4 84     	ld (Posicion_actual),hl
 361+ 8818 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
 362+ 8819 C9           	ret
 363+ 881A
 364+ 881A              ; --------------------
 365+ 881A
 366+ 881A              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
 367+ 881A              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
 368+ 881A
 369+ 881A 08           Modificaccionne ex af,af
 370+ 881B FE 02            cp 2
 371+ 881D F5               push af                                         ; Guardo el resultado de la comparación.
 372+ 881E 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
 373+ 881F F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
 374+ 8820 CC FE 87         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
 375+ 8823 DC FE 87         call c,Modifica_Pos_actual
 376+ 8826 C8           	ret z
 377+ 8827 CD 0C 88         call Modifica_Pos_actual2
 378+ 882A C9               ret
 379+ 882B
 380+ 882B              ; *************************************************************************************************************************************************************************************************
 381+ 882B              ;
 382+ 882B              ;	13/8/22
 383+ 882B              ;
 384+ 882B              ;	Inicializacion
 385+ 882B              ;
 386+ 882B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
 387+ 882B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
 388+ 882B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
 389+ 882B              ;
 390+ 882B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
 391+ 882B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
 392+ 882B              ;	_ desaparece/aparece.
 393+ 882B
 394+ 882B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
 395+ 882B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
 396+ 882B              ;
 397+ 882B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
 398+ 882B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
 399+ 882B              ; 		   [E] ="0"
 400+ 882B
 401+ 882B              ; 	OUTPUT: DESTRUYE [AF] y [D].
 402+ 882B
 403+ 882B
 404+ 882B CD 6F 8D     Inicializacion call calcula_tercio									; Entrega "0", "1" o "2" en A en función del tercio donde nos encontremos.
 405+ 882E 28 48        	jr z,primit 													; 1er tercio. Estamos en la primera mitad de pantalla, (cuadrantes 1 o 2).
 406+ 8830 E6 02        	and 2
 407+ 8832 20 07        	jr nz,segmit
 408+ 8834 7D           	ld a,l 															; Cuando estamos en el segundo tercio: Las 4 primeras filas pertenecen a la 1ª mitad y las 4 últimas del tercio, a la 2ª.
 409+ 8835 FE 7F        	cp $7f
 410+ 8837 38 3F        	jr c,primit
 411+ 8839 28 3D        	jr z,primit
 412+ 883B CD 83 89     segmit call column  												; 3er tercio, Estamos en la segunda mitad de pantalla, (cuadrantes 3 o 4).
 413+ 883E 38 14        	jr c,tercuad
 414+ 8840 CD B7 88     cuarcuad call Calcula_dbs_totales
 415+ 8843 CD EC 88     	call puntero_cuarcuad
 416+ 8846 CD 45 89     	call Limite3
 417+ 8849 3E 04        	ld a,4
 418+ 884B 32 CE 84     	ld (Cuad_objeto),a
 419+ 884E 08           	ex af,af
 420+ 884F CD 69 89     	call Limite2
 421+ 8852 18 5F        	jr 1F
 422+ 8854 CD B7 88     tercuad	call Calcula_dbs_totales
 423+ 8857 CD EC 88     	call puntero_cuarcuad
 424+ 885A E5           	push hl 														; Voy a utilizar las dos parejas de registros para operar. POP antes de salir de la rutina.
 425+ 885B C5           	push bc
 426+ 885C 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 427+ 885E 0D           	dec c
 428+ 885F 2A EA 84     	ld hl,(Puntero_datas)
 429+ 8862 A7           	and a
 430+ 8863 ED 4A        	adc hl,bc
 431+ 8865 22 EA 84     	ld (Puntero_datas),hl
 432+ 8868 C1           	pop bc
 433+ 8869 E1           	pop hl
 434+ 886A CD 45 89     	call Limite3
 435+ 886D 3E 03        	ld a,3
 436+ 886F 32 CE 84     	ld (Cuad_objeto),a
 437+ 8872 08           	ex af,af
 438+ 8873 CD 69 89     	call Limite2
 439+ 8876 18 3B        	jr 1F
 440+ 8878 CD 83 89     primit call column 													; Tras el regreso de column, sabremos, (en función del FLAG C), si estamos en un cuadrante_
 441+ 887B 38 24        	jr c, primcuad 													; _ par o impar. ¨C¨="1" cuadrante impar.
 442+ 887D CD B7 88     segcuad call Calcula_dbs_totales
 443+ 8880 CD D6 88     	call puntero_primcuad
 444+ 8883 E5           	push hl 														; Voy a utilizar las dos parejas de registros para operar. POP antes de salir de la rutina.
 445+ 8884 C5           	push bc
 446+ 8885 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 447+ 8887 0D           	dec c
 448+ 8888 2A EA 84     	ld hl,(Puntero_datas)
 449+ 888B A7           	and a
 450+ 888C ED 42        	sbc hl,bc
 451+ 888E 22 EA 84     	ld (Puntero_datas),hl
 452+ 8891 C1           	pop bc
 453+ 8892 E1           	pop hl
 454+ 8893 CD 21 89     	call Limite
 455+ 8896 3E 02        	ld a,2
 456+ 8898 32 CE 84     	ld (Cuad_objeto),a
 457+ 889B 08           	ex af,af
 458+ 889C CD 69 89     	call Limite2
 459+ 889F 18 12        	jr 1F
 460+ 88A1 CD B7 88     primcuad call Calcula_dbs_totales 									; Nos encontramos en el 1er cuadrante de la pantalla.
 461+ 88A4 CD D6 88     	call puntero_primcuad
 462+ 88A7 CD 21 89     	call Limite
 463+ 88AA 3E 01        	ld a,1
 464+ 88AC 32 CE 84     	ld (Cuad_objeto),a
 465+ 88AF 08           	ex af,af
 466+ 88B0 CD 69 89     	call Limite2
 467+ 88B3 CD 01 91     1 call Genera_coordenadas											; El objeto está Inicializado y "ocupa una coordenada en el mundo".
 468+ 88B6 C9           	ret
 469+ 88B7
 470+ 88B7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 471+ 88B7              ;
 472+ 88B7              ;	16/7/22
 473+ 88B7              ;
 474+ 88B7              ;	Calcula_dbs_totales .......... (Subrutina de [Inicializacion]).
 475+ 88B7              ;
 476+ 88B7              ;	En función del valor de BC, (Filas/Columns) de un objeto, la rutina entrga dos cantidades:
 477+ 88B7              ;
 478+ 88B7              ;	INPUTS:
 479+ 88B7              ;
 480+ 88B7              ;	(Filas)/(Columns) de una entidad en BC.
 481+ 88B7              ;
 482+ 88B7              ;
 483+ 88B7              ;	OUTPUTS:
 484+ 88B7              ;
 485+ 88B7              ;	[(Filas)*(Columns)]*8 en BC´.
 486+ 88B7              ;	[(Filas)*(Columns)] en DE´.
 487+ 88B7              ;
 488+ 88B7              ;	DESTRUYE:
 489+ 88B7              ;
 490+ 88B7              ;	AF,BC´ y DE´
 491+ 88B7
 492+ 88B7
 493+ 88B7 C5           Calcula_dbs_totales push bc		   									; Guardo Filas/Columnas en la pila.
 494+ 88B8 79           	ld a,c															; Compruebo si (Columns) es "1", en ese caso,_
 495+ 88B9 3D           	dec a 															; _cargo el nº de filas en A y multiplico *8. (JR 3F).
 496+ 88BA 20 03        	jr nz,2F
 497+ 88BC 78           	ld a,b
 498+ 88BD 18 06        	jr 3F
 499+ 88BF 0D           2 dec c 															; (Columns-1) en C.
 500+ 88C0 78           	ld a,b
 501+ 88C1 80           1 add b 															; El loop dl, multiplica Filas*Columnas.
 502+ 88C2 0D           	dec c
 503+ 88C3 20 FC        	jr nz,1B
 504+ 88C5 F5           3 push af 															; Guardo Filas * Columnas en la pila.
 505+ 88C6 CB 27        	sla a
 506+ 88C8 CB 27        	sla a
 507+ 88CA CB 27        	sla a 															; Ahora tengo en A: (Filas*Columnas)*8
 508+ 88CC D9           	exx
 509+ 88CD 4F           	ld c,a 															; Finalmente:
 510+ 88CE F1           	pop af
 511+ 88CF 5F           	ld e,a 															; (Filas*Columnas)*8 en BC.
 512+ 88D0 AF           	xor a
 513+ 88D1 47           	ld b,a 															; Filas*Columnas en DE.
 514+ 88D2 50           	ld d,b
 515+ 88D3 D9           	exx
 516+ 88D4 C1           	pop bc
 517+ 88D5 C9           	ret
 518+ 88D6
 519+ 88D6              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 520+ 88D6              ;
 521+ 88D6              ;	17/7/22
 522+ 88D6              ;
 523+ 88D6              ;	Puntero_primcuad .......... (Subrutina de [Inicializacion]).
 524+ 88D6              ;
 525+ 88D6              ;	Estamos en el 1er cuadrante de pantalla. La rutina fija (Puntero_datas) al final de los .db de .....
 526+ 88D6              ;
 527+ 88D6              ;		(Puntero_objeto) cuando el objeto no está desplazado. (CTRL_DESPLZ)="0".
 528+ 88D6              ;		Caja_de_DESPLZ cuando el objeto está desplazado y estamos pintando, (Obj_dibujado)="0".
 529+ 88D6              ;		Caja_de_BORRADO cuando el objeto está desplazado y estamos borrando, (Obj_dibujado)="1".
 530+ 88D6
 531+ 88D6 E5           puntero_primcuad push hl
 532+ 88D7 D9           	exx
 533+ 88D8 CD F4 88     	call Fija_punteros
 534+ 88DB 2A EA 84     	ld hl,(Puntero_datas)
 535+ 88DE CD E7 88     	call suma
 536+ 88E1 22 EA 84     	ld (Puntero_datas),hl
 537+ 88E4 D9           	exx
 538+ 88E5 E1           	pop hl
 539+ 88E6 C9           	ret
 540+ 88E7 A7           suma and a
 541+ 88E8 ED 4A        	adc hl,bc 														; [(Puntero_objeto)+(Filas*Columnas)*8]-1 en HL.
 542+ 88EA 2B           	dec hl
 543+ 88EB C9           	ret
 544+ 88EC
 545+ 88EC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 546+ 88EC              ;
 547+ 88EC              ;	Puntero_cuarcuad .......... (Subrutina de [Inicializacion]).
 548+ 88EC              ;
 549+ 88EC              ;	Asigna una dirección a cada una de las tres variables que podemos necesitar a la hora de `pintar´ el Sprite en pantalla cuando nos encontramos en el 4º cuadrante de pantalla.
 550+ 88EC              ; 	Antes de llamar a esta rutina hay que ejecutar la rutina: [Calcula_dbs_totales].
 551+ 88EC
 552+ 88EC E5           puntero_cuarcuad push hl
 553+ 88ED D9           	exx
 554+ 88EE CD F4 88     	call Fija_punteros
 555+ 88F1 D9            	exx
 556+ 88F2 E1            	pop hl
 557+ 88F3 C9            	ret
 558+ 88F4
 559+ 88F4              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 560+ 88F4              ;
 561+ 88F4              ;	14/9/22
 562+ 88F4              ;
 563+ 88F4              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
 564+ 88F4              ;
 565+ 88F4              ;	La rutina fija el puntero de dibujado/borrado.
 566+ 88F4              ;
 567+ 88F4              ;	Función:
 568+ 88F4              ;
 569+ 88F4              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
 570+ 88F4
 571+ 88F4 C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
 572+ 88F5 D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
 573+ 88F6
 574+ 88F6 3A E0 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
 575+ 88F9 A7           	and a
 576+ 88FA 28 0E        	jr z,1F
 577+ 88FC
 578+ 88FC 3A C6 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
 579+ 88FF A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
 580+ 8900 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
 581+ 8902 2A F2 84     	ld hl,(Caja_de_BORRADO) 											; _(Puntero_datas)=Caja_de_BORRADO.
 582+ 8905 22 EA 84     	ld (Puntero_datas),hl
 583+ 8908 18 14        	jr 3F
 584+ 890A
 585+ 890A 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
 586+ 890D A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
 587+ 890E 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
 588+ 8910 2A F0 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
 589+ 8913 22 EA 84     	ld (Puntero_datas),hl
 590+ 8916 18 06        	jr 3F
 591+ 8918
 592+ 8918 2A E8 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
 593+ 891B 22 EA 84     	ld (Puntero_datas),hl	 										; Fijamos el puntero de atributos y salimos.
 594+ 891E
 595+ 891E D1           3 pop de
 596+ 891F C1           	pop bc
 597+ 8920 C9           	ret
 598+ 8921
 599+ 8921              ; *********************************************************************************************************************************************************************************************
 600+ 8921              ; 14/8/22
 601+ 8921
 602+ 8921              ; Limite y Limite3.
 603+ 8921              ;
 604+ 8921              ;
 605+ 8921              ; Calculan, (a partir del centro de la pantalla y del nº de filas que tiene el Sprite), el (Limite_horizontal).
 606+ 8921              ;
 607+ 8921              ; Limite se aplica en el 1er y 2º cuadrante.
 608+ 8921              ; Limite3 se aplica en el 3er y 4º cuadrante.
 609+ 8921              ;
 610+ 8921              ; NOTA: No destruyen ningún registro!!!.
 611+ 8921
 612+ 8921 E5           Limite push hl 														; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
 613+ 8922 C5           	push bc
 614+ 8923 21 A0 48     	ld hl,$48a0														; Esta es la línea que fijamos como referencia para calcular (Limite_horizontal) cuando nos_
 615+ 8926 01 20 00     	ld bc,32 														; _encontramos en el 1er o 2º tercio de pantalla.
 616+ 8929 3A C2 84      	ld a,(Filas)
 617+ 892C 3D           	dec a
 618+ 892D 57           	ld d,a 		 													; (Filas)-1 en D.
 619+ 892E A7           	and a 															; Carry off.
 620+ 892F ED 4A        1 adc hl,bc 														; El límite se sitúa en: ($4880)+[$20*(Filas-1)]
 621+ 8931 15           	dec d 															; Si H es igual a $49 es que ha habido cambio de tercio. En ese caso, situamos H en $57.
 622+ 8932 20 FB        	jr nz,1B 														; Si no hay cambio de tercio, H=$4f.
 623+ 8934 7C           	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
 624+ 8935 E6 01        	and 1 															; Recuperamos HL y BC y salimos.
 625+ 8937 28 04        	jr z,2F
 626+ 8939 26 57        	ld h,$57
 627+ 893B 18 02        	jr 3F
 628+ 893D 26 4F        2 ld h,$4f
 629+ 893F 22 ED 84     3 ld (Limite_horizontal),hl
 630+ 8942 C1           	pop bc
 631+ 8943 E1           	pop hl
 632+ 8944 C9           	ret
 633+ 8945
 634+ 8945 E5           Limite3 push HL		 	 											; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
 635+ 8946 C5           	push bc
 636+ 8947 21 40 48     	ld hl,$4840														; Esta es la línea que fijamos como referencia para calcular (Limite_horizontal) cuando nos_
 637+ 894A 01 20 00     	ld bc,32 														; _encontramos en el 3er o 4º tercio de pantalla.
 638+ 894D 3A C2 84      	ld a,(Filas)
 639+ 8950 3D           	dec a
 640+ 8951 57           	ld d,a 															; (Filas-1) en D.
 641+ 8952 A7           	and a 															; Carry off.
 642+ 8953 ED 42        1 sbc hl,bc 														; El límite se sitúa en: ($4840)-[$20*(Filas-1)]
 643+ 8955 15           	dec d 															; Si H es igual a $4e es que ha habido cambio de tercio. En ese caso, situamos H en $40.
 644+ 8956 20 FB        	jr nz,1B														; Si no hay cambio de tercio, H=$48.
 645+ 8958 7C           	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
 646+ 8959 E6 01        	and 1 															; Recuperamos HL y BC y salimos.
 647+ 895B 20 04        	jr nz,2F
 648+ 895D 26 48        	ld h,$48
 649+ 895F 18 02        	jr 3F
 650+ 8961 26 40        2 ld h,$40
 651+ 8963 22 ED 84     3 ld (Limite_horizontal),hl
 652+ 8966 C1           	pop bc
 653+ 8967 E1           	pop hl
 654+ 8968 C9           	ret
 655+ 8969
 656+ 8969              ; *********************************************************************************************************************************************************************************************
 657+ 8969              ; 13/8/22
 658+ 8969              ;
 659+ 8969              ; Limite2
 660+ 8969              ;
 661+ 8969              ; Calcula, (a partir del centro de la pantalla y del nº de columnas que tiene el Sprite), el (Limite_vertical).
 662+ 8969              ;
 663+ 8969              ; Esta subrutina se aplica en todos los cuadrantes.
 664+ 8969              ;
 665+ 8969              ; NOTA: No destruye ningún registro!!!.
 666+ 8969
 667+ 8969 E5           Limite2 push hl 													; Guardamos la posición del objeto en pantalla, (HL).
 668+ 896A 21 C3 84     	ld hl,Columns
 669+ 896D 56            	ld d,(hl)
 670+ 896E 08            	ex af,af
 671+ 896F CB 47         	bit 0,a
 672+ 8971 28 06         	jr z,1F
 673+ 8973 08            	ex af,af
 674+ 8974 3E 10         	ld a,16 														; $10 + (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 1º y 3º).
 675+ 8976 82            	add d 															; $0f - (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 2º y 4º).
 676+ 8977 18 04         	jr 2F
 677+ 8979 08           1 ex af,af
 678+ 897A 3E 0F        	ld a,15
 679+ 897C 92           	sub d
 680+ 897D 32 EF 84     2 ld (Limite_vertical),a
 681+ 8980 E1            	pop hl
 682+ 8981 08            	ex af,af 														; Entrega [Cuad_cuadrante] en A.
 683+ 8982 C9            	ret
 684+ 8983
 685+ 8983              ; ***********************************************************************************************************************************************************************
 686+ 8983              ;
 687+ 8983              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
 688+ 8983              ;
 689+ 8983              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
 690+ 8983              ;
 691+ 8983              ; ***********************************************************************************************************************************************************************
 692+ 8983
 693+ 8983 7D           column ld a,l
 694+ 8984 E6 1F        	and $1f
 695+ 8986 FE 10         	cp $10
 696+ 8988 C9            	ret
 697+ 8989
 698+ 8989              ; ********************************************************************** calcolumn / calcolumn2 *************************************************************************
 699+ 8989              ;
 700+ 8989              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
 701+ 8989
 702+ 8989 D9           calcolumn exx                                        	; Calcula (Columnas) en cuadrantes 1º y 3º.
 703+ 898A C5           	push bc
 704+ 898B D9           	exx
 705+ 898C D1           	pop de 												; Situamos en D el contenido de (Filas_objeto) y en E el nº de columnas.
 706+ 898D 7D           	ld a,l
 707+ 898E E6 1F        	and $1f  											; Posición absoluta de L, (0 a 31).
 708+ 8990 08           	ex af,af 											; Consultamos A´, (Cuad_objeto). Si estamos en un cuadrante impar, (1º o 3º): Posición abs. de (L+1) - Columnas que tiene el objeto.
 709+ 8991 CB 47        	bit 0,a 											; Si estamos en un cuadrante par: ($20 - Posición abs. de (L+1)) - Columnas que tiene el objeto.
 710+ 8993 20 07        	jr nz,1F
 711+ 8995 08           	ex af,af
 712+ 8996 47           	ld b,a
 713+ 8997 3E 20        	ld a,32
 714+ 8999 90           	sub b
 715+ 899A 18 02        	jr 2F
 716+ 899C 08           1 ex af,af
 717+ 899D 3C           	inc a
 718+ 899E 47           2 ld b,a   												; Columnas que tenemos disponibles.
 719+ 899F 93           	sub e 												; Restamos el nº de columnas que tiene el objeto.
 720+ 89A0 38 06        	jr c,3F 											; Si el resultado es "0" o no existe acarreo, la variable (Columnas) tendrá el mismo valor que las columnas que tiene el Sprite en su _
 721+ 89A2 7B           	ld a,e 												; _ base de datos.
 722+ 89A3 32 EC 84     	ld (Columnas),a 									; Si se produce acarreo, (Columnas) será igual a el resultado de restar: Posición abs. de (L+1) - Columnas que tiene el objeto.
 723+ 89A6 18 04        	jr 4F 												; Este valor siempre será inferior a las columnas que tiene el Sprite en su base de datos.
 724+ 89A8 78           3 ld a,b
 725+ 89A9 32 EC 84     	ld (Columnas),a
 726+ 89AC C9           4 ret
 727+ 89AD
 728+ 89AD              ; ******************************************************************************************************************************************************************************************
 729+ 89AD              ;
 730+ 89AD              ;	Prepara_draw
 731+ 89AD              ;
 732+ 89AD              ;	Es una rutina de carga.
 733+ 89AD              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
 734+ 89AD              ;
 735+ 89AD              ;	FUNCIONAMIENTO:
 736+ 89AD              ;
 737+ 89AD              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
 738+ 89AD              ;	- LD (Posicion_actual) del objeto en [HL].
 739+ 89AD              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
 740+ 89AD              ;
 741+ 89AD              ;	DESTRUYE:
 742+ 89AD              ;
 743+ 89AD              ;	Logicamente, BC,HL y E quedan destruidos.
 744+ 89AD
 745+ 89AD 21 C2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
 746+ 89B0 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
 747+ 89B1 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
 748+ 89B2 4E           	ld c,(hl)
 749+ 89B3 2A C4 84     	ld hl,(Posicion_actual)
 750+ 89B6 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
 751+ 89B8 C9           	ret
 752+ 89B9
 753+ 89B9              ; ***********************************************************************************************************************************************************************
 754+ 89B9              ;
 755+ 89B9              ;	05/11/22
 756+ 89B9              ;
 757+ 89B9              ;	La rutina ha de proporcionar los datos necesarios para que la rutina de pintado imprima un objeto en pantalla:
 758+ 89B9              ;
 759+ 89B9              ;   Necesitamos:	- El nº de scanlines que podemos imprimir del objeto en B.
 760+ 89B9              ;             		- La dirección de pantalla del puntero de impresión en HL.
 761+ 89B9              ;			  		- La nueva ubicacion de (Puntero_datas) en DE.
 762+ 89B9              ;					- También necesitamos saber el nº de columnas que `podemos´ imprimir el objeto.
 763+ 89B9              ;	 					Este valor es el resultado de la diferencia entre (Columns)-(Columnas).
 764+ 89B9              ;						En función de este valor desplazaremos el puntero SP por los .db de la entidad_
 765+ 89B9              ; 	 					_incrementando su posición en "1" o "2" unidades.
 766+ 89B9              ;
 767+ 89B9 CD AD 89     Converter call Prepara_draw					;	Necesito (Filas)/(Columns) en BC para llamar a [Calcula_dbs_totales].
 768+ 89BC C5           	push bc									;	También necesito disponer de la variable (Filas), que colocaré en H´ y (Attr),_
 769+ 89BD D9           	exx 									;	_que alojaré en L´.
 770+ 89BE E1           	pop hl 									;	El objetivo de esta rutina es de proveer de todos los datos necesarios a la rutina_
 771+ 89BF
 772+ 89BF 3A C7 84     	ld a,(Attr) 							;	_[Pintorrejeo] para que no tenga que acceder a memoria a por ninguno.
 773+ 89C2 6F           	ld l,a									;	Todos los datos necesarios para que [Pintorrejeo] se ejecute correctamente han de estar contenidos en los registros!!!!!
 774+ 89C3 D9           	exx
 775+ 89C4
 776+ 89C4 CD B7 88     	call Calcula_dbs_totales
 777+ 89C7
 778+ 89C7 21 EC 84     	ld hl,Columnas
 779+ 89CA 4E           	ld c,(hl)
 780+ 89CB
 781+ 89CB D9           	exx
 782+ 89CC C5           	push bc
 783+ 89CD D9           	exx
 784+ 89CE D1           	pop de									;	Tenemos:
 785+ 89CF              ; 											;	(Filas)/(Columnas) en BC.
 786+ 89CF              ;											;	[(Filas)*(Columns)]*8 en BC´y DE.
 787+ 89CF              ;											;	[(Filas)*(Columns)] en DE´.
 788+ 89CF 3A CE 84         ld a,(Cuad_objeto)
 789+ 89D2 FE 02            cp 2
 790+ 89D4 DC 51 8A         call c,Cuad_one
 791+ 89D7 CC 24 8A         call z,Cuad_two
 792+ 89DA F8               ret m
 793+ 89DB E6 01            and 1
 794+ 89DD C4 FB 89         call nz,Cuad_three 						; 	Salimos de la rutina si hemos ejecutado antes, alguna de las_
 795+ 89E0 F8               ret m 									;	_anteriores, [Cuad_one], [Cuad_two] o [Cuad_three].
 796+ 89E1 CD E5 89         call Cuad_four
 797+ 89E4 C9           	ret
 798+ 89E5
 799+ 89E5 ED 5B EA 84  Cuad_four ld de,(Puntero_datas)
 800+ 89E9 D5           	push de
 801+ 89EA DD E1        	pop ix 									;	New Puntero_datas en DE e IX.
 802+ 89EC 3A C3 84     	ld a,(Columns)
 803+ 89EF 91           	sub c
 804+ 89F0 D9           	exx
 805+ 89F1 47           	ld b,a
 806+ 89F2 D9           	exx
 807+ 89F3 08           	ex af,af 								;	(Columns)-(Columnas) en B´ y A´.
 808+ 89F4 CD B2 8A     	call Filas_por_ocho
 809+ 89F7 2A C4 84     	ld hl,(Posicion_actual)
 810+ 89FA C9           	ret
 811+ 89FB
 812+ 89FB C5           Cuad_three push bc							;	(Filas)/(Columnas) en la pila.
 813+ 89FC 2A EA 84     	ld hl,(Puntero_datas)
 814+ 89FF 41           	ld b,c
 815+ 8A00 05           	dec b 									;	(Columnas)-1 en B.
 816+ 8A01 28 03        	jr z,1F
 817+ 8A03 2B           2 dec hl
 818+ 8A04 10 FD        	djnz 2B
 819+ 8A06 EB           1 ex de,hl
 820+ 8A07 D5           	push de
 821+ 8A08 DD E1        	pop ix 									;	New Puntero_datas en DE e IX.
 822+ 8A0A 2A C4 84     	ld hl,(Posicion_actual)
 823+ 8A0D 41           	ld b,c
 824+ 8A0E 05           	dec b
 825+ 8A0F 28 03        	jr z,3F
 826+ 8A11 2B           4 dec hl 									; 	Puntero de impresión en HL.
 827+ 8A12 10 FD        	djnz 4B
 828+ 8A14 C1           3 pop bc 									;	Recupero (Filas)/(Columnas) en BC.
 829+ 8A15 CD B2 8A     	call Filas_por_ocho						;	Scanlines que componen la entidad en B.
 830+ 8A18 3A C3 84     	ld a,(Columns)
 831+ 8A1B 91           	sub c
 832+ 8A1C D9           	exx
 833+ 8A1D 47           	ld b,a
 834+ 8A1E D9           	exx
 835+ 8A1F 08           	ex af,af 								;	(Columns)-(Columnas) en B´ y A´.
 836+ 8A20 AF           	xor a
 837+ 8A21 3D           	dec a
 838+ 8A22 A7           	and a
 839+ 8A23 C9           	ret
 840+ 8A24
 841+ 8A24 C5           Cuad_two push bc
 842+ 8A25 21 C3 84         ld hl,Columns
 843+ 8A28 46               ld b,(hl)
 844+ 8A29 2A EA 84         ld hl,(Puntero_datas)
 845+ 8A2C 23           1 inc hl
 846+ 8A2D 10 FD            djnz 1B 								;	Ahora (Puntero_datas) en el último .db.
 847+ 8A2F A7               and a
 848+ 8A30 ED 52        	sbc hl,de
 849+ 8A32 EB               ex de,hl
 850+ 8A33 D5               push de
 851+ 8A34 DD E1            pop ix                                  ;	New (Puntero_datas) en DE e IX.
 852+ 8A36 C1               pop bc                                  ;   (Filas)/(Columnas) en BC.
 853+ 8A37 CD B2 8A         call Filas_por_ocho
 854+ 8A3A C5           	push bc 								;	Guardo Scanlines/Columns en la pila.
 855+ 8A3B 05           	dec b 									;	Scanlines-1.
 856+ 8A3C 2A C4 84      	ld hl,(Posicion_actual)
 857+ 8A3F CD A0 8A     2 call PreviousScan
 858+ 8A42 10 FB        	djnz 2B 								;	Ahora Puntero de impresión en HL.
 859+ 8A44 3A C3 84      	ld a,(Columns)
 860+ 8A47 91           	sub c
 861+ 8A48 D9           	exx
 862+ 8A49 47           	ld b,a
 863+ 8A4A D9           	exx
 864+ 8A4B 08           	ex af,af 								; 	(Columns)-(Columnas) en B´ y A´.
 865+ 8A4C C1           	pop bc
 866+ 8A4D AF           	xor a 									;	A tiene un valor negativo antes de salir de la rutina.
 867+ 8A4E 3D           	dec a
 868+ 8A4F A7           	and a
 869+ 8A50 C9           	ret
 870+ 8A51
 871+ 8A51 2A EA 84     Cuad_one ld hl,(Puntero_datas) 				;	En el 1er cuadrante, (Puntero_datas) apuntará al último .db del objeto. Para situarlo_
 872+ 8A54 A7           	and a 									;	_en el 1er .db, restaremos el nº total de .db a hl y sumaremos 1.
 873+ 8A55 ED 52        	sbc hl,de
 874+ 8A57 23           	inc hl
 875+ 8A58 EB           	ex de,hl 								;	New (Puntero_datas) en DE.
 876+ 8A59 CD B2 8A     	call Filas_por_ocho
 877+ 8A5C 05           	dec b									;	[(Filas)*8]-1 en [B].
 878+ 8A5D C5           	push bc
 879+ 8A5E 2A C4 84     	ld hl,(Posicion_actual)
 880+ 8A61 CD A0 8A     1 call PreviousScan
 881+ 8A64 10 FB        	djnz 1B
 882+ 8A66 41           	ld b,c									;	(Columnas) en B.
 883+ 8A67 05           	dec b
 884+ 8A68 20 02        	jr nz,2F
 885+ 8A6A 18 03        	jr 3F
 886+ 8A6C 2D           2 dec l
 887+ 8A6D 10 FD        	djnz 2B	 								;	Ahora tenemos el puntero de impresión, (donde vamos a empezar a pintar el 1er .db)_
 888+ 8A6F C1           3 pop bc 									;	_ en HL. (Arriba-izquierda).
 889+ 8A70 04           	inc b 									;	Scanlines totales a imprimir en B y (Columnas) en C.
 890+ 8A71 C5               push bc
 891+ 8A72 D9           	exx
 892+ 8A73 C1           	pop bc 									;	Scanlines/(Columnas) en BC´.
 893+ 8A74 3A C3 84     	ld a,(Columns)
 894+ 8A77 91           	sub c
 895+ 8A78 47           	ld b,a 									; 	B´ contiene (Columns)-(Columnas).
 896+ 8A79 28 0A        	jr z,4F 								; 	Si el objeto se imprime completo, (Columns)-(Columnas)="0" saltamos a 4F y salimos.
 897+ 8A7B D9           	exx 									;	El objeto no se imprime completo. Hay que situar, New (Puntero_datas) en el .db_
 898+ 8A7C F5           	push af 								;	_correspondiente. Sumaemos la diferencia entre (Columns) y (Columnas) al puntero.
 899+ 8A7D 08           	ex af,af 								;	El objeto está apareciendo.
 900+ 8A7E F1           	pop af
 901+ 8A7F 13           5 inc de
 902+ 8A80 3D           	dec a
 903+ 8A81 20 FC        	jr nz,5B
 904+ 8A83 18 02        	jr 6F
 905+ 8A85 D9           4 exx
 906+ 8A86 08           	ex af,af								; 	BC contiene Scanlines/(Columns).
 907+ 8A87 D5           6 push de 									;	HL contiene el Puntero de impresión.
 908+ 8A88 DD E1        	pop ix 									;	DE e IX contienen el New Puntero_datas.
 909+ 8A8A              ;											;	A´y B´contienen (Columns)-(Columnas).
 910+ 8A8A              ;											;	H´ (Filas)
 911+ 8A8A              ;											;	L´ (Attr)
 912+ 8A8A AF           	xor a
 913+ 8A8B 3D           	dec a
 914+ 8A8C A7           	and a 									;	A es negativo antes de salir de la rutina.
 915+ 8A8D C9               ret
 916+ 8A8E
 917+ 8A8E              ;----------------------------------------------------------------------------------------------------------------
 918+ 8A8E              ;
 919+ 8A8E              ;	5/08/22
 920+ 8A8E              ;
 921+ 8A8E              ;   NextScan.
 922+ 8A8E              ;
 923+ 8A8E              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
 924+ 8A8E              ;
 925+ 8A8E              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
 926+ 8A8E              ;
 927+ 8A8E              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
 928+ 8A8E              ;
 929+ 8A8E              ;       DESTRUIDOS: AF y HL !!!
 930+ 8A8E              ;
 931+ 8A8E              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
 932+ 8A8E              ;
 933+ 8A8E
 934+ 8A8E 24           NextScan inc h          ; Incrementamos el scanline.
 935+ 8A8F 7C               ld a,h
 936+ 8A90 E6 07            and 7
 937+ 8A92 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 938+ 8A93
 939+ 8A93 CD 01 91     	call Genera_coordenadas
 940+ 8A96
 941+ 8A96 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
 942+ 8A97 C6 20            add a,$20           ; Vamos a comprobarlo...
 943+ 8A99 6F               ld l,a
 944+ 8A9A D8               ret c               ; Salimos si se produce el cambio de tercio.
 945+ 8A9B
 946+ 8A9B 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
 947+ 8A9C D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
 948+ 8A9E 67               ld h,a
 949+ 8A9F C9               ret
 950+ 8AA0
 951+ 8AA0              ;----------------------------------------------------------------------------------------------------------------
 952+ 8AA0              ;
 953+ 8AA0              ;	5/08/22
 954+ 8AA0              ;
 955+ 8AA0              ;   PreviousScan.
 956+ 8AA0              ;
 957+ 8AA0              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
 958+ 8AA0              ;
 959+ 8AA0              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
 960+ 8AA0              ;
 961+ 8AA0              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
 962+ 8AA0              ;
 963+ 8AA0              ;       DESTRUIDOS: AF y HL !!!
 964+ 8AA0              ;
 965+ 8AA0              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
 966+ 8AA0              ;
 967+ 8AA0
 968+ 8AA0 7C           PreviousScan ld a,h
 969+ 8AA1 25               dec h               ; Dec H.
 970+ 8AA2 E6 07            and 7
 971+ 8AA4 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 972+ 8AA5
 973+ 8AA5 CD 01 91     	call Genera_coordenadas
 974+ 8AA8
 975+ 8AA8 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
 976+ 8AA9 D6 20            sub $20             ; Vamos a comprobarlo...
 977+ 8AAB 6F               ld l,a
 978+ 8AAC D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
 979+ 8AAD
 980+ 8AAD 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
 981+ 8AAE C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
 982+ 8AB0 67               ld h,a
 983+ 8AB1 C9               ret
 984+ 8AB2
 985+ 8AB2              ; ----------------------------------------------------------
 986+ 8AB2              ;
 987+ 8AB2              ;	17/10/22
 988+ 8AB2              ;
 989+ 8AB2              ;	(Macro). Esta operación es utilizada en las cuatro subrutinas de Converter.
 990+ 8AB2              ;
 991+ 8AB2              ;	Multiplica la cantidad contenida en B por 8. (B)*8.
 992+ 8AB2
 993+ 8AB2 CB 20        Filas_por_ocho sla b
 994+ 8AB4 CB 20        	sla b
 995+ 8AB6 CB 20        	sla b
 996+ 8AB8 C9           	ret
 997+ 8AB9
 998+ 8AB9              ; -----------------------------------------------------------------------------------
 999+ 8AB9              ;
1000+ 8AB9              ;	14/11/22
1001+ 8AB9
1002+ 8AB9 ED 73 FC 84  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
1003+ 8ABD 31 00 70     	ld sp,Album_de_fotos
1004+ 8AC0
1005+ 8AC0 D9           2 exx																		; Extraemos de Album_de_fotos los valores de los registros.
1006+ 8AC1 E1           	pop hl
1007+ 8AC2 C1           	pop bc
1008+ 8AC3 D9           	exx
1009+ 8AC4
1010+ 8AC4 08           	ex af,af
1011+ 8AC5 F1           	pop af
1012+ 8AC6 08           	ex af,af
1013+ 8AC7
1014+ 8AC7 DD E1        	pop ix
1015+ 8AC9 D1           	pop de
1016+ 8ACA C1           	pop bc
1017+ 8ACB E1           	pop hl
1018+ 8ACC
1019+ 8ACC ED 73 FE 84  	ld (Stack_2),sp
1020+ 8AD0 ED 7B FC 84  	ld sp,(Stack)
1021+ 8AD4
1022+ 8AD4 CD EF 8A     	call Pintorrejeo														; call Pintorrejeo. Hemos pintado la entidad.
1023+ 8AD7              ;																			; Esta dirección ha de ser correcta. Cada vez que modifique
1024+ 8AD7 ED 73 FC 84  	ld (Stack),sp
1025+ 8ADB 3A FB 84     	ld a,(Numero_de_malotes)
1026+ 8ADE 3D           	dec a
1027+ 8ADF 28 09        	jr z,1F
1028+ 8AE1 32 FB 84      	ld (Numero_de_malotes),a
1029+ 8AE4 ED 7B FE 84  	ld sp,(Stack_2)
1030+ 8AE8 18 D6        	jr 2B
1031+ 8AEA
1032+ 8AEA ED 7B FC 84  1 ld sp,(Stack)
1033+ 8AEE
1034+ 8AEE C9           	ret
1035+ 8AEF
1036+ 8AEF              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1037+ 8AEF              ;
1038+ 8AEF              ;	17/10/22
1039+ 8AEF              ;
1040+ 8AEF              ;	Instrucciones donde interviene el Stack Pointer, (SP).
1041+ 8AEF
1042+ 8AEF              ;	ADC HL,SP	LD (addr),SP
1043+ 8AEF              ;	ADD HL,SP	LD SP,(addr)
1044+ 8AEF              ;	ADD IX,SP	LD SP,nn
1045+ 8AEF              ; 	ADD IY,SP	LD SP,HL
1046+ 8AEF              ;				LD SP,IX
1047+ 8AEF              ;	DEC SP		LD SP,IY
1048+ 8AEF
1049+ 8AEF              ;	EX (SP),HL
1050+ 8AEF              ;	EX (SP),IX
1051+ 8AEF              ;	EX (SP),IY
1052+ 8AEF
1053+ 8AEF              ;	INC SP
1054+ 8AEF
1055+ 8AEF              Pintorrejeo
1056+ 8AEF
1057+ 8AEF              ;	INPUTS:
1058+ 8AEF              ;
1059+ 8AEF              ;   Estos parámetros los proporciona la subrutina Converter.
1060+ 8AEF
1061+ 8AEF              ; 	BC contiene los Scanlines/(Columnas) a imprimir.
1062+ 8AEF              ;	HL contiene el Puntero de impresión, dirección de pantalla, (arriba-izquierda) del sprite.
1063+ 8AEF              ;	DE e IX contienen el New Puntero_datas.
1064+ 8AEF              ;	A´y B´contienen (Columns)-(Columnas).
1065+ 8AEF              ;	H´ (Filas)
1066+ 8AEF              ;	L´ (Attr)
1067+ 8AEF
1068+ 8AEF              ;	call Define_atributos
1069+ 8AEF
1070+ 8AEF D9           	exx
1071+ 8AF0 11 02 00     	ld de,$0002 								;	El registro D' nos indicará, (si está a "1"), que vamos a imprimir_
1072+ 8AF3 D9           	exx											;	_una entidad de 4 Columnas. Utilizaremos la subrutina (Columnas2) para hacerlo.
1073+ 8AF4              ; 												;	Inicializamos D'.
1074+ 8AF4 79               ld a,c
1075+ 8AF5 FE 02            cp 2
1076+ 8AF7 28 4D            jr z,Columnas2
1077+ 8AF9 DA A2 8B         jp c,Columnas1
1078+ 8AFC E6 01        	and 1
1079+ 8AFE 20 05            jr nz,Columnas3
1080+ 8B00
1081+ 8B00 D9           	exx
1082+ 8B01 14           	inc d
1083+ 8B02 D9           	exx
1084+ 8B03 18 41        	jr Columnas2
1085+ 8B05
1086+ 8B05              ; -----------------------------------------------------------------------------------------
1087+ 8B05
1088+ 8B05 C5           Columnas3 push bc
1089+ 8B06
1090+ 8B06 ED 73 FC 84  	ld (Stack),sp						; Guardo SP.
1091+ 8B0A DD F9        	ld sp,ix							; Sitúo el SP en el 1er .db de la entidad.
1092+ 8B0C
1093+ 8B0C D1           1 pop de
1094+ 8B0D
1095+ 8B0D 7B               ld a,e								; Funcion_xor de la FILA.
1096+ 8B0E AE           	xor (hl)
1097+ 8B0F 5F               ld e,a
1098+ 8B10 23           	inc hl
1099+ 8B11 7A           	ld a,d
1100+ 8B12 AE           	xor (hl)
1101+ 8B13 57           	ld d,a
1102+ 8B14 2B               dec hl
1103+ 8B15
1104+ 8B15 73               ld (hl),e
1105+ 8B16 23           	inc hl
1106+ 8B17 72           	ld (hl),d
1107+ 8B18 23           	inc hl
1108+ 8B19
1109+ 8B19 D1               pop de
1110+ 8B1A 7B               ld a,e
1111+ 8B1B AE               xor (hl)
1112+ 8B1C 5F               ld e,a
1113+ 8B1D
1114+ 8B1D 73               ld (hl),e
1115+ 8B1E 3B               dec sp
1116+ 8B1F 2D               dec l
1117+ 8B20 2D               dec l
1118+ 8B21 18 08            jr 2F
1119+ 8B23
1120+ 8B23 10 E7        4 djnz 1B
1121+ 8B25
1122+ 8B25 ED 7B FC 84  6 ld sp,(Stack)
1123+ 8B29 C1           	pop bc
1124+ 8B2A C9               ret
1125+ 8B2B
1126+ 8B2B 24           2 inc h       						; Incrementamos el scanline.
1127+ 8B2C 7C               ld a,h
1128+ 8B2D E6 07            and 7
1129+ 8B2F 20 13            jr nz,3F              			; Salimos de la rutina si el scanline se encuentra entre (1-7).
1130+ 8B31 7D           	ld a,l             				; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1131+ 8B32 C6 20            add a,$20           			; Vamos a comprobarlo...
1132+ 8B34 6F               ld l,a
1133+ 8B35 30 09            jr nc,5F               			; Salimos si se produce el cambio de tercio.
1134+ 8B37
1135+ 8B37              ; Si se produce cambio de tercio:
1136+ 8B37
1137+ 8B37 7C           	ld a,h 							; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1138+ 8B38 D6 58        	sub $58
1139+ 8B3A 28 E9        	jr z,6B
1140+ 8B3C 30 E7        	jr nc,6B
1141+ 8B3E 18 04        	jr 3F
1142+ 8B40
1143+ 8B40 7C           5 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1144+ 8B41 D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1145+ 8B43 67               ld h,a
1146+ 8B44
1147+ 8B44 18 DD        3 jr 4B
1148+ 8B46
1149+ 8B46              ; -----------------------------------------------------------------------------------------
1150+ 8B46
1151+ 8B46 ED 73 FC 84  Columnas2 ld (Stack),sp					; Guardo SP.
1152+ 8B4A DD F9        	ld sp,ix						; Sitúo el SP en el 1er .db de Coracao.
1153+ 8B4C D1           2 pop de 							; 2º .db y 1er .db en DE respectivamente. Esto decrementa en 2 pos. el puntero SP.
1154+ 8B4D 18 19        	jr 4F
1155+ 8B4F
1156+ 8B4F 73           1 ld (hl),e							; Imprimo el scanline con la función XOR implementada.
1157+ 8B50 23           	inc hl
1158+ 8B51 72           	ld (hl),d
1159+ 8B52 2B           	dec hl
1160+ 8B53 18 1D        	jr 5F 							; Vamos a preparar el puntero de impresión HL, en el scanline siguiente.
1161+ 8B55
1162+ 8B55 D9           3 exx 								; Consulto (Columns)-(Columnas), (Corrección del puntero SP).
1163+ 8B56 04           	inc b
1164+ 8B57 05           	dec b
1165+ 8B58 28 06        	jr z,8F 						; Si (Columns)=(Columnas) no hago corrección de SP.
1166+ 8B5A
1167+ 8B5A 33           7 inc sp							; Hago la corrección de SP y repongo (Columns)-(Columnas) en B´.
1168+ 8B5B 10 FD        	djnz 7B
1169+ 8B5D
1170+ 8B5D 08           	ex af,af
1171+ 8B5E 47           	ld b,a
1172+ 8B5F 08           	ex af,af
1173+ 8B60
1174+ 8B60 D9           8 exx
1175+ 8B61 10 E9         	djnz 2B
1176+ 8B63 ED 7B FC 84  9 ld sp,(Stack)
1177+ 8B67
1178+ 8B67 C9           	ret
1179+ 8B68
1180+ 8B68              ; --------------------------
1181+ 8B68
1182+ 8B68 7B           4 ld a,e						; Funcion_xor de la FILA. .db XOR (HL). El resultado sigue en DE.
1183+ 8B69 AE           	xor (hl)
1184+ 8B6A 5F           	ld e,a
1185+ 8B6B 23           	inc hl
1186+ 8B6C 7A           	ld a,d
1187+ 8B6D AE           	xor (hl)
1188+ 8B6E 57           	ld d,a
1189+ 8B6F 2B           	dec hl
1190+ 8B70 18 DD        	jr 1B
1191+ 8B72
1192+ 8B72              ; Nota: No utilizo la rutina Next Scan / Previous Scan porque estoy utilizando la pila para pintar.
1193+ 8B72
1194+ 8B72 D9           5 exx
1195+ 8B73 14           	inc d
1196+ 8B74 15           	dec d
1197+ 8B75 28 0F        	jr z,11F 					; Imprimimos 2 o 4 Columnas???
1198+ 8B77
1199+ 8B77 1D           	dec e 						; Vamos a imprimir 4 Columnas. Decrementamos el contador E'.
1200+ 8B78 28 05        	jr z,12F
1201+ 8B7A
1202+ 8B7A D9           	exx
1203+ 8B7B 2C           	inc l
1204+ 8B7C 2C           	inc l
1205+ 8B7D 18 CD        	jr 2B
1206+ 8B7F
1207+ 8B7F 1C           12 inc e
1208+ 8B80 1C           	inc e
1209+ 8B81 D9           	exx
1210+ 8B82 2D           	dec l
1211+ 8B83 2D           	dec l 						; Inicializamos E' y HL a su posición inicial para imprimir el siguiente scanline.
1212+ 8B84 18 01        	jr 13F
1213+ 8B86
1214+ 8B86 D9           11 exx
1215+ 8B87 24           13 inc h       				; Incrementamos el scanline.
1216+ 8B88 7C           	ld a,h
1217+ 8B89 E6 07        	and 7
1218+ 8B8B 20 13            jr nz,6F              		; Salimos de la rutina si el scanline se encuentra entre (1-7).
1219+ 8B8D 7D           	ld a,l             			; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1220+ 8B8E C6 20            add a,$20           		; Vamos a comprobarlo...
1221+ 8B90 6F               ld l,a
1222+ 8B91 30 09            jr nc,10F               	; Salimos si no se produce el cambio de tercio.
1223+ 8B93
1224+ 8B93              ; Si se produce cambio de tercio:
1225+ 8B93
1226+ 8B93 7C           	ld a,h 						; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1227+ 8B94 D6 58        	sub $58
1228+ 8B96 28 CB        	jr z,9B
1229+ 8B98 30 C9        	jr nc,9B
1230+ 8B9A 18 04        	jr 6F
1231+ 8B9C
1232+ 8B9C 7C           10 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1233+ 8B9D D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1234+ 8B9F 67               ld h,a
1235+ 8BA0 18 B3        6 jr 3B
1236+ 8BA2
1237+ 8BA2              ; -----------------------------------------------------------------------------------------
1238+ 8BA2
1239+ 8BA2 1A           Columnas1 ld a,(de)
1240+ 8BA3 AE           	xor (hl)
1241+ 8BA4 77           	ld (hl),a
1242+ 8BA5 18 03            jr 2F
1243+ 8BA7 10 F9        5 djnz Columnas1                    ; Quedan scanlines que imprimir ???. REPETIMOS.
1244+ 8BA9 C9               ret
1245+ 8BAA 24           2 inc h       						; Incrementamos el scanline.
1246+ 8BAB 7C               ld a,h
1247+ 8BAC E6 07            and 7
1248+ 8BAE 20 11            jr nz,3F              			; Salimos de la rutina si el scanline se encuentra entre (1-7).
1249+ 8BB0 7D           	ld a,l             				; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1250+ 8BB1 C6 20            add a,$20           			; Vamos a comprobarlo...
1251+ 8BB3 6F               ld l,a
1252+ 8BB4 30 07            jr nc,8F               			; Salimos si se produce el cambio de tercio.
1253+ 8BB6
1254+ 8BB6              ; Si se produce cambio de tercio:
1255+ 8BB6
1256+ 8BB6 7C           	ld a,h 							; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1257+ 8BB7 D6 58        	sub $58
1258+ 8BB9 C8           	ret z
1259+ 8BBA D0           	ret nc
1260+ 8BBB 18 04        	jr 3F 							; Se produce el cambio de tercio pero no estamos en el 3er tercio.
1261+ 8BBD 7C           8 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1262+ 8BBE D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1263+ 8BC0 67               ld h,a
1264+ 8BC1 D9           3 exx 								; Comprobamos si estamos imprimiendo un sprite compuesto por 1 sóla (Columns), o se trata_
1265+ 8BC2 04           	inc B                           ; _de imprimir parte de un Sprite, (imprimimos 1 Columna de un sprite compuesto por más).
1266+ 8BC3 05           	dec b
1267+ 8BC4 28 0D        	jr z,6F
1268+ 8BC6 D9           	exx
1269+ 8BC7 08           	ex af,af 						; A contiene ahora (Columns)-(Columnas).
1270+ 8BC8 13           7 inc de 							; El sprite consta de más de una columna, debemos desplazar el puntero DE hasta el siguiente_
1271+ 8BC9 3D           	dec a  							; _.DB, este valor de desplazamiento lo proporciona: [(Columns)-(Columnas)]+1.
1272+ 8BCA 20 FC        	jr nz,7B
1273+ 8BCC 13           	inc de 							; Corrección de DE. Es necesaria para situar el puntero DE en el .db correspondiente.
1274+ 8BCD D9           	exx 							; Restauramos A´ con la variable (Columns)-(Columnas) para volverla a utilizar en el siguiente_
1275+ 8BCE 78           	ld a,b 							; _scanline.
1276+ 8BCF D9           	exx
1277+ 8BD0 08           	ex af,af
1278+ 8BD1 18 D4        	jr 5B
1279+ 8BD3 D9           6 exx
1280+ 8BD4 13               inc de
1281+ 8BD5 18 D0            jr 5B
1282+ 8BD7
# file closed: Draw_XOR.asm
 629  8BD7              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
   1+ 8BD7
   2+ 8BD7 ED 73 FC 84  Pinta_Amadeus_2x2 ld (Stack),sp
   3+ 8BDB 31 10 83     	ld sp,Amadeus
   4+ 8BDE D1           1 pop de
   5+ 8BDF 73           	ld (hl),e
   6+ 8BE0 23           	inc hl
   7+ 8BE1 72           	ld (hl),d
   8+ 8BE2 2B           	dec hl
   9+ 8BE3 24           	inc h
  10+ 8BE4 7C               ld a,h
  11+ 8BE5 E6 07            and 7
  12+ 8BE7 20 0C            jr nz,2F
  13+ 8BE9 7D               ld a,l
  14+ 8BEA C6 20            add a,$20
  15+ 8BEC 6F               ld l,a
  16+ 8BED 38 06            jr c,2F
  17+ 8BEF 7C               ld a,h
  18+ 8BF0 D6 08            sub 8
  19+ 8BF2 67               ld h,a
  20+ 8BF3 18 00            jr 2F
  21+ 8BF5 10 E7        2 djnz 1B
  22+ 8BF7 ED 7B FC 84  	ld sp,(Stack)
  23+ 8BFB C9           	ret
  24+ 8BFC
  25+ 8BFC ED 73 FC 84  Pinta_Amadeus_3x2 ld (Stack),sp
  26+ 8C00 31 30 83     	ld sp,Amadeus_F9
  27+ 8C03 D1           1 pop de
  28+ 8C04 73           	ld (hl),e
  29+ 8C05 23           	inc hl
  30+ 8C06 72           	ld (hl),d
  31+ 8C07 23           	inc hl
  32+ 8C08 D1           	pop de
  33+ 8C09 73           	ld (hl),e
  34+ 8C0A 2B           	dec hl
  35+ 8C0B 2B           	dec hl
  36+ 8C0C 24           	inc h
  37+ 8C0D 7C               ld a,h
  38+ 8C0E E6 07            and 7
  39+ 8C10 20 0A            jr nz,2F
  40+ 8C12 7D               ld a,l
  41+ 8C13 C6 20            add a,$20
  42+ 8C15 6F               ld l,a
  43+ 8C16 38 04            jr c,2F
  44+ 8C18 7C               ld a,h
  45+ 8C19 D6 08            sub 8
  46+ 8C1B 67               ld h,a
  47+ 8C1C 72           2 ld (hl),d
  48+ 8C1D D1           	pop de
  49+ 8C1E 23           	inc hl
  50+ 8C1F 73           	ld (hl),e
  51+ 8C20 23           	inc hl
  52+ 8C21 72           	ld (hl),d
  53+ 8C22 2B           	dec hl
  54+ 8C23 2B           	dec hl
  55+ 8C24 24           	inc h
  56+ 8C25 7C               ld a,h
  57+ 8C26 E6 07            and 7
  58+ 8C28 20 0A            jr nz,3F
  59+ 8C2A 7D               ld a,l
  60+ 8C2B C6 20            add a,$20
  61+ 8C2D 6F               ld l,a
  62+ 8C2E 38 04            jr c,3F
  63+ 8C30 7C               ld a,h
  64+ 8C31 D6 08            sub 8
  65+ 8C33 67               ld h,a
  66+ 8C34 10 CD        3 djnz 1B
  67+ 8C36 ED 7B FC 84  	ld sp,(Stack)
  68+ 8C3A C9           	ret
  69+ 8C3B
  70+ 8C3B              ; ---------------------------------------------------
  71+ 8C3B
  72+ 8C3B ED 73 FC 84  Pinta_enemigo_2x2_izquierda ld (Stack),sp
  73+ 8C3F 31 90 81     	ld sp,Badsat_derecha
  74+ 8C42 D1           1 pop de
  75+ 8C43 7A           	ld a,d
  76+ 8C44 AE           	xor (hl)
  77+ 8C45 77           	ld (hl),a
  78+ 8C46 24           	inc h
  79+ 8C47 7C               ld a,h
  80+ 8C48 E6 07            and 7
  81+ 8C4A 20 0C            jr nz,2F
  82+ 8C4C 7D               ld a,l
  83+ 8C4D C6 20            add a,$20
  84+ 8C4F 6F               ld l,a
  85+ 8C50 38 06            jr c,2F
  86+ 8C52 7C               ld a,h
  87+ 8C53 D6 08            sub 8
  88+ 8C55 67               ld h,a
  89+ 8C56 18 00            jr 2F
  90+ 8C58 10 E8        2 djnz 1B
  91+ 8C5A ED 7B FC 84  	ld sp,(Stack)
  92+ 8C5E C9           	ret
  93+ 8C5F
  94+ 8C5F ED 73 FC 84  Pinta_enemigo_2x2_derecha ld (Stack),sp
  95+ 8C63 31 90 81     	ld sp,Badsat_derecha
  96+ 8C66 D1           1 pop de
  97+ 8C67 7B           	ld a,e
  98+ 8C68 AE           	xor (hl)
  99+ 8C69 77           	ld (hl),a
 100+ 8C6A 24           	inc h
 101+ 8C6B 7C               ld a,h
 102+ 8C6C E6 07            and 7
 103+ 8C6E 20 0C            jr nz,2F
 104+ 8C70 7D               ld a,l
 105+ 8C71 C6 20            add a,$20
 106+ 8C73 6F               ld l,a
 107+ 8C74 38 06            jr c,2F
 108+ 8C76 7C               ld a,h
 109+ 8C77 D6 08            sub 8
 110+ 8C79 67               ld h,a
 111+ 8C7A 18 00            jr 2F
 112+ 8C7C 10 E8        2 djnz 1B
 113+ 8C7E ED 7B FC 84  	ld sp,(Stack)
 114+ 8C82 C9           	ret
 115+ 8C83
 116+ 8C83              ; ---------------------------------------------------
 117+ 8C83
 118+ 8C83 ED 73 FC 84  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
 119+ 8C87 31 B0 81     	ld sp,Badsat_der_f8
 120+ 8C8A D1           1 pop de
 121+ 8C8B 7A           	ld a,d
 122+ 8C8C AE           	xor (hl)
 123+ 8C8D 77           	ld (hl),a
 124+ 8C8E 23           	inc hl
 125+ 8C8F D1           	pop de
 126+ 8C90 7B           	ld a,e
 127+ 8C91 AE           	xor (hl)
 128+ 8C92 77           	ld (hl),a
 129+ 8C93 2B           	dec hl
 130+ 8C94 24            	inc h
 131+ 8C95 7C               ld a,h
 132+ 8C96 E6 07            and 7
 133+ 8C98 20 0A            jr nz,2F
 134+ 8C9A 7D               ld a,l
 135+ 8C9B C6 20            add a,$20
 136+ 8C9D 6F               ld l,a
 137+ 8C9E 38 04            jr c,2F
 138+ 8CA0 7C               ld a,h
 139+ 8CA1 D6 08            sub 8
 140+ 8CA3 67               ld h,a
 141+ 8CA4 D1           2 pop de
 142+ 8CA5 7B           	ld a,e
 143+ 8CA6 AE           	xor (hl)
 144+ 8CA7 77           	ld (hl),a
 145+ 8CA8 23           	inc hl
 146+ 8CA9 7A           	ld a,d
 147+ 8CAA AE           	xor (hl)
 148+ 8CAB 77           	ld (hl),a
 149+ 8CAC 2B           	dec hl
 150+ 8CAD 24           	inc h
 151+ 8CAE 7C               ld a,h
 152+ 8CAF E6 07            and 7
 153+ 8CB1 20 0A            jr nz,3F
 154+ 8CB3 7D               ld a,l
 155+ 8CB4 C6 20            add a,$20
 156+ 8CB6 6F               ld l,a
 157+ 8CB7 38 04            jr c,3F
 158+ 8CB9 7C               ld a,h
 159+ 8CBA D6 08            sub 8
 160+ 8CBC 67               ld h,a
 161+ 8CBD 10 CB        3 djnz 1B
 162+ 8CBF ED 7B FC 84  	ld sp,(Stack)
 163+ 8CC3 C9           	ret
 164+ 8CC4
 165+ 8CC4 ED 73 FC 84  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
 166+ 8CC8 31 B0 81     	ld sp,Badsat_der_f8
 167+ 8CCB D1           1 pop de
 168+ 8CCC D1           	pop de
 169+ 8CCD 7B           	ld a,e
 170+ 8CCE AE           	xor (hl)
 171+ 8CCF 77           	ld (hl),a
 172+ 8CD0 24            	inc h
 173+ 8CD1 7C               ld a,h
 174+ 8CD2 E6 07            and 7
 175+ 8CD4 20 0A            jr nz,2F
 176+ 8CD6 7D               ld a,l
 177+ 8CD7 C6 20            add a,$20
 178+ 8CD9 6F               ld l,a
 179+ 8CDA 38 04            jr c,2F
 180+ 8CDC 7C               ld a,h
 181+ 8CDD D6 08            sub 8
 182+ 8CDF 67               ld h,a
 183+ 8CE0 D1           2 pop de
 184+ 8CE1 7A           	ld a,d
 185+ 8CE2 AE           	xor (hl)
 186+ 8CE3 77           	ld (hl),a
 187+ 8CE4 24           	inc h
 188+ 8CE5 7C               ld a,h
 189+ 8CE6 E6 07            and 7
 190+ 8CE8 20 0A            jr nz,3F
 191+ 8CEA 7D               ld a,l
 192+ 8CEB C6 20            add a,$20
 193+ 8CED 6F               ld l,a
 194+ 8CEE 38 04            jr c,3F
 195+ 8CF0 7C               ld a,h
 196+ 8CF1 D6 08            sub 8
 197+ 8CF3 67               ld h,a
 198+ 8CF4 10 D5        3 djnz 1B
 199+ 8CF6 ED 7B FC 84  	ld sp,(Stack)
 200+ 8CFA C9           	ret
 201+ 8CFB
 202+ 8CFB
 203+ 8CFB
 204+ 8CFB
 205+ 8CFB
 206+ 8CFB
 207+ 8CFB
 208+ 8CFB
 209+ 8CFB
 210+ 8CFB
 211+ 8CFB
 212+ 8CFB
 213+ 8CFB
 214+ 8CFB
 215+ 8CFB
 216+ 8CFB
 217+ 8CFB
 218+ 8CFB
 219+ 8CFB
 220+ 8CFB
 221+ 8CFB
 222+ 8CFB
 223+ 8CFB
 224+ 8CFB ED 73 FC 84  Pinta_enemigo_2x2 ld (Stack),sp
 225+ 8CFF 31 90 81     	ld sp,Badsat_derecha
 226+ 8D02 D1           1 pop de
 227+ 8D03 7B           	ld a,e
 228+ 8D04 AE           	xor (hl)
 229+ 8D05 77           	ld (hl),a
 230+ 8D06 23           	inc hl
 231+ 8D07 7A           	ld a,d
 232+ 8D08 AE           	xor (hl)
 233+ 8D09 77           	ld (hl),a
 234+ 8D0A 2B           	dec hl
 235+ 8D0B 24           	inc h     ; Incrementamos el scanline.
 236+ 8D0C 7C               ld a,h
 237+ 8D0D E6 07            and 7
 238+ 8D0F 20 0C            jr nz,2F              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 239+ 8D11 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
 240+ 8D12 C6 20            add a,$20           ; Vamos a comprobarlo...
 241+ 8D14 6F               ld l,a
 242+ 8D15 38 06            jr c,2F              ; Salimos si se produce el cambio de tercio.
 243+ 8D17 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
 244+ 8D18 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
 245+ 8D1A 67               ld h,a
 246+ 8D1B 18 00            jr 2F
 247+ 8D1D 10 E3        2 djnz 1B
 248+ 8D1F ED 7B FC 84  	ld sp,(Stack)
 249+ 8D23 C9           	ret
 250+ 8D24
 251+ 8D24              ; ---------------------------------------------------
 252+ 8D24
 253+ 8D24 ED 73 FC 84  Pinta_enemigo_3x2 ld (Stack),sp
 254+ 8D28 31 B0 81     	ld sp,Badsat_der_f8
 255+ 8D2B D1           1 pop de
 256+ 8D2C 7B           	ld a,e
 257+ 8D2D AE           	xor (hl)
 258+ 8D2E 77           	ld (hl),a
 259+ 8D2F 23           	inc hl
 260+ 8D30 7A           	ld a,d
 261+ 8D31 AE           	xor (hl)
 262+ 8D32 77           	ld (hl),a
 263+ 8D33 23           	inc hl
 264+ 8D34 D1           	pop de
 265+ 8D35 7B           	ld a,e
 266+ 8D36 AE           	xor (hl)
 267+ 8D37 77           	ld (hl),a
 268+ 8D38 2B           	dec hl
 269+ 8D39 2B           	dec hl
 270+ 8D3A 24           	inc h     ; Incrementamos el scanline.
 271+ 8D3B 7C               ld a,h
 272+ 8D3C E6 07            and 7
 273+ 8D3E 20 0A            jr nz,2F              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 274+ 8D40 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
 275+ 8D41 C6 20            add a,$20           ; Vamos a comprobarlo...
 276+ 8D43 6F               ld l,a
 277+ 8D44 38 04            jr c,2F              ; Salimos si se produce el cambio de tercio.
 278+ 8D46 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
 279+ 8D47 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
 280+ 8D49 67               ld h,a
 281+ 8D4A 7A           2 ld a,d
 282+ 8D4B AE           	xor (hl)
 283+ 8D4C 77           	ld (hl),a
 284+ 8D4D D1           	pop de
 285+ 8D4E 23           	inc hl
 286+ 8D4F 7B           	ld a,e
 287+ 8D50 AE           	xor (hl)
 288+ 8D51 77           	ld (hl),a
 289+ 8D52 23           	inc hl
 290+ 8D53 7A           	ld a,d
 291+ 8D54 AE           	xor (hl)
 292+ 8D55 77           	ld (hl),a
 293+ 8D56 2B           	dec hl
 294+ 8D57 2B           	dec hl
 295+ 8D58 24           	inc h     ; Incrementamos el scanline.
 296+ 8D59 7C               ld a,h
 297+ 8D5A E6 07            and 7
 298+ 8D5C 20 0A            jr nz,3F              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 299+ 8D5E 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
 300+ 8D5F C6 20            add a,$20           ; Vamos a comprobarlo...
 301+ 8D61 6F               ld l,a
 302+ 8D62 38 04            jr c,3F              ; Salimos si se produce el cambio de tercio.
 303+ 8D64 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
 304+ 8D65 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
 305+ 8D67 67               ld h,a
 306+ 8D68 10 C1        3 djnz 1B
 307+ 8D6A ED 7B FC 84  	ld sp,(Stack)
 308+ 8D6E C9           	ret
# file closed: Rutinas_de_impresion_sprites.asm
 630  8D6F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
   1+ 8D6F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
   2+ 8D6F              ;
   3+ 8D6F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
   4+ 8D6F              ;
   5+ 8D6F              ; *****************************************************************************************************************************************************************************************
   6+ 8D6F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
   7+ 8D6F
   8+ 8D6F 7C           calcula_tercio ld a,h
   9+ 8D70 E6 18        	and $18
  10+ 8D72 CB 2F        	sra a
  11+ 8D74 CB 2F        	sra a
  12+ 8D76 CB 2F        	sra a
  13+ 8D78 C9           	ret
  14+ 8D79
# file closed: calcula_tercio.asm
 631  8D79              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
   1+ 8D79              ; -----------------------------------------------------------------------------------------
   2+ 8D79              ;
   3+ 8D79              ;   04/11/22
   4+ 8D79              ;
   5+ 8D79              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
   6+ 8D79              ;
   7+ 8D79              ;   INPUT: HL contiene la dirección de memoria de pantalla.
   8+ 8D79              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
   9+ 8D79              ;
  10+ 8D79              ;   DESTRUYE: HL y A. !!!!!
  11+ 8D79
  12+ 8D79 CD 6F 8D     Calcula_direccion_atributos call calcula_tercio
  13+ 8D7C 26 58            ld h,$58
  14+ 8D7E 84               add h
  15+ 8D7F 67               ld h,a
  16+ 8D80 C9               ret
# file closed: Calcula_direccion_atributos.asm
 632  8D81              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
   1+ 8D81              ; ********** **********
   2+ 8D81              ;
   3+ 8D81              ;   5/11/22
   4+ 8D81              ;
   5+ 8D81              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
   6+ 8D81              ;
   7+ 8D81              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
   8+ 8D81              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
   9+ 8D81              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
  10+ 8D81              ;
  11+ 8D81              ;   NO DESTROYERSSSS !!!!!
  12+ 8D81
  13+ 8D81 E5           Define_atributos push hl
  14+ 8D82 C5           	push bc
  15+ 8D83 D5           	push de
  16+ 8D84
  17+ 8D84 CD 79 8D     	call Calcula_direccion_atributos
  18+ 8D87
  19+ 8D87 D9               exx
  20+ 8D88 E5               push hl
  21+ 8D89 D9               exx
  22+ 8D8A D1               pop de
  23+ 8D8B
  24+ 8D8B 42               ld b,d
  25+ 8D8C 7B               ld a,e 									; (Attr) en A.
  26+ 8D8D
  27+ 8D8D C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
  28+ 8D8E E5            	push hl 								; Guardo dirección de attr.
  29+ 8D8F
  30+ 8D8F              ; -----
  31+ 8D8F
  32+ 8D8F 77           2 ld (hl),a
  33+ 8D90 0D           	dec c 									; Decremento (Columnas).
  34+ 8D91 28 03        	jr z,1F
  35+ 8D93 23           	inc hl
  36+ 8D94 18 F9        	jr 2B
  37+ 8D96
  38+ 8D96 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
  39+ 8D97 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
  40+ 8D98
  41+ 8D98 05           	dec b									; Decremento (Filas).
  42+ 8D99 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
  43+ 8D9B
  44+ 8D9B 11 20 00     	ld de,32
  45+ 8D9E A7           	and a
  46+ 8D9F ED 5A        	adc hl,de
  47+ 8DA1 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
  48+ 8DA3
  49+ 8DA3 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
  50+ 8DA4 C1           	pop bc
  51+ 8DA5 E1           	pop hl
  52+ 8DA6
  53+ 8DA6 C9           	ret
  54+ 8DA7
# file closed: Define_atributos.asm
 633  8DA7              	include "Cls.asm"
# file opened: Cls.asm
   1+ 8DA7              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
   2+ 8DA7              ;
   3+ 8DA7              ;
   4+ 8DA7              ;	CLS.
   5+ 8DA7              ;
   6+ 8DA7              ;	Limpia la pantalla y define sus atributos.
   7+ 8DA7              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
   8+ 8DA7              ;
   9+ 8DA7              ;	COLORES: 0 ..... NEGRO
  10+ 8DA7              ;    		 1 ..... AZUL
  11+ 8DA7              ; 			 2 ..... ROJO
  12+ 8DA7              ;			 3 ..... MAGENTA
  13+ 8DA7              ; 			 4 ..... VERDE
  14+ 8DA7              ; 			 5 ..... CIAN
  15+ 8DA7              ;			 6 ..... AMARILLO
  16+ 8DA7              ; 			 7 ..... BLANCO
  17+ 8DA7              ;
  18+ 8DA7              ;	INPUT: A contiene los atributos de pantalla.
  19+ 8DA7              ;
  20+ 8DA7              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
  21+ 8DA7
  22+ 8DA7
  23+ 8DA7 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
  24+ 8DAA 11 01 40     	LD DE,$4001
  25+ 8DAD 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
  26+ 8DB0 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
  27+ 8DB2 ED B0        	LDIR
  28+ 8DB4 01 FF 02     	LD BC,767
  29+ 8DB7 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
  30+ 8DB8 ED B0        	LDIR
  31+ 8DBA C9           	ret
  32+ 8DBB
# file closed: Cls.asm
 634  8DBB              	include "Direcciones.asm"
# file opened: Direcciones.asm
   1+ 8DBB              ; ******************************************************************************************************************************************************************************************
   2+ 8DBB              ;
   3+ 8DBB              ;   19/10/22
   4+ 8DBB              ;
   5+ 8DBB              ;	Mov_down
   6+ 8DBB              ;
   7+ 8DBB              ; 	Mueve el Sprite X px hacia abajo.
   8+ 8DBB              ;
   9+ 8DBB              ;
  10+ 8DBB 21 DF 84     Mov_down ld hl,Ctrl_0
  11+ 8DBE CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  12+ 8DC0              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
  13+ 8DC0              ; 																	; _ en el caso de que no lo haya.
  14+ 8DC0 3A D4 84     	ld a,(Vel_down)
  15+ 8DC3 47           	ld b,a
  16+ 8DC4 2A C4 84         ld hl,(Posicion_actual)
  17+ 8DC7 CD 6F 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
  18+ 8DCA E6 02        	and 2
  19+ 8DCC 28 0F        	jr z,1F
  20+ 8DCE 7C           	ld a,h
  21+ 8DCF FE 57        	cp $57
  22+ 8DD1 20 0A        	jr nz,1F
  23+ 8DD3 7D           	ld a,l
  24+ 8DD4 C6 20        	add $20
  25+ 8DD6 30 05        	jr nc,1F
  26+ 8DD8
  27+ 8DD8              ; ------------------------------
  28+ 8DD8 CD D7 90     	call Reaparece_arriba
  29+ 8DDB              ;	call Reinicio
  30+ 8DDB              ; ------------------------------
  31+ 8DDB
  32+ 8DDB 18 08        	jr 3F
  33+ 8DDD CD 8E 8A     1 call NextScan
  34+ 8DE0 22 C4 84     	ld (Posicion_actual),hl
  35+ 8DE3 10 E2            djnz 2B
  36+ 8DE5 C9           3 ret
  37+ 8DE6
  38+ 8DE6
  39+ 8DE6              ; ******************************************************************************************************************************************************************************************
  40+ 8DE6              ;
  41+ 8DE6              ;   19/10/22
  42+ 8DE6              ;
  43+ 8DE6              ;	Mov_up
  44+ 8DE6              ;
  45+ 8DE6              ; 	Mueve el Sprite hacia arriba.
  46+ 8DE6              ;
  47+ 8DE6              ;
  48+ 8DE6 21 DF 84     Mov_up ld hl,Ctrl_0
  49+ 8DE9 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  50+ 8DEB              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
  51+ 8DEB              ; 																		; _ en el caso de que no lo haya.
  52+ 8DEB 3A D3 84     	ld a,(Vel_up)
  53+ 8DEE 47           	ld b,a
  54+ 8DEF 2A C4 84     	ld hl,(Posicion_actual)
  55+ 8DF2 CD 6F 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
  56+ 8DF5 A7           	and a
  57+ 8DF6 20 10        	jr nz,1F
  58+ 8DF8 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
  59+ 8DF9 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
  60+ 8DFB 20 0B            jr nz,1F
  61+ 8DFD 7D               ld a,l
  62+ 8DFE D6 20            sub $20
  63+ 8E00 30 06            jr nc,1F
  64+ 8E02 25               dec h
  65+ 8E03
  66+ 8E03              ; -----------------------------
  67+ 8E03 CD C7 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
  68+ 8E06              ;	call Reinicio
  69+ 8E06              ; -----------------------------
  70+ 8E06
  71+ 8E06 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
  72+ 8E08 CD A0 8A     1 call PreviousScan
  73+ 8E0B 22 C4 84     	ld (Posicion_actual),hl
  74+ 8E0E 10 E2            djnz 3B
  75+ 8E10 C9           2   ret
  76+ 8E11
  77+ 8E11              ; ******************************************************************************************************************************************************************************************
  78+ 8E11              ;
  79+ 8E11              ;	19/10/22
  80+ 8E11              ;
  81+ 8E11              ;	Mov_right.
  82+ 8E11              ;
  83+ 8E11              ; 	Desplaza el Sprite (x)Pixels a la derecha.
  84+ 8E11              ;
  85+ 8E11
  86+ 8E11 21 DF 84     Mov_right ld hl,Ctrl_0
  87+ 8E14 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  88+ 8E16              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
  89+ 8E16              ; 																	; _ en el caso de que no lo haya.
  90+ 8E16 3A C6 84     	ld a,(CTRL_DESPLZ)
  91+ 8E19 A7           	and a
  92+ 8E1A 28 0B        	jr z,10F
  93+ 8E1C
  94+ 8E1C 3A DF 84     	ld a,(Ctrl_0)
  95+ 8E1F CB 7F        	bit 7,a
  96+ 8E21 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
  97+ 8E23 21 C6 84     	ld hl,CTRL_DESPLZ
  98+ 8E26 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
  99+ 8E27
 100+ 8E27 3A DF 84     10 ld a,(Ctrl_0)
 101+ 8E2A CB 77        	bit 6,a
 102+ 8E2C 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
 103+ 8E2E
 104+ 8E2E CD 86 90     	call Stop_Amadeus_right
 105+ 8E31 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
 106+ 8E32 18 4A        	jr 3F
 107+ 8E34
 108+ 8E34 3A CF 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
 109+ 8E37 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
 110+ 8E39 20 43        	jr nz,3F
 111+ 8E3B
 112+ 8E3B 3A C6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
 113+ 8E3E A7           	and a 															; _[3] para continuar con el DESPLZ.
 114+ 8E3F 28 3D        	jr z,3F
 115+ 8E41
 116+ 8E41              ; ---------- ---------- ----------
 117+ 8E41
 118+ 8E41 3A D2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
 119+ 8E44 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
 120+ 8E46 28 11        	jr z,1F
 121+ 8E48 38 06        	jr c,6F
 122+ 8E4A FE 04        	cp 4
 123+ 8E4C 28 14        	jr z,7F
 124+ 8E4E 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
 125+ 8E50
 126+ 8E50              ; ---------- ---------- ----------
 127+ 8E50              ;
 128+ 8E50              ; Perfiles de velocidad
 129+ 8E50              ;
 130+ 8E50 3A C6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
 131+ 8E53 FE FE        	cp $fe
 132+ 8E55 20 27        	jr nz,3F
 133+ 8E57 18 10        	jr 4F
 134+ 8E59 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
 135+ 8E5C FE FD        	cp $fd
 136+ 8E5E 20 1E        	jr nz,3F
 137+ 8E60 18 07        	jr 4F
 138+ 8E62 3A C6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
 139+ 8E65 FE FB        	cp $fb
 140+ 8E67 20 15        	jr nz,3F
 141+ 8E69
 142+ 8E69              ; ---------- ---------- ----------
 143+ 8E69
 144+ 8E69 CD B5 90     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
 145+ 8E6C              ;	call Reinicio
 146+ 8E6C
 147+ 8E6C              ; ---------- ---------- ----------
 148+ 8E6C
 149+ 8E6C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
 150+ 8E6E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
 151+ 8E6F CD A7 8E     	call DESPLZ_DER
 152+ 8E72 C1           	pop bc
 153+ 8E73 10 F9        	djnz 5B
 154+ 8E75 2A C4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
 155+ 8E78 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
 156+ 8E79 22 C4 84     	ld (Posicion_actual),hl
 157+ 8E7C 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
 158+ 8E7E
 159+ 8E7E              ; ---------- ---------- ----------
 160+ 8E7E
 161+ 8E7E 3A D2 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
 162+ 8E81 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
 163+ 8E83 20 1B        	jr nz,8F
 164+ 8E85 2A C4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
 165+ 8E88 7D           	ld a,l
 166+ 8E89 E6 1F        	and $1f
 167+ 8E8B FE 1F        	cp 31
 168+ 8E8D 20 05        	jr nz,9F
 169+ 8E8F
 170+ 8E8F              ; ---------- ---------- ----------
 171+ 8E8F
 172+ 8E8F CD B5 90     	call Reaparece_izquierda
 173+ 8E92
 174+ 8E92              ; ---------- ---------- ----------
 175+ 8E92
 176+ 8E92 18 12        	jr 2F
 177+ 8E94 2A C4 84     9 ld hl,(Posicion_actual)
 178+ 8E97 23           	inc hl
 179+ 8E98 22 C4 84     	ld (Posicion_actual),hl
 180+ 8E9B CD 01 91     	call Genera_coordenadas
 181+ 8E9E 18 06        	jr 2F
 182+ 8EA0 2A C4 84     8 ld hl,(Posicion_actual)
 183+ 8EA3 CD A7 8E     	call DESPLZ_DER
 184+ 8EA6 C9           2 ret
 185+ 8EA7
 186+ 8EA7              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 187+ 8EA7              ;
 188+ 8EA7              ;	22/9/22
 189+ 8EA7              ;
 190+ 8EA7
 191+ 8EA7 CD B6 8E     DESPLZ_DER call Desplaza_derecha
 192+ 8EAA CD CB 8E         call modifica_parametros_1er_DESPLZ_2
 193+ 8EAD CD F1 8E         call Ciclo_completo
 194+ 8EB0 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
 195+ 8EB3 CB FE        	set 7,(hl)
 196+ 8EB5 C9           	ret
 197+ 8EB6
 198+ 8EB6              ; ******************************************************************************************************************************************************************************************
 199+ 8EB6              ;	14/9/22
 200+ 8EB6              ;
 201+ 8EB6
 202+ 8EB6 3A D2 84     Desplaza_derecha ld a,(Vel_right)
 203+ 8EB9 47           	ld b,a
 204+ 8EBA 2A CA 84     	ld hl,(Puntero_DESPLZ)
 205+ 8EBD 23           1 inc hl
 206+ 8EBE 23           	inc hl
 207+ 8EBF 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
 208+ 8EC1 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
 209+ 8EC4 CD D2 85     	call Extrae_address
 210+ 8EC7 22 F0 84     	ld (Caja_de_DESPLZ),hl
 211+ 8ECA C9           	ret
 212+ 8ECB
 213+ 8ECB              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 214+ 8ECB              ;
 215+ 8ECB              ;	24/7/22
 216+ 8ECB              ;
 217+ 8ECB              ;	modifica_parametros_1er_DESPLZ_2
 218+ 8ECB              ;
 219+ 8ECB              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
 220+ 8ECB              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
 221+ 8ECB              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
 222+ 8ECB
 223+ 8ECB 3A C6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
 224+ 8ECE A7           	and a
 225+ 8ECF 20 1C        	jr nz,1F
 226+ 8ED1 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
 227+ 8ED3 32 C6 84         ld (CTRL_DESPLZ),a
 228+ 8ED6 21 C3 84     	ld hl,Columns
 229+ 8ED9 34           	inc (hl)
 230+ 8EDA 3A CE 84     	ld a,(Cuad_objeto)
 231+ 8EDD E6 01        	and 1
 232+ 8EDF 28 0C        	jr z,1F
 233+ 8EE1 2A C4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
 234+ 8EE4 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
 235+ 8EE5 22 C4 84     	ld (Posicion_actual),hl
 236+ 8EE8 CD 92 90     	call Inc_CTRL_DESPLZ
 237+ 8EEB 18 03        	jr 2F
 238+ 8EED CD 92 90     1 call Inc_CTRL_DESPLZ
 239+ 8EF0 C9           2 ret
 240+ 8EF1
 241+ 8EF1              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 242+ 8EF1              ;
 243+ 8EF1              ;	24/7/22
 244+ 8EF1              ;
 245+ 8EF1              ;	Ciclo_completo.
 246+ 8EF1              ;
 247+ 8EF1              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
 248+ 8EF1              ;
 249+ 8EF1              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
 250+ 8EF1              ; 	Decrementamos (Columns).
 251+ 8EF1              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
 252+ 8EF1              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
 253+ 8EF1
 254+ 8EF1
 255+ 8EF1 3A C6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
 256+ 8EF4 FE FF        	cp $ff
 257+ 8EF6 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
 258+ 8EF8 18 25        	jr 3f
 259+ 8EFA 21 C3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
 260+ 8EFD 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
 261+ 8EFE AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
 262+ 8EFF 32 C6 84     	ld (CTRL_DESPLZ),a
 263+ 8F02 3A CE 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
 264+ 8F05 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
 265+ 8F07 20 07        	jr nz,2F
 266+ 8F09 2A C4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
 267+ 8F0C 23           	inc hl
 268+ 8F0D 22 C4 84     	ld (Posicion_actual),hl
 269+ 8F10 2A C8 84     2 ld hl,(Indice_Sprite)
 270+ 8F13 22 CA 84     	ld (Puntero_DESPLZ),hl
 271+ 8F16 21 00 00     	ld hl,0
 272+ 8F19 22 F0 84     	ld (Caja_de_DESPLZ),hl
 273+ 8F1C CD 01 91     	call Genera_coordenadas
 274+ 8F1F C9           3 ret
 275+ 8F20
 276+ 8F20              ; ******************************************************************************************************************************************************************************************
 277+ 8F20              ;
 278+ 8F20              ;	19/10/22
 279+ 8F20              ;
 280+ 8F20              ;	Mov_left.
 281+ 8F20              ;
 282+ 8F20              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
 283+ 8F20              ;
 284+ 8F20              Mov_left
 285+ 8F20
 286+ 8F20 21 DF 84     	ld hl,Ctrl_0
 287+ 8F23 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 288+ 8F25              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 289+ 8F25              ; 																	; _ en el caso de que no lo haya.
 290+ 8F25 3A C6 84     	ld a,(CTRL_DESPLZ)
 291+ 8F28 A7           	and a
 292+ 8F29 20 19        	jr nz,10F
 293+ 8F2B
 294+ 8F2B 2A E8 84     	ld hl,(Puntero_objeto)
 295+ 8F2E 22 CA 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
 296+ 8F31
 297+ 8F31 3A DF 84     	ld a,(Ctrl_0)
 298+ 8F34 CB 77        	bit 6,a
 299+ 8F36 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
 300+ 8F38
 301+ 8F38 CD 8C 90     	call Stop_Amadeus_left
 302+ 8F3B 20 5F        	jr nz,3F
 303+ 8F3D
 304+ 8F3D 2A C8 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
 305+ 8F40 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
 306+ 8F43 C9           	ret
 307+ 8F44
 308+ 8F44 3A DF 84     10 	ld a,(Ctrl_0)
 309+ 8F47 CB 7F        	bit 7,a
 310+ 8F49 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
 311+ 8F4B 21 C6 84     	ld hl,CTRL_DESPLZ
 312+ 8F4E 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 313+ 8F4F
 314+ 8F4F 3A CF 84     11 ld a,(Coordenada_X)
 315+ 8F52 A7           	and a
 316+ 8F53 20 47        	jr nz,3F
 317+ 8F55 3A C6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
 318+ 8F58 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
 319+ 8F59 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
 320+ 8F5B
 321+ 8F5B              ; ---------- ---------- ----------
 322+ 8F5B
 323+ 8F5B 3A D1 84     	ld a,(Vel_left)
 324+ 8F5E FE 02        	cp 2
 325+ 8F60 28 0F        	jr z,1F
 326+ 8F62 38 04        	jr c,6F
 327+ 8F64 FE 04        	cp 4
 328+ 8F66 28 12        	jr z,7F
 329+ 8F68
 330+ 8F68              ; ---------- ---------- ----------
 331+ 8F68
 332+ 8F68 3A C6 84     6 ld a,(CTRL_DESPLZ)
 333+ 8F6B FE F9        	cp $f9
 334+ 8F6D 20 2D        	jr nz,3F
 335+ 8F6F 18 10        	jr 4F
 336+ 8F71 3A C6 84     1 ld a,(CTRL_DESPLZ)
 337+ 8F74 FE FA        	cp $fa
 338+ 8F76 20 24        	jr nz,3F
 339+ 8F78 18 07        	jr 4F
 340+ 8F7A 3A C6 84     7 ld a,(CTRL_DESPLZ)
 341+ 8F7D FE FC        	cp $fc
 342+ 8F7F 20 1B        	jr nz,3F
 343+ 8F81
 344+ 8F81              ; ---------- ---------- ----------
 345+ 8F81
 346+ 8F81 CD A3 90     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
 347+ 8F84              ;	call Reinicio
 348+ 8F84
 349+ 8F84              ; ---------- ---------- ----------
 350+ 8F84
 351+ 8F84 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
 352+ 8F86 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
 353+ 8F87 2A E8 84     	ld hl,(Puntero_objeto)
 354+ 8F8A 22 CA 84     	ld (Puntero_DESPLZ),hl
 355+ 8F8D CD C3 8F     	call DESPLZ_IZQ
 356+ 8F90 C1           	pop bc
 357+ 8F91 10 F3        	djnz 5B
 358+ 8F93 2A C4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
 359+ 8F96 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
 360+ 8F97 22 C4 84     	ld (Posicion_actual),hl
 361+ 8F9A 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
 362+ 8F9C
 363+ 8F9C              ; ---------- ---------- ----------
 364+ 8F9C
 365+ 8F9C 3A D1 84     3 ld a,(Vel_left)
 366+ 8F9F FE 08        	cp 8
 367+ 8FA1 20 19        	jr nz,8F
 368+ 8FA3 2A C4 84     	ld hl,(Posicion_actual)
 369+ 8FA6 7D           	ld a,l
 370+ 8FA7 E6 1F        	and $1f
 371+ 8FA9 20 05        	jr nz,9F
 372+ 8FAB
 373+ 8FAB              ; ---------- ---------- ----------
 374+ 8FAB
 375+ 8FAB CD A3 90     	call Reaparece_derecha
 376+ 8FAE
 377+ 8FAE              ; ---------- ---------- ----------
 378+ 8FAE
 379+ 8FAE 18 12        	jr 2F
 380+ 8FB0 2A C4 84     9 ld hl,(Posicion_actual)
 381+ 8FB3 2B           	dec hl
 382+ 8FB4 22 C4 84     	ld (Posicion_actual),hl
 383+ 8FB7 CD 01 91     	call Genera_coordenadas
 384+ 8FBA 18 06        	jr 2F
 385+ 8FBC 2A C4 84     8 ld hl,(Posicion_actual)
 386+ 8FBF CD C3 8F     	call DESPLZ_IZQ
 387+ 8FC2 C9           2 ret
 388+ 8FC3
 389+ 8FC3              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 390+ 8FC3              ;
 391+ 8FC3              ;	22/9/22
 392+ 8FC3
 393+ 8FC3 CD D2 8F     DESPLZ_IZQ call Desplaza_izquierda
 394+ 8FC6 CD E7 8F         call modifica_parametros_1er_DESPLZ
 395+ 8FC9 CD 08 90     	call Ciclo_completo_2
 396+ 8FCC 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
 397+ 8FCF CB BE        	res 7,(hl)
 398+ 8FD1 C9           	ret
 399+ 8FD2
 400+ 8FD2 3A D1 84     Desplaza_izquierda ld a,(Vel_left)
 401+ 8FD5 47           	ld b,a
 402+ 8FD6 2A CA 84     	ld hl,(Puntero_DESPLZ)
 403+ 8FD9 2B           1 dec hl
 404+ 8FDA 2B           	dec hl
 405+ 8FDB 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
 406+ 8FDD 22 CA 84     	ld (Puntero_DESPLZ),hl
 407+ 8FE0 CD D2 85     	call Extrae_address
 408+ 8FE3 22 F0 84     	ld (Caja_de_DESPLZ),hl
 409+ 8FE6 C9           	ret
 410+ 8FE7
 411+ 8FE7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 412+ 8FE7              ;
 413+ 8FE7              ;	modifica_parametros_1er_DESPLZ
 414+ 8FE7              ;
 415+ 8FE7              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
 416+ 8FE7              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
 417+ 8FE7              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
 418+ 8FE7
 419+ 8FE7 3A C6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
 420+ 8FEA A7           	and a
 421+ 8FEB 20 17        	jr nz,1F
 422+ 8FED 21 C3 84     	ld hl,Columns
 423+ 8FF0 34           	inc (hl)
 424+ 8FF1 3A CE 84     	ld a,(Cuad_objeto)
 425+ 8FF4 E6 01        	and 1
 426+ 8FF6 20 0C        	jr nz,1F
 427+ 8FF8 2A C4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
 428+ 8FFB 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
 429+ 8FFC 22 C4 84     	ld (Posicion_actual),hl
 430+ 8FFF CD 75 90     	call Dec_CTRL_DESPLZ
 431+ 9002 18 03        	jr 2F
 432+ 9004 CD 75 90     1 call Dec_CTRL_DESPLZ
 433+ 9007 C9           2 ret
 434+ 9008
 435+ 9008              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 436+ 9008              ;
 437+ 9008 3A C6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
 438+ 900B FE F8        	cp $f8
 439+ 900D 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
 440+ 900F 18 19        	jr 3f
 441+ 9011 21 C3 84     1 ld hl,Columns
 442+ 9014 35           	dec (hl)
 443+ 9015 AF           	xor a
 444+ 9016 32 C6 84     	ld (CTRL_DESPLZ),a
 445+ 9019 3A CE 84     	ld a,(Cuad_objeto)
 446+ 901C E6 01        	and 1
 447+ 901E 28 07        	jr z,2F
 448+ 9020 2A C4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
 449+ 9023 2B           	dec hl
 450+ 9024 22 C4 84     	ld (Posicion_actual),hl
 451+ 9027 CD 01 91     2 call Genera_coordenadas
 452+ 902A C9           3 ret
 453+ 902B
 454+ 902B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 902B
 456+ 902B CD AD 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
 457+ 902E CD B7 88     	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
 458+ 9031              ;																	; Filas * Columnas en DE´.
 459+ 9031 3A CE 84     	ld a,(Cuad_objeto)
 460+ 9034 FE 02        	cp 2
 461+ 9036 38 20        	jr c,2F
 462+ 9038 28 1E        	jr z,2F
 463+ 903A E6 01        	and 1
 464+ 903C 28 15        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
 465+ 903E              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
 466+ 903E CD EC 88     	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
 467+ 9041 C5           	push bc
 468+ 9042 E5           	push hl
 469+ 9043 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 470+ 9045 0D           	dec c
 471+ 9046 2A EA 84     	ld hl,(Puntero_datas)
 472+ 9049 A7           	and a
 473+ 904A ED 4A        	adc hl,bc
 474+ 904C 22 EA 84     	ld (Puntero_datas),hl
 475+ 904F E1           	pop hl
 476+ 9050 C1           	pop bc
 477+ 9051 18 21        	jr 4F
 478+ 9053 CD EC 88     1 	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
 479+ 9056 18 1C        	jr 4F
 480+ 9058 E6 01        2 and 1
 481+ 905A 28 05        	jr z,3F
 482+ 905C CD D6 88     	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
 483+ 905F 18 13        	jr 4F
 484+ 9061 CD D6 88     3 call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
 485+ 9064 C5           	push bc
 486+ 9065 E5           	push hl
 487+ 9066 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 488+ 9068 0D           	dec c
 489+ 9069 2A EA 84     	ld hl,(Puntero_datas)
 490+ 906C A7           	and a
 491+ 906D ED 42        	sbc hl,bc
 492+ 906F 22 EA 84     	ld (Puntero_datas),hl
 493+ 9072 E1           	pop hl
 494+ 9073 C1           	pop bc
 495+ 9074 C9           4 ret
 496+ 9075
 497+ 9075              ; ---------- ---------- ---------- ---------- ---------- ----------
 498+ 9075              ;
 499+ 9075              ;	Dec_CTRL_DESPLZ
 500+ 9075              ;
 501+ 9075              ;	Subrutina de [modifica_punteros].
 502+ 9075              ;
 503+ 9075              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
 504+ 9075
 505+ 9075 21 C6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
 506+ 9078 3A D1 84     	ld a,(Vel_left)
 507+ 907B A7           	and a
 508+ 907C 28 06        	jr z,1F
 509+ 907E 47           	ld b,a
 510+ 907F 35           3 dec (hl)
 511+ 9080 10 FD        	djnz 3B
 512+ 9082 18 01        	jr 2F
 513+ 9084 35           1 dec (hl)
 514+ 9085 C9           2 ret
 515+ 9086
 516+ 9086              ; ---------- ---------- ---------- ---------- ---------- ----------
 517+ 9086              ;
 518+ 9086              ;	19/10/22
 519+ 9086              ;
 520+ 9086              ;	(cp 29) para un Amadeus de 3 Columns.
 521+ 9086              ;	(cp 30)   ""  ""    ""     2 Columns.
 522+ 9086
 523+ 9086 3A CF 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
 524+ 9089 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
 525+ 908B C9           	ret
 526+ 908C
 527+ 908C              ; ---------- ---------- ---------- ---------- ---------- ----------
 528+ 908C              ;
 529+ 908C              ;	19/10/22
 530+ 908C              ;
 531+ 908C              ;	(cp 2) para un Amadeus de 3 Columns.
 532+ 908C              ;	(cp 1)   ""  ""    ""     2 Columns.
 533+ 908C
 534+ 908C 3A CF 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
 535+ 908F FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
 536+ 9091 C9           	ret
 537+ 9092
 538+ 9092              ; ---------- ---------- ---------- ---------- ---------- ----------
 539+ 9092              ;
 540+ 9092              ;	24/7/22
 541+ 9092              ;
 542+ 9092              ;	Inc_CTRL_DESPLZ
 543+ 9092              ;
 544+ 9092              ;	Subrutina de [modifica_punteros].
 545+ 9092              ;
 546+ 9092              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
 547+ 9092
 548+ 9092 21 C6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
 549+ 9095 3A D2 84     	ld a,(Vel_right)
 550+ 9098 A7           	and a
 551+ 9099 28 06        	jr z,1F
 552+ 909B 47           	ld b,a
 553+ 909C 34           3 inc (hl)
 554+ 909D 10 FD        	djnz 3B
 555+ 909F 18 01        	jr 2F
 556+ 90A1 34           1 inc (hl)
 557+ 90A2 C9           2 ret
 558+ 90A3
 559+ 90A3              ; ---------- ---------- ---------- ---------- ---------- ----------
 560+ 90A3
 561+ 90A3 2A C4 84     Reaparece_derecha ld hl,(Posicion_actual)
 562+ 90A6 01 1F 00     	ld bc,31
 563+ 90A9 A7           	and a
 564+ 90AA ED 4A        	adc hl,bc
 565+ 90AC 22 C4 84     	ld (Posicion_actual),hl
 566+ 90AF 21 DF 84     	ld hl,Ctrl_0														; $xxx1
 567+ 90B2 CB C6        	set 0,(hl)
 568+ 90B4 C9           	ret
 569+ 90B5
 570+ 90B5              ; ---------- ---------- ---------- ---------- ---------- ----------
 571+ 90B5
 572+ 90B5 2A C4 84     Reaparece_izquierda ld hl,(Posicion_actual)
 573+ 90B8 01 1F 00     	ld bc,31
 574+ 90BB A7           	and a
 575+ 90BC ED 42        	sbc hl,bc
 576+ 90BE 22 C4 84     	ld (Posicion_actual),hl 											; $xx1x
 577+ 90C1 21 DF 84     	ld hl,Ctrl_0
 578+ 90C4 CB CE        	set 1,(hl)
 579+ 90C6 C9           	ret
 580+ 90C7
 581+ 90C7              ; ---------- ---------- ---------- ---------- ---------- ----------
 582+ 90C7
 583+ 90C7 24           Reaparece_abajo inc h
 584+ 90C8 01 E0 17     	ld bc,$17e0
 585+ 90CB A7           	and a
 586+ 90CC ED 4A        	adc hl,bc
 587+ 90CE 22 C4 84     	ld (Posicion_actual),hl
 588+ 90D1 21 DF 84     	ld hl,Ctrl_0
 589+ 90D4 CB D6        	set 2,(hl)
 590+ 90D6 C9           	ret
 591+ 90D7
 592+ 90D7              ; ---------- ---------- ---------- ---------- ---------- ----------
 593+ 90D7
 594+ 90D7 01 E0 17     Reaparece_arriba ld bc,$17e0
 595+ 90DA A7           	and a
 596+ 90DB ED 42        	sbc hl,bc
 597+ 90DD 22 C4 84     	ld (Posicion_actual),hl
 598+ 90E0 21 DF 84     	ld hl,Ctrl_0
 599+ 90E3 CB DE        	set 3,(hl)
 600+ 90E5 C9           	ret
 601+ 90E6
 602+ 90E6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 603+ 90E6              ;   24/07/22
 604+ 90E6              ;
 605+ 90E6              ;	INPUT:
 606+ 90E6              ;
 607+ 90E6              ;	B contiene el nº de filas del objeto.
 608+ 90E6              ;
 609+ 90E6              ;	OUTPUT:
 610+ 90E6              ;
 611+ 90E6              ;	B, DE y DE´ ..... Contendrán el nº de scanlines del objeto. (Filas*8).
 612+ 90E6              ;	C ..... Contendrá la variable (Columns).
 613+ 90E6              ;
 614+ 90E6              ;	DESTRUYE !!!!! BC, DE y DE´.
 615+ 90E6
 616+ 90E6 CD AD 89     Calcula_scanlines_totales call Prepara_draw                         ; [Prepara_draw] proporciona (Filas) y (Columns) del objeto.
 617+ 90E9 CB 20         	sla b
 618+ 90EB CB 20        	sla b
 619+ 90ED CB 20        	sla b 															; Ahora tengo en A: (Filas*Columnas)*8
 620+ 90EF 58               ld e,b
 621+ 90F0 16 00            ld d,0                                                          ; (Filas)*8 en E.
 622+ 90F2 D5               push de
 623+ 90F3 D9           	exx
 624+ 90F4 D1               pop de                                                          ; (Filas)*8 en DE y DE´.
 625+ 90F5 D9           	exx
 626+ 90F6 C9           	ret
 627+ 90F7
 628+ 90F7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 629+ 90F7
 630+ 90F7 2A CC 84     Reinicio ld hl,(Posicion_inicio)
 631+ 90FA
 632+ 90FA              ;	ld (Posicion_actual),hl
 633+ 90FA 21 00 00     	ld hl,0
 634+ 90FD 22 C4 84     	ld (Posicion_actual),hl
 635+ 9100
 636+ 9100
 637+ 9100 C9           	ret
# file closed: Direcciones.asm
 635  9101              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
   1+ 9101
   2+ 9101 F5           Genera_coordenadas push af
   3+ 9102 C5           	push bc
   4+ 9103 D5           	push de
   5+ 9104 E5           	push hl
   6+ 9105
   7+ 9105 2A C4 84     	ld hl,(Posicion_actual)
   8+ 9108 CD 6F 8D     	call calcula_tercio
   9+ 910B 47           	ld b,a 												; Tercio de pantalla en B, (0,1 o 2).
  10+ 910C 0E 00        	ld c,0 												; Contador de líneas a "0".
  11+ 910E 7D           	ld a,l
  12+ 910F E6 1F        	and $1f
  13+ 9111 32 CF 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
  14+ 9114 7D           	ld a,l
  15+ 9115 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
  16+ 9117 57           	ld d,a
  17+ 9118 79           	ld a,c 												; Inicializo (A). Va a actuar como comparador, se inicia en "0" y se incrementa en $20 unidades hasta coincidir_
  18+ 9119 BA           1 cp d 													; Comparación.
  19+ 911A 28 05        	jr z,2F
  20+ 911C C6 20        	add 32
  21+ 911E 0C           	inc c
  22+ 911F 18 F8        	jr 1B
  23+ 9121 78           2 ld a,b 												; Tercio de pantalla en el que nos encontramos en (B).
  24+ 9122 A7           	and a
  25+ 9123 28 0A        	jr z,4F
  26+ 9125 FE 02        	cp 2
  27+ 9127 20 04        	jr nz,3F
  28+ 9129 06 10        	ld b,16
  29+ 912B 18 02        	jr 4F
  30+ 912D 06 08        3 ld b,8
  31+ 912F 78           4 ld a,b
  32+ 9130 3C           	inc a
  33+ 9131 81           	add c
  34+ 9132 3D           	dec a
  35+ 9133 32 D0 84     	ld (Coordenada_y),a 								; Coordenada Y del sprite, (0-$17).
  36+ 9136
  37+ 9136 E1           	pop hl
  38+ 9137 D1           	pop de
  39+ 9138 C1           	pop bc
  40+ 9139 F1           	pop af
  41+ 913A
  42+ 913A C9           	ret
# file closed: Genera_coordenadas.asm
 636  913B              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
   1+ 913B
   2+ 913B
   3+ 913B              ;   11/8/22
   4+ 913B              ;
   5+ 913B              ;   Base de datos. PATRONES DE MOVIMIENTO.
   6+ 913B              ;
   7+ 913B              ;   Mov_obj.asm
   8+ 913B              ;
   9+ 913B              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
  10+ 913B              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
  11+ 913B              ;
  12+ 913B              ;   Codificación:
  13+ 913B              ;
  14+ 913B              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
  15+ 913B              ;
  16+ 913B
  17+ 913B 02 10 00     Izquierda db 2,%00010000,0
  18+ 913E 02 20 00     Derecha db 2,%00100000,0
  19+ 9141 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
  20+ 9145 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
  21+ 9149 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
  22+ 914D 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
  23+ 9151 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
  23+ 9155 60 42 60 40
  23+ 9159 63
  24+ 915A 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
  24+ 915E 22 A3 80 A0
  25+ 9162 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
  25+ 9166 84 A0 83 A0
  26+ 916A 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
  26+ 916E 80 A3 22 A0
  27+ 9172 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
  27+ 9176 40 60 42 60
  28+ 917A 42 60 44 00      db %01000010,%01100000,%01000100,0
  29+ 917E
  30+ 917E 3E 91        Indice_mov_Badsat defw Derecha
  31+ 9180 45 91        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
  32+ 9182 4D 91        Indice_mov_Badsat3 defw Escaloncitos_izquierda
  33+ 9184 41 91        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
  34+ 9186
  35+ 9186              Movimiento
  36+ 9186
  37+ 9186 3A E5 84         ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
  38+ 9189 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
  39+ 918A 28 02            jr z,1F
  40+ 918C 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
  41+ 918E
  42+ 918E 3A E6 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
  43+ 9191 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
  44+ 9193 32 E6 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
  45+ 9196              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
  46+ 9196 2A E3 84         ld hl,(Puntero_mov)
  47+ 9199 7E               ld a,(hl)
  48+ 919A 32 E5 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
  49+ 919D 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
  50+ 919E 22 E3 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
  51+ 91A1
  52+ 91A1 3A E7 84     Decoder ld a,(Repetimos_db)
  53+ 91A4 A7               and a
  54+ 91A5 20 0C            jr nz,12F
  55+ 91A7 2A E3 84         ld hl,(Puntero_mov)
  56+ 91AA 7E               ld a,(hl)
  57+ 91AB A7               and a
  58+ 91AC 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
  59+ 91AE
  60+ 91AE E6 0F            and $0f
  61+ 91B0 32 E7 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
  62+ 91B3              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
  63+ 91B3 2A E3 84     12 ld hl,(Puntero_mov)
  64+ 91B6 CB 7E            bit 7,(hl)
  65+ 91B8 28 03            jr z,2F
  66+ 91BA CD BB 8D         call Mov_down
  67+ 91BD 2A E3 84     2 ld hl, (Puntero_mov)
  68+ 91C0 CB 76            bit 6,(hl)
  69+ 91C2 28 03            jr z,3F
  70+ 91C4 CD E6 8D         call Mov_up
  71+ 91C7 2A E3 84     3 ld hl, (Puntero_mov)
  72+ 91CA CB 6E            bit 5,(hl)
  73+ 91CC 28 03            jr z,4F
  74+ 91CE CD 11 8E         call Mov_right
  75+ 91D1 2A E3 84     4 ld hl, (Puntero_mov)
  76+ 91D4 CB 66            bit 4,(hl)
  77+ 91D6 28 03            jr z,5F
  78+ 91D8 CD 20 8F         call Mov_left
  79+ 91DB
  80+ 91DB              ; ---------- --------- --------- ---------- ----------
  81+ 91DB
  82+ 91DB 3A E7 84     5 ld a,(Repetimos_db)
  83+ 91DE A7               and a
  84+ 91DF 28 07            jr z,6F
  85+ 91E1 3D               dec a
  86+ 91E2 32 E7 84         ld (Repetimos_db),a
  87+ 91E5 28 01            jr z,6f
  88+ 91E7 C9           11 ret
  89+ 91E8 21 E5 84     6 ld hl,Contador_db_mov
  90+ 91EB 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
  91+ 91EC 2A E3 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
  92+ 91EF 23               inc hl
  93+ 91F0 22 E3 84         ld (Puntero_mov),hl
  94+ 91F3 18 F2            jr 11B
  95+ 91F5 2A E1 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
  96+ 91F8 3A E6 84         ld a,(Incrementa_puntero)
  97+ 91FB 47               ld b,a
  98+ 91FC 23           8 inc hl
  99+ 91FD 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 100+ 91FF 5E               ld e,(hl)
 101+ 9200 23               inc hl
 102+ 9201 56               ld d,(hl)
 103+ 9202 EB               ex de,hl
 104+ 9203 22 E3 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
 105+ 9206 18 DF            jr 11B
 106+ 9208
 107+ 9208              ; ---------- --------- --------- ---------- ----------
 108+ 9208              ;
 109+ 9208              ;   11/8/22
 110+ 9208              ;
 111+ 9208              ;   Prepara_Puntero_mov
 112+ 9208
 113+ 9208 E5           Prepara_Puntero_mov push hl
 114+ 9209 D5               push de
 115+ 920A 2A E1 84         ld hl,(Puntero_indice_mov)
 116+ 920D 5E               ld e,(hl)
 117+ 920E 23               inc hl
 118+ 920F 56               ld d,(hl)
 119+ 9210 EB               ex de,hl
 120+ 9211 22 E3 84         ld (Puntero_mov),hl
 121+ 9214 D1               pop de
 122+ 9215 E1               pop hl
 123+ 9216 C9               ret
 124+ 9217
 125+ 9217              ; ---------- --------- --------- ---------- ----------
 126+ 9217              ;
 127+ 9217              ;   11/8/22
 128+ 9217              ;
 129+ 9217              ;   Reinicia_el_movimiento
 130+ 9217
 131+ 9217 CD 08 92     Reinicia_el_movimiento call Prepara_Puntero_mov
 132+ 921A AF               xor a
 133+ 921B 32 E5 84         ld (Contador_db_mov),a
 134+ 921E 32 E6 84         ld (Incrementa_puntero),a
 135+ 9221 C3 86 91         jp Movimiento
 136+ 9224
 137+ 9224              ; ---------- --------- --------- ---------- ----------
 138+ 9224
 139+ 9224
 140+ 9224
 141+ 9224
 142+ 9224
 143+ 9224
 144+ 9224
 145+ 9224
 146+ 9224
 147+ 9224
 148+ 9224
 149+ 9224
 150+ 9224
 151+ 9224
 152+ 9224
 153+ 9224
 154+ 9224
 155+ 9224
# file closed: Patrones_de_mov.asm
 637  9224              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
   1+ 9224              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   2+ 9224              ;
   3+ 9224              ;	8/11/22
   4+ 9224              ;
   5+ 9224              ;	Instrucciones donde interviene el Stack Pointer, (SP).
   6+ 9224
   7+ 9224              ;	ADC HL,SP	LD (addr),SP
   8+ 9224              ;	ADD HL,SP	LD SP,(addr)
   9+ 9224              ;	ADD IX,SP	LD SP,nn
  10+ 9224              ; 	ADD IY,SP	LD SP,HL
  11+ 9224              ;				LD SP,IX
  12+ 9224              ;	DEC SP		LD SP,IY
  13+ 9224
  14+ 9224              ;	EX (SP),HL
  15+ 9224              ;	EX (SP),IX
  16+ 9224              ;	EX (SP),IY
  17+ 9224
  18+ 9224              ;	INC SP
  19+ 9224
  20+ 9224
  21+ 9224                  org $7fa0
  22+ 7FA0
  23+ 7FA0 ED 73 FC 84  Guarda_foto_registros ld (Stack),sp			                      ; Guardo SP en (Stack).
  24+ 7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
  25+ 7FA7
  26+ 7FA7 E5               push hl
  27+ 7FA8 C5               push bc
  28+ 7FA9 D5               push de
  29+ 7FAA DD E5            push ix
  30+ 7FAC
  31+ 7FAC 08               ex af,af
  32+ 7FAD F5               push af
  33+ 7FAE 08               ex af,af
  34+ 7FAF
  35+ 7FAF D9               exx
  36+ 7FB0 C5               push bc
  37+ 7FB1 E5               push hl                                        ; Hacemos un SNAPSHOT de los registros.
  38+ 7FB2 D9               exx
  39+ 7FB3
  40+ 7FB3 2A 00 85         ld hl,(Stack_snapshot)                         ; Album_de_fotos contiene la imagen de los registros implicados en el_
  41+ 7FB6 06 07            ld b,7                                         ; _correcto funcionamiento de [Pintorrejeo].
  42+ 7FB8
  43+ 7FB8 D1           1 pop de
  44+ 7FB9 73               ld (hl),e
  45+ 7FBA 23               inc hl
  46+ 7FBB 72               ld (hl),d
  47+ 7FBC 23               inc hl                                         ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
  48+ 7FBD 10 F9            djnz 1B
  49+ 7FBF
  50+ 7FBF 22 00 85         ld (Stack_snapshot),hl
  51+ 7FC2 ED 7B FC 84      ld sp,(Stack)
  52+ 7FC6
  53+ 7FC6 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
  54+ 7FC7
  55+ 7FC7
# file closed: Guarda_foto_registros.asm
 638  7FC7
 639  7FC7              	SAVESNA "Pruebas.sna", START
 640  7FC7
 641  7FC7
 642  7FC7
# file closed: Banco_de_pruebas.asm
