# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 21 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 FA 83        	defw Badsat
  9+  83C2              ;	defw Badsat2
 10+  83C2              ;	defw Badsat3
 11+  83C2              ;	defw Badsat4
 12+  83C2 C8 83        	defw Amadeus_db
 13+  83C4              ;	...
 14+  83C4              ;	...
 15+  83C4              ;	+ entidades ...
 16+  83C4
 17+  83C4 00 00        	defw 0
 18+  83C6 00 00        	defw 0
 19+  83C8
 20+  83C8              ; ---------- ---------- ---------- ---------- ----------
 21+  83C8
 22+  83C8 02 02        Amadeus_db db 2,2
 23+  83CA 00 00        	defw 0
 24+  83CC 00           	db 0
 25+  83CD
 26+  83CD 05           	db %00000101
 27+  83CE 00 83        	defw Indice_Amadeus
 28+  83D0 00 00        	defw 0
 29+  83D2 CF 50        	defw $50cf
 30+  83D4 00 00 00     	db 0,0,0
 31+  83D7
 32+  83D7 02 02 00 00  	db 2,2,0,0
 33+  83DB
 34+  83DB 00 00        	db 0,0
 35+  83DD 00 00        	defw 0
 36+  83DF 00           	db 0
 37+  83E0 00 00        	db 0,0
 38+  83E2 00 00        	defw 0
 39+  83E4 00           	db 0
 40+  83E5
 41+  83E5 00 00        	db 0,0
 42+  83E7
 43+  83E7 00 00 00 00  	defw 0,0
 44+  83EB 00 00 00     	db 0,0,0
 45+  83EE
 46+  83EE 00 00        	defw 0
 47+  83F0 00 00        	defw 0
 48+  83F2 00           	db 0
 49+  83F3 00 00        	defw 0
 50+  83F5 00           	db 0
 51+  83F6
 52+  83F6 00 00 00 00  	defw 0,0
 53+  83FA
 54+  83FA              ; ---------- ---------- ---------- ---------- ----------
 55+  83FA
 56+  83FA 02 02        Badsat db 2,2
 57+  83FC 00 00        	defw 0
 58+  83FE 00           	db 0
 59+  83FF
 60+  83FF 06           	db %00000110
 61+  8400 80 81        	defw Indice_Badsat_der
 62+  8402 00 00        	defw 0
 63+  8404 A1 47        	defw $47a1
 64+  8406 00 00 00     	db 0,0,0
 65+  8409
 66+  8409 01 01 01 02  	db 1,1,1,2
 67+  840D
 68+  840D 00 00        	db 0,0
 69+  840F 00 00        	defw 0
 70+  8411 00           	db 0
 71+  8412 00 00        	db 0,0
 72+  8414 00 00        	defw 0
 73+  8416 00           	db 0
 74+  8417
 75+  8417 00 00        	db 0,0
 76+  8419
 77+  8419 5D 8F 00 00  	defw Indice_mov_Badsat,0
 78+  841D 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 79+  8420
 80+  8420 00 00        	defw 0
 81+  8422 00 00        	defw 0
 82+  8424 00           	db 0
 83+  8425 00 00        	defw 0
 84+  8427 00           	db 0
 85+  8428
 86+  8428 00 00 00 00  	defw 0,0
 87+  842C
 88+  842C              ; ---------- ---------- ---------- ---------- ----------
 89+  842C
 90+  842C 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 91+  842E 00 00        	defw 0                                            ; Posicion_actual
 92+  8430 00           	db 0                                              ; CTRL_DESPLZ
 93+  8431
 94+  8431 02           	db %00000010
 95+  8432 00 80        	defw Indice_Badsat_izq	                          ; Indice_Sprite
 96+  8434 00 00        	defw 0                                            ; Puntero_DESPLZ
 97+  8436 61 47        	defw $4761                                        ; Posicion_inicio
 98+  8438 00 00 00     	db 0,0,0
 99+  843B
100+  843B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
101+  843F
102+  843F 00 00        	db 0,0
103+  8441 00 00        	defw 0
104+  8443 00           	db 0
105+  8444 00 00        	db 0,0
106+  8446 00 00        	defw 0
107+  8448 00           	db 0
108+  8449
109+  8449 00 00        	db 0,0
110+  844B
111+  844B 5F 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
112+  844F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
113+  8452
114+  8452 00 00        	defw 0
115+  8454 00 00        	defw 0
116+  8456 00           	db 0
117+  8457 00 00        	defw 0
118+  8459 00           	db 0
119+  845A
120+  845A 00 00 00 00  	defw 0,0
121+  845E
122+  845E              ; ---------- ---------- ---------- ---------- ----------
123+  845E
124+  845E 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
125+  8460 00 00        	defw 0                                            ; Posicion_actual
126+  8462 00           	db 0                                              ; CTRL_DESPLZ
127+  8463
128+  8463 04           	db %00000100
129+  8464 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
130+  8466 00 00        	defw 0                                            ; Puntero_DESPLZ
131+  8468 7E 47        	defw $477e                                        ; Posicion_inicio
132+  846A 00 00 00     	db 0,0,0
133+  846D
134+  846D 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
135+  8471
136+  8471 00 00        	db 0,0
137+  8473 00 00        	defw 0
138+  8475 00           	db 0
139+  8476 00 00        	db 0,0
140+  8478 00 00        	defw 0
141+  847A 00           	db 0
142+  847B
143+  847B 00 00        	db 0,0
144+  847D
145+  847D 61 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
146+  8481 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
147+  8484
148+  8484 00 00        	defw 0
149+  8486 00 00        	defw 0
150+  8488 00           	db 0
151+  8489 00 00        	defw 0
152+  848B 00           	db 0
153+  848C
154+  848C 00 00 00 00  	defw 0,0
155+  8490
156+  8490              ; ---------- ---------- ---------- ---------- ----------
157+  8490
158+  8490 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
159+  8492 00 00        	defw 0                                            ; Posicion_actual
160+  8494 00           	db 0                                              ; CTRL_DESPLZ
161+  8495
162+  8495 01           	db %00000001
163+  8496 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
164+  8498 00 00        	defw 0                                            ; Puntero_DESPLZ
165+  849A BE 47        	defw $47be                                        ; Posicion_inicio
166+  849C 00 00 00     	db 0,0,0
167+  849F
168+  849F 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
169+  84A3
170+  84A3 00 00        	db 0,0
171+  84A5 00 00        	defw 0
172+  84A7 00           	db 0
173+  84A8 00 00        	db 0,0
174+  84AA 00 00        	defw 0
175+  84AC 00           	db 0
176+  84AD
177+  84AD 00 00        	db 0,0
178+  84AF
179+  84AF 63 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
180+  84B3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
181+  84B6
182+  84B6 00 00        	defw 0
183+  84B8 00 00        	defw 0
184+  84BA 00           	db 0
185+  84BB 00 00        	defw 0
186+  84BD 00           	db 0
187+  84BE
188+  84BE 00 00 00 00  	defw 0,0
189+  84C2
# file closed: Base_de_datos_Sprites.asm
 21   84C2
 22   84C2              ; ******************************************************************************************************************************************************************************************
 23   84C2              ; Constantes.
 24   84C2              ; ******************************************************************************************************************************************************************************************
 25   84C2              ;
 26   84C2              ; 8/11/22
 27   84C2              ;
 28   84C2              ; Constantes generales.
 29   84C2              ;
 30   84C2
 31   84C2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84C2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84C2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84C2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84C2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84C2
 37   84C2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84C2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84C2
 40   84C2
 41   84C2              ; ******************************************************************************************************************************************************************************************
 42   84C2              ; Variables.
 43   84C2              ; ******************************************************************************************************************************************************************************************
 44   84C2              ;
 45   84C2              ; 10/11/22
 46   84C2              ;
 47   84C2              ; Variables de DRAW. (Motor principal).
 48   84C2              ;
 49   84C2
 50   84C2 02           Filas db 2												; Filas. [DRAW]
 51   84C3 03           Columns db 3  											; Nº de columnas. [DRAW]
 52   84C4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84C6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 54   84C7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 55   84C7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 56   84C7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 57   84C7 06           Attr db %00000110										; Atributos de la entidad:
 58   84C8
 59   84C8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 60   84C8              ;
 61   84C8              ;	COLORES: 0 ..... NEGRO
 62   84C8              ;    		 1 ..... AZUL
 63   84C8              ; 			 2 ..... ROJO
 64   84C8              ;			 3 ..... MAGENTA
 65   84C8              ; 			 4 ..... VERDE
 66   84C8              ; 			 5 ..... CIAN
 67   84C8              ;			 6 ..... AMARILLO
 68   84C8              ; 			 7 ..... BLANCO
 69   84C8
 70   84C8 00 00        Indice_Sprite defw 0
 71   84CA 00 00        Puntero_DESPLZ defw 0
 72   84CC D7 50        Posicion_inicio defw $50d7								; Dirección de pantalla donde aparece el objeto. [DRAW]
 73   84CE 04           Cuad_objeto db 4			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 74   84CF 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 75   84D0 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 76   84D1
 77   84D1              ; Variables de objeto. (Características).
 78   84D1
 79   84D1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 80   84D2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 81   84D3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 82   84D4 03           Vel_down db 3 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 83   84D5
 84   84D5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 85   84D7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 86   84D9 00           	db 0
 87   84DA 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 88   84DC 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 89   84DE 00           	db 0
 90   84DF
 91   84DF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 92   84DF
 93   84DF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 94   84E0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 95   84E0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 96   84E0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
 97   84E0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
 98   84E0              ;
 99   84E0              ; 														DESCRIPCIÖN:
100   84E0              ;
101   84E0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
102   84E0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
103   84E0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
104   84E0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
105   84E0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
106   84E0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
107   84E0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
108   84E0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
109   84E0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
110   84E0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
111   84E0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
112   84E0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
113   84E0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
114   84E0              ;
115   84E0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
116   84E0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
117   84E0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
118   84E0
119   84E0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
120   84E1
121   84E1              ; Movimiento.
122   84E1
123   84E1 00 00        Puntero_indice_mov defw 0
124   84E3 00 00        Puntero_mov defw 0
125   84E5 00           Contador_db_mov db 0
126   84E6 00           Incrementa_puntero db 0
127   84E7 00           Repetimos_db db 0
128   84E8
129   84E8
130   84E8              ; Variables de funcionamiento. [DRAW].
131   84E8
132   84E8 30 83        Puntero_objeto defw Amadeus_F9							; Donde están los datos para pintar el Sprite.
133   84EA 00 00        Puntero_datas defw 0
134   84EC 00           Columnas db 0
135   84ED 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
136   84EF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
137   84EF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
138   84F0
139   84F0
140   84F0              ; Cajas. Almacenes.
141   84F0
142   84F0 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
143   84F2 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
144   84F4
145   84F4              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
146   84F4
147   84F4              ; Gestión de ENTIDADES.
148   84F4
149   84F4 00 00        Puntero_store_entidades defw 0
150   84F6 00 00        Puntero_restore_entidades defw 0
151   84F8 00 00        Indice_restore defw 0
152   84FA
153   84FA              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
154   84FA
155   84FA 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
156   84FB 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
157   84FC              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
158   84FC              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
159   84FC              ;														; _ (Numero_de_malotes)="0".
160   84FC 00 00        Stack defw 0 											; La rutina de pintado, [Pintorrejeo], utiliza esta_
161   84FE              ;														; _variable para almacenar lo posición del puntero_
162   84FE              ; 														; _de pila, SP.
163   84FE 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
164   8500              ;														; La utiliza la rutina [Extrae_foto_registros].
165   8500 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
166   8502              ;														; _el snapshot de los registros de la siguiente entidad.
167   8502              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
168   8502
169   8502              ; Gestión de FRAMES.
170   8502
171   8502 00           Switch db 0
172   8503
173   8503              ; Variables de Raster y localización en pantalla.
174   8503
175   8503 00 FF        Temp_Raster defw $ff00
176   8505
177   8505              ; Rutina principal *************************************************************************************************************************************************************************
178   8505              ;
179   8505              ;	14/11/22
180   8505
181   8505 31 FF FF     START ld sp,$ffff
182   8508
183   8508 3E A0        	ld a,$a0
184   850A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
185   850C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
186   850E F3           	DI
187   850F
188   850F              ;	xor a												 ; Borde NEGRO. PAPER CYAN, INK BLACK.
189   850F              ;	out ($fe),a
190   850F
191   850F 3E 01        	ld a,1
192   8511 D3 FE        	out ($fe),a
193   8513
194   8513 3E 07        	ld a,%00000111
195   8515 CD A2 8B     	call Cls
196   8518
197   8518              ;	call Pinta_FILAS
198   8518
199   8518 CD 2B 86     	call Pulsa_ENTER
200   851B
201   851B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
202   851B              ;   Inicialmente tengo cargado a Amadeus en el engine.
203   851B              ;	Pintamos el resto de entidades:
204   851B
205   851B              ;	call Inicia_punteros_de_entidades
206   851B              ;	ld hl,Numero_de_entidades
207   851B              ;	ld b,(hl)
208   851B
209   851B              ;1 push bc  												; Guardo el contador de entidades.
210   851B              ; 	call Inicia_sprite
211   851B CD 82 86     	call Draw
212   851E              ;	call Guarda_foto_registros
213   851E              ;	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
214   851E              ;	pop bc
215   851E              ;	djnz 1B  											; Decremento (CONTANDOR AMADEUS).
216   851E
217   851E              ; Volvemos a situar los punteros STORE/RESTORE de entidades en AMADEUS y cargamos los datos de nuestra nave en el engine.
218   851E
219   851E              ;    call Inicia_punteros_de_entidades
220   851E              ;    call Restore_Primera_entidad
221   851E
222   851E FB           4 ei
223   851F 18 FD        	jr 4B
224   8521
225   8521              ; -----------------------------------------------------------------------------------
226   8521
227   8521              Frame
228   8521
229   8521              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
230   8521              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
231   8521
232   8521
233   8521              ;	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
234   8521
235   8521              ;	ld a,7
236   8521              ;   out ($fe),a
237   8521              ;	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   8521
239   8521
240   8521
241   8521              ;	ld a,7
242   8521               ;   out ($fe),a
243   8521
244   8521              ;    call DELAY
245   8521
246   8521              ;    ld a,7
247   8521              ;    out ($fe),a
248   8521
249   8521
250   8521              ;    call DELAY
251   8521
252   8521
253   8521 3E 01            ld a,1
254   8523 D3 FE            out ($fe),a
255   8525
256   8525
257   8525
258   8525              ;	ld hl,$4000
259   8525              ;    ld b,8
260   8525              ;    call Pinta_enemigo_3x2
261   8525
262   8525              ;    ld hl,$4041
263   8525              ;    ld b,8
264   8525              ;    call Pinta_enemigo_3x2
265   8525
266   8525              ;	ld hl,$4082
267   8525              ;    ld b,8
268   8525              ;    call Pinta_enemigo_3x2
269   8525
270   8525              ;    ld hl,$40c3
271   8525              ;    ld b,8
272   8525              ;    call Pinta_enemigo_3x2
273   8525
274   8525              ;    ld hl,$4804
275   8525              ;    ld b,16
276   8525              ;    call Pinta_enemigo_2x2
277   8525
278   8525              ; -----
279   8525
280   8525              ;	ld hl,$50df
281   8525              ;	ld b,8
282   8525              ;;	call Pinta_enemigo_3x2_derecha_1columna;;
283   8525
284   8525              ;    xor a
285   8525              ;    out ($fe),a
286   8525
287   8525
288   8525              ; ----------------------------------------------------------------------
289   8525
290   8525              ;;	ld a,1
291   8525              ;;	out ($fe),a
292   8525
293   8525              ;;	ld hl,Album_de_fotos
294   8525              ;;    ld (Stack_snapshot),hl								; Nos situamos al principio del álbum de fotos.
295   8525              ;;    ld a,(Numero_de_entidades)
296   8525              ;;    ld b,a
297   8525
298   8525              ;;2 push bc
299   8525
300   8525              ;;	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
301   8525
302   8525              ;; 	ld a,(Ctrl_0)
303   8525              ;;	bit 4,a
304   8525              ;;	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
305   8525              ; ---------
306   8525
307   8525              ;    call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
308   8525
309   8525              ;	ld hl,Ctrl_0
310   8525              ;    res 4,(hl)
311   8525
312   8525              ;1 call Store_Restore_entidades
313   8525
314   8525              ;	pop bc
315   8525              ;	djnz 2B
316   8525
317   8525              ;	call Inicia_punteros_de_entidades
318   8525              ;	call Restore_Primera_entidad
319   8525
320   8525              ;	ld a,0
321   8525              ;	out ($fe),a
322   8525
323   8525              ;	jr $
324   8525
325   8525 C9           	ret
326   8526
327   8526              ; --------------------------------------------------------------------------------------------------------------
328   8526              ;
329   8526              Mov_obj
330   8526
331   8526 CD 97 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
332   8529 CD 68 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´.
333   852C
334   852C 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla. En este caso, (Mod_puntero_datas) sitúa_
335   852E 32 E0 84     	ld (Obj_dibujado),a 								; (Puntero_datas) en la Caja_de_BORRADO.
336   8531
337   8531              ; Movemos Amadeus o enemigos...
338   8531
339   8531 3A DF 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
340   8534 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
341   8536 C4 3F 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
342   8539
343   8539 3A DF 84     	ld a,(Ctrl_0)
344   853C CB 77        	bit 6,a
345   853E CC 65 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
346   8541
347   8541 3A DF 84     	ld a,(Ctrl_0) 										; Salimos de la rutina si no ha habido movimiento.
348   8544 CB 67        	bit 4,a
349   8546 C8           	ret z
350   8547              ; ---------
351   8547
352   8547 CD 68 85         call Prepara_var_pintado_borrado	                ; Almaceno las `VARIABLES DE PINTADO´.
353   854A CD 7F 85         call Repone_borrar
354   854D CD 26 8E     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
355   8550 CD 82 86     	call Draw											; Preparamos las variables para borrar.
356   8553 CD A0 7F     	call Guarda_foto_registros
357   8556
358   8556 C9           	ret
359   8557
360   8557              ; --------------------------------------------------------------------------------------------------------------
361   8557              ;
362   8557 AF           Borra_Pinta_obj xor a
363   8558 32 E0 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
364   855B CD 8B 85     	call Repone_pintar
365   855E CD 26 8E     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
366   8561 CD 82 86     	call Draw
367   8564 CD A0 7F     	call Guarda_foto_registros
368   8567 C9           	ret
369   8568
370   8568              ; --------------------------------------------------------------------------------------------------------------
371   8568
372   8568 21 C2 84     Prepara_var_pintado_borrado	ld hl,Filas
373   856B 3A E0 84     	ld a,(Obj_dibujado)
374   856E A7           	and a
375   856F 28 05        	jr z,1F
376   8571 11 DA 84     	ld de,Variables_de_pintado
377   8574 18 03        	jr 2F
378   8576 11 D5 84     1 ld de,Variables_de_borrado
379   8579 01 05 00     2 ld bc,5
380   857C ED B0        	ldir
381   857E C9           	ret
382   857F
383   857F 21 D5 84     Repone_borrar ld hl,Variables_de_borrado
384   8582 11 C2 84     	ld de,Filas
385   8585 01 05 00     	ld bc,5
386   8588 ED B0        	ldir
387   858A C9           	ret
388   858B
389   858B 21 DA 84     Repone_pintar ld hl,Variables_de_pintado
390   858E 11 C2 84     	ld de,Filas
391   8591 01 05 00     	ld bc,5
392   8594 ED B0        	ldir
393   8596 C9           	ret
394   8597
395   8597 2A F0 84     Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
396   859A 22 F2 84     	ld (Caja_de_BORRADO),hl
397   859D C9           	ret
398   859E
399   859E              ; *************************************************************************************************************************************************************
400   859E              ;
401   859E              ; 21/10/22
402   859E              ;
403   859E              ; Sitúa el puntero (Puntero_store_entidades) en la 1ª entidad del índice.
404   859E              ; Sitúa el puntero (Puntero_restore_entidades) en el 1er `enemigo', (2º entidad del índice).
405   859E              ; Destruye HL y DE !!!!!
406   859E
407   859E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
408   85A1 CD C7 85         call Extrae_address
409   85A4 22 F4 84         ld (Puntero_store_entidades),hl
410   85A7
411   85A7 21 C2 83     	ld hl,Indice_de_entidades+2
412   85AA 22 F8 84     	ld (Indice_restore),hl
413   85AD CD C7 85     	call Extrae_address
414   85B0 22 F6 84     	ld (Puntero_restore_entidades),hl
415   85B3
416   85B3 C9               ret
417   85B4
418   85B4              ; -------------------------------------------------------------------------------------------------------------
419   85B4              ;
420   85B4              ; 16/11/22
421   85B4
422   85B4 2A 00 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
423   85B7 AF           	xor a
424   85B8 67           	ld h,a
425   85B9 7D           	ld a,l
426   85BA D6 0E        1 sub 14
427   85BC 28 03        	jr z,2F
428   85BE 24           	inc h
429   85BF 18 F9        	jr 1B
430   85C1 24           2 inc h
431   85C2 7C           	ld a,h
432   85C3 32 FB 84     	ld (Numero_de_malotes),a
433   85C6 C9           	ret
434   85C7
435   85C7              ; *************************************************************************************************************************************************************
436   85C7              ;
437   85C7              ; 20/10/22
438   85C7              ;
439   85C7              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
440   85C7              ;
441   85C7              ; Destruye el puntero y DE !!!!!
442   85C7
443   85C7 5E           Extrae_address ld e,(hl)
444   85C8 23           	inc hl
445   85C9 56           	ld d,(hl)
446   85CA 2B           	dec hl
447   85CB EB           	ex de,hl
448   85CC C9           	ret
449   85CD
450   85CD              ; *************************************************************************************************************************************************************
451   85CD              ;
452   85CD              ;	21/9/22
453   85CD              ;
454   85CD              ;   Destruye HL !!!!!,
455   85CD
456   85CD 2A C8 84     Inicia_sprite ld hl,(Indice_Sprite)
457   85D0 22 CA 84     	ld (Puntero_DESPLZ),hl
458   85D3 CD C7 85     	call Extrae_address
459   85D6 22 E8 84     	ld (Puntero_objeto),hl
460   85D9
461   85D9              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
462   85D9
463   85D9 21 10 83     	ld hl,Amadeus
464   85DC ED 4B E8 84  	ld bc,(Puntero_objeto)
465   85E0 B7 ED 42     	sub hl,bc
466   85E3 C0           	ret nz
467   85E4
468   85E4 21 DF 84     	ld hl,Ctrl_0
469   85E7 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
470   85E9
471   85E9 C9            	ret 												; _de nuestra nave en los extremos.
472   85EA
473   85EA              ; *************************************************************************************************************************************************************
474   85EA              ;
475   85EA              ;	22/10/22
476   85EA              ;
477   85EA              ;	Almacena los datos del Sprite que tenemos cargado en DRAW, en su respectiva BASE DE DATOS.
478   85EA
479   85EA              Store_Restore_entidades
480   85EA
481   85EA E5           	push hl
482   85EB D5           	push de
483   85EC C5            	push bc
484   85ED
485   85ED              ;	STORE !!!!!
486   85ED
487   85ED 21 C2 84     	ld hl,Filas
488   85F0 ED 5B F4 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
489   85F4 01 32 00     	ld bc,50
490   85F7 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
491   85F9
492   85F9              ;	Incrementa STORE y ejecuta RESTORE !!!!!
493   85F9
494   85F9 2A F6 84     	ld hl,(Puntero_restore_entidades)
495   85FC 22 F4 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
496   85FF 11 C2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
497   8602 01 32 00     	ld bc,50
498   8605 ED B0        	ldir
499   8607
500   8607              ;	Incrementa RESTORE !!!!!
501   8607
502   8607 2A F8 84         ld hl,(Indice_restore)
503   860A 23           	inc hl
504   860B 23           	inc hl
505   860C 22 F8 84     	ld (Indice_restore),hl
506   860F CD C7 85         call Extrae_address
507   8612 22 F6 84         ld (Puntero_restore_entidades),hl
508   8615
509   8615 C1           	pop bc
510   8616 D1           	pop de
511   8617 E1           	pop hl
512   8618
513   8618 C9           	ret
514   8619
515   8619              ; **************************************************************************************************
516   8619              ;
517   8619              ;	29/10/22
518   8619              ;
519   8619              ;	Cargamos los datos de la 1º entidad en el `engine'.
520   8619
521   8619 E5           Restore_Primera_entidad push hl
522   861A D5           	push de
523   861B C5            	push bc
524   861C
525   861C 2A F4 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de Amadeus.
526   861F 11 C2 84     	ld de,Filas
527   8622 01 32 00     	ld bc,50
528   8625 ED B0        	ldir
529   8627
530   8627 C1           	pop bc
531   8628 D1           	pop de
532   8629 E1           	pop hl
533   862A
534   862A C9           	ret
535   862B
536   862B              ; *************************************************************************************************************************************************************
537   862B              ;
538   862B              ; Teclado.
539   862B
540   862B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
541   862D DB FE        	in a,($fe)
542   862F E6 01        	and $01
543   8631 28 02        	jr z,1f
544   8633 18 F6        	jr Pulsa_ENTER
545   8635 C9           1 ret
546   8636
547   8636              ; **************************************************************************************************
548   8636              ;
549   8636              ; Temporización.
550   8636
551   8636              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
552   8636              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
553   8636              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
554   8636              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
555   8636
556   8636              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
557   8636              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
558   8636              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
559   8636
560   8636              ; A partir de $4f61 no hace falta DELAY.
561   8636
562   8636              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
563   8636
564   8636 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
565   8639 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
566   863A 78           	LD A,B
567   863B A7           	AND A
568   863C 20 FB        	JR NZ,wait
569   863E C9           	RET
570   863F
571   863F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
572   863F              ;
573   863F              ;	21/4/22
574   863F
575   863F              Movimiento_Amadeus
576   863F
577   863F 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
578   8641 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
579   8643 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
580   8645 CC 1B 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
581   8648 3E F7        	ld a,$f7
582   864A DB FE        	in a,($fe)
583   864C E6 01        	and $01
584   864E C8           	ret z
585   864F 3E F7        	ld a,$f7
586   8651 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
587   8653 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
588   8655 CC 0C 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
589   8658 C9               ret
590   8659
591   8659              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
592   8659
593   8659              ; Pinta indicadores de FILAS. ------------------------------------------------------
594   8659
595   8659 21 10 40     Pinta_FILAS ld hl,$4010
596   865C              ;	ld b,9
597   865C              ;2 push hl
598   865C              ;	push bc
599   865C 06 BF        	ld b,$bf
600   865E 36 80        1 ld (hl),%10000000
601   8660 CD FC 88     	call NextScan
602   8663 10 F9        	djnz 1B
603   8665              ;	pop bc
604   8665              ;	pop hl
605   8665              ;	inc l
606   8665              ;	djnz 2B
607   8665
608   8665 06 03        	ld b,3
609   8667 21 00 47         ld hl,$4700
610   866A CD 70 86     3 call Bucle_1
611   866D 10 FB            djnz 3B
612   866F C9               ret
613   8670
614   8670 C5           Bucle_1 push bc
615   8671 E5                   push hl
616   8672 D1                   pop de
617   8673 13                   inc de
618   8674 01 FF 00             ld bc,255
619   8677 36 FF                ld (hl),255
620   8679 ED B0                ldir
621   867B 23                   inc hl
622   867C 3E 07                ld a,7
623   867E 84                   add a,h
624   867F 67                   ld h,a
625   8680 C1                   pop bc
626   8681 C9                   ret
627   8682
628   8682              ; ---------------------------------------------------------------
629   8682
630   8682              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8682              ; ******************************************************************************************************************************************************************************************
  2+  8682              ;
  3+  8682              ; 17/08/22
  4+  8682              ;
  5+  8682              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8682
  7+  8682 CD F0 88     Draw call Prepara_draw
  8+  8685 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8686 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8687 28 05        	jr z,2F
 11+  8689 3A CE 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  868C 18 0C        	jr 1F
 13+  868E 2A CC 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8691 22 C4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8694 CD 22 88     	call Inicializacion
 16+  8697 CD E7 8F     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 17+  869A 3A DF 84     1 ld a,(Ctrl_0)
 18+  869D CB 6F        	bit 5,a
 19+  869F 20 06        	jr nz,3F
 20+  86A1 CD B0 86     	call Comprueba_limite_horizontal
 21+  86A4 CD 43 87     	call Comprueba_limite_vertical
 22+  86A7
 23+  86A7              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 24+  86A7
 25+  86A7 CD CB 88     3 call calcula_columna
 26+  86AA              ;    call Converter
 27+  86AA
 28+  86AA 21 DF 84     	ld hl,Ctrl_0
 29+  86AD CB AE        	res 5,(hl)
 30+  86AF C9           	ret
 31+  86B0
 32+  86B0              ; *******************************************************************************************************************************************************************************************
 33+  86B0              ;	23/8/22
 34+  86B0              ;
 35+  86B0              ; 	Comprueba_limite_horizontal.
 36+  86B0              ;
 37+  86B0
 38+  86B0 3A E0 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 39+  86B3 A7           	and a
 40+  86B4 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 41+  86B5
 42+  86B5 3A DF 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 43+  86B8 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 44+  86BA 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 45+  86BC
 46+  86BC E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 47+  86BE 32 DF 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 48+  86C1 18 09            jr 6F
 49+  86C3 CB 5F        1 bit 3,a
 50+  86C5 28 0D            jr z,2F
 51+  86C7 E6 F7            and $f7
 52+  86C9 32 DF 84         ld (Ctrl_0),a
 53+  86CC CD 22 88     6 call Inicializacion
 54+  86CF F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 55+  86D0 08           	ex af,af
 56+  86D1 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 57+  86D2 18 56            jr 5F
 58+  86D4 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 59+  86D5
 60+  86D5              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 61+  86D5              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 62+  86D5
 63+  86D5 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 64+  86D6 2A ED 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 65+  86D9 CD 6A 8B     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 66+  86DC 67           	ld h,a
 67+  86DD EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 68+  86DE CD 6A 8B     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 69+  86E1 67           	ld h,a
 70+  86E2 A7           	and a
 71+  86E3 ED 52        	sbc hl,de 										; Posicíon - Límite.
 72+  86E5
 73+  86E5 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 74+  86E6 FE 02        	cp 2
 75+  86E8 38 1C        	jr c,3F
 76+  86EA 28 1A        	jr z,3F
 77+  86EC
 78+  86EC 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 79+  86ED 28 21            jr z,7F
 80+  86EF 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 81+  86F1              ;	ld e,0
 82+  86F1 E1           	pop hl
 83+  86F2
 84+  86F2              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 85+  86F2              ; _para indicar con E="2" en caso necesario.
 86+  86F2
 87+  86F2 E5               push hl
 88+  86F3 C5               push bc
 89+  86F4
 90+  86F4 CD 6A 8B     	call calcula_tercio
 91+  86F7 FE 01        	cp 1
 92+  86F9 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 93+  86FB
 94+  86FB CD 2B 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 95+  86FE 28 26            jr z,9F
 96+  8700 38 24            jr c,9F
 97+  8702 1E 00        11 ld e,0
 98+  8704 18 22            jr 8F
 99+  8706
100+  8706 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
101+  8707 28 07        	jr z, 7F
102+  8709 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
103+  870B 1E 00         	ld e,0
104+  870D E1           	pop hl
105+  870E 18 04        	jr 4F
106+  8710 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
107+  8712 18 15            jr 10F
108+  8714
109+  8714              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
110+  8714              ; _para indicar con E="2" en caso necesario.
111+  8714
112+  8714 E5           4 push hl
113+  8715 C5               push bc
114+  8716
115+  8716 CD 6A 8B     	call calcula_tercio
116+  8719 FE 01        	cp 1
117+  871B 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
118+  871D
119+  871D CD 2B 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8720 28 04            jr z,9F
121+  8722 30 02            jr nc,9F
122+  8724 18 02        	jr 8F
123+  8726 1E 02        9 ld e,2
124+  8728 C1           8 pop bc
125+  8729 E1           10 pop hl
126+  872A C9           5 ret
127+  872B
128+  872B              ; --------------------
129+  872B              ;
130+  872B              ; 25/08/22
131+  872B
132+  872B CD 6A 8B     Comprueba_centro call calcula_tercio
133+  872E 67               ld h,a
134+  872F 08           	ex af,af
135+  8730 FE 02        	cp 2
136+  8732 38 07        	jr c,1F
137+  8734 28 05        	jr z,1F
138+  8736 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  8739 18 03        	jr 2F
140+  873B 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  873E 08           2 ex af,af
142+  873F A7               and a
143+  8740 ED 42            sbc hl,bc
144+  8742 C9               ret
145+  8743
146+  8743              ; *********************************************************************************************************************************************************************************************
147+  8743              ;
148+  8743              ;   16/8/22
149+  8743              ;
150+  8743              ;	Comprueba_limite_vertical
151+  8743              ;
152+  8743              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  8743              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  8743              ;
155+  8743
156+  8743 3A E0 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
157+  8746 A7           	and a
158+  8747 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
159+  8748
160+  8748 7D           	ld a,l
161+  8749 E6 1F        	and $1F
162+  874B 57           	ld d,a
163+  874C 3A EF 84     	ld a,(Limite_vertical)
164+  874F BA           	cp d 											; Límite - Posición.
165+  8750
166+  8750 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
167+  8751 CB 47        	bit 0,a
168+  8753 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
169+  8755
170+  8755              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
171+  8755
172+  8755 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
173+  8756 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
174+  8758
175+  8758               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
176+  8758              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
177+  8758
178+  8758 3A CF 84         ld a,(Coordenada_X)
179+  875B 16 0F            ld d,Centro_izquierda
180+  875D A7               and a
181+  875E 92               sub d 											 ; Posición - Centro_izquierda.
182+  875F
183+  875F 28 21            jr z,3F
184+  8761 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
185+  8763              ;                                                    ; _salimos sin modificar nada.
186+  8763 18 0E            jr 2F
187+  8765
188+  8765 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
189+  8766 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
190+  8768
191+  8768              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
192+  8768              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
193+  8768
194+  8768 3A CF 84         ld a,(Coordenada_X)
195+  876B 16 10            ld d,Centro_derecha
196+  876D A7               and a
197+  876E 92               sub d
198+  876F
199+  876F 28 11            jr z,3F
200+  8771 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
201+  8773              ;                                                    ; _salimos sin modificar nada.
202+  8773 CB 43        2 bit 0,e
203+  8775 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
204+  8777 C5           	push bc
205+  8778 CD 11 88         call Modificaccionne
206+  877B C1           	pop bc
207+  877C CD 22 88         call Inicializacion
208+  877F F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
209+  8780 08           	ex af,af
210+  8781 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
211+  8782 C9           3 ret 				 								 ; Salimos de la rutina.
212+  8783
213+  8783              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
214+  8783
215+  8783 C5           4 push bc
216+  8784 01 C3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
217+  8787 0A           	ld a,(bc)
218+  8788 3D           	dec a
219+  8789 47           	ld b,a 											 ; Columnas-1 en B.
220+  878A 7D           	ld a,l
221+  878B 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
222+  878C CB 47        	bit 0,a
223+  878E 28 03        	jr z,5F
224+  8790 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
225+  8791 18 2E        	jr 7F
226+  8793
227+  8793              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
228+  8793
229+  8793 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
230+  8794 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
231+  8795 3A DF 84     	ld a,(Ctrl_0)
232+  8798 CB 4F        	bit 1,a
233+  879A 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
234+  879C F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
235+  879D
236+  879D              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
237+  879D
238+  879D 1C               inc e
239+  879E 1D               dec e
240+  879F 20 07            jr nz,12F
241+  87A1 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
242+  87A2 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
243+  87A3 22 C4 84     	ld (Posicion_actual),hl
244+  87A6 18 44        13 jr 9F
245+  87A8
246+  87A8 CB 43        12 bit 0,e
247+  87AA 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
248+  87AC              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
249+  87AC C1           	pop bc
250+  87AD 18 D3        	jr 3B
251+  87AF
252+  87AF 80           14 add b
253+  87B0 6F               ld l,a
254+  87B1 22 C4 84     	ld (Posicion_actual),hl
255+  87B4 CD 11 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
256+  87B7 18 33            jr 9F 											 ; _inicializamos y salimos.
257+  87B9
258+  87B9 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
259+  87BB 32 DF 84         ld (Ctrl_0),a
260+  87BE F1           	pop af
261+  87BF 18 2B        	jr 9F
262+  87C1
263+  87C1              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
264+  87C1
265+  87C1 F5           7 push af
266+  87C2 3A DF 84     	ld a,(Ctrl_0)
267+  87C5 CB 47        	bit 0,a
268+  87C7 20 1D        	jr nz,8F
269+  87C9 F1           	pop af
270+  87CA
271+  87CA              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
272+  87CA
273+  87CA 1C           	inc e
274+  87CB 1D               dec e
275+  87CC 20 07            jr nz,10F
276+  87CE
277+  87CE 90           	sub b
278+  87CF 6F               ld l,a
279+  87D0 22 C4 84     	ld (Posicion_actual),hl
280+  87D3 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
281+  87D5              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
282+  87D5 CB 43        10 bit 0,e
283+  87D7 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
284+  87D9              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
285+  87D9 C1           	pop bc
286+  87DA 18 A6        	jr 3B
287+  87DC
288+  87DC 90           16 sub b
289+  87DD 6F               ld l,a
290+  87DE 22 C4 84     	ld (Posicion_actual),hl
291+  87E1 CD 11 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
292+  87E4 18 06            jr 9F
293+  87E6
294+  87E6 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
295+  87E8 32 DF 84         ld (Ctrl_0),a
296+  87EB F1           	pop af
297+  87EC
298+  87EC C1           9 pop bc
299+  87ED              ;	ld e,0
300+  87ED CD 22 88         call Inicializacion
301+  87F0 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
302+  87F1 08           	ex af,af
303+  87F2 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
304+  87F3 18 8D            jr 3B
305+  87F5
306+  87F5              ; --------------------
307+  87F5
308+  87F5 CD D2 8E     Modifica_Pos_actual call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
309+  87F8 05               dec B                                           ; Scanlines-1 en B.
310+  87F9 CD 0E 89     1 call PreviousScan
311+  87FC 10 FB            djnz 1B
312+  87FE 22 C4 84     	ld (Posicion_actual),hl
313+  8801 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
314+  8802 C9           	ret
315+  8803
316+  8803              ; --------------------
317+  8803
318+  8803 CD D2 8E     Modifica_Pos_actual2 call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
319+  8806 05               dec B                                           ; Scanlines-1 en B.
320+  8807 CD FC 88     1 call NextScan
321+  880A 10 FB            djnz 1B
322+  880C 22 C4 84     	ld (Posicion_actual),hl
323+  880F AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
324+  8810 C9           	ret
325+  8811
326+  8811              ; --------------------
327+  8811
328+  8811              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
329+  8811              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
330+  8811
331+  8811 08           Modificaccionne ex af,af
332+  8812 FE 02            cp 2
333+  8814 F5               push af                                         ; Guardo el resultado de la comparación.
334+  8815 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
335+  8816 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
336+  8817 CC F5 87         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
337+  881A DC F5 87         call c,Modifica_Pos_actual
338+  881D C8           	ret z
339+  881E CD 03 88         call Modifica_Pos_actual2
340+  8821 C9               ret
341+  8822
342+  8822              ; *************************************************************************************************************************************************************************************************
343+  8822              ;
344+  8822              ;	13/8/22
345+  8822              ;
346+  8822              ;	Inicializacion
347+  8822              ;
348+  8822              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
349+  8822              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
350+  8822              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
351+  8822              ;
352+  8822              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
353+  8822              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
354+  8822              ;	_ desaparece/aparece.
355+  8822
356+  8822              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
357+  8822              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
358+  8822              ;
359+  8822              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
360+  8822              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
361+  8822              ; 		   [E] ="0"
362+  8822
363+  8822              ; 	OUTPUT: DESTRUYE [AF] y [D].
364+  8822
365+  8822 CD 6A 8B     Inicializacion call calcula_tercio
366+  8825 28 39        	jr z,primit
367+  8827 E6 02        	and 2
368+  8829 20 07        	jr nz,segmit
369+  882B 7D           	ld a,l
370+  882C FE 7F        	cp $7f
371+  882E 38 30        	jr c,primit
372+  8830 28 2E        	jr z,primit
373+  8832 CD C5 88     segmit call column
374+  8835 38 13        	jr c,tercuad
375+  8837 3E 04        cuarcuad ld a,4
376+  8839 32 CE 84     	ld (Cuad_objeto),a
377+  883C 21 20 48     	ld hl,$4820
378+  883F 22 ED 84     	ld (Limite_horizontal),hl
379+  8842 21 EF 84     	ld hl,Limite_vertical
380+  8845 36 0D        	ld (hl),$0d
381+  8847 08           	ex af,af
382+  8848 18 45        	jr 1F
383+  884A CD 98 88     tercuad	call Fija_punteros
384+  884D 3E 03        	ld a,3
385+  884F 32 CE 84     	ld (Cuad_objeto),a
386+  8852 21 20 48     	ld hl,$4820
387+  8855 22 ED 84     	ld (Limite_horizontal),hl
388+  8858 21 EF 84     	ld hl,Limite_vertical
389+  885B 36 12        	ld (hl),$12
390+  885D 08           	ex af,af
391+  885E 18 2F        	jr 1F
392+  8860 CD C5 88     primit call column
393+  8863 38 16        	jr c, primcuad
394+  8865 CD 98 88     segcuad call Fija_punteros
395+  8868 3E 02        	ld a,2
396+  886A 32 CE 84     	ld (Cuad_objeto),a
397+  886D 21 C0 4F     	ld hl,$4fc0
398+  8870 22 ED 84     	ld (Limite_horizontal),hl
399+  8873 21 EF 84     	ld hl,Limite_vertical
400+  8876 36 0D        	ld (hl),$0d
401+  8878 08           	ex af,af
402+  8879 18 14        	jr 1F
403+  887B CD 98 88     primcuad call Fija_punteros
404+  887E 3E 01        	ld a,1
405+  8880 32 CE 84     	ld (Cuad_objeto),a
406+  8883 21 C0 4F     	ld hl,$4fc0
407+  8886 22 ED 84     	ld (Limite_horizontal),hl
408+  8889 21 EF 84     	ld hl,Limite_vertical
409+  888C 36 12        	ld (hl),$12
410+  888E 08           	ex af,af
411+  888F CD ED 8E     1 call Genera_coordenadas
412+  8892 21 DF 84     	ld hl,Ctrl_0
413+  8895 CB EE        	set 5,(hl)
414+  8897 C9           	ret
415+  8898
416+  8898              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
417+  8898              ;
418+  8898              ;	14/9/22
419+  8898              ;
420+  8898              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
421+  8898              ;
422+  8898              ;	La rutina fija el puntero de dibujado/borrado.
423+  8898              ;
424+  8898              ;	Función:
425+  8898              ;
426+  8898              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
427+  8898
428+  8898 C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
429+  8899 D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
430+  889A 3A E0 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
431+  889D A7           	and a
432+  889E 28 0E        	jr z,1F
433+  88A0 3A C6 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
434+  88A3 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
435+  88A4 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
436+  88A6 2A F2 84     	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
437+  88A9 22 EA 84     	ld (Puntero_datas),hl
438+  88AC 18 14        	jr 3F
439+  88AE 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
440+  88B1 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
441+  88B2 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
442+  88B4 2A F0 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
443+  88B7 22 EA 84     	ld (Puntero_datas),hl
444+  88BA 18 06        	jr 3F
445+  88BC 2A E8 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
446+  88BF 22 EA 84     	ld (Puntero_datas),hl	 										; Fijamos el puntero de atributos y salimos.
447+  88C2 D1           3 pop de
448+  88C3 C1           	pop bc
449+  88C4 C9           	ret
450+  88C5
451+  88C5              ; *********************************************************************************************************************************************************************************************
452+  88C5
453+  88C5              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
454+  88C5              ;
455+  88C5              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
456+  88C5
457+  88C5 7D           column ld a,l
458+  88C6 E6 1F        	and $1f
459+  88C8 FE 10         	cp $10
460+  88CA C9            	ret
461+  88CB
462+  88CB              ; ********************************************************************** calcolumn / calcolumn2 *************************************************************************
463+  88CB              ;
464+  88CB              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
465+  88CB
466+  88CB              calcula_columna
467+  88CB
468+  88CB 18 FE        	jr $
469+  88CD
470+  88CD 1E 00        	ld e,0
471+  88CF 3A CE 84     	ld a,(Cuad_objeto)
472+  88D2 E6 01        	and 1
473+  88D4 28 18        	jr z,1F
474+  88D6
475+  88D6              ; Nos encontramos en la parte izquierda de la pantalla
476+  88D6
477+  88D6 3A CF 84     	ld a,(Coordenada_X)
478+  88D9 3C           	inc a
479+  88DA 91           	sub c
480+  88DB 38 06        	jr c,2F
481+  88DD
482+  88DD 79           	ld a,c
483+  88DE 32 EC 84     	ld (Columnas),a
484+  88E1 18 FE        	jr $
485+  88E3
486+  88E3              2 ; El objeto no entra completo en pantalla.
487+  88E3 1C           	inc e
488+  88E4 3C           	inc a
489+  88E5 20 FC        	jr nz,2B
490+  88E7
491+  88E7 79           	ld a,c
492+  88E8 93           	sub e
493+  88E9 32 EC 84     	ld (Columnas),a
494+  88EC 18 FE        	jr $
495+  88EE
496+  88EE              1 ; Nos encontramos en la parte derecha de la pantalla.
497+  88EE
498+  88EE 18 FE        	jr $
499+  88F0
500+  88F0              ; ******************************************************************************************************************************************************************************************
501+  88F0              ;
502+  88F0              ;	Prepara_draw
503+  88F0              ;
504+  88F0              ;	Es una rutina de carga.
505+  88F0              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
506+  88F0              ;
507+  88F0              ;	FUNCIONAMIENTO:
508+  88F0              ;
509+  88F0              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
510+  88F0              ;	- LD (Posicion_actual) del objeto en [HL].
511+  88F0              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
512+  88F0              ;
513+  88F0              ;	DESTRUYE:
514+  88F0              ;
515+  88F0              ;	Logicamente, BC,HL y E quedan destruidos.
516+  88F0
517+  88F0 21 C2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
518+  88F3 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
519+  88F4 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
520+  88F5 4E           	ld c,(hl)
521+  88F6 2A C4 84     	ld hl,(Posicion_actual)
522+  88F9 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
523+  88FB C9           	ret
524+  88FC
525+  88FC              ;----------------------------------------------------------------------------------------------------------------
526+  88FC              ;
527+  88FC              ;	5/08/22
528+  88FC              ;
529+  88FC              ;   NextScan.
530+  88FC              ;
531+  88FC              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
532+  88FC              ;
533+  88FC              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
534+  88FC              ;
535+  88FC              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
536+  88FC              ;
537+  88FC              ;       DESTRUIDOS: AF y HL !!!
538+  88FC              ;
539+  88FC              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
540+  88FC              ;
541+  88FC
542+  88FC 24           NextScan inc h          ; Incrementamos el scanline.
543+  88FD 7C               ld a,h
544+  88FE E6 07            and 7
545+  8900 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
546+  8901
547+  8901 CD ED 8E     	call Genera_coordenadas
548+  8904
549+  8904 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
550+  8905 C6 20            add a,$20           ; Vamos a comprobarlo...
551+  8907 6F               ld l,a
552+  8908 D8               ret c               ; Salimos si se produce el cambio de tercio.
553+  8909
554+  8909 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
555+  890A D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
556+  890C 67               ld h,a
557+  890D C9               ret
558+  890E
559+  890E              ;----------------------------------------------------------------------------------------------------------------
560+  890E              ;
561+  890E              ;	5/08/22
562+  890E              ;
563+  890E              ;   PreviousScan.
564+  890E              ;
565+  890E              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
566+  890E              ;
567+  890E              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
568+  890E              ;
569+  890E              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
570+  890E              ;
571+  890E              ;       DESTRUIDOS: AF y HL !!!
572+  890E              ;
573+  890E              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
574+  890E              ;
575+  890E
576+  890E 7C           PreviousScan ld a,h
577+  890F 25               dec h               ; Dec H.
578+  8910 E6 07            and 7
579+  8912 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
580+  8913
581+  8913 CD ED 8E     	call Genera_coordenadas
582+  8916
583+  8916 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
584+  8917 D6 20            sub $20             ; Vamos a comprobarlo...
585+  8919 6F               ld l,a
586+  891A D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
587+  891B
588+  891B 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
589+  891C C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
590+  891E 67               ld h,a
591+  891F C9               ret
592+  8920
593+  8920              ; ----------------------------------------------------------
594+  8920              ;
595+  8920              ;	17/10/22
596+  8920              ;
597+  8920              ;	(Macro). Esta operación es utilizada en las cuatro subrutinas de Converter.
598+  8920              ;
599+  8920              ;	Multiplica la cantidad contenida en B por 8. (B)*8.
600+  8920
601+  8920 CB 20        Filas_por_ocho sla b
602+  8922 CB 20        	sla b
603+  8924 CB 20        	sla b
604+  8926 C9           	ret
605+  8927
606+  8927              ; -----------------------------------------------------------------------------------
607+  8927              ;
608+  8927              ;	14/11/22
609+  8927
610+  8927 ED 73 FC 84  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
611+  892B 31 00 70     	ld sp,Album_de_fotos
612+  892E
613+  892E D9           2 exx																		; Extraemos de Album_de_fotos los valores de los registros.
614+  892F E1           	pop hl
615+  8930 C1           	pop bc
616+  8931 D9           	exx
617+  8932
618+  8932 08           	ex af,af
619+  8933 F1           	pop af
620+  8934 08           	ex af,af
621+  8935
622+  8935 DD E1        	pop ix
623+  8937 D1           	pop de
624+  8938 C1           	pop bc
625+  8939 E1           	pop hl
626+  893A
627+  893A ED 73 FE 84  	ld (Stack_2),sp
628+  893E ED 7B FC 84  	ld sp,(Stack)
629+  8942
630+  8942              ;	call Pintorrejeo														; call Pintorrejeo. Hemos pintado la entidad.
631+  8942              ;																			; Esta dirección ha de ser correcta. Cada vez que modifique
632+  8942 ED 73 FC 84  	ld (Stack),sp
633+  8946 3A FB 84     	ld a,(Numero_de_malotes)
634+  8949 3D           	dec a
635+  894A 28 09        	jr z,1F
636+  894C 32 FB 84      	ld (Numero_de_malotes),a
637+  894F ED 7B FE 84  	ld sp,(Stack_2)
638+  8953 18 D9        	jr 2B
639+  8955
640+  8955 ED 7B FC 84  1 ld sp,(Stack)
641+  8959
642+  8959 C9           	ret
643+  895A
# file closed: Draw_XOR.asm
631   895A              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  895A              ;   Conjunto de rutinas de impresión de Sprites.
  2+  895A              ;
  3+  895A              ;   12/12/22
  4+  895A              ;
  5+  895A              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
  6+  895A              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
  7+  895A              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
  8+  895A              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
  9+  895A              ;
 10+  895A              ;   Modifica: DE y HL.
 11+  895A
 12+  895A ED 73 FC 84  Pinta_Amadeus_2x2 ld (Stack),sp
 13+  895E 31 10 83     	ld sp,Amadeus
 14+  8961 D1           1 pop de
 15+  8962 73           	ld (hl),e
 16+  8963 23           	inc hl
 17+  8964 72           	ld (hl),d
 18+  8965 2B           	dec hl
 19+  8966 24           	inc h
 20+  8967 7C               ld a,h
 21+  8968 E6 07            and 7
 22+  896A 20 0C            jr nz,2F
 23+  896C 7D               ld a,l
 24+  896D C6 20            add a,$20
 25+  896F 6F               ld l,a
 26+  8970 38 06            jr c,2F
 27+  8972 7C               ld a,h
 28+  8973 D6 08            sub 8
 29+  8975 67               ld h,a
 30+  8976 18 00            jr 2F
 31+  8978 10 E7        2 djnz 1B
 32+  897A ED 7B FC 84  	ld sp,(Stack)
 33+  897E C9           	ret
 34+  897F
 35+  897F ED 73 FC 84  Pinta_Amadeus_3x2 ld (Stack),sp
 36+  8983 31 30 83     	ld sp,Amadeus_F9
 37+  8986 D1           1 pop de
 38+  8987 73           	ld (hl),e
 39+  8988 23           	inc hl
 40+  8989 72           	ld (hl),d
 41+  898A 23           	inc hl
 42+  898B D1           	pop de
 43+  898C 73           	ld (hl),e
 44+  898D 2B           	dec hl
 45+  898E 2B           	dec hl
 46+  898F 24           	inc h
 47+  8990 7C               ld a,h
 48+  8991 E6 07            and 7
 49+  8993 20 0A            jr nz,2F
 50+  8995 7D               ld a,l
 51+  8996 C6 20            add a,$20
 52+  8998 6F               ld l,a
 53+  8999 38 04            jr c,2F
 54+  899B 7C               ld a,h
 55+  899C D6 08            sub 8
 56+  899E 67               ld h,a
 57+  899F 72           2 ld (hl),d
 58+  89A0 D1           	pop de
 59+  89A1 23           	inc hl
 60+  89A2 73           	ld (hl),e
 61+  89A3 23           	inc hl
 62+  89A4 72           	ld (hl),d
 63+  89A5 2B           	dec hl
 64+  89A6 2B           	dec hl
 65+  89A7 24           	inc h
 66+  89A8 7C               ld a,h
 67+  89A9 E6 07            and 7
 68+  89AB 20 0A            jr nz,3F
 69+  89AD 7D               ld a,l
 70+  89AE C6 20            add a,$20
 71+  89B0 6F               ld l,a
 72+  89B1 38 04            jr c,3F
 73+  89B3 7C               ld a,h
 74+  89B4 D6 08            sub 8
 75+  89B6 67               ld h,a
 76+  89B7 10 CD        3 djnz 1B
 77+  89B9 ED 7B FC 84  	ld sp,(Stack)
 78+  89BD C9           	ret
 79+  89BE
 80+  89BE              ; ---------------------------------------------------
 81+  89BE
 82+  89BE ED 73 FC 84  Pinta_enemigo_2x2_izquierda ld (Stack),sp
 83+  89C2 31 90 81     	ld sp,Badsat_derecha
 84+  89C5 D1           1 pop de
 85+  89C6 7A           	ld a,d
 86+  89C7 AE           	xor (hl)
 87+  89C8 77           	ld (hl),a
 88+  89C9 24           	inc h
 89+  89CA 7C               ld a,h
 90+  89CB E6 07            and 7
 91+  89CD 20 0C            jr nz,2F
 92+  89CF 7D               ld a,l
 93+  89D0 C6 20            add a,$20
 94+  89D2 6F               ld l,a
 95+  89D3 38 06            jr c,2F
 96+  89D5 7C               ld a,h
 97+  89D6 D6 08            sub 8
 98+  89D8 67               ld h,a
 99+  89D9 18 00            jr 2F
100+  89DB 10 E8        2 djnz 1B
101+  89DD ED 7B FC 84  	ld sp,(Stack)
102+  89E1 C9           	ret
103+  89E2
104+  89E2 ED 73 FC 84  Pinta_enemigo_2x2_derecha ld (Stack),sp
105+  89E6 31 90 81     	ld sp,Badsat_derecha
106+  89E9 D1           1 pop de
107+  89EA 7B           	ld a,e
108+  89EB AE           	xor (hl)
109+  89EC 77           	ld (hl),a
110+  89ED 24           	inc h
111+  89EE 7C               ld a,h
112+  89EF E6 07            and 7
113+  89F1 20 0C            jr nz,2F
114+  89F3 7D               ld a,l
115+  89F4 C6 20            add a,$20
116+  89F6 6F               ld l,a
117+  89F7 38 06            jr c,2F
118+  89F9 7C               ld a,h
119+  89FA D6 08            sub 8
120+  89FC 67               ld h,a
121+  89FD 18 00            jr 2F
122+  89FF 10 E8        2 djnz 1B
123+  8A01 ED 7B FC 84  	ld sp,(Stack)
124+  8A05 C9           	ret
125+  8A06
126+  8A06              ; ---------------------------------------------------
127+  8A06
128+  8A06 ED 73 FC 84  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
129+  8A0A 31 B0 81     	ld sp,Badsat_der_f8
130+  8A0D D1           1 pop de
131+  8A0E 7A           	ld a,d
132+  8A0F AE           	xor (hl)
133+  8A10 77           	ld (hl),a
134+  8A11 23           	inc hl
135+  8A12 D1           	pop de
136+  8A13 7B           	ld a,e
137+  8A14 AE           	xor (hl)
138+  8A15 77           	ld (hl),a
139+  8A16 2B           	dec hl
140+  8A17 24            	inc h
141+  8A18 7C               ld a,h
142+  8A19 E6 07            and 7
143+  8A1B 20 0A            jr nz,2F
144+  8A1D 7D               ld a,l
145+  8A1E C6 20            add a,$20
146+  8A20 6F               ld l,a
147+  8A21 38 04            jr c,2F
148+  8A23 7C               ld a,h
149+  8A24 D6 08            sub 8
150+  8A26 67               ld h,a
151+  8A27 D1           2 pop de
152+  8A28 7B           	ld a,e
153+  8A29 AE           	xor (hl)
154+  8A2A 77           	ld (hl),a
155+  8A2B 23           	inc hl
156+  8A2C 7A           	ld a,d
157+  8A2D AE           	xor (hl)
158+  8A2E 77           	ld (hl),a
159+  8A2F 2B           	dec hl
160+  8A30 24           	inc h
161+  8A31 7C               ld a,h
162+  8A32 E6 07            and 7
163+  8A34 20 0A            jr nz,3F
164+  8A36 7D               ld a,l
165+  8A37 C6 20            add a,$20
166+  8A39 6F               ld l,a
167+  8A3A 38 04            jr c,3F
168+  8A3C 7C               ld a,h
169+  8A3D D6 08            sub 8
170+  8A3F 67               ld h,a
171+  8A40 10 CB        3 djnz 1B
172+  8A42 ED 7B FC 84  	ld sp,(Stack)
173+  8A46 C9           	ret
174+  8A47
175+  8A47 ED 73 FC 84  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
176+  8A4B 31 30 83     	ld sp,Amadeus_F9
177+  8A4E D1           1 pop de
178+  8A4F D1           	pop de
179+  8A50 7B           	ld a,e
180+  8A51 AE           	xor (hl)
181+  8A52 77           	ld (hl),a
182+  8A53 24            	inc h
183+  8A54 7C               ld a,h
184+  8A55 E6 07            and 7
185+  8A57 20 0A            jr nz,2F
186+  8A59 7D               ld a,l
187+  8A5A C6 20            add a,$20
188+  8A5C 6F               ld l,a
189+  8A5D 38 04            jr c,2F
190+  8A5F 7C               ld a,h
191+  8A60 D6 08            sub 8
192+  8A62 67               ld h,a
193+  8A63 D1           2 pop de
194+  8A64 7A           	ld a,d
195+  8A65 AE           	xor (hl)
196+  8A66 77           	ld (hl),a
197+  8A67 24           	inc h
198+  8A68 7C               ld a,h
199+  8A69 E6 07            and 7
200+  8A6B 20 0A            jr nz,3F
201+  8A6D 7D               ld a,l
202+  8A6E C6 20            add a,$20
203+  8A70 6F               ld l,a
204+  8A71 38 04            jr c,3F
205+  8A73 7C               ld a,h
206+  8A74 D6 08            sub 8
207+  8A76 67               ld h,a
208+  8A77 10 D5        3 djnz 1B
209+  8A79 ED 7B FC 84  	ld sp,(Stack)
210+  8A7D C9           	ret
211+  8A7E
212+  8A7E ED 73 FC 84  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
213+  8A82 31 30 83     	ld sp,Amadeus_F9
214+  8A85 D1           1 pop de
215+  8A86 7B           	ld a,e
216+  8A87 AE           	xor (hl)
217+  8A88 77           	ld (hl),a
218+  8A89 23           	inc hl
219+  8A8A 7A           	ld a,d
220+  8A8B AE           	xor (hl)
221+  8A8C 77           	ld (hl),a
222+  8A8D 2B           	dec hl
223+  8A8E 24             	inc h
224+  8A8F 7C               ld a,h
225+  8A90 E6 07            and 7
226+  8A92 20 0A            jr nz,2F
227+  8A94 7D               ld a,l
228+  8A95 C6 20            add a,$20
229+  8A97 6F               ld l,a
230+  8A98 38 04            jr c,2F
231+  8A9A 7C               ld a,h
232+  8A9B D6 08            sub 8
233+  8A9D 67               ld h,a
234+  8A9E D1           2 pop de
235+  8A9F 7A           	ld a,d
236+  8AA0 AE           	xor (hl)
237+  8AA1 77           	ld (hl),a
238+  8AA2 23           	inc hl
239+  8AA3 D1               pop de
240+  8AA4 7B           	ld a,e
241+  8AA5 AE           	xor (hl)
242+  8AA6 77           	ld (hl),a
243+  8AA7 2B           	dec hl
244+  8AA8 24           	inc h
245+  8AA9 7C               ld a,h
246+  8AAA E6 07            and 7
247+  8AAC 20 0A            jr nz,3F
248+  8AAE 7D               ld a,l
249+  8AAF C6 20            add a,$20
250+  8AB1 6F               ld l,a
251+  8AB2 38 04            jr c,3F
252+  8AB4 7C               ld a,h
253+  8AB5 D6 08            sub 8
254+  8AB7 67               ld h,a
255+  8AB8 10 CB        3 djnz 1B
256+  8ABA ED 7B FC 84  	ld sp,(Stack)
257+  8ABE C9           	ret
258+  8ABF
259+  8ABF ED 73 FC 84  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
260+  8AC3 31 30 83     	ld sp,Amadeus_F9
261+  8AC6 D1           1 pop de
262+  8AC7 7B           	ld a,e
263+  8AC8 AE           	xor (hl)
264+  8AC9 77           	ld (hl),a
265+  8ACA 24            	inc h
266+  8ACB 7C               ld a,h
267+  8ACC E6 07            and 7
268+  8ACE 20 0A            jr nz,2F
269+  8AD0 7D               ld a,l
270+  8AD1 C6 20            add a,$20
271+  8AD3 6F               ld l,a
272+  8AD4 38 04            jr c,2F
273+  8AD6 7C               ld a,h
274+  8AD7 D6 08            sub 8
275+  8AD9 67               ld h,a
276+  8ADA D1           2 pop de
277+  8ADB 7A           	ld a,d
278+  8ADC AE           	xor (hl)
279+  8ADD 77           	ld (hl),a
280+  8ADE 24           	inc h
281+  8ADF 7C               ld a,h
282+  8AE0 E6 07            and 7
283+  8AE2 20 0A            jr nz,3F
284+  8AE4 7D               ld a,l
285+  8AE5 C6 20            add a,$20
286+  8AE7 6F               ld l,a
287+  8AE8 38 04            jr c,3F
288+  8AEA 7C               ld a,h
289+  8AEB D6 08            sub 8
290+  8AED 67               ld h,a
291+  8AEE D1           3 pop de
292+  8AEF 10 D5            djnz 1B
293+  8AF1 ED 7B FC 84  	ld sp,(Stack)
294+  8AF5 C9           	ret
295+  8AF6
296+  8AF6              ; ---------------------------------------------------
297+  8AF6
298+  8AF6 ED 73 FC 84  Pinta_enemigo_2x2 ld (Stack),sp
299+  8AFA 31 90 81     	ld sp,Badsat_derecha
300+  8AFD D1           1 pop de
301+  8AFE 7B           	ld a,e
302+  8AFF AE           	xor (hl)
303+  8B00 77           	ld (hl),a
304+  8B01 23           	inc hl
305+  8B02 7A           	ld a,d
306+  8B03 AE           	xor (hl)
307+  8B04 77           	ld (hl),a
308+  8B05 2B           	dec hl
309+  8B06 24           	inc h
310+  8B07 7C               ld a,h
311+  8B08 E6 07            and 7
312+  8B0A 20 0C            jr nz,2F
313+  8B0C 7D               ld a,l
314+  8B0D C6 20            add a,$20
315+  8B0F 6F               ld l,a
316+  8B10 38 06            jr c,2F
317+  8B12 7C               ld a,h
318+  8B13 D6 08            sub 8
319+  8B15 67               ld h,a
320+  8B16 18 00            jr 2F
321+  8B18 10 E3        2 djnz 1B
322+  8B1A ED 7B FC 84  	ld sp,(Stack)
323+  8B1E C9           	ret
324+  8B1F
325+  8B1F              ; ---------------------------------------------------
326+  8B1F
327+  8B1F ED 73 FC 84  Pinta_enemigo_3x2 ld (Stack),sp
328+  8B23 31 B0 81     	ld sp,Badsat_der_f8
329+  8B26 D1           1 pop de
330+  8B27 7B           	ld a,e
331+  8B28 AE           	xor (hl)
332+  8B29 77           	ld (hl),a
333+  8B2A 23           	inc hl
334+  8B2B 7A           	ld a,d
335+  8B2C AE           	xor (hl)
336+  8B2D 77           	ld (hl),a
337+  8B2E 23           	inc hl
338+  8B2F D1           	pop de
339+  8B30 7B           	ld a,e
340+  8B31 AE           	xor (hl)
341+  8B32 77           	ld (hl),a
342+  8B33 2B           	dec hl
343+  8B34 2B           	dec hl
344+  8B35 24           	inc h
345+  8B36 7C               ld a,h
346+  8B37 E6 07            and 7
347+  8B39 20 0A            jr nz,2F
348+  8B3B 7D               ld a,l
349+  8B3C C6 20            add a,$20
350+  8B3E 6F               ld l,a
351+  8B3F 38 04            jr c,2F
352+  8B41 7C               ld a,h
353+  8B42 D6 08            sub 8
354+  8B44 67               ld h,a
355+  8B45 7A           2 ld a,d
356+  8B46 AE           	xor (hl)
357+  8B47 77           	ld (hl),a
358+  8B48 D1           	pop de
359+  8B49 23           	inc hl
360+  8B4A 7B           	ld a,e
361+  8B4B AE           	xor (hl)
362+  8B4C 77           	ld (hl),a
363+  8B4D 23           	inc hl
364+  8B4E 7A           	ld a,d
365+  8B4F AE           	xor (hl)
366+  8B50 77           	ld (hl),a
367+  8B51 2B           	dec hl
368+  8B52 2B           	dec hl
369+  8B53 24           	inc h
370+  8B54 7C               ld a,h
371+  8B55 E6 07            and 7
372+  8B57 20 0A            jr nz,3F
373+  8B59 7D               ld a,l
374+  8B5A C6 20            add a,$20
375+  8B5C 6F               ld l,a
376+  8B5D 38 04            jr c,3F
377+  8B5F 7C               ld a,h
378+  8B60 D6 08            sub 8
379+  8B62 67               ld h,a
380+  8B63 10 C1        3 djnz 1B
381+  8B65 ED 7B FC 84  	ld sp,(Stack)
382+  8B69 C9           	ret
# file closed: Rutinas_de_impresion_sprites.asm
632   8B6A              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8B6A              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8B6A              ;
  3+  8B6A              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8B6A              ;
  5+  8B6A              ; *****************************************************************************************************************************************************************************************
  6+  8B6A              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8B6A
  8+  8B6A 7C           calcula_tercio ld a,h
  9+  8B6B E6 18        	and $18
 10+  8B6D CB 2F        	sra a
 11+  8B6F CB 2F        	sra a
 12+  8B71 CB 2F        	sra a
 13+  8B73 C9           	ret
 14+  8B74
# file closed: calcula_tercio.asm
633   8B74              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8B74              ; -----------------------------------------------------------------------------------------
  2+  8B74              ;
  3+  8B74              ;   04/11/22
  4+  8B74              ;
  5+  8B74              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8B74              ;
  7+  8B74              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8B74              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8B74              ;
 10+  8B74              ;   DESTRUYE: HL y A. !!!!!
 11+  8B74
 12+  8B74 CD 6A 8B     Calcula_direccion_atributos call calcula_tercio
 13+  8B77 26 58            ld h,$58
 14+  8B79 84               add h
 15+  8B7A 67               ld h,a
 16+  8B7B C9               ret
# file closed: Calcula_direccion_atributos.asm
634   8B7C              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8B7C              ; ********** **********
  2+  8B7C              ;
  3+  8B7C              ;   5/11/22
  4+  8B7C              ;
  5+  8B7C              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8B7C              ;
  7+  8B7C              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8B7C              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8B7C              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8B7C              ;
 11+  8B7C              ;   NO DESTROYERSSSS !!!!!
 12+  8B7C
 13+  8B7C E5           Define_atributos push hl
 14+  8B7D C5           	push bc
 15+  8B7E D5           	push de
 16+  8B7F
 17+  8B7F CD 74 8B     	call Calcula_direccion_atributos
 18+  8B82
 19+  8B82 D9               exx
 20+  8B83 E5               push hl
 21+  8B84 D9               exx
 22+  8B85 D1               pop de
 23+  8B86
 24+  8B86 42               ld b,d
 25+  8B87 7B               ld a,e 									; (Attr) en A.
 26+  8B88
 27+  8B88 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8B89 E5            	push hl 								; Guardo dirección de attr.
 29+  8B8A
 30+  8B8A              ; -----
 31+  8B8A
 32+  8B8A 77           2 ld (hl),a
 33+  8B8B 0D           	dec c 									; Decremento (Columnas).
 34+  8B8C 28 03        	jr z,1F
 35+  8B8E 23           	inc hl
 36+  8B8F 18 F9        	jr 2B
 37+  8B91
 38+  8B91 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8B92 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8B93
 41+  8B93 05           	dec b									; Decremento (Filas).
 42+  8B94 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8B96
 44+  8B96 11 20 00     	ld de,32
 45+  8B99 A7           	and a
 46+  8B9A ED 5A        	adc hl,de
 47+  8B9C 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8B9E
 49+  8B9E D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8B9F C1           	pop bc
 51+  8BA0 E1           	pop hl
 52+  8BA1
 53+  8BA1 C9           	ret
 54+  8BA2
# file closed: Define_atributos.asm
635   8BA2              	include "Cls.asm"
# file opened: Cls.asm
  1+  8BA2              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8BA2              ;
  3+  8BA2              ;
  4+  8BA2              ;	CLS.
  5+  8BA2              ;
  6+  8BA2              ;	Limpia la pantalla y define sus atributos.
  7+  8BA2              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8BA2              ;
  9+  8BA2              ;	COLORES: 0 ..... NEGRO
 10+  8BA2              ;    		 1 ..... AZUL
 11+  8BA2              ; 			 2 ..... ROJO
 12+  8BA2              ;			 3 ..... MAGENTA
 13+  8BA2              ; 			 4 ..... VERDE
 14+  8BA2              ; 			 5 ..... CIAN
 15+  8BA2              ;			 6 ..... AMARILLO
 16+  8BA2              ; 			 7 ..... BLANCO
 17+  8BA2              ;
 18+  8BA2              ;	INPUT: A contiene los atributos de pantalla.
 19+  8BA2              ;
 20+  8BA2              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8BA2
 22+  8BA2
 23+  8BA2 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8BA5 11 01 40     	LD DE,$4001
 25+  8BA8 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8BAB 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8BAD ED B0        	LDIR
 28+  8BAF 01 FF 02     	LD BC,767
 29+  8BB2 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8BB3 ED B0        	LDIR
 31+  8BB5 C9           	ret
 32+  8BB6
# file closed: Cls.asm
636   8BB6              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8BB6              ; ******************************************************************************************************************************************************************************************
  2+  8BB6              ;
  3+  8BB6              ;   19/10/22
  4+  8BB6              ;
  5+  8BB6              ;	Mov_down
  6+  8BB6              ;
  7+  8BB6              ; 	Mueve el Sprite X px hacia abajo.
  8+  8BB6              ;
  9+  8BB6              ;
 10+  8BB6 21 DF 84     Mov_down ld hl,Ctrl_0
 11+  8BB9 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8BBB              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8BBB              ; 																	; _ en el caso de que no lo haya.
 14+  8BBB 3A D4 84     	ld a,(Vel_down)
 15+  8BBE 47           	ld b,a
 16+  8BBF 2A C4 84         ld hl,(Posicion_actual)
 17+  8BC2 CD 6A 8B     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8BC5 E6 02        	and 2
 19+  8BC7 28 0F        	jr z,1F
 20+  8BC9 7C           	ld a,h
 21+  8BCA FE 57        	cp $57
 22+  8BCC 20 0A        	jr nz,1F
 23+  8BCE 7D           	ld a,l
 24+  8BCF C6 20        	add $20
 25+  8BD1 30 05        	jr nc,1F
 26+  8BD3
 27+  8BD3              ; ------------------------------
 28+  8BD3 CD C3 8E     	call Reaparece_arriba
 29+  8BD6              ;	call Reinicio
 30+  8BD6              ; ------------------------------
 31+  8BD6
 32+  8BD6 18 08        	jr 3F
 33+  8BD8 CD FC 88     1 call NextScan
 34+  8BDB 22 C4 84     	ld (Posicion_actual),hl
 35+  8BDE 10 E2            djnz 2B
 36+  8BE0 C9           3 ret
 37+  8BE1
 38+  8BE1
 39+  8BE1              ; ******************************************************************************************************************************************************************************************
 40+  8BE1              ;
 41+  8BE1              ;   19/10/22
 42+  8BE1              ;
 43+  8BE1              ;	Mov_up
 44+  8BE1              ;
 45+  8BE1              ; 	Mueve el Sprite hacia arriba.
 46+  8BE1              ;
 47+  8BE1              ;
 48+  8BE1 21 DF 84     Mov_up ld hl,Ctrl_0
 49+  8BE4 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 50+  8BE6              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 51+  8BE6              ; 																		; _ en el caso de que no lo haya.
 52+  8BE6 3A D3 84     	ld a,(Vel_up)
 53+  8BE9 47           	ld b,a
 54+  8BEA 2A C4 84     	ld hl,(Posicion_actual)
 55+  8BED CD 6A 8B     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 56+  8BF0 A7           	and a
 57+  8BF1 20 10        	jr nz,1F
 58+  8BF3 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 59+  8BF4 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 60+  8BF6 20 0B            jr nz,1F
 61+  8BF8 7D               ld a,l
 62+  8BF9 D6 20            sub $20
 63+  8BFB 30 06            jr nc,1F
 64+  8BFD 25               dec h
 65+  8BFE
 66+  8BFE              ; -----------------------------
 67+  8BFE CD B3 8E         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 68+  8C01              ;	call Reinicio
 69+  8C01              ; -----------------------------
 70+  8C01
 71+  8C01 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 72+  8C03 CD 0E 89     1 call PreviousScan
 73+  8C06 22 C4 84     	ld (Posicion_actual),hl
 74+  8C09 10 E2            djnz 3B
 75+  8C0B C9           2   ret
 76+  8C0C
 77+  8C0C              ; ******************************************************************************************************************************************************************************************
 78+  8C0C              ;
 79+  8C0C              ;	19/10/22
 80+  8C0C              ;
 81+  8C0C              ;	Mov_right.
 82+  8C0C              ;
 83+  8C0C              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 84+  8C0C              ;
 85+  8C0C
 86+  8C0C 21 DF 84     Mov_right ld hl,Ctrl_0
 87+  8C0F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 88+  8C11              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 89+  8C11              ; 																	; _ en el caso de que no lo haya.
 90+  8C11 3A C6 84     	ld a,(CTRL_DESPLZ)
 91+  8C14 A7           	and a
 92+  8C15 28 0B        	jr z,10F
 93+  8C17
 94+  8C17 3A DF 84     	ld a,(Ctrl_0)
 95+  8C1A CB 7F        	bit 7,a
 96+  8C1C 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 97+  8C1E 21 C6 84     	ld hl,CTRL_DESPLZ
 98+  8C21 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 99+  8C22
100+  8C22 3A DF 84     10 ld a,(Ctrl_0)
101+  8C25 CB 77        	bit 6,a
102+  8C27 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
103+  8C29
104+  8C29 CD 72 8E     	call Stop_Amadeus_right
105+  8C2C C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
106+  8C2D 18 4A        	jr 3F
107+  8C2F
108+  8C2F 3A CF 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
109+  8C32 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
110+  8C34 20 43        	jr nz,3F
111+  8C36
112+  8C36 3A C6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
113+  8C39 A7           	and a 															; _[3] para continuar con el DESPLZ.
114+  8C3A 28 3D        	jr z,3F
115+  8C3C
116+  8C3C              ; ---------- ---------- ----------
117+  8C3C
118+  8C3C 3A D2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8C3F FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8C41 28 11        	jr z,1F
121+  8C43 38 06        	jr c,6F
122+  8C45 FE 04        	cp 4
123+  8C47 28 14        	jr z,7F
124+  8C49 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8C4B
126+  8C4B              ; ---------- ---------- ----------
127+  8C4B              ;
128+  8C4B              ; Perfiles de velocidad
129+  8C4B              ;
130+  8C4B 3A C6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
131+  8C4E FE FE        	cp $fe
132+  8C50 20 27        	jr nz,3F
133+  8C52 18 10        	jr 4F
134+  8C54 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
135+  8C57 FE FD        	cp $fd
136+  8C59 20 1E        	jr nz,3F
137+  8C5B 18 07        	jr 4F
138+  8C5D 3A C6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
139+  8C60 FE FB        	cp $fb
140+  8C62 20 15        	jr nz,3F
141+  8C64
142+  8C64              ; ---------- ---------- ----------
143+  8C64
144+  8C64 CD A1 8E     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
145+  8C67              ;	call Reinicio
146+  8C67
147+  8C67              ; ---------- ---------- ----------
148+  8C67
149+  8C67 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
150+  8C69 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
151+  8C6A CD A2 8C     	call DESPLZ_DER
152+  8C6D C1           	pop bc
153+  8C6E 10 F9        	djnz 5B
154+  8C70 2A C4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
155+  8C73 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
156+  8C74 22 C4 84     	ld (Posicion_actual),hl
157+  8C77 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
158+  8C79
159+  8C79              ; ---------- ---------- ----------
160+  8C79
161+  8C79 3A D2 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
162+  8C7C FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
163+  8C7E 20 1B        	jr nz,8F
164+  8C80 2A C4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
165+  8C83 7D           	ld a,l
166+  8C84 E6 1F        	and $1f
167+  8C86 FE 1F        	cp 31
168+  8C88 20 05        	jr nz,9F
169+  8C8A
170+  8C8A              ; ---------- ---------- ----------
171+  8C8A
172+  8C8A CD A1 8E     	call Reaparece_izquierda
173+  8C8D
174+  8C8D              ; ---------- ---------- ----------
175+  8C8D
176+  8C8D 18 12        	jr 2F
177+  8C8F 2A C4 84     9 ld hl,(Posicion_actual)
178+  8C92 23           	inc hl
179+  8C93 22 C4 84     	ld (Posicion_actual),hl
180+  8C96 CD ED 8E     	call Genera_coordenadas
181+  8C99 18 06        	jr 2F
182+  8C9B 2A C4 84     8 ld hl,(Posicion_actual)
183+  8C9E CD A2 8C     	call DESPLZ_DER
184+  8CA1 C9           2 ret
185+  8CA2
186+  8CA2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
187+  8CA2              ;
188+  8CA2              ;	22/9/22
189+  8CA2              ;
190+  8CA2
191+  8CA2 CD B1 8C     DESPLZ_DER call Desplaza_derecha
192+  8CA5 CD C6 8C         call modifica_parametros_1er_DESPLZ_2
193+  8CA8 CD EC 8C         call Ciclo_completo
194+  8CAB 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
195+  8CAE CB FE        	set 7,(hl)
196+  8CB0 C9           	ret
197+  8CB1
198+  8CB1              ; ******************************************************************************************************************************************************************************************
199+  8CB1              ;	14/9/22
200+  8CB1              ;
201+  8CB1
202+  8CB1 3A D2 84     Desplaza_derecha ld a,(Vel_right)
203+  8CB4 47           	ld b,a
204+  8CB5 2A CA 84     	ld hl,(Puntero_DESPLZ)
205+  8CB8 23           1 inc hl
206+  8CB9 23           	inc hl
207+  8CBA 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
208+  8CBC 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
209+  8CBF CD C7 85     	call Extrae_address
210+  8CC2 22 F0 84     	ld (Caja_de_DESPLZ),hl
211+  8CC5 C9           	ret
212+  8CC6
213+  8CC6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
214+  8CC6              ;
215+  8CC6              ;	24/7/22
216+  8CC6              ;
217+  8CC6              ;	modifica_parametros_1er_DESPLZ_2
218+  8CC6              ;
219+  8CC6              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
220+  8CC6              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
221+  8CC6              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
222+  8CC6
223+  8CC6 3A C6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
224+  8CC9 A7           	and a
225+  8CCA 20 1C        	jr nz,1F
226+  8CCC D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
227+  8CCE 32 C6 84         ld (CTRL_DESPLZ),a
228+  8CD1 21 C3 84     	ld hl,Columns
229+  8CD4 34           	inc (hl)
230+  8CD5 3A CE 84     	ld a,(Cuad_objeto)
231+  8CD8 E6 01        	and 1
232+  8CDA 28 0C        	jr z,1F
233+  8CDC 2A C4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
234+  8CDF 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
235+  8CE0 22 C4 84     	ld (Posicion_actual),hl
236+  8CE3 CD 7E 8E     	call Inc_CTRL_DESPLZ
237+  8CE6 18 03        	jr 2F
238+  8CE8 CD 7E 8E     1 call Inc_CTRL_DESPLZ
239+  8CEB C9           2 ret
240+  8CEC
241+  8CEC              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
242+  8CEC              ;
243+  8CEC              ;	24/7/22
244+  8CEC              ;
245+  8CEC              ;	Ciclo_completo.
246+  8CEC              ;
247+  8CEC              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
248+  8CEC              ;
249+  8CEC              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
250+  8CEC              ; 	Decrementamos (Columns).
251+  8CEC              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
252+  8CEC              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
253+  8CEC
254+  8CEC
255+  8CEC 3A C6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
256+  8CEF FE FF        	cp $ff
257+  8CF1 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
258+  8CF3 18 25        	jr 3f
259+  8CF5 21 C3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
260+  8CF8 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
261+  8CF9 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
262+  8CFA 32 C6 84     	ld (CTRL_DESPLZ),a
263+  8CFD 3A CE 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
264+  8D00 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
265+  8D02 20 07        	jr nz,2F
266+  8D04 2A C4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
267+  8D07 23           	inc hl
268+  8D08 22 C4 84     	ld (Posicion_actual),hl
269+  8D0B 2A C8 84     2 ld hl,(Indice_Sprite)
270+  8D0E 22 CA 84     	ld (Puntero_DESPLZ),hl
271+  8D11 21 00 00     	ld hl,0
272+  8D14 22 F0 84     	ld (Caja_de_DESPLZ),hl
273+  8D17 CD ED 8E     	call Genera_coordenadas
274+  8D1A C9           3 ret
275+  8D1B
276+  8D1B              ; ******************************************************************************************************************************************************************************************
277+  8D1B              ;
278+  8D1B              ;	19/10/22
279+  8D1B              ;
280+  8D1B              ;	Mov_left.
281+  8D1B              ;
282+  8D1B              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
283+  8D1B              ;
284+  8D1B              Mov_left
285+  8D1B
286+  8D1B 21 DF 84     	ld hl,Ctrl_0
287+  8D1E CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
288+  8D20              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
289+  8D20              ; 																	; _ en el caso de que no lo haya.
290+  8D20 3A C6 84     	ld a,(CTRL_DESPLZ)
291+  8D23 A7           	and a
292+  8D24 20 19        	jr nz,10F
293+  8D26
294+  8D26 2A E8 84     	ld hl,(Puntero_objeto)
295+  8D29 22 CA 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
296+  8D2C
297+  8D2C 3A DF 84     	ld a,(Ctrl_0)
298+  8D2F CB 77        	bit 6,a
299+  8D31 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
300+  8D33
301+  8D33 CD 78 8E     	call Stop_Amadeus_left
302+  8D36 20 5F        	jr nz,3F
303+  8D38
304+  8D38 2A C8 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
305+  8D3B 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
306+  8D3E C9           	ret
307+  8D3F
308+  8D3F 3A DF 84     10 	ld a,(Ctrl_0)
309+  8D42 CB 7F        	bit 7,a
310+  8D44 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
311+  8D46 21 C6 84     	ld hl,CTRL_DESPLZ
312+  8D49 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
313+  8D4A
314+  8D4A 3A CF 84     11 ld a,(Coordenada_X)
315+  8D4D A7           	and a
316+  8D4E 20 47        	jr nz,3F
317+  8D50 3A C6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
318+  8D53 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
319+  8D54 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
320+  8D56
321+  8D56              ; ---------- ---------- ----------
322+  8D56
323+  8D56 3A D1 84     	ld a,(Vel_left)
324+  8D59 FE 02        	cp 2
325+  8D5B 28 0F        	jr z,1F
326+  8D5D 38 04        	jr c,6F
327+  8D5F FE 04        	cp 4
328+  8D61 28 12        	jr z,7F
329+  8D63
330+  8D63              ; ---------- ---------- ----------
331+  8D63
332+  8D63 3A C6 84     6 ld a,(CTRL_DESPLZ)
333+  8D66 FE F9        	cp $f9
334+  8D68 20 2D        	jr nz,3F
335+  8D6A 18 10        	jr 4F
336+  8D6C 3A C6 84     1 ld a,(CTRL_DESPLZ)
337+  8D6F FE FA        	cp $fa
338+  8D71 20 24        	jr nz,3F
339+  8D73 18 07        	jr 4F
340+  8D75 3A C6 84     7 ld a,(CTRL_DESPLZ)
341+  8D78 FE FC        	cp $fc
342+  8D7A 20 1B        	jr nz,3F
343+  8D7C
344+  8D7C              ; ---------- ---------- ----------
345+  8D7C
346+  8D7C CD 8F 8E     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
347+  8D7F              ;	call Reinicio
348+  8D7F
349+  8D7F              ; ---------- ---------- ----------
350+  8D7F
351+  8D7F 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
352+  8D81 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
353+  8D82 2A E8 84     	ld hl,(Puntero_objeto)
354+  8D85 22 CA 84     	ld (Puntero_DESPLZ),hl
355+  8D88 CD BE 8D     	call DESPLZ_IZQ
356+  8D8B C1           	pop bc
357+  8D8C 10 F3        	djnz 5B
358+  8D8E 2A C4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
359+  8D91 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
360+  8D92 22 C4 84     	ld (Posicion_actual),hl
361+  8D95 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8D97
363+  8D97              ; ---------- ---------- ----------
364+  8D97
365+  8D97 3A D1 84     3 ld a,(Vel_left)
366+  8D9A FE 08        	cp 8
367+  8D9C 20 19        	jr nz,8F
368+  8D9E 2A C4 84     	ld hl,(Posicion_actual)
369+  8DA1 7D           	ld a,l
370+  8DA2 E6 1F        	and $1f
371+  8DA4 20 05        	jr nz,9F
372+  8DA6
373+  8DA6              ; ---------- ---------- ----------
374+  8DA6
375+  8DA6 CD 8F 8E     	call Reaparece_derecha
376+  8DA9
377+  8DA9              ; ---------- ---------- ----------
378+  8DA9
379+  8DA9 18 12        	jr 2F
380+  8DAB 2A C4 84     9 ld hl,(Posicion_actual)
381+  8DAE 2B           	dec hl
382+  8DAF 22 C4 84     	ld (Posicion_actual),hl
383+  8DB2 CD ED 8E     	call Genera_coordenadas
384+  8DB5 18 06        	jr 2F
385+  8DB7 2A C4 84     8 ld hl,(Posicion_actual)
386+  8DBA CD BE 8D     	call DESPLZ_IZQ
387+  8DBD C9           2 ret
388+  8DBE
389+  8DBE              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
390+  8DBE              ;
391+  8DBE              ;	22/9/22
392+  8DBE
393+  8DBE CD CD 8D     DESPLZ_IZQ call Desplaza_izquierda
394+  8DC1 CD E2 8D         call modifica_parametros_1er_DESPLZ
395+  8DC4 CD 03 8E     	call Ciclo_completo_2
396+  8DC7 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
397+  8DCA CB BE        	res 7,(hl)
398+  8DCC C9           	ret
399+  8DCD
400+  8DCD 3A D1 84     Desplaza_izquierda ld a,(Vel_left)
401+  8DD0 47           	ld b,a
402+  8DD1 2A CA 84     	ld hl,(Puntero_DESPLZ)
403+  8DD4 2B           1 dec hl
404+  8DD5 2B           	dec hl
405+  8DD6 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
406+  8DD8 22 CA 84     	ld (Puntero_DESPLZ),hl
407+  8DDB CD C7 85     	call Extrae_address
408+  8DDE 22 F0 84     	ld (Caja_de_DESPLZ),hl
409+  8DE1 C9           	ret
410+  8DE2
411+  8DE2              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
412+  8DE2              ;
413+  8DE2              ;	modifica_parametros_1er_DESPLZ
414+  8DE2              ;
415+  8DE2              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
416+  8DE2              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
417+  8DE2              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
418+  8DE2
419+  8DE2 3A C6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
420+  8DE5 A7           	and a
421+  8DE6 20 17        	jr nz,1F
422+  8DE8 21 C3 84     	ld hl,Columns
423+  8DEB 34           	inc (hl)
424+  8DEC 3A CE 84     	ld a,(Cuad_objeto)
425+  8DEF E6 01        	and 1
426+  8DF1 20 0C        	jr nz,1F
427+  8DF3 2A C4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
428+  8DF6 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
429+  8DF7 22 C4 84     	ld (Posicion_actual),hl
430+  8DFA CD 61 8E     	call Dec_CTRL_DESPLZ
431+  8DFD 18 03        	jr 2F
432+  8DFF CD 61 8E     1 call Dec_CTRL_DESPLZ
433+  8E02 C9           2 ret
434+  8E03
435+  8E03              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
436+  8E03              ;
437+  8E03 3A C6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
438+  8E06 FE F8        	cp $f8
439+  8E08 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
440+  8E0A 18 19        	jr 3f
441+  8E0C 21 C3 84     1 ld hl,Columns
442+  8E0F 35           	dec (hl)
443+  8E10 AF           	xor a
444+  8E11 32 C6 84     	ld (CTRL_DESPLZ),a
445+  8E14 3A CE 84     	ld a,(Cuad_objeto)
446+  8E17 E6 01        	and 1
447+  8E19 28 07        	jr z,2F
448+  8E1B 2A C4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
449+  8E1E 2B           	dec hl
450+  8E1F 22 C4 84     	ld (Posicion_actual),hl
451+  8E22 CD ED 8E     2 call Genera_coordenadas
452+  8E25 C9           3 ret
453+  8E26
454+  8E26              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
455+  8E26
456+  8E26 CD F0 88     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
457+  8E29              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
458+  8E29              ;																	; Filas * Columnas en DE´.
459+  8E29 3A CE 84     	ld a,(Cuad_objeto)
460+  8E2C FE 02        	cp 2
461+  8E2E 38 1A        	jr c,2F
462+  8E30 28 18        	jr z,2F
463+  8E32 E6 01        	and 1
464+  8E34 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
465+  8E36              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
466+  8E36              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
467+  8E36 C5           	push bc
468+  8E37 E5           	push hl
469+  8E38 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
470+  8E3A 0D           	dec c
471+  8E3B 2A EA 84     	ld hl,(Puntero_datas)
472+  8E3E A7           	and a
473+  8E3F ED 4A        	adc hl,bc
474+  8E41 22 EA 84     	ld (Puntero_datas),hl
475+  8E44 E1           	pop hl
476+  8E45 C1           	pop bc
477+  8E46 18 18        	jr 4F
478+  8E48              1
479+  8E48              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
480+  8E48 18 16        	jr 4F
481+  8E4A E6 01        2 and 1
482+  8E4C 28 02        	jr z,3F
483+  8E4E              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
484+  8E4E 18 10        	jr 4F
485+  8E50              3
486+  8E50              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
487+  8E50 C5           	push bc
488+  8E51 E5           	push hl
489+  8E52 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
490+  8E54 0D           	dec c
491+  8E55 2A EA 84     	ld hl,(Puntero_datas)
492+  8E58 A7           	and a
493+  8E59 ED 42        	sbc hl,bc
494+  8E5B 22 EA 84     	ld (Puntero_datas),hl
495+  8E5E E1           	pop hl
496+  8E5F C1           	pop bc
497+  8E60 C9           4 ret
498+  8E61
499+  8E61              ; ---------- ---------- ---------- ---------- ---------- ----------
500+  8E61              ;
501+  8E61              ;	Dec_CTRL_DESPLZ
502+  8E61              ;
503+  8E61              ;	Subrutina de [modifica_punteros].
504+  8E61              ;
505+  8E61              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
506+  8E61
507+  8E61 21 C6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
508+  8E64 3A D1 84     	ld a,(Vel_left)
509+  8E67 A7           	and a
510+  8E68 28 06        	jr z,1F
511+  8E6A 47           	ld b,a
512+  8E6B 35           3 dec (hl)
513+  8E6C 10 FD        	djnz 3B
514+  8E6E 18 01        	jr 2F
515+  8E70 35           1 dec (hl)
516+  8E71 C9           2 ret
517+  8E72
518+  8E72              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8E72              ;
520+  8E72              ;	19/10/22
521+  8E72              ;
522+  8E72              ;	(cp 29) para un Amadeus de 3 Columns.
523+  8E72              ;	(cp 30)   ""  ""    ""     2 Columns.
524+  8E72
525+  8E72 3A CF 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
526+  8E75 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
527+  8E77 C9           	ret
528+  8E78
529+  8E78              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8E78              ;
531+  8E78              ;	19/10/22
532+  8E78              ;
533+  8E78              ;	(cp 2) para un Amadeus de 3 Columns.
534+  8E78              ;	(cp 1)   ""  ""    ""     2 Columns.
535+  8E78
536+  8E78 3A CF 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
537+  8E7B FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
538+  8E7D C9           	ret
539+  8E7E
540+  8E7E              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8E7E              ;
542+  8E7E              ;	24/7/22
543+  8E7E              ;
544+  8E7E              ;	Inc_CTRL_DESPLZ
545+  8E7E              ;
546+  8E7E              ;	Subrutina de [modifica_punteros].
547+  8E7E              ;
548+  8E7E              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
549+  8E7E
550+  8E7E 21 C6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
551+  8E81 3A D2 84     	ld a,(Vel_right)
552+  8E84 A7           	and a
553+  8E85 28 06        	jr z,1F
554+  8E87 47           	ld b,a
555+  8E88 34           3 inc (hl)
556+  8E89 10 FD        	djnz 3B
557+  8E8B 18 01        	jr 2F
558+  8E8D 34           1 inc (hl)
559+  8E8E C9           2 ret
560+  8E8F
561+  8E8F              ; ---------- ---------- ---------- ---------- ---------- ----------
562+  8E8F
563+  8E8F 2A C4 84     Reaparece_derecha ld hl,(Posicion_actual)
564+  8E92 01 1F 00     	ld bc,31
565+  8E95 A7           	and a
566+  8E96 ED 4A        	adc hl,bc
567+  8E98 22 C4 84     	ld (Posicion_actual),hl
568+  8E9B 21 DF 84     	ld hl,Ctrl_0														; $xxx1
569+  8E9E CB C6        	set 0,(hl)
570+  8EA0 C9           	ret
571+  8EA1
572+  8EA1              ; ---------- ---------- ---------- ---------- ---------- ----------
573+  8EA1
574+  8EA1 2A C4 84     Reaparece_izquierda ld hl,(Posicion_actual)
575+  8EA4 01 1F 00     	ld bc,31
576+  8EA7 A7           	and a
577+  8EA8 ED 42        	sbc hl,bc
578+  8EAA 22 C4 84     	ld (Posicion_actual),hl 											; $xx1x
579+  8EAD 21 DF 84     	ld hl,Ctrl_0
580+  8EB0 CB CE        	set 1,(hl)
581+  8EB2 C9           	ret
582+  8EB3
583+  8EB3              ; ---------- ---------- ---------- ---------- ---------- ----------
584+  8EB3
585+  8EB3 24           Reaparece_abajo inc h
586+  8EB4 01 E0 17     	ld bc,$17e0
587+  8EB7 A7           	and a
588+  8EB8 ED 4A        	adc hl,bc
589+  8EBA 22 C4 84     	ld (Posicion_actual),hl
590+  8EBD 21 DF 84     	ld hl,Ctrl_0
591+  8EC0 CB D6        	set 2,(hl)
592+  8EC2 C9           	ret
593+  8EC3
594+  8EC3              ; ---------- ---------- ---------- ---------- ---------- ----------
595+  8EC3
596+  8EC3 01 E0 17     Reaparece_arriba ld bc,$17e0
597+  8EC6 A7           	and a
598+  8EC7 ED 42        	sbc hl,bc
599+  8EC9 22 C4 84     	ld (Posicion_actual),hl
600+  8ECC 21 DF 84     	ld hl,Ctrl_0
601+  8ECF CB DE        	set 3,(hl)
602+  8ED1 C9           	ret
603+  8ED2
604+  8ED2              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
605+  8ED2              ;   24/07/22
606+  8ED2              ;
607+  8ED2              ;	INPUT:
608+  8ED2              ;
609+  8ED2              ;	B contiene el nº de filas del objeto.
610+  8ED2              ;
611+  8ED2              ;	OUTPUT:
612+  8ED2              ;
613+  8ED2              ;	B, DE y DE´ ..... Contendrán el nº de scanlines del objeto. (Filas*8).
614+  8ED2              ;	C ..... Contendrá la variable (Columns).
615+  8ED2              ;
616+  8ED2              ;	DESTRUYE !!!!! BC, DE y DE´.
617+  8ED2
618+  8ED2 CD F0 88     Calcula_scanlines_totales call Prepara_draw                         ; [Prepara_draw] proporciona (Filas) y (Columns) del objeto.
619+  8ED5 CB 20         	sla b
620+  8ED7 CB 20        	sla b
621+  8ED9 CB 20        	sla b 															; Ahora tengo en A: (Filas*Columnas)*8
622+  8EDB 58               ld e,b
623+  8EDC 16 00            ld d,0                                                          ; (Filas)*8 en E.
624+  8EDE D5               push de
625+  8EDF D9           	exx
626+  8EE0 D1               pop de                                                          ; (Filas)*8 en DE y DE´.
627+  8EE1 D9           	exx
628+  8EE2 C9           	ret
629+  8EE3
630+  8EE3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
631+  8EE3
632+  8EE3 2A CC 84     Reinicio ld hl,(Posicion_inicio)
633+  8EE6
634+  8EE6              ;	ld (Posicion_actual),hl
635+  8EE6 21 00 00     	ld hl,0
636+  8EE9 22 C4 84     	ld (Posicion_actual),hl
637+  8EEC
638+  8EEC
639+  8EEC C9           	ret
# file closed: Direcciones.asm
637   8EED              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8EED              ;	12/12/22
  2+  8EED              ;
  3+  8EED              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8EED              ;	Fila superior "0", Columna izquierda "0".
  5+  8EED              ;
  6+  8EED              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8EED              ;
  8+  8EED              ;	Modifica: A
  9+  8EED
 10+  8EED C5           Genera_coordenadas push bc
 11+  8EEE E5           	push hl
 12+  8EEF 2A C4 84     	ld hl,(Posicion_actual)
 13+  8EF2 7D           	ld a,l
 14+  8EF3 E6 1F        	and $1f
 15+  8EF5 32 CF 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8EF8 CD 6A 8B     	call calcula_tercio
 17+  8EFB 47           	ld b,a
 18+  8EFC 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8EFD 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8EFF 7D           	ld a,l
 21+  8F00 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F02 28 05        	jr z,2F
 23+  8F04 0C           1 inc c
 24+  8F05 D6 20        	sub 32
 25+  8F07 20 FB        	jr nz,1B
 26+  8F09 0C           2 inc c
 27+  8F0A 04           	inc b
 28+  8F0B 05           	dec b
 29+  8F0C 28 04        	jr z,3F
 30+  8F0E 3E E0        	ld a,$e0
 31+  8F10 10 F2        	djnz 1B
 32+  8F12 79           3 ld a,c
 33+  8F13 3D           	dec a
 34+  8F14 32 D0 84     	ld (Coordenada_y),a
 35+  8F17 E1           	pop hl
 36+  8F18 C1           	pop bc
 37+  8F19 C9           	ret
# file closed: Genera_coordenadas.asm
638   8F1A              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F1A
  2+  8F1A
  3+  8F1A              ;   11/8/22
  4+  8F1A              ;
  5+  8F1A              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F1A              ;
  7+  8F1A              ;   Mov_obj.asm
  8+  8F1A              ;
  9+  8F1A              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F1A              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F1A              ;
 12+  8F1A              ;   Codificación:
 13+  8F1A              ;
 14+  8F1A              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F1A              ;
 16+  8F1A
 17+  8F1A 02 10 00     Izquierda db 2,%00010000,0
 18+  8F1D 02 20 00     Derecha db 2,%00100000,0
 19+  8F20 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F24 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F28 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F2C 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F30 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F34 60 42 60 40
 23+  8F38 63
 24+  8F39 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8F3D 22 A3 80 A0
 25+  8F41 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8F45 84 A0 83 A0
 26+  8F49 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8F4D 80 A3 22 A0
 27+  8F51 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8F55 40 60 42 60
 28+  8F59 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8F5D
 30+  8F5D 1D 8F        Indice_mov_Badsat defw Derecha
 31+  8F5F 24 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8F61 2C 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8F63 20 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8F65
 35+  8F65              Movimiento
 36+  8F65
 37+  8F65 3A E5 84         ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 38+  8F68 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 39+  8F69 28 02            jr z,1F
 40+  8F6B 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 41+  8F6D
 42+  8F6D 3A E6 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 43+  8F70 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 44+  8F72 32 E6 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 45+  8F75              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 46+  8F75 2A E3 84         ld hl,(Puntero_mov)
 47+  8F78 7E               ld a,(hl)
 48+  8F79 32 E5 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 49+  8F7C 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 50+  8F7D 22 E3 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 51+  8F80
 52+  8F80 3A E7 84     Decoder ld a,(Repetimos_db)
 53+  8F83 A7               and a
 54+  8F84 20 0C            jr nz,12F
 55+  8F86 2A E3 84         ld hl,(Puntero_mov)
 56+  8F89 7E               ld a,(hl)
 57+  8F8A A7               and a
 58+  8F8B 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 59+  8F8D
 60+  8F8D E6 0F            and $0f
 61+  8F8F 32 E7 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 62+  8F92              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 63+  8F92 2A E3 84     12 ld hl,(Puntero_mov)
 64+  8F95 CB 7E            bit 7,(hl)
 65+  8F97 28 03            jr z,2F
 66+  8F99 CD B6 8B         call Mov_down
 67+  8F9C 2A E3 84     2 ld hl, (Puntero_mov)
 68+  8F9F CB 76            bit 6,(hl)
 69+  8FA1 28 03            jr z,3F
 70+  8FA3 CD E1 8B         call Mov_up
 71+  8FA6 2A E3 84     3 ld hl, (Puntero_mov)
 72+  8FA9 CB 6E            bit 5,(hl)
 73+  8FAB 28 03            jr z,4F
 74+  8FAD CD 0C 8C         call Mov_right
 75+  8FB0 2A E3 84     4 ld hl, (Puntero_mov)
 76+  8FB3 CB 66            bit 4,(hl)
 77+  8FB5 28 03            jr z,5F
 78+  8FB7 CD 1B 8D         call Mov_left
 79+  8FBA
 80+  8FBA              ; ---------- --------- --------- ---------- ----------
 81+  8FBA
 82+  8FBA 3A E7 84     5 ld a,(Repetimos_db)
 83+  8FBD A7               and a
 84+  8FBE 28 07            jr z,6F
 85+  8FC0 3D               dec a
 86+  8FC1 32 E7 84         ld (Repetimos_db),a
 87+  8FC4 28 01            jr z,6f
 88+  8FC6 C9           11 ret
 89+  8FC7 21 E5 84     6 ld hl,Contador_db_mov
 90+  8FCA 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 91+  8FCB 2A E3 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 92+  8FCE 23               inc hl
 93+  8FCF 22 E3 84         ld (Puntero_mov),hl
 94+  8FD2 18 F2            jr 11B
 95+  8FD4 2A E1 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 96+  8FD7 3A E6 84         ld a,(Incrementa_puntero)
 97+  8FDA 47               ld b,a
 98+  8FDB 23           8 inc hl
 99+  8FDC 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
100+  8FDE 5E               ld e,(hl)
101+  8FDF 23               inc hl
102+  8FE0 56               ld d,(hl)
103+  8FE1 EB               ex de,hl
104+  8FE2 22 E3 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
105+  8FE5 18 DF            jr 11B
106+  8FE7
107+  8FE7              ; ---------- --------- --------- ---------- ----------
108+  8FE7              ;
109+  8FE7              ;   11/8/22
110+  8FE7              ;
111+  8FE7              ;   Prepara_Puntero_mov
112+  8FE7
113+  8FE7 E5           Prepara_Puntero_mov push hl
114+  8FE8 D5               push de
115+  8FE9 2A E1 84         ld hl,(Puntero_indice_mov)
116+  8FEC 5E               ld e,(hl)
117+  8FED 23               inc hl
118+  8FEE 56               ld d,(hl)
119+  8FEF EB               ex de,hl
120+  8FF0 22 E3 84         ld (Puntero_mov),hl
121+  8FF3 D1               pop de
122+  8FF4 E1               pop hl
123+  8FF5 C9               ret
124+  8FF6
125+  8FF6              ; ---------- --------- --------- ---------- ----------
126+  8FF6              ;
127+  8FF6              ;   11/8/22
128+  8FF6              ;
129+  8FF6              ;   Reinicia_el_movimiento
130+  8FF6
131+  8FF6 CD E7 8F     Reinicia_el_movimiento call Prepara_Puntero_mov
132+  8FF9 AF               xor a
133+  8FFA 32 E5 84         ld (Contador_db_mov),a
134+  8FFD 32 E6 84         ld (Incrementa_puntero),a
135+  9000 C3 65 8F         jp Movimiento
136+  9003
137+  9003              ; ---------- --------- --------- ---------- ----------
138+  9003
139+  9003
140+  9003
141+  9003
142+  9003
143+  9003
144+  9003
145+  9003
146+  9003
147+  9003
148+  9003
149+  9003
150+  9003
151+  9003
152+  9003
153+  9003
154+  9003
155+  9003
# file closed: Patrones_de_mov.asm
639   9003              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9003              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9003              ;
  3+  9003              ;	8/11/22
  4+  9003              ;
  5+  9003              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9003
  7+  9003              ;	ADC HL,SP	LD (addr),SP
  8+  9003              ;	ADD HL,SP	LD SP,(addr)
  9+  9003              ;	ADD IX,SP	LD SP,nn
 10+  9003              ; 	ADD IY,SP	LD SP,HL
 11+  9003              ;				LD SP,IX
 12+  9003              ;	DEC SP		LD SP,IY
 13+  9003
 14+  9003              ;	EX (SP),HL
 15+  9003              ;	EX (SP),IX
 16+  9003              ;	EX (SP),IY
 17+  9003
 18+  9003              ;	INC SP
 19+  9003
 20+  9003
 21+  9003                  org $7fa0
 22+  7FA0
 23+  7FA0 ED 73 FC 84  Guarda_foto_registros ld (Stack),sp			                      ; Guardo SP en (Stack).
 24+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 25+  7FA7
 26+  7FA7 E5               push hl
 27+  7FA8 C5               push bc
 28+  7FA9 D5               push de
 29+  7FAA DD E5            push ix
 30+  7FAC
 31+  7FAC 08               ex af,af
 32+  7FAD F5               push af
 33+  7FAE 08               ex af,af
 34+  7FAF
 35+  7FAF D9               exx
 36+  7FB0 C5               push bc
 37+  7FB1 E5               push hl                                        ; Hacemos un SNAPSHOT de los registros.
 38+  7FB2 D9               exx
 39+  7FB3
 40+  7FB3 2A 00 85         ld hl,(Stack_snapshot)                         ; Album_de_fotos contiene la imagen de los registros implicados en el_
 41+  7FB6 06 07            ld b,7                                         ; _correcto funcionamiento de [Pintorrejeo].
 42+  7FB8
 43+  7FB8 D1           1 pop de
 44+  7FB9 73               ld (hl),e
 45+  7FBA 23               inc hl
 46+  7FBB 72               ld (hl),d
 47+  7FBC 23               inc hl                                         ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 48+  7FBD 10 F9            djnz 1B
 49+  7FBF
 50+  7FBF 22 00 85         ld (Stack_snapshot),hl
 51+  7FC2 ED 7B FC 84      ld sp,(Stack)
 52+  7FC6
 53+  7FC6 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 54+  7FC7
 55+  7FC7
# file closed: Guarda_foto_registros.asm
640   7FC7
641   7FC7              	SAVESNA "Pruebas.sna", START
642   7FC7
643   7FC7
644   7FC7
# file closed: Banco_de_pruebas.asm
