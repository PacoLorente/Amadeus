# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 1F 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0 04 84        Indice_de_disparos defw Disparo_1
  7+  83F2 0C 84        	defw Disparo_2
  8+  83F4 14 84        	defw Disparo_3
  9+  83F6 1C 84        	defw Disparo_4
 10+  83F8 24 84        	defw Disparo_5
 11+  83FA 2C 84        	defw Disparo_6
 12+  83FC 34 84        	defw Disparo_7
 13+  83FE 3C 84        	defw Disparo_8
 14+  8400 44 84        	defw Disparo_9
 15+  8402 4C 84        	defw Disparo_10
 16+  8404
 17+  8404 00 00        Disparo_1 db 0,0									; Impacto / Dirección.
 18+  8406 00 00        	defw 0											; Puntero de_impresión.
 19+  8408 00 00        	defw 0											; Puntero objeto.
 20+  840A 00 00        	defw 0											; Rutina de impresión.
 21+  840C
 22+  840C 00 00        Disparo_2 db 0,0									; Impacto / Dirección.
 23+  840E 00 00        	defw 0											; Puntero de_impresión.
 24+  8410 00 00        	defw 0											; Puntero objeto.
 25+  8412 00 00        	defw 0											; Rutina de impresión.
 26+  8414
 27+  8414 00 00        Disparo_3 db 0,0									; Impacto / Dirección.
 28+  8416 00 00        	defw 0											; Puntero de_impresión.
 29+  8418 00 00        	defw 0											; Puntero objeto.
 30+  841A 00 00        	defw 0											; Rutina de impresión.
 31+  841C
 32+  841C 00 00        Disparo_4 db 0,0									; Impacto / Dirección.
 33+  841E 00 00        	defw 0											; Puntero de_impresión.
 34+  8420 00 00        	defw 0											; Puntero objeto.
 35+  8422 00 00        	defw 0											; Rutina de impresión.
 36+  8424
 37+  8424 00 00        Disparo_5 db 0,0									; Impacto / Dirección.
 38+  8426 00 00        	defw 0											; Puntero de_impresión.
 39+  8428 00 00        	defw 0											; Puntero objeto.
 40+  842A 00 00        	defw 0											; Rutina de impresión.
 41+  842C
 42+  842C 00 00        Disparo_6 db 0,0									; Impacto / Dirección.
 43+  842E 00 00        	defw 0											; Puntero de_impresión.
 44+  8430 00 00        	defw 0											; Puntero objeto.
 45+  8432 00 00        	defw 0											; Rutina de impresión.
 46+  8434
 47+  8434 00 00        Disparo_7 db 0,0									; Impacto / Dirección.
 48+  8436 00 00        	defw 0											; Puntero de_impresión.
 49+  8438 00 00        	defw 0											; Puntero objeto.
 50+  843A 00 00        	defw 0											; Rutina de impresión.
 51+  843C
 52+  843C 00 00        Disparo_8 db 0,0									; Impacto / Dirección.
 53+  843E 00 00        	defw 0											; Puntero de_impresión.
 54+  8440 00 00        	defw 0											; Puntero objeto.
 55+  8442 00 00        	defw 0											; Rutina de impresión.
 56+  8444
 57+  8444 00 00        Disparo_9 db 0,0									; Impacto / Dirección.
 58+  8446 00 00        	defw 0											; Puntero de_impresión.
 59+  8448 00 00        	defw 0											; Puntero objeto.
 60+  844A 00 00        	defw 0											; Rutina de impresión.
 61+  844C
 62+  844C 00 00        Disparo_10 db 0,0									; Impacto / Dirección.
 63+  844E 00 00        	defw 0											; Puntero de_impresión.
 64+  8450 00 00        	defw 0											; Puntero objeto.
 65+  8452 00 00        	defw 0											; Rutina de impresión.
 66+  8454
 67+  8454              ; -------------------------------------------------------------------------------------
 68+  8454
 69+  8454              Indice_de_entidades									; 58 Bytes por entidad.
 70+  8454
 71+  8454 9A 84        	defw Entidad_1
 72+  8456 D4 84        	defw Entidad_2
 73+  8458 0E 85        	defw Entidad_3
 74+  845A 48 85        	defw Entidad_4
 75+  845C              ;	...
 76+  845C              ;	...
 77+  845C              ;	+ entidades ...
 78+  845C
 79+  845C 00 00        	defw 0
 80+  845E 00 00        	defw 0
 81+  8460
 82+  8460              ; ---------- ---------- ---------- ---------- ----------
 83+  8460
 84+  8460 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 85+  8462 00 00        	defw 0		 									; (Posicion_actual).
 86+  8464 00 00        	defw 0	 										; (Puntero_objeto).
 87+  8466 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 88+  8469
 89+  8469 05           	db %00000101									; (Attr).
 90+  846A
 91+  846A 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 92+  846C 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 93+  846E 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 94+  8470 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 95+  8472
 96+  8472 D0 50        	defw $50d0										; (Posicion_inicio).
 97+  8474 04           	db 4 											; (Cuad_objeto).
 98+  8475
 99+  8475 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
100+  8479
101+  8479 00 00        	db 0,0											; Variables_de_borrado
102+  847B 00 00        	defw 0											;	" " " " " " "
103+  847D 00 00        	defw 0											;	" " " " " " "
104+  847F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
105+  8483
106+  8483 00 00        	db 0,0											; Variables_de_pintado
107+  8485 00 00        	defw 0											;	" " " " " " "
108+  8487 00 00        	defw 0											;	" " " " " " "
109+  8489 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
110+  848D
111+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
112+  848F
113+  848F 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
114+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
115+  8496
116+  8496 00           	db 0 											; (Columnas).
117+  8497 00 00        	defw 0											; (Limite_horizontal).
118+  8499 00           	db 0											; (Limite_vertical).
119+  849A
120+  849A              ; ---------- ---------- ---------- ---------- ----------
121+  849A
122+  849A 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
123+  849C 00 00        	defw 0											; (Posicion_actual).
124+  849E 00 00        	defw 0 											; (Puntero_objeto).
125+  84A0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
126+  84A3
127+  84A3 00           	db %00000000 									; (Attr).
128+  84A4
129+  84A4 00 00        	defw 0											; (Indice_Sprite_der).
130+  84A6 00 00        	defw 0											; (Indice_Sprite_izq).
131+  84A8 00 00        	defw 0											; (Puntero_DESPLZ_der).
132+  84AA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
133+  84AC
134+  84AC 00 00        	defw 0											; (Posicion_inicio).
135+  84AE 00           	db 0											; (Cuad_objeto).
136+  84AF
137+  84AF 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
138+  84B3
139+  84B3 00 00        	db 0,0										    ; Variables_de_borrado
140+  84B5 00 00        	defw 0											;	" " " " " " "
141+  84B7 00 00        	defw 0											;	" " " " " " "
142+  84B9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
143+  84BD
144+  84BD 00 00        	db 0,0											; Variables_de_pintado
145+  84BF 00 00        	defw 0											;	" " " " " " "
146+  84C1 00 00        	defw 0											;	" " " " " " "
147+  84C3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
148+  84C7
149+  84C7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
150+  84C9
151+  84C9 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
152+  84CD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
153+  84D0
154+  84D0 00           	db 0 											; (Columnas).
155+  84D1 00 00        	defw 0											; (Limite_horizontal).
156+  84D3 00           	db 0											; (Limite_vertical).
157+  84D4
158+  84D4              ; ---------- ---------- ---------- ---------- ----------
159+  84D4
160+  84D4 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
161+  84D6 00 00        	defw 0                                          ; (Posicion_actual).
162+  84D8 00 00        	defw 0											; (Puntero_objeto).
163+  84DA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
164+  84DD
165+  84DD 02           	db %00000010									; (Attr).
166+  84DE
167+  84DE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
168+  84E0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
169+  84E2 00 00        	defw 0											; (Puntero_DESPLZ_der).
170+  84E4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
171+  84E6
172+  84E6 7E 47        	defw $477e                                      ; (Posicion_inicio).
173+  84E8 02           	db 2											; (Cuad_objeto).
174+  84E9
175+  84E9 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
176+  84ED
177+  84ED 00 00        	db 0,0											; Variables_de_borrado
178+  84EF 00 00        	defw 0										 	;	" " " " " " "
179+  84F1 00 00        	defw 0											;	" " " " " " "
180+  84F3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
181+  84F7
182+  84F7 00 00        	db 0,0											; Variables_de_pintado
183+  84F9 00 00        	defw 0											;	" " " " " " "
184+  84FB 00 00        	defw 0											;	" " " " " " "
185+  84FD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
186+  8501
187+  8501 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
188+  8503
189+  8503 02 92 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
190+  8507 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
191+  850A
192+  850A 00           	db 0 											; (Columnas).
193+  850B 00 00        	defw 0											; (Limite_horizontal).
194+  850D 00           	db 0											; (Limite_vertical).
195+  850E
196+  850E              ; ---------- ---------- ---------- ---------- ----------
197+  850E
198+  850E 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
199+  8510 00 00        	defw 0                                          ; (Posicion_actual).
200+  8512 00 00        	defw 0											; (Puntero_objeto).
201+  8514 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
202+  8517
203+  8517 04           	db %00000100									; (Attr).
204+  8518
205+  8518 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
206+  851A 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
207+  851C
208+  851C 00 00        	defw 0											; (Puntero_DESPLZ_der).
209+  851E 00 00        	defw 0											; (Puntero_DESPLZ_izq).
210+  8520
211+  8520 A1 47        	defw $47a1                                      ; (Posicion_inicio).
212+  8522 01           	db 1											; (Cuad_objeto).
213+  8523
214+  8523 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
215+  8527
216+  8527 00 00        	db 0,0											; Variables_de_borrado
217+  8529 00 00        	defw 0										 	;	" " " " " " "
218+  852B 00 00        	defw 0											;	" " " " " " "
219+  852D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
220+  8531
221+  8531 00 00        	db 0,0											; Variables_de_pintado
222+  8533 00 00        	defw 0											;	" " " " " " "
223+  8535 00 00        	defw 0											;	" " " " " " "
224+  8537 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
225+  853B
226+  853B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
227+  853D
228+  853D 04 92 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
229+  8541 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
230+  8544
231+  8544 00           	db 0 											; (Columnas).
232+  8545 00 00        	defw 0											; (Limite_horizontal).
233+  8547 00           	db 0											; (Limite_vertical).
234+  8548
235+  8548              ; ---------- ---------- ---------- ---------- ----------
236+  8548
237+  8548 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
238+  854A 00 00        	defw 0                                          ; (Posicion_actual).
239+  854C 00 00        	defw 0 											; (Puntero_objeto).
240+  854E 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
241+  8551
242+  8551 01           	db %00000001									; (Attr).
243+  8552
244+  8552 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
245+  8554 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
246+  8556
247+  8556 00 00        	defw 0											; (Puntero_DESPLZ_der).
248+  8558 00 00        	defw 0											; (Puntero_DESPLZ_izq).
249+  855A
250+  855A BE 47        	defw $47be                                      ; (Posicion_inicio).
251+  855C 00           	db 0											; (Cuad_objeto).
252+  855D
253+  855D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
254+  8561
255+  8561 00 00        	db 0,0											; Variables_de_borrado
256+  8563 00 00        	defw 0										 	;	" " " " " " "
257+  8565 00 00        	defw 0											;	" " " " " " "
258+  8567 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
259+  856B
260+  856B 00 00        	db 0,0											; Variables_de_pintado
261+  856D 00 00        	defw 0											;	" " " " " " "
262+  856F 00 00        	defw 0											;	" " " " " " "
263+  8571 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
264+  8575
265+  8575 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
266+  8577
267+  8577 F4 91 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
268+  857B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
269+  857E
270+  857E 00           	db 0 											; (Columnas).
271+  857F 00 00        	defw 0											; (Limite_horizontal).
272+  8581 00           	db 0											; (Limite_vertical).
273+  8582
# file closed: Entidades_y_disparos.asm
 21   8582
 22   8582              ; ******************************************************************************************************************************************************************************************
 23   8582              ; Constantes.
 24   8582              ; ******************************************************************************************************************************************************************************************
 25   8582              ;
 26   8582              ; 8/11/22
 27   8582              ;
 28   8582              ; Constantes generales.
 29   8582              ;
 30   8582
 31   8582              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8582              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8582              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8582              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8582              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   8582
 37   8582              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   8582              ;                               				        ; De momento situamos este almacén en $7000.
 39   8582
 40   8582
 41   8582              ; ******************************************************************************************************************************************************************************************
 42   8582              ; Variables.
 43   8582              ; ******************************************************************************************************************************************************************************************
 44   8582              ;
 45   8582              ; 10/11/22
 46   8582              ;
 47   8582              ; Variables de DRAW. (Motor principal).
 48   8582              ;
 49   8582              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   8582
 51   8582 02           Filas db 2												; Filas. [DRAW]
 52   8583 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8584 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8586 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8588 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8589 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   858A
 58   858A              ; ---------- ---------- ---------- ---------;      ;---------
 59   858A
 60   858A 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   858B              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   858B              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   858B 04           Attr db %00000100										; Atributos de la entidad:
 64   858C
 65   858C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   858C              ;
 67   858C              ;	COLORES: 0 ..... NEGRO
 68   858C              ;    		 1 ..... AZUL
 69   858C              ; 			 2 ..... ROJO
 70   858C              ;			 3 ..... MAGENTA
 71   858C              ; 			 4 ..... VERDE
 72   858C              ; 			 5 ..... CIAN
 73   858C              ;			 6 ..... AMARILLO
 74   858C              ; 			 7 ..... BLANCO
 75   858C
 76   858C A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   858E 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   8590 00 00        Puntero_DESPLZ_der defw 0
 79   8592 00 00        Puntero_DESPLZ_izq defw 0
 80   8594
 81   8594 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8596 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8597
 84   8597              ; Variables de objeto. (Características).
 85   8597
 86   8597 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8598 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8599 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   859A 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   859B
 91   859B 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   859D 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   859F 00 00        	defw 0
 94   85A1 00 00 00 00  	db 0,0,0,0
 95   85A5
 96   85A5 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85A7 00 00        	defw 0
 98   85A9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85AB 00 00 00 00  	db 0,0,0,0
100   85AF
101   85AF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85AF
103   85AF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85B0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85B0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85B0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85B0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85B0              ;
109   85B0              ; 														DESCRIPCIÖN:
110   85B0              ;
111   85B0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85B0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85B0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85B0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85B0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85B0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85B0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85B0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85B0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85B0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85B0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85B0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85B0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85B0              ;
125   85B0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85B0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85B0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85B0
129   85B0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85B1
131   85B1              ; Movimiento.
132   85B1
133   85B1 F0 91        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85B3 00 00        Puntero_mov defw 0
135   85B5 00           Contador_db_mov db 0
136   85B6 00           Incrementa_puntero db 0
137   85B7 00           Repetimos_db db 0
138   85B8
139   85B8              ; Variables de funcionamiento. [DRAW].
140   85B8
141   85B8 00           Columnas db 0
142   85B9 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85BB              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85BB 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85BC
146   85BC              ; 59 Bytes por entidad.
147   85BC              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85BC              ;					         		---------;      ;---------
149   85BC
150   85BC
151   85BC              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85BC
153   85BC              ; Gestión de ENTIDADES.
154   85BC
155   85BC 00 00        Puntero_store_entidades defw 0
156   85BE 00 00        Puntero_restore_entidades defw 0
157   85C0 00 00        Indice_restore defw 0
158   85C2 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   85C3 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   85C4              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   85C4              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   85C4              ;														; _ (Numero_de_malotes)="0".
163   85C4 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   85C6              ;														; _variable para almacenar lo posición del puntero_
165   85C6              ; 														; _de pila, SP.
166   85C6 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   85C8              ;														; La utiliza la rutina [Extrae_foto_registros].
168   85C8 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   85CA              ;														; _el snapshot de los registros de la siguiente entidad.
170   85CA              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   85CA
172   85CA              ; Gestión de Disparos.
173   85CA
174   85CA F0 83        Stack_guns defw Indice_de_disparos						; Este puntero se irá desplazando por el índice de disparos_
175   85CC              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
176   85CC              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
177   85CC
178   85CC              ; Gestión de FRAMES.
179   85CC
180   85CC 00           Switch db 0
181   85CD
182   85CD              ; Variables de Raster y localización en pantalla.
183   85CD
184   85CD 00 FF        Temp_Raster defw $ff00
185   85CF
186   85CF              ; Rutina principal *************************************************************************************************************************************************************************
187   85CF              ;
188   85CF              ;	14/11/22
189   85CF
190   85CF 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
191   85D2
192   85D2 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
193   85D4 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
194   85D6 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
195   85D8 F3           	DI
196   85D9
197   85D9 3E 01        	ld a,1
198   85DB D3 FE        	out ($fe),a
199   85DD
200   85DD 3E 07        	ld a,%00000111
201   85DF CD 29 8E     	call Cls
202   85E2
203   85E2              ;	call Pinta_FILAS
204   85E2
205   85E2 CD E8 87     	call Pulsa_ENTER
206   85E5
207   85E5 21 C2 85     	ld hl,Numero_de_entidades
208   85E8 46           	ld b,(hl)
209   85E9 04           	inc b
210   85EA 05           	dec b
211   85EB 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
212   85ED
213   85ED              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
214   85ED              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
215   85ED              ;	Pintamos el resto de entidades:
216   85ED
217   85ED CD 08 87     	call Inicia_punteros_de_entidades
218   85F0
219   85F0              ;	INICIA ENTIDADES!!!!!
220   85F0
221   85F0 C5           1 push bc  												; Guardo el contador de entidades.
222   85F1 CD 3B 87      	call Inicia_Puntero_objeto
223   85F4 CD DB 88     	call Draw
224   85F7 CD A0 7F     	call Guarda_foto_registros
225   85FA CD 83 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
226   85FD C1           	pop bc
227   85FE 10 F0        	djnz 1B  											; Decremento el contador de entidades.
228   8600
229   8600              ; 	INICIA AMADEUS!!!!!
230   8600
231   8600 CD C4 87     3 call Restore_Amadeus
232   8603 CD 3B 87     	call Inicia_Puntero_objeto
233   8606 CD DB 88     	call Draw
234   8609 CD A0 7F     	call Guarda_foto_registros
235   860C CD D6 87     	call Store_Amadeus
236   860F
237   860F              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
238   860F
239   860F CD 08 87     	call Inicia_punteros_de_entidades
240   8612 CD B2 87     	call Restore_Primera_entidad
241   8615
242   8615 3A C2 85     	ld a,(Numero_de_entidades)
243   8618 3C           	inc a
244   8619 32 C3 85     	ld (Numero_de_malotes),a
245   861C
246   861C FB           2 ei
247   861D 18 FD        	jr 2B
248   861F
249   861F              ; -----------------------------------------------------------------------------------
250   861F
251   861F              Frame
252   861F
253   861F              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
254   861F              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
255   861F
256   861F 3E 07            ld a,7
257   8621 D3 FE            out ($fe),a
258   8623 CD DF 8B     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
259   8626 3E 01            ld a,1
260   8628 D3 FE            out ($fe),a
261   862A
262   862A              ;	call Genera_disparo
263   862A
264   862A              ;	jr $
265   862A
266   862A              ; ----------------------------------------------------------------------
267   862A
268   862A 21 00 70     	ld hl,Album_de_fotos
269   862D 22 C8 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
270   8630              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
271   8630 3A C2 85         ld a,(Numero_de_entidades)
272   8633 47               ld b,a
273   8634 A7           	and a
274   8635 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
275   8637
276   8637 C5           2 push bc
277   8638 CD 81 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
278   863B 3A AF 85     	ld a,(Ctrl_0)
279   863E CB 67        	bit 4,a
280   8640 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
281   8642 CD CF 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
282   8645
283   8645              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
284   8645              ; 16/02/23.
285   8645              ; [[[
286   8645 CD 1F 88     1 call Detecta_disparo_entidad
287   8648              ; ]]]
288   8648
289   8648              ;1
290   8648 21 AF 85     	ld hl,Ctrl_0
291   864B CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
292   864D AF           	xor a
293   864E 32 B0 85     	ld (Obj_dibujado),a
294   8651 CD 83 87     	call Store_Restore_entidades
295   8654 C1           	pop bc
296   8655 10 E0        	djnz 2B
297   8657
298   8657 CD C4 87     4 call Restore_Amadeus
299   865A CD A0 86     	call Mov_Amadeus
300   865D 3A AF 85     	ld a,(Ctrl_0)
301   8660 CB 67        	bit 4,a
302   8662 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
303   8664 CD CF 86     	call Guarda_foto_entidad_a_pintar
304   8667
305   8667 21 AF 85     3 ld hl,Ctrl_0
306   866A CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
307   866C AF           	xor a
308   866D 32 B0 85     	ld (Obj_dibujado),a
309   8670 CD D6 87     	call Store_Amadeus
310   8673
311   8673              ; -----
312   8673
313   8673 CD 08 87     	call Inicia_punteros_de_entidades
314   8676 CD B2 87     	call Restore_Primera_entidad
315   8679 CD 1E 87     	call Calcula_numero_de_malotes
316   867C
317   867C 3E 00        	ld a,0
318   867E D3 FE        	out ($fe),a
319   8680 C9           	ret
320   8681
321   8681              ; --------------------------------------------------------------------------------------------------------------
322   8681              ;
323   8681              ;	29/1/23
324   8681
325   8681              Mov_obj
326   8681
327   8681              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
328   8681
329   8681 AF           	xor a
330   8682 32 B0 85     	ld (Obj_dibujado),a
331   8685 CD D9 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
332   8688              ;														; Obj_dibujado="0".
333   8688              ; Movemos Entidades malignas.
334   8688
335   8688 CD 06 92     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
336   868B 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
337   868E CB 67        	bit 4,a
338   8690 C8           	ret z
339   8691
340   8691              ; ---------
341   8691
342   8691 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
343   8693 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
344   8696 CD D9 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
345   8699 CD F0 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
346   869C CD BF 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
347   869F C9           	ret													; _de la misma.
348   86A0
349   86A0              ; --------------------------------------------------------------------------------------------------------------
350   86A0              ;
351   86A0              ;	29/1/23
352   86A0
353   86A0              Mov_Amadeus
354   86A0
355   86A0 AF           	xor a
356   86A1 32 B0 85     	ld (Obj_dibujado),a
357   86A4 CD D9 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
358   86A7              ;														; Obj_dibujado="0".
359   86A7              ; Movemos Amadeus.
360   86A7
361   86A7 CD FC 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
362   86AA 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
363   86AD CB 67        	bit 4,a
364   86AF C8           	ret z
365   86B0
366   86B0              ; ---------
367   86B0
368   86B0 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
369   86B2 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
370   86B5 CD D9 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
371   86B8 CD F0 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
372   86BB CD BF 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
373   86BE C9           	ret													; _de la nave.
374   86BF
375   86BF              ; --------------------------------------------------------------------------------------------------------------
376   86BF              ;
377   86BF              ;	31/01/23
378   86BF              ;
379   86BF              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
380   86BF
381   86BF              Guarda_foto_entidad_a_borrar
382   86BF
383   86BF CD B5 8B     	call Prepara_draw
384   86C2 CD EF 8A     	call calcula_CColumnass
385   86C5 CD 26 8B     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
386   86C8 CD 7B 8B     	call Define_rutina_de_impresion
387   86CB CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
388   86CE C9           	ret
389   86CF
390   86CF              ; --------------------------------------------------------------------------------------------------------------
391   86CF              ;
392   86CF              ;	31/01/23
393   86CF              ;
394   86CF              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
395   86CF              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
396   86CF
397   86CF              Guarda_foto_entidad_a_pintar
398   86CF
399   86CF CD FC 86     	call Repone_pintar
400   86D2 CD DB 88     	call Draw
401   86D5 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
402   86D8 C9           	ret
403   86D9
404   86D9              ; --------------------------------------------------------------------------------------------------------------
405   86D9              ;
406   86D9              ;
407   86D9
408   86D9 21 82 85     Prepara_var_pintado_borrado	ld hl,Filas
409   86DC 3A B0 85     	ld a,(Obj_dibujado)
410   86DF A7           	and a
411   86E0 28 05        	jr z,1F
412   86E2 11 A5 85     	ld de,Variables_de_pintado
413   86E5 18 03        	jr 2F
414   86E7 11 9B 85     1 ld de,Variables_de_borrado
415   86EA 01 08 00     2 ld bc,8
416   86ED ED B0        	ldir
417   86EF C9           	ret
418   86F0
419   86F0              ; --------------------------------------------------------------------------------------------------------------
420   86F0
421   86F0 21 9B 85     Repone_borrar ld hl,Variables_de_borrado
422   86F3 11 82 85     	ld de,Filas
423   86F6 01 08 00     	ld bc,8
424   86F9 ED B0        	ldir
425   86FB C9           	ret
426   86FC
427   86FC 21 A5 85     Repone_pintar ld hl,Variables_de_pintado
428   86FF 11 82 85     	ld de,Filas
429   8702 01 08 00     	ld bc,8
430   8705 ED B0        	ldir
431   8707 C9           	ret
432   8708
433   8708              ; *************************************************************************************************************************************************************
434   8708              ;
435   8708              ; 8/1/23
436   8708              ;
437   8708              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
438   8708              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
439   8708              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
440   8708
441   8708              ; Destruye HL y DE !!!!!
442   8708
443   8708              Inicia_punteros_de_entidades
444   8708
445   8708 21 54 84     	ld hl,Indice_de_entidades
446   870B CD 35 87         call Extrae_address
447   870E 22 BC 85         ld (Puntero_store_entidades),hl
448   8711 21 56 84     	ld hl,Indice_de_entidades+2
449   8714 22 C0 85     	ld (Indice_restore),hl
450   8717 CD 35 87     	call Extrae_address
451   871A 22 BE 85     	ld (Puntero_restore_entidades),hl
452   871D C9               ret
453   871E
454   871E              ; -------------------------------------------------------------------------------------------------------------
455   871E              ;
456   871E              ; 30/1/23
457   871E              ;
458   871E
459   871E 2A C8 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
460   8721 7D           	ld a,l
461   8722 A7           	and a
462   8723 28 0C        	jr z,3F
463   8725 AF           	xor a
464   8726 67           	ld h,a
465   8727 7D           	ld a,l
466   8728 D6 06        1 sub 6
467   872A 28 03        	jr z,2F
468   872C 24           	inc h
469   872D 18 F9        	jr 1B
470   872F 24           2 inc h
471   8730 7C           	ld a,h
472   8731 32 C3 85     3 ld (Numero_de_malotes),a
473   8734 C9           	ret
474   8735
475   8735              ; *************************************************************************************************************************************************************
476   8735              ;
477   8735              ; 20/10/22
478   8735              ;
479   8735              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
480   8735              ;
481   8735              ; Destruye el puntero y DE !!!!!
482   8735
483   8735 5E           Extrae_address ld e,(hl)
484   8736 23           	inc hl
485   8737 56           	ld d,(hl)
486   8738 2B           	dec hl
487   8739 EB           	ex de,hl
488   873A C9           	ret
489   873B
490   873B              ; *************************************************************************************************************************************************************
491   873B              ;
492   873B              ;	7/2/23
493   873B              ;
494   873B              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
495   873B              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
496   873B              ;
497   873B              ;   Destruye HL y BC !!!!!,
498   873B              ;
499   873B              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
500   873B              ;					"0" ..... Izquierda.
501   873B
502   873B              Inicia_Puntero_objeto
503   873B
504   873B 3A 96 85     	ld a,(Cuad_objeto)
505   873E E6 01        	and 1
506   8740 F5           	push af
507   8741 CC 5F 87     	call z,Inicia_puntero_objeto_izq
508   8744 F1           	pop af
509   8745 28 2B        	jr z,1F
510   8747 CD 4C 87     	call Inicia_puntero_objeto_der
511   874A 18 26        	jr 1F
512   874C
513   874C              ; Arrancamos desde la parte izquierda de la pantalla.
514   874C              ; Iniciamos (Indice_Sprite_der).
515   874C
516   874C 2A 8C 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
517   874F 22 90 85     	ld (Puntero_DESPLZ_der),hl
518   8752 CD 35 87     	call Extrae_address
519   8755 22 86 85     	ld (Puntero_objeto),hl
520   8758
521   8758 2A 8E 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
522   875B              ;	call Extrae_address
523   875B 22 92 85     	ld (Puntero_DESPLZ_izq),hl
524   875E C9           	ret
525   875F
526   875F              ; Arrancamos desde la parte derecha de la pantalla.
527   875F              ; Iniciamos (Indice_Sprite_izq).
528   875F
529   875F 2A 8E 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
530   8762 22 92 85     	ld (Puntero_DESPLZ_izq),hl
531   8765 CD 35 87     	call Extrae_address
532   8768 22 86 85     	ld (Puntero_objeto),hl
533   876B
534   876B 2A 8C 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
535   876E              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
536   876E 22 90 85     	ld (Puntero_DESPLZ_der),hl
537   8771 C9           	ret
538   8772
539   8772              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
540   8772
541   8772 21 40 83     1 ld hl,Amadeus
542   8775 ED 4B 86 85  	ld bc,(Puntero_objeto)
543   8779 B7 ED 42     	sub hl,bc
544   877C C0           	ret nz
545   877D 21 AF 85     	ld hl,Ctrl_0
546   8780 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
547   8782 C9           	ret 												; _de nuestra nave en los extremos.
548   8783
549   8783              ; *************************************************************************************************************************************************************
550   8783              ;
551   8783              ;	8/1/23
552   8783              ;
553   8783              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
554   8783              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
555   8783
556   8783              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
557   8783              ;	_de la 2ª y 3ª entidad respectivamente.
558   8783
559   8783
560   8783
561   8783              Store_Restore_entidades
562   8783
563   8783 E5           	push hl
564   8784 D5           	push de
565   8785 C5            	push bc
566   8786
567   8786              ;	STORE !!!!!
568   8786              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
569   8786
570   8786 21 82 85     	ld hl,Filas
571   8789 ED 5B BC 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
572   878D 01 3A 00     	ld bc,58
573   8790 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
574   8792
575   8792              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
576   8792
577   8792 2A BE 85     	ld hl,(Puntero_restore_entidades)
578   8795 22 BC 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
579   8798 11 82 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
580   879B 01 3A 00     	ld bc,58
581   879E ED B0        	ldir
582   87A0
583   87A0              ;	Incrementa RESTORE !!!!!
584   87A0
585   87A0 2A C0 85         ld hl,(Indice_restore)
586   87A3 23           	inc hl
587   87A4 23           	inc hl
588   87A5 22 C0 85     	ld (Indice_restore),hl
589   87A8 CD 35 87         call Extrae_address
590   87AB 22 BE 85         ld (Puntero_restore_entidades),hl
591   87AE C1           	pop bc
592   87AF D1           	pop de
593   87B0 E1           	pop hl
594   87B1 C9           	ret
595   87B2
596   87B2              ; **************************************************************************************************
597   87B2              ;
598   87B2              ;	29/10/22
599   87B2              ;
600   87B2              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
601   87B2
602   87B2 E5           Restore_Primera_entidad push hl
603   87B3 D5           	push de
604   87B4 C5            	push bc
605   87B5 2A BC 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
606   87B8 11 82 85     	ld de,Filas
607   87BB 01 3A 00     	ld bc,58
608   87BE ED B0        	ldir
609   87C0 C1           	pop bc
610   87C1 D1           	pop de
611   87C2 E1           	pop hl
612   87C3 C9           	ret
613   87C4
614   87C4              ; **************************************************************************************************
615   87C4              ;
616   87C4              ;	25/01/23
617   87C4              ;
618   87C4              ;	Restore_Amadeus
619   87C4              ;
620   87C4              ;	Cargamos en DRAW los parámetros de Amadeus.
621   87C4              ;
622   87C4
623   87C4 E5           Restore_Amadeus	push hl
624   87C5 D5           	push de
625   87C6 C5            	push bc
626   87C7 21 60 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
627   87CA 11 82 85     	ld de,Filas
628   87CD 01 3A 00     	ld bc,58
629   87D0 ED B0        	ldir
630   87D2 C1           	pop bc
631   87D3 D1           	pop de
632   87D4 E1           	pop hl
633   87D5 C9           	ret
634   87D6
635   87D6              ; *************************************************************************************************************************************************************
636   87D6              ;
637   87D6              ;	29/01/23
638   87D6              ;
639   87D6              ;	Store_Amadeus
640   87D6              ;
641   87D6              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
642   87D6              ;
643   87D6
644   87D6 E5           Store_Amadeus push hl
645   87D7 D5           	push de
646   87D8 C5            	push bc
647   87D9 21 82 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
648   87DC 11 60 84     	ld de,Amadeus_db
649   87DF 01 3A 00     	ld bc,58
650   87E2 ED B0        	ldir
651   87E4 C1           	pop bc
652   87E5 D1           	pop de
653   87E6 E1           	pop hl
654   87E7 C9           	ret
655   87E8
656   87E8              ; **************************************************************************************************
657   87E8
658   87E8              ; Teclado.
659   87E8
660   87E8 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
661   87EA DB FE        	in a,($fe)
662   87EC E6 01        	and $01
663   87EE 28 02        	jr z,1f
664   87F0 18 F6        	jr Pulsa_ENTER
665   87F2 C9           1 ret
666   87F3
667   87F3              ; **************************************************************************************************
668   87F3              ;
669   87F3              ; Temporización.
670   87F3
671   87F3              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
672   87F3              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
673   87F3              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
674   87F3              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
675   87F3
676   87F3              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
677   87F3              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
678   87F3              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
679   87F3
680   87F3              ; A partir de $4f61 no hace falta DELAY.
681   87F3
682   87F3              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
683   87F3
684   87F3 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
685   87F6 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
686   87F7 78           	LD A,B
687   87F8 A7           	AND A
688   87F9 20 FB        	JR NZ,wait
689   87FB C9           	RET
690   87FC
691   87FC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
692   87FC              ;
693   87FC              ;	16/02/23
694   87FC
695   87FC              Movimiento_Amadeus
696   87FC
697   87FC 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
698   87FE DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
699   8800 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
700   8802 CC B7 8F         call z,Mov_left											;			"			"			"			"			"			"			"			"
701   8805 3E F7        	ld a,$f7
702   8807 DB FE        	in a,($fe)
703   8809 E6 01        	and $01
704   880B C8           	ret z
705   880C
706   880C 3E F7        	ld a,$f7
707   880E DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
708   8810 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
709   8812 CC 99 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
710   8815
711   8815              ; Disparo.
712   8815
713   8815 3E F7        	ld a,$f7												; "5" para disparar.
714   8817 DB FE        	in a,($fe)
715   8819 E6 10        	and $10
716   881B CC 53 88     	call z,Genera_disparo
717   881E C9               ret
718   881F
719   881F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
720   881F              ;
721   881F              ;	Rutina provisional
722   881F
723   881F 3E 7F        Detecta_disparo_entidad	ld a,$7f
724   8821 DB FE        	in a,($fe)
725   8823 E6 01        	and 1
726   8825 C0           	ret nz
727   8826 CD 53 88     	call Genera_disparo
728   8829 C9           	ret
729   882A
730   882A              ; Pinta indicadores de FILAS. ------------------------------------------------------
731   882A
732   882A 21 10 40     Pinta_FILAS ld hl,$4010
733   882D              ;	ld b,9
734   882D              ;2 push hl
735   882D              ;	push bc
736   882D 06 BF        	ld b,$bf
737   882F 36 80        1 ld (hl),%10000000
738   8831 CD C1 8B     	call NextScan
739   8834 10 F9        	djnz 1B
740   8836              ;	pop bc
741   8836              ;	pop hl
742   8836              ;	inc l
743   8836              ;	djnz 2B
744   8836 06 03        	ld b,3
745   8838 21 00 47         ld hl,$4700
746   883B CD 41 88     3 call Bucle_1
747   883E 10 FB            djnz 3B
748   8840 C9               ret
749   8841
750   8841 C5           Bucle_1 push bc
751   8842 E5                   push hl
752   8843 D1                   pop de
753   8844 13                   inc de
754   8845 01 FF 00             ld bc,255
755   8848 36 FF                ld (hl),255
756   884A ED B0                ldir
757   884C 23                   inc hl
758   884D 3E 07                ld a,7
759   884F 84                   add a,h
760   8850 67                   ld h,a
761   8851 C1                   pop bc
762   8852 C9                   ret
763   8853
764   8853              ; ---------------------------------------------------------------
765   8853
766   8853              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  8853              ; ******************************************************************************************************************************************************************************************
  2+  8853              ;
  3+  8853              ;   19/02/23
  4+  8853              ;
  5+  8853              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  8853              ;   En el caso de generar disparo la rutina proporciona 5 variables:
  7+  8853              ;
  8+  8853              ;       - 1 .db ..... Impacto. "1" si se produce impacto. (Cuando el disparo se genera en los_
  9+  8853              ;           _ cuadrantes 1º y 2º su valor será "0" por defecto ya que Amadeus nunca abandona_
 10+  8853              ;           _ los cuadrantes 3º y 4º).
 11+  8853              ;
 12+  8853              ;       - 2 .db ..... Dirección. "1" si el proyectil lo dispara Amadeus, (hacia arriba). "0" _
 13+  8853              ;           _ si es lanzado por las entidades, (hacia abajo).
 14+  8853              ;
 15+  8853              ;       - 3 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 16+  8853              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 17+  8853              ;
 18+  8853              ;       - 4 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 19+  8853              ;           _ la bala.
 20+  8853              ;
 21+  8853              ;       - 5 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 22+  8853              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 23+  8853              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 24+  8853              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 25+  8853              ;           _ en el momento de generarse la bala)).
 26+  8853
 27+  8853              Genera_disparo
 28+  8853
 29+  8853              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 30+  8853              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 31+  8853              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 32+  8853              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 33+  8853              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 34+  8853              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga dichos valores.
 35+  8853              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 36+  8853
 37+  8853 3A B8 85         ld a,(Columnas)
 38+  8856 47               ld b,a
 39+  8857 3A 83 85         ld a,(Columns)
 40+  885A B8               cp b
 41+  885B C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 42+  885C
 43+  885C 21 00 80         ld hl,Indice_disparo
 44+  885F 3A 8A 85         ld a,(CTRL_DESPLZ)
 45+  8862 4F               ld c,a
 46+  8863 A7               and a
 47+  8864 28 0F            jr z,1F
 48+  8866 E6 01            and 1
 49+  8868 C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 50+  8869 06 F9            ld b,$f9
 51+  886B 79               ld a,c
 52+  886C
 53+  886C 23           2 inc hl
 54+  886D 23               inc hl
 55+  886E B8               cp b
 56+  886F 28 04            jr z,1F
 57+  8871 04               inc b
 58+  8872 04               inc b
 59+  8873 18 F7            jr 2B
 60+  8875
 61+  8875 CD 35 87     1 call Extrae_address
 62+  8878 E5               push hl
 63+  8879 FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 64+  887B DD 21 2C 8C      ld ix,Pinta_Amadeus_2x2             ; Rutinas_de_impresion en IX.
 65+  887F
 66+  887F              ; --------------- ---------------- ----------------- -------------
 67+  887F              ;
 68+  887F              ;   Genera disparo.
 69+  887F              ;
 70+  887F              ;   Generamos variables de disparo. Varían en función del cuadrante en el que nos encontramos.
 71+  887F
 72+  887F 3A 96 85         ld a,(Cuad_objeto)
 73+  8882 FE 02            cp 2
 74+  8884 38 2C            jr c,3F
 75+  8886 28 2A            jr z,3F
 76+  8888
 77+  8888              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 78+  8888
 79+  8888 E6 01            and 1
 80+  888A 28 24            jr z,4F
 81+  888C
 82+  888C              ; Estamos en el 3er cuadrante de pantalla.
 83+  888C              ; 3er CUAD. ----- ----- ----- ----- -----
 84+  888C              ;
 85+  888C              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 86+  888C              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 87+  888C              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 88+  888C
 89+  888C 2A 84 85     	ld hl,(Posicion_actual)
 90+  888F
 91+  888F              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
 92+  888F
 93+  888F 3A AF 85         ld a,(Ctrl_0)
 94+  8892 CB 77            bit 6,a
 95+  8894 28 08            jr z,8F
 96+  8896
 97+  8896              ; Dispara Amadeus.
 98+  8896
 99+  8896 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
100+  8898 CD D0 8B         call PreviousScan
101+  889B 2B               dec hl                                          ; Puntero de impresión en HL.
102+  889C 18 0A            jr 10F
103+  889E
104+  889E              ; Dispara Entidad.
105+  889E
106+  889E 0E 00        8 ld c,0                                            ; Dirección "0", hacia abajo.
107+  88A0 06 08            ld b,8
108+  88A2 CD C1 8B     9 call NextScan
109+  88A5 10 FB            djnz 9B
110+  88A7
111+  88A7              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
112+  88A7
113+  88A7 2B               dec hl                                          ; Puntero de impresión en HL.
114+  88A8 CD D8 88     10 call Comprueba_Colision                         ; Retorna "1" o "0" en B indicando si se produce Colisión
115+  88AB              ;                                                   ; _al generar el disparo.
116+  88AB
117+  88AB              ; LLegados a este punto tendremos:
118+  88AB              ;
119+  88AB              ;       Puntero_objeto_disparo en IY.
120+  88AB              ;       Rutinas_de_impresion en IX.
121+  88AB              ;       Puntero_de_impresion en HL.
122+  88AB              ;       Impacto/Dirección en BC.
123+  88AB
124+  88AB CD D7 88         call Almacena_disparo
125+  88AE 18 26            jr 6F                                           ; RET.
126+  88B0
127+  88B0
128+  88B0              ; Estamos en el 4º cuadrante de pantalla.
129+  88B0
130+  88B0 18 FE        4 jr $
131+  88B2
132+  88B2              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
133+  88B2
134+  88B2 28 0F        3 jr z,5F
135+  88B4
136+  88B4              ; 1er CUAD. ----- ----- ----- ----- -----
137+  88B4              ;
138+  88B4              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
139+  88B4              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
140+  88B4              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
141+  88B4              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
142+  88B4
143+  88B4 2A 84 85     	ld hl,(Posicion_actual)
144+  88B7 CD C1 8B     	call NextScan
145+  88BA
146+  88BA              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
147+  88BA
148+  88BA 2B               dec hl                                          ; Puntero de impresión en HL.
149+  88BB 01 00 00         ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
150+  88BE
151+  88BE              ; LLegados a este punto tendremos:
152+  88BE              ;
153+  88BE              ;       Puntero_objeto_disparo en IY.
154+  88BE              ;       Rutinas_de_impresion en IX.
155+  88BE              ;       Puntero_de_impresion en HL.
156+  88BE              ;       Impacto/Dirección en BC.
157+  88BE
158+  88BE CD D7 88         call Almacena_disparo
159+  88C1 18 13            jr 6F                                           ; RET.
160+  88C3
161+  88C3              ; Estamos en el 2º cuadrante de pantalla.
162+  88C3              ; 2º CUAD. ----- ----- ----- ----- -----
163+  88C3              ;
164+  88C3              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
165+  88C3              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
166+  88C3              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
167+  88C3              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
168+  88C3
169+  88C3 2A 84 85     5 ld hl,(Posicion_actual)
170+  88C6 CD C1 8B     	call NextScan
171+  88C9
172+  88C9              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
173+  88C9
174+  88C9 3A 8A 85         ld a,(CTRL_DESPLZ)
175+  88CC A7               and a
176+  88CD 28 01            jr z,7F
177+  88CF 23               inc hl
178+  88D0 01 00 00     7 ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
179+  88D3
180+  88D3              ; LLegados a este punto tendremos:
181+  88D3              ;
182+  88D3              ;       Puntero_objeto_disparo en IY.
183+  88D3              ;       Rutinas_de_impresion en IX.
184+  88D3              ;       Puntero_de_impresion en HL.
185+  88D3              ;       Impacto/Dirección en BC.
186+  88D3
187+  88D3 CD D7 88         call Almacena_disparo
188+  88D6 C9           6 ret
189+  88D7
190+  88D7              ; ----------------------------------------------------------------
191+  88D7
192+  88D7              Almacena_disparo
193+  88D7
194+  88D7 C9               ret
195+  88D8
196+  88D8              ; ----------------------------------------------------------------
197+  88D8
198+  88D8              Comprueba_Colision
199+  88D8
200+  88D8 06 00            ld b,0
201+  88DA
202+  88DA C9               ret
# file closed: Disparo.asm
767   88DB              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  88DB              ; ******************************************************************************************************************************************************************************************
  2+  88DB              ;
  3+  88DB              ; 01/23
  4+  88DB              ;
  5+  88DB              ; DRAW. ************************************************************************************************************************************************************************************
  6+  88DB
  7+  88DB CD B5 8B     Draw call Prepara_draw
  8+  88DE 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  88DF A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  88E0 28 05        	jr z,2F
 11+  88E2
 12+  88E2 3A 96 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  88E5 18 0C        	jr 1F
 14+  88E7 2A 94 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  88EA 22 84 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  88ED CD 7C 8A     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  88F0              ;													; _la esquina superior izquierda de la pantalla.
 18+  88F0 CD 88 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  88F3 3A AF 85     1 ld a,(Ctrl_0)
 20+  88F6 CB 6F        	bit 5,a
 21+  88F8 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  88FA
 23+  88FA CD 12 89     	call Comprueba_limite_horizontal
 24+  88FD CD A2 89     	call Comprueba_limite_vertical
 25+  8900
 26+  8900              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8900
 28+  8900 CD EF 8A     3 call calcula_CColumnass
 29+  8903 CD 26 8B     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8906 CD 7B 8B     	call Define_rutina_de_impresion
 31+  8909
 32+  8909 3A AF 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  890C CB AF        	res 5,a											; _a ser de utilidad.
 34+  890E 32 AF 85     	ld (Ctrl_0),a
 35+  8911
 36+  8911 C9           	ret
 37+  8912
 38+  8912              ; *******************************************************************************************************************************************************************************************
 39+  8912              ;	21/01/23
 40+  8912              ;
 41+  8912              ; 	Comprueba_limite_horizontal.
 42+  8912              ;
 43+  8912              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8912              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8912              ;
 46+  8912              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8912              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8912              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8912              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8912
 51+  8912
 52+  8912
 53+  8912 3A AF 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8915 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8917 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8919 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  891B 32 AF 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  891E 18 09            jr 6F
 59+  8920 CB 5F        1 bit 3,a
 60+  8922 28 0A            jr z,2F
 61+  8924 E6 F7            and $f7
 62+  8926 32 AF 85         ld (Ctrl_0),a
 63+  8929 CD 7C 8A     6 call Inicializacion
 64+  892C 18 5B            jr 5F
 65+  892E E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  892F
 67+  892F              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  892F              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  892F
 70+  892F EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8930 2A B9 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8933 CD 1F 8E     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8936 67           	ld h,a
 74+  8937 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8938 CD 1F 8E     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  893B 67           	ld h,a
 77+  893C A7           	and a
 78+  893D ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  893F 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8940 3A 96 85     	ld a,(Cuad_objeto)
 81+  8943 FE 02        	cp 2
 82+  8945 38 1E        	jr c,3F
 83+  8947 28 1C        	jr z,3F
 84+  8949 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  894A 28 23            jr z,7F
 86+  894C 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  894E 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8950 E1           	pop hl
 89+  8951
 90+  8951              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8951              ; _para indicar con E="2" en caso necesario.
 92+  8951
 93+  8951 E5               push hl
 94+  8952 C5               push bc
 95+  8953 CD 1F 8E     	call calcula_tercio
 96+  8956 FE 01        	cp 1
 97+  8958 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  895A CD 8A 89         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  895D 28 26            jr z,9F
100+  895F 38 24            jr c,9F
101+  8961 1E 00        11 ld e,0
102+  8963 18 22            jr 8F
103+  8965 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8966 28 07        	jr z, 7F
105+  8968 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  896A 1E 00         	ld e,0
107+  896C E1           	pop hl
108+  896D 18 04        	jr 4F
109+  896F 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8971 18 15            jr 10F
111+  8973
112+  8973              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8973              ; _para indicar con E="2" en caso necesario.
114+  8973
115+  8973 E5           4 push hl
116+  8974 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8975 CD 1F 8E     	call calcula_tercio
118+  8978 FE 01        	cp 1
119+  897A 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  897C CD 8A 89         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  897F 28 04            jr z,9F
122+  8981 30 02            jr nc,9F
123+  8983 18 02        	jr 8F
124+  8985 1E 02        9 ld e,2
125+  8987 C1           8 pop bc
126+  8988 E1           10 pop hl
127+  8989 C9           5 ret
128+  898A
129+  898A              ; --------------------
130+  898A              ;
131+  898A              ; 25/08/22
132+  898A
133+  898A CD 1F 8E     Comprueba_centro call calcula_tercio
134+  898D 67               ld h,a
135+  898E 08           	ex af,af
136+  898F FE 02        	cp 2
137+  8991 38 07        	jr c,1F
138+  8993 28 05        	jr z,1F
139+  8995 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8998 18 03        	jr 2F
141+  899A 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  899D 08           2 ex af,af
143+  899E A7               and a
144+  899F ED 42            sbc hl,bc
145+  89A1 C9               ret
146+  89A2
147+  89A2              ; *********************************************************************************************************************************************************************************************
148+  89A2              ;
149+  89A2              ;   16/8/22
150+  89A2              ;
151+  89A2              ;	Comprueba_limite_vertical
152+  89A2              ;
153+  89A2              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  89A2              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  89A2              ;
156+  89A2
157+  89A2 2A 84 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  89A5 7D           	ld a,l
159+  89A6 E6 1F        	and $1F
160+  89A8 57           	ld d,a
161+  89A9 3A BB 85     	ld a,(Limite_vertical)
162+  89AC BA           	cp d 											; Límite - Posición.
163+  89AD 08           	ex af,af 										; Resultado de CP d en F'.
164+  89AE 3A 96 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  89B1 CB 47        	bit 0,a
166+  89B3 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  89B5
168+  89B5              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  89B5
170+  89B5 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  89B6 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  89B8
173+  89B8              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  89B8              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  89B8
176+  89B8 3A 88 85         ld a,(Coordenada_X)
177+  89BB 16 0F            ld d,Centro_izquierda
178+  89BD A7               and a
179+  89BE 92               sub d 											 ; Posición - Centro_izquierda.
180+  89BF 28 1E            jr z,3F
181+  89C1 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  89C3              ;                                                    ; _salimos sin modificar nada.
183+  89C3 18 0E            jr 2F
184+  89C5 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  89C6 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  89C8
187+  89C8              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  89C8              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  89C8
190+  89C8 3A 88 85         ld a,(Coordenada_X)
191+  89CB 16 10            ld d,Centro_derecha
192+  89CD A7               and a
193+  89CE 92               sub d
194+  89CF 28 0E            jr z,3F
195+  89D1 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  89D3              ;                                                    ; _salimos sin modificar nada.
197+  89D3 CB 43        2 bit 0,e
198+  89D5 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  89D7 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  89D8 CD 6C 8A         call Modificaccionne
201+  89DB C1           	pop bc
202+  89DC CD 7C 8A         call Inicializacion
203+  89DF C9           3 ret 				 								 ; Salimos de la rutina.
204+  89E0
205+  89E0              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  89E0
207+  89E0 C5           4 push bc
208+  89E1 01 83 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  89E4 0A           	ld a,(bc)
210+  89E5 3D           	dec a
211+  89E6 47           	ld b,a 											 ; Columnas-1 en B.
212+  89E7 7D           	ld a,l
213+  89E8 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  89E9 CB 47        	bit 0,a
215+  89EB 28 03        	jr z,5F
216+  89ED 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  89EE 18 2E        	jr 7F
218+  89F0
219+  89F0              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  89F0
221+  89F0 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  89F1 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  89F2 3A AF 85     	ld a,(Ctrl_0)
224+  89F5 CB 4F        	bit 1,a
225+  89F7 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  89F9 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  89FA
228+  89FA              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  89FA
230+  89FA 1C               inc e
231+  89FB 1D               dec e
232+  89FC 20 07            jr nz,12F
233+  89FE 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  89FF 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8A00 22 84 85     	ld (Posicion_actual),hl
236+  8A03 18 44        13 jr 9F
237+  8A05 CB 43        12 bit 0,e
238+  8A07 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8A09              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8A09 C1           	pop bc
241+  8A0A 18 D3        	jr 3B
242+  8A0C 80           14 add b
243+  8A0D 6F               ld l,a
244+  8A0E 22 84 85     	ld (Posicion_actual),hl
245+  8A11 CD 6C 8A         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8A14 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8A16 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8A18 32 AF 85         ld (Ctrl_0),a
249+  8A1B F1           	pop af
250+  8A1C 18 2B        	jr 9F
251+  8A1E
252+  8A1E              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8A1E
254+  8A1E F5           7 push af
255+  8A1F 3A AF 85     	ld a,(Ctrl_0)
256+  8A22 CB 47        	bit 0,a
257+  8A24 20 1D        	jr nz,8F
258+  8A26 F1           	pop af
259+  8A27
260+  8A27              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8A27
262+  8A27 1C           	inc e
263+  8A28 1D               dec e
264+  8A29 20 07            jr nz,10F
265+  8A2B 90           	sub b
266+  8A2C 6F               ld l,a
267+  8A2D 22 84 85     	ld (Posicion_actual),hl
268+  8A30 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8A32              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8A32 CB 43        10 bit 0,e
271+  8A34 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8A36              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8A36 C1           	pop bc
274+  8A37 18 A6        	jr 3B
275+  8A39 90           16 sub b
276+  8A3A 6F               ld l,a
277+  8A3B 22 84 85     	ld (Posicion_actual),hl
278+  8A3E CD 6C 8A         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8A41 18 06            jr 9F
280+  8A43 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8A45 32 AF 85         ld (Ctrl_0),a
282+  8A48 F1           	pop af
283+  8A49 C1           9 pop bc
284+  8A4A 1E 00        	ld e,0
285+  8A4C CD 7C 8A         call Inicializacion
286+  8A4F F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8A50 08           	ex af,af
288+  8A51 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8A52 18 8B            jr 3B
290+  8A54
291+  8A54              ; --------------------
292+  8A54
293+  8A54 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8A56 CD D0 8B     1 call PreviousScan
295+  8A59 10 FB            djnz 1B
296+  8A5B 22 84 85     	ld (Posicion_actual),hl
297+  8A5E AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8A5F C9           	ret
299+  8A60
300+  8A60              ; --------------------
301+  8A60
302+  8A60 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8A62 CD C1 8B     1 call NextScan
304+  8A65 10 FB            djnz 1B
305+  8A67 22 84 85     	ld (Posicion_actual),hl
306+  8A6A AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8A6B C9           	ret
308+  8A6C
309+  8A6C              ; --------------------
310+  8A6C              ;
311+  8A6C              ;	22/01/23
312+  8A6C              ;
313+  8A6C              ;	E="1". Hemos cambiado de cuadrante.
314+  8A6C              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8A6C              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8A6C
317+  8A6C
318+  8A6C              Modificaccionne
319+  8A6C
320+  8A6C 3A 96 85     	ld a,(Cuad_objeto)
321+  8A6F FE 02        	cp 2
322+  8A71 CC 54 8A         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8A74 DC 54 8A         call c,Modifica_Pos_actual
324+  8A77 C8           	ret z
325+  8A78 CD 60 8A         call Modifica_Pos_actual2
326+  8A7B C9               ret
327+  8A7C
328+  8A7C              ; *************************************************************************************************************************************************************************************************
329+  8A7C              ;
330+  8A7C              ;	13/8/22
331+  8A7C              ;
332+  8A7C              ;	Inicializacion
333+  8A7C              ;
334+  8A7C              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8A7C              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8A7C              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8A7C              ;
338+  8A7C              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8A7C              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8A7C              ;	_ desaparece/aparece.
341+  8A7C
342+  8A7C              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8A7C              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8A7C              ;
345+  8A7C              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8A7C              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8A7C              ; 		   [E] ="0"
348+  8A7C
349+  8A7C              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8A7C
351+  8A7C CD 1F 8E     Inicializacion call calcula_tercio
352+  8A7F 28 36        	jr z,primit
353+  8A81 E6 02        	and 2
354+  8A83 20 07        	jr nz,segmit
355+  8A85 7D           	ld a,l
356+  8A86 FE 7F        	cp $7f
357+  8A88 38 2D        	jr c,primit
358+  8A8A 28 2B        	jr z,primit
359+  8A8C CD E9 8A     segmit call column
360+  8A8F 38 13        	jr c,tercuad
361+  8A91 3E 04        cuarcuad ld a,4
362+  8A93 32 96 85     	ld (Cuad_objeto),a
363+  8A96 21 20 48     	ld hl,$4820
364+  8A99 22 B9 85     	ld (Limite_horizontal),hl
365+  8A9C 21 BB 85     	ld hl,Limite_vertical
366+  8A9F 36 0D        	ld (hl),$0d
367+  8AA1 08           	ex af,af
368+  8AA2 18 3C        	jr 1F
369+  8AA4              tercuad
370+  8AA4 3E 03        	ld a,3
371+  8AA6 32 96 85     	ld (Cuad_objeto),a
372+  8AA9 21 20 48     	ld hl,$4820
373+  8AAC 22 B9 85     	ld (Limite_horizontal),hl
374+  8AAF 21 BB 85     	ld hl,Limite_vertical
375+  8AB2 36 12        	ld (hl),$12
376+  8AB4 08           	ex af,af
377+  8AB5 18 29        	jr 1F
378+  8AB7 CD E9 8A     primit call column
379+  8ABA 38 13        	jr c, primcuad
380+  8ABC              segcuad
381+  8ABC 3E 02        	ld a,2
382+  8ABE 32 96 85     	ld (Cuad_objeto),a
383+  8AC1 21 C0 4F     	ld hl,$4fc0
384+  8AC4 22 B9 85     	ld (Limite_horizontal),hl
385+  8AC7 21 BB 85     	ld hl,Limite_vertical
386+  8ACA 36 0D        	ld (hl),$0d
387+  8ACC 08           	ex af,af
388+  8ACD 18 11        	jr 1F
389+  8ACF              primcuad
390+  8ACF 3E 01        	ld a,1
391+  8AD1 32 96 85     	ld (Cuad_objeto),a
392+  8AD4 21 C0 4F     	ld hl,$4fc0
393+  8AD7 22 B9 85     	ld (Limite_horizontal),hl
394+  8ADA 21 BB 85     	ld hl,Limite_vertical
395+  8ADD 36 12        	ld (hl),$12
396+  8ADF 08           	ex af,af
397+  8AE0 CD 51 91     1 call Genera_coordenadas
398+  8AE3 21 AF 85     	ld hl,Ctrl_0
399+  8AE6 CB EE        	set 5,(hl)
400+  8AE8 C9           	ret
401+  8AE9
402+  8AE9              ; ------------------------------------------------------------------------------------------------------------------
403+  8AE9
404+  8AE9              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8AE9              ;
406+  8AE9              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8AE9
408+  8AE9 7D           column ld a,l
409+  8AEA E6 1F        	and $1f
410+  8AEC FE 10         	cp $10
411+  8AEE C9            	ret
412+  8AEF
413+  8AEF              ; --------------------------------------------------------------------------------------------------------------------
414+  8AEF              ;
415+  8AEF              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8AEF              ;
417+  8AEF              ; 14/12/22
418+  8AEF              ;
419+  8AEF              ;	Modifica: A y BC.
420+  8AEF
421+  8AEF 3A 96 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8AF2 E6 01        	and 1
423+  8AF4 28 17        	jr z,1F
424+  8AF6
425+  8AF6              ; Nos encontramos en la parte izquierda de la pantalla
426+  8AF6
427+  8AF6 3A 88 85     	ld a,(Coordenada_X)
428+  8AF9 47           	ld b,a
429+  8AFA 04           	inc b											; (Coordenada_X)+1 en B.
430+  8AFB 79           	ld a,c
431+  8AFC 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8AFD 38 08        	jr c,2F
433+  8AFF 47           	ld b,a
434+  8B00 79           	ld a,c
435+  8B01 90           	sub b
436+  8B02 32 B8 85     	ld (Columnas),a
437+  8B05 18 1B        	jr 4F
438+  8B07 79           2 ld a,c
439+  8B08 32 B8 85     	ld (Columnas),a
440+  8B0B 18 15        	jr 4F
441+  8B0D
442+  8B0D              ; Nos encontramos en la parte derecha de la pantalla.
443+  8B0D
444+  8B0D 3A 88 85     1 ld a,(Coordenada_X)
445+  8B10 81           	add c
446+  8B11 3D           	dec a
447+  8B12 D6 1F        	sub $1f
448+  8B14 38 08        	jr c,3F
449+  8B16 47           	ld b,a
450+  8B17 79           	ld a,c
451+  8B18 90           	sub b
452+  8B19 32 B8 85     	ld (Columnas),a
453+  8B1C 18 04        	jr 4F
454+  8B1E 79           3 ld a,c
455+  8B1F 32 B8 85     	ld (Columnas),a
456+  8B22 D9           4 exx
457+  8B23 4F           	ld c,a
458+  8B24 D9           	exx
459+  8B25 C9            ret
460+  8B26
461+  8B26              ; --------------------------------------------------------------------------------------------------------------------
462+  8B26              ;
463+  8B26              ; 7/1/23
464+  8B26              ;
465+  8B26              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8B26              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8B26              ;
468+  8B26              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8B26              ;	DESTRUYE: HL,B Y A.
470+  8B26
471+  8B26 3A 96 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8B29 FE 02        	cp 2
473+  8B2B 38 18        	jr c,1F
474+  8B2D 28 16        	jr z,1F
475+  8B2F E6 01        	and 1
476+  8B31 28 0D        	jr z,3F
477+  8B33
478+  8B33              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8B33
480+  8B33 CD 6F 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8B36
482+  8B36 7D           9 ld a,l
483+  8B37 E6 1F        	and $1f
484+  8B39 28 2A        	jr z,7F
485+  8B3B 2B           	dec hl
486+  8B3C 10 F8        	djnz 9B
487+  8B3E 18 25        	jr 7F
488+  8B40
489+  8B40              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8B40
491+  8B40 2A 84 85     3 ld hl,(Posicion_actual)
492+  8B43 18 20        	jr 7F
493+  8B45
494+  8B45 28 14        1 jr z,2F
495+  8B47
496+  8B47              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8B47
498+  8B47 CD 6F 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8B4A 7D           4 ld a,l
500+  8B4B E6 1F        	and $1f
501+  8B4D 28 03        	jr z,6F
502+  8B4F 2B           	dec hl
503+  8B50 10 F8        	djnz 4B
504+  8B52 06 0F        6 ld b,15
505+  8B54 CD D0 8B     5 call PreviousScan
506+  8B57 10 FB        	djnz 5B
507+  8B59 18 0A        	jr 7F
508+  8B5B
509+  8B5B              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8B5B
511+  8B5B CD 6F 8B     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8B5E 06 0F        	ld b,15
513+  8B60 CD D0 8B     8 call PreviousScan
514+  8B63 10 FB        	djnz 8B
515+  8B65
516+  8B65 E5           7 push hl
517+  8B66 DD E1        	pop ix
518+  8B68
519+  8B68 2A 86 85     	ld hl,(Puntero_objeto)
520+  8B6B E5           	push hl
521+  8B6C FD E1        	pop iy
522+  8B6E
523+  8B6E C9           	ret
524+  8B6F
525+  8B6F              ; --------------------------------------------------------------------------------------------------------------------
526+  8B6F              ;
527+  8B6F              ;	2/1/23
528+  8B6F              ;
529+  8B6F              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8B6F              ;
531+  8B6F              ;	Tras esta rutina tenemos:
532+  8B6F              ;
533+  8B6F              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8B6F              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8B6F              ;
536+  8B6F              ;	DESTRUYE!!!!! HL,B y A.
537+  8B6F
538+  8B6F 2A 84 85     Operandos ld hl,(Posicion_actual)
539+  8B72 3A B8 85     	ld a,(Columnas)
540+  8B75 3D           	dec a
541+  8B76 20 01        	jr nz,1F
542+  8B78 3C           	inc a
543+  8B79 47           1 ld b,a
544+  8B7A C9           	ret
545+  8B7B
546+  8B7B              ; --------------------------------------------------------------------------------------------------------------------
547+  8B7B              ;
548+  8B7B              ;	3/1/23
549+  8B7B              ;
550+  8B7B              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8B7B              ;
552+  8B7B              ;	Destruye: A,B,HL y DE.
553+  8B7B
554+  8B7B              Define_rutina_de_impresion
555+  8B7B
556+  8B7B 3A 83 85     	ld a,(Columns)
557+  8B7E 47           	ld b,a
558+  8B7F 3A B8 85     	ld a,(Columnas)
559+  8B82 B8           	cp b
560+  8B83 20 0D        	jr nz,2f
561+  8B85
562+  8B85              ;	La entidad se imprime entera.
563+  8B85
564+  8B85 21 1C 8C     	ld hl, Indice_entidades_completas
565+  8B88 E6 01        	and 1
566+  8B8A 28 02        	jr z,1F
567+  8B8C
568+  8B8C 23           	inc hl
569+  8B8D 23           	inc hl
570+  8B8E
571+  8B8E CD 35 87     1 call Extrae_address
572+  8B91 C9           	ret		;	ret
573+  8B92
574+  8B92              ;	La entidad no se imprime entera en pantalla.
575+  8B92
576+  8B92 3A 96 85     2 ld a,(Cuad_objeto)
577+  8B95 E6 01        	and 1
578+  8B97 28 17        	jr z,3F
579+  8B99
580+  8B99              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8B99
582+  8B99 21 20 8C     	ld hl, Indice_entidades_incompletas_izquierda
583+  8B9C 3A 83 85     4 ld a,(Columns)
584+  8B9F E6 01        	and 1
585+  8BA1 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8BA3
587+  8BA3 23           	inc hl
588+  8BA4 23           	inc hl
589+  8BA5
590+  8BA5 3A B8 85     	ld a,(Columnas)
591+  8BA8 E6 01        	and 1
592+  8BAA 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8BAC
594+  8BAC 23           	inc hl
595+  8BAD 23           	inc hl
596+  8BAE
597+  8BAE 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8BB0
599+  8BB0 21 26 8C     3 ld hl, Indice_entidades_incompletas_derecha
600+  8BB3 18 E7        	jr 4B
601+  8BB5
602+  8BB5              ; --------------------------------------------------------------------------------------------------------------------
603+  8BB5              ;
604+  8BB5              ;	Prepara_draw
605+  8BB5              ;
606+  8BB5              ;	Es una rutina de carga.
607+  8BB5              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8BB5              ;
609+  8BB5              ;	FUNCIONAMIENTO:
610+  8BB5              ;
611+  8BB5              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8BB5              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8BB5              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8BB5              ;
615+  8BB5              ;	DESTRUYE:
616+  8BB5              ;
617+  8BB5              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8BB5
619+  8BB5 21 82 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8BB8 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8BB9 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8BBA 4E           	ld c,(hl)
623+  8BBB 2A 84 85     	ld hl,(Posicion_actual)
624+  8BBE 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8BC0 C9           	ret
626+  8BC1
627+  8BC1              ;----------------------------------------------------------------------------------------------------------------
628+  8BC1              ;
629+  8BC1              ;	5/08/22
630+  8BC1              ;
631+  8BC1              ;   NextScan.
632+  8BC1              ;
633+  8BC1              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8BC1              ;
635+  8BC1              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8BC1              ;
637+  8BC1              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8BC1              ;
639+  8BC1              ;       DESTRUIDOS: AF y HL !!!
640+  8BC1              ;
641+  8BC1              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8BC1              ;
643+  8BC1
644+  8BC1 24           NextScan inc h          ; Incrementamos el scanline.
645+  8BC2 7C               ld a,h
646+  8BC3 E6 07            and 7
647+  8BC5 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8BC6
649+  8BC6 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8BC7 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8BC9 6F               ld l,a
652+  8BCA D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8BCB
654+  8BCB 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8BCC D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8BCE 67               ld h,a
657+  8BCF C9               ret
658+  8BD0
659+  8BD0              ;----------------------------------------------------------------------------------------------------------------
660+  8BD0              ;
661+  8BD0              ;	5/08/22
662+  8BD0              ;
663+  8BD0              ;   PreviousScan.
664+  8BD0              ;
665+  8BD0              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8BD0              ;
667+  8BD0              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8BD0              ;
669+  8BD0              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8BD0              ;
671+  8BD0              ;       DESTRUIDOS: AF y HL !!!
672+  8BD0              ;
673+  8BD0              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8BD0              ;
675+  8BD0
676+  8BD0 7C           PreviousScan ld a,h
677+  8BD1 25               dec h               ; Dec H.
678+  8BD2 E6 07            and 7
679+  8BD4 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8BD5
681+  8BD5 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8BD6 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8BD8 6F               ld l,a
684+  8BD9 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8BDA
686+  8BDA 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8BDB C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8BDD 67               ld h,a
689+  8BDE C9               ret
690+  8BDF
691+  8BDF              ; -----------------------------------------------------------------------------------
692+  8BDF              ;
693+  8BDF              ;	15/1/23
694+  8BDF
695+  8BDF              Extrae_foto_registros
696+  8BDF
697+  8BDF 3A C3 85     	ld a,(Numero_de_malotes)
698+  8BE2 A7           	and a
699+  8BE3 C8           	ret z
700+  8BE4
701+  8BE4
702+  8BE4 ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8BE8 31 00 70     	ld sp,Album_de_fotos
704+  8BEB
705+  8BEB FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8BED E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8BEE D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8BEF
709+  8BEF ED 73 C6 85  	ld (Stack_2),sp
710+  8BF3 ED 7B C4 85  	ld sp,(Stack)
711+  8BF7
712+  8BF7              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8BF7
714+  8BF7 3E CD        	ld a,$cd
715+  8BF9 32 01 8C     	ld (Imprime),a
716+  8BFC EB           	ex de,hl
717+  8BFD 22 02 8C     	ld (Imprime+1),hl
718+  8C00 EB           	ex de,hl
719+  8C01
720+  8C01              ; Ejecuta la llamada:	CALL $xx,xx
721+  8C01
722+  8C01 00 00 00     Imprime db 0,0,0
723+  8C04
724+  8C04 ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8C08
726+  8C08 3A C3 85     	ld a,(Numero_de_malotes)
727+  8C0B 3D           	dec a
728+  8C0C 28 09        	jr z,1F
729+  8C0E 32 C3 85      	ld (Numero_de_malotes),a
730+  8C11 ED 7B C6 85  	ld sp,(Stack_2)
731+  8C15 18 D4        	jr 2B
732+  8C17
733+  8C17 AF           1 xor a
734+  8C18 32 C6 85     	ld (Stack_2),a
735+  8C1B C9           	ret
736+  8C1C
737+  8C1C
# file closed: Draw_XOR.asm
768   8C1C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8C1C              ;   índices de Rutinas de impresión.
  2+  8C1C
  3+  8C1C 2C 8C        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8C1E 59 8C            defw Pinta_Amadeus_3x2
  5+  8C20
  6+  8C20 AF 8C        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8C22 4F 8D            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8C24 03 8D            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8C26
 10+  8C26 D9 8C        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8C28 DD 8D            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8C2A 91 8D            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8C2C
 14+  8C2C
 15+  8C2C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8C2C              ;
 17+  8C2C              ;   12/12/22
 18+  8C2C              ;
 19+  8C2C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8C2C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8C2C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8C2C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8C2C              ;
 24+  8C2C              ;   Modifica: DE y HL.
 25+  8C2C
 26+  8C2C ED 73 C4 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8C30 FD F9        	ld sp,iy
 28+  8C32
 29+  8C32              ; >>>
 30+  8C32
 31+  8C32 06 10            ld b,16
 32+  8C34 D1           1 pop de
 33+  8C35 7B               ld a,e
 34+  8C36 AE               xor (hl)
 35+  8C37 77           	ld (hl),a
 36+  8C38 23           	inc hl
 37+  8C39 7A               ld a,d
 38+  8C3A AE               xor (hl)
 39+  8C3B 77           	ld (hl),a
 40+  8C3C 2B           	dec hl
 41+  8C3D 24           	inc h
 42+  8C3E 7C               ld a,h
 43+  8C3F E6 07            and 7
 44+  8C41 20 0A            jr nz,2F
 45+  8C43 7D               ld a,l
 46+  8C44 C6 20            add a,$20
 47+  8C46 6F               ld l,a
 48+  8C47 38 04            jr c,2F
 49+  8C49 7C               ld a,h
 50+  8C4A D6 08            sub 8
 51+  8C4C 67               ld h,a
 52+  8C4D 7C           2 ld a,h
 53+  8C4E FE 58            cp $58
 54+  8C50 28 02            jr z,3F
 55+  8C52 10 E0            djnz 1B
 56+  8C54 ED 7B C4 85  3 ld sp,(Stack)
 57+  8C58 C9           	ret
 58+  8C59
 59+  8C59 ED 73 C4 85  Pinta_Amadeus_3x2 ld (Stack),sp
 60+  8C5D FD F9        	ld sp,iy
 61+  8C5F 06 08            ld b,8
 62+  8C61 D1           1 pop de
 63+  8C62 7B               ld a,e
 64+  8C63 AE               xor (hl)
 65+  8C64 77           	ld (hl),a
 66+  8C65 23           	inc hl
 67+  8C66 7A               ld a,d
 68+  8C67 AE               xor (hl)
 69+  8C68 77           	ld (hl),a
 70+  8C69 23           	inc hl
 71+  8C6A D1           	pop de
 72+  8C6B 7B               ld a,e
 73+  8C6C AE               xor (hl)
 74+  8C6D 77           	ld (hl),a
 75+  8C6E 2B           	dec hl
 76+  8C6F 2B           	dec hl
 77+  8C70 24           	inc h
 78+  8C71 7C               ld a,h
 79+  8C72 E6 07            and 7
 80+  8C74 20 0A            jr nz,2F
 81+  8C76 7D               ld a,l
 82+  8C77 C6 20            add a,$20
 83+  8C79 6F               ld l,a
 84+  8C7A 38 04            jr c,2F
 85+  8C7C 7C               ld a,h
 86+  8C7D D6 08            sub 8
 87+  8C7F 67               ld h,a
 88+  8C80 7C           2 ld a,h
 89+  8C81 FE 58            cp $58
 90+  8C83 28 25            jr z,4F
 91+  8C85 7A               ld a,d
 92+  8C86 AE               xor (hl)
 93+  8C87 77               ld (hl),a
 94+  8C88 D1           	pop de
 95+  8C89 23           	inc hl
 96+  8C8A 7B               ld a,e
 97+  8C8B AE               xor (hl)
 98+  8C8C 77           	ld (hl),a
 99+  8C8D 23           	inc hl
100+  8C8E 7A               ld a,d
101+  8C8F AE               xor (hl)
102+  8C90 77           	ld (hl),a
103+  8C91 2B           	dec hl
104+  8C92 2B           	dec hl
105+  8C93 24           	inc h
106+  8C94 7C               ld a,h
107+  8C95 E6 07            and 7
108+  8C97 20 0A            jr nz,3F
109+  8C99 7D               ld a,l
110+  8C9A C6 20            add a,$20
111+  8C9C 6F               ld l,a
112+  8C9D 38 04            jr c,3F
113+  8C9F 7C               ld a,h
114+  8CA0 D6 08            sub 8
115+  8CA2 67               ld h,a
116+  8CA3 7C           3 ld a,h
117+  8CA4 FE 58            cp $58
118+  8CA6 28 02            jr z,4F
119+  8CA8 10 B7            djnz 1B
120+  8CAA ED 7B C4 85  4 ld sp,(Stack)
121+  8CAE C9           	ret
122+  8CAF
123+  8CAF              ; ---------------------------------------------------
124+  8CAF
125+  8CAF ED 73 C4 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
126+  8CB3 FD F9        	ld sp,iy
127+  8CB5
128+  8CB5              ; >>>
129+  8CB5
130+  8CB5 06 10            ld b,16
131+  8CB7 D1           1 pop de
132+  8CB8 7A           	ld a,d
133+  8CB9 AE           	xor (hl)
134+  8CBA 77           	ld (hl),a
135+  8CBB 24           	inc h
136+  8CBC 7C               ld a,h
137+  8CBD E6 07            and 7
138+  8CBF 20 0C            jr nz,2F
139+  8CC1 7D               ld a,l
140+  8CC2 C6 20            add a,$20
141+  8CC4 6F               ld l,a
142+  8CC5 38 06            jr c,2F
143+  8CC7 7C               ld a,h
144+  8CC8 D6 08            sub 8
145+  8CCA 67               ld h,a
146+  8CCB 18 00            jr 2F
147+  8CCD 7C           2 ld a,h
148+  8CCE FE 58            cp $58
149+  8CD0 28 02            jr z,3F
150+  8CD2 10 E3            djnz 1B
151+  8CD4 ED 7B C4 85  3 ld sp,(Stack)
152+  8CD8 C9           	ret
153+  8CD9
154+  8CD9 ED 73 C4 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
155+  8CDD FD F9        	ld sp,iy
156+  8CDF
157+  8CDF              ; >>>
158+  8CDF
159+  8CDF 06 10            ld b,16
160+  8CE1 D1           1 pop de
161+  8CE2 7B           	ld a,e
162+  8CE3 AE           	xor (hl)
163+  8CE4 77           	ld (hl),a
164+  8CE5 24           	inc h
165+  8CE6 7C               ld a,h
166+  8CE7 E6 07            and 7
167+  8CE9 20 0C            jr nz,2F
168+  8CEB 7D               ld a,l
169+  8CEC C6 20            add a,$20
170+  8CEE 6F               ld l,a
171+  8CEF 38 06            jr c,2F
172+  8CF1 7C               ld a,h
173+  8CF2 D6 08            sub 8
174+  8CF4 67               ld h,a
175+  8CF5 18 00            jr 2F
176+  8CF7 7C           2 ld a,h
177+  8CF8 FE 58            cp $58
178+  8CFA 28 02            jr z,3F
179+  8CFC 10 E3            djnz 1B
180+  8CFE ED 7B C4 85  3 ld sp,(Stack)
181+  8D02 C9           	ret
182+  8D03
183+  8D03              ; ---------------------------------------------------
184+  8D03
185+  8D03 ED 73 C4 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
186+  8D07 FD F9        	ld sp,iy
187+  8D09 06 08            ld b,8
188+  8D0B D1           1 pop de
189+  8D0C 7A           	ld a,d
190+  8D0D AE           	xor (hl)
191+  8D0E 77           	ld (hl),a
192+  8D0F 23           	inc hl
193+  8D10 D1           	pop de
194+  8D11 7B           	ld a,e
195+  8D12 AE           	xor (hl)
196+  8D13 77           	ld (hl),a
197+  8D14 2B           	dec hl
198+  8D15 24            	inc h
199+  8D16 7C               ld a,h
200+  8D17 E6 07            and 7
201+  8D19 20 0A            jr nz,2F
202+  8D1B 7D               ld a,l
203+  8D1C C6 20            add a,$20
204+  8D1E 6F               ld l,a
205+  8D1F 38 04            jr c,2F
206+  8D21 7C               ld a,h
207+  8D22 D6 08            sub 8
208+  8D24 67               ld h,a
209+  8D25 7C           2 ld a,h
210+  8D26 FE 58            cp $58
211+  8D28 28 20            jr z,4F
212+  8D2A D1               pop de
213+  8D2B 7B           	ld a,e
214+  8D2C AE           	xor (hl)
215+  8D2D 77           	ld (hl),a
216+  8D2E 23           	inc hl
217+  8D2F 7A           	ld a,d
218+  8D30 AE           	xor (hl)
219+  8D31 77           	ld (hl),a
220+  8D32 2B           	dec hl
221+  8D33 24           	inc h
222+  8D34 7C               ld a,h
223+  8D35 E6 07            and 7
224+  8D37 20 0A            jr nz,3F
225+  8D39 7D               ld a,l
226+  8D3A C6 20            add a,$20
227+  8D3C 6F               ld l,a
228+  8D3D 38 04            jr c,3F
229+  8D3F 7C               ld a,h
230+  8D40 D6 08            sub 8
231+  8D42 67               ld h,a
232+  8D43 7C           3 ld a,h
233+  8D44 FE 58            cp $58
234+  8D46 28 02            jr z,4F
235+  8D48 10 C1            djnz 1B
236+  8D4A ED 7B C4 85  4 ld sp,(Stack)
237+  8D4E C9           	ret
238+  8D4F
239+  8D4F ED 73 C4 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
240+  8D53 FD F9        	ld sp,iy
241+  8D55 06 08            ld b,8
242+  8D57 D1           1 pop de
243+  8D58 D1           	pop de
244+  8D59 7B           	ld a,e
245+  8D5A AE           	xor (hl)
246+  8D5B 77           	ld (hl),a
247+  8D5C 24            	inc h
248+  8D5D 7C               ld a,h
249+  8D5E E6 07            and 7
250+  8D60 20 0A            jr nz,2F
251+  8D62 7D               ld a,l
252+  8D63 C6 20            add a,$20
253+  8D65 6F               ld l,a
254+  8D66 38 04            jr c,2F
255+  8D68 7C               ld a,h
256+  8D69 D6 08            sub 8
257+  8D6B 67               ld h,a
258+  8D6C 7C           2 ld a,h
259+  8D6D FE 58            cp $58
260+  8D6F 28 1B            jr z,4F
261+  8D71 D1               pop de
262+  8D72 7A           	ld a,d
263+  8D73 AE           	xor (hl)
264+  8D74 77           	ld (hl),a
265+  8D75 24           	inc h
266+  8D76 7C               ld a,h
267+  8D77 E6 07            and 7
268+  8D79 20 0A            jr nz,3F
269+  8D7B 7D               ld a,l
270+  8D7C C6 20            add a,$20
271+  8D7E 6F               ld l,a
272+  8D7F 38 04            jr c,3F
273+  8D81 7C               ld a,h
274+  8D82 D6 08            sub 8
275+  8D84 67               ld h,a
276+  8D85 7C           3 ld a,h
277+  8D86 FE 58            cp $58
278+  8D88 28 02            jr z,4F
279+  8D8A 10 CB            djnz 1B
280+  8D8C ED 7B C4 85  4 ld sp,(Stack)
281+  8D90 C9           	ret
282+  8D91
283+  8D91 ED 73 C4 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
284+  8D95 FD F9        	ld sp,iy
285+  8D97 06 08            ld b,8
286+  8D99 D1           1 pop de
287+  8D9A 7B           	ld a,e
288+  8D9B AE           	xor (hl)
289+  8D9C 77           	ld (hl),a
290+  8D9D 23           	inc hl
291+  8D9E 7A           	ld a,d
292+  8D9F AE           	xor (hl)
293+  8DA0 77           	ld (hl),a
294+  8DA1 2B           	dec hl
295+  8DA2 24             	inc h
296+  8DA3 7C               ld a,h
297+  8DA4 E6 07            and 7
298+  8DA6 20 0A            jr nz,2F
299+  8DA8 7D               ld a,l
300+  8DA9 C6 20            add a,$20
301+  8DAB 6F               ld l,a
302+  8DAC 38 04            jr c,2F
303+  8DAE 7C               ld a,h
304+  8DAF D6 08            sub 8
305+  8DB1 67               ld h,a
306+  8DB2 7C           2 ld a,h
307+  8DB3 FE 58            cp $58
308+  8DB5 28 21            jr z,4F
309+  8DB7 D1               pop de
310+  8DB8 7A           	ld a,d
311+  8DB9 AE           	xor (hl)
312+  8DBA 77           	ld (hl),a
313+  8DBB 23           	inc hl
314+  8DBC D1               pop de
315+  8DBD 7B           	ld a,e
316+  8DBE AE           	xor (hl)
317+  8DBF 77           	ld (hl),a
318+  8DC0 2B           	dec hl
319+  8DC1 24           	inc h
320+  8DC2 7C               ld a,h
321+  8DC3 E6 07            and 7
322+  8DC5 20 0A            jr nz,3F
323+  8DC7 7D               ld a,l
324+  8DC8 C6 20            add a,$20
325+  8DCA 6F               ld l,a
326+  8DCB 38 04            jr c,3F
327+  8DCD 7C               ld a,h
328+  8DCE D6 08            sub 8
329+  8DD0 67               ld h,a
330+  8DD1 7C           3 ld a,h
331+  8DD2 FE 58            cp $58
332+  8DD4 28 02            jr z,4F
333+  8DD6 10 C1            djnz 1B
334+  8DD8 ED 7B C4 85  4 ld sp,(Stack)
335+  8DDC C9           	ret
336+  8DDD
337+  8DDD ED 73 C4 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
338+  8DE1 FD F9        	ld sp,iy
339+  8DE3 06 08            ld b,8
340+  8DE5 D1           1 pop de
341+  8DE6 7B           	ld a,e
342+  8DE7 AE           	xor (hl)
343+  8DE8 77           	ld (hl),a
344+  8DE9 24            	inc h
345+  8DEA 7C               ld a,h
346+  8DEB E6 07            and 7
347+  8DED 20 0A            jr nz,2F
348+  8DEF 7D               ld a,l
349+  8DF0 C6 20            add a,$20
350+  8DF2 6F               ld l,a
351+  8DF3 38 04            jr c,2F
352+  8DF5 7C               ld a,h
353+  8DF6 D6 08            sub 8
354+  8DF8 67               ld h,a
355+  8DF9 7C           2 ld a,h
356+  8DFA FE 58            cp $58
357+  8DFC 28 1C            jr z,4F
358+  8DFE D1               pop de
359+  8DFF 7A           	ld a,d
360+  8E00 AE           	xor (hl)
361+  8E01 77           	ld (hl),a
362+  8E02 24           	inc h
363+  8E03 7C               ld a,h
364+  8E04 E6 07            and 7
365+  8E06 20 0A            jr nz,3F
366+  8E08 7D               ld a,l
367+  8E09 C6 20            add a,$20
368+  8E0B 6F               ld l,a
369+  8E0C 38 04            jr c,3F
370+  8E0E 7C               ld a,h
371+  8E0F D6 08            sub 8
372+  8E11 67               ld h,a
373+  8E12 7C           3 ld a,h
374+  8E13 FE 58            cp $58
375+  8E15 28 03            jr z,4F
376+  8E17 D1               pop de
377+  8E18 10 CB            djnz 1B
378+  8E1A ED 7B C4 85  4 ld sp,(Stack)
379+  8E1E C9           	ret
380+  8E1F
381+  8E1F              ; ---------------------------------------------------
382+  8E1F
# file closed: Rutinas_de_impresion_sprites.asm
769   8E1F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8E1F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8E1F              ;
  3+  8E1F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8E1F              ;
  5+  8E1F              ; *****************************************************************************************************************************************************************************************
  6+  8E1F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8E1F
  8+  8E1F 7C           calcula_tercio ld a,h
  9+  8E20 E6 18        	and $18
 10+  8E22 CB 2F        	sra a
 11+  8E24 CB 2F        	sra a
 12+  8E26 CB 2F        	sra a
 13+  8E28 C9           	ret
 14+  8E29
# file closed: calcula_tercio.asm
770   8E29              	include "Cls.asm"
# file opened: Cls.asm
  1+  8E29              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8E29              ;
  3+  8E29              ;
  4+  8E29              ;	CLS.
  5+  8E29              ;
  6+  8E29              ;	Limpia la pantalla y define sus atributos.
  7+  8E29              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8E29              ;
  9+  8E29              ;	COLORES: 0 ..... NEGRO
 10+  8E29              ;    		 1 ..... AZUL
 11+  8E29              ; 			 2 ..... ROJO
 12+  8E29              ;			 3 ..... MAGENTA
 13+  8E29              ; 			 4 ..... VERDE
 14+  8E29              ; 			 5 ..... CIAN
 15+  8E29              ;			 6 ..... AMARILLO
 16+  8E29              ; 			 7 ..... BLANCO
 17+  8E29              ;
 18+  8E29              ;	INPUT: A contiene los atributos de pantalla.
 19+  8E29              ;
 20+  8E29              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8E29
 22+  8E29
 23+  8E29 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8E2C 11 01 40     	LD DE,$4001
 25+  8E2F 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8E32 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8E34 ED B0        	LDIR
 28+  8E36 01 FF 02     	LD BC,767
 29+  8E39 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8E3A ED B0        	LDIR
 31+  8E3C C9           	ret
 32+  8E3D
# file closed: Cls.asm
771   8E3D              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8E3D              ; ******************************************************************************************************************************************************************************************
  2+  8E3D              ;
  3+  8E3D              ;   22/01/23
  4+  8E3D              ;
  5+  8E3D              ;	Mov_down
  6+  8E3D              ;
  7+  8E3D              ; 	Mueve el Sprite X px hacia abajo.
  8+  8E3D              ;
  9+  8E3D              ;
 10+  8E3D 21 AF 85     Mov_down ld hl,Ctrl_0
 11+  8E40 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8E42              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8E42              ; 																	; _ en el caso de que no lo haya.
 14+  8E42 3A 9A 85     	ld a,(Vel_down)
 15+  8E45 47           	ld b,a
 16+  8E46 2A 84 85         ld hl,(Posicion_actual)
 17+  8E49 CD 1F 8E     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8E4C E6 02        	and 2
 19+  8E4E 28 0F        	jr z,1F
 20+  8E50
 21+  8E50              ; Nos encontramos en el último tercio de pantalla.
 22+  8E50              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8E50
 24+  8E50 7C           	ld a,h
 25+  8E51 FE 57        	cp $57
 26+  8E53 20 0A        	jr nz,1F
 27+  8E55 7D           	ld a,l
 28+  8E56 C6 20        	add $20
 29+  8E58 30 05        	jr nc,1F
 30+  8E5A
 31+  8E5A              ; ------------------------------
 32+  8E5A CD 3B 91     	call Reaparece_arriba
 33+  8E5D              ;	call Reinicio
 34+  8E5D              ; ------------------------------
 35+  8E5D 18 08        	jr 3F
 36+  8E5F CD C1 8B     1 call NextScan
 37+  8E62 22 84 85     	ld (Posicion_actual),hl
 38+  8E65 10 E2            djnz 2B
 39+  8E67 CD 51 91     3 call Genera_coordenadas
 40+  8E6A C9           	ret
 41+  8E6B
 42+  8E6B
 43+  8E6B              ; ******************************************************************************************************************************************************************************************
 44+  8E6B              ;
 45+  8E6B              ;   22/01/23
 46+  8E6B              ;
 47+  8E6B              ;	Mov_up
 48+  8E6B              ;
 49+  8E6B              ; 	Mueve el Sprite hacia arriba.
 50+  8E6B              ;
 51+  8E6B              ;
 52+  8E6B 21 AF 85     Mov_up ld hl,Ctrl_0
 53+  8E6E CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8E70              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8E70              ; 																		; _ en el caso de que no lo haya.
 56+  8E70 3A 99 85     	ld a,(Vel_up)
 57+  8E73 47           	ld b,a
 58+  8E74 2A 84 85     	ld hl,(Posicion_actual)
 59+  8E77 CD 1F 8E     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8E7A A7           	and a
 61+  8E7B 20 10        	jr nz,1F
 62+  8E7D
 63+  8E7D              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8E7D              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8E7D
 66+  8E7D 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8E7E FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8E80 20 0B            jr nz,1F
 69+  8E82 7D               ld a,l
 70+  8E83 D6 20            sub $20
 71+  8E85 30 06            jr nc,1F
 72+  8E87 25               dec h
 73+  8E88
 74+  8E88              ; -----------------------------
 75+  8E88 CD 2B 91         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8E8B              ;	call Reinicio
 77+  8E8B              ; -----------------------------
 78+  8E8B
 79+  8E8B 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8E8D CD D0 8B     1 call PreviousScan
 81+  8E90 22 84 85     	ld (Posicion_actual),hl
 82+  8E93 10 E2            djnz 3B
 83+  8E95 CD 51 91     2 call Genera_coordenadas
 84+  8E98 C9           	ret
 85+  8E99
 86+  8E99              ; ******************************************************************************************************************************************************************************************
 87+  8E99              ;
 88+  8E99              ;	19/10/22
 89+  8E99              ;
 90+  8E99              ;	Mov_right.
 91+  8E99              ;
 92+  8E99              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8E99              ;
 94+  8E99
 95+  8E99 21 AF 85     Mov_right ld hl,Ctrl_0
 96+  8E9C CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8E9E              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8E9E              ; 																	; _ en el caso de que no lo haya.
 99+  8E9E 3A AF 85     	ld a,(Ctrl_0)
100+  8EA1 CB 77        	bit 6,a
101+  8EA3 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8EA5
103+  8EA5 CD D9 90     	call Stop_Amadeus_right
104+  8EA8 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8EA9 18 4D        	jr 8F
106+  8EAB
107+  8EAB 3A 88 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8EAE FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8EB0 20 46        	jr nz,8F
110+  8EB2
111+  8EB2 3A 8A 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8EB5 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8EB6 28 40        	jr z,8F
114+  8EB8
115+  8EB8              ; ---------- ---------- ----------
116+  8EB8              ;
117+  8EB8              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8EB8
119+  8EB8 3A 98 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8EBB FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8EBD 28 11        	jr z,1F
122+  8EBF 38 06        	jr c,6F
123+  8EC1 FE 04        	cp 4
124+  8EC3 28 14        	jr z,7F
125+  8EC5 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8EC7
127+  8EC7              ; ---------- ---------- ----------
128+  8EC7              ;
129+  8EC7              ; Perfiles de velocidad
130+  8EC7              ;
131+  8EC7
132+  8EC7 3A 8A 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8ECA FE FE        	cp $fe
134+  8ECC 20 2A        	jr nz,8F
135+  8ECE 18 10        	jr 3F
136+  8ED0 3A 8A 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8ED3 FE FD        	cp $fd
138+  8ED5 20 21        	jr nz,8F
139+  8ED7 18 07        	jr 3F
140+  8ED9 3A 8A 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8EDC FE FB        	cp $fb
142+  8EDE 20 18        	jr nz,8F
143+  8EE0
144+  8EE0              ; ---------- ---------- ----------
145+  8EE0
146+  8EE0              3
147+  8EE0 CD 19 91     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8EE3              ;	call Reinicio
149+  8EE3
150+  8EE3              ; ---------- ---------- ----------
151+  8EE3              ;
152+  8EE3              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8EE3
154+  8EE3 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8EE5 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8EE6 CD FF 8E     	call DESPLZ_DER
157+  8EE9 C1           	pop bc
158+  8EEA 10 F9        	djnz 5B
159+  8EEC 2A 84 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8EEF 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8EF0 22 84 85     	ld (Posicion_actual),hl
162+  8EF3 CD 51 91     	call Genera_coordenadas
163+  8EF6 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8EF8
165+  8EF8              ; ---------- ---------- ----------
166+  8EF8
167+  8EF8 2A 84 85     8 ld hl,(Posicion_actual)
168+  8EFB CD FF 8E     	call DESPLZ_DER
169+  8EFE C9           2 ret
170+  8EFF
171+  8EFF              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8EFF              ;
173+  8EFF              ;	22/9/22
174+  8EFF              ;
175+  8EFF
176+  8EFF CD 0E 8F     DESPLZ_DER call Desplaza_derecha
177+  8F02 CD 5A 8F         call modifica_parametros_1er_DESPLZ_2
178+  8F05 CD 83 8F         call Ciclo_completo
179+  8F08 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8F0B CB FE        	set 7,(hl)
181+  8F0D C9           	ret
182+  8F0E
183+  8F0E              ; ******************************************************************************************************************************************************************************************
184+  8F0E              ;	15/02/23
185+  8F0E              ;
186+  8F0E
187+  8F0E 3A 98 85     Desplaza_derecha ld a,(Vel_right)
188+  8F11 47           	ld b,a
189+  8F12 2A 90 85     	ld hl,(Puntero_DESPLZ_der)
190+  8F15 23           1 inc hl
191+  8F16 23           	inc hl
192+  8F17 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8F19 22 90 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8F1C CD 35 87     	call Extrae_address
195+  8F1F 22 86 85     	ld (Puntero_objeto),hl
196+  8F22
197+  8F22              ; Modifica (Puntero_DESPLZ_izq).
198+  8F22
199+  8F22              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8F22              ; Cuántos movimientos hemos hecho ??
201+  8F22              ; DE contiene (Puntero_DESPLZ_der).
202+  8F22
203+  8F22 2A 8C 85     7 ld hl,(Indice_Sprite_der)
204+  8F25 EB           	ex de,hl
205+  8F26 A7           	and a
206+  8F27 ED 52        	sbc hl,de
207+  8F29 CB 3D        	srl l
208+  8F2B 3E 08        6 ld a,8
209+  8F2D 95           	sub l
210+  8F2E 30 1E        	jr nc,3F
211+  8F30
212+  8F30              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8F30              ; B="0".
214+  8F30
215+  8F30 04           4 inc b
216+  8F31 3C           	inc a
217+  8F32 20 FC        	jr nz,4B
218+  8F34 78           	ld a,b
219+  8F35 08           	ex af,af
220+  8F36 2A 8C 85     	ld hl,(Indice_Sprite_der)
221+  8F39 23           5 inc hl
222+  8F3A 23           	inc hl
223+  8F3B 10 FC        	djnz 5B
224+  8F3D 22 90 85     	ld (Puntero_DESPLZ_der),hl
225+  8F40 CD 35 87     	call Extrae_address
226+  8F43 22 86 85     	ld (Puntero_objeto),hl
227+  8F46
228+  8F46              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8F46              ; _(Posicion_actual).
230+  8F46
231+  8F46 21 84 85     	ld hl,Posicion_actual
232+  8F49 34           	inc (hl)
233+  8F4A 08               ex af,af
234+  8F4B 6F           	ld l,a
235+  8F4C 18 DD        	jr 6B
236+  8F4E
237+  8F4E              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8F4E
239+  8F4E 47           3 ld b,a
240+  8F4F 2A 8E 85     	ld hl,(Indice_Sprite_izq)
241+  8F52 23           2 inc hl
242+  8F53 23           	inc hl
243+  8F54 10 FC        	djnz 2B
244+  8F56 22 92 85     	ld (Puntero_DESPLZ_izq),hl
245+  8F59 C9           8 ret
246+  8F5A
247+  8F5A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8F5A              ;
249+  8F5A              ;	24/7/22
250+  8F5A              ;
251+  8F5A              ;	modifica_parametros_1er_DESPLZ_2
252+  8F5A              ;
253+  8F5A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8F5A              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8F5A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8F5A
257+  8F5A 3A 8A 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8F5D A7           	and a
259+  8F5E 20 1F        	jr nz,1F
260+  8F60 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8F62 32 8A 85         ld (CTRL_DESPLZ),a
262+  8F65
263+  8F65 21 83 85     	ld hl,Columns
264+  8F68 34           	inc (hl)
265+  8F69 3A 96 85     	ld a,(Cuad_objeto)
266+  8F6C E6 01        	and 1
267+  8F6E 28 0F        	jr z,1F
268+  8F70 2A 84 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8F73 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8F74 22 84 85     	ld (Posicion_actual),hl
271+  8F77 CD 51 91     	call Genera_coordenadas
272+  8F7A CD E5 90     	call Inc_CTRL_DESPLZ
273+  8F7D 18 03        	jr 2F
274+  8F7F CD E5 90     1 call Inc_CTRL_DESPLZ
275+  8F82 C9           2 ret
276+  8F83
277+  8F83              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8F83              ;
279+  8F83              ;	24/7/22
280+  8F83              ;
281+  8F83              ;	Ciclo_completo.
282+  8F83              ;
283+  8F83              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8F83              ;
285+  8F83              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8F83              ; 	Decrementamos (Columns).
287+  8F83              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8F83              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8F83
290+  8F83
291+  8F83 3A 8A 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8F86 FE FF        	cp $ff
293+  8F88 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8F8A E6 F0        	and $f0
295+  8F8C 20 28        	jr nz,3F
296+  8F8E
297+  8F8E              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8F8E
299+  8F8E 3A 8A 85     	ld a,(CTRL_DESPLZ)
300+  8F91 47           	ld b,a
301+  8F92 3E F8        	ld a,$f8
302+  8F94 80           	add b
303+  8F95 32 8A 85     	ld (CTRL_DESPLZ),a
304+  8F98 18 1C        	jr 3F
305+  8F9A 21 83 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8F9D 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8F9E AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8F9F 32 8A 85     	ld (CTRL_DESPLZ),a
309+  8FA2 3A 96 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8FA5 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8FA7 20 0A        	jr nz,2F
312+  8FA9 2A 84 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8FAC 23           	inc hl
314+  8FAD 22 84 85     	ld (Posicion_actual),hl
315+  8FB0 CD 51 91     	call Genera_coordenadas
316+  8FB3
317+  8FB3              ; Inicia el puntero de Sprite.
318+  8FB3
319+  8FB3 CD 4C 87     2 call Inicia_puntero_objeto_der
320+  8FB6 C9           3 ret
321+  8FB7
322+  8FB7              ; ******************************************************************************************************************************************************************************************
323+  8FB7              ;
324+  8FB7              ;	15/02/23
325+  8FB7              ;
326+  8FB7              ;	Mov_left.
327+  8FB7              ;
328+  8FB7              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8FB7              ;
330+  8FB7              Mov_left
331+  8FB7
332+  8FB7 21 AF 85     	ld hl,Ctrl_0
333+  8FBA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8FBC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8FBC              ; 																	; _ en el caso de que no lo haya.
336+  8FBC 3A AF 85     	ld a,(Ctrl_0)
337+  8FBF CB 77        	bit 6,a
338+  8FC1 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8FC3
340+  8FC3 CD DF 90     	call Stop_Amadeus_left
341+  8FC6 C8           	ret z
342+  8FC7 20 50        	jr nz,8F
343+  8FC9
344+  8FC9 3A 88 85     11 ld a,(Coordenada_X)
345+  8FCC A7           	and a
346+  8FCD 20 4A        	jr nz,8F
347+  8FCF
348+  8FCF 3A 8A 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8FD2 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8FD3 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8FD5
352+  8FD5              ; ---------- ---------- ----------
353+  8FD5
354+  8FD5 3A 97 85     	ld a,(Vel_left)
355+  8FD8 FE 02        	cp 2
356+  8FDA 28 0F        	jr z,1F
357+  8FDC 38 04        	jr c,6F
358+  8FDE FE 04        	cp 4
359+  8FE0 28 12        	jr z,7F
360+  8FE2
361+  8FE2              ; ---------- ---------- ----------
362+  8FE2
363+  8FE2 3A 8A 85     6 ld a,(CTRL_DESPLZ)
364+  8FE5 FE F9        	cp $f9
365+  8FE7 20 30        	jr nz,8F
366+  8FE9 18 10        	jr 4F
367+  8FEB 3A 8A 85     1 ld a,(CTRL_DESPLZ)
368+  8FEE FE FA        	cp $fa
369+  8FF0 20 27        	jr nz,8F
370+  8FF2 18 07        	jr 4F
371+  8FF4 3A 8A 85     7 ld a,(CTRL_DESPLZ)
372+  8FF7 FE FC        	cp $fc
373+  8FF9 20 1E        	jr nz,8F
374+  8FFB
375+  8FFB              ; ---------- ---------- ----------
376+  8FFB
377+  8FFB              4
378+  8FFB CD 07 91     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8FFE              ;	call Reinicio
380+  8FFE
381+  8FFE              ; ---------- ---------- ----------
382+  8FFE
383+  8FFE 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  9000 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  9001
386+  9001 2A 8E 85     	ld hl,(Indice_Sprite_izq)
387+  9004 22 92 85     	ld (Puntero_DESPLZ_izq),hl
388+  9007
389+  9007 CD 20 90     	call DESPLZ_IZQ
390+  900A C1           	pop bc
391+  900B 10 F3        	djnz 5B
392+  900D 2A 84 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  9010 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  9011 22 84 85     	ld (Posicion_actual),hl
395+  9014 CD 51 91     	call Genera_coordenadas
396+  9017 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9019
398+  9019              ; ---------- ---------- ----------
399+  9019              ; Movemos, no hay recolocación.
400+  9019
401+  9019 2A 84 85     8 ld hl,(Posicion_actual)
402+  901C CD 20 90     	call DESPLZ_IZQ
403+  901F C9           2 ret
404+  9020
405+  9020              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  9020              ;
407+  9020              ;	22/9/22
408+  9020
409+  9020              DESPLZ_IZQ
410+  9020
411+  9020 CD 2F 90     	call Desplaza_izquierda
412+  9023 CD 7B 90         call modifica_parametros_1er_DESPLZ
413+  9026 CD A3 90     	call Ciclo_completo_2
414+  9029 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  902C CB BE        	res 7,(hl)
416+  902E C9           	ret
417+  902F
418+  902F              Desplaza_izquierda
419+  902F
420+  902F 3A 97 85     	ld a,(Vel_left)
421+  9032 47           	ld b,a
422+  9033 2A 92 85     	ld hl,(Puntero_DESPLZ_izq)
423+  9036 23           1 inc hl
424+  9037 23           	inc hl
425+  9038 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  903A 22 92 85     	ld (Puntero_DESPLZ_izq),hl
427+  903D CD 35 87     	call Extrae_address
428+  9040 22 86 85     	ld (Puntero_objeto),hl
429+  9043
430+  9043              ; Modifica (Puntero_DESPLZ_der).
431+  9043
432+  9043              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  9043              ; Cuántos movimientos hemos hecho ??
434+  9043              ; DE contiene (Puntero_DESPLZ_izq).
435+  9043
436+  9043 2A 8E 85     7 ld hl,(Indice_Sprite_izq)
437+  9046 EB           	ex de,hl
438+  9047 A7           	and a
439+  9048 ED 52        	sbc hl,de
440+  904A CB 3D        	srl l
441+  904C 3E 08        6 ld a,8
442+  904E 95           	sub l
443+  904F 30 1E        	jr nc,3F
444+  9051
445+  9051              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  9051              ; B="0".
447+  9051
448+  9051 04           4 inc b
449+  9052 3C           	inc a
450+  9053 20 FC        	jr nz,4B
451+  9055 78           	ld a,b
452+  9056 08           	ex af,af
453+  9057 2A 8E 85     	ld hl,(Indice_Sprite_izq)
454+  905A 23           5 inc hl
455+  905B 23           	inc hl
456+  905C 10 FC        	djnz 5B
457+  905E 22 92 85     	ld (Puntero_DESPLZ_izq),hl
458+  9061 CD 35 87     	call Extrae_address
459+  9064 22 86 85     	ld (Puntero_objeto),hl
460+  9067
461+  9067              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  9067              ; _(Posicion_actual).
463+  9067
464+  9067 21 84 85     	ld hl,Posicion_actual
465+  906A 35           	dec (hl)
466+  906B 08           	ex af,af
467+  906C 6F           	ld l,a
468+  906D 18 DD        	jr 6B
469+  906F
470+  906F              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  906F
472+  906F 47           3 ld b,a
473+  9070 2A 8C 85     	ld hl,(Indice_Sprite_der)
474+  9073 23           2 inc hl
475+  9074 23           	inc hl
476+  9075 10 FC        	djnz 2B
477+  9077 22 90 85     	ld (Puntero_DESPLZ_der),hl
478+  907A C9           8 ret
479+  907B
480+  907B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  907B              ;
482+  907B              ;	modifica_parametros_1er_DESPLZ
483+  907B              ;
484+  907B              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  907B              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  907B              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  907B
488+  907B 3A 8A 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  907E A7           	and a
490+  907F 20 1E        	jr nz,1F
491+  9081 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  9082 32 8A 85         ld (CTRL_DESPLZ),a
493+  9085 21 83 85     	ld hl,Columns
494+  9088 34           	inc (hl)
495+  9089 3A 96 85     	ld a,(Cuad_objeto)
496+  908C E6 01        	and 1
497+  908E 20 0F        	jr nz,1F
498+  9090 2A 84 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  9093 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  9094 22 84 85     	ld (Posicion_actual),hl
501+  9097 CD 51 91     	call Genera_coordenadas
502+  909A CD F6 90     	call Dec_CTRL_DESPLZ
503+  909D 18 03        	jr 2F
504+  909F CD F6 90     1 call Dec_CTRL_DESPLZ
505+  90A2 C9           2 ret
506+  90A3
507+  90A3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  90A3
509+  90A3 3A 8A 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  90A6 FE F7        	cp $f7
511+  90A8 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  90AA 30 2C        	jr nc,3F
513+  90AC
514+  90AC              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  90AC
516+  90AC 06 00        	ld b,0
517+  90AE 04           4 inc b
518+  90AF 3C           	inc a
519+  90B0 FE F7        	cp $f7
520+  90B2 20 FA        	jr nz,4B
521+  90B4 3E FF        	ld a,$ff
522+  90B6 90           	sub b
523+  90B7 32 8A 85     	ld (CTRL_DESPLZ),a
524+  90BA 18 1C        	jr 3F
525+  90BC
526+  90BC              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  90BC
528+  90BC 21 83 85     1 ld hl,Columns
529+  90BF 35           	dec (hl)
530+  90C0 AF           	xor a
531+  90C1 32 8A 85     	ld (CTRL_DESPLZ),a
532+  90C4 3A 96 85     	ld a,(Cuad_objeto)
533+  90C7 E6 01        	and 1
534+  90C9 28 0A        	jr z,2F
535+  90CB 2A 84 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  90CE 2B           	dec hl
537+  90CF 22 84 85     	ld (Posicion_actual),hl
538+  90D2 CD 51 91     	call Genera_coordenadas
539+  90D5
540+  90D5              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  90D5
542+  90D5 CD 5F 87     2 call Inicia_puntero_objeto_izq
543+  90D8 C9           3 ret
544+  90D9
545+  90D9              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  90D9              ;
547+  90D9              ;	19/10/22
548+  90D9              ;
549+  90D9              ;	(cp 29) para un Amadeus de 3 Columns.
550+  90D9              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  90D9
552+  90D9 3A 88 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  90DC FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  90DE C9           	ret
555+  90DF
556+  90DF              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  90DF              ;
558+  90DF              ;	19/10/22
559+  90DF              ;
560+  90DF              ;	(cp 2) para un Amadeus de 3 Columns.
561+  90DF              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  90DF
563+  90DF 3A 88 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  90E2 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  90E4 C9           	ret
566+  90E5
567+  90E5              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  90E5              ;
569+  90E5              ;	24/7/22
570+  90E5              ;
571+  90E5              ;	Inc_CTRL_DESPLZ
572+  90E5              ;
573+  90E5              ;
574+  90E5              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  90E5
576+  90E5 21 8A 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  90E8 3A 98 85     	ld a,(Vel_right)
578+  90EB A7           	and a
579+  90EC 28 06        	jr z,1F
580+  90EE 47           	ld b,a
581+  90EF 34           3 inc (hl)
582+  90F0 10 FD        	djnz 3B
583+  90F2 18 01        	jr 2F
584+  90F4 34           1 inc (hl)
585+  90F5 C9           2 ret
586+  90F6
587+  90F6              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  90F6              ;
589+  90F6              ;	5/2/23
590+  90F6              ;
591+  90F6              ;	Dec_CTRL_DESPLZ
592+  90F6              ;
593+  90F6              ;
594+  90F6              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  90F6
596+  90F6 21 8A 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  90F9 3A 97 85     	ld a,(Vel_left)
598+  90FC A7           	and a
599+  90FD 28 06        	jr z,1F
600+  90FF 47           	ld b,a
601+  9100 35           3 dec (hl)
602+  9101 10 FD        	djnz 3B
603+  9103 18 01        	jr 2F
604+  9105 35           1 dec (hl)
605+  9106 C9           2 ret
606+  9107
607+  9107              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9107
609+  9107 2A 84 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  910A 01 1F 00     	ld bc,31
611+  910D A7           	and a
612+  910E ED 4A        	adc hl,bc
613+  9110 22 84 85     	ld (Posicion_actual),hl
614+  9113 21 AF 85     	ld hl,Ctrl_0														; $xxx1
615+  9116 CB C6        	set 0,(hl)
616+  9118 C9           	ret
617+  9119
618+  9119              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9119
620+  9119 2A 84 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  911C 01 1F 00     	ld bc,31
622+  911F A7           	and a
623+  9120 ED 42        	sbc hl,bc
624+  9122 22 84 85     	ld (Posicion_actual),hl 											; $xx1x
625+  9125 21 AF 85     	ld hl,Ctrl_0
626+  9128 CB CE        	set 1,(hl)
627+  912A C9           	ret
628+  912B
629+  912B              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  912B
631+  912B 24           Reaparece_abajo inc h
632+  912C 01 E0 17     	ld bc,$17e0
633+  912F A7           	and a
634+  9130 ED 4A        	adc hl,bc
635+  9132 22 84 85     	ld (Posicion_actual),hl
636+  9135 21 AF 85     	ld hl,Ctrl_0
637+  9138 CB D6        	set 2,(hl)
638+  913A C9           	ret
639+  913B
640+  913B              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  913B
642+  913B 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  913E A7           	and a
644+  913F ED 42        	sbc hl,bc
645+  9141 22 84 85     	ld (Posicion_actual),hl
646+  9144 21 AF 85     	ld hl,Ctrl_0
647+  9147 CB DE        	set 3,(hl)
648+  9149 C9           	ret
649+  914A
650+  914A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  914A
652+  914A 2A 94 85     Reinicio ld hl,(Posicion_inicio)
653+  914D 22 84 85     	ld (Posicion_actual),hl
654+  9150 C9           	ret
# file closed: Direcciones.asm
772   9151              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  9151              ;	12/12/22
  2+  9151              ;
  3+  9151              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  9151              ;	Fila superior "0", Columna izquierda "0".
  5+  9151              ;
  6+  9151              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  9151              ;
  8+  9151              ;	Modifica: A
  9+  9151
 10+  9151 C5           Genera_coordenadas push bc
 11+  9152 E5           	push hl
 12+  9153 2A 84 85     	ld hl,(Posicion_actual)
 13+  9156 7D           	ld a,l
 14+  9157 E6 1F        	and $1f
 15+  9159 32 88 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  915C CD 1F 8E     	call calcula_tercio
 17+  915F 47           	ld b,a
 18+  9160 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9161 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  9163 7D           	ld a,l
 21+  9164 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  9166 28 05        	jr z,2F
 23+  9168 0C           1 inc c
 24+  9169 D6 20        	sub 32
 25+  916B 20 FB        	jr nz,1B
 26+  916D 0C           2 inc c
 27+  916E 04           	inc b
 28+  916F 05           	dec b
 29+  9170 28 04        	jr z,3F
 30+  9172 3E E0        	ld a,$e0
 31+  9174 10 F2        	djnz 1B
 32+  9176 79           3 ld a,c
 33+  9177 3D           	dec a
 34+  9178 32 89 85     	ld (Coordenada_y),a
 35+  917B E1           	pop hl
 36+  917C C1           	pop bc
 37+  917D C9           	ret
# file closed: Genera_coordenadas.asm
773   917E              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  917E
  2+  917E
  3+  917E              ;   11/8/22
  4+  917E              ;
  5+  917E              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  917E              ;
  7+  917E              ;   Mov_obj.asm
  8+  917E              ;
  9+  917E              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  917E              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  917E              ;
 12+  917E              ;   Codificación:
 13+  917E              ;
 14+  917E              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  917E
 16+  917E              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  917E
 18+  917E 02 40 00     Arriba db 2,%01000000,0
 19+  9181 02 80 00     Abajo db 2,%10000000,0
 20+  9184 02 20 00     Derecha db 2,%00100000,0
 21+  9187 02 10 00     Izquierda db 2,%00010000,0
 22+  918A 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  918E 60 42 60 40
 22+  9192 63
 23+  9193 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9197 22 A3 80 A0
 24+  919B 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  919F 84 A0 83 A0
 25+  91A3 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  91A7 80 A3 22 A0
 26+  91AB 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  91AF 40 60 42 60
 27+  91B3 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  91B7 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  91BB 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  91BF 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  91C3 84
 31+  91C4 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  91C8 84 00
 32+  91CA 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  91CE 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  91D2 1F 1F 1F 1F
 34+  91D6 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  91DA 1F 1F 1F 1F
 34+  91DE 1F
 35+  91DF 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  91E3 2F 2F 2F 2F
 35+  91E7 2F 2F
 36+  91E9 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  91ED 2F 2F 00
 37+  91F0
 38+  91F0
 39+  91F0              ; ----- ----- ----- ----- -----
 40+  91F0
 41+  91F0 CE 91        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  91F2 CA 91        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  91F4 87 91        Indice_mov_Izquierda defw Izquierda
 44+  91F6 84 91        Indice_mov_Derecha defw Derecha
 45+  91F8 81 91        Indice_mov_Abajo defw Abajo
 46+  91FA 7E 91        Indice_mov_Arriba defw Arriba
 47+  91FC BB 91        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  91FE BF 91        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  9200 B7 91        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  9202 C4 91        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  9204 8A 91        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  9206              ; ----- ----- ----- ----- -----
 53+  9206
 54+  9206 3A B5 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9209 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  920A 28 02            jr z,1F
 57+  920C 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  920E 3A B6 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  9211 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  9213 32 B6 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  9216              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  9216 2A B3 85         ld hl,(Puntero_mov)
 63+  9219 7E               ld a,(hl)
 64+  921A 32 B5 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  921D 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  921E 22 B3 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  9221
 68+  9221 3A B7 85     Decoder ld a,(Repetimos_db)
 69+  9224 A7               and a
 70+  9225 20 0C            jr nz,12F
 71+  9227 2A B3 85         ld hl,(Puntero_mov)
 72+  922A 7E               ld a,(hl)
 73+  922B A7               and a
 74+  922C 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  922E E6 0F            and $0f
 76+  9230 32 B7 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  9233              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  9233 2A B3 85     12 ld hl,(Puntero_mov)
 79+  9236 CB 7E            bit 7,(hl)
 80+  9238 28 03            jr z,2F
 81+  923A CD 3D 8E         call Mov_down
 82+  923D 2A B3 85     2 ld hl, (Puntero_mov)
 83+  9240 CB 76            bit 6,(hl)
 84+  9242 28 03            jr z,3F
 85+  9244 CD 6B 8E         call Mov_up
 86+  9247 2A B3 85     3 ld hl, (Puntero_mov)
 87+  924A CB 6E            bit 5,(hl)
 88+  924C 28 03            jr z,4F
 89+  924E CD 99 8E         call Mov_right
 90+  9251 2A B3 85     4 ld hl, (Puntero_mov)
 91+  9254 CB 66            bit 4,(hl)
 92+  9256 28 03            jr z,5F
 93+  9258 CD B7 8F         call Mov_left
 94+  925B
 95+  925B              ; ---------- --------- --------- ---------- ----------
 96+  925B
 97+  925B 3A B7 85     5 ld a,(Repetimos_db)
 98+  925E A7               and a
 99+  925F 28 07            jr z,6F
100+  9261 3D               dec a
101+  9262 32 B7 85         ld (Repetimos_db),a
102+  9265 28 01            jr z,6f
103+  9267 C9           11 ret
104+  9268 21 B5 85     6 ld hl,Contador_db_mov
105+  926B 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  926C 2A B3 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  926F 23               inc hl
108+  9270 22 B3 85         ld (Puntero_mov),hl
109+  9273 18 F2            jr 11B
110+  9275 2A B1 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  9278 3A B6 85         ld a,(Incrementa_puntero)
112+  927B 47               ld b,a
113+  927C 23           8 inc hl
114+  927D 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  927F 5E               ld e,(hl)
116+  9280 23               inc hl
117+  9281 56               ld d,(hl)
118+  9282 EB               ex de,hl
119+  9283 22 B3 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9286 18 DF            jr 11B
121+  9288
122+  9288              ; ---------- --------- --------- ---------- ----------
123+  9288              ;
124+  9288              ;   11/8/22
125+  9288              ;
126+  9288              ;   Prepara_Puntero_mov
127+  9288
128+  9288 E5           Prepara_Puntero_mov push hl
129+  9289 D5               push de
130+  928A 2A B1 85         ld hl,(Puntero_indice_mov)
131+  928D 5E               ld e,(hl)
132+  928E 23               inc hl
133+  928F 56               ld d,(hl)
134+  9290 EB               ex de,hl
135+  9291 22 B3 85         ld (Puntero_mov),hl
136+  9294 D1               pop de
137+  9295 E1               pop hl
138+  9296 C9               ret
139+  9297
140+  9297              ; ---------- --------- --------- ---------- ----------
141+  9297              ;
142+  9297              ;   11/8/22
143+  9297              ;
144+  9297              ;   Reinicia_el_movimiento
145+  9297
146+  9297 CD 88 92     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  929A AF               xor a
148+  929B 32 B5 85         ld (Contador_db_mov),a
149+  929E 32 B6 85         ld (Incrementa_puntero),a
150+  92A1
151+  92A1              ;    jr $
152+  92A1
153+  92A1 C3 06 92         jp Movimiento
154+  92A4 C9               ret
155+  92A5              ; ---------- --------- --------- ---------- ----------
156+  92A5
157+  92A5
158+  92A5
159+  92A5
160+  92A5
161+  92A5
162+  92A5
163+  92A5
164+  92A5
165+  92A5
166+  92A5
167+  92A5
168+  92A5
169+  92A5
170+  92A5
171+  92A5
172+  92A5
173+  92A5
# file closed: Patrones_de_mov.asm
774   92A5              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  92A5              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  92A5              ;
  3+  92A5              ;	3/1/23
  4+  92A5              ;
  5+  92A5              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  92A5
  7+  92A5              ;	ADC HL,SP	LD (addr),SP
  8+  92A5              ;	ADD HL,SP	LD SP,(addr)
  9+  92A5              ;	ADD IX,SP	LD SP,nn
 10+  92A5              ; 	ADD IY,SP	LD SP,HL
 11+  92A5              ;				LD SP,IX
 12+  92A5              ;	DEC SP		LD SP,IY
 13+  92A5
 14+  92A5              ;	EX (SP),HL
 15+  92A5              ;	EX (SP),IX
 16+  92A5              ;	EX (SP),IY
 17+  92A5
 18+  92A5              ;	INC SP
 19+  92A5
 20+  92A5
 21+  92A5                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 C4 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A C8 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 C8 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B C4 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
775   7FC0
776   7FC0              	SAVESNA "Pruebas.sna", START
777   7FC0
778   7FC0
779   7FC0
# file closed: Banco_de_pruebas.asm
