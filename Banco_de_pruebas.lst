# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 65 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 00 84        	defw Entidad_1
  9+  83C2 34 84        	defw Entidad_2
 10+  83C4 68 84        	defw Entidad_3
 11+  83C6 9C 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 28+  83D8 00 00        	defw 0		 									; (Puntero_DESPLZ).
 29+  83DA D0 50        	defw $50d0										; (Posicion_inicio).
 30+  83DC 04           	db 4 											; (Cuad_objeto).
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 33+  83E1
 34+  83E1 00 00        	db 0,0											; Variables_de_borrado
 35+  83E3 00 00        	defw 0											;	" " " " " " "
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00 00     	db 0,0,0										;	" " " " " " "
 38+  83EA
 39+  83EA 00 00        	db 0,0											; Variables_de_pintado
 40+  83EC 00 00        	defw 0											;	" " " " " " "
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00 00     	db 0,0,0										;	" " " " " " "
 43+  83F3
 44+  83F3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 45+  83F5
 46+  83F5 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 47+  83F9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 48+  83FC
 49+  83FC 00           	db 0 											; (Columnas).
 50+  83FD 00 00        	defw 0											; (Limite_horizontal).
 51+  83FF 00           	db 0											; (Limite_vertical).
 52+  8400
 53+  8400              ; ---------- ---------- ---------- ---------- ----------
 54+  8400
 55+  8400 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 56+  8402 00 00        	defw 0											; (Posicion_actual).
 57+  8404 00 00        	defw 0 											; (Puntero_objeto).
 58+  8406 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 59+  8409
 60+  8409 00           	db %00000000 									; (Attr).
 61+  840A 00 00        	defw 0											; (Indice_Sprite).
 62+  840C 00 00        	defw 0											; (Puntero_DESPLZ).
 63+  840E 00 00        	defw 0											; (Posicion_inicio).
 64+  8410 00           	db 0											; (Cuad_objeto).
 65+  8411
 66+  8411 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 67+  8415
 68+  8415 00 00        	db 0,0										    ; Variables_de_borrado
 69+  8417 00 00        	defw 0											;	" " " " " " "
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00 00     	db 0,0,0										;	" " " " " " "
 72+  841E
 73+  841E 00 00        	db 0,0											; Variables_de_pintado
 74+  8420 00 00        	defw 0											;	" " " " " " "
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00 00     	db 0,0,0										;	" " " " " " "
 77+  8427
 78+  8427 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 79+  8429
 80+  8429 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 81+  842D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 82+  8430
 83+  8430 00           	db 0 											; (Columnas).
 84+  8431 00 00        	defw 0											; (Limite_horizontal).
 85+  8433 00           	db 0											; (Limite_vertical).
 86+  8434
 87+  8434              ; ---------- ---------- ---------- ---------- ----------
 88+  8434
 89+  8434 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 90+  8436 00 00        	defw 0                                          ; (Posicion_actual).
 91+  8438 00 00        	defw 0											; (Puntero_objeto).
 92+  843A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 93+  843D
 94+  843D 02           	db %00000010									; (Attr).
 95+  843E 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 96+  8440 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 97+  8442 7E 47        	defw $477e                                      ; (Posicion_inicio).
 98+  8444 02           	db 2											; (Cuad_objeto).
 99+  8445
100+  8445 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
101+  8449
102+  8449 00 00        	db 0,0											; Variables_de_borrado
103+  844B 00 00        	defw 0										 	;	" " " " " " "
104+  844D 00 00        	defw 0											;	" " " " " " "
105+  844F 00 00 00     	db 0,0,0										;	" " " " " " "
106+  8452
107+  8452 00 00        	db 0,0											; Variables_de_pintado
108+  8454 00 00        	defw 0											;	" " " " " " "
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00 00     	db 0,0,0										;	" " " " " " "
111+  845B
112+  845B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
113+  845D
114+  845D 2C 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
115+  8461 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
116+  8464
117+  8464 00           	db 0 											; (Columnas).
118+  8465 00 00        	defw 0											; (Limite_horizontal).
119+  8467 00           	db 0											; (Limite_vertical).
120+  8468
121+  8468              ; ---------- ---------- ---------- ---------- ----------
122+  8468
123+  8468 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
124+  846A 00 00        	defw 0                                          ; (Posicion_actual).
125+  846C 00 00        	defw 0											; (Puntero_objeto).
126+  846E 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
127+  8471
128+  8471 04           	db %00000100									; (Attr).
129+  8472 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
130+  8474 00 00        	defw 0                                          ; (Puntero_DESPLZ).
131+  8476 A1 47        	defw $47a1                                      ; (Posicion_inicio).
132+  8478 01           	db 1											; (Cuad_objeto).
133+  8479
134+  8479 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
135+  847D
136+  847D 00 00        	db 0,0											; Variables_de_borrado
137+  847F 00 00        	defw 0										 	;	" " " " " " "
138+  8481 00 00        	defw 0											;	" " " " " " "
139+  8483 00 00 00     	db 0,0,0										;	" " " " " " "
140+  8486
141+  8486 00 00        	db 0,0											; Variables_de_pintado
142+  8488 00 00        	defw 0											;	" " " " " " "
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00 00     	db 0,0,0										;	" " " " " " "
145+  848F
146+  848F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
147+  8491
148+  8491 2E 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
149+  8495 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
150+  8498
151+  8498 00           	db 0 											; (Columnas).
152+  8499 00 00        	defw 0											; (Limite_horizontal).
153+  849B 00           	db 0											; (Limite_vertical).
154+  849C
155+  849C              ; ---------- ---------- ---------- ---------- ----------
156+  849C
157+  849C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
158+  849E 00 00        	defw 0                                          ; (Posicion_actual).
159+  84A0 00 00        	defw 0 											; (Puntero_objeto).
160+  84A2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
161+  84A5
162+  84A5 01           	db %00000001									; (Attr).
163+  84A6 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
164+  84A8 00 00        	defw 0                                          ; (Puntero_DESPLZ).
165+  84AA BE 47        	defw $47be                                      ; (Posicion_inicio).
166+  84AC 00           	db 0											; (Cuad_objeto).
167+  84AD
168+  84AD 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
169+  84B1
170+  84B1 00 00        	db 0,0											; Variables_de_borrado
171+  84B3 00 00        	defw 0										 	;	" " " " " " "
172+  84B5 00 00        	defw 0											;	" " " " " " "
173+  84B7 00 00 00     	db 0,0,0										;	" " " " " " "
174+  84BA
175+  84BA 00 00        	db 0,0											; Variables_de_pintado
176+  84BC 00 00        	defw 0											;	" " " " " " "
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84C3
180+  84C3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
181+  84C5
182+  84C5 1E 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
183+  84C9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
184+  84CC
185+  84CC 00           	db 0 											; (Columnas).
186+  84CD 00 00        	defw 0											; (Limite_horizontal).
187+  84CF 00           	db 0											; (Limite_vertical).
188+  84D0
# file closed: Entidades.asm
 21   84D0
 22   84D0              ; ******************************************************************************************************************************************************************************************
 23   84D0              ; Constantes.
 24   84D0              ; ******************************************************************************************************************************************************************************************
 25   84D0              ;
 26   84D0              ; 8/11/22
 27   84D0              ;
 28   84D0              ; Constantes generales.
 29   84D0              ;
 30   84D0
 31   84D0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D0
 37   84D0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D0
 40   84D0
 41   84D0              ; ******************************************************************************************************************************************************************************************
 42   84D0              ; Variables.
 43   84D0              ; ******************************************************************************************************************************************************************************************
 44   84D0              ;
 45   84D0              ; 10/11/22
 46   84D0              ;
 47   84D0              ; Variables de DRAW. (Motor principal).
 48   84D0              ;
 49   84D0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D0
 51   84D0 02           Filas db 2												; Filas. [DRAW]
 52   84D1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D2 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D9
 62   84D9              ; ---------- ---------- ----------
 63   84D9
 64   84D9
 65   84D9 04           Attr db %00000100										; Atributos de la entidad:
 66   84DA
 67   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DA              ;
 69   84DA              ;	COLORES: 0 ..... NEGRO
 70   84DA              ;    		 1 ..... AZUL
 71   84DA              ; 			 2 ..... ROJO
 72   84DA              ;			 3 ..... MAGENTA
 73   84DA              ; 			 4 ..... VERDE
 74   84DA              ; 			 5 ..... CIAN
 75   84DA              ;			 6 ..... AMARILLO
 76   84DA              ; 			 7 ..... BLANCO
 77   84DA
 78   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DC 00 00        Puntero_DESPLZ defw 0
 80   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E1
 83   84E1              ; Variables de objeto. (Características).
 84   84E1
 85   84E1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E4 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E5
 90   84E5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E9 00 00        	defw 0
 93   84EB 00 00 00     	db 0,0,0
 94   84EE
 95   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F0 00 00        	defw 0
 97   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F4 00 00 00     	db 0,0,0
 99   84F7
100   84F7              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F7
102   84F7 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F8              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F8              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F8              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F8              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F8              ;
108   84F8              ; 														DESCRIPCIÖN:
109   84F8              ;
110   84F8              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F8              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F8              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F8              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F8              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F8              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F8              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F8              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F8              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F8              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F8              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F8              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F8              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F8              ;
124   84F8              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F8              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F8              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F8
128   84F8 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F9
130   84F9              ; Movimiento.
131   84F9
132   84F9 20 90        Puntero_indice_mov defw Indice_mov_Derecha
133   84FB 00 00        Puntero_mov defw 0
134   84FD 00           Contador_db_mov db 0
135   84FE 00           Incrementa_puntero db 0
136   84FF 00           Repetimos_db db 0
137   8500
138   8500
139   8500              ; Variables de funcionamiento. [DRAW].
140   8500
141   8500 00           Columnas db 0
142   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8504
146   8504              ; 52 Bytes por entidad.
147   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8504              ;					         		---------;      ;---------
149   8504
150   8504
151   8504              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8504              ; Gestión de ENTIDADES.
153   8504
154   8504 00 00        Puntero_store_entidades defw 0
155   8506 00 00        Puntero_restore_entidades defw 0
156   8508 00 00        Indice_restore defw 0
157   850A 00           Numero_de_entidades db 0								; Nº de objetos en pantalla, (contando con Amadeus).
158   850B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850C              ;														; _ (Numero_de_malotes)="0".
162   850C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850E              ;														; _variable para almacenar lo posición del puntero_
164   850E              ; 														; _de pila, SP.
165   850E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8510              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8510 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8512              ;														; _el snapshot de los registros de la siguiente entidad.
169   8512              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8512
171   8512              ; Gestión de FRAMES.
172   8512
173   8512 00           Switch db 0
174   8513
175   8513              ; Variables de Raster y localización en pantalla.
176   8513
177   8513 00 FF        Temp_Raster defw $ff00
178   8515
179   8515              ; Rutina principal *************************************************************************************************************************************************************************
180   8515              ;
181   8515              ;	14/11/22
182   8515
183   8515 31 FF FF     START ld sp,$ffff
184   8518
185   8518 3E A0        	ld a,$a0
186   851A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851E F3           	DI
189   851F
190   851F 3E 01        	ld a,1
191   8521 D3 FE        	out ($fe),a
192   8523
193   8523 3E 07        	ld a,%00000111
194   8525 CD D0 8C     	call Cls
195   8528
196   8528              ;	call Pinta_FILAS
197   8528
198   8528 CD 02 87     	call Pulsa_ENTER
199   852B
200   852B 21 0A 85     	ld hl,Numero_de_entidades
201   852E 46           	ld b,(hl)
202   852F 04           	inc b
203   8530 05           	dec b
204   8531 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 51 86     	call Inicia_punteros_de_entidades
211   8536
212   8536 C5           1 push bc  												; Guardo el contador de entidades.
213   8537 CD 80 86      	call Inicia_Puntero_objeto
214   853A CD 59 87     	call Draw
215   853D CD A0 7F     	call Guarda_foto_registros
216   8540 CD 9D 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
217   8543 C1           	pop bc
218   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
219   8546
220   8546              ; 	Amadeus.
221   8546
222   8546 CD DE 86     3 call Restore_Amadeus
223   8549 CD 80 86     	call Inicia_Puntero_objeto
224   854C CD 59 87     	call Draw
225   854F CD A0 7F     	call Guarda_foto_registros
226   8552 CD F0 86     	call Store_Amadeus
227   8555
228   8555              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
229   8555
230   8555 CD 51 86     	call Inicia_punteros_de_entidades
231   8558 CD CC 86     	call Restore_Primera_entidad
232   855B 3A 0A 85     	ld a,(Numero_de_entidades)
233   855E 3C           	inc a
234   855F 32 0B 85     	ld (Numero_de_malotes),a
235   8562
236   8562 FB           2 ei
237   8563 18 FD        	jr 2B
238   8565
239   8565              ; -----------------------------------------------------------------------------------
240   8565
241   8565              Frame
242   8565
243   8565              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
244   8565              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
245   8565
246   8565 3E 07            ld a,7
247   8567 D3 FE            out ($fe),a
248   8569 CD 5D 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
249   856C 3E 01            ld a,1
250   856E D3 FE            out ($fe),a
251   8570
252   8570              ; ----------------------------------------------------------------------
253   8570
254   8570 21 00 70     	ld hl,Album_de_fotos
255   8573 22 10 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
256   8576              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
257   8576 3A 0A 85         ld a,(Numero_de_entidades)
258   8579 47               ld b,a
259   857A A7           	and a
260   857B 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
261   857D
262   857D C5           2 push bc
263   857E CD CA 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
264   8581 3A F7 84     	ld a,(Ctrl_0)
265   8584 CB 67        	bit 4,a
266   8586 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
267   8588 CD 18 86         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
268   858B 21 F7 84     1 ld hl,Ctrl_0
269   858E CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
270   8590 AF           	xor a
271   8591 32 F8 84     	ld (Obj_dibujado),a
272   8594 CD 9D 86     	call Store_Restore_entidades
273   8597 C1           	pop bc
274   8598 10 E3        	djnz 2B
275   859A
276   859A CD DE 86     4 call Restore_Amadeus
277   859D CD E9 85     	call Mov_Amadeus
278   85A0 3A F7 84     	ld a,(Ctrl_0)
279   85A3 CB 67        	bit 4,a
280   85A5 28 09        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
281   85A7 CD 45 86      	call Repone_pintar
282   85AA CD 59 87     	call Draw
283   85AD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
284   85B0
285   85B0 21 F7 84     3 ld hl,Ctrl_0
286   85B3 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
287   85B5 AF           	xor a
288   85B6 32 F8 84     	ld (Obj_dibujado),a
289   85B9 CD F0 86     	call Store_Amadeus
290   85BC
291   85BC              ; -----
292   85BC
293   85BC CD 51 86     	call Inicia_punteros_de_entidades
294   85BF CD CC 86     	call Restore_Primera_entidad
295   85C2 CD 67 86     	call Calcula_numero_de_malotes
296   85C5
297   85C5 3E 00        	ld a,0
298   85C7 D3 FE        	out ($fe),a
299   85C9 C9           	ret
300   85CA
301   85CA              ; --------------------------------------------------------------------------------------------------------------
302   85CA              ;
303   85CA              ;	29/1/23
304   85CA
305   85CA              Mov_obj
306   85CA
307   85CA              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
308   85CA
309   85CA AF           	xor a
310   85CB 32 F8 84     	ld (Obj_dibujado),a
311   85CE CD 22 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
312   85D1              ;														; Obj_dibujado="0".
313   85D1              ; Movemos Entidades malignas.
314   85D1
315   85D1 CD 30 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
316   85D4 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
317   85D7 CB 67        	bit 4,a
318   85D9 C8           	ret z
319   85DA
320   85DA              ; ---------
321   85DA
322   85DA 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
323   85DC 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
324   85DF CD 22 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
325   85E2 CD 39 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
326   85E5 CD 08 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
327   85E8 C9           	ret													; _de la misma.
328   85E9
329   85E9              ; --------------------------------------------------------------------------------------------------------------
330   85E9              ;
331   85E9              ;	29/1/23
332   85E9
333   85E9              Mov_Amadeus
334   85E9
335   85E9 AF           	xor a
336   85EA 32 F8 84     	ld (Obj_dibujado),a
337   85ED CD 22 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
338   85F0              ;														; Obj_dibujado="0".
339   85F0              ; Movemos Amadeus.
340   85F0
341   85F0 CD 16 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
342   85F3 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
343   85F6 CB 67        	bit 4,a
344   85F8 C8           	ret z
345   85F9
346   85F9              ; ---------
347   85F9
348   85F9 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
349   85FB 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
350   85FE CD 22 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
351   8601 CD 39 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
352   8604 CD 08 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
353   8607 C9           	ret													; _de la misma.
354   8608
355   8608              ; --------------------------------------------------------------------------------------------------------------
356   8608              ;
357   8608              ;	29/01/23
358   8608              ;
359   8608              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN").
360   8608
361   8608 CD 33 8A     Guarda_foto_Amadeus	call Prepara_draw
362   860B CD 6D 89     	call calcula_CColumnass
363   860E CD A4 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
364   8611 CD F9 89     	call Define_rutina_de_impresion
365   8614 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
366   8617 C9           	ret
367   8618
368   8618              ; --------------------------------------------------------------------------------------------------------------
369   8618
370   8618 CD 45 86     Borra_Pinta_obj call Repone_pintar
371   861B CD 59 87     	call Draw
372   861E CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
373   8621 C9           	ret
374   8622
375   8622              ; --------------------------------------------------------------------------------------------------------------
376   8622
377   8622 21 D0 84     Prepara_var_pintado_borrado	ld hl,Filas
378   8625 3A F8 84     	ld a,(Obj_dibujado)
379   8628 A7           	and a
380   8629 28 05        	jr z,1F
381   862B 11 EE 84     	ld de,Variables_de_pintado
382   862E 18 03        	jr 2F
383   8630 11 E5 84     1 ld de,Variables_de_borrado
384   8633 01 09 00     2 ld bc,9
385   8636 ED B0        	ldir
386   8638 C9           	ret
387   8639
388   8639 21 E5 84     Repone_borrar ld hl,Variables_de_borrado
389   863C 11 D0 84     	ld de,Filas
390   863F 01 09 00     	ld bc,9
391   8642 ED B0        	ldir
392   8644 C9           	ret
393   8645
394   8645 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
395   8648 11 D0 84     	ld de,Filas
396   864B 01 09 00     	ld bc,9
397   864E ED B0        	ldir
398   8650 C9           	ret
399   8651
400   8651              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
401   8651              ;	ld (Caja_de_BORRADO),hl
402   8651              ;	ret
403   8651
404   8651              ; *************************************************************************************************************************************************************
405   8651              ;
406   8651              ; 8/1/23
407   8651              ;
408   8651              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
409   8651              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
410   8651              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
411   8651
412   8651              ; Destruye HL y DE !!!!!
413   8651
414   8651 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
415   8654 CD 7A 86         call Extrae_address
416   8657 22 04 85         ld (Puntero_store_entidades),hl
417   865A 21 C2 83     	ld hl,Indice_de_entidades+2
418   865D 22 08 85     	ld (Indice_restore),hl
419   8660 CD 7A 86     	call Extrae_address
420   8663 22 06 85     	ld (Puntero_restore_entidades),hl
421   8666 C9               ret
422   8667
423   8667              ; -------------------------------------------------------------------------------------------------------------
424   8667              ;
425   8667              ; 29/1/23
426   8667              ;
427   8667
428   8667              Calcula_numero_de_malotes
429   8667
430   8667 2A 10 85     	ld hl,(Stack_snapshot)
431   866A AF           	xor a
432   866B 67           	ld h,a
433   866C 7D           	ld a,l
434   866D D6 06        1 sub 6
435   866F 28 03        	jr z,2F
436   8671 24           	inc h
437   8672 18 F9        	jr 1B
438   8674 24           2 inc h
439   8675 7C           	ld a,h
440   8676 32 0B 85     	ld (Numero_de_malotes),a
441   8679 C9           	ret
442   867A
443   867A              ; *************************************************************************************************************************************************************
444   867A              ;
445   867A              ; 20/10/22
446   867A              ;
447   867A              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
448   867A              ;
449   867A              ; Destruye el puntero y DE !!!!!
450   867A
451   867A 5E           Extrae_address ld e,(hl)
452   867B 23           	inc hl
453   867C 56           	ld d,(hl)
454   867D 2B           	dec hl
455   867E EB           	ex de,hl
456   867F C9           	ret
457   8680
458   8680              ; *************************************************************************************************************************************************************
459   8680              ;
460   8680              ;	21/9/22
461   8680              ;
462   8680              ;   Destruye HL y BC !!!!!,
463   8680
464   8680 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
465   8683 22 DC 84     	ld (Puntero_DESPLZ),hl
466   8686 CD 7A 86     	call Extrae_address
467   8689 22 D4 84     	ld (Puntero_objeto),hl
468   868C
469   868C              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
470   868C
471   868C 21 10 83     	ld hl,Amadeus
472   868F ED 4B D4 84  	ld bc,(Puntero_objeto)
473   8693 B7 ED 42     	sub hl,bc
474   8696 C0           	ret nz
475   8697 21 F7 84     	ld hl,Ctrl_0
476   869A CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
477   869C C9           	ret 												; _de nuestra nave en los extremos.
478   869D
479   869D              ; *************************************************************************************************************************************************************
480   869D              ;
481   869D              ;	8/1/23
482   869D              ;
483   869D              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
484   869D              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
485   869D
486   869D              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
487   869D              ;	_de la 2ª y 3ª entidad respectivamente.
488   869D
489   869D
490   869D
491   869D              Store_Restore_entidades
492   869D
493   869D E5           	push hl
494   869E D5           	push de
495   869F C5            	push bc
496   86A0
497   86A0              ;	STORE !!!!!
498   86A0              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
499   86A0
500   86A0 21 D0 84     	ld hl,Filas
501   86A3 ED 5B 04 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
502   86A7 01 34 00     	ld bc,52
503   86AA ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
504   86AC
505   86AC              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
506   86AC
507   86AC 2A 06 85     	ld hl,(Puntero_restore_entidades)
508   86AF 22 04 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
509   86B2 11 D0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
510   86B5 01 34 00     	ld bc,52
511   86B8 ED B0        	ldir
512   86BA
513   86BA              ;	Incrementa RESTORE !!!!!
514   86BA
515   86BA 2A 08 85         ld hl,(Indice_restore)
516   86BD 23           	inc hl
517   86BE 23           	inc hl
518   86BF 22 08 85     	ld (Indice_restore),hl
519   86C2 CD 7A 86         call Extrae_address
520   86C5 22 06 85         ld (Puntero_restore_entidades),hl
521   86C8 C1           	pop bc
522   86C9 D1           	pop de
523   86CA E1           	pop hl
524   86CB C9           	ret
525   86CC
526   86CC              ; **************************************************************************************************
527   86CC              ;
528   86CC              ;	29/10/22
529   86CC              ;
530   86CC              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
531   86CC
532   86CC E5           Restore_Primera_entidad push hl
533   86CD D5           	push de
534   86CE C5            	push bc
535   86CF 2A 04 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
536   86D2 11 D0 84     	ld de,Filas
537   86D5 01 34 00     	ld bc,52
538   86D8 ED B0        	ldir
539   86DA C1           	pop bc
540   86DB D1           	pop de
541   86DC E1           	pop hl
542   86DD C9           	ret
543   86DE
544   86DE              ; **************************************************************************************************
545   86DE              ;
546   86DE              ;	25/01/23
547   86DE              ;
548   86DE              ;	Restore_Amadeus
549   86DE              ;
550   86DE              ;	Cargamos en DRAW los parámetros de Amadeus.
551   86DE              ;
552   86DE
553   86DE E5           Restore_Amadeus	push hl
554   86DF D5           	push de
555   86E0 C5            	push bc
556   86E1 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
557   86E4 11 D0 84     	ld de,Filas
558   86E7 01 34 00     	ld bc,52
559   86EA ED B0        	ldir
560   86EC C1           	pop bc
561   86ED D1           	pop de
562   86EE E1           	pop hl
563   86EF C9           	ret
564   86F0
565   86F0              ; *************************************************************************************************************************************************************
566   86F0              ;
567   86F0              ;	29/01/23
568   86F0              ;
569   86F0              ;	Store_Amadeus
570   86F0              ;
571   86F0              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
572   86F0              ;
573   86F0
574   86F0 E5           Store_Amadeus push hl
575   86F1 D5           	push de
576   86F2 C5            	push bc
577   86F3 21 D0 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
578   86F6 11 CC 83     	ld de,Amadeus_db
579   86F9 01 34 00     	ld bc,52
580   86FC ED B0        	ldir
581   86FE C1           	pop bc
582   86FF D1           	pop de
583   8700 E1           	pop hl
584   8701 C9           	ret
585   8702
586   8702              ; **************************************************************************************************
587   8702
588   8702              ; Teclado.
589   8702
590   8702 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
591   8704 DB FE        	in a,($fe)
592   8706 E6 01        	and $01
593   8708 28 02        	jr z,1f
594   870A 18 F6        	jr Pulsa_ENTER
595   870C C9           1 ret
596   870D
597   870D              ; **************************************************************************************************
598   870D              ;
599   870D              ; Temporización.
600   870D
601   870D              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
602   870D              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
603   870D              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
604   870D              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
605   870D
606   870D              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
607   870D              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
608   870D              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
609   870D
610   870D              ; A partir de $4f61 no hace falta DELAY.
611   870D
612   870D              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
613   870D
614   870D 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
615   8710 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
616   8711 78           	LD A,B
617   8712 A7           	AND A
618   8713 20 FB        	JR NZ,wait
619   8715 C9           	RET
620   8716
621   8716              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
622   8716              ;
623   8716              ;	21/4/22
624   8716
625   8716              Movimiento_Amadeus
626   8716
627   8716 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
628   8718 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
629   871A E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
630   871C CC 33 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
631   871F 3E F7        	ld a,$f7
632   8721 DB FE        	in a,($fe)
633   8723 E6 01        	and $01
634   8725 C8           	ret z
635   8726 3E F7        	ld a,$f7
636   8728 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
637   872A E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
638   872C CC 40 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
639   872F C9               ret
640   8730
641   8730              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
642   8730
643   8730              ; Pinta indicadores de FILAS. ------------------------------------------------------
644   8730
645   8730 21 10 40     Pinta_FILAS ld hl,$4010
646   8733              ;	ld b,9
647   8733              ;2 push hl
648   8733              ;	push bc
649   8733 06 BF        	ld b,$bf
650   8735 36 80        1 ld (hl),%10000000
651   8737 CD 3F 8A     	call NextScan
652   873A 10 F9        	djnz 1B
653   873C              ;	pop bc
654   873C              ;	pop hl
655   873C              ;	inc l
656   873C              ;	djnz 2B
657   873C 06 03        	ld b,3
658   873E 21 00 47         ld hl,$4700
659   8741 CD 47 87     3 call Bucle_1
660   8744 10 FB            djnz 3B
661   8746 C9               ret
662   8747
663   8747 C5           Bucle_1 push bc
664   8748 E5                   push hl
665   8749 D1                   pop de
666   874A 13                   inc de
667   874B 01 FF 00             ld bc,255
668   874E 36 FF                ld (hl),255
669   8750 ED B0                ldir
670   8752 23                   inc hl
671   8753 3E 07                ld a,7
672   8755 84                   add a,h
673   8756 67                   ld h,a
674   8757 C1                   pop bc
675   8758 C9                   ret
676   8759
677   8759              ; ---------------------------------------------------------------
678   8759
679   8759              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8759              ; ******************************************************************************************************************************************************************************************
  2+  8759              ;
  3+  8759              ; 01/23
  4+  8759              ;
  5+  8759              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8759
  7+  8759 CD 33 8A     Draw call Prepara_draw
  8+  875C 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  875D A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  875E 28 05        	jr z,2F
 11+  8760 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  8763 18 0C        	jr 1F
 13+  8765 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8768 22 D2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  876B CD FA 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  876E              ;													; _la esquina superior izquierda de la pantalla.
 17+  876E CD B2 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8771 3A F7 84     1 ld a,(Ctrl_0)
 19+  8774 CB 6F        	bit 5,a
 20+  8776 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8778
 22+  8778 CD 90 87     	call Comprueba_limite_horizontal
 23+  877B CD 20 88     	call Comprueba_limite_vertical
 24+  877E
 25+  877E              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  877E
 27+  877E CD 6D 89     3 call calcula_CColumnass
 28+  8781 CD A4 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8784 CD F9 89     	call Define_rutina_de_impresion
 30+  8787
 31+  8787 3A F7 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  878A CB AF        	res 5,a											; _a ser de utilidad.
 33+  878C 32 F7 84     	ld (Ctrl_0),a
 34+  878F
 35+  878F C9           	ret
 36+  8790
 37+  8790              ; *******************************************************************************************************************************************************************************************
 38+  8790              ;	21/01/23
 39+  8790              ;
 40+  8790              ; 	Comprueba_limite_horizontal.
 41+  8790              ;
 42+  8790              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8790              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8790              ;
 45+  8790              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8790              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8790              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8790              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8790
 50+  8790
 51+  8790
 52+  8790 3A F7 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  8793 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  8795 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  8797 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8799 32 F7 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  879C 18 09            jr 6F
 58+  879E CB 5F        1 bit 3,a
 59+  87A0 28 0A            jr z,2F
 60+  87A2 E6 F7            and $f7
 61+  87A4 32 F7 84         ld (Ctrl_0),a
 62+  87A7 CD FA 88     6 call Inicializacion
 63+  87AA 18 5B            jr 5F
 64+  87AC E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87AD
 66+  87AD              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87AD              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87AD
 69+  87AD EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87AE 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87B1 CD 98 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87B4 67           	ld h,a
 73+  87B5 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87B6 CD 98 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  87B9 67           	ld h,a
 76+  87BA A7           	and a
 77+  87BB ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  87BD 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  87BE 3A E0 84     	ld a,(Cuad_objeto)
 80+  87C1 FE 02        	cp 2
 81+  87C3 38 1E        	jr c,3F
 82+  87C5 28 1C        	jr z,3F
 83+  87C7 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  87C8 28 23            jr z,7F
 85+  87CA 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  87CC 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  87CE E1           	pop hl
 88+  87CF
 89+  87CF              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  87CF              ; _para indicar con E="2" en caso necesario.
 91+  87CF
 92+  87CF E5               push hl
 93+  87D0 C5               push bc
 94+  87D1 CD 98 8C     	call calcula_tercio
 95+  87D4 FE 01        	cp 1
 96+  87D6 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  87D8 CD 08 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87DB 28 26            jr z,9F
 99+  87DD 38 24            jr c,9F
100+  87DF 1E 00        11 ld e,0
101+  87E1 18 22            jr 8F
102+  87E3 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  87E4 28 07        	jr z, 7F
104+  87E6 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  87E8 1E 00         	ld e,0
106+  87EA E1           	pop hl
107+  87EB 18 04        	jr 4F
108+  87ED 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  87EF 18 15            jr 10F
110+  87F1
111+  87F1              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  87F1              ; _para indicar con E="2" en caso necesario.
113+  87F1
114+  87F1 E5           4 push hl
115+  87F2 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  87F3 CD 98 8C     	call calcula_tercio
117+  87F6 FE 01        	cp 1
118+  87F8 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87FA CD 08 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  87FD 28 04            jr z,9F
121+  87FF 30 02            jr nc,9F
122+  8801 18 02        	jr 8F
123+  8803 1E 02        9 ld e,2
124+  8805 C1           8 pop bc
125+  8806 E1           10 pop hl
126+  8807 C9           5 ret
127+  8808
128+  8808              ; --------------------
129+  8808              ;
130+  8808              ; 25/08/22
131+  8808
132+  8808 CD 98 8C     Comprueba_centro call calcula_tercio
133+  880B 67               ld h,a
134+  880C 08           	ex af,af
135+  880D FE 02        	cp 2
136+  880F 38 07        	jr c,1F
137+  8811 28 05        	jr z,1F
138+  8813 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  8816 18 03        	jr 2F
140+  8818 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  881B 08           2 ex af,af
142+  881C A7               and a
143+  881D ED 42            sbc hl,bc
144+  881F C9               ret
145+  8820
146+  8820              ; *********************************************************************************************************************************************************************************************
147+  8820              ;
148+  8820              ;   16/8/22
149+  8820              ;
150+  8820              ;	Comprueba_limite_vertical
151+  8820              ;
152+  8820              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  8820              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  8820              ;
155+  8820
156+  8820 2A D2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  8823 7D           	ld a,l
158+  8824 E6 1F        	and $1F
159+  8826 57           	ld d,a
160+  8827 3A 03 85     	ld a,(Limite_vertical)
161+  882A BA           	cp d 											; Límite - Posición.
162+  882B 08           	ex af,af 										; Resultado de CP d en F'.
163+  882C 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  882F CB 47        	bit 0,a
165+  8831 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  8833
167+  8833              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  8833
169+  8833 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  8834 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  8836
172+  8836              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  8836              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  8836
175+  8836 3A D7 84         ld a,(Coordenada_X)
176+  8839 16 0F            ld d,Centro_izquierda
177+  883B A7               and a
178+  883C 92               sub d 											 ; Posición - Centro_izquierda.
179+  883D 28 1E            jr z,3F
180+  883F 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  8841              ;                                                    ; _salimos sin modificar nada.
182+  8841 18 0E            jr 2F
183+  8843 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  8844 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  8846
186+  8846              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  8846              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  8846
189+  8846 3A D7 84         ld a,(Coordenada_X)
190+  8849 16 10            ld d,Centro_derecha
191+  884B A7               and a
192+  884C 92               sub d
193+  884D 28 0E            jr z,3F
194+  884F 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  8851              ;                                                    ; _salimos sin modificar nada.
196+  8851 CB 43        2 bit 0,e
197+  8853 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8855 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  8856 CD EA 88         call Modificaccionne
200+  8859 C1           	pop bc
201+  885A CD FA 88         call Inicializacion
202+  885D C9           3 ret 				 								 ; Salimos de la rutina.
203+  885E
204+  885E              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  885E
206+  885E C5           4 push bc
207+  885F 01 D1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  8862 0A           	ld a,(bc)
209+  8863 3D           	dec a
210+  8864 47           	ld b,a 											 ; Columnas-1 en B.
211+  8865 7D           	ld a,l
212+  8866 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  8867 CB 47        	bit 0,a
214+  8869 28 03        	jr z,5F
215+  886B 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  886C 18 2E        	jr 7F
217+  886E
218+  886E              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  886E
220+  886E 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  886F F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  8870 3A F7 84     	ld a,(Ctrl_0)
223+  8873 CB 4F        	bit 1,a
224+  8875 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8877 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8878
227+  8878              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8878
229+  8878 1C               inc e
230+  8879 1D               dec e
231+  887A 20 07            jr nz,12F
232+  887C 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  887D 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  887E 22 D2 84     	ld (Posicion_actual),hl
235+  8881 18 44        13 jr 9F
236+  8883 CB 43        12 bit 0,e
237+  8885 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  8887              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  8887 C1           	pop bc
240+  8888 18 D3        	jr 3B
241+  888A 80           14 add b
242+  888B 6F               ld l,a
243+  888C 22 D2 84     	ld (Posicion_actual),hl
244+  888F CD EA 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  8892 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  8894 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  8896 32 F7 84         ld (Ctrl_0),a
248+  8899 F1           	pop af
249+  889A 18 2B        	jr 9F
250+  889C
251+  889C              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  889C
253+  889C F5           7 push af
254+  889D 3A F7 84     	ld a,(Ctrl_0)
255+  88A0 CB 47        	bit 0,a
256+  88A2 20 1D        	jr nz,8F
257+  88A4 F1           	pop af
258+  88A5
259+  88A5              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88A5
261+  88A5 1C           	inc e
262+  88A6 1D               dec e
263+  88A7 20 07            jr nz,10F
264+  88A9 90           	sub b
265+  88AA 6F               ld l,a
266+  88AB 22 D2 84     	ld (Posicion_actual),hl
267+  88AE 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88B0              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88B0 CB 43        10 bit 0,e
270+  88B2 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88B4              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88B4 C1           	pop bc
273+  88B5 18 A6        	jr 3B
274+  88B7 90           16 sub b
275+  88B8 6F               ld l,a
276+  88B9 22 D2 84     	ld (Posicion_actual),hl
277+  88BC CD EA 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  88BF 18 06            jr 9F
279+  88C1 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  88C3 32 F7 84         ld (Ctrl_0),a
281+  88C6 F1           	pop af
282+  88C7 C1           9 pop bc
283+  88C8 1E 00        	ld e,0
284+  88CA CD FA 88         call Inicializacion
285+  88CD F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  88CE 08           	ex af,af
287+  88CF F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  88D0 18 8B            jr 3B
289+  88D2
290+  88D2              ; --------------------
291+  88D2
292+  88D2 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  88D4 CD 4E 8A     1 call PreviousScan
294+  88D7 10 FB            djnz 1B
295+  88D9 22 D2 84     	ld (Posicion_actual),hl
296+  88DC AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88DD C9           	ret
298+  88DE
299+  88DE              ; --------------------
300+  88DE
301+  88DE 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  88E0 CD 3F 8A     1 call NextScan
303+  88E3 10 FB            djnz 1B
304+  88E5 22 D2 84     	ld (Posicion_actual),hl
305+  88E8 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  88E9 C9           	ret
307+  88EA
308+  88EA              ; --------------------
309+  88EA              ;
310+  88EA              ;	22/01/23
311+  88EA              ;
312+  88EA              ;	E="1". Hemos cambiado de cuadrante.
313+  88EA              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  88EA              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  88EA
316+  88EA
317+  88EA              Modificaccionne
318+  88EA
319+  88EA 3A E0 84     	ld a,(Cuad_objeto)
320+  88ED FE 02        	cp 2
321+  88EF CC D2 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  88F2 DC D2 88         call c,Modifica_Pos_actual
323+  88F5 C8           	ret z
324+  88F6 CD DE 88         call Modifica_Pos_actual2
325+  88F9 C9               ret
326+  88FA
327+  88FA              ; *************************************************************************************************************************************************************************************************
328+  88FA              ;
329+  88FA              ;	13/8/22
330+  88FA              ;
331+  88FA              ;	Inicializacion
332+  88FA              ;
333+  88FA              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88FA              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88FA              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88FA              ;
337+  88FA              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88FA              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88FA              ;	_ desaparece/aparece.
340+  88FA
341+  88FA              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88FA              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88FA              ;
344+  88FA              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88FA              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88FA              ; 		   [E] ="0"
347+  88FA
348+  88FA              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88FA
350+  88FA CD 98 8C     Inicializacion call calcula_tercio
351+  88FD 28 36        	jr z,primit
352+  88FF E6 02        	and 2
353+  8901 20 07        	jr nz,segmit
354+  8903 7D           	ld a,l
355+  8904 FE 7F        	cp $7f
356+  8906 38 2D        	jr c,primit
357+  8908 28 2B        	jr z,primit
358+  890A CD 67 89     segmit call column
359+  890D 38 13        	jr c,tercuad
360+  890F 3E 04        cuarcuad ld a,4
361+  8911 32 E0 84     	ld (Cuad_objeto),a
362+  8914 21 20 48     	ld hl,$4820
363+  8917 22 01 85     	ld (Limite_horizontal),hl
364+  891A 21 03 85     	ld hl,Limite_vertical
365+  891D 36 0D        	ld (hl),$0d
366+  891F 08           	ex af,af
367+  8920 18 3C        	jr 1F
368+  8922              tercuad
369+  8922              ;	call Fija_punteros
370+  8922 3E 03        	ld a,3
371+  8924 32 E0 84     	ld (Cuad_objeto),a
372+  8927 21 20 48     	ld hl,$4820
373+  892A 22 01 85     	ld (Limite_horizontal),hl
374+  892D 21 03 85     	ld hl,Limite_vertical
375+  8930 36 12        	ld (hl),$12
376+  8932 08           	ex af,af
377+  8933 18 29        	jr 1F
378+  8935 CD 67 89     primit call column
379+  8938 38 13        	jr c, primcuad
380+  893A              segcuad
381+  893A              ;	call Fija_punteros
382+  893A 3E 02        	ld a,2
383+  893C 32 E0 84     	ld (Cuad_objeto),a
384+  893F 21 C0 4F     	ld hl,$4fc0
385+  8942 22 01 85     	ld (Limite_horizontal),hl
386+  8945 21 03 85     	ld hl,Limite_vertical
387+  8948 36 0D        	ld (hl),$0d
388+  894A 08           	ex af,af
389+  894B 18 11        	jr 1F
390+  894D              primcuad
391+  894D              ;	call Fija_punteros
392+  894D 3E 01        	ld a,1
393+  894F 32 E0 84     	ld (Cuad_objeto),a
394+  8952 21 C0 4F     	ld hl,$4fc0
395+  8955 22 01 85     	ld (Limite_horizontal),hl
396+  8958 21 03 85     	ld hl,Limite_vertical
397+  895B 36 12        	ld (hl),$12
398+  895D 08           	ex af,af
399+  895E CD A8 8F     1 call Genera_coordenadas
400+  8961 21 F7 84     	ld hl,Ctrl_0
401+  8964 CB EE        	set 5,(hl)
402+  8966 C9           	ret
403+  8967
404+  8967              ; ------------------------------------------------------------------------------------------------------------------
405+  8967
406+  8967              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  8967              ;
408+  8967              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  8967
410+  8967 7D           column ld a,l
411+  8968 E6 1F        	and $1f
412+  896A FE 10         	cp $10
413+  896C C9            	ret
414+  896D
415+  896D              ; --------------------------------------------------------------------------------------------------------------------
416+  896D              ;
417+  896D              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  896D              ;
419+  896D              ; 14/12/22
420+  896D              ;
421+  896D              ;	Modifica: A y BC.
422+  896D
423+  896D 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  8970 E6 01        	and 1
425+  8972 28 17        	jr z,1F
426+  8974
427+  8974              ; Nos encontramos en la parte izquierda de la pantalla
428+  8974
429+  8974 3A D7 84     	ld a,(Coordenada_X)
430+  8977 47           	ld b,a
431+  8978 04           	inc b											; (Coordenada_X)+1 en B.
432+  8979 79           	ld a,c
433+  897A 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  897B 38 08        	jr c,2F
435+  897D 47           	ld b,a
436+  897E 79           	ld a,c
437+  897F 90           	sub b
438+  8980 32 00 85     	ld (Columnas),a
439+  8983 18 1B        	jr 4F
440+  8985 79           2 ld a,c
441+  8986 32 00 85     	ld (Columnas),a
442+  8989 18 15        	jr 4F
443+  898B
444+  898B              ; Nos encontramos en la parte derecha de la pantalla.
445+  898B
446+  898B 3A D7 84     1 ld a,(Coordenada_X)
447+  898E 81           	add c
448+  898F 3D           	dec a
449+  8990 D6 1F        	sub $1f
450+  8992 38 08        	jr c,3F
451+  8994 47           	ld b,a
452+  8995 79           	ld a,c
453+  8996 90           	sub b
454+  8997 32 00 85     	ld (Columnas),a
455+  899A 18 04        	jr 4F
456+  899C 79           3 ld a,c
457+  899D 32 00 85     	ld (Columnas),a
458+  89A0 D9           4 exx
459+  89A1 4F           	ld c,a
460+  89A2 D9           	exx
461+  89A3 C9            ret
462+  89A4
463+  89A4              ; --------------------------------------------------------------------------------------------------------------------
464+  89A4              ;
465+  89A4              ; 7/1/23
466+  89A4              ;
467+  89A4              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89A4              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89A4              ;
470+  89A4              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89A4              ;	DESTRUYE: HL,B Y A.
472+  89A4
473+  89A4 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89A7 FE 02        	cp 2
475+  89A9 38 18        	jr c,1F
476+  89AB 28 16        	jr z,1F
477+  89AD E6 01        	and 1
478+  89AF 28 0D        	jr z,3F
479+  89B1
480+  89B1              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89B1
482+  89B1 CD ED 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89B4
484+  89B4 7D           9 ld a,l
485+  89B5 E6 1F        	and $1f
486+  89B7 28 2A        	jr z,7F
487+  89B9 2B           	dec hl
488+  89BA 10 F8        	djnz 9B
489+  89BC 18 25        	jr 7F
490+  89BE
491+  89BE              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  89BE
493+  89BE 2A D2 84     3 ld hl,(Posicion_actual)
494+  89C1 18 20        	jr 7F
495+  89C3
496+  89C3 28 14        1 jr z,2F
497+  89C5
498+  89C5              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  89C5
500+  89C5 CD ED 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  89C8 7D           4 ld a,l
502+  89C9 E6 1F        	and $1f
503+  89CB 28 03        	jr z,6F
504+  89CD 2B           	dec hl
505+  89CE 10 F8        	djnz 4B
506+  89D0 06 0F        6 ld b,15
507+  89D2 CD 4E 8A     5 call PreviousScan
508+  89D5 10 FB        	djnz 5B
509+  89D7 18 0A        	jr 7F
510+  89D9
511+  89D9              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89D9
513+  89D9 CD ED 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89DC 06 0F        	ld b,15
515+  89DE CD 4E 8A     8 call PreviousScan
516+  89E1 10 FB        	djnz 8B
517+  89E3
518+  89E3 E5           7 push hl
519+  89E4 DD E1        	pop ix
520+  89E6
521+  89E6 2A D4 84     	ld hl,(Puntero_objeto)
522+  89E9 E5           	push hl
523+  89EA FD E1        	pop iy
524+  89EC
525+  89EC C9           	ret
526+  89ED
527+  89ED              ; --------------------------------------------------------------------------------------------------------------------
528+  89ED              ;
529+  89ED              ;	2/1/23
530+  89ED              ;
531+  89ED              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  89ED              ;
533+  89ED              ;	Tras esta rutina tenemos:
534+  89ED              ;
535+  89ED              ;	OUTPUT: HL contiene (Posicion_actual).
536+  89ED              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  89ED              ;
538+  89ED              ;	DESTRUYE!!!!! HL,B y A.
539+  89ED
540+  89ED 2A D2 84     Operandos ld hl,(Posicion_actual)
541+  89F0 3A 00 85     	ld a,(Columnas)
542+  89F3 3D           	dec a
543+  89F4 20 01        	jr nz,1F
544+  89F6 3C           	inc a
545+  89F7 47           1 ld b,a
546+  89F8 C9           	ret
547+  89F9
548+  89F9              ; --------------------------------------------------------------------------------------------------------------------
549+  89F9              ;
550+  89F9              ;	3/1/23
551+  89F9              ;
552+  89F9              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89F9              ;
554+  89F9              ;	Destruye: A,B,HL y DE.
555+  89F9
556+  89F9              Define_rutina_de_impresion
557+  89F9
558+  89F9 3A D1 84     	ld a,(Columns)
559+  89FC 47           	ld b,a
560+  89FD 3A 00 85     	ld a,(Columnas)
561+  8A00 B8           	cp b
562+  8A01 20 0D        	jr nz,2f
563+  8A03
564+  8A03              ;	La entidad se imprime entera.
565+  8A03
566+  8A03 21 95 8A     	ld hl, Indice_entidades_completas
567+  8A06 E6 01        	and 1
568+  8A08 28 02        	jr z,1F
569+  8A0A
570+  8A0A 23           	inc hl
571+  8A0B 23           	inc hl
572+  8A0C
573+  8A0C CD 7A 86     1 call Extrae_address
574+  8A0F C9           	ret		;	ret
575+  8A10
576+  8A10              ;	La entidad no se imprime entera en pantalla.
577+  8A10
578+  8A10 3A E0 84     2 ld a,(Cuad_objeto)
579+  8A13 E6 01        	and 1
580+  8A15 28 17        	jr z,3F
581+  8A17
582+  8A17              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A17
584+  8A17 21 99 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A1A 3A D1 84     4 ld a,(Columns)
586+  8A1D E6 01        	and 1
587+  8A1F 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A21
589+  8A21 23           	inc hl
590+  8A22 23           	inc hl
591+  8A23
592+  8A23 3A 00 85     	ld a,(Columnas)
593+  8A26 E6 01        	and 1
594+  8A28 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A2A
596+  8A2A 23           	inc hl
597+  8A2B 23           	inc hl
598+  8A2C
599+  8A2C 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A2E
601+  8A2E 21 9F 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A31 18 E7        	jr 4B
603+  8A33
604+  8A33              ; --------------------------------------------------------------------------------------------------------------------
605+  8A33              ;
606+  8A33              ;	Prepara_draw
607+  8A33              ;
608+  8A33              ;	Es una rutina de carga.
609+  8A33              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A33              ;
611+  8A33              ;	FUNCIONAMIENTO:
612+  8A33              ;
613+  8A33              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A33              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A33              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A33              ;
617+  8A33              ;	DESTRUYE:
618+  8A33              ;
619+  8A33              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A33
621+  8A33 21 D0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A36 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A37 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A38 4E           	ld c,(hl)
625+  8A39 2A D2 84     	ld hl,(Posicion_actual)
626+  8A3C 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A3E C9           	ret
628+  8A3F
629+  8A3F              ;----------------------------------------------------------------------------------------------------------------
630+  8A3F              ;
631+  8A3F              ;	5/08/22
632+  8A3F              ;
633+  8A3F              ;   NextScan.
634+  8A3F              ;
635+  8A3F              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A3F              ;
637+  8A3F              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A3F              ;
639+  8A3F              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A3F              ;
641+  8A3F              ;       DESTRUIDOS: AF y HL !!!
642+  8A3F              ;
643+  8A3F              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A3F              ;
645+  8A3F
646+  8A3F 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A40 7C               ld a,h
648+  8A41 E6 07            and 7
649+  8A43 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A44
651+  8A44 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A45 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A47 6F               ld l,a
654+  8A48 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A49
656+  8A49 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A4A D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A4C 67               ld h,a
659+  8A4D C9               ret
660+  8A4E
661+  8A4E              ;----------------------------------------------------------------------------------------------------------------
662+  8A4E              ;
663+  8A4E              ;	5/08/22
664+  8A4E              ;
665+  8A4E              ;   PreviousScan.
666+  8A4E              ;
667+  8A4E              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A4E              ;
669+  8A4E              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A4E              ;
671+  8A4E              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A4E              ;
673+  8A4E              ;       DESTRUIDOS: AF y HL !!!
674+  8A4E              ;
675+  8A4E              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A4E              ;
677+  8A4E
678+  8A4E 7C           PreviousScan ld a,h
679+  8A4F 25               dec h               ; Dec H.
680+  8A50 E6 07            and 7
681+  8A52 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A53
683+  8A53 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A54 D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A56 6F               ld l,a
686+  8A57 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A58
688+  8A58 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A59 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A5B 67               ld h,a
691+  8A5C C9               ret
692+  8A5D
693+  8A5D              ; -----------------------------------------------------------------------------------
694+  8A5D              ;
695+  8A5D              ;	15/1/23
696+  8A5D
697+  8A5D ED 73 0C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  8A61 31 00 70     	ld sp,Album_de_fotos
699+  8A64
700+  8A64 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  8A66 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  8A67 D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  8A68
704+  8A68 ED 73 0E 85  	ld (Stack_2),sp
705+  8A6C ED 7B 0C 85  	ld sp,(Stack)
706+  8A70
707+  8A70              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  8A70
709+  8A70 3E CD        	ld a,$cd
710+  8A72 32 7A 8A     	ld (Imprime),a
711+  8A75 EB           	ex de,hl
712+  8A76 22 7B 8A     	ld (Imprime+1),hl
713+  8A79 EB           	ex de,hl
714+  8A7A
715+  8A7A              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A7A
717+  8A7A 00 00 00     Imprime db 0,0,0
718+  8A7D
719+  8A7D ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A81
721+  8A81 3A 0B 85     	ld a,(Numero_de_malotes)
722+  8A84 3D           	dec a
723+  8A85 28 09        	jr z,1F
724+  8A87 32 0B 85      	ld (Numero_de_malotes),a
725+  8A8A ED 7B 0E 85  	ld sp,(Stack_2)
726+  8A8E 18 D4        	jr 2B
727+  8A90
728+  8A90 AF           1 xor a
729+  8A91 32 0E 85     	ld (Stack_2),a
730+  8A94 C9           	ret
731+  8A95
732+  8A95
# file closed: Draw_XOR.asm
680   8A95              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A95              ;   índices de Rutinas de impresión.
  2+  8A95
  3+  8A95 A5 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A97 D2 8A            defw Pinta_Amadeus_3x2
  5+  8A99
  6+  8A99 28 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A9B C8 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A9D 7C 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A9F
 10+  8A9F 52 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AA1 56 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AA3 0A 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AA5
 14+  8AA5
 15+  8AA5              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AA5              ;
 17+  8AA5              ;   12/12/22
 18+  8AA5              ;
 19+  8AA5              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AA5              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AA5              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AA5              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AA5              ;
 24+  8AA5              ;   Modifica: DE y HL.
 25+  8AA5
 26+  8AA5 ED 73 0C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AA9 FD F9        	ld sp,iy
 28+  8AAB 06 10            ld b,16
 29+  8AAD D1           1 pop de
 30+  8AAE 7B               ld a,e
 31+  8AAF AE               xor (hl)
 32+  8AB0 77           	ld (hl),a
 33+  8AB1 23           	inc hl
 34+  8AB2 7A               ld a,d
 35+  8AB3 AE               xor (hl)
 36+  8AB4 77           	ld (hl),a
 37+  8AB5 2B           	dec hl
 38+  8AB6 24           	inc h
 39+  8AB7 7C               ld a,h
 40+  8AB8 E6 07            and 7
 41+  8ABA 20 0A            jr nz,2F
 42+  8ABC 7D               ld a,l
 43+  8ABD C6 20            add a,$20
 44+  8ABF 6F               ld l,a
 45+  8AC0 38 04            jr c,2F
 46+  8AC2 7C               ld a,h
 47+  8AC3 D6 08            sub 8
 48+  8AC5 67               ld h,a
 49+  8AC6 7C           2 ld a,h
 50+  8AC7 FE 58            cp $58
 51+  8AC9 28 02            jr z,3F
 52+  8ACB 10 E0            djnz 1B
 53+  8ACD ED 7B 0C 85  3 ld sp,(Stack)
 54+  8AD1 C9           	ret
 55+  8AD2
 56+  8AD2 ED 73 0C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8AD6 FD F9        	ld sp,iy
 58+  8AD8 06 08            ld b,8
 59+  8ADA D1           1 pop de
 60+  8ADB 7B               ld a,e
 61+  8ADC AE               xor (hl)
 62+  8ADD 77           	ld (hl),a
 63+  8ADE 23           	inc hl
 64+  8ADF 7A               ld a,d
 65+  8AE0 AE               xor (hl)
 66+  8AE1 77           	ld (hl),a
 67+  8AE2 23           	inc hl
 68+  8AE3 D1           	pop de
 69+  8AE4 7B               ld a,e
 70+  8AE5 AE               xor (hl)
 71+  8AE6 77           	ld (hl),a
 72+  8AE7 2B           	dec hl
 73+  8AE8 2B           	dec hl
 74+  8AE9 24           	inc h
 75+  8AEA 7C               ld a,h
 76+  8AEB E6 07            and 7
 77+  8AED 20 0A            jr nz,2F
 78+  8AEF 7D               ld a,l
 79+  8AF0 C6 20            add a,$20
 80+  8AF2 6F               ld l,a
 81+  8AF3 38 04            jr c,2F
 82+  8AF5 7C               ld a,h
 83+  8AF6 D6 08            sub 8
 84+  8AF8 67               ld h,a
 85+  8AF9 7C           2 ld a,h
 86+  8AFA FE 58            cp $58
 87+  8AFC 28 25            jr z,4F
 88+  8AFE 7A               ld a,d
 89+  8AFF AE               xor (hl)
 90+  8B00 77               ld (hl),a
 91+  8B01 D1           	pop de
 92+  8B02 23           	inc hl
 93+  8B03 7B               ld a,e
 94+  8B04 AE               xor (hl)
 95+  8B05 77           	ld (hl),a
 96+  8B06 23           	inc hl
 97+  8B07 7A               ld a,d
 98+  8B08 AE               xor (hl)
 99+  8B09 77           	ld (hl),a
100+  8B0A 2B           	dec hl
101+  8B0B 2B           	dec hl
102+  8B0C 24           	inc h
103+  8B0D 7C               ld a,h
104+  8B0E E6 07            and 7
105+  8B10 20 0A            jr nz,3F
106+  8B12 7D               ld a,l
107+  8B13 C6 20            add a,$20
108+  8B15 6F               ld l,a
109+  8B16 38 04            jr c,3F
110+  8B18 7C               ld a,h
111+  8B19 D6 08            sub 8
112+  8B1B 67               ld h,a
113+  8B1C 7C           3 ld a,h
114+  8B1D FE 58            cp $58
115+  8B1F 28 02            jr z,4F
116+  8B21 10 B7            djnz 1B
117+  8B23 ED 7B 0C 85  4 ld sp,(Stack)
118+  8B27 C9           	ret
119+  8B28
120+  8B28              ; ---------------------------------------------------
121+  8B28
122+  8B28 ED 73 0C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B2C FD F9        	ld sp,iy
124+  8B2E 06 10            ld b,16
125+  8B30 D1           1 pop de
126+  8B31 7A           	ld a,d
127+  8B32 AE           	xor (hl)
128+  8B33 77           	ld (hl),a
129+  8B34 24           	inc h
130+  8B35 7C               ld a,h
131+  8B36 E6 07            and 7
132+  8B38 20 0C            jr nz,2F
133+  8B3A 7D               ld a,l
134+  8B3B C6 20            add a,$20
135+  8B3D 6F               ld l,a
136+  8B3E 38 06            jr c,2F
137+  8B40 7C               ld a,h
138+  8B41 D6 08            sub 8
139+  8B43 67               ld h,a
140+  8B44 18 00            jr 2F
141+  8B46 7C           2 ld a,h
142+  8B47 FE 58            cp $58
143+  8B49 28 02            jr z,3F
144+  8B4B 10 E3            djnz 1B
145+  8B4D ED 7B 0C 85  3 ld sp,(Stack)
146+  8B51 C9           	ret
147+  8B52
148+  8B52 ED 73 0C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B56 FD F9        	ld sp,iy
150+  8B58 06 10            ld b,16
151+  8B5A D1           1 pop de
152+  8B5B 7B           	ld a,e
153+  8B5C AE           	xor (hl)
154+  8B5D 77           	ld (hl),a
155+  8B5E 24           	inc h
156+  8B5F 7C               ld a,h
157+  8B60 E6 07            and 7
158+  8B62 20 0C            jr nz,2F
159+  8B64 7D               ld a,l
160+  8B65 C6 20            add a,$20
161+  8B67 6F               ld l,a
162+  8B68 38 06            jr c,2F
163+  8B6A 7C               ld a,h
164+  8B6B D6 08            sub 8
165+  8B6D 67               ld h,a
166+  8B6E 18 00            jr 2F
167+  8B70 7C           2 ld a,h
168+  8B71 FE 58            cp $58
169+  8B73 28 02            jr z,3F
170+  8B75 10 E3            djnz 1B
171+  8B77 ED 7B 0C 85  3 ld sp,(Stack)
172+  8B7B C9           	ret
173+  8B7C
174+  8B7C              ; ---------------------------------------------------
175+  8B7C
176+  8B7C ED 73 0C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B80 FD F9        	ld sp,iy
178+  8B82 06 08            ld b,8
179+  8B84 D1           1 pop de
180+  8B85 7A           	ld a,d
181+  8B86 AE           	xor (hl)
182+  8B87 77           	ld (hl),a
183+  8B88 23           	inc hl
184+  8B89 D1           	pop de
185+  8B8A 7B           	ld a,e
186+  8B8B AE           	xor (hl)
187+  8B8C 77           	ld (hl),a
188+  8B8D 2B           	dec hl
189+  8B8E 24            	inc h
190+  8B8F 7C               ld a,h
191+  8B90 E6 07            and 7
192+  8B92 20 0A            jr nz,2F
193+  8B94 7D               ld a,l
194+  8B95 C6 20            add a,$20
195+  8B97 6F               ld l,a
196+  8B98 38 04            jr c,2F
197+  8B9A 7C               ld a,h
198+  8B9B D6 08            sub 8
199+  8B9D 67               ld h,a
200+  8B9E 7C           2 ld a,h
201+  8B9F FE 58            cp $58
202+  8BA1 28 20            jr z,4F
203+  8BA3 D1               pop de
204+  8BA4 7B           	ld a,e
205+  8BA5 AE           	xor (hl)
206+  8BA6 77           	ld (hl),a
207+  8BA7 23           	inc hl
208+  8BA8 7A           	ld a,d
209+  8BA9 AE           	xor (hl)
210+  8BAA 77           	ld (hl),a
211+  8BAB 2B           	dec hl
212+  8BAC 24           	inc h
213+  8BAD 7C               ld a,h
214+  8BAE E6 07            and 7
215+  8BB0 20 0A            jr nz,3F
216+  8BB2 7D               ld a,l
217+  8BB3 C6 20            add a,$20
218+  8BB5 6F               ld l,a
219+  8BB6 38 04            jr c,3F
220+  8BB8 7C               ld a,h
221+  8BB9 D6 08            sub 8
222+  8BBB 67               ld h,a
223+  8BBC 7C           3 ld a,h
224+  8BBD FE 58            cp $58
225+  8BBF 28 02            jr z,4F
226+  8BC1 10 C1            djnz 1B
227+  8BC3 ED 7B 0C 85  4 ld sp,(Stack)
228+  8BC7 C9           	ret
229+  8BC8
230+  8BC8 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8BCC FD F9        	ld sp,iy
232+  8BCE 06 08            ld b,8
233+  8BD0 D1           1 pop de
234+  8BD1 D1           	pop de
235+  8BD2 7B           	ld a,e
236+  8BD3 AE           	xor (hl)
237+  8BD4 77           	ld (hl),a
238+  8BD5 24            	inc h
239+  8BD6 7C               ld a,h
240+  8BD7 E6 07            and 7
241+  8BD9 20 0A            jr nz,2F
242+  8BDB 7D               ld a,l
243+  8BDC C6 20            add a,$20
244+  8BDE 6F               ld l,a
245+  8BDF 38 04            jr c,2F
246+  8BE1 7C               ld a,h
247+  8BE2 D6 08            sub 8
248+  8BE4 67               ld h,a
249+  8BE5 7C           2 ld a,h
250+  8BE6 FE 58            cp $58
251+  8BE8 28 1B            jr z,4F
252+  8BEA D1               pop de
253+  8BEB 7A           	ld a,d
254+  8BEC AE           	xor (hl)
255+  8BED 77           	ld (hl),a
256+  8BEE 24           	inc h
257+  8BEF 7C               ld a,h
258+  8BF0 E6 07            and 7
259+  8BF2 20 0A            jr nz,3F
260+  8BF4 7D               ld a,l
261+  8BF5 C6 20            add a,$20
262+  8BF7 6F               ld l,a
263+  8BF8 38 04            jr c,3F
264+  8BFA 7C               ld a,h
265+  8BFB D6 08            sub 8
266+  8BFD 67               ld h,a
267+  8BFE 7C           3 ld a,h
268+  8BFF FE 58            cp $58
269+  8C01 28 02            jr z,4F
270+  8C03 10 CB            djnz 1B
271+  8C05 ED 7B 0C 85  4 ld sp,(Stack)
272+  8C09 C9           	ret
273+  8C0A
274+  8C0A ED 73 0C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C0E FD F9        	ld sp,iy
276+  8C10 06 08            ld b,8
277+  8C12 D1           1 pop de
278+  8C13 7B           	ld a,e
279+  8C14 AE           	xor (hl)
280+  8C15 77           	ld (hl),a
281+  8C16 23           	inc hl
282+  8C17 7A           	ld a,d
283+  8C18 AE           	xor (hl)
284+  8C19 77           	ld (hl),a
285+  8C1A 2B           	dec hl
286+  8C1B 24             	inc h
287+  8C1C 7C               ld a,h
288+  8C1D E6 07            and 7
289+  8C1F 20 0A            jr nz,2F
290+  8C21 7D               ld a,l
291+  8C22 C6 20            add a,$20
292+  8C24 6F               ld l,a
293+  8C25 38 04            jr c,2F
294+  8C27 7C               ld a,h
295+  8C28 D6 08            sub 8
296+  8C2A 67               ld h,a
297+  8C2B 7C           2 ld a,h
298+  8C2C FE 58            cp $58
299+  8C2E 28 21            jr z,4F
300+  8C30 D1               pop de
301+  8C31 7A           	ld a,d
302+  8C32 AE           	xor (hl)
303+  8C33 77           	ld (hl),a
304+  8C34 23           	inc hl
305+  8C35 D1               pop de
306+  8C36 7B           	ld a,e
307+  8C37 AE           	xor (hl)
308+  8C38 77           	ld (hl),a
309+  8C39 2B           	dec hl
310+  8C3A 24           	inc h
311+  8C3B 7C               ld a,h
312+  8C3C E6 07            and 7
313+  8C3E 20 0A            jr nz,3F
314+  8C40 7D               ld a,l
315+  8C41 C6 20            add a,$20
316+  8C43 6F               ld l,a
317+  8C44 38 04            jr c,3F
318+  8C46 7C               ld a,h
319+  8C47 D6 08            sub 8
320+  8C49 67               ld h,a
321+  8C4A 7C           3 ld a,h
322+  8C4B FE 58            cp $58
323+  8C4D 28 02            jr z,4F
324+  8C4F 10 C1            djnz 1B
325+  8C51 ED 7B 0C 85  4 ld sp,(Stack)
326+  8C55 C9           	ret
327+  8C56
328+  8C56 ED 73 0C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C5A FD F9        	ld sp,iy
330+  8C5C 06 08            ld b,8
331+  8C5E D1           1 pop de
332+  8C5F 7B           	ld a,e
333+  8C60 AE           	xor (hl)
334+  8C61 77           	ld (hl),a
335+  8C62 24            	inc h
336+  8C63 7C               ld a,h
337+  8C64 E6 07            and 7
338+  8C66 20 0A            jr nz,2F
339+  8C68 7D               ld a,l
340+  8C69 C6 20            add a,$20
341+  8C6B 6F               ld l,a
342+  8C6C 38 04            jr c,2F
343+  8C6E 7C               ld a,h
344+  8C6F D6 08            sub 8
345+  8C71 67               ld h,a
346+  8C72 7C           2 ld a,h
347+  8C73 FE 58            cp $58
348+  8C75 28 1C            jr z,4F
349+  8C77 D1               pop de
350+  8C78 7A           	ld a,d
351+  8C79 AE           	xor (hl)
352+  8C7A 77           	ld (hl),a
353+  8C7B 24           	inc h
354+  8C7C 7C               ld a,h
355+  8C7D E6 07            and 7
356+  8C7F 20 0A            jr nz,3F
357+  8C81 7D               ld a,l
358+  8C82 C6 20            add a,$20
359+  8C84 6F               ld l,a
360+  8C85 38 04            jr c,3F
361+  8C87 7C               ld a,h
362+  8C88 D6 08            sub 8
363+  8C8A 67               ld h,a
364+  8C8B 7C           3 ld a,h
365+  8C8C FE 58            cp $58
366+  8C8E 28 03            jr z,4F
367+  8C90 D1               pop de
368+  8C91 10 CB            djnz 1B
369+  8C93 ED 7B 0C 85  4 ld sp,(Stack)
370+  8C97 C9           	ret
371+  8C98
372+  8C98              ; ---------------------------------------------------
373+  8C98
# file closed: Rutinas_de_impresion_sprites.asm
681   8C98              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C98              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C98              ;
  3+  8C98              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C98              ;
  5+  8C98              ; *****************************************************************************************************************************************************************************************
  6+  8C98              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C98
  8+  8C98 7C           calcula_tercio ld a,h
  9+  8C99 E6 18        	and $18
 10+  8C9B CB 2F        	sra a
 11+  8C9D CB 2F        	sra a
 12+  8C9F CB 2F        	sra a
 13+  8CA1 C9           	ret
 14+  8CA2
# file closed: calcula_tercio.asm
682   8CA2              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CA2              ; -----------------------------------------------------------------------------------------
  2+  8CA2              ;
  3+  8CA2              ;   04/11/22
  4+  8CA2              ;
  5+  8CA2              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CA2              ;
  7+  8CA2              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CA2              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CA2              ;
 10+  8CA2              ;   DESTRUYE: HL y A. !!!!!
 11+  8CA2
 12+  8CA2 CD 98 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CA5 26 58            ld h,$58
 14+  8CA7 84               add h
 15+  8CA8 67               ld h,a
 16+  8CA9 C9               ret
# file closed: Calcula_direccion_atributos.asm
683   8CAA              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CAA              ; ********** **********
  2+  8CAA              ;
  3+  8CAA              ;   5/11/22
  4+  8CAA              ;
  5+  8CAA              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CAA              ;
  7+  8CAA              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CAA              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CAA              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CAA              ;
 11+  8CAA              ;   NO DESTROYERSSSS !!!!!
 12+  8CAA
 13+  8CAA E5           Define_atributos push hl
 14+  8CAB C5           	push bc
 15+  8CAC D5           	push de
 16+  8CAD
 17+  8CAD CD A2 8C     	call Calcula_direccion_atributos
 18+  8CB0
 19+  8CB0 D9               exx
 20+  8CB1 E5               push hl
 21+  8CB2 D9               exx
 22+  8CB3 D1               pop de
 23+  8CB4
 24+  8CB4 42               ld b,d
 25+  8CB5 7B               ld a,e 									; (Attr) en A.
 26+  8CB6
 27+  8CB6 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8CB7 E5            	push hl 								; Guardo dirección de attr.
 29+  8CB8
 30+  8CB8              ; -----
 31+  8CB8
 32+  8CB8 77           2 ld (hl),a
 33+  8CB9 0D           	dec c 									; Decremento (Columnas).
 34+  8CBA 28 03        	jr z,1F
 35+  8CBC 23           	inc hl
 36+  8CBD 18 F9        	jr 2B
 37+  8CBF
 38+  8CBF E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8CC0 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8CC1
 41+  8CC1 05           	dec b									; Decremento (Filas).
 42+  8CC2 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8CC4
 44+  8CC4 11 20 00     	ld de,32
 45+  8CC7 A7           	and a
 46+  8CC8 ED 5A        	adc hl,de
 47+  8CCA 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8CCC
 49+  8CCC D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8CCD C1           	pop bc
 51+  8CCE E1           	pop hl
 52+  8CCF
 53+  8CCF C9           	ret
 54+  8CD0
# file closed: Define_atributos.asm
684   8CD0              	include "Cls.asm"
# file opened: Cls.asm
  1+  8CD0              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8CD0              ;
  3+  8CD0              ;
  4+  8CD0              ;	CLS.
  5+  8CD0              ;
  6+  8CD0              ;	Limpia la pantalla y define sus atributos.
  7+  8CD0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8CD0              ;
  9+  8CD0              ;	COLORES: 0 ..... NEGRO
 10+  8CD0              ;    		 1 ..... AZUL
 11+  8CD0              ; 			 2 ..... ROJO
 12+  8CD0              ;			 3 ..... MAGENTA
 13+  8CD0              ; 			 4 ..... VERDE
 14+  8CD0              ; 			 5 ..... CIAN
 15+  8CD0              ;			 6 ..... AMARILLO
 16+  8CD0              ; 			 7 ..... BLANCO
 17+  8CD0              ;
 18+  8CD0              ;	INPUT: A contiene los atributos de pantalla.
 19+  8CD0              ;
 20+  8CD0              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8CD0
 22+  8CD0
 23+  8CD0 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8CD3 11 01 40     	LD DE,$4001
 25+  8CD6 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CD9 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8CDB ED B0        	LDIR
 28+  8CDD 01 FF 02     	LD BC,767
 29+  8CE0 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8CE1 ED B0        	LDIR
 31+  8CE3 C9           	ret
 32+  8CE4
# file closed: Cls.asm
685   8CE4              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8CE4              ; ******************************************************************************************************************************************************************************************
  2+  8CE4              ;
  3+  8CE4              ;   22/01/23
  4+  8CE4              ;
  5+  8CE4              ;	Mov_down
  6+  8CE4              ;
  7+  8CE4              ; 	Mueve el Sprite X px hacia abajo.
  8+  8CE4              ;
  9+  8CE4              ;
 10+  8CE4 21 F7 84     Mov_down ld hl,Ctrl_0
 11+  8CE7 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8CE9              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8CE9              ; 																	; _ en el caso de que no lo haya.
 14+  8CE9 3A E4 84     	ld a,(Vel_down)
 15+  8CEC 47           	ld b,a
 16+  8CED 2A D2 84         ld hl,(Posicion_actual)
 17+  8CF0 CD 98 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8CF3 E6 02        	and 2
 19+  8CF5 28 0F        	jr z,1F
 20+  8CF7
 21+  8CF7              ; Nos encontramos en el último tercio de pantalla.
 22+  8CF7              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8CF7
 24+  8CF7 7C           	ld a,h
 25+  8CF8 FE 57        	cp $57
 26+  8CFA 20 0A        	jr nz,1F
 27+  8CFC 7D           	ld a,l
 28+  8CFD C6 20        	add $20
 29+  8CFF 30 05        	jr nc,1F
 30+  8D01              ; ------------------------------
 31+  8D01 CD 92 8F     	call Reaparece_arriba
 32+  8D04              ;	call Reinicio
 33+  8D04              ; ------------------------------
 34+  8D04 18 08        	jr 3F
 35+  8D06 CD 3F 8A     1 call NextScan
 36+  8D09 22 D2 84     	ld (Posicion_actual),hl
 37+  8D0C 10 E2            djnz 2B
 38+  8D0E CD A8 8F     3 call Genera_coordenadas
 39+  8D11 C9           	ret
 40+  8D12
 41+  8D12
 42+  8D12              ; ******************************************************************************************************************************************************************************************
 43+  8D12              ;
 44+  8D12              ;   22/01/23
 45+  8D12              ;
 46+  8D12              ;	Mov_up
 47+  8D12              ;
 48+  8D12              ; 	Mueve el Sprite hacia arriba.
 49+  8D12              ;
 50+  8D12              ;
 51+  8D12 21 F7 84     Mov_up ld hl,Ctrl_0
 52+  8D15 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D17              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D17              ; 																		; _ en el caso de que no lo haya.
 55+  8D17 3A E3 84     	ld a,(Vel_up)
 56+  8D1A 47           	ld b,a
 57+  8D1B 2A D2 84     	ld hl,(Posicion_actual)
 58+  8D1E CD 98 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D21 A7           	and a
 60+  8D22 20 10        	jr nz,1F
 61+  8D24
 62+  8D24              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D24              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D24
 65+  8D24 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D25 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D27 20 0B            jr nz,1F
 68+  8D29 7D               ld a,l
 69+  8D2A D6 20            sub $20
 70+  8D2C 30 06            jr nc,1F
 71+  8D2E 25               dec h
 72+  8D2F
 73+  8D2F              ; -----------------------------
 74+  8D2F CD 82 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D32              ;	call Reinicio
 76+  8D32              ; -----------------------------
 77+  8D32
 78+  8D32 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D34 CD 4E 8A     1 call PreviousScan
 80+  8D37 22 D2 84     	ld (Posicion_actual),hl
 81+  8D3A 10 E2            djnz 3B
 82+  8D3C CD A8 8F     2 call Genera_coordenadas
 83+  8D3F C9           	ret
 84+  8D40
 85+  8D40              ; ******************************************************************************************************************************************************************************************
 86+  8D40              ;
 87+  8D40              ;	19/10/22
 88+  8D40              ;
 89+  8D40              ;	Mov_right.
 90+  8D40              ;
 91+  8D40              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D40              ;
 93+  8D40
 94+  8D40 21 F7 84     Mov_right ld hl,Ctrl_0
 95+  8D43 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D45              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D45              ; 																	; _ en el caso de que no lo haya.
 98+  8D45 3A D6 84     	ld a,(CTRL_DESPLZ)
 99+  8D48 A7           	and a
100+  8D49 28 0B        	jr z,9F
101+  8D4B
102+  8D4B 3A F7 84     	ld a,(Ctrl_0)
103+  8D4E CB 7F        	bit 7,a
104+  8D50 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D52 21 D6 84     	ld hl,CTRL_DESPLZ
106+  8D55 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D56
108+  8D56 3A F7 84     9 ld a,(Ctrl_0)
109+  8D59 CB 77        	bit 6,a
110+  8D5B 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D5D
112+  8D5D CD 41 8F     	call Stop_Amadeus_right
113+  8D60 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D61 18 4D        	jr 8F
115+  8D63
116+  8D63 3A D7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D66 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D68 20 46        	jr nz,8F
119+  8D6A
120+  8D6A 3A D6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D6D A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D6E 28 40        	jr z,8F
123+  8D70
124+  8D70              ; ---------- ---------- ----------
125+  8D70              ;
126+  8D70              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D70
128+  8D70 3A E2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D73 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D75 28 11        	jr z,1F
131+  8D77 38 06        	jr c,6F
132+  8D79 FE 04        	cp 4
133+  8D7B 28 14        	jr z,7F
134+  8D7D 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D7F
136+  8D7F              ; ---------- ---------- ----------
137+  8D7F              ;
138+  8D7F              ; Perfiles de velocidad
139+  8D7F              ;
140+  8D7F
141+  8D7F 3A D6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
142+  8D82 FE FE        	cp $fe
143+  8D84 20 2A        	jr nz,8F
144+  8D86 18 10        	jr 3F
145+  8D88 3A D6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
146+  8D8B FE FD        	cp $fd
147+  8D8D 20 21        	jr nz,8F
148+  8D8F 18 07        	jr 3F
149+  8D91 3A D6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
150+  8D94 FE FB        	cp $fb
151+  8D96 20 18        	jr nz,8F
152+  8D98
153+  8D98              ; ---------- ---------- ----------
154+  8D98
155+  8D98 CD 70 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
156+  8D9B              ;	call Reinicio
157+  8D9B
158+  8D9B              ; ---------- ---------- ----------
159+  8D9B              ;
160+  8D9B              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
161+  8D9B
162+  8D9B 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
163+  8D9D C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
164+  8D9E CD B7 8D     	call DESPLZ_DER
165+  8DA1 C1           	pop bc
166+  8DA2 10 F9        	djnz 5B
167+  8DA4 2A D2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
168+  8DA7 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
169+  8DA8 22 D2 84     	ld (Posicion_actual),hl
170+  8DAB CD A8 8F     	call Genera_coordenadas
171+  8DAE 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
172+  8DB0
173+  8DB0              ; ---------- ---------- ----------
174+  8DB0
175+  8DB0 2A D2 84     8 ld hl,(Posicion_actual)
176+  8DB3 CD B7 8D     	call DESPLZ_DER
177+  8DB6 C9           2 ret
178+  8DB7
179+  8DB7              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
180+  8DB7              ;
181+  8DB7              ;	22/9/22
182+  8DB7              ;
183+  8DB7
184+  8DB7 CD C6 8D     DESPLZ_DER call Desplaza_derecha
185+  8DBA CD DB 8D         call modifica_parametros_1er_DESPLZ_2
186+  8DBD CD 04 8E         call Ciclo_completo
187+  8DC0 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
188+  8DC3 CB FE        	set 7,(hl)
189+  8DC5 C9           	ret
190+  8DC6
191+  8DC6              ; ******************************************************************************************************************************************************************************************
192+  8DC6              ;	14/9/22
193+  8DC6              ;
194+  8DC6
195+  8DC6 3A E2 84     Desplaza_derecha ld a,(Vel_right)
196+  8DC9 47           	ld b,a
197+  8DCA 2A DC 84     	ld hl,(Puntero_DESPLZ)
198+  8DCD 23           1 inc hl
199+  8DCE 23           	inc hl
200+  8DCF 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
201+  8DD1 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
202+  8DD4 CD 7A 86     	call Extrae_address
203+  8DD7 22 D4 84     	ld (Puntero_objeto),hl
204+  8DDA C9           	ret
205+  8DDB
206+  8DDB              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
207+  8DDB              ;
208+  8DDB              ;	24/7/22
209+  8DDB              ;
210+  8DDB              ;	modifica_parametros_1er_DESPLZ_2
211+  8DDB              ;
212+  8DDB              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
213+  8DDB              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
214+  8DDB              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
215+  8DDB
216+  8DDB 3A D6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
217+  8DDE A7           	and a
218+  8DDF 20 1F        	jr nz,1F
219+  8DE1 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
220+  8DE3 32 D6 84         ld (CTRL_DESPLZ),a
221+  8DE6 21 D1 84     	ld hl,Columns
222+  8DE9 34           	inc (hl)
223+  8DEA 3A E0 84     	ld a,(Cuad_objeto)
224+  8DED E6 01        	and 1
225+  8DEF 28 0F        	jr z,1F
226+  8DF1 2A D2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
227+  8DF4 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
228+  8DF5 22 D2 84     	ld (Posicion_actual),hl
229+  8DF8 CD A8 8F     	call Genera_coordenadas
230+  8DFB CD 4D 8F     	call Inc_CTRL_DESPLZ
231+  8DFE 18 03        	jr 2F
232+  8E00 CD 4D 8F     1 call Inc_CTRL_DESPLZ
233+  8E03 C9           2 ret
234+  8E04
235+  8E04              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
236+  8E04              ;
237+  8E04              ;	24/7/22
238+  8E04              ;
239+  8E04              ;	Ciclo_completo.
240+  8E04              ;
241+  8E04              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
242+  8E04              ;
243+  8E04              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
244+  8E04              ; 	Decrementamos (Columns).
245+  8E04              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
246+  8E04              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
247+  8E04
248+  8E04
249+  8E04 3A D6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
250+  8E07 FE FF        	cp $ff
251+  8E09 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
252+  8E0B 18 25        	jr 3f
253+  8E0D 21 D1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
254+  8E10 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
255+  8E11 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
256+  8E12 32 D6 84     	ld (CTRL_DESPLZ),a
257+  8E15 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
258+  8E18 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
259+  8E1A 20 0A        	jr nz,2F
260+  8E1C 2A D2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
261+  8E1F 23           	inc hl
262+  8E20 22 D2 84     	ld (Posicion_actual),hl
263+  8E23 CD A8 8F     	call Genera_coordenadas
264+  8E26
265+  8E26              ; Inicia el puntero de Sprite.
266+  8E26
267+  8E26 2A DA 84     2 ld hl,(Indice_Sprite)
268+  8E29 22 DC 84     	ld (Puntero_DESPLZ),hl
269+  8E2C CD 7A 86     	call Extrae_address
270+  8E2F 22 D4 84     	ld (Puntero_objeto),hl
271+  8E32
272+  8E32 C9           3 ret
273+  8E33
274+  8E33              ; ******************************************************************************************************************************************************************************************
275+  8E33              ;
276+  8E33              ;	21/01/23
277+  8E33              ;
278+  8E33              ;	Mov_left.
279+  8E33              ;
280+  8E33              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
281+  8E33              ;
282+  8E33              Mov_left
283+  8E33
284+  8E33 21 F7 84     	ld hl,Ctrl_0
285+  8E36 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
286+  8E38              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
287+  8E38              ; 																	; _ en el caso de que no lo haya.
288+  8E38 3A D6 84     	ld a,(CTRL_DESPLZ)
289+  8E3B A7           	and a
290+  8E3C 20 19        	jr nz,10F
291+  8E3E
292+  8E3E 2A D4 84     	ld hl,(Puntero_objeto)
293+  8E41 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
294+  8E44
295+  8E44 3A F7 84     	ld a,(Ctrl_0)
296+  8E47 CB 77        	bit 6,a
297+  8E49 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
298+  8E4B
299+  8E4B CD 47 8F     	call Stop_Amadeus_left
300+  8E4E 20 62        	jr nz,8F
301+  8E50
302+  8E50 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
303+  8E53 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
304+  8E56 C9           	ret
305+  8E57
306+  8E57 3A F7 84     10 ld a,(Ctrl_0)
307+  8E5A CB 7F        	bit 7,a
308+  8E5C 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
309+  8E5E 21 D6 84     	ld hl,CTRL_DESPLZ
310+  8E61 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
311+  8E62
312+  8E62 3A D7 84     11 ld a,(Coordenada_X)
313+  8E65 A7           	and a
314+  8E66 20 4A        	jr nz,8F
315+  8E68 3A D6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
316+  8E6B A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
317+  8E6C 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
318+  8E6E
319+  8E6E              ; ---------- ---------- ----------
320+  8E6E
321+  8E6E 3A E1 84     	ld a,(Vel_left)
322+  8E71 FE 02        	cp 2
323+  8E73 28 0F        	jr z,1F
324+  8E75 38 04        	jr c,6F
325+  8E77 FE 04        	cp 4
326+  8E79 28 12        	jr z,7F
327+  8E7B
328+  8E7B              ; ---------- ---------- ----------
329+  8E7B
330+  8E7B 3A D6 84     6 ld a,(CTRL_DESPLZ)
331+  8E7E FE F9        	cp $f9
332+  8E80 20 30        	jr nz,8F
333+  8E82 18 10        	jr 4F
334+  8E84 3A D6 84     1 ld a,(CTRL_DESPLZ)
335+  8E87 FE FA        	cp $fa
336+  8E89 20 27        	jr nz,8F
337+  8E8B 18 07        	jr 4F
338+  8E8D 3A D6 84     7 ld a,(CTRL_DESPLZ)
339+  8E90 FE FC        	cp $fc
340+  8E92 20 1E        	jr nz,8F
341+  8E94
342+  8E94              ; ---------- ---------- ----------
343+  8E94
344+  8E94              4
345+  8E94 CD 5E 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
346+  8E97              ;	call Reinicio
347+  8E97
348+  8E97              ; ---------- ---------- ----------
349+  8E97
350+  8E97 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
351+  8E99 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
352+  8E9A 2A D4 84     	ld hl,(Puntero_objeto)
353+  8E9D 22 DC 84     	ld (Puntero_DESPLZ),hl
354+  8EA0 CD B9 8E     	call DESPLZ_IZQ
355+  8EA3 C1           	pop bc
356+  8EA4 10 F3        	djnz 5B
357+  8EA6 2A D2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
358+  8EA9 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
359+  8EAA 22 D2 84     	ld (Posicion_actual),hl
360+  8EAD CD A8 8F     	call Genera_coordenadas
361+  8EB0 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8EB2
363+  8EB2              ; ---------- ---------- ----------
364+  8EB2
365+  8EB2 2A D2 84     8 ld hl,(Posicion_actual)
366+  8EB5 CD B9 8E     	call DESPLZ_IZQ
367+  8EB8 C9           2 ret
368+  8EB9
369+  8EB9              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
370+  8EB9              ;
371+  8EB9              ;	22/9/22
372+  8EB9
373+  8EB9              DESPLZ_IZQ
374+  8EB9
375+  8EB9 CD C8 8E     	call Desplaza_izquierda
376+  8EBC CD DD 8E         call modifica_parametros_1er_DESPLZ
377+  8EBF CD 01 8F     	call Ciclo_completo_2
378+  8EC2 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
379+  8EC5 CB BE        	res 7,(hl)
380+  8EC7 C9           	ret
381+  8EC8 3A E1 84     Desplaza_izquierda ld a,(Vel_left)
382+  8ECB 47           	ld b,a
383+  8ECC 2A DC 84     	ld hl,(Puntero_DESPLZ)
384+  8ECF 2B           1 dec hl
385+  8ED0 2B           	dec hl
386+  8ED1 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8ED3 22 DC 84     	ld (Puntero_DESPLZ),hl
388+  8ED6 CD 7A 86     	call Extrae_address
389+  8ED9 22 D4 84     	ld (Puntero_objeto),hl
390+  8EDC C9           	ret
391+  8EDD
392+  8EDD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8EDD              ;
394+  8EDD              ;	modifica_parametros_1er_DESPLZ
395+  8EDD              ;
396+  8EDD              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8EDD              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8EDD              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8EDD
400+  8EDD 3A D6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8EE0 A7           	and a
402+  8EE1 20 1A        	jr nz,1F
403+  8EE3 21 D1 84     	ld hl,Columns
404+  8EE6 34           	inc (hl)
405+  8EE7 3A E0 84     	ld a,(Cuad_objeto)
406+  8EEA E6 01        	and 1
407+  8EEC 20 0F        	jr nz,1F
408+  8EEE 2A D2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8EF1 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8EF2 22 D2 84     	ld (Posicion_actual),hl
411+  8EF5 CD A8 8F     	call Genera_coordenadas
412+  8EF8 CD 30 8F     	call Dec_CTRL_DESPLZ
413+  8EFB 18 03        	jr 2F
414+  8EFD CD 30 8F     1 call Dec_CTRL_DESPLZ
415+  8F00 C9           2 ret
416+  8F01
417+  8F01              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8F01              ;
419+  8F01
420+  8F01 3A D6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
421+  8F04 FE F8        	cp $f8
422+  8F06 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
423+  8F08 18 25        	jr 3f
424+  8F0A 21 D1 84     1 ld hl,Columns
425+  8F0D 35           	dec (hl)
426+  8F0E AF           	xor a
427+  8F0F 32 D6 84     	ld (CTRL_DESPLZ),a
428+  8F12 3A E0 84     	ld a,(Cuad_objeto)
429+  8F15 E6 01        	and 1
430+  8F17 28 0A        	jr z,2F
431+  8F19 2A D2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
432+  8F1C 2B           	dec hl
433+  8F1D 22 D2 84     	ld (Posicion_actual),hl
434+  8F20 CD A8 8F     	call Genera_coordenadas
435+  8F23
436+  8F23              ; Inicia el puntero de Sprite.
437+  8F23
438+  8F23 2A DA 84     2 ld hl,(Indice_Sprite)
439+  8F26 22 DC 84     	ld (Puntero_DESPLZ),hl
440+  8F29 CD 7A 86     	call Extrae_address
441+  8F2C 22 D4 84     	ld (Puntero_objeto),hl
442+  8F2F C9           3 ret
443+  8F30
444+  8F30              ; ---------- ---------- ---------- ---------- ---------- ----------
445+  8F30              ;
446+  8F30              ;	Dec_CTRL_DESPLZ
447+  8F30              ;
448+  8F30              ;	Subrutina de [modifica_punteros].
449+  8F30              ;
450+  8F30              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
451+  8F30
452+  8F30 21 D6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
453+  8F33 3A E1 84     	ld a,(Vel_left)
454+  8F36 A7           	and a
455+  8F37 28 06        	jr z,1F
456+  8F39 47           	ld b,a
457+  8F3A 35           3 dec (hl)
458+  8F3B 10 FD        	djnz 3B
459+  8F3D 18 01        	jr 2F
460+  8F3F 35           1 dec (hl)
461+  8F40 C9           2 ret
462+  8F41
463+  8F41              ; ---------- ---------- ---------- ---------- ---------- ----------
464+  8F41              ;
465+  8F41              ;	19/10/22
466+  8F41              ;
467+  8F41              ;	(cp 29) para un Amadeus de 3 Columns.
468+  8F41              ;	(cp 30)   ""  ""    ""     2 Columns.
469+  8F41
470+  8F41 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
471+  8F44 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
472+  8F46 C9           	ret
473+  8F47
474+  8F47              ; ---------- ---------- ---------- ---------- ---------- ----------
475+  8F47              ;
476+  8F47              ;	19/10/22
477+  8F47              ;
478+  8F47              ;	(cp 2) para un Amadeus de 3 Columns.
479+  8F47              ;	(cp 1)   ""  ""    ""     2 Columns.
480+  8F47
481+  8F47 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
482+  8F4A FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
483+  8F4C C9           	ret
484+  8F4D
485+  8F4D              ; ---------- ---------- ---------- ---------- ---------- ----------
486+  8F4D              ;
487+  8F4D              ;	24/7/22
488+  8F4D              ;
489+  8F4D              ;	Inc_CTRL_DESPLZ
490+  8F4D              ;
491+  8F4D              ;	Subrutina de [modifica_punteros].
492+  8F4D              ;
493+  8F4D              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
494+  8F4D
495+  8F4D 21 D6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
496+  8F50 3A E2 84     	ld a,(Vel_right)
497+  8F53 A7           	and a
498+  8F54 28 06        	jr z,1F
499+  8F56 47           	ld b,a
500+  8F57 34           3 inc (hl)
501+  8F58 10 FD        	djnz 3B
502+  8F5A 18 01        	jr 2F
503+  8F5C 34           1 inc (hl)
504+  8F5D C9           2 ret
505+  8F5E
506+  8F5E              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F5E
508+  8F5E 2A D2 84     Reaparece_derecha ld hl,(Posicion_actual)
509+  8F61 01 1F 00     	ld bc,31
510+  8F64 A7           	and a
511+  8F65 ED 4A        	adc hl,bc
512+  8F67 22 D2 84     	ld (Posicion_actual),hl
513+  8F6A 21 F7 84     	ld hl,Ctrl_0														; $xxx1
514+  8F6D CB C6        	set 0,(hl)
515+  8F6F C9           	ret
516+  8F70
517+  8F70              ; ---------- ---------- ---------- ---------- ---------- ----------
518+  8F70
519+  8F70 2A D2 84     Reaparece_izquierda ld hl,(Posicion_actual)
520+  8F73 01 1F 00     	ld bc,31
521+  8F76 A7           	and a
522+  8F77 ED 42        	sbc hl,bc
523+  8F79 22 D2 84     	ld (Posicion_actual),hl 											; $xx1x
524+  8F7C 21 F7 84     	ld hl,Ctrl_0
525+  8F7F CB CE        	set 1,(hl)
526+  8F81 C9           	ret
527+  8F82
528+  8F82              ; ---------- ---------- ---------- ---------- ---------- ----------
529+  8F82
530+  8F82 24           Reaparece_abajo inc h
531+  8F83 01 E0 17     	ld bc,$17e0
532+  8F86 A7           	and a
533+  8F87 ED 4A        	adc hl,bc
534+  8F89 22 D2 84     	ld (Posicion_actual),hl
535+  8F8C 21 F7 84     	ld hl,Ctrl_0
536+  8F8F CB D6        	set 2,(hl)
537+  8F91 C9           	ret
538+  8F92
539+  8F92              ; ---------- ---------- ---------- ---------- ---------- ----------
540+  8F92
541+  8F92 01 E0 17     Reaparece_arriba ld bc,$17e0
542+  8F95 A7           	and a
543+  8F96 ED 42        	sbc hl,bc
544+  8F98 22 D2 84     	ld (Posicion_actual),hl
545+  8F9B 21 F7 84     	ld hl,Ctrl_0
546+  8F9E CB DE        	set 3,(hl)
547+  8FA0 C9           	ret
548+  8FA1
549+  8FA1              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
550+  8FA1
551+  8FA1 2A DE 84     Reinicio ld hl,(Posicion_inicio)
552+  8FA4 22 D2 84     	ld (Posicion_actual),hl
553+  8FA7 C9           	ret
# file closed: Direcciones.asm
686   8FA8              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FA8              ;	12/12/22
  2+  8FA8              ;
  3+  8FA8              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FA8              ;	Fila superior "0", Columna izquierda "0".
  5+  8FA8              ;
  6+  8FA8              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FA8              ;
  8+  8FA8              ;	Modifica: A
  9+  8FA8
 10+  8FA8 C5           Genera_coordenadas push bc
 11+  8FA9 E5           	push hl
 12+  8FAA 2A D2 84     	ld hl,(Posicion_actual)
 13+  8FAD 7D           	ld a,l
 14+  8FAE E6 1F        	and $1f
 15+  8FB0 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FB3 CD 98 8C     	call calcula_tercio
 17+  8FB6 47           	ld b,a
 18+  8FB7 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FB8 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FBA 7D           	ld a,l
 21+  8FBB E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FBD 28 05        	jr z,2F
 23+  8FBF 0C           1 inc c
 24+  8FC0 D6 20        	sub 32
 25+  8FC2 20 FB        	jr nz,1B
 26+  8FC4 0C           2 inc c
 27+  8FC5 04           	inc b
 28+  8FC6 05           	dec b
 29+  8FC7 28 04        	jr z,3F
 30+  8FC9 3E E0        	ld a,$e0
 31+  8FCB 10 F2        	djnz 1B
 32+  8FCD 79           3 ld a,c
 33+  8FCE 3D           	dec a
 34+  8FCF 32 D8 84     	ld (Coordenada_y),a
 35+  8FD2 E1           	pop hl
 36+  8FD3 C1           	pop bc
 37+  8FD4 C9           	ret
# file closed: Genera_coordenadas.asm
687   8FD5              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FD5
  2+  8FD5
  3+  8FD5              ;   11/8/22
  4+  8FD5              ;
  5+  8FD5              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FD5              ;
  7+  8FD5              ;   Mov_obj.asm
  8+  8FD5              ;
  9+  8FD5              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FD5              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FD5              ;
 12+  8FD5              ;   Codificación:
 13+  8FD5              ;
 14+  8FD5              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FD5
 16+  8FD5 02 10 00     Izquierda db 2,%00010000,0
 17+  8FD8 02 20 00     Derecha db 2,%00100000,0
 18+  8FDB 02 80 00     Abajo db 2,%10000000,0
 19+  8FDE 02 40 00     Arriba db 2,%01000000,0
 20+  8FE1
 21+  8FE1 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8FE5 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8FE9 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8FED 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8FF1 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8FF5 60 42 60 40
 25+  8FF9 63
 26+  8FFA 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FFE 22 A3 80 A0
 27+  9002 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  9006 84 A0 83 A0
 28+  900A 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  900E 80 A3 22 A0
 29+  9012 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  9016 40 60 42 60
 30+  901A 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  901E
 32+  901E D5 8F        Indice_mov_Izquierda defw Izquierda
 33+  9020 D8 8F        Indice_mov_Derecha defw Derecha
 34+  9022 DB 8F        Indice_mov_Abajo defw Abajo
 35+  9024 DE 8F        Indice_mov_Arriba defw Arriba
 36+  9026 E5 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  9028 E9 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  902A E1 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  902C ED 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  902E F1 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  9030
 42+  9030 3A FD 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  9033 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  9034 28 02            jr z,1F
 45+  9036 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  9038 3A FE 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  903B C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  903D 32 FE 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  9040              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  9040 2A FB 84         ld hl,(Puntero_mov)
 51+  9043 7E               ld a,(hl)
 52+  9044 32 FD 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  9047 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  9048 22 FB 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  904B
 56+  904B 3A FF 84     Decoder ld a,(Repetimos_db)
 57+  904E A7               and a
 58+  904F 20 0C            jr nz,12F
 59+  9051 2A FB 84         ld hl,(Puntero_mov)
 60+  9054 7E               ld a,(hl)
 61+  9055 A7               and a
 62+  9056 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  9058 E6 0F             and $0f
 64+  905A 32 FF 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  905D              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  905D 2A FB 84     12 ld hl,(Puntero_mov)
 67+  9060 CB 7E            bit 7,(hl)
 68+  9062 28 03            jr z,2F
 69+  9064 CD E4 8C         call Mov_down
 70+  9067 2A FB 84     2 ld hl, (Puntero_mov)
 71+  906A CB 76            bit 6,(hl)
 72+  906C 28 03            jr z,3F
 73+  906E CD 12 8D         call Mov_up
 74+  9071 2A FB 84     3 ld hl, (Puntero_mov)
 75+  9074 CB 6E            bit 5,(hl)
 76+  9076 28 03            jr z,4F
 77+  9078 CD 40 8D         call Mov_right
 78+  907B 2A FB 84     4 ld hl, (Puntero_mov)
 79+  907E CB 66            bit 4,(hl)
 80+  9080 28 03            jr z,5F
 81+  9082 CD 33 8E         call Mov_left
 82+  9085
 83+  9085              ; ---------- --------- --------- ---------- ----------
 84+  9085
 85+  9085 3A FF 84     5 ld a,(Repetimos_db)
 86+  9088 A7               and a
 87+  9089 28 07            jr z,6F
 88+  908B 3D               dec a
 89+  908C 32 FF 84         ld (Repetimos_db),a
 90+  908F 28 01            jr z,6f
 91+  9091 C9           11 ret
 92+  9092 21 FD 84     6 ld hl,Contador_db_mov
 93+  9095 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  9096 2A FB 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9099 23               inc hl
 96+  909A 22 FB 84         ld (Puntero_mov),hl
 97+  909D 18 F2            jr 11B
 98+  909F 2A F9 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  90A2 3A FE 84         ld a,(Incrementa_puntero)
100+  90A5 47               ld b,a
101+  90A6 23           8 inc hl
102+  90A7 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  90A9 5E               ld e,(hl)
104+  90AA 23               inc hl
105+  90AB 56               ld d,(hl)
106+  90AC EB               ex de,hl
107+  90AD 22 FB 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  90B0 18 DF            jr 11B
109+  90B2
110+  90B2              ; ---------- --------- --------- ---------- ----------
111+  90B2              ;
112+  90B2              ;   11/8/22
113+  90B2              ;
114+  90B2              ;   Prepara_Puntero_mov
115+  90B2
116+  90B2 E5           Prepara_Puntero_mov push hl
117+  90B3 D5               push de
118+  90B4 2A F9 84         ld hl,(Puntero_indice_mov)
119+  90B7 5E               ld e,(hl)
120+  90B8 23               inc hl
121+  90B9 56               ld d,(hl)
122+  90BA EB               ex de,hl
123+  90BB 22 FB 84         ld (Puntero_mov),hl
124+  90BE D1               pop de
125+  90BF E1               pop hl
126+  90C0 C9               ret
127+  90C1
128+  90C1              ; ---------- --------- --------- ---------- ----------
129+  90C1              ;
130+  90C1              ;   11/8/22
131+  90C1              ;
132+  90C1              ;   Reinicia_el_movimiento
133+  90C1
134+  90C1 CD B2 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  90C4 AF               xor a
136+  90C5 32 FD 84         ld (Contador_db_mov),a
137+  90C8 32 FE 84         ld (Incrementa_puntero),a
138+  90CB C3 30 90         jp Movimiento
139+  90CE
140+  90CE              ; ---------- --------- --------- ---------- ----------
141+  90CE
142+  90CE
143+  90CE
144+  90CE
145+  90CE
146+  90CE
147+  90CE
148+  90CE
149+  90CE
150+  90CE
151+  90CE
152+  90CE
153+  90CE
154+  90CE
155+  90CE
156+  90CE
157+  90CE
158+  90CE
# file closed: Patrones_de_mov.asm
688   90CE              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90CE              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90CE              ;
  3+  90CE              ;	3/1/23
  4+  90CE              ;
  5+  90CE              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90CE
  7+  90CE              ;	ADC HL,SP	LD (addr),SP
  8+  90CE              ;	ADD HL,SP	LD SP,(addr)
  9+  90CE              ;	ADD IX,SP	LD SP,nn
 10+  90CE              ; 	ADD IY,SP	LD SP,HL
 11+  90CE              ;				LD SP,IX
 12+  90CE              ;	DEC SP		LD SP,IY
 13+  90CE
 14+  90CE              ;	EX (SP),HL
 15+  90CE              ;	EX (SP),IX
 16+  90CE              ;	EX (SP),IY
 17+  90CE
 18+  90CE              ;	INC SP
 19+  90CE
 20+  90CE
 21+  90CE                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 10 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 10 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
689   7FC0
690   7FC0              	SAVESNA "Pruebas.sna", START
691   7FC0
692   7FC0
693   7FC0
# file closed: Banco_de_pruebas.asm
