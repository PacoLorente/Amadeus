# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 1F 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0 04 84        Indice_de_disparos defw Disparo_1
  7+  83F2 0C 84        	defw Disparo_2
  8+  83F4 14 84        	defw Disparo_3
  9+  83F6 1C 84        	defw Disparo_4
 10+  83F8 24 84        	defw Disparo_5
 11+  83FA 2C 84        	defw Disparo_6
 12+  83FC 34 84        	defw Disparo_7
 13+  83FE 3C 84        	defw Disparo_8
 14+  8400 44 84        	defw Disparo_9
 15+  8402 4C 84        	defw Disparo_10
 16+  8404
 17+  8404 00 00        Disparo_1 db 0,0									; Impacto / Dirección.
 18+  8406 00 00        	defw 0											; Puntero de_impresión.
 19+  8408 00 00        	defw 0											; Puntero objeto.
 20+  840A 00 00        	defw 0											; Rutina de impresión.
 21+  840C
 22+  840C 00 00        Disparo_2 db 0,0									; Impacto / Dirección.
 23+  840E 00 00        	defw 0											; Puntero de_impresión.
 24+  8410 00 00        	defw 0											; Puntero objeto.
 25+  8412 00 00        	defw 0											; Rutina de impresión.
 26+  8414
 27+  8414 00 00        Disparo_3 db 0,0									; Impacto / Dirección.
 28+  8416 00 00        	defw 0											; Puntero de_impresión.
 29+  8418 00 00        	defw 0											; Puntero objeto.
 30+  841A 00 00        	defw 0											; Rutina de impresión.
 31+  841C
 32+  841C 00 00        Disparo_4 db 0,0									; Impacto / Dirección.
 33+  841E 00 00        	defw 0											; Puntero de_impresión.
 34+  8420 00 00        	defw 0											; Puntero objeto.
 35+  8422 00 00        	defw 0											; Rutina de impresión.
 36+  8424
 37+  8424 00 00        Disparo_5 db 0,0									; Impacto / Dirección.
 38+  8426 00 00        	defw 0											; Puntero de_impresión.
 39+  8428 00 00        	defw 0											; Puntero objeto.
 40+  842A 00 00        	defw 0											; Rutina de impresión.
 41+  842C
 42+  842C 00 00        Disparo_6 db 0,0									; Impacto / Dirección.
 43+  842E 00 00        	defw 0											; Puntero de_impresión.
 44+  8430 00 00        	defw 0											; Puntero objeto.
 45+  8432 00 00        	defw 0											; Rutina de impresión.
 46+  8434
 47+  8434 00 00        Disparo_7 db 0,0									; Impacto / Dirección.
 48+  8436 00 00        	defw 0											; Puntero de_impresión.
 49+  8438 00 00        	defw 0											; Puntero objeto.
 50+  843A 00 00        	defw 0											; Rutina de impresión.
 51+  843C
 52+  843C 00 00        Disparo_8 db 0,0									; Impacto / Dirección.
 53+  843E 00 00        	defw 0											; Puntero de_impresión.
 54+  8440 00 00        	defw 0											; Puntero objeto.
 55+  8442 00 00        	defw 0											; Rutina de impresión.
 56+  8444
 57+  8444 00 00        Disparo_9 db 0,0									; Impacto / Dirección.
 58+  8446 00 00        	defw 0											; Puntero de_impresión.
 59+  8448 00 00        	defw 0											; Puntero objeto.
 60+  844A 00 00        	defw 0											; Rutina de impresión.
 61+  844C
 62+  844C 00 00        Disparo_10 db 0,0									; Impacto / Dirección.
 63+  844E 00 00        	defw 0											; Puntero de_impresión.
 64+  8450 00 00        	defw 0											; Puntero objeto.
 65+  8452 00 00        	defw 0											; Rutina de impresión.
 66+  8454
 67+  8454              ; -------------------------------------------------------------------------------------
 68+  8454
 69+  8454              Indice_de_entidades									; 58 Bytes por entidad.
 70+  8454
 71+  8454 9A 84        	defw Entidad_1
 72+  8456 D4 84        	defw Entidad_2
 73+  8458 0E 85        	defw Entidad_3
 74+  845A 48 85        	defw Entidad_4
 75+  845C              ;	...
 76+  845C              ;	...
 77+  845C              ;	+ entidades ...
 78+  845C
 79+  845C 00 00        	defw 0
 80+  845E 00 00        	defw 0
 81+  8460
 82+  8460              ; ---------- ---------- ---------- ---------- ----------
 83+  8460
 84+  8460 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 85+  8462 00 00        	defw 0		 									; (Posicion_actual).
 86+  8464 00 00        	defw 0	 										; (Puntero_objeto).
 87+  8466 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 88+  8469
 89+  8469 05           	db %00000101									; (Attr).
 90+  846A
 91+  846A 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 92+  846C 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 93+  846E 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 94+  8470 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 95+  8472
 96+  8472 D0 50        	defw $50d0										; (Posicion_inicio).
 97+  8474 04           	db 4 											; (Cuad_objeto).
 98+  8475
 99+  8475 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
100+  8479
101+  8479 00 00        	db 0,0											; Variables_de_borrado
102+  847B 00 00        	defw 0											;	" " " " " " "
103+  847D 00 00        	defw 0											;	" " " " " " "
104+  847F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
105+  8483
106+  8483 00 00        	db 0,0											; Variables_de_pintado
107+  8485 00 00        	defw 0											;	" " " " " " "
108+  8487 00 00        	defw 0											;	" " " " " " "
109+  8489 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
110+  848D
111+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
112+  848F
113+  848F 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
114+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
115+  8496
116+  8496 00           	db 0 											; (Columnas).
117+  8497 00 00        	defw 0											; (Limite_horizontal).
118+  8499 00           	db 0											; (Limite_vertical).
119+  849A
120+  849A              ; ---------- ---------- ---------- ---------- ----------
121+  849A
122+  849A 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
123+  849C 00 00        	defw 0											; (Posicion_actual).
124+  849E 00 00        	defw 0 											; (Puntero_objeto).
125+  84A0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
126+  84A3
127+  84A3 00           	db %00000000 									; (Attr).
128+  84A4
129+  84A4 00 00        	defw 0											; (Indice_Sprite_der).
130+  84A6 00 00        	defw 0											; (Indice_Sprite_izq).
131+  84A8 00 00        	defw 0											; (Puntero_DESPLZ_der).
132+  84AA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
133+  84AC
134+  84AC 00 00        	defw 0											; (Posicion_inicio).
135+  84AE 00           	db 0											; (Cuad_objeto).
136+  84AF
137+  84AF 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
138+  84B3
139+  84B3 00 00        	db 0,0										    ; Variables_de_borrado
140+  84B5 00 00        	defw 0											;	" " " " " " "
141+  84B7 00 00        	defw 0											;	" " " " " " "
142+  84B9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
143+  84BD
144+  84BD 00 00        	db 0,0											; Variables_de_pintado
145+  84BF 00 00        	defw 0											;	" " " " " " "
146+  84C1 00 00        	defw 0											;	" " " " " " "
147+  84C3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
148+  84C7
149+  84C7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
150+  84C9
151+  84C9 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
152+  84CD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
153+  84D0
154+  84D0 00           	db 0 											; (Columnas).
155+  84D1 00 00        	defw 0											; (Limite_horizontal).
156+  84D3 00           	db 0											; (Limite_vertical).
157+  84D4
158+  84D4              ; ---------- ---------- ---------- ---------- ----------
159+  84D4
160+  84D4 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
161+  84D6 00 00        	defw 0                                          ; (Posicion_actual).
162+  84D8 00 00        	defw 0											; (Puntero_objeto).
163+  84DA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
164+  84DD
165+  84DD 02           	db %00000010									; (Attr).
166+  84DE
167+  84DE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
168+  84E0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
169+  84E2 00 00        	defw 0											; (Puntero_DESPLZ_der).
170+  84E4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
171+  84E6
172+  84E6 7E 47        	defw $477e                                      ; (Posicion_inicio).
173+  84E8 02           	db 2											; (Cuad_objeto).
174+  84E9
175+  84E9 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
176+  84ED
177+  84ED 00 00        	db 0,0											; Variables_de_borrado
178+  84EF 00 00        	defw 0										 	;	" " " " " " "
179+  84F1 00 00        	defw 0											;	" " " " " " "
180+  84F3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
181+  84F7
182+  84F7 00 00        	db 0,0											; Variables_de_pintado
183+  84F9 00 00        	defw 0											;	" " " " " " "
184+  84FB 00 00        	defw 0											;	" " " " " " "
185+  84FD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
186+  8501
187+  8501 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
188+  8503
189+  8503 51 92 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
190+  8507 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
191+  850A
192+  850A 00           	db 0 											; (Columnas).
193+  850B 00 00        	defw 0											; (Limite_horizontal).
194+  850D 00           	db 0											; (Limite_vertical).
195+  850E
196+  850E              ; ---------- ---------- ---------- ---------- ----------
197+  850E
198+  850E 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
199+  8510 00 00        	defw 0                                          ; (Posicion_actual).
200+  8512 00 00        	defw 0											; (Puntero_objeto).
201+  8514 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
202+  8517
203+  8517 04           	db %00000100									; (Attr).
204+  8518
205+  8518 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
206+  851A 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
207+  851C
208+  851C 00 00        	defw 0											; (Puntero_DESPLZ_der).
209+  851E 00 00        	defw 0											; (Puntero_DESPLZ_izq).
210+  8520
211+  8520 A1 47        	defw $47a1                                      ; (Posicion_inicio).
212+  8522 01           	db 1											; (Cuad_objeto).
213+  8523
214+  8523 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
215+  8527
216+  8527 00 00        	db 0,0											; Variables_de_borrado
217+  8529 00 00        	defw 0										 	;	" " " " " " "
218+  852B 00 00        	defw 0											;	" " " " " " "
219+  852D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
220+  8531
221+  8531 00 00        	db 0,0											; Variables_de_pintado
222+  8533 00 00        	defw 0											;	" " " " " " "
223+  8535 00 00        	defw 0											;	" " " " " " "
224+  8537 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
225+  853B
226+  853B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
227+  853D
228+  853D 53 92 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
229+  8541 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
230+  8544
231+  8544 00           	db 0 											; (Columnas).
232+  8545 00 00        	defw 0											; (Limite_horizontal).
233+  8547 00           	db 0											; (Limite_vertical).
234+  8548
235+  8548              ; ---------- ---------- ---------- ---------- ----------
236+  8548
237+  8548 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
238+  854A 00 00        	defw 0                                          ; (Posicion_actual).
239+  854C 00 00        	defw 0 											; (Puntero_objeto).
240+  854E 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
241+  8551
242+  8551 01           	db %00000001									; (Attr).
243+  8552
244+  8552 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
245+  8554 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
246+  8556
247+  8556 00 00        	defw 0											; (Puntero_DESPLZ_der).
248+  8558 00 00        	defw 0											; (Puntero_DESPLZ_izq).
249+  855A
250+  855A BE 47        	defw $47be                                      ; (Posicion_inicio).
251+  855C 00           	db 0											; (Cuad_objeto).
252+  855D
253+  855D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
254+  8561
255+  8561 00 00        	db 0,0											; Variables_de_borrado
256+  8563 00 00        	defw 0										 	;	" " " " " " "
257+  8565 00 00        	defw 0											;	" " " " " " "
258+  8567 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
259+  856B
260+  856B 00 00        	db 0,0											; Variables_de_pintado
261+  856D 00 00        	defw 0											;	" " " " " " "
262+  856F 00 00        	defw 0											;	" " " " " " "
263+  8571 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
264+  8575
265+  8575 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
266+  8577
267+  8577 43 92 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
268+  857B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
269+  857E
270+  857E 00           	db 0 											; (Columnas).
271+  857F 00 00        	defw 0											; (Limite_horizontal).
272+  8581 00           	db 0											; (Limite_vertical).
273+  8582
# file closed: Entidades_y_disparos.asm
 21   8582
 22   8582              ; ******************************************************************************************************************************************************************************************
 23   8582              ; Constantes.
 24   8582              ; ******************************************************************************************************************************************************************************************
 25   8582              ;
 26   8582              ; 8/11/22
 27   8582              ;
 28   8582              ; Constantes generales.
 29   8582              ;
 30   8582
 31   8582              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8582              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8582              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8582              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8582              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   8582
 37   8582              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   8582              ;                               				        ; De momento situamos este almacén en $7000.
 39   8582
 40   8582
 41   8582              ; ******************************************************************************************************************************************************************************************
 42   8582              ; Variables.
 43   8582              ; ******************************************************************************************************************************************************************************************
 44   8582              ;
 45   8582              ; 10/11/22
 46   8582              ;
 47   8582              ; Variables de DRAW. (Motor principal).
 48   8582              ;
 49   8582              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   8582
 51   8582 02           Filas db 2												; Filas. [DRAW]
 52   8583 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8584 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8586 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8588 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8589 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   858A
 58   858A              ; ---------- ---------- ---------- ---------;      ;---------
 59   858A
 60   858A 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   858B              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   858B              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   858B 04           Attr db %00000100										; Atributos de la entidad:
 64   858C
 65   858C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   858C              ;
 67   858C              ;	COLORES: 0 ..... NEGRO
 68   858C              ;    		 1 ..... AZUL
 69   858C              ; 			 2 ..... ROJO
 70   858C              ;			 3 ..... MAGENTA
 71   858C              ; 			 4 ..... VERDE
 72   858C              ; 			 5 ..... CIAN
 73   858C              ;			 6 ..... AMARILLO
 74   858C              ; 			 7 ..... BLANCO
 75   858C
 76   858C A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   858E 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   8590 00 00        Puntero_DESPLZ_der defw 0
 79   8592 00 00        Puntero_DESPLZ_izq defw 0
 80   8594
 81   8594 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8596 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8597
 84   8597              ; Variables de objeto. (Características).
 85   8597
 86   8597 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8598 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8599 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   859A 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   859B
 91   859B 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   859D 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   859F 00 00        	defw 0
 94   85A1 00 00 00 00  	db 0,0,0,0
 95   85A5
 96   85A5 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85A7 00 00        	defw 0
 98   85A9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85AB 00 00 00 00  	db 0,0,0,0
100   85AF
101   85AF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85AF
103   85AF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85B0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85B0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85B0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85B0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85B0              ;
109   85B0              ; 														DESCRIPCIÖN:
110   85B0              ;
111   85B0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85B0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85B0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85B0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85B0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85B0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85B0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85B0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85B0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85B0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85B0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85B0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85B0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85B0              ;
125   85B0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85B0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85B0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85B0
129   85B0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85B1
131   85B1              ; Movimiento.
132   85B1
133   85B1 3F 92        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85B3 00 00        Puntero_mov defw 0
135   85B5 00           Contador_db_mov db 0
136   85B6 00           Incrementa_puntero db 0
137   85B7 00           Repetimos_db db 0
138   85B8
139   85B8              ; Variables de funcionamiento. [DRAW].
140   85B8
141   85B8 00           Columnas db 0
142   85B9 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85BB              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85BB 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85BC
146   85BC              ; 59 Bytes por entidad.
147   85BC              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85BC              ;					         		---------;      ;---------
149   85BC
150   85BC
151   85BC              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85BC
153   85BC              ; Gestión de ENTIDADES.
154   85BC
155   85BC 00 00        Puntero_store_entidades defw 0
156   85BE 00 00        Puntero_restore_entidades defw 0
157   85C0 00 00        Indice_restore defw 0
158   85C2 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   85C3 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   85C4              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   85C4              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   85C4              ;														; _ (Numero_de_malotes)="0".
163   85C4 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   85C6              ;														; _variable para almacenar lo posición del puntero_
165   85C6              ; 														; _de pila, SP.
166   85C6 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   85C8              ;														; La utiliza la rutina [Extrae_foto_registros].
168   85C8 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   85CA              ;														; _el snapshot de los registros de la siguiente entidad.
170   85CA              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   85CA
172   85CA              ; Gestión de Disparos.
173   85CA
174   85CA F0 83        Stack_guns defw Indice_de_disparos						; Este puntero se irá desplazando por el índice de disparos_
175   85CC              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
176   85CC              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
177   85CC
178   85CC              ; Gestión de FRAMES.
179   85CC
180   85CC 00           Switch db 0
181   85CD
182   85CD              ; Variables de Raster y localización en pantalla.
183   85CD
184   85CD 00 FF        Temp_Raster defw $ff00
185   85CF
186   85CF              ; Rutina principal *************************************************************************************************************************************************************************
187   85CF              ;
188   85CF              ;	14/11/22
189   85CF
190   85CF 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
191   85D2
192   85D2 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
193   85D4 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
194   85D6 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
195   85D8 F3           	DI
196   85D9
197   85D9 3E 01        	ld a,1
198   85DB D3 FE        	out ($fe),a
199   85DD
200   85DD 3E 07        	ld a,%00000111
201   85DF CD 78 8E     	call Cls
202   85E2
203   85E2              ;	call Pinta_FILAS
204   85E2
205   85E2 CD E8 87     	call Pulsa_ENTER
206   85E5
207   85E5 21 C2 85     	ld hl,Numero_de_entidades
208   85E8 46           	ld b,(hl)
209   85E9 04           	inc b
210   85EA 05           	dec b
211   85EB 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
212   85ED
213   85ED              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
214   85ED              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
215   85ED              ;	Pintamos el resto de entidades:
216   85ED
217   85ED CD 08 87     	call Inicia_punteros_de_entidades
218   85F0
219   85F0              ;	INICIA ENTIDADES!!!!!
220   85F0
221   85F0 C5           1 push bc  												; Guardo el contador de entidades.
222   85F1 CD 3B 87      	call Inicia_Puntero_objeto
223   85F4 CD 2A 89     	call Draw
224   85F7 CD A0 7F     	call Guarda_foto_registros
225   85FA CD 83 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
226   85FD C1           	pop bc
227   85FE 10 F0        	djnz 1B  											; Decremento el contador de entidades.
228   8600
229   8600              ; 	INICIA AMADEUS!!!!!
230   8600
231   8600 CD C4 87     3 call Restore_Amadeus
232   8603 CD 3B 87     	call Inicia_Puntero_objeto
233   8606 CD 2A 89     	call Draw
234   8609 CD A0 7F     	call Guarda_foto_registros
235   860C CD D6 87     	call Store_Amadeus
236   860F
237   860F              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
238   860F
239   860F CD 08 87     	call Inicia_punteros_de_entidades
240   8612 CD B2 87     	call Restore_Primera_entidad
241   8615
242   8615 3A C2 85     	ld a,(Numero_de_entidades)
243   8618 3C           	inc a
244   8619 32 C3 85     	ld (Numero_de_malotes),a
245   861C
246   861C FB           2 ei
247   861D 18 FD        	jr 2B
248   861F
249   861F              ; -----------------------------------------------------------------------------------
250   861F
251   861F              Frame
252   861F
253   861F              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
254   861F              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
255   861F
256   861F 3E 02            ld a,2
257   8621 D3 FE            out ($fe),a
258   8623 CD 2E 8C     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
259   8626 3E 01            ld a,1
260   8628 D3 FE            out ($fe),a
261   862A
262   862A              ; ----------------------------------------------------------------------
263   862A
264   862A 21 00 70     	ld hl,Album_de_fotos
265   862D 22 C8 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
266   8630              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
267   8630 3A C2 85         ld a,(Numero_de_entidades)
268   8633 47               ld b,a
269   8634 A7           	and a
270   8635 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
271   8637
272   8637 C5           2 push bc
273   8638 CD 81 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
274   863B 3A AF 85     	ld a,(Ctrl_0)
275   863E CB 67        	bit 4,a
276   8640 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
277   8642
278   8642              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
279   8642              ; Las entidades sólo generan disparo cuando se mueven.
280   8642              ; 16/02/23.
281   8642              ; [[[
282   8642 CD 1F 88     	call Detecta_disparo_entidad
283   8645              ; ]]]
284   8645
285   8645 CD CF 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
286   8648
287   8648 21 AF 85     1 ld hl,Ctrl_0
288   864B CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
289   864D AF           	xor a
290   864E 32 B0 85     	ld (Obj_dibujado),a
291   8651 CD 83 87     	call Store_Restore_entidades
292   8654 C1           	pop bc
293   8655 10 E0        	djnz 2B
294   8657
295   8657 CD C4 87     4 call Restore_Amadeus
296   865A CD A0 86     	call Mov_Amadeus
297   865D 3A AF 85     	ld a,(Ctrl_0)
298   8660 CB 67        	bit 4,a
299   8662 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
300   8664 CD CF 86     	call Guarda_foto_entidad_a_pintar
301   8667
302   8667 21 AF 85     3 ld hl,Ctrl_0
303   866A CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
304   866C AF           	xor a
305   866D 32 B0 85     	ld (Obj_dibujado),a
306   8670 CD D6 87     	call Store_Amadeus
307   8673
308   8673              ; -----
309   8673
310   8673 CD 08 87     	call Inicia_punteros_de_entidades
311   8676 CD B2 87     	call Restore_Primera_entidad
312   8679 CD 1E 87     	call Calcula_numero_de_malotes
313   867C
314   867C 3E 04        	ld a,4
315   867E D3 FE        	out ($fe),a
316   8680 C9           	ret
317   8681
318   8681              ; --------------------------------------------------------------------------------------------------------------
319   8681              ;
320   8681              ;	29/1/23
321   8681
322   8681              Mov_obj
323   8681
324   8681              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
325   8681
326   8681 AF           	xor a
327   8682 32 B0 85     	ld (Obj_dibujado),a
328   8685 CD D9 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
329   8688              ;														; Obj_dibujado="0".
330   8688              ; Movemos Entidades malignas.
331   8688
332   8688 CD 55 92     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
333   868B 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
334   868E CB 67        	bit 4,a
335   8690 C8           	ret z
336   8691
337   8691              ; ---------
338   8691
339   8691 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
340   8693 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
341   8696 CD D9 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
342   8699 CD F0 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
343   869C CD BF 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
344   869F C9           	ret													; _de la misma.
345   86A0
346   86A0              ; --------------------------------------------------------------------------------------------------------------
347   86A0              ;
348   86A0              ;	29/1/23
349   86A0
350   86A0              Mov_Amadeus
351   86A0
352   86A0 AF           	xor a
353   86A1 32 B0 85     	ld (Obj_dibujado),a
354   86A4 CD D9 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
355   86A7              ;														; Obj_dibujado="0".
356   86A7              ; Movemos Amadeus.
357   86A7
358   86A7 CD FC 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
359   86AA 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
360   86AD CB 67        	bit 4,a
361   86AF C8           	ret z
362   86B0
363   86B0              ; ---------
364   86B0
365   86B0 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
366   86B2 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
367   86B5 CD D9 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
368   86B8 CD F0 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
369   86BB CD BF 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
370   86BE C9           	ret													; _de la nave.
371   86BF
372   86BF              ; --------------------------------------------------------------------------------------------------------------
373   86BF              ;
374   86BF              ;	31/01/23
375   86BF              ;
376   86BF              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
377   86BF
378   86BF              Guarda_foto_entidad_a_borrar
379   86BF
380   86BF CD 04 8C     	call Prepara_draw
381   86C2 CD 3E 8B     	call calcula_CColumnass
382   86C5 CD 75 8B     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
383   86C8 CD CA 8B     	call Define_rutina_de_impresion
384   86CB CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
385   86CE C9           	ret
386   86CF
387   86CF              ; --------------------------------------------------------------------------------------------------------------
388   86CF              ;
389   86CF              ;	31/01/23
390   86CF              ;
391   86CF              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
392   86CF              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
393   86CF
394   86CF              Guarda_foto_entidad_a_pintar
395   86CF
396   86CF CD FC 86     	call Repone_pintar
397   86D2 CD 2A 89     	call Draw
398   86D5 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
399   86D8 C9           	ret
400   86D9
401   86D9              ; --------------------------------------------------------------------------------------------------------------
402   86D9              ;
403   86D9              ;
404   86D9
405   86D9 21 82 85     Prepara_var_pintado_borrado	ld hl,Filas
406   86DC 3A B0 85     	ld a,(Obj_dibujado)
407   86DF A7           	and a
408   86E0 28 05        	jr z,1F
409   86E2 11 A5 85     	ld de,Variables_de_pintado
410   86E5 18 03        	jr 2F
411   86E7 11 9B 85     1 ld de,Variables_de_borrado
412   86EA 01 08 00     2 ld bc,8
413   86ED ED B0        	ldir
414   86EF C9           	ret
415   86F0
416   86F0              ; --------------------------------------------------------------------------------------------------------------
417   86F0
418   86F0 21 9B 85     Repone_borrar ld hl,Variables_de_borrado
419   86F3 11 82 85     	ld de,Filas
420   86F6 01 08 00     	ld bc,8
421   86F9 ED B0        	ldir
422   86FB C9           	ret
423   86FC
424   86FC 21 A5 85     Repone_pintar ld hl,Variables_de_pintado
425   86FF 11 82 85     	ld de,Filas
426   8702 01 08 00     	ld bc,8
427   8705 ED B0        	ldir
428   8707 C9           	ret
429   8708
430   8708              ; *************************************************************************************************************************************************************
431   8708              ;
432   8708              ; 8/1/23
433   8708              ;
434   8708              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
435   8708              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
436   8708              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
437   8708
438   8708              ; Destruye HL y DE !!!!!
439   8708
440   8708              Inicia_punteros_de_entidades
441   8708
442   8708 21 54 84     	ld hl,Indice_de_entidades
443   870B CD 35 87         call Extrae_address
444   870E 22 BC 85         ld (Puntero_store_entidades),hl
445   8711 21 56 84     	ld hl,Indice_de_entidades+2
446   8714 22 C0 85     	ld (Indice_restore),hl
447   8717 CD 35 87     	call Extrae_address
448   871A 22 BE 85     	ld (Puntero_restore_entidades),hl
449   871D C9               ret
450   871E
451   871E              ; -------------------------------------------------------------------------------------------------------------
452   871E              ;
453   871E              ; 30/1/23
454   871E              ;
455   871E
456   871E 2A C8 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
457   8721 7D           	ld a,l
458   8722 A7           	and a
459   8723 28 0C        	jr z,3F
460   8725 AF           	xor a
461   8726 67           	ld h,a
462   8727 7D           	ld a,l
463   8728 D6 06        1 sub 6
464   872A 28 03        	jr z,2F
465   872C 24           	inc h
466   872D 18 F9        	jr 1B
467   872F 24           2 inc h
468   8730 7C           	ld a,h
469   8731 32 C3 85     3 ld (Numero_de_malotes),a
470   8734 C9           	ret
471   8735
472   8735              ; *************************************************************************************************************************************************************
473   8735              ;
474   8735              ; 20/10/22
475   8735              ;
476   8735              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
477   8735              ;
478   8735              ; Destruye el puntero y DE !!!!!
479   8735
480   8735 5E           Extrae_address ld e,(hl)
481   8736 23           	inc hl
482   8737 56           	ld d,(hl)
483   8738 2B           	dec hl
484   8739 EB           	ex de,hl
485   873A C9           	ret
486   873B
487   873B              ; *************************************************************************************************************************************************************
488   873B              ;
489   873B              ;	7/2/23
490   873B              ;
491   873B              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
492   873B              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
493   873B              ;
494   873B              ;   Destruye HL y BC !!!!!,
495   873B              ;
496   873B              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
497   873B              ;					"0" ..... Izquierda.
498   873B
499   873B              Inicia_Puntero_objeto
500   873B
501   873B 3A 96 85     	ld a,(Cuad_objeto)
502   873E E6 01        	and 1
503   8740 F5           	push af
504   8741 CC 5F 87     	call z,Inicia_puntero_objeto_izq
505   8744 F1           	pop af
506   8745 28 2B        	jr z,1F
507   8747 CD 4C 87     	call Inicia_puntero_objeto_der
508   874A 18 26        	jr 1F
509   874C
510   874C              ; Arrancamos desde la parte izquierda de la pantalla.
511   874C              ; Iniciamos (Indice_Sprite_der).
512   874C
513   874C 2A 8C 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
514   874F 22 90 85     	ld (Puntero_DESPLZ_der),hl
515   8752 CD 35 87     	call Extrae_address
516   8755 22 86 85     	ld (Puntero_objeto),hl
517   8758
518   8758 2A 8E 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
519   875B              ;	call Extrae_address
520   875B 22 92 85     	ld (Puntero_DESPLZ_izq),hl
521   875E C9           	ret
522   875F
523   875F              ; Arrancamos desde la parte derecha de la pantalla.
524   875F              ; Iniciamos (Indice_Sprite_izq).
525   875F
526   875F 2A 8E 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
527   8762 22 92 85     	ld (Puntero_DESPLZ_izq),hl
528   8765 CD 35 87     	call Extrae_address
529   8768 22 86 85     	ld (Puntero_objeto),hl
530   876B
531   876B 2A 8C 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
532   876E              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
533   876E 22 90 85     	ld (Puntero_DESPLZ_der),hl
534   8771 C9           	ret
535   8772
536   8772              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
537   8772
538   8772 21 40 83     1 ld hl,Amadeus
539   8775 ED 4B 86 85  	ld bc,(Puntero_objeto)
540   8779 B7 ED 42     	sub hl,bc
541   877C C0           	ret nz
542   877D 21 AF 85     	ld hl,Ctrl_0
543   8780 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
544   8782 C9           	ret 												; _de nuestra nave en los extremos.
545   8783
546   8783              ; *************************************************************************************************************************************************************
547   8783              ;
548   8783              ;	8/1/23
549   8783              ;
550   8783              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
551   8783              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
552   8783
553   8783              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
554   8783              ;	_de la 2ª y 3ª entidad respectivamente.
555   8783
556   8783
557   8783
558   8783              Store_Restore_entidades
559   8783
560   8783 E5           	push hl
561   8784 D5           	push de
562   8785 C5            	push bc
563   8786
564   8786              ;	STORE !!!!!
565   8786              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
566   8786
567   8786 21 82 85     	ld hl,Filas
568   8789 ED 5B BC 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
569   878D 01 3A 00     	ld bc,58
570   8790 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
571   8792
572   8792              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
573   8792
574   8792 2A BE 85     	ld hl,(Puntero_restore_entidades)
575   8795 22 BC 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
576   8798 11 82 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
577   879B 01 3A 00     	ld bc,58
578   879E ED B0        	ldir
579   87A0
580   87A0              ;	Incrementa RESTORE !!!!!
581   87A0
582   87A0 2A C0 85         ld hl,(Indice_restore)
583   87A3 23           	inc hl
584   87A4 23           	inc hl
585   87A5 22 C0 85     	ld (Indice_restore),hl
586   87A8 CD 35 87         call Extrae_address
587   87AB 22 BE 85         ld (Puntero_restore_entidades),hl
588   87AE C1           	pop bc
589   87AF D1           	pop de
590   87B0 E1           	pop hl
591   87B1 C9           	ret
592   87B2
593   87B2              ; **************************************************************************************************
594   87B2              ;
595   87B2              ;	29/10/22
596   87B2              ;
597   87B2              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
598   87B2
599   87B2 E5           Restore_Primera_entidad push hl
600   87B3 D5           	push de
601   87B4 C5            	push bc
602   87B5 2A BC 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
603   87B8 11 82 85     	ld de,Filas
604   87BB 01 3A 00     	ld bc,58
605   87BE ED B0        	ldir
606   87C0 C1           	pop bc
607   87C1 D1           	pop de
608   87C2 E1           	pop hl
609   87C3 C9           	ret
610   87C4
611   87C4              ; **************************************************************************************************
612   87C4              ;
613   87C4              ;	25/01/23
614   87C4              ;
615   87C4              ;	Restore_Amadeus
616   87C4              ;
617   87C4              ;	Cargamos en DRAW los parámetros de Amadeus.
618   87C4              ;
619   87C4
620   87C4 E5           Restore_Amadeus	push hl
621   87C5 D5           	push de
622   87C6 C5            	push bc
623   87C7 21 60 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
624   87CA 11 82 85     	ld de,Filas
625   87CD 01 3A 00     	ld bc,58
626   87D0 ED B0        	ldir
627   87D2 C1           	pop bc
628   87D3 D1           	pop de
629   87D4 E1           	pop hl
630   87D5 C9           	ret
631   87D6
632   87D6              ; *************************************************************************************************************************************************************
633   87D6              ;
634   87D6              ;	29/01/23
635   87D6              ;
636   87D6              ;	Store_Amadeus
637   87D6              ;
638   87D6              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
639   87D6              ;
640   87D6
641   87D6 E5           Store_Amadeus push hl
642   87D7 D5           	push de
643   87D8 C5            	push bc
644   87D9 21 82 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
645   87DC 11 60 84     	ld de,Amadeus_db
646   87DF 01 3A 00     	ld bc,58
647   87E2 ED B0        	ldir
648   87E4 C1           	pop bc
649   87E5 D1           	pop de
650   87E6 E1           	pop hl
651   87E7 C9           	ret
652   87E8
653   87E8              ; **************************************************************************************************
654   87E8
655   87E8              ; Teclado.
656   87E8
657   87E8 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
658   87EA DB FE        	in a,($fe)
659   87EC E6 01        	and $01
660   87EE 28 02        	jr z,1f
661   87F0 18 F6        	jr Pulsa_ENTER
662   87F2 C9           1 ret
663   87F3
664   87F3              ; **************************************************************************************************
665   87F3              ;
666   87F3              ; Temporización.
667   87F3
668   87F3              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
669   87F3              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
670   87F3              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
671   87F3              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
672   87F3
673   87F3              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
674   87F3              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
675   87F3              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
676   87F3
677   87F3              ; A partir de $4f61 no hace falta DELAY.
678   87F3
679   87F3              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
680   87F3
681   87F3 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
682   87F6 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
683   87F7 78           	LD A,B
684   87F8 A7           	AND A
685   87F9 20 FB        	JR NZ,wait
686   87FB C9           	RET
687   87FC
688   87FC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
689   87FC              ;
690   87FC              ;	16/02/23
691   87FC
692   87FC              Movimiento_Amadeus
693   87FC
694   87FC 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
695   87FE DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
696   8800 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
697   8802 CC 06 90         call z,Mov_left											;			"			"			"			"			"			"			"			"
698   8805 3E F7        	ld a,$f7
699   8807 DB FE        	in a,($fe)
700   8809 E6 01        	and $01
701   880B C8           	ret z
702   880C
703   880C 3E F7        	ld a,$f7
704   880E DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
705   8810 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
706   8812 CC E8 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
707   8815
708   8815              ; Disparo.
709   8815
710   8815 3E F7        	ld a,$f7												; "5" para disparar.
711   8817 DB FE        	in a,($fe)
712   8819 E6 10        	and $10
713   881B CC 53 88     	call z,Genera_disparo
714   881E C9               ret
715   881F
716   881F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
717   881F              ;
718   881F              ;	Rutina provisional.
719   881F
720   881F 3E 7F        Detecta_disparo_entidad	ld a,$7f
721   8821 DB FE        	in a,($fe)
722   8823 E6 01        	and 1
723   8825 C0           	ret nz
724   8826 CD 53 88     	call Genera_disparo
725   8829 C9           	ret
726   882A
727   882A              ; Pinta indicadores de FILAS. ------------------------------------------------------
728   882A
729   882A 21 10 40     Pinta_FILAS ld hl,$4010
730   882D              ;	ld b,9
731   882D              ;2 push hl
732   882D              ;	push bc
733   882D 06 BF        	ld b,$bf
734   882F 36 80        1 ld (hl),%10000000
735   8831 CD 10 8C     	call NextScan
736   8834 10 F9        	djnz 1B
737   8836              ;	pop bc
738   8836              ;	pop hl
739   8836              ;	inc l
740   8836              ;	djnz 2B
741   8836 06 03        	ld b,3
742   8838 21 00 47         ld hl,$4700
743   883B CD 41 88     3 call Bucle_1
744   883E 10 FB            djnz 3B
745   8840 C9               ret
746   8841
747   8841 C5           Bucle_1 push bc
748   8842 E5                   push hl
749   8843 D1                   pop de
750   8844 13                   inc de
751   8845 01 FF 00             ld bc,255
752   8848 36 FF                ld (hl),255
753   884A ED B0                ldir
754   884C 23                   inc hl
755   884D 3E 07                ld a,7
756   884F 84                   add a,h
757   8850 67                   ld h,a
758   8851 C1                   pop bc
759   8852 C9                   ret
760   8853
761   8853              ; ---------------------------------------------------------------
762   8853
763   8853              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  8853              ; ******************************************************************************************************************************************************************************************
  2+  8853              ;
  3+  8853              ;   19/02/23
  4+  8853              ;
  5+  8853              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  8853              ;   En el caso de generar disparo la rutina proporciona 5 variables:
  7+  8853              ;
  8+  8853              ;       - 1 .db ..... Impacto. "1" si se produce impacto. (Cuando el disparo se genera en los_
  9+  8853              ;           _ cuadrantes 1º y 2º su valor será "0" por defecto ya que Amadeus nunca abandona_
 10+  8853              ;           _ los cuadrantes 3º y 4º).
 11+  8853              ;
 12+  8853              ;       - 2 .db ..... Dirección. "1" si el proyectil lo dispara Amadeus, (hacia arriba). "0" _
 13+  8853              ;           _ si es lanzado por las entidades, (hacia abajo).
 14+  8853              ;
 15+  8853              ;       - 3 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 16+  8853              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 17+  8853              ;
 18+  8853              ;       - 4 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 19+  8853              ;           _ la bala.
 20+  8853              ;
 21+  8853              ;       - 5 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 22+  8853              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 23+  8853              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 24+  8853              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 25+  8853              ;           _ en el momento de generarse la bala)).
 26+  8853
 27+  8853              Genera_disparo
 28+  8853
 29+  8853              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 30+  8853              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 31+  8853              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 32+  8853              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 33+  8853              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 34+  8853              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga dichos valores.
 35+  8853              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 36+  8853
 37+  8853 3A B8 85         ld a,(Columnas)
 38+  8856 47               ld b,a
 39+  8857 3A 83 85         ld a,(Columns)
 40+  885A B8               cp b
 41+  885B C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 42+  885C
 43+  885C 21 00 80         ld hl,Indice_disparo
 44+  885F 3A 8A 85         ld a,(CTRL_DESPLZ)
 45+  8862 4F               ld c,a
 46+  8863 A7               and a
 47+  8864 28 0F            jr z,1F
 48+  8866 E6 01            and 1
 49+  8868 C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 50+  8869 06 F9            ld b,$f9
 51+  886B 79               ld a,c
 52+  886C
 53+  886C 23           2 inc hl
 54+  886D 23               inc hl
 55+  886E B8               cp b
 56+  886F 28 04            jr z,1F
 57+  8871 04               inc b
 58+  8872 04               inc b
 59+  8873 18 F7            jr 2B
 60+  8875
 61+  8875 CD 35 87     1 call Extrae_address
 62+  8878 E5               push hl
 63+  8879 FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 64+  887B DD 21 7B 8C      ld ix,Pinta_Amadeus_2x2             ; Rutinas_de_impresion en IX.
 65+  887F
 66+  887F              ; --------------- ---------------- ----------------- -------------
 67+  887F              ;
 68+  887F              ;   Genera disparo.
 69+  887F              ;
 70+  887F              ;   Generamos variables de disparo. Varían en función del cuadrante en el que nos encontramos.
 71+  887F
 72+  887F 3A 96 85         ld a,(Cuad_objeto)
 73+  8882 FE 02            cp 2
 74+  8884 38 59            jr c,3F
 75+  8886 28 57            jr z,3F
 76+  8888
 77+  8888              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 78+  8888
 79+  8888 E6 01            and 1
 80+  888A 28 27            jr z,4F
 81+  888C
 82+  888C              ; Estamos en el 3er cuadrante de pantalla.
 83+  888C              ; 3er CUAD. ----- ----- ----- ----- -----
 84+  888C              ;
 85+  888C              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 86+  888C              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 87+  888C              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 88+  888C
 89+  888C 2A 84 85     	ld hl,(Posicion_actual)
 90+  888F
 91+  888F              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
 92+  888F
 93+  888F 3A AF 85         ld a,(Ctrl_0)
 94+  8892 CB 77            bit 6,a
 95+  8894 28 0B            jr z,8F
 96+  8896
 97+  8896              ; Dispara Amadeus.
 98+  8896
 99+  8896 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
100+  8898 CD 1F 8C         call PreviousScan
101+  889B CD 1F 8C         call PreviousScan
102+  889E 2B               dec hl                                          ; Puntero de impresión en HL.
103+  889F 18 0A            jr 10F
104+  88A1
105+  88A1              ; Dispara Entidad.
106+  88A1
107+  88A1 0E 00        8 ld c,0                                            ; Dirección "0", hacia abajo.
108+  88A3 06 10            ld b,16
109+  88A5 CD 10 8C     9 call NextScan
110+  88A8 10 FB            djnz 9B
111+  88AA
112+  88AA              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
113+  88AA
114+  88AA 2B               dec hl                                          ; Puntero de impresión en HL.
115+  88AB CD 05 89     10 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
116+  88AE              ;                                                   ; _al generar el disparo.
117+  88AE
118+  88AE              ; LLegados a este punto tendremos:
119+  88AE              ;
120+  88AE              ;       Puntero_objeto_disparo en IY.
121+  88AE              ;       Rutinas_de_impresion en IX.
122+  88AE              ;       Puntero_de_impresion en HL.
123+  88AE              ;       Impacto/Dirección en BC.
124+  88AE
125+  88AE CD 04 89         call Almacena_disparo
126+  88B1 18 50            jr 6F                                           ; RET.
127+  88B3
128+  88B3
129+  88B3              ; Estamos en el 4º cuadrante de pantalla.
130+  88B3              ; 4º CUAD. ----- ----- ----- ----- -----
131+  88B3              ;
132+  88B3              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
133+  88B3              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
134+  88B3              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
135+  88B3
136+  88B3 2A 84 85     4 ld hl,(Posicion_actual)
137+  88B6
138+  88B6              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
139+  88B6
140+  88B6 3A AF 85         ld a,(Ctrl_0)
141+  88B9 CB 77            bit 6,a
142+  88BB 28 0A            jr z,11F
143+  88BD
144+  88BD              ; Dispara Amadeus.
145+  88BD
146+  88BD 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
147+  88BF CD 1F 8C         call PreviousScan
148+  88C2 CD 1F 8C         call PreviousScan
149+  88C5 18 09            jr 14F
150+  88C7
151+  88C7              ; Dispara Entidad.
152+  88C7
153+  88C7 0E 00        11 ld c,0                                            ; Dirección "0", hacia abajo.
154+  88C9 06 10            ld b,16
155+  88CB CD 10 8C     12 call NextScan
156+  88CE 10 FB            djnz 12B
157+  88D0
158+  88D0              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
159+  88D0
160+  88D0 3A 8A 85     14 ld a,(CTRL_DESPLZ)
161+  88D3 A7               and a
162+  88D4 28 01            jr z,13F
163+  88D6 2B               dec hl                                          ; Puntero de impresión en HL.
164+  88D7 CD 05 89     13 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
165+  88DA              ;                                                   ; _al generar el disparo.
166+  88DA
167+  88DA              ; LLegados a este punto tendremos:
168+  88DA              ;
169+  88DA              ;       Puntero_objeto_disparo en IY.
170+  88DA              ;       Rutinas_de_impresion en IX.
171+  88DA              ;       Puntero_de_impresion en HL.
172+  88DA              ;       Impacto/Dirección en BC.
173+  88DA
174+  88DA CD 04 89         call Almacena_disparo
175+  88DD 18 24            jr 6F                                           ; RET.
176+  88DF
177+  88DF              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
178+  88DF
179+  88DF 28 0F        3 jr z,5F
180+  88E1
181+  88E1              ; 1er CUAD. ----- ----- ----- ----- -----
182+  88E1              ;
183+  88E1              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
184+  88E1              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
185+  88E1              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
186+  88E1              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
187+  88E1
188+  88E1 2A 84 85     	ld hl,(Posicion_actual)
189+  88E4 CD 10 8C     	call NextScan
190+  88E7
191+  88E7              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
192+  88E7
193+  88E7 2B               dec hl                                          ; Puntero de impresión en HL.
194+  88E8 01 00 00         ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
195+  88EB
196+  88EB              ; LLegados a este punto tendremos:
197+  88EB              ;
198+  88EB              ;       Puntero_objeto_disparo en IY.
199+  88EB              ;       Rutinas_de_impresion en IX.
200+  88EB              ;       Puntero_de_impresion en HL.
201+  88EB              ;       Impacto/Dirección en BC.
202+  88EB
203+  88EB CD 04 89         call Almacena_disparo
204+  88EE 18 13            jr 6F                                           ; RET.
205+  88F0
206+  88F0              ; Estamos en el 2º cuadrante de pantalla.
207+  88F0              ; 2º CUAD. ----- ----- ----- ----- -----
208+  88F0              ;
209+  88F0              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
210+  88F0              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
211+  88F0              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
212+  88F0              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
213+  88F0
214+  88F0 2A 84 85     5 ld hl,(Posicion_actual)
215+  88F3 CD 10 8C     	call NextScan
216+  88F6
217+  88F6              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
218+  88F6
219+  88F6 3A 8A 85         ld a,(CTRL_DESPLZ)
220+  88F9 A7               and a
221+  88FA 28 01            jr z,7F
222+  88FC 2B               dec hl
223+  88FD 01 00 00     7 ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
224+  8900
225+  8900              ; LLegados a este punto tendremos:
226+  8900              ;
227+  8900              ;       Puntero_objeto_disparo en IY.
228+  8900              ;       Rutinas_de_impresion en IX.
229+  8900              ;       Puntero_de_impresion en HL.
230+  8900              ;       Impacto/Dirección en BC.
231+  8900
232+  8900 CD 04 89         call Almacena_disparo
233+  8903 C9           6 ret
234+  8904
235+  8904              ; ----------------------------------------------------------------
236+  8904
237+  8904              Almacena_disparo
238+  8904
239+  8904 C9               ret
240+  8905
241+  8905              ; ----------------------------------------------------------------
242+  8905              ;
243+  8905              ;   20/02/23
244+  8905
245+  8905 E5           Comprueba_Colision push hl
246+  8906 1E 00            ld e,0                                         ; E,(Impacto)="0".
247+  8908 CD 1C 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
248+  890B
249+  890B 1C               inc e
250+  890C 1D               dec e
251+  890D 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
252+  890F
253+  890F              ; Hay impacto.
254+  890F
255+  890F 43           2 ld b,e
256+  8910 E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
257+  8911 C9           3 ret
258+  8912
259+  8912 E1           1 pop hl
260+  8913 E5               push hl
261+  8914 CD 10 8C         call NextScan
262+  8917 CD 1C 89         call Bucle_2
263+  891A 18 F3            jr 2B
264+  891C
265+  891C              ; ---------- ----------
266+  891C
267+  891C 06 02        Bucle_2 ld b,2
268+  891E 7E           2 ld a,(hl)
269+  891F A7               and a
270+  8920 20 04            jr nz,1F
271+  8922 23               inc hl
272+  8923 10 F9            djnz 2B
273+  8925 C9           3 ret
274+  8926 1E 01        1 ld e,1
275+  8928 18 FB            jr 3B
276+  892A
277+  892A              ; -------------------------------------------------------------------------------------------------------------
278+  892A
279+  892A
280+  892A
281+  892A
282+  892A
# file closed: Disparo.asm
764   892A              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  892A              ; ******************************************************************************************************************************************************************************************
  2+  892A              ;
  3+  892A              ; 01/23
  4+  892A              ;
  5+  892A              ; DRAW. ************************************************************************************************************************************************************************************
  6+  892A
  7+  892A CD 04 8C     Draw call Prepara_draw
  8+  892D 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  892E A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  892F 28 05        	jr z,2F
 11+  8931
 12+  8931 3A 96 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  8934 18 0C        	jr 1F
 14+  8936 2A 94 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8939 22 84 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  893C CD CB 8A     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  893F              ;													; _la esquina superior izquierda de la pantalla.
 18+  893F CD D7 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  8942 3A AF 85     1 ld a,(Ctrl_0)
 20+  8945 CB 6F        	bit 5,a
 21+  8947 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8949
 23+  8949 CD 61 89     	call Comprueba_limite_horizontal
 24+  894C CD F1 89     	call Comprueba_limite_vertical
 25+  894F
 26+  894F              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  894F
 28+  894F CD 3E 8B     3 call calcula_CColumnass
 29+  8952 CD 75 8B     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8955 CD CA 8B     	call Define_rutina_de_impresion
 31+  8958
 32+  8958 3A AF 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  895B CB AF        	res 5,a											; _a ser de utilidad.
 34+  895D 32 AF 85     	ld (Ctrl_0),a
 35+  8960
 36+  8960 C9           	ret
 37+  8961
 38+  8961              ; *******************************************************************************************************************************************************************************************
 39+  8961              ;	21/01/23
 40+  8961              ;
 41+  8961              ; 	Comprueba_limite_horizontal.
 42+  8961              ;
 43+  8961              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8961              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8961              ;
 46+  8961              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8961              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8961              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8961              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8961
 51+  8961
 52+  8961
 53+  8961 3A AF 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8964 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8966 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8968 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  896A 32 AF 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  896D 18 09            jr 6F
 59+  896F CB 5F        1 bit 3,a
 60+  8971 28 0A            jr z,2F
 61+  8973 E6 F7            and $f7
 62+  8975 32 AF 85         ld (Ctrl_0),a
 63+  8978 CD CB 8A     6 call Inicializacion
 64+  897B 18 5B            jr 5F
 65+  897D E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  897E
 67+  897E              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  897E              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  897E
 70+  897E EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  897F 2A B9 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8982 CD 6E 8E     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8985 67           	ld h,a
 74+  8986 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8987 CD 6E 8E     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  898A 67           	ld h,a
 77+  898B A7           	and a
 78+  898C ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  898E 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  898F 3A 96 85     	ld a,(Cuad_objeto)
 81+  8992 FE 02        	cp 2
 82+  8994 38 1E        	jr c,3F
 83+  8996 28 1C        	jr z,3F
 84+  8998 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8999 28 23            jr z,7F
 86+  899B 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  899D 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  899F E1           	pop hl
 89+  89A0
 90+  89A0              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  89A0              ; _para indicar con E="2" en caso necesario.
 92+  89A0
 93+  89A0 E5               push hl
 94+  89A1 C5               push bc
 95+  89A2 CD 6E 8E     	call calcula_tercio
 96+  89A5 FE 01        	cp 1
 97+  89A7 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  89A9 CD D9 89         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  89AC 28 26            jr z,9F
100+  89AE 38 24            jr c,9F
101+  89B0 1E 00        11 ld e,0
102+  89B2 18 22            jr 8F
103+  89B4 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  89B5 28 07        	jr z, 7F
105+  89B7 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  89B9 1E 00         	ld e,0
107+  89BB E1           	pop hl
108+  89BC 18 04        	jr 4F
109+  89BE 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  89C0 18 15            jr 10F
111+  89C2
112+  89C2              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  89C2              ; _para indicar con E="2" en caso necesario.
114+  89C2
115+  89C2 E5           4 push hl
116+  89C3 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  89C4 CD 6E 8E     	call calcula_tercio
118+  89C7 FE 01        	cp 1
119+  89C9 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  89CB CD D9 89         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  89CE 28 04            jr z,9F
122+  89D0 30 02            jr nc,9F
123+  89D2 18 02        	jr 8F
124+  89D4 1E 02        9 ld e,2
125+  89D6 C1           8 pop bc
126+  89D7 E1           10 pop hl
127+  89D8 C9           5 ret
128+  89D9
129+  89D9              ; --------------------
130+  89D9              ;
131+  89D9              ; 25/08/22
132+  89D9
133+  89D9 CD 6E 8E     Comprueba_centro call calcula_tercio
134+  89DC 67               ld h,a
135+  89DD 08           	ex af,af
136+  89DE FE 02        	cp 2
137+  89E0 38 07        	jr c,1F
138+  89E2 28 05        	jr z,1F
139+  89E4 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  89E7 18 03        	jr 2F
141+  89E9 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  89EC 08           2 ex af,af
143+  89ED A7               and a
144+  89EE ED 42            sbc hl,bc
145+  89F0 C9               ret
146+  89F1
147+  89F1              ; *********************************************************************************************************************************************************************************************
148+  89F1              ;
149+  89F1              ;   16/8/22
150+  89F1              ;
151+  89F1              ;	Comprueba_limite_vertical
152+  89F1              ;
153+  89F1              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  89F1              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  89F1              ;
156+  89F1
157+  89F1 2A 84 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  89F4 7D           	ld a,l
159+  89F5 E6 1F        	and $1F
160+  89F7 57           	ld d,a
161+  89F8 3A BB 85     	ld a,(Limite_vertical)
162+  89FB BA           	cp d 											; Límite - Posición.
163+  89FC 08           	ex af,af 										; Resultado de CP d en F'.
164+  89FD 3A 96 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8A00 CB 47        	bit 0,a
166+  8A02 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8A04
168+  8A04              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8A04
170+  8A04 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8A05 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8A07
173+  8A07              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8A07              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8A07
176+  8A07 3A 88 85         ld a,(Coordenada_X)
177+  8A0A 16 0F            ld d,Centro_izquierda
178+  8A0C A7               and a
179+  8A0D 92               sub d 											 ; Posición - Centro_izquierda.
180+  8A0E 28 1E            jr z,3F
181+  8A10 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8A12              ;                                                    ; _salimos sin modificar nada.
183+  8A12 18 0E            jr 2F
184+  8A14 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8A15 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8A17
187+  8A17              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8A17              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8A17
190+  8A17 3A 88 85         ld a,(Coordenada_X)
191+  8A1A 16 10            ld d,Centro_derecha
192+  8A1C A7               and a
193+  8A1D 92               sub d
194+  8A1E 28 0E            jr z,3F
195+  8A20 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8A22              ;                                                    ; _salimos sin modificar nada.
197+  8A22 CB 43        2 bit 0,e
198+  8A24 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8A26 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8A27 CD BB 8A         call Modificaccionne
201+  8A2A C1           	pop bc
202+  8A2B CD CB 8A         call Inicializacion
203+  8A2E C9           3 ret 				 								 ; Salimos de la rutina.
204+  8A2F
205+  8A2F              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8A2F
207+  8A2F C5           4 push bc
208+  8A30 01 83 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8A33 0A           	ld a,(bc)
210+  8A34 3D           	dec a
211+  8A35 47           	ld b,a 											 ; Columnas-1 en B.
212+  8A36 7D           	ld a,l
213+  8A37 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8A38 CB 47        	bit 0,a
215+  8A3A 28 03        	jr z,5F
216+  8A3C 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8A3D 18 2E        	jr 7F
218+  8A3F
219+  8A3F              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8A3F
221+  8A3F 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8A40 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8A41 3A AF 85     	ld a,(Ctrl_0)
224+  8A44 CB 4F        	bit 1,a
225+  8A46 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8A48 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8A49
228+  8A49              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8A49
230+  8A49 1C               inc e
231+  8A4A 1D               dec e
232+  8A4B 20 07            jr nz,12F
233+  8A4D 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8A4E 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8A4F 22 84 85     	ld (Posicion_actual),hl
236+  8A52 18 44        13 jr 9F
237+  8A54 CB 43        12 bit 0,e
238+  8A56 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8A58              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8A58 C1           	pop bc
241+  8A59 18 D3        	jr 3B
242+  8A5B 80           14 add b
243+  8A5C 6F               ld l,a
244+  8A5D 22 84 85     	ld (Posicion_actual),hl
245+  8A60 CD BB 8A         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8A63 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8A65 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8A67 32 AF 85         ld (Ctrl_0),a
249+  8A6A F1           	pop af
250+  8A6B 18 2B        	jr 9F
251+  8A6D
252+  8A6D              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8A6D
254+  8A6D F5           7 push af
255+  8A6E 3A AF 85     	ld a,(Ctrl_0)
256+  8A71 CB 47        	bit 0,a
257+  8A73 20 1D        	jr nz,8F
258+  8A75 F1           	pop af
259+  8A76
260+  8A76              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8A76
262+  8A76 1C           	inc e
263+  8A77 1D               dec e
264+  8A78 20 07            jr nz,10F
265+  8A7A 90           	sub b
266+  8A7B 6F               ld l,a
267+  8A7C 22 84 85     	ld (Posicion_actual),hl
268+  8A7F 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8A81              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8A81 CB 43        10 bit 0,e
271+  8A83 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8A85              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8A85 C1           	pop bc
274+  8A86 18 A6        	jr 3B
275+  8A88 90           16 sub b
276+  8A89 6F               ld l,a
277+  8A8A 22 84 85     	ld (Posicion_actual),hl
278+  8A8D CD BB 8A         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8A90 18 06            jr 9F
280+  8A92 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8A94 32 AF 85         ld (Ctrl_0),a
282+  8A97 F1           	pop af
283+  8A98 C1           9 pop bc
284+  8A99 1E 00        	ld e,0
285+  8A9B CD CB 8A         call Inicializacion
286+  8A9E F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8A9F 08           	ex af,af
288+  8AA0 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8AA1 18 8B            jr 3B
290+  8AA3
291+  8AA3              ; --------------------
292+  8AA3
293+  8AA3 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8AA5 CD 1F 8C     1 call PreviousScan
295+  8AA8 10 FB            djnz 1B
296+  8AAA 22 84 85     	ld (Posicion_actual),hl
297+  8AAD AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8AAE C9           	ret
299+  8AAF
300+  8AAF              ; --------------------
301+  8AAF
302+  8AAF 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8AB1 CD 10 8C     1 call NextScan
304+  8AB4 10 FB            djnz 1B
305+  8AB6 22 84 85     	ld (Posicion_actual),hl
306+  8AB9 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8ABA C9           	ret
308+  8ABB
309+  8ABB              ; --------------------
310+  8ABB              ;
311+  8ABB              ;	22/01/23
312+  8ABB              ;
313+  8ABB              ;	E="1". Hemos cambiado de cuadrante.
314+  8ABB              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8ABB              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8ABB
317+  8ABB
318+  8ABB              Modificaccionne
319+  8ABB
320+  8ABB 3A 96 85     	ld a,(Cuad_objeto)
321+  8ABE FE 02        	cp 2
322+  8AC0 CC A3 8A         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8AC3 DC A3 8A         call c,Modifica_Pos_actual
324+  8AC6 C8           	ret z
325+  8AC7 CD AF 8A         call Modifica_Pos_actual2
326+  8ACA C9               ret
327+  8ACB
328+  8ACB              ; *************************************************************************************************************************************************************************************************
329+  8ACB              ;
330+  8ACB              ;	13/8/22
331+  8ACB              ;
332+  8ACB              ;	Inicializacion
333+  8ACB              ;
334+  8ACB              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8ACB              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8ACB              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8ACB              ;
338+  8ACB              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8ACB              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8ACB              ;	_ desaparece/aparece.
341+  8ACB
342+  8ACB              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8ACB              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8ACB              ;
345+  8ACB              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8ACB              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8ACB              ; 		   [E] ="0"
348+  8ACB
349+  8ACB              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8ACB
351+  8ACB CD 6E 8E     Inicializacion call calcula_tercio
352+  8ACE 28 36        	jr z,primit
353+  8AD0 E6 02        	and 2
354+  8AD2 20 07        	jr nz,segmit
355+  8AD4 7D           	ld a,l
356+  8AD5 FE 7F        	cp $7f
357+  8AD7 38 2D        	jr c,primit
358+  8AD9 28 2B        	jr z,primit
359+  8ADB CD 38 8B     segmit call column
360+  8ADE 38 13        	jr c,tercuad
361+  8AE0 3E 04        cuarcuad ld a,4
362+  8AE2 32 96 85     	ld (Cuad_objeto),a
363+  8AE5 21 20 48     	ld hl,$4820
364+  8AE8 22 B9 85     	ld (Limite_horizontal),hl
365+  8AEB 21 BB 85     	ld hl,Limite_vertical
366+  8AEE 36 0D        	ld (hl),$0d
367+  8AF0 08           	ex af,af
368+  8AF1 18 3C        	jr 1F
369+  8AF3              tercuad
370+  8AF3 3E 03        	ld a,3
371+  8AF5 32 96 85     	ld (Cuad_objeto),a
372+  8AF8 21 20 48     	ld hl,$4820
373+  8AFB 22 B9 85     	ld (Limite_horizontal),hl
374+  8AFE 21 BB 85     	ld hl,Limite_vertical
375+  8B01 36 12        	ld (hl),$12
376+  8B03 08           	ex af,af
377+  8B04 18 29        	jr 1F
378+  8B06 CD 38 8B     primit call column
379+  8B09 38 13        	jr c, primcuad
380+  8B0B              segcuad
381+  8B0B 3E 02        	ld a,2
382+  8B0D 32 96 85     	ld (Cuad_objeto),a
383+  8B10 21 C0 4F     	ld hl,$4fc0
384+  8B13 22 B9 85     	ld (Limite_horizontal),hl
385+  8B16 21 BB 85     	ld hl,Limite_vertical
386+  8B19 36 0D        	ld (hl),$0d
387+  8B1B 08           	ex af,af
388+  8B1C 18 11        	jr 1F
389+  8B1E              primcuad
390+  8B1E 3E 01        	ld a,1
391+  8B20 32 96 85     	ld (Cuad_objeto),a
392+  8B23 21 C0 4F     	ld hl,$4fc0
393+  8B26 22 B9 85     	ld (Limite_horizontal),hl
394+  8B29 21 BB 85     	ld hl,Limite_vertical
395+  8B2C 36 12        	ld (hl),$12
396+  8B2E 08           	ex af,af
397+  8B2F CD A0 91     1 call Genera_coordenadas
398+  8B32 21 AF 85     	ld hl,Ctrl_0
399+  8B35 CB EE        	set 5,(hl)
400+  8B37 C9           	ret
401+  8B38
402+  8B38              ; ------------------------------------------------------------------------------------------------------------------
403+  8B38
404+  8B38              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8B38              ;
406+  8B38              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8B38
408+  8B38 7D           column ld a,l
409+  8B39 E6 1F        	and $1f
410+  8B3B FE 10         	cp $10
411+  8B3D C9            	ret
412+  8B3E
413+  8B3E              ; --------------------------------------------------------------------------------------------------------------------
414+  8B3E              ;
415+  8B3E              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8B3E              ;
417+  8B3E              ; 14/12/22
418+  8B3E              ;
419+  8B3E              ;	Modifica: A y BC.
420+  8B3E
421+  8B3E 3A 96 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8B41 E6 01        	and 1
423+  8B43 28 17        	jr z,1F
424+  8B45
425+  8B45              ; Nos encontramos en la parte izquierda de la pantalla
426+  8B45
427+  8B45 3A 88 85     	ld a,(Coordenada_X)
428+  8B48 47           	ld b,a
429+  8B49 04           	inc b											; (Coordenada_X)+1 en B.
430+  8B4A 79           	ld a,c
431+  8B4B 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8B4C 38 08        	jr c,2F
433+  8B4E 47           	ld b,a
434+  8B4F 79           	ld a,c
435+  8B50 90           	sub b
436+  8B51 32 B8 85     	ld (Columnas),a
437+  8B54 18 1B        	jr 4F
438+  8B56 79           2 ld a,c
439+  8B57 32 B8 85     	ld (Columnas),a
440+  8B5A 18 15        	jr 4F
441+  8B5C
442+  8B5C              ; Nos encontramos en la parte derecha de la pantalla.
443+  8B5C
444+  8B5C 3A 88 85     1 ld a,(Coordenada_X)
445+  8B5F 81           	add c
446+  8B60 3D           	dec a
447+  8B61 D6 1F        	sub $1f
448+  8B63 38 08        	jr c,3F
449+  8B65 47           	ld b,a
450+  8B66 79           	ld a,c
451+  8B67 90           	sub b
452+  8B68 32 B8 85     	ld (Columnas),a
453+  8B6B 18 04        	jr 4F
454+  8B6D 79           3 ld a,c
455+  8B6E 32 B8 85     	ld (Columnas),a
456+  8B71 D9           4 exx
457+  8B72 4F           	ld c,a
458+  8B73 D9           	exx
459+  8B74 C9            ret
460+  8B75
461+  8B75              ; --------------------------------------------------------------------------------------------------------------------
462+  8B75              ;
463+  8B75              ; 7/1/23
464+  8B75              ;
465+  8B75              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8B75              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8B75              ;
468+  8B75              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8B75              ;	DESTRUYE: HL,B Y A.
470+  8B75
471+  8B75 3A 96 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8B78 FE 02        	cp 2
473+  8B7A 38 18        	jr c,1F
474+  8B7C 28 16        	jr z,1F
475+  8B7E E6 01        	and 1
476+  8B80 28 0D        	jr z,3F
477+  8B82
478+  8B82              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8B82
480+  8B82 CD BE 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8B85
482+  8B85 7D           9 ld a,l
483+  8B86 E6 1F        	and $1f
484+  8B88 28 2A        	jr z,7F
485+  8B8A 2B           	dec hl
486+  8B8B 10 F8        	djnz 9B
487+  8B8D 18 25        	jr 7F
488+  8B8F
489+  8B8F              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8B8F
491+  8B8F 2A 84 85     3 ld hl,(Posicion_actual)
492+  8B92 18 20        	jr 7F
493+  8B94
494+  8B94 28 14        1 jr z,2F
495+  8B96
496+  8B96              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8B96
498+  8B96 CD BE 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8B99 7D           4 ld a,l
500+  8B9A E6 1F        	and $1f
501+  8B9C 28 03        	jr z,6F
502+  8B9E 2B           	dec hl
503+  8B9F 10 F8        	djnz 4B
504+  8BA1 06 0F        6 ld b,15
505+  8BA3 CD 1F 8C     5 call PreviousScan
506+  8BA6 10 FB        	djnz 5B
507+  8BA8 18 0A        	jr 7F
508+  8BAA
509+  8BAA              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8BAA
511+  8BAA CD BE 8B     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8BAD 06 0F        	ld b,15
513+  8BAF CD 1F 8C     8 call PreviousScan
514+  8BB2 10 FB        	djnz 8B
515+  8BB4
516+  8BB4 E5           7 push hl
517+  8BB5 DD E1        	pop ix
518+  8BB7
519+  8BB7 2A 86 85     	ld hl,(Puntero_objeto)
520+  8BBA E5           	push hl
521+  8BBB FD E1        	pop iy
522+  8BBD
523+  8BBD C9           	ret
524+  8BBE
525+  8BBE              ; --------------------------------------------------------------------------------------------------------------------
526+  8BBE              ;
527+  8BBE              ;	2/1/23
528+  8BBE              ;
529+  8BBE              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8BBE              ;
531+  8BBE              ;	Tras esta rutina tenemos:
532+  8BBE              ;
533+  8BBE              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8BBE              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8BBE              ;
536+  8BBE              ;	DESTRUYE!!!!! HL,B y A.
537+  8BBE
538+  8BBE 2A 84 85     Operandos ld hl,(Posicion_actual)
539+  8BC1 3A B8 85     	ld a,(Columnas)
540+  8BC4 3D           	dec a
541+  8BC5 20 01        	jr nz,1F
542+  8BC7 3C           	inc a
543+  8BC8 47           1 ld b,a
544+  8BC9 C9           	ret
545+  8BCA
546+  8BCA              ; --------------------------------------------------------------------------------------------------------------------
547+  8BCA              ;
548+  8BCA              ;	3/1/23
549+  8BCA              ;
550+  8BCA              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8BCA              ;
552+  8BCA              ;	Destruye: A,B,HL y DE.
553+  8BCA
554+  8BCA              Define_rutina_de_impresion
555+  8BCA
556+  8BCA 3A 83 85     	ld a,(Columns)
557+  8BCD 47           	ld b,a
558+  8BCE 3A B8 85     	ld a,(Columnas)
559+  8BD1 B8           	cp b
560+  8BD2 20 0D        	jr nz,2f
561+  8BD4
562+  8BD4              ;	La entidad se imprime entera.
563+  8BD4
564+  8BD4 21 6B 8C     	ld hl, Indice_entidades_completas
565+  8BD7 E6 01        	and 1
566+  8BD9 28 02        	jr z,1F
567+  8BDB
568+  8BDB 23           	inc hl
569+  8BDC 23           	inc hl
570+  8BDD
571+  8BDD CD 35 87     1 call Extrae_address
572+  8BE0 C9           	ret		;	ret
573+  8BE1
574+  8BE1              ;	La entidad no se imprime entera en pantalla.
575+  8BE1
576+  8BE1 3A 96 85     2 ld a,(Cuad_objeto)
577+  8BE4 E6 01        	and 1
578+  8BE6 28 17        	jr z,3F
579+  8BE8
580+  8BE8              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8BE8
582+  8BE8 21 6F 8C     	ld hl, Indice_entidades_incompletas_izquierda
583+  8BEB 3A 83 85     4 ld a,(Columns)
584+  8BEE E6 01        	and 1
585+  8BF0 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8BF2
587+  8BF2 23           	inc hl
588+  8BF3 23           	inc hl
589+  8BF4
590+  8BF4 3A B8 85     	ld a,(Columnas)
591+  8BF7 E6 01        	and 1
592+  8BF9 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8BFB
594+  8BFB 23           	inc hl
595+  8BFC 23           	inc hl
596+  8BFD
597+  8BFD 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8BFF
599+  8BFF 21 75 8C     3 ld hl, Indice_entidades_incompletas_derecha
600+  8C02 18 E7        	jr 4B
601+  8C04
602+  8C04              ; --------------------------------------------------------------------------------------------------------------------
603+  8C04              ;
604+  8C04              ;	Prepara_draw
605+  8C04              ;
606+  8C04              ;	Es una rutina de carga.
607+  8C04              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8C04              ;
609+  8C04              ;	FUNCIONAMIENTO:
610+  8C04              ;
611+  8C04              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8C04              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8C04              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8C04              ;
615+  8C04              ;	DESTRUYE:
616+  8C04              ;
617+  8C04              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8C04
619+  8C04 21 82 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8C07 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8C08 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8C09 4E           	ld c,(hl)
623+  8C0A 2A 84 85     	ld hl,(Posicion_actual)
624+  8C0D 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8C0F C9           	ret
626+  8C10
627+  8C10              ;----------------------------------------------------------------------------------------------------------------
628+  8C10              ;
629+  8C10              ;	5/08/22
630+  8C10              ;
631+  8C10              ;   NextScan.
632+  8C10              ;
633+  8C10              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8C10              ;
635+  8C10              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8C10              ;
637+  8C10              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8C10              ;
639+  8C10              ;       DESTRUIDOS: AF y HL !!!
640+  8C10              ;
641+  8C10              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8C10              ;
643+  8C10
644+  8C10 24           NextScan inc h          ; Incrementamos el scanline.
645+  8C11 7C               ld a,h
646+  8C12 E6 07            and 7
647+  8C14 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8C15
649+  8C15 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8C16 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8C18 6F               ld l,a
652+  8C19 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8C1A
654+  8C1A 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8C1B D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8C1D 67               ld h,a
657+  8C1E C9               ret
658+  8C1F
659+  8C1F              ;----------------------------------------------------------------------------------------------------------------
660+  8C1F              ;
661+  8C1F              ;	5/08/22
662+  8C1F              ;
663+  8C1F              ;   PreviousScan.
664+  8C1F              ;
665+  8C1F              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8C1F              ;
667+  8C1F              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8C1F              ;
669+  8C1F              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8C1F              ;
671+  8C1F              ;       DESTRUIDOS: AF y HL !!!
672+  8C1F              ;
673+  8C1F              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8C1F              ;
675+  8C1F
676+  8C1F 7C           PreviousScan ld a,h
677+  8C20 25               dec h               ; Dec H.
678+  8C21 E6 07            and 7
679+  8C23 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8C24
681+  8C24 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8C25 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8C27 6F               ld l,a
684+  8C28 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8C29
686+  8C29 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8C2A C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8C2C 67               ld h,a
689+  8C2D C9               ret
690+  8C2E
691+  8C2E              ; -----------------------------------------------------------------------------------
692+  8C2E              ;
693+  8C2E              ;	15/1/23
694+  8C2E
695+  8C2E              Extrae_foto_registros
696+  8C2E
697+  8C2E 3A C3 85     	ld a,(Numero_de_malotes)
698+  8C31 A7           	and a
699+  8C32 C8           	ret z
700+  8C33
701+  8C33
702+  8C33 ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8C37 31 00 70     	ld sp,Album_de_fotos
704+  8C3A
705+  8C3A FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8C3C E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8C3D D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8C3E
709+  8C3E ED 73 C6 85  	ld (Stack_2),sp
710+  8C42 ED 7B C4 85  	ld sp,(Stack)
711+  8C46
712+  8C46              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8C46
714+  8C46 3E CD        	ld a,$cd
715+  8C48 32 50 8C     	ld (Imprime),a
716+  8C4B EB           	ex de,hl
717+  8C4C 22 51 8C     	ld (Imprime+1),hl
718+  8C4F EB           	ex de,hl
719+  8C50
720+  8C50              ; Ejecuta la llamada:	CALL $xx,xx
721+  8C50
722+  8C50 00 00 00     Imprime db 0,0,0
723+  8C53
724+  8C53 ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8C57
726+  8C57 3A C3 85     	ld a,(Numero_de_malotes)
727+  8C5A 3D           	dec a
728+  8C5B 28 09        	jr z,1F
729+  8C5D 32 C3 85      	ld (Numero_de_malotes),a
730+  8C60 ED 7B C6 85  	ld sp,(Stack_2)
731+  8C64 18 D4        	jr 2B
732+  8C66
733+  8C66 AF           1 xor a
734+  8C67 32 C6 85     	ld (Stack_2),a
735+  8C6A C9           	ret
736+  8C6B
737+  8C6B
# file closed: Draw_XOR.asm
765   8C6B              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8C6B              ;   índices de Rutinas de impresión.
  2+  8C6B
  3+  8C6B 7B 8C        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8C6D A8 8C            defw Pinta_Amadeus_3x2
  5+  8C6F
  6+  8C6F FE 8C        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8C71 9E 8D            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8C73 52 8D            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8C75
 10+  8C75 28 8D        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8C77 2C 8E            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8C79 E0 8D            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8C7B
 14+  8C7B
 15+  8C7B              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8C7B              ;
 17+  8C7B              ;   12/12/22
 18+  8C7B              ;
 19+  8C7B              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8C7B              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8C7B              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8C7B              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8C7B              ;
 24+  8C7B              ;   Modifica: DE y HL.
 25+  8C7B
 26+  8C7B ED 73 C4 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8C7F FD F9        	ld sp,iy
 28+  8C81
 29+  8C81              ; >>>
 30+  8C81
 31+  8C81 06 10            ld b,16
 32+  8C83 D1           1 pop de
 33+  8C84 7B               ld a,e
 34+  8C85 AE               xor (hl)
 35+  8C86 77           	ld (hl),a
 36+  8C87 23           	inc hl
 37+  8C88 7A               ld a,d
 38+  8C89 AE               xor (hl)
 39+  8C8A 77           	ld (hl),a
 40+  8C8B 2B           	dec hl
 41+  8C8C 24           	inc h
 42+  8C8D 7C               ld a,h
 43+  8C8E E6 07            and 7
 44+  8C90 20 0A            jr nz,2F
 45+  8C92 7D               ld a,l
 46+  8C93 C6 20            add a,$20
 47+  8C95 6F               ld l,a
 48+  8C96 38 04            jr c,2F
 49+  8C98 7C               ld a,h
 50+  8C99 D6 08            sub 8
 51+  8C9B 67               ld h,a
 52+  8C9C 7C           2 ld a,h
 53+  8C9D FE 58            cp $58
 54+  8C9F 28 02            jr z,3F
 55+  8CA1 10 E0            djnz 1B
 56+  8CA3 ED 7B C4 85  3 ld sp,(Stack)
 57+  8CA7 C9           	ret
 58+  8CA8
 59+  8CA8 ED 73 C4 85  Pinta_Amadeus_3x2 ld (Stack),sp
 60+  8CAC FD F9        	ld sp,iy
 61+  8CAE 06 08            ld b,8
 62+  8CB0 D1           1 pop de
 63+  8CB1 7B               ld a,e
 64+  8CB2 AE               xor (hl)
 65+  8CB3 77           	ld (hl),a
 66+  8CB4 23           	inc hl
 67+  8CB5 7A               ld a,d
 68+  8CB6 AE               xor (hl)
 69+  8CB7 77           	ld (hl),a
 70+  8CB8 23           	inc hl
 71+  8CB9 D1           	pop de
 72+  8CBA 7B               ld a,e
 73+  8CBB AE               xor (hl)
 74+  8CBC 77           	ld (hl),a
 75+  8CBD 2B           	dec hl
 76+  8CBE 2B           	dec hl
 77+  8CBF 24           	inc h
 78+  8CC0 7C               ld a,h
 79+  8CC1 E6 07            and 7
 80+  8CC3 20 0A            jr nz,2F
 81+  8CC5 7D               ld a,l
 82+  8CC6 C6 20            add a,$20
 83+  8CC8 6F               ld l,a
 84+  8CC9 38 04            jr c,2F
 85+  8CCB 7C               ld a,h
 86+  8CCC D6 08            sub 8
 87+  8CCE 67               ld h,a
 88+  8CCF 7C           2 ld a,h
 89+  8CD0 FE 58            cp $58
 90+  8CD2 28 25            jr z,4F
 91+  8CD4 7A               ld a,d
 92+  8CD5 AE               xor (hl)
 93+  8CD6 77               ld (hl),a
 94+  8CD7 D1           	pop de
 95+  8CD8 23           	inc hl
 96+  8CD9 7B               ld a,e
 97+  8CDA AE               xor (hl)
 98+  8CDB 77           	ld (hl),a
 99+  8CDC 23           	inc hl
100+  8CDD 7A               ld a,d
101+  8CDE AE               xor (hl)
102+  8CDF 77           	ld (hl),a
103+  8CE0 2B           	dec hl
104+  8CE1 2B           	dec hl
105+  8CE2 24           	inc h
106+  8CE3 7C               ld a,h
107+  8CE4 E6 07            and 7
108+  8CE6 20 0A            jr nz,3F
109+  8CE8 7D               ld a,l
110+  8CE9 C6 20            add a,$20
111+  8CEB 6F               ld l,a
112+  8CEC 38 04            jr c,3F
113+  8CEE 7C               ld a,h
114+  8CEF D6 08            sub 8
115+  8CF1 67               ld h,a
116+  8CF2 7C           3 ld a,h
117+  8CF3 FE 58            cp $58
118+  8CF5 28 02            jr z,4F
119+  8CF7 10 B7            djnz 1B
120+  8CF9 ED 7B C4 85  4 ld sp,(Stack)
121+  8CFD C9           	ret
122+  8CFE
123+  8CFE              ; ---------------------------------------------------
124+  8CFE
125+  8CFE ED 73 C4 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
126+  8D02 FD F9        	ld sp,iy
127+  8D04
128+  8D04              ; >>>
129+  8D04
130+  8D04 06 10            ld b,16
131+  8D06 D1           1 pop de
132+  8D07 7A           	ld a,d
133+  8D08 AE           	xor (hl)
134+  8D09 77           	ld (hl),a
135+  8D0A 24           	inc h
136+  8D0B 7C               ld a,h
137+  8D0C E6 07            and 7
138+  8D0E 20 0C            jr nz,2F
139+  8D10 7D               ld a,l
140+  8D11 C6 20            add a,$20
141+  8D13 6F               ld l,a
142+  8D14 38 06            jr c,2F
143+  8D16 7C               ld a,h
144+  8D17 D6 08            sub 8
145+  8D19 67               ld h,a
146+  8D1A 18 00            jr 2F
147+  8D1C 7C           2 ld a,h
148+  8D1D FE 58            cp $58
149+  8D1F 28 02            jr z,3F
150+  8D21 10 E3            djnz 1B
151+  8D23 ED 7B C4 85  3 ld sp,(Stack)
152+  8D27 C9           	ret
153+  8D28
154+  8D28 ED 73 C4 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
155+  8D2C FD F9        	ld sp,iy
156+  8D2E
157+  8D2E              ; >>>
158+  8D2E
159+  8D2E 06 10            ld b,16
160+  8D30 D1           1 pop de
161+  8D31 7B           	ld a,e
162+  8D32 AE           	xor (hl)
163+  8D33 77           	ld (hl),a
164+  8D34 24           	inc h
165+  8D35 7C               ld a,h
166+  8D36 E6 07            and 7
167+  8D38 20 0C            jr nz,2F
168+  8D3A 7D               ld a,l
169+  8D3B C6 20            add a,$20
170+  8D3D 6F               ld l,a
171+  8D3E 38 06            jr c,2F
172+  8D40 7C               ld a,h
173+  8D41 D6 08            sub 8
174+  8D43 67               ld h,a
175+  8D44 18 00            jr 2F
176+  8D46 7C           2 ld a,h
177+  8D47 FE 58            cp $58
178+  8D49 28 02            jr z,3F
179+  8D4B 10 E3            djnz 1B
180+  8D4D ED 7B C4 85  3 ld sp,(Stack)
181+  8D51 C9           	ret
182+  8D52
183+  8D52              ; ---------------------------------------------------
184+  8D52
185+  8D52 ED 73 C4 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
186+  8D56 FD F9        	ld sp,iy
187+  8D58 06 08            ld b,8
188+  8D5A D1           1 pop de
189+  8D5B 7A           	ld a,d
190+  8D5C AE           	xor (hl)
191+  8D5D 77           	ld (hl),a
192+  8D5E 23           	inc hl
193+  8D5F D1           	pop de
194+  8D60 7B           	ld a,e
195+  8D61 AE           	xor (hl)
196+  8D62 77           	ld (hl),a
197+  8D63 2B           	dec hl
198+  8D64 24            	inc h
199+  8D65 7C               ld a,h
200+  8D66 E6 07            and 7
201+  8D68 20 0A            jr nz,2F
202+  8D6A 7D               ld a,l
203+  8D6B C6 20            add a,$20
204+  8D6D 6F               ld l,a
205+  8D6E 38 04            jr c,2F
206+  8D70 7C               ld a,h
207+  8D71 D6 08            sub 8
208+  8D73 67               ld h,a
209+  8D74 7C           2 ld a,h
210+  8D75 FE 58            cp $58
211+  8D77 28 20            jr z,4F
212+  8D79 D1               pop de
213+  8D7A 7B           	ld a,e
214+  8D7B AE           	xor (hl)
215+  8D7C 77           	ld (hl),a
216+  8D7D 23           	inc hl
217+  8D7E 7A           	ld a,d
218+  8D7F AE           	xor (hl)
219+  8D80 77           	ld (hl),a
220+  8D81 2B           	dec hl
221+  8D82 24           	inc h
222+  8D83 7C               ld a,h
223+  8D84 E6 07            and 7
224+  8D86 20 0A            jr nz,3F
225+  8D88 7D               ld a,l
226+  8D89 C6 20            add a,$20
227+  8D8B 6F               ld l,a
228+  8D8C 38 04            jr c,3F
229+  8D8E 7C               ld a,h
230+  8D8F D6 08            sub 8
231+  8D91 67               ld h,a
232+  8D92 7C           3 ld a,h
233+  8D93 FE 58            cp $58
234+  8D95 28 02            jr z,4F
235+  8D97 10 C1            djnz 1B
236+  8D99 ED 7B C4 85  4 ld sp,(Stack)
237+  8D9D C9           	ret
238+  8D9E
239+  8D9E ED 73 C4 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
240+  8DA2 FD F9        	ld sp,iy
241+  8DA4 06 08            ld b,8
242+  8DA6 D1           1 pop de
243+  8DA7 D1           	pop de
244+  8DA8 7B           	ld a,e
245+  8DA9 AE           	xor (hl)
246+  8DAA 77           	ld (hl),a
247+  8DAB 24            	inc h
248+  8DAC 7C               ld a,h
249+  8DAD E6 07            and 7
250+  8DAF 20 0A            jr nz,2F
251+  8DB1 7D               ld a,l
252+  8DB2 C6 20            add a,$20
253+  8DB4 6F               ld l,a
254+  8DB5 38 04            jr c,2F
255+  8DB7 7C               ld a,h
256+  8DB8 D6 08            sub 8
257+  8DBA 67               ld h,a
258+  8DBB 7C           2 ld a,h
259+  8DBC FE 58            cp $58
260+  8DBE 28 1B            jr z,4F
261+  8DC0 D1               pop de
262+  8DC1 7A           	ld a,d
263+  8DC2 AE           	xor (hl)
264+  8DC3 77           	ld (hl),a
265+  8DC4 24           	inc h
266+  8DC5 7C               ld a,h
267+  8DC6 E6 07            and 7
268+  8DC8 20 0A            jr nz,3F
269+  8DCA 7D               ld a,l
270+  8DCB C6 20            add a,$20
271+  8DCD 6F               ld l,a
272+  8DCE 38 04            jr c,3F
273+  8DD0 7C               ld a,h
274+  8DD1 D6 08            sub 8
275+  8DD3 67               ld h,a
276+  8DD4 7C           3 ld a,h
277+  8DD5 FE 58            cp $58
278+  8DD7 28 02            jr z,4F
279+  8DD9 10 CB            djnz 1B
280+  8DDB ED 7B C4 85  4 ld sp,(Stack)
281+  8DDF C9           	ret
282+  8DE0
283+  8DE0 ED 73 C4 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
284+  8DE4 FD F9        	ld sp,iy
285+  8DE6 06 08            ld b,8
286+  8DE8 D1           1 pop de
287+  8DE9 7B           	ld a,e
288+  8DEA AE           	xor (hl)
289+  8DEB 77           	ld (hl),a
290+  8DEC 23           	inc hl
291+  8DED 7A           	ld a,d
292+  8DEE AE           	xor (hl)
293+  8DEF 77           	ld (hl),a
294+  8DF0 2B           	dec hl
295+  8DF1 24             	inc h
296+  8DF2 7C               ld a,h
297+  8DF3 E6 07            and 7
298+  8DF5 20 0A            jr nz,2F
299+  8DF7 7D               ld a,l
300+  8DF8 C6 20            add a,$20
301+  8DFA 6F               ld l,a
302+  8DFB 38 04            jr c,2F
303+  8DFD 7C               ld a,h
304+  8DFE D6 08            sub 8
305+  8E00 67               ld h,a
306+  8E01 7C           2 ld a,h
307+  8E02 FE 58            cp $58
308+  8E04 28 21            jr z,4F
309+  8E06 D1               pop de
310+  8E07 7A           	ld a,d
311+  8E08 AE           	xor (hl)
312+  8E09 77           	ld (hl),a
313+  8E0A 23           	inc hl
314+  8E0B D1               pop de
315+  8E0C 7B           	ld a,e
316+  8E0D AE           	xor (hl)
317+  8E0E 77           	ld (hl),a
318+  8E0F 2B           	dec hl
319+  8E10 24           	inc h
320+  8E11 7C               ld a,h
321+  8E12 E6 07            and 7
322+  8E14 20 0A            jr nz,3F
323+  8E16 7D               ld a,l
324+  8E17 C6 20            add a,$20
325+  8E19 6F               ld l,a
326+  8E1A 38 04            jr c,3F
327+  8E1C 7C               ld a,h
328+  8E1D D6 08            sub 8
329+  8E1F 67               ld h,a
330+  8E20 7C           3 ld a,h
331+  8E21 FE 58            cp $58
332+  8E23 28 02            jr z,4F
333+  8E25 10 C1            djnz 1B
334+  8E27 ED 7B C4 85  4 ld sp,(Stack)
335+  8E2B C9           	ret
336+  8E2C
337+  8E2C ED 73 C4 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
338+  8E30 FD F9        	ld sp,iy
339+  8E32 06 08            ld b,8
340+  8E34 D1           1 pop de
341+  8E35 7B           	ld a,e
342+  8E36 AE           	xor (hl)
343+  8E37 77           	ld (hl),a
344+  8E38 24            	inc h
345+  8E39 7C               ld a,h
346+  8E3A E6 07            and 7
347+  8E3C 20 0A            jr nz,2F
348+  8E3E 7D               ld a,l
349+  8E3F C6 20            add a,$20
350+  8E41 6F               ld l,a
351+  8E42 38 04            jr c,2F
352+  8E44 7C               ld a,h
353+  8E45 D6 08            sub 8
354+  8E47 67               ld h,a
355+  8E48 7C           2 ld a,h
356+  8E49 FE 58            cp $58
357+  8E4B 28 1C            jr z,4F
358+  8E4D D1               pop de
359+  8E4E 7A           	ld a,d
360+  8E4F AE           	xor (hl)
361+  8E50 77           	ld (hl),a
362+  8E51 24           	inc h
363+  8E52 7C               ld a,h
364+  8E53 E6 07            and 7
365+  8E55 20 0A            jr nz,3F
366+  8E57 7D               ld a,l
367+  8E58 C6 20            add a,$20
368+  8E5A 6F               ld l,a
369+  8E5B 38 04            jr c,3F
370+  8E5D 7C               ld a,h
371+  8E5E D6 08            sub 8
372+  8E60 67               ld h,a
373+  8E61 7C           3 ld a,h
374+  8E62 FE 58            cp $58
375+  8E64 28 03            jr z,4F
376+  8E66 D1               pop de
377+  8E67 10 CB            djnz 1B
378+  8E69 ED 7B C4 85  4 ld sp,(Stack)
379+  8E6D C9           	ret
380+  8E6E
381+  8E6E              ; ---------------------------------------------------
382+  8E6E
# file closed: Rutinas_de_impresion_sprites.asm
766   8E6E              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8E6E              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8E6E              ;
  3+  8E6E              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8E6E              ;
  5+  8E6E              ; *****************************************************************************************************************************************************************************************
  6+  8E6E              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8E6E
  8+  8E6E 7C           calcula_tercio ld a,h
  9+  8E6F E6 18        	and $18
 10+  8E71 CB 2F        	sra a
 11+  8E73 CB 2F        	sra a
 12+  8E75 CB 2F        	sra a
 13+  8E77 C9           	ret
 14+  8E78
# file closed: calcula_tercio.asm
767   8E78              	include "Cls.asm"
# file opened: Cls.asm
  1+  8E78              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8E78              ;
  3+  8E78              ;
  4+  8E78              ;	CLS.
  5+  8E78              ;
  6+  8E78              ;	Limpia la pantalla y define sus atributos.
  7+  8E78              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8E78              ;
  9+  8E78              ;	COLORES: 0 ..... NEGRO
 10+  8E78              ;    		 1 ..... AZUL
 11+  8E78              ; 			 2 ..... ROJO
 12+  8E78              ;			 3 ..... MAGENTA
 13+  8E78              ; 			 4 ..... VERDE
 14+  8E78              ; 			 5 ..... CIAN
 15+  8E78              ;			 6 ..... AMARILLO
 16+  8E78              ; 			 7 ..... BLANCO
 17+  8E78              ;
 18+  8E78              ;	INPUT: A contiene los atributos de pantalla.
 19+  8E78              ;
 20+  8E78              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8E78
 22+  8E78
 23+  8E78 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8E7B 11 01 40     	LD DE,$4001
 25+  8E7E 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8E81 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8E83 ED B0        	LDIR
 28+  8E85 01 FF 02     	LD BC,767
 29+  8E88 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8E89 ED B0        	LDIR
 31+  8E8B C9           	ret
 32+  8E8C
# file closed: Cls.asm
768   8E8C              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8E8C              ; ******************************************************************************************************************************************************************************************
  2+  8E8C              ;
  3+  8E8C              ;   22/01/23
  4+  8E8C              ;
  5+  8E8C              ;	Mov_down
  6+  8E8C              ;
  7+  8E8C              ; 	Mueve el Sprite X px hacia abajo.
  8+  8E8C              ;
  9+  8E8C              ;
 10+  8E8C 21 AF 85     Mov_down ld hl,Ctrl_0
 11+  8E8F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8E91              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8E91              ; 																	; _ en el caso de que no lo haya.
 14+  8E91 3A 9A 85     	ld a,(Vel_down)
 15+  8E94 47           	ld b,a
 16+  8E95 2A 84 85         ld hl,(Posicion_actual)
 17+  8E98 CD 6E 8E     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8E9B E6 02        	and 2
 19+  8E9D 28 0F        	jr z,1F
 20+  8E9F
 21+  8E9F              ; Nos encontramos en el último tercio de pantalla.
 22+  8E9F              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8E9F
 24+  8E9F 7C           	ld a,h
 25+  8EA0 FE 57        	cp $57
 26+  8EA2 20 0A        	jr nz,1F
 27+  8EA4 7D           	ld a,l
 28+  8EA5 C6 20        	add $20
 29+  8EA7 30 05        	jr nc,1F
 30+  8EA9
 31+  8EA9              ; ------------------------------
 32+  8EA9 CD 8A 91     	call Reaparece_arriba
 33+  8EAC              ;	call Reinicio
 34+  8EAC              ; ------------------------------
 35+  8EAC 18 08        	jr 3F
 36+  8EAE CD 10 8C     1 call NextScan
 37+  8EB1 22 84 85     	ld (Posicion_actual),hl
 38+  8EB4 10 E2            djnz 2B
 39+  8EB6 CD A0 91     3 call Genera_coordenadas
 40+  8EB9 C9           	ret
 41+  8EBA
 42+  8EBA
 43+  8EBA              ; ******************************************************************************************************************************************************************************************
 44+  8EBA              ;
 45+  8EBA              ;   22/01/23
 46+  8EBA              ;
 47+  8EBA              ;	Mov_up
 48+  8EBA              ;
 49+  8EBA              ; 	Mueve el Sprite hacia arriba.
 50+  8EBA              ;
 51+  8EBA              ;
 52+  8EBA 21 AF 85     Mov_up ld hl,Ctrl_0
 53+  8EBD CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8EBF              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8EBF              ; 																		; _ en el caso de que no lo haya.
 56+  8EBF 3A 99 85     	ld a,(Vel_up)
 57+  8EC2 47           	ld b,a
 58+  8EC3 2A 84 85     	ld hl,(Posicion_actual)
 59+  8EC6 CD 6E 8E     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8EC9 A7           	and a
 61+  8ECA 20 10        	jr nz,1F
 62+  8ECC
 63+  8ECC              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8ECC              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8ECC
 66+  8ECC 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8ECD FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8ECF 20 0B            jr nz,1F
 69+  8ED1 7D               ld a,l
 70+  8ED2 D6 20            sub $20
 71+  8ED4 30 06            jr nc,1F
 72+  8ED6 25               dec h
 73+  8ED7
 74+  8ED7              ; -----------------------------
 75+  8ED7 CD 7A 91         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8EDA              ;	call Reinicio
 77+  8EDA              ; -----------------------------
 78+  8EDA
 79+  8EDA 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8EDC CD 1F 8C     1 call PreviousScan
 81+  8EDF 22 84 85     	ld (Posicion_actual),hl
 82+  8EE2 10 E2            djnz 3B
 83+  8EE4 CD A0 91     2 call Genera_coordenadas
 84+  8EE7 C9           	ret
 85+  8EE8
 86+  8EE8              ; ******************************************************************************************************************************************************************************************
 87+  8EE8              ;
 88+  8EE8              ;	19/10/22
 89+  8EE8              ;
 90+  8EE8              ;	Mov_right.
 91+  8EE8              ;
 92+  8EE8              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8EE8              ;
 94+  8EE8
 95+  8EE8 21 AF 85     Mov_right ld hl,Ctrl_0
 96+  8EEB CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8EED              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8EED              ; 																	; _ en el caso de que no lo haya.
 99+  8EED 3A AF 85     	ld a,(Ctrl_0)
100+  8EF0 CB 77        	bit 6,a
101+  8EF2 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8EF4
103+  8EF4 CD 28 91     	call Stop_Amadeus_right
104+  8EF7 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8EF8 18 4D        	jr 8F
106+  8EFA
107+  8EFA 3A 88 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8EFD FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8EFF 20 46        	jr nz,8F
110+  8F01
111+  8F01 3A 8A 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8F04 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8F05 28 40        	jr z,8F
114+  8F07
115+  8F07              ; ---------- ---------- ----------
116+  8F07              ;
117+  8F07              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8F07
119+  8F07 3A 98 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8F0A FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8F0C 28 11        	jr z,1F
122+  8F0E 38 06        	jr c,6F
123+  8F10 FE 04        	cp 4
124+  8F12 28 14        	jr z,7F
125+  8F14 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8F16
127+  8F16              ; ---------- ---------- ----------
128+  8F16              ;
129+  8F16              ; Perfiles de velocidad
130+  8F16              ;
131+  8F16
132+  8F16 3A 8A 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8F19 FE FE        	cp $fe
134+  8F1B 20 2A        	jr nz,8F
135+  8F1D 18 10        	jr 3F
136+  8F1F 3A 8A 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8F22 FE FD        	cp $fd
138+  8F24 20 21        	jr nz,8F
139+  8F26 18 07        	jr 3F
140+  8F28 3A 8A 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8F2B FE FB        	cp $fb
142+  8F2D 20 18        	jr nz,8F
143+  8F2F
144+  8F2F              ; ---------- ---------- ----------
145+  8F2F
146+  8F2F              3
147+  8F2F CD 68 91     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8F32              ;	call Reinicio
149+  8F32
150+  8F32              ; ---------- ---------- ----------
151+  8F32              ;
152+  8F32              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8F32
154+  8F32 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8F34 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8F35 CD 4E 8F     	call DESPLZ_DER
157+  8F38 C1           	pop bc
158+  8F39 10 F9        	djnz 5B
159+  8F3B 2A 84 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8F3E 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8F3F 22 84 85     	ld (Posicion_actual),hl
162+  8F42 CD A0 91     	call Genera_coordenadas
163+  8F45 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8F47
165+  8F47              ; ---------- ---------- ----------
166+  8F47
167+  8F47 2A 84 85     8 ld hl,(Posicion_actual)
168+  8F4A CD 4E 8F     	call DESPLZ_DER
169+  8F4D C9           2 ret
170+  8F4E
171+  8F4E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8F4E              ;
173+  8F4E              ;	22/9/22
174+  8F4E              ;
175+  8F4E
176+  8F4E CD 5D 8F     DESPLZ_DER call Desplaza_derecha
177+  8F51 CD A9 8F         call modifica_parametros_1er_DESPLZ_2
178+  8F54 CD D2 8F         call Ciclo_completo
179+  8F57 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8F5A CB FE        	set 7,(hl)
181+  8F5C C9           	ret
182+  8F5D
183+  8F5D              ; ******************************************************************************************************************************************************************************************
184+  8F5D              ;	15/02/23
185+  8F5D              ;
186+  8F5D
187+  8F5D 3A 98 85     Desplaza_derecha ld a,(Vel_right)
188+  8F60 47           	ld b,a
189+  8F61 2A 90 85     	ld hl,(Puntero_DESPLZ_der)
190+  8F64 23           1 inc hl
191+  8F65 23           	inc hl
192+  8F66 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8F68 22 90 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8F6B CD 35 87     	call Extrae_address
195+  8F6E 22 86 85     	ld (Puntero_objeto),hl
196+  8F71
197+  8F71              ; Modifica (Puntero_DESPLZ_izq).
198+  8F71
199+  8F71              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8F71              ; Cuántos movimientos hemos hecho ??
201+  8F71              ; DE contiene (Puntero_DESPLZ_der).
202+  8F71
203+  8F71 2A 8C 85     7 ld hl,(Indice_Sprite_der)
204+  8F74 EB           	ex de,hl
205+  8F75 A7           	and a
206+  8F76 ED 52        	sbc hl,de
207+  8F78 CB 3D        	srl l
208+  8F7A 3E 08        6 ld a,8
209+  8F7C 95           	sub l
210+  8F7D 30 1E        	jr nc,3F
211+  8F7F
212+  8F7F              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8F7F              ; B="0".
214+  8F7F
215+  8F7F 04           4 inc b
216+  8F80 3C           	inc a
217+  8F81 20 FC        	jr nz,4B
218+  8F83 78           	ld a,b
219+  8F84 08           	ex af,af
220+  8F85 2A 8C 85     	ld hl,(Indice_Sprite_der)
221+  8F88 23           5 inc hl
222+  8F89 23           	inc hl
223+  8F8A 10 FC        	djnz 5B
224+  8F8C 22 90 85     	ld (Puntero_DESPLZ_der),hl
225+  8F8F CD 35 87     	call Extrae_address
226+  8F92 22 86 85     	ld (Puntero_objeto),hl
227+  8F95
228+  8F95              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8F95              ; _(Posicion_actual).
230+  8F95
231+  8F95 21 84 85     	ld hl,Posicion_actual
232+  8F98 34           	inc (hl)
233+  8F99 08               ex af,af
234+  8F9A 6F           	ld l,a
235+  8F9B 18 DD        	jr 6B
236+  8F9D
237+  8F9D              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8F9D
239+  8F9D 47           3 ld b,a
240+  8F9E 2A 8E 85     	ld hl,(Indice_Sprite_izq)
241+  8FA1 23           2 inc hl
242+  8FA2 23           	inc hl
243+  8FA3 10 FC        	djnz 2B
244+  8FA5 22 92 85     	ld (Puntero_DESPLZ_izq),hl
245+  8FA8 C9           8 ret
246+  8FA9
247+  8FA9              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8FA9              ;
249+  8FA9              ;	24/7/22
250+  8FA9              ;
251+  8FA9              ;	modifica_parametros_1er_DESPLZ_2
252+  8FA9              ;
253+  8FA9              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8FA9              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8FA9              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8FA9
257+  8FA9 3A 8A 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8FAC A7           	and a
259+  8FAD 20 1F        	jr nz,1F
260+  8FAF D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8FB1 32 8A 85         ld (CTRL_DESPLZ),a
262+  8FB4
263+  8FB4 21 83 85     	ld hl,Columns
264+  8FB7 34           	inc (hl)
265+  8FB8 3A 96 85     	ld a,(Cuad_objeto)
266+  8FBB E6 01        	and 1
267+  8FBD 28 0F        	jr z,1F
268+  8FBF 2A 84 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8FC2 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8FC3 22 84 85     	ld (Posicion_actual),hl
271+  8FC6 CD A0 91     	call Genera_coordenadas
272+  8FC9 CD 34 91     	call Inc_CTRL_DESPLZ
273+  8FCC 18 03        	jr 2F
274+  8FCE CD 34 91     1 call Inc_CTRL_DESPLZ
275+  8FD1 C9           2 ret
276+  8FD2
277+  8FD2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8FD2              ;
279+  8FD2              ;	24/7/22
280+  8FD2              ;
281+  8FD2              ;	Ciclo_completo.
282+  8FD2              ;
283+  8FD2              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8FD2              ;
285+  8FD2              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8FD2              ; 	Decrementamos (Columns).
287+  8FD2              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8FD2              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8FD2
290+  8FD2
291+  8FD2 3A 8A 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8FD5 FE FF        	cp $ff
293+  8FD7 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8FD9 E6 F0        	and $f0
295+  8FDB 20 28        	jr nz,3F
296+  8FDD
297+  8FDD              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8FDD
299+  8FDD 3A 8A 85     	ld a,(CTRL_DESPLZ)
300+  8FE0 47           	ld b,a
301+  8FE1 3E F8        	ld a,$f8
302+  8FE3 80           	add b
303+  8FE4 32 8A 85     	ld (CTRL_DESPLZ),a
304+  8FE7 18 1C        	jr 3F
305+  8FE9 21 83 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8FEC 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8FED AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8FEE 32 8A 85     	ld (CTRL_DESPLZ),a
309+  8FF1 3A 96 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8FF4 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8FF6 20 0A        	jr nz,2F
312+  8FF8 2A 84 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8FFB 23           	inc hl
314+  8FFC 22 84 85     	ld (Posicion_actual),hl
315+  8FFF CD A0 91     	call Genera_coordenadas
316+  9002
317+  9002              ; Inicia el puntero de Sprite.
318+  9002
319+  9002 CD 4C 87     2 call Inicia_puntero_objeto_der
320+  9005 C9           3 ret
321+  9006
322+  9006              ; ******************************************************************************************************************************************************************************************
323+  9006              ;
324+  9006              ;	15/02/23
325+  9006              ;
326+  9006              ;	Mov_left.
327+  9006              ;
328+  9006              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  9006              ;
330+  9006              Mov_left
331+  9006
332+  9006 21 AF 85     	ld hl,Ctrl_0
333+  9009 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  900B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  900B              ; 																	; _ en el caso de que no lo haya.
336+  900B 3A AF 85     	ld a,(Ctrl_0)
337+  900E CB 77        	bit 6,a
338+  9010 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  9012
340+  9012 CD 2E 91     	call Stop_Amadeus_left
341+  9015 C8           	ret z
342+  9016 20 50        	jr nz,8F
343+  9018
344+  9018 3A 88 85     11 ld a,(Coordenada_X)
345+  901B A7           	and a
346+  901C 20 4A        	jr nz,8F
347+  901E
348+  901E 3A 8A 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  9021 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  9022 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  9024
352+  9024              ; ---------- ---------- ----------
353+  9024
354+  9024 3A 97 85     	ld a,(Vel_left)
355+  9027 FE 02        	cp 2
356+  9029 28 0F        	jr z,1F
357+  902B 38 04        	jr c,6F
358+  902D FE 04        	cp 4
359+  902F 28 12        	jr z,7F
360+  9031
361+  9031              ; ---------- ---------- ----------
362+  9031
363+  9031 3A 8A 85     6 ld a,(CTRL_DESPLZ)
364+  9034 FE F9        	cp $f9
365+  9036 20 30        	jr nz,8F
366+  9038 18 10        	jr 4F
367+  903A 3A 8A 85     1 ld a,(CTRL_DESPLZ)
368+  903D FE FA        	cp $fa
369+  903F 20 27        	jr nz,8F
370+  9041 18 07        	jr 4F
371+  9043 3A 8A 85     7 ld a,(CTRL_DESPLZ)
372+  9046 FE FC        	cp $fc
373+  9048 20 1E        	jr nz,8F
374+  904A
375+  904A              ; ---------- ---------- ----------
376+  904A
377+  904A              4
378+  904A CD 56 91     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  904D              ;	call Reinicio
380+  904D
381+  904D              ; ---------- ---------- ----------
382+  904D
383+  904D 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  904F C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  9050
386+  9050 2A 8E 85     	ld hl,(Indice_Sprite_izq)
387+  9053 22 92 85     	ld (Puntero_DESPLZ_izq),hl
388+  9056
389+  9056 CD 6F 90     	call DESPLZ_IZQ
390+  9059 C1           	pop bc
391+  905A 10 F3        	djnz 5B
392+  905C 2A 84 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  905F 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  9060 22 84 85     	ld (Posicion_actual),hl
395+  9063 CD A0 91     	call Genera_coordenadas
396+  9066 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9068
398+  9068              ; ---------- ---------- ----------
399+  9068              ; Movemos, no hay recolocación.
400+  9068
401+  9068 2A 84 85     8 ld hl,(Posicion_actual)
402+  906B CD 6F 90     	call DESPLZ_IZQ
403+  906E C9           2 ret
404+  906F
405+  906F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  906F              ;
407+  906F              ;	22/9/22
408+  906F
409+  906F              DESPLZ_IZQ
410+  906F
411+  906F CD 7E 90     	call Desplaza_izquierda
412+  9072 CD CA 90         call modifica_parametros_1er_DESPLZ
413+  9075 CD F2 90     	call Ciclo_completo_2
414+  9078 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  907B CB BE        	res 7,(hl)
416+  907D C9           	ret
417+  907E
418+  907E              Desplaza_izquierda
419+  907E
420+  907E 3A 97 85     	ld a,(Vel_left)
421+  9081 47           	ld b,a
422+  9082 2A 92 85     	ld hl,(Puntero_DESPLZ_izq)
423+  9085 23           1 inc hl
424+  9086 23           	inc hl
425+  9087 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  9089 22 92 85     	ld (Puntero_DESPLZ_izq),hl
427+  908C CD 35 87     	call Extrae_address
428+  908F 22 86 85     	ld (Puntero_objeto),hl
429+  9092
430+  9092              ; Modifica (Puntero_DESPLZ_der).
431+  9092
432+  9092              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  9092              ; Cuántos movimientos hemos hecho ??
434+  9092              ; DE contiene (Puntero_DESPLZ_izq).
435+  9092
436+  9092 2A 8E 85     7 ld hl,(Indice_Sprite_izq)
437+  9095 EB           	ex de,hl
438+  9096 A7           	and a
439+  9097 ED 52        	sbc hl,de
440+  9099 CB 3D        	srl l
441+  909B 3E 08        6 ld a,8
442+  909D 95           	sub l
443+  909E 30 1E        	jr nc,3F
444+  90A0
445+  90A0              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  90A0              ; B="0".
447+  90A0
448+  90A0 04           4 inc b
449+  90A1 3C           	inc a
450+  90A2 20 FC        	jr nz,4B
451+  90A4 78           	ld a,b
452+  90A5 08           	ex af,af
453+  90A6 2A 8E 85     	ld hl,(Indice_Sprite_izq)
454+  90A9 23           5 inc hl
455+  90AA 23           	inc hl
456+  90AB 10 FC        	djnz 5B
457+  90AD 22 92 85     	ld (Puntero_DESPLZ_izq),hl
458+  90B0 CD 35 87     	call Extrae_address
459+  90B3 22 86 85     	ld (Puntero_objeto),hl
460+  90B6
461+  90B6              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  90B6              ; _(Posicion_actual).
463+  90B6
464+  90B6 21 84 85     	ld hl,Posicion_actual
465+  90B9 35           	dec (hl)
466+  90BA 08           	ex af,af
467+  90BB 6F           	ld l,a
468+  90BC 18 DD        	jr 6B
469+  90BE
470+  90BE              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  90BE
472+  90BE 47           3 ld b,a
473+  90BF 2A 8C 85     	ld hl,(Indice_Sprite_der)
474+  90C2 23           2 inc hl
475+  90C3 23           	inc hl
476+  90C4 10 FC        	djnz 2B
477+  90C6 22 90 85     	ld (Puntero_DESPLZ_der),hl
478+  90C9 C9           8 ret
479+  90CA
480+  90CA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  90CA              ;
482+  90CA              ;	modifica_parametros_1er_DESPLZ
483+  90CA              ;
484+  90CA              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  90CA              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  90CA              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  90CA
488+  90CA 3A 8A 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  90CD A7           	and a
490+  90CE 20 1E        	jr nz,1F
491+  90D0 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  90D1 32 8A 85         ld (CTRL_DESPLZ),a
493+  90D4 21 83 85     	ld hl,Columns
494+  90D7 34           	inc (hl)
495+  90D8 3A 96 85     	ld a,(Cuad_objeto)
496+  90DB E6 01        	and 1
497+  90DD 20 0F        	jr nz,1F
498+  90DF 2A 84 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  90E2 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  90E3 22 84 85     	ld (Posicion_actual),hl
501+  90E6 CD A0 91     	call Genera_coordenadas
502+  90E9 CD 45 91     	call Dec_CTRL_DESPLZ
503+  90EC 18 03        	jr 2F
504+  90EE CD 45 91     1 call Dec_CTRL_DESPLZ
505+  90F1 C9           2 ret
506+  90F2
507+  90F2              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  90F2
509+  90F2 3A 8A 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  90F5 FE F7        	cp $f7
511+  90F7 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  90F9 30 2C        	jr nc,3F
513+  90FB
514+  90FB              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  90FB
516+  90FB 06 00        	ld b,0
517+  90FD 04           4 inc b
518+  90FE 3C           	inc a
519+  90FF FE F7        	cp $f7
520+  9101 20 FA        	jr nz,4B
521+  9103 3E FF        	ld a,$ff
522+  9105 90           	sub b
523+  9106 32 8A 85     	ld (CTRL_DESPLZ),a
524+  9109 18 1C        	jr 3F
525+  910B
526+  910B              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  910B
528+  910B 21 83 85     1 ld hl,Columns
529+  910E 35           	dec (hl)
530+  910F AF           	xor a
531+  9110 32 8A 85     	ld (CTRL_DESPLZ),a
532+  9113 3A 96 85     	ld a,(Cuad_objeto)
533+  9116 E6 01        	and 1
534+  9118 28 0A        	jr z,2F
535+  911A 2A 84 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  911D 2B           	dec hl
537+  911E 22 84 85     	ld (Posicion_actual),hl
538+  9121 CD A0 91     	call Genera_coordenadas
539+  9124
540+  9124              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  9124
542+  9124 CD 5F 87     2 call Inicia_puntero_objeto_izq
543+  9127 C9           3 ret
544+  9128
545+  9128              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9128              ;
547+  9128              ;	19/10/22
548+  9128              ;
549+  9128              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9128              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9128
552+  9128 3A 88 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  912B FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  912D C9           	ret
555+  912E
556+  912E              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  912E              ;
558+  912E              ;	19/10/22
559+  912E              ;
560+  912E              ;	(cp 2) para un Amadeus de 3 Columns.
561+  912E              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  912E
563+  912E 3A 88 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  9131 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  9133 C9           	ret
566+  9134
567+  9134              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  9134              ;
569+  9134              ;	24/7/22
570+  9134              ;
571+  9134              ;	Inc_CTRL_DESPLZ
572+  9134              ;
573+  9134              ;
574+  9134              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  9134
576+  9134 21 8A 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  9137 3A 98 85     	ld a,(Vel_right)
578+  913A A7           	and a
579+  913B 28 06        	jr z,1F
580+  913D 47           	ld b,a
581+  913E 34           3 inc (hl)
582+  913F 10 FD        	djnz 3B
583+  9141 18 01        	jr 2F
584+  9143 34           1 inc (hl)
585+  9144 C9           2 ret
586+  9145
587+  9145              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  9145              ;
589+  9145              ;	5/2/23
590+  9145              ;
591+  9145              ;	Dec_CTRL_DESPLZ
592+  9145              ;
593+  9145              ;
594+  9145              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  9145
596+  9145 21 8A 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9148 3A 97 85     	ld a,(Vel_left)
598+  914B A7           	and a
599+  914C 28 06        	jr z,1F
600+  914E 47           	ld b,a
601+  914F 35           3 dec (hl)
602+  9150 10 FD        	djnz 3B
603+  9152 18 01        	jr 2F
604+  9154 35           1 dec (hl)
605+  9155 C9           2 ret
606+  9156
607+  9156              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9156
609+  9156 2A 84 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9159 01 1F 00     	ld bc,31
611+  915C A7           	and a
612+  915D ED 4A        	adc hl,bc
613+  915F 22 84 85     	ld (Posicion_actual),hl
614+  9162 21 AF 85     	ld hl,Ctrl_0														; $xxx1
615+  9165 CB C6        	set 0,(hl)
616+  9167 C9           	ret
617+  9168
618+  9168              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9168
620+  9168 2A 84 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  916B 01 1F 00     	ld bc,31
622+  916E A7           	and a
623+  916F ED 42        	sbc hl,bc
624+  9171 22 84 85     	ld (Posicion_actual),hl 											; $xx1x
625+  9174 21 AF 85     	ld hl,Ctrl_0
626+  9177 CB CE        	set 1,(hl)
627+  9179 C9           	ret
628+  917A
629+  917A              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  917A
631+  917A 24           Reaparece_abajo inc h
632+  917B 01 E0 17     	ld bc,$17e0
633+  917E A7           	and a
634+  917F ED 4A        	adc hl,bc
635+  9181 22 84 85     	ld (Posicion_actual),hl
636+  9184 21 AF 85     	ld hl,Ctrl_0
637+  9187 CB D6        	set 2,(hl)
638+  9189 C9           	ret
639+  918A
640+  918A              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  918A
642+  918A 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  918D A7           	and a
644+  918E ED 42        	sbc hl,bc
645+  9190 22 84 85     	ld (Posicion_actual),hl
646+  9193 21 AF 85     	ld hl,Ctrl_0
647+  9196 CB DE        	set 3,(hl)
648+  9198 C9           	ret
649+  9199
650+  9199              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9199
652+  9199 2A 94 85     Reinicio ld hl,(Posicion_inicio)
653+  919C 22 84 85     	ld (Posicion_actual),hl
654+  919F C9           	ret
# file closed: Direcciones.asm
769   91A0              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  91A0              ;	12/12/22
  2+  91A0              ;
  3+  91A0              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  91A0              ;	Fila superior "0", Columna izquierda "0".
  5+  91A0              ;
  6+  91A0              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  91A0              ;
  8+  91A0              ;	Modifica: A
  9+  91A0
 10+  91A0 C5           Genera_coordenadas push bc
 11+  91A1 E5           	push hl
 12+  91A2 2A 84 85     	ld hl,(Posicion_actual)
 13+  91A5 7D           	ld a,l
 14+  91A6 E6 1F        	and $1f
 15+  91A8 32 88 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  91AB CD 6E 8E     	call calcula_tercio
 17+  91AE 47           	ld b,a
 18+  91AF 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  91B0 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  91B2 7D           	ld a,l
 21+  91B3 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  91B5 28 05        	jr z,2F
 23+  91B7 0C           1 inc c
 24+  91B8 D6 20        	sub 32
 25+  91BA 20 FB        	jr nz,1B
 26+  91BC 0C           2 inc c
 27+  91BD 04           	inc b
 28+  91BE 05           	dec b
 29+  91BF 28 04        	jr z,3F
 30+  91C1 3E E0        	ld a,$e0
 31+  91C3 10 F2        	djnz 1B
 32+  91C5 79           3 ld a,c
 33+  91C6 3D           	dec a
 34+  91C7 32 89 85     	ld (Coordenada_y),a
 35+  91CA E1           	pop hl
 36+  91CB C1           	pop bc
 37+  91CC C9           	ret
# file closed: Genera_coordenadas.asm
770   91CD              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  91CD
  2+  91CD
  3+  91CD              ;   11/8/22
  4+  91CD              ;
  5+  91CD              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  91CD              ;
  7+  91CD              ;   Mov_obj.asm
  8+  91CD              ;
  9+  91CD              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  91CD              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  91CD              ;
 12+  91CD              ;   Codificación:
 13+  91CD              ;
 14+  91CD              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  91CD
 16+  91CD              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  91CD
 18+  91CD 02 40 00     Arriba db 2,%01000000,0
 19+  91D0 02 80 00     Abajo db 2,%10000000,0
 20+  91D3 02 20 00     Derecha db 2,%00100000,0
 21+  91D6 02 10 00     Izquierda db 2,%00010000,0
 22+  91D9 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  91DD 60 42 60 40
 22+  91E1 63
 23+  91E2 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  91E6 22 A3 80 A0
 24+  91EA 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  91EE 84 A0 83 A0
 25+  91F2 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  91F6 80 A3 22 A0
 26+  91FA 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  91FE 40 60 42 60
 27+  9202 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9206 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  920A 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  920E 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  9212 84
 31+  9213 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  9217 84 00
 32+  9219 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  921D 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  9221 1F 1F 1F 1F
 34+  9225 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9229 1F 1F 1F 1F
 34+  922D 1F
 35+  922E 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  9232 2F 2F 2F 2F
 35+  9236 2F 2F
 36+  9238 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  923C 2F 2F 00
 37+  923F
 38+  923F
 39+  923F              ; ----- ----- ----- ----- -----
 40+  923F
 41+  923F 1D 92        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  9241 19 92        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  9243 D6 91        Indice_mov_Izquierda defw Izquierda
 44+  9245 D3 91        Indice_mov_Derecha defw Derecha
 45+  9247 D0 91        Indice_mov_Abajo defw Abajo
 46+  9249 CD 91        Indice_mov_Arriba defw Arriba
 47+  924B 0A 92        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  924D 0E 92        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  924F 06 92        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  9251 13 92        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  9253 D9 91        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  9255              ; ----- ----- ----- ----- -----
 53+  9255
 54+  9255 3A B5 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9258 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9259 28 02            jr z,1F
 57+  925B 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  925D 3A B6 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  9260 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  9262 32 B6 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  9265              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  9265 2A B3 85         ld hl,(Puntero_mov)
 63+  9268 7E               ld a,(hl)
 64+  9269 32 B5 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  926C 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  926D 22 B3 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  9270
 68+  9270 3A B7 85     Decoder ld a,(Repetimos_db)
 69+  9273 A7               and a
 70+  9274 20 0C            jr nz,12F
 71+  9276 2A B3 85         ld hl,(Puntero_mov)
 72+  9279 7E               ld a,(hl)
 73+  927A A7               and a
 74+  927B 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  927D E6 0F            and $0f
 76+  927F 32 B7 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  9282              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  9282 2A B3 85     12 ld hl,(Puntero_mov)
 79+  9285 CB 7E            bit 7,(hl)
 80+  9287 28 03            jr z,2F
 81+  9289 CD 8C 8E         call Mov_down
 82+  928C 2A B3 85     2 ld hl, (Puntero_mov)
 83+  928F CB 76            bit 6,(hl)
 84+  9291 28 03            jr z,3F
 85+  9293 CD BA 8E         call Mov_up
 86+  9296 2A B3 85     3 ld hl, (Puntero_mov)
 87+  9299 CB 6E            bit 5,(hl)
 88+  929B 28 03            jr z,4F
 89+  929D CD E8 8E         call Mov_right
 90+  92A0 2A B3 85     4 ld hl, (Puntero_mov)
 91+  92A3 CB 66            bit 4,(hl)
 92+  92A5 28 03            jr z,5F
 93+  92A7 CD 06 90         call Mov_left
 94+  92AA
 95+  92AA              ; ---------- --------- --------- ---------- ----------
 96+  92AA
 97+  92AA 3A B7 85     5 ld a,(Repetimos_db)
 98+  92AD A7               and a
 99+  92AE 28 07            jr z,6F
100+  92B0 3D               dec a
101+  92B1 32 B7 85         ld (Repetimos_db),a
102+  92B4 28 01            jr z,6f
103+  92B6 C9           11 ret
104+  92B7 21 B5 85     6 ld hl,Contador_db_mov
105+  92BA 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  92BB 2A B3 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  92BE 23               inc hl
108+  92BF 22 B3 85         ld (Puntero_mov),hl
109+  92C2 18 F2            jr 11B
110+  92C4 2A B1 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  92C7 3A B6 85         ld a,(Incrementa_puntero)
112+  92CA 47               ld b,a
113+  92CB 23           8 inc hl
114+  92CC 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  92CE 5E               ld e,(hl)
116+  92CF 23               inc hl
117+  92D0 56               ld d,(hl)
118+  92D1 EB               ex de,hl
119+  92D2 22 B3 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  92D5 18 DF            jr 11B
121+  92D7
122+  92D7              ; ---------- --------- --------- ---------- ----------
123+  92D7              ;
124+  92D7              ;   11/8/22
125+  92D7              ;
126+  92D7              ;   Prepara_Puntero_mov
127+  92D7
128+  92D7 E5           Prepara_Puntero_mov push hl
129+  92D8 D5               push de
130+  92D9 2A B1 85         ld hl,(Puntero_indice_mov)
131+  92DC 5E               ld e,(hl)
132+  92DD 23               inc hl
133+  92DE 56               ld d,(hl)
134+  92DF EB               ex de,hl
135+  92E0 22 B3 85         ld (Puntero_mov),hl
136+  92E3 D1               pop de
137+  92E4 E1               pop hl
138+  92E5 C9               ret
139+  92E6
140+  92E6              ; ---------- --------- --------- ---------- ----------
141+  92E6              ;
142+  92E6              ;   11/8/22
143+  92E6              ;
144+  92E6              ;   Reinicia_el_movimiento
145+  92E6
146+  92E6 CD D7 92     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  92E9 AF               xor a
148+  92EA 32 B5 85         ld (Contador_db_mov),a
149+  92ED 32 B6 85         ld (Incrementa_puntero),a
150+  92F0
151+  92F0              ;    jr $
152+  92F0
153+  92F0 C3 55 92         jp Movimiento
154+  92F3 C9               ret
155+  92F4              ; ---------- --------- --------- ---------- ----------
156+  92F4
157+  92F4
158+  92F4
159+  92F4
160+  92F4
161+  92F4
162+  92F4
163+  92F4
164+  92F4
165+  92F4
166+  92F4
167+  92F4
168+  92F4
169+  92F4
170+  92F4
171+  92F4
172+  92F4
173+  92F4
# file closed: Patrones_de_mov.asm
771   92F4              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  92F4              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  92F4              ;
  3+  92F4              ;	3/1/23
  4+  92F4              ;
  5+  92F4              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  92F4
  7+  92F4              ;	ADC HL,SP	LD (addr),SP
  8+  92F4              ;	ADD HL,SP	LD SP,(addr)
  9+  92F4              ;	ADD IX,SP	LD SP,nn
 10+  92F4              ; 	ADD IY,SP	LD SP,HL
 11+  92F4              ;				LD SP,IX
 12+  92F4              ;	DEC SP		LD SP,IY
 13+  92F4
 14+  92F4              ;	EX (SP),HL
 15+  92F4              ;	EX (SP),IX
 16+  92F4              ;	EX (SP),IY
 17+  92F4
 18+  92F4              ;	INC SP
 19+  92F4
 20+  92F4
 21+  92F4                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 C4 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A C8 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 C8 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B C4 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
772   7FC0
773   7FC0              	SAVESNA "Pruebas.sna", START
774   7FC0
775   7FC0
776   7FC0
# file closed: Banco_de_pruebas.asm
