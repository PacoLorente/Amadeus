# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 41 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 00 84        	defw Badsat
  9+  83C2 32 84        	defw Badsat2
 10+  83C4 64 84        	defw Badsat3
 11+  83C6 96 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00           	db 0
 25+  83D3
 26+  83D3 05           	db %00000101
 27+  83D4 00 83        	defw Indice_Amadeus
 28+  83D6 00 00        	defw 0
 29+  83D8 CF 50        	defw $50cf
 30+  83DA 00 00 00     	db 0,0,0
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0
 33+  83E1
 34+  83E1 00 00        	db 0,0
 35+  83E3 00 00        	defw 0
 36+  83E5 00           	db 0
 37+  83E6 00 00        	db 0,0
 38+  83E8 00 00        	defw 0
 39+  83EA 00           	db 0
 40+  83EB
 41+  83EB 00 00        	db 0,0
 42+  83ED
 43+  83ED 00 00 00 00  	defw 0,0
 44+  83F1 00 00 00     	db 0,0,0
 45+  83F4
 46+  83F4 00 00        	defw 0
 47+  83F6 00 00        	defw 0
 48+  83F8 00           	db 0
 49+  83F9 00 00        	defw 0
 50+  83FB 00           	db 0
 51+  83FC
 52+  83FC 00 00 00 00  	defw 0,0
 53+  8400
 54+  8400              ; ---------- ---------- ---------- ---------- ----------
 55+  8400
 56+  8400 02 02        Badsat db 2,2
 57+  8402 00 00        	defw 0
 58+  8404 00           	db 0
 59+  8405
 60+  8405 06           	db %00000110
 61+  8406 80 81        	defw Indice_Badsat_der
 62+  8408 00 00        	defw 0
 63+  840A A1 47        	defw $47a1
 64+  840C 00 00 00     	db 0,0,0
 65+  840F
 66+  840F 01 01 01 02  	db 1,1,1,2
 67+  8413
 68+  8413 00 00        	db 0,0
 69+  8415 00 00        	defw 0
 70+  8417 00           	db 0
 71+  8418 00 00        	db 0,0
 72+  841A 00 00        	defw 0
 73+  841C 00           	db 0
 74+  841D
 75+  841D 00 00        	db 0,0
 76+  841F
 77+  841F 20 90 00 00  	defw Indice_mov_Badsat,0
 78+  8423 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 79+  8426
 80+  8426 00 00        	defw 0
 81+  8428 00 00        	defw 0
 82+  842A 00           	db 0
 83+  842B 00 00        	defw 0
 84+  842D 00           	db 0
 85+  842E
 86+  842E 00 00 00 00  	defw 0,0
 87+  8432
 88+  8432              ; ---------- ---------- ---------- ---------- ----------
 89+  8432
 90+  8432 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 91+  8434 00 00        	defw 0                                            ; Posicion_actual
 92+  8436 00           	db 0                                              ; CTRL_DESPLZ
 93+  8437
 94+  8437 02           	db %00000010
 95+  8438 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 96+  843A 00 00        	defw 0                                            ; Puntero_DESPLZ
 97+  843C 61 47        	defw $4761                                        ; Posicion_inicio
 98+  843E 00 00 00     	db 0,0,0
 99+  8441
100+  8441 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
101+  8445
102+  8445 00 00        	db 0,0
103+  8447 00 00        	defw 0
104+  8449 00           	db 0
105+  844A 00 00        	db 0,0
106+  844C 00 00        	defw 0
107+  844E 00           	db 0
108+  844F
109+  844F 00 00        	db 0,0
110+  8451
111+  8451 22 90 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
112+  8455 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
113+  8458
114+  8458 00 00        	defw 0
115+  845A 00 00        	defw 0
116+  845C 00           	db 0
117+  845D 00 00        	defw 0
118+  845F 00           	db 0
119+  8460
120+  8460 00 00 00 00  	defw 0,0
121+  8464
122+  8464              ; ---------- ---------- ---------- ---------- ----------
123+  8464
124+  8464 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
125+  8466 00 00        	defw 0                                            ; Posicion_actual
126+  8468 00           	db 0                                              ; CTRL_DESPLZ
127+  8469
128+  8469 04           	db %00000100
129+  846A 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
130+  846C 00 00        	defw 0                                            ; Puntero_DESPLZ
131+  846E 7E 47        	defw $477e                                        ; Posicion_inicio
132+  8470 00 00 00     	db 0,0,0
133+  8473
134+  8473 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
135+  8477
136+  8477 00 00        	db 0,0
137+  8479 00 00        	defw 0
138+  847B 00           	db 0
139+  847C 00 00        	db 0,0
140+  847E 00 00        	defw 0
141+  8480 00           	db 0
142+  8481
143+  8481 00 00        	db 0,0
144+  8483
145+  8483 24 90 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
146+  8487 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
147+  848A
148+  848A 00 00        	defw 0
149+  848C 00 00        	defw 0
150+  848E 00           	db 0
151+  848F 00 00        	defw 0
152+  8491 00           	db 0
153+  8492
154+  8492 00 00 00 00  	defw 0,0
155+  8496
156+  8496              ; ---------- ---------- ---------- ---------- ----------
157+  8496
158+  8496 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
159+  8498 00 00        	defw 0                                            ; Posicion_actual
160+  849A 00           	db 0                                              ; CTRL_DESPLZ
161+  849B
162+  849B 01           	db %00000001
163+  849C 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
164+  849E 00 00        	defw 0                                            ; Puntero_DESPLZ
165+  84A0 BE 47        	defw $47be                                        ; Posicion_inicio
166+  84A2 00 00 00     	db 0,0,0
167+  84A5
168+  84A5 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
169+  84A9
170+  84A9 00 00        	db 0,0
171+  84AB 00 00        	defw 0
172+  84AD 00           	db 0
173+  84AE 00 00        	db 0,0
174+  84B0 00 00        	defw 0
175+  84B2 00           	db 0
176+  84B3
177+  84B3 00 00        	db 0,0
178+  84B5
179+  84B5 26 90 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
180+  84B9 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
181+  84BC
182+  84BC 00 00        	defw 0
183+  84BE 00 00        	defw 0
184+  84C0 00           	db 0
185+  84C1 00 00        	defw 0
186+  84C3 00           	db 0
187+  84C4
188+  84C4 00 00 00 00  	defw 0,0
189+  84C8
# file closed: Base_de_datos_Sprites.asm
 21   84C8
 22   84C8              ; ******************************************************************************************************************************************************************************************
 23   84C8              ; Constantes.
 24   84C8              ; ******************************************************************************************************************************************************************************************
 25   84C8              ;
 26   84C8              ; 8/11/22
 27   84C8              ;
 28   84C8              ; Constantes generales.
 29   84C8              ;
 30   84C8
 31   84C8              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84C8              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84C8              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84C8              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84C8              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84C8
 37   84C8              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84C8              ;                               				        ; De momento situamos este almacén en $7000.
 39   84C8
 40   84C8
 41   84C8              ; ******************************************************************************************************************************************************************************************
 42   84C8              ; Variables.
 43   84C8              ; ******************************************************************************************************************************************************************************************
 44   84C8              ;
 45   84C8              ; 10/11/22
 46   84C8              ;
 47   84C8              ; Variables de DRAW. (Motor principal).
 48   84C8              ;
 49   84C8
 50   84C8 02           Filas db 2												; Filas. [DRAW]
 51   84C9 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84CA 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84CC 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 54   84CD              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 55   84CD              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 56   84CD              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 57   84CD 06           Attr db %00000110										; Atributos de la entidad:
 58   84CE
 59   84CE              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 60   84CE              ;
 61   84CE              ;	COLORES: 0 ..... NEGRO
 62   84CE              ;    		 1 ..... AZUL
 63   84CE              ; 			 2 ..... ROJO
 64   84CE              ;			 3 ..... MAGENTA
 65   84CE              ; 			 4 ..... VERDE
 66   84CE              ; 			 5 ..... CIAN
 67   84CE              ;			 6 ..... AMARILLO
 68   84CE              ; 			 7 ..... BLANCO
 69   84CE
 70   84CE 80 81        Indice_Sprite defw Indice_Badsat_der
 71   84D0 00 00        Puntero_DESPLZ defw 0
 72   84D2 A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 73   84D4 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 74   84D5 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 75   84D6 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 76   84D7
 77   84D7              ; Variables de objeto. (Características).
 78   84D7
 79   84D7 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 80   84D8 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 81   84D9 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 82   84DA 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 83   84DB
 84   84DB 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 85   84DD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 86   84DF 00           	db 0
 87   84E0 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 88   84E2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 89   84E4 00           	db 0
 90   84E5
 91   84E5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 92   84E5
 93   84E5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 94   84E6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 95   84E6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 96   84E6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
 97   84E6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
 98   84E6              ;
 99   84E6              ; 														DESCRIPCIÖN:
100   84E6              ;
101   84E6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
102   84E6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
103   84E6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
104   84E6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
105   84E6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
106   84E6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
107   84E6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
108   84E6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
109   84E6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
110   84E6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
111   84E6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
112   84E6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
113   84E6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
114   84E6              ;
115   84E6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
116   84E6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
117   84E6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
118   84E6
119   84E6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
120   84E7
121   84E7              ; Movimiento.
122   84E7
123   84E7 20 90        Puntero_indice_mov defw Indice_mov_Badsat
124   84E9 00 00        Puntero_mov defw 0
125   84EB 00           Contador_db_mov db 0
126   84EC 00           Incrementa_puntero db 0
127   84ED 00           Repetimos_db db 0
128   84EE
129   84EE
130   84EE              ; Variables de funcionamiento. [DRAW].
131   84EE
132   84EE 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
133   84F0 00 00        Puntero_datas defw 0
134   84F2 00           Columnas db 0
135   84F3 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
136   84F5              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
137   84F5 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
138   84F6
139   84F6
140   84F6              ; Cajas. Almacenes.
141   84F6
142   84F6 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
143   84F8 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
144   84FA
145   84FA              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
146   84FA
147   84FA              ; Gestión de ENTIDADES.
148   84FA
149   84FA 00 00        Puntero_store_entidades defw 0
150   84FC 00 00        Puntero_restore_entidades defw 0
151   84FE 00 00        Indice_restore defw 0
152   8500
153   8500              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
154   8500
155   8500 05           Numero_de_entidades db 5								; Nº de objetos en pantalla, (contando con Amadeus).
156   8501 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
157   8502              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
158   8502              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
159   8502              ;														; _ (Numero_de_malotes)="0".
160   8502 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
161   8504              ;														; _variable para almacenar lo posición del puntero_
162   8504              ; 														; _de pila, SP.
163   8504 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
164   8506              ;														; La utiliza la rutina [Extrae_foto_registros].
165   8506 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
166   8508              ;														; _el snapshot de los registros de la siguiente entidad.
167   8508              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
168   8508
169   8508              ; Gestión de FRAMES.
170   8508
171   8508 00           Switch db 0
172   8509
173   8509              ; Variables de Raster y localización en pantalla.
174   8509
175   8509 00 FF        Temp_Raster defw $ff00
176   850B
177   850B              ; Rutina principal *************************************************************************************************************************************************************************
178   850B              ;
179   850B              ;	14/11/22
180   850B
181   850B 31 FF FF     START ld sp,$ffff
182   850E
183   850E 3E A0        	ld a,$a0
184   8510 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
185   8512 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
186   8514 F3           	DI
187   8515
188   8515 3E 01        	ld a,1
189   8517 D3 FE        	out ($fe),a
190   8519
191   8519 3E 07        	ld a,%00000111
192   851B CD 76 8C     	call Cls
193   851E
194   851E              ;	call Pinta_FILAS
195   851E
196   851E CD 7E 86     	call Pulsa_ENTER
197   8521
198   8521              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
199   8521              ;   Inicialmente tengo cargado a Amadeus en el engine.
200   8521              ;	Pintamos el resto de entidades:
201   8521
202   8521 CD F1 85     	call Inicia_punteros_de_entidades
203   8524 21 00 85     	ld hl,Numero_de_entidades
204   8527 46           	ld b,(hl)
205   8528
206   8528 C5           1 push bc  												; Guardo el contador de entidades.
207   8529 CD 20 86      	call Inicia_sprite
208   852C CD D5 86     	call Draw
209   852F CD A0 7F     	call Guarda_foto_registros
210   8532 CD 3D 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
211   8535 C1           	pop bc
212   8536 10 F0        	djnz 1B  											; Decremento el contador de entidades.
213   8538
214   8538              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
215   8538
216   8538 CD F1 85     	call Inicia_punteros_de_entidades
217   853B CD 6C 86     	call Restore_Primera_entidad
218   853E
219   853E              ;	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
220   853E
221   853E FB           4 ei
222   853F 18 FD        	jr 4B
223   8541
224   8541              ; -----------------------------------------------------------------------------------
225   8541
226   8541              Frame
227   8541
228   8541              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
229   8541              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
230   8541
231   8541
232   8541 CD 07 86     	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
233   8544
234   8544 18 FE        	jr $
235   8546
236   8546
237   8546 3E 07            ld a,7
238   8548 D3 FE            out ($fe),a
239   854A
240   854A CD 17 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
241   854D
242   854D 3E 01            ld a,1
243   854F D3 FE            out ($fe),a
244   8551
245   8551              ; ----------------------------------------------------------------------
246   8551
247   8551 21 00 70     	ld hl,Album_de_fotos
248   8554 22 06 85         ld (Stack_snapshot),hl								; Nos situamos al principio del álbum de fotos.
249   8557
250   8557 3A 00 85         ld a,(Numero_de_entidades)
251   855A 47               ld b,a
252   855B
253   855B C5           2 push bc
254   855C
255   855C CD 7F 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
256   855F
257   855F 3A E5 84      	ld a,(Ctrl_0)
258   8562 CB 67        	bit 4,a
259   8564 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
260   8566
261   8566              ; ---------
262   8566
263   8566 CD AD 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
264   8569
265   8569 21 E5 84     	ld hl,Ctrl_0
266   856C CB A6            res 4,(hl)
267   856E
268   856E CD 3D 86     1 call Store_Restore_entidades
269   8571
270   8571 C1           	pop bc
271   8572 10 E7        	djnz 2B
272   8574
273   8574 CD F1 85     	call Inicia_punteros_de_entidades
274   8577 CD 6C 86     	call Restore_Primera_entidad
275   857A
276   857A 3E 00        	ld a,0
277   857C D3 FE        	out ($fe),a
278   857E
279   857E              ;	jr $
280   857E
281   857E C9           	ret
282   857F
283   857F              ; --------------------------------------------------------------------------------------------------------------
284   857F              ;
285   857F              Mov_obj
286   857F
287   857F CD EA 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
288   8582 CD BB 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´.
289   8585
290   8585 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla. En este caso, (Mod_puntero_datas) sitúa_
291   8587 32 E6 84     	ld (Obj_dibujado),a 								; (Puntero_datas) en la Caja_de_BORRADO.
292   858A
293   858A              ; Movemos Amadeus o enemigos...
294   858A
295   858A 3A E5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
296   858D CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
297   858F C4 92 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
298   8592
299   8592 3A E5 84     	ld a,(Ctrl_0)
300   8595 CB 77        	bit 6,a
301   8597 CC 28 90     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
302   859A
303   859A 3A E5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina si no ha habido movimiento.
304   859D CB 67        	bit 4,a
305   859F C8           	ret z
306   85A0
307   85A0              ; ---------
308   85A0
309   85A0 CD BB 85         call Prepara_var_pintado_borrado	                ; Almaceno las `VARIABLES DE PINTADO´.
310   85A3 CD D2 85         call Repone_borrar
311   85A6              ;	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
312   85A6 CD D5 86     	call Draw											; Preparamos las variables para borrar.
313   85A9 CD A0 7F     	call Guarda_foto_registros
314   85AC C9           	ret
315   85AD
316   85AD              ; --------------------------------------------------------------------------------------------------------------
317   85AD              ;
318   85AD AF           Borra_Pinta_obj xor a
319   85AE 32 E6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
320   85B1 CD DE 85     	call Repone_pintar
321   85B4              ;	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
322   85B4 CD D5 86     	call Draw
323   85B7 CD A0 7F     	call Guarda_foto_registros
324   85BA C9           	ret
325   85BB
326   85BB              ; --------------------------------------------------------------------------------------------------------------
327   85BB
328   85BB 21 C8 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85BE 3A E6 84     	ld a,(Obj_dibujado)
330   85C1 A7           	and a
331   85C2 28 05        	jr z,1F
332   85C4 11 E0 84     	ld de,Variables_de_pintado
333   85C7 18 03        	jr 2F
334   85C9 11 DB 84     1 ld de,Variables_de_borrado
335   85CC 01 05 00     2 ld bc,5
336   85CF ED B0        	ldir
337   85D1 C9           	ret
338   85D2
339   85D2 21 DB 84     Repone_borrar ld hl,Variables_de_borrado
340   85D5 11 C8 84     	ld de,Filas
341   85D8 01 05 00     	ld bc,5
342   85DB ED B0        	ldir
343   85DD C9           	ret
344   85DE
345   85DE 21 E0 84     Repone_pintar ld hl,Variables_de_pintado
346   85E1 11 C8 84     	ld de,Filas
347   85E4 01 05 00     	ld bc,5
348   85E7 ED B0        	ldir
349   85E9 C9           	ret
350   85EA
351   85EA 2A F6 84     Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   85ED 22 F8 84     	ld (Caja_de_BORRADO),hl
353   85F0 C9           	ret
354   85F1
355   85F1              ; *************************************************************************************************************************************************************
356   85F1              ;
357   85F1              ; 21/10/22
358   85F1              ;
359   85F1              ; Sitúa el puntero (Puntero_store_entidades) en la 1ª entidad del índice.
360   85F1              ; Sitúa el puntero (Puntero_restore_entidades) en la 2ª entidad del índice.
361   85F1              ; Destruye HL y DE !!!!!
362   85F1
363   85F1 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
364   85F4 CD 1A 86         call Extrae_address
365   85F7 22 FA 84         ld (Puntero_store_entidades),hl
366   85FA
367   85FA 21 C2 83     	ld hl,Indice_de_entidades+2
368   85FD 22 FE 84     	ld (Indice_restore),hl
369   8600 CD 1A 86     	call Extrae_address
370   8603 22 FC 84     	ld (Puntero_restore_entidades),hl
371   8606
372   8606 C9               ret
373   8607
374   8607              ; -------------------------------------------------------------------------------------------------------------
375   8607              ;
376   8607              ; 7/1/23
377   8607              ;
378   8607
379   8607 2A 06 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   860A AF           	xor a
381   860B 67           	ld h,a
382   860C 7D           	ld a,l
383   860D D6 06        1 sub 6
384   860F 28 03        	jr z,2F
385   8611 24           	inc h
386   8612 18 F9        	jr 1B
387   8614 24           2 inc h
388   8615 7C           	ld a,h
389   8616 32 01 85     	ld (Numero_de_malotes),a
390   8619 C9           	ret
391   861A
392   861A              ; *************************************************************************************************************************************************************
393   861A              ;
394   861A              ; 20/10/22
395   861A              ;
396   861A              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   861A              ;
398   861A              ; Destruye el puntero y DE !!!!!
399   861A
400   861A 5E           Extrae_address ld e,(hl)
401   861B 23           	inc hl
402   861C 56           	ld d,(hl)
403   861D 2B           	dec hl
404   861E EB           	ex de,hl
405   861F C9           	ret
406   8620
407   8620              ; *************************************************************************************************************************************************************
408   8620              ;
409   8620              ;	21/9/22
410   8620              ;
411   8620              ;   Destruye HL !!!!!,
412   8620
413   8620 2A CE 84     Inicia_sprite ld hl,(Indice_Sprite)
414   8623 22 D0 84     	ld (Puntero_DESPLZ),hl
415   8626 CD 1A 86     	call Extrae_address
416   8629 22 EE 84     	ld (Puntero_objeto),hl
417   862C
418   862C              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   862C
420   862C 21 10 83     	ld hl,Amadeus
421   862F ED 4B EE 84  	ld bc,(Puntero_objeto)
422   8633 B7 ED 42     	sub hl,bc
423   8636 C0           	ret nz
424   8637
425   8637 21 E5 84     	ld hl,Ctrl_0
426   863A CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   863C
428   863C C9            	ret 												; _de nuestra nave en los extremos.
429   863D
430   863D              ; *************************************************************************************************************************************************************
431   863D              ;
432   863D              ;	22/10/22
433   863D              ;
434   863D              ;	Almacena los datos del Sprite que tenemos cargado en DRAW, en su respectiva BASE DE DATOS.
435   863D
436   863D              Store_Restore_entidades
437   863D
438   863D E5           	push hl
439   863E D5           	push de
440   863F C5            	push bc
441   8640
442   8640              ;	STORE !!!!!
443   8640
444   8640 21 C8 84     	ld hl,Filas
445   8643 ED 5B FA 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
446   8647 01 32 00     	ld bc,50
447   864A ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
448   864C
449   864C              ;	Incrementa STORE y ejecuta RESTORE !!!!!
450   864C
451   864C 2A FC 84     	ld hl,(Puntero_restore_entidades)
452   864F 22 FA 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
453   8652 11 C8 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
454   8655 01 32 00     	ld bc,50
455   8658 ED B0        	ldir
456   865A
457   865A              ;	Incrementa RESTORE !!!!!
458   865A
459   865A 2A FE 84         ld hl,(Indice_restore)
460   865D 23           	inc hl
461   865E 23           	inc hl
462   865F 22 FE 84     	ld (Indice_restore),hl
463   8662 CD 1A 86         call Extrae_address
464   8665 22 FC 84         ld (Puntero_restore_entidades),hl
465   8668
466   8668 C1           	pop bc
467   8669 D1           	pop de
468   866A E1           	pop hl
469   866B
470   866B C9           	ret
471   866C
472   866C              ; **************************************************************************************************
473   866C              ;
474   866C              ;	29/10/22
475   866C              ;
476   866C              ;	Cargamos los datos de la 1º entidad en el `engine'.
477   866C
478   866C E5           Restore_Primera_entidad push hl
479   866D D5           	push de
480   866E C5            	push bc
481   866F 2A FA 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
482   8672 11 C8 84     	ld de,Filas
483   8675 01 32 00     	ld bc,50
484   8678 ED B0        	ldir
485   867A C1           	pop bc
486   867B D1           	pop de
487   867C E1           	pop hl
488   867D
489   867D C9           	ret
490   867E
491   867E              ; *************************************************************************************************************************************************************
492   867E              ;
493   867E              ; Teclado.
494   867E
495   867E 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
496   8680 DB FE        	in a,($fe)
497   8682 E6 01        	and $01
498   8684 28 02        	jr z,1f
499   8686 18 F6        	jr Pulsa_ENTER
500   8688 C9           1 ret
501   8689
502   8689              ; **************************************************************************************************
503   8689              ;
504   8689              ; Temporización.
505   8689
506   8689              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
507   8689              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
508   8689              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
509   8689              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
510   8689
511   8689              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
512   8689              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
513   8689              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
514   8689
515   8689              ; A partir de $4f61 no hace falta DELAY.
516   8689
517   8689              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
518   8689
519   8689 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
520   868C 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
521   868D 78           	LD A,B
522   868E A7           	AND A
523   868F 20 FB        	JR NZ,wait
524   8691 C9           	RET
525   8692
526   8692              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
527   8692              ;
528   8692              ;	21/4/22
529   8692
530   8692              Movimiento_Amadeus
531   8692
532   8692 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
533   8694 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
534   8696 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
535   8698 CC EF 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
536   869B 3E F7        	ld a,$f7
537   869D DB FE        	in a,($fe)
538   869F E6 01        	and $01
539   86A1 C8           	ret z
540   86A2 3E F7        	ld a,$f7
541   86A4 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
542   86A6 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
543   86A8 CC E0 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
544   86AB C9               ret
545   86AC
546   86AC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
547   86AC
548   86AC              ; Pinta indicadores de FILAS. ------------------------------------------------------
549   86AC
550   86AC 21 10 40     Pinta_FILAS ld hl,$4010
551   86AF              ;	ld b,9
552   86AF              ;2 push hl
553   86AF              ;	push bc
554   86AF 06 BF        	ld b,$bf
555   86B1 36 80        1 ld (hl),%10000000
556   86B3 CD F3 89     	call NextScan
557   86B6 10 F9        	djnz 1B
558   86B8              ;	pop bc
559   86B8              ;	pop hl
560   86B8              ;	inc l
561   86B8              ;	djnz 2B
562   86B8
563   86B8 06 03        	ld b,3
564   86BA 21 00 47         ld hl,$4700
565   86BD CD C3 86     3 call Bucle_1
566   86C0 10 FB            djnz 3B
567   86C2 C9               ret
568   86C3
569   86C3 C5           Bucle_1 push bc
570   86C4 E5                   push hl
571   86C5 D1                   pop de
572   86C6 13                   inc de
573   86C7 01 FF 00             ld bc,255
574   86CA 36 FF                ld (hl),255
575   86CC ED B0                ldir
576   86CE 23                   inc hl
577   86CF 3E 07                ld a,7
578   86D1 84                   add a,h
579   86D2 67                   ld h,a
580   86D3 C1                   pop bc
581   86D4 C9                   ret
582   86D5
583   86D5              ; ---------------------------------------------------------------
584   86D5
585   86D5              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86D5              ; ******************************************************************************************************************************************************************************************
  2+  86D5              ;
  3+  86D5              ; 17/08/22
  4+  86D5              ;
  5+  86D5              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86D5
  7+  86D5 CD E7 89     Draw call Prepara_draw
  8+  86D8 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86D9 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86DA 28 05        	jr z,2F
 11+  86DC 3A D4 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86DF 18 0C        	jr 1F
 13+  86E1 2A D2 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86E4 22 CA 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86E7 CD 78 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86EA              ;													; _la esquina superior izquierda de la pantalla.
 17+  86EA CD AA 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86ED 3A E5 84     1 ld a,(Ctrl_0)
 19+  86F0 CB 6F        	bit 5,a
 20+  86F2 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  86F4
 22+  86F4 CD 0C 87     	call Comprueba_limite_horizontal
 23+  86F7 CD 9F 87     	call Comprueba_limite_vertical
 24+  86FA
 25+  86FA              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  86FA
 27+  86FA CD 21 89     3 call calcula_CColumnass
 28+  86FD CD 58 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8700 CD AD 89     	call Define_rutina_de_impresion
 30+  8703
 31+  8703 3A E5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8706 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8708 32 E5 84     	ld (Ctrl_0),a
 34+  870B
 35+  870B C9           	ret
 36+  870C
 37+  870C              ; *******************************************************************************************************************************************************************************************
 38+  870C              ;	23/8/22
 39+  870C              ;
 40+  870C              ; 	Comprueba_limite_horizontal.
 41+  870C              ;
 42+  870C
 43+  870C 3A E6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  870F A7           	and a
 45+  8710 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  8711
 47+  8711 3A E5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8714 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8716 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  8718
 51+  8718 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  871A 32 E5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  871D 18 09            jr 6F
 54+  871F CB 5F        1 bit 3,a
 55+  8721 28 0D            jr z,2F
 56+  8723 E6 F7            and $f7
 57+  8725 32 E5 84         ld (Ctrl_0),a
 58+  8728 CD 78 88     6 call Inicializacion
 59+  872B F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  872C 08           	ex af,af
 61+  872D F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  872E 18 56            jr 5F
 63+  8730 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  8731
 65+  8731              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  8731              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  8731
 68+  8731 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8732 2A F3 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8735 CD 3E 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  8738 67           	ld h,a
 72+  8739 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  873A CD 3E 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  873D 67           	ld h,a
 75+  873E A7           	and a
 76+  873F ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  8741
 78+  8741 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8742 FE 02        	cp 2
 80+  8744 38 1C        	jr c,3F
 81+  8746 28 1A        	jr z,3F
 82+  8748
 83+  8748 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8749 28 21            jr z,7F
 85+  874B 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  874D              ;	ld e,0
 87+  874D E1           	pop hl
 88+  874E
 89+  874E              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  874E              ; _para indicar con E="2" en caso necesario.
 91+  874E
 92+  874E E5               push hl
 93+  874F C5               push bc
 94+  8750
 95+  8750 CD 3E 8C     	call calcula_tercio
 96+  8753 FE 01        	cp 1
 97+  8755 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8757
 99+  8757 CD 87 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  875A 28 26            jr z,9F
101+  875C 38 24            jr c,9F
102+  875E 1E 00        11 ld e,0
103+  8760 18 22            jr 8F
104+  8762
105+  8762 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8763 28 07        	jr z, 7F
107+  8765 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  8767 1E 00         	ld e,0
109+  8769 E1           	pop hl
110+  876A 18 04        	jr 4F
111+  876C 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  876E 18 15            jr 10F
113+  8770
114+  8770              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  8770              ; _para indicar con E="2" en caso necesario.
116+  8770
117+  8770 E5           4 push hl
118+  8771 C5               push bc
119+  8772
120+  8772 CD 3E 8C     	call calcula_tercio
121+  8775 FE 01        	cp 1
122+  8777 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  8779
124+  8779 CD 87 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  877C 28 04            jr z,9F
126+  877E 30 02            jr nc,9F
127+  8780 18 02        	jr 8F
128+  8782 1E 02        9 ld e,2
129+  8784 C1           8 pop bc
130+  8785 E1           10 pop hl
131+  8786 C9           5 ret
132+  8787
133+  8787              ; --------------------
134+  8787              ;
135+  8787              ; 25/08/22
136+  8787
137+  8787 CD 3E 8C     Comprueba_centro call calcula_tercio
138+  878A 67               ld h,a
139+  878B 08           	ex af,af
140+  878C FE 02        	cp 2
141+  878E 38 07        	jr c,1F
142+  8790 28 05        	jr z,1F
143+  8792 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  8795 18 03        	jr 2F
145+  8797 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  879A 08           2 ex af,af
147+  879B A7               and a
148+  879C ED 42            sbc hl,bc
149+  879E C9               ret
150+  879F
151+  879F              ; *********************************************************************************************************************************************************************************************
152+  879F              ;
153+  879F              ;   16/8/22
154+  879F              ;
155+  879F              ;	Comprueba_limite_vertical
156+  879F              ;
157+  879F              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  879F              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  879F              ;
160+  879F
161+  879F 3A E6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87A2 A7           	and a
163+  87A3 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87A4
165+  87A4 7D           	ld a,l
166+  87A5 E6 1F        	and $1F
167+  87A7 57           	ld d,a
168+  87A8 3A F5 84     	ld a,(Limite_vertical)
169+  87AB BA           	cp d 											; Límite - Posición.
170+  87AC
171+  87AC 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87AD CB 47        	bit 0,a
173+  87AF 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87B1
175+  87B1              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87B1
177+  87B1 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87B2 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87B4
180+  87B4               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87B4              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87B4
183+  87B4 3A D5 84         ld a,(Coordenada_X)
184+  87B7 16 0F            ld d,Centro_izquierda
185+  87B9 A7               and a
186+  87BA 92               sub d 											 ; Posición - Centro_izquierda.
187+  87BB
188+  87BB 28 21            jr z,3F
189+  87BD 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87BF              ;                                                    ; _salimos sin modificar nada.
191+  87BF 18 0E            jr 2F
192+  87C1
193+  87C1 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87C2 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87C4
196+  87C4              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87C4              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87C4
199+  87C4 3A D5 84         ld a,(Coordenada_X)
200+  87C7 16 10            ld d,Centro_derecha
201+  87C9 A7               and a
202+  87CA 92               sub d
203+  87CB
204+  87CB 28 11            jr z,3F
205+  87CD 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87CF              ;                                                    ; _salimos sin modificar nada.
207+  87CF CB 43        2 bit 0,e
208+  87D1 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87D3 C5           	push bc
210+  87D4 CD 67 88         call Modificaccionne
211+  87D7 C1           	pop bc
212+  87D8 CD 78 88         call Inicializacion
213+  87DB F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87DC 08           	ex af,af
215+  87DD F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87DE C9           3 ret 				 								 ; Salimos de la rutina.
217+  87DF
218+  87DF              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87DF
220+  87DF C5           4 push bc
221+  87E0 01 C9 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87E3 0A           	ld a,(bc)
223+  87E4 3D           	dec a
224+  87E5 47           	ld b,a 											 ; Columnas-1 en B.
225+  87E6 7D           	ld a,l
226+  87E7 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87E8 CB 47        	bit 0,a
228+  87EA 28 03        	jr z,5F
229+  87EC 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87ED 18 2E        	jr 7F
231+  87EF
232+  87EF              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87EF
234+  87EF 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87F0 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87F1 3A E5 84     	ld a,(Ctrl_0)
237+  87F4 CB 4F        	bit 1,a
238+  87F6 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  87F8 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  87F9
241+  87F9              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  87F9
243+  87F9 1C               inc e
244+  87FA 1D               dec e
245+  87FB 20 07            jr nz,12F
246+  87FD 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  87FE 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  87FF 22 CA 84     	ld (Posicion_actual),hl
249+  8802 18 44        13 jr 9F
250+  8804
251+  8804 CB 43        12 bit 0,e
252+  8806 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  8808              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  8808 C1           	pop bc
255+  8809 18 D3        	jr 3B
256+  880B
257+  880B 80           14 add b
258+  880C 6F               ld l,a
259+  880D 22 CA 84     	ld (Posicion_actual),hl
260+  8810 CD 67 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8813 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8815
263+  8815 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  8817 32 E5 84         ld (Ctrl_0),a
265+  881A F1           	pop af
266+  881B 18 2B        	jr 9F
267+  881D
268+  881D              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  881D
270+  881D F5           7 push af
271+  881E 3A E5 84     	ld a,(Ctrl_0)
272+  8821 CB 47        	bit 0,a
273+  8823 20 1D        	jr nz,8F
274+  8825 F1           	pop af
275+  8826
276+  8826              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8826
278+  8826 1C           	inc e
279+  8827 1D               dec e
280+  8828 20 07            jr nz,10F
281+  882A
282+  882A 90           	sub b
283+  882B 6F               ld l,a
284+  882C 22 CA 84     	ld (Posicion_actual),hl
285+  882F 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  8831              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  8831 CB 43        10 bit 0,e
288+  8833 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8835              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8835 C1           	pop bc
291+  8836 18 A6        	jr 3B
292+  8838
293+  8838 90           16 sub b
294+  8839 6F               ld l,a
295+  883A 22 CA 84     	ld (Posicion_actual),hl
296+  883D CD 67 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  8840 18 06            jr 9F
298+  8842
299+  8842 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8844 32 E5 84         ld (Ctrl_0),a
301+  8847 F1           	pop af
302+  8848
303+  8848 C1           9 pop bc
304+  8849              ;	ld e,0
305+  8849 CD 78 88         call Inicializacion
306+  884C F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  884D 08           	ex af,af
308+  884E F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  884F 18 8D            jr 3B
310+  8851
311+  8851              ; --------------------
312+  8851
313+  8851              Modifica_Pos_actual
314+  8851
315+  8851              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  8851 05               dec B                                           ; Scanlines-1 en B.
317+  8852 CD 05 8A     1 call PreviousScan
318+  8855 10 FB            djnz 1B
319+  8857 22 CA 84     	ld (Posicion_actual),hl
320+  885A AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  885B C9           	ret
322+  885C
323+  885C              ; --------------------
324+  885C
325+  885C              Modifica_Pos_actual2
326+  885C
327+  885C              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  885C 05               dec B                                           ; Scanlines-1 en B.
329+  885D CD F3 89     1 call NextScan
330+  8860 10 FB            djnz 1B
331+  8862 22 CA 84     	ld (Posicion_actual),hl
332+  8865 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8866 C9           	ret
334+  8867
335+  8867              ; --------------------
336+  8867
337+  8867              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  8867              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  8867
340+  8867 08           Modificaccionne ex af,af
341+  8868 FE 02            cp 2
342+  886A F5               push af                                         ; Guardo el resultado de la comparación.
343+  886B 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  886C F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  886D CC 51 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  8870 DC 51 88         call c,Modifica_Pos_actual
347+  8873 C8           	ret z
348+  8874 CD 5C 88         call Modifica_Pos_actual2
349+  8877 C9               ret
350+  8878
351+  8878              ; *************************************************************************************************************************************************************************************************
352+  8878              ;
353+  8878              ;	13/8/22
354+  8878              ;
355+  8878              ;	Inicializacion
356+  8878              ;
357+  8878              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  8878              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  8878              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  8878              ;
361+  8878              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  8878              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  8878              ;	_ desaparece/aparece.
364+  8878
365+  8878              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  8878              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  8878              ;
368+  8878              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  8878              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  8878              ; 		   [E] ="0"
371+  8878
372+  8878              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  8878
374+  8878 CD 3E 8C     Inicializacion call calcula_tercio
375+  887B 28 39        	jr z,primit
376+  887D E6 02        	and 2
377+  887F 20 07        	jr nz,segmit
378+  8881 7D           	ld a,l
379+  8882 FE 7F        	cp $7f
380+  8884 38 30        	jr c,primit
381+  8886 28 2E        	jr z,primit
382+  8888 CD 1B 89     segmit call column
383+  888B 38 13        	jr c,tercuad
384+  888D 3E 04        cuarcuad ld a,4
385+  888F 32 D4 84     	ld (Cuad_objeto),a
386+  8892 21 20 48     	ld hl,$4820
387+  8895 22 F3 84     	ld (Limite_horizontal),hl
388+  8898 21 F5 84     	ld hl,Limite_vertical
389+  889B 36 0D        	ld (hl),$0d
390+  889D 08           	ex af,af
391+  889E 18 45        	jr 1F
392+  88A0 CD EE 88     tercuad	call Fija_punteros
393+  88A3 3E 03        	ld a,3
394+  88A5 32 D4 84     	ld (Cuad_objeto),a
395+  88A8 21 20 48     	ld hl,$4820
396+  88AB 22 F3 84     	ld (Limite_horizontal),hl
397+  88AE 21 F5 84     	ld hl,Limite_vertical
398+  88B1 36 12        	ld (hl),$12
399+  88B3 08           	ex af,af
400+  88B4 18 2F        	jr 1F
401+  88B6 CD 1B 89     primit call column
402+  88B9 38 16        	jr c, primcuad
403+  88BB CD EE 88     segcuad call Fija_punteros
404+  88BE 3E 02        	ld a,2
405+  88C0 32 D4 84     	ld (Cuad_objeto),a
406+  88C3 21 C0 4F     	ld hl,$4fc0
407+  88C6 22 F3 84     	ld (Limite_horizontal),hl
408+  88C9 21 F5 84     	ld hl,Limite_vertical
409+  88CC 36 0D        	ld (hl),$0d
410+  88CE 08           	ex af,af
411+  88CF 18 14        	jr 1F
412+  88D1 CD EE 88     primcuad call Fija_punteros
413+  88D4 3E 01        	ld a,1
414+  88D6 32 D4 84     	ld (Cuad_objeto),a
415+  88D9 21 C0 4F     	ld hl,$4fc0
416+  88DC 22 F3 84     	ld (Limite_horizontal),hl
417+  88DF 21 F5 84     	ld hl,Limite_vertical
418+  88E2 36 12        	ld (hl),$12
419+  88E4 08           	ex af,af
420+  88E5 CD B0 8F     1 call Genera_coordenadas
421+  88E8 21 E5 84     	ld hl,Ctrl_0
422+  88EB CB EE        	set 5,(hl)
423+  88ED C9           	ret
424+  88EE
425+  88EE              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
426+  88EE              ;
427+  88EE              ;	14/9/22
428+  88EE              ;
429+  88EE              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
430+  88EE              ;
431+  88EE              ;	La rutina fija el puntero de dibujado/borrado.
432+  88EE              ;
433+  88EE              ;	Función:
434+  88EE              ;
435+  88EE              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
436+  88EE
437+  88EE C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
438+  88EF D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
439+  88F0 3A E6 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
440+  88F3 A7           	and a
441+  88F4 28 0E        	jr z,1F
442+  88F6 3A CC 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
443+  88F9 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
444+  88FA 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
445+  88FC 2A F8 84     	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
446+  88FF 22 EE 84     	ld (Puntero_objeto),hl
447+  8902 18 14        	jr 3F
448+  8904 3A CC 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
449+  8907 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
450+  8908 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
451+  890A 2A F6 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
452+  890D 22 EE 84     	ld (Puntero_objeto),hl
453+  8910 18 06        	jr 3F
454+  8912 2A EE 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
455+  8915 22 EE 84     	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
456+  8918 D1           3 pop de
457+  8919 C1           	pop bc
458+  891A C9           	ret
459+  891B
460+  891B              ; ------------------------------------------------------------------------------------------------------------------
461+  891B
462+  891B              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
463+  891B              ;
464+  891B              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
465+  891B
466+  891B 7D           column ld a,l
467+  891C E6 1F        	and $1f
468+  891E FE 10         	cp $10
469+  8920 C9            	ret
470+  8921
471+  8921              ; --------------------------------------------------------------------------------------------------------------------
472+  8921              ;
473+  8921              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
474+  8921              ;
475+  8921              ; 14/12/22
476+  8921              ;
477+  8921              ;	Modifica: A y BC.
478+  8921
479+  8921 3A D4 84     calcula_CColumnass ld a,(Cuad_objeto)
480+  8924 E6 01        	and 1
481+  8926 28 17        	jr z,1F
482+  8928
483+  8928              ; Nos encontramos en la parte izquierda de la pantalla
484+  8928
485+  8928 3A D5 84     	ld a,(Coordenada_X)
486+  892B 47           	ld b,a
487+  892C 04           	inc b											; (Coordenada_X)+1 en B.
488+  892D 79           	ld a,c
489+  892E 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
490+  892F 38 08        	jr c,2F
491+  8931 47           	ld b,a
492+  8932 79           	ld a,c
493+  8933 90           	sub b
494+  8934 32 F2 84     	ld (Columnas),a
495+  8937 18 1B        	jr 4F
496+  8939 79           2 ld a,c
497+  893A 32 F2 84     	ld (Columnas),a
498+  893D 18 15        	jr 4F
499+  893F
500+  893F              ; Nos encontramos en la parte derecha de la pantalla.
501+  893F
502+  893F 3A D5 84     1 ld a,(Coordenada_X)
503+  8942 81           	add c
504+  8943 3D           	dec a
505+  8944 D6 1F        	sub $1f
506+  8946 38 08        	jr c,3F
507+  8948 47           	ld b,a
508+  8949 79           	ld a,c
509+  894A 90           	sub b
510+  894B 32 F2 84     	ld (Columnas),a
511+  894E 18 04        	jr 4F
512+  8950 79           3 ld a,c
513+  8951 32 F2 84     	ld (Columnas),a
514+  8954 D9           4 exx
515+  8955 4F           	ld c,a
516+  8956 D9           	exx
517+  8957 C9            ret
518+  8958
519+  8958              ; --------------------------------------------------------------------------------------------------------------------
520+  8958              ;
521+  8958              ; 7/1/23
522+  8958              ;
523+  8958              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
524+  8958              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
525+  8958              ;
526+  8958              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
527+  8958              ;	DESTRUYE: HL,B Y A.
528+  8958
529+  8958 3A D4 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
530+  895B FE 02        	cp 2
531+  895D 38 18        	jr c,1F
532+  895F 28 16        	jr z,1F
533+  8961 E6 01        	and 1
534+  8963 28 0D        	jr z,3F
535+  8965
536+  8965              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
537+  8965
538+  8965 CD A1 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
539+  8968
540+  8968 7D           9 ld a,l
541+  8969 E6 1F        	and $1f
542+  896B 28 2A        	jr z,7F
543+  896D 2B           	dec hl
544+  896E 10 F8        	djnz 9B
545+  8970 18 25        	jr 7F
546+  8972
547+  8972              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
548+  8972
549+  8972 2A CA 84     3 ld hl,(Posicion_actual)
550+  8975 18 20        	jr 7F
551+  8977
552+  8977 28 14        1 jr z,2F
553+  8979
554+  8979              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
555+  8979
556+  8979 CD A1 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
557+  897C 7D           4 ld a,l
558+  897D E6 1F        	and $1f
559+  897F 28 03        	jr z,6F
560+  8981 2B           	dec hl
561+  8982 10 F8        	djnz 4B
562+  8984 06 0F        6 ld b,15
563+  8986 CD 05 8A     5 call PreviousScan
564+  8989 10 FB        	djnz 5B
565+  898B 18 0A        	jr 7F
566+  898D
567+  898D              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
568+  898D
569+  898D CD A1 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
570+  8990 06 0F        	ld b,15
571+  8992 CD 05 8A     8 call PreviousScan
572+  8995 10 FB        	djnz 8B
573+  8997
574+  8997 E5           7 push hl
575+  8998 DD E1        	pop ix
576+  899A
577+  899A 2A EE 84     	ld hl,(Puntero_objeto)
578+  899D E5           	push hl
579+  899E FD E1        	pop iy
580+  89A0
581+  89A0 C9           	ret
582+  89A1
583+  89A1              ; --------------------------------------------------------------------------------------------------------------------
584+  89A1              ;
585+  89A1              ;	2/1/23
586+  89A1              ;
587+  89A1              ;	Sub-rutina de [Calcula_puntero_de_impresion].
588+  89A1              ;
589+  89A1              ;	Tras esta rutina tenemos:
590+  89A1              ;
591+  89A1              ;	OUTPUT: HL contiene (Posicion_actual).
592+  89A1              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
593+  89A1              ;
594+  89A1              ;	DESTRUYE!!!!! HL,B y A.
595+  89A1
596+  89A1 2A CA 84     Operandos ld hl,(Posicion_actual)
597+  89A4 3A F2 84     	ld a,(Columnas)
598+  89A7 3D           	dec a
599+  89A8 20 01        	jr nz,1F
600+  89AA 3C           	inc a
601+  89AB 47           1 ld b,a
602+  89AC C9           	ret
603+  89AD
604+  89AD              ; --------------------------------------------------------------------------------------------------------------------
605+  89AD              ;
606+  89AD              ;	3/1/23
607+  89AD              ;
608+  89AD              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
609+  89AD              ;
610+  89AD              ;	Destruye: A,B,HL y DE.
611+  89AD
612+  89AD              Define_rutina_de_impresion
613+  89AD
614+  89AD 3A C9 84     	ld a,(Columns)
615+  89B0 47           	ld b,a
616+  89B1 3A F2 84     	ld a,(Columnas)
617+  89B4 B8           	cp b
618+  89B5 20 0D        	jr nz,2f
619+  89B7
620+  89B7              ;	La entidad se imprime entera.
621+  89B7
622+  89B7 21 4B 8A     	ld hl, Indice_entidades_completas
623+  89BA E6 01        	and 1
624+  89BC 28 02        	jr z,1F
625+  89BE
626+  89BE 23           	inc hl
627+  89BF 23           	inc hl
628+  89C0
629+  89C0 CD 1A 86     1 call Extrae_address
630+  89C3 C9           	ret		;	ret
631+  89C4
632+  89C4              ;	La entidad no se imprime entera en pantalla.
633+  89C4
634+  89C4 3A D4 84     2 ld a,(Cuad_objeto)
635+  89C7 E6 01        	and 1
636+  89C9 28 17        	jr z,3F
637+  89CB
638+  89CB              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
639+  89CB
640+  89CB 21 4F 8A     	ld hl, Indice_entidades_incompletas_izquierda
641+  89CE 3A C9 84     4 ld a,(Columns)
642+  89D1 E6 01        	and 1
643+  89D3 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
644+  89D5
645+  89D5 23           	inc hl
646+  89D6 23           	inc hl
647+  89D7
648+  89D7 3A F2 84     	ld a,(Columnas)
649+  89DA E6 01        	and 1
650+  89DC 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
651+  89DE
652+  89DE 23           	inc hl
653+  89DF 23           	inc hl
654+  89E0
655+  89E0 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
656+  89E2
657+  89E2 21 55 8A     3 ld hl, Indice_entidades_incompletas_derecha
658+  89E5 18 E7        	jr 4B
659+  89E7
660+  89E7              ; --------------------------------------------------------------------------------------------------------------------
661+  89E7              ;
662+  89E7              ;	Prepara_draw
663+  89E7              ;
664+  89E7              ;	Es una rutina de carga.
665+  89E7              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
666+  89E7              ;
667+  89E7              ;	FUNCIONAMIENTO:
668+  89E7              ;
669+  89E7              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
670+  89E7              ;	- LD (Posicion_actual) del objeto en [HL].
671+  89E7              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
672+  89E7              ;
673+  89E7              ;	DESTRUYE:
674+  89E7              ;
675+  89E7              ;	Logicamente, BC,HL y E quedan destruidos.
676+  89E7
677+  89E7 21 C8 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
678+  89EA 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
679+  89EB 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
680+  89EC 4E           	ld c,(hl)
681+  89ED 2A CA 84     	ld hl,(Posicion_actual)
682+  89F0 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
683+  89F2 C9           	ret
684+  89F3
685+  89F3              ;----------------------------------------------------------------------------------------------------------------
686+  89F3              ;
687+  89F3              ;	5/08/22
688+  89F3              ;
689+  89F3              ;   NextScan.
690+  89F3              ;
691+  89F3              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
692+  89F3              ;
693+  89F3              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
694+  89F3              ;
695+  89F3              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
696+  89F3              ;
697+  89F3              ;       DESTRUIDOS: AF y HL !!!
698+  89F3              ;
699+  89F3              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
700+  89F3              ;
701+  89F3
702+  89F3 24           NextScan inc h          ; Incrementamos el scanline.
703+  89F4 7C               ld a,h
704+  89F5 E6 07            and 7
705+  89F7 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
706+  89F8
707+  89F8 CD B0 8F     	call Genera_coordenadas
708+  89FB
709+  89FB 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
710+  89FC C6 20            add a,$20           ; Vamos a comprobarlo...
711+  89FE 6F               ld l,a
712+  89FF D8               ret c               ; Salimos si se produce el cambio de tercio.
713+  8A00
714+  8A00 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
715+  8A01 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
716+  8A03 67               ld h,a
717+  8A04 C9               ret
718+  8A05
719+  8A05              ;----------------------------------------------------------------------------------------------------------------
720+  8A05              ;
721+  8A05              ;	5/08/22
722+  8A05              ;
723+  8A05              ;   PreviousScan.
724+  8A05              ;
725+  8A05              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
726+  8A05              ;
727+  8A05              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
728+  8A05              ;
729+  8A05              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
730+  8A05              ;
731+  8A05              ;       DESTRUIDOS: AF y HL !!!
732+  8A05              ;
733+  8A05              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
734+  8A05              ;
735+  8A05
736+  8A05 7C           PreviousScan ld a,h
737+  8A06 25               dec h               ; Dec H.
738+  8A07 E6 07            and 7
739+  8A09 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
740+  8A0A
741+  8A0A CD B0 8F     	call Genera_coordenadas
742+  8A0D
743+  8A0D 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
744+  8A0E D6 20            sub $20             ; Vamos a comprobarlo...
745+  8A10 6F               ld l,a
746+  8A11 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
747+  8A12
748+  8A12 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
749+  8A13 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
750+  8A15 67               ld h,a
751+  8A16 C9               ret
752+  8A17
753+  8A17              ; -----------------------------------------------------------------------------------
754+  8A17              ;
755+  8A17              ;	07/01/23
756+  8A17
757+  8A17 ED 73 02 85  Extrae_foto_registros ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
758+  8A1B 31 00 70     	ld sp,Album_de_fotos
759+  8A1E FD E1        2 pop iy																	; (Puntero_objeto) en IY.
760+  8A20 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
761+  8A21 D1           	pop de																	; Dirección de la rutina de impresión en DE.
762+  8A22
763+  8A22 ED 73 04 85  	ld (Stack_2),sp
764+  8A26 ED 7B 02 85  	ld sp,(Stack)
765+  8A2A 3E CD        	ld a,$cd
766+  8A2C 32 34 8A     	ld (Imprime),a
767+  8A2F EB           	ex de,hl
768+  8A30 22 35 8A     	ld (Imprime+1),hl
769+  8A33 EB           	ex de,hl
770+  8A34
771+  8A34 00 00 00     Imprime db 0,0,0
772+  8A37 ED 73 02 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
773+  8A3B 3A 01 85     	ld a,(Numero_de_malotes)
774+  8A3E 3D           	dec a
775+  8A3F 28 09        	jr z,1F
776+  8A41 32 01 85      	ld (Numero_de_malotes),a
777+  8A44 ED 7B 04 85  	ld sp,(Stack_2)
778+  8A48 18 D4        	jr 2B
779+  8A4A C9           1 ret
780+  8A4B
781+  8A4B
# file closed: Draw_XOR.asm
586   8A4B              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A4B              ;   índices de Rutinas de impresión.
  2+  8A4B
  3+  8A4B 5B 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A4D 84 8A            defw Pinta_Amadeus_3x2
  5+  8A4F
  6+  8A4F CE 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A51 6E 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A53 22 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A55
 10+  8A55 F8 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A57 FC 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A59 B0 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A5B
 14+  8A5B
 15+  8A5B              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A5B              ;
 17+  8A5B              ;   12/12/22
 18+  8A5B              ;
 19+  8A5B              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A5B              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A5B              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A5B              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A5B              ;
 24+  8A5B              ;   Modifica: DE y HL.
 25+  8A5B
 26+  8A5B ED 73 02 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A5F FD F9        	ld sp,iy
 28+  8A61 06 10            ld b,16
 29+  8A63 D1           1 pop de
 30+  8A64 73           	ld (hl),e
 31+  8A65 23           	inc hl
 32+  8A66 72           	ld (hl),d
 33+  8A67 2B           	dec hl
 34+  8A68
 35+  8A68 24           	inc h
 36+  8A69 7C               ld a,h
 37+  8A6A E6 07            and 7
 38+  8A6C 20 0A            jr nz,2F
 39+  8A6E
 40+  8A6E 7D               ld a,l
 41+  8A6F C6 20            add a,$20
 42+  8A71 6F               ld l,a
 43+  8A72 38 04            jr c,2F
 44+  8A74
 45+  8A74 7C               ld a,h
 46+  8A75 D6 08            sub 8
 47+  8A77 67               ld h,a
 48+  8A78
 49+  8A78 7C           2 ld a,h
 50+  8A79 FE 58            cp $58
 51+  8A7B 28 02            jr z,3F
 52+  8A7D 10 E4            djnz 1B
 53+  8A7F ED 7B 02 85  3 ld sp,(Stack)
 54+  8A83 C9           	ret
 55+  8A84
 56+  8A84 ED 73 02 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A88 FD F9        	ld sp,iy
 58+  8A8A 06 08            ld b,8
 59+  8A8C D1           1 pop de
 60+  8A8D 73           	ld (hl),e
 61+  8A8E 23           	inc hl
 62+  8A8F 72           	ld (hl),d
 63+  8A90 23           	inc hl
 64+  8A91 D1           	pop de
 65+  8A92 73           	ld (hl),e
 66+  8A93 2B           	dec hl
 67+  8A94 2B           	dec hl
 68+  8A95 24           	inc h
 69+  8A96 7C               ld a,h
 70+  8A97 E6 07            and 7
 71+  8A99 20 0A            jr nz,2F
 72+  8A9B 7D               ld a,l
 73+  8A9C C6 20            add a,$20
 74+  8A9E 6F               ld l,a
 75+  8A9F 38 04            jr c,2F
 76+  8AA1 7C               ld a,h
 77+  8AA2 D6 08            sub 8
 78+  8AA4 67               ld h,a
 79+  8AA5 7C           2 ld a,h
 80+  8AA6 FE 58            cp $58
 81+  8AA8 28 1F            jr z,4F
 82+  8AAA 72               ld (hl),d
 83+  8AAB D1           	pop de
 84+  8AAC 23           	inc hl
 85+  8AAD 73           	ld (hl),e
 86+  8AAE 23           	inc hl
 87+  8AAF 72           	ld (hl),d
 88+  8AB0 2B           	dec hl
 89+  8AB1 2B           	dec hl
 90+  8AB2 24           	inc h
 91+  8AB3 7C               ld a,h
 92+  8AB4 E6 07            and 7
 93+  8AB6 20 0A            jr nz,3F
 94+  8AB8 7D               ld a,l
 95+  8AB9 C6 20            add a,$20
 96+  8ABB 6F               ld l,a
 97+  8ABC 38 04            jr c,3F
 98+  8ABE 7C               ld a,h
 99+  8ABF D6 08            sub 8
100+  8AC1 67               ld h,a
101+  8AC2 7C           3 ld a,h
102+  8AC3 FE 58            cp $58
103+  8AC5 28 02            jr z,4F
104+  8AC7 10 C3            djnz 1B
105+  8AC9 ED 7B 02 85  4 ld sp,(Stack)
106+  8ACD C9           	ret
107+  8ACE
108+  8ACE              ; ---------------------------------------------------
109+  8ACE
110+  8ACE ED 73 02 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AD2 FD F9        	ld sp,iy
112+  8AD4 06 10            ld b,16
113+  8AD6 D1           1 pop de
114+  8AD7 7A           	ld a,d
115+  8AD8 AE           	xor (hl)
116+  8AD9 77           	ld (hl),a
117+  8ADA 24           	inc h
118+  8ADB 7C               ld a,h
119+  8ADC E6 07            and 7
120+  8ADE 20 0C            jr nz,2F
121+  8AE0 7D               ld a,l
122+  8AE1 C6 20            add a,$20
123+  8AE3 6F               ld l,a
124+  8AE4 38 06            jr c,2F
125+  8AE6 7C               ld a,h
126+  8AE7 D6 08            sub 8
127+  8AE9 67               ld h,a
128+  8AEA 18 00            jr 2F
129+  8AEC 7C           2 ld a,h
130+  8AED FE 58            cp $58
131+  8AEF 28 02            jr z,3F
132+  8AF1 10 E3            djnz 1B
133+  8AF3 ED 7B 02 85  3 ld sp,(Stack)
134+  8AF7 C9           	ret
135+  8AF8
136+  8AF8 ED 73 02 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8AFC FD F9        	ld sp,iy
138+  8AFE 06 10            ld b,16
139+  8B00 D1           1 pop de
140+  8B01 7B           	ld a,e
141+  8B02 AE           	xor (hl)
142+  8B03 77           	ld (hl),a
143+  8B04 24           	inc h
144+  8B05 7C               ld a,h
145+  8B06 E6 07            and 7
146+  8B08 20 0C            jr nz,2F
147+  8B0A 7D               ld a,l
148+  8B0B C6 20            add a,$20
149+  8B0D 6F               ld l,a
150+  8B0E 38 06            jr c,2F
151+  8B10 7C               ld a,h
152+  8B11 D6 08            sub 8
153+  8B13 67               ld h,a
154+  8B14 18 00            jr 2F
155+  8B16 7C           2 ld a,h
156+  8B17 FE 58            cp $58
157+  8B19 28 02            jr z,3F
158+  8B1B 10 E3            djnz 1B
159+  8B1D ED 7B 02 85  3 ld sp,(Stack)
160+  8B21 C9           	ret
161+  8B22
162+  8B22              ; ---------------------------------------------------
163+  8B22
164+  8B22 ED 73 02 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8B26 FD F9        	ld sp,iy
166+  8B28 06 08            ld b,8
167+  8B2A D1           1 pop de
168+  8B2B 7A           	ld a,d
169+  8B2C AE           	xor (hl)
170+  8B2D 77           	ld (hl),a
171+  8B2E 23           	inc hl
172+  8B2F D1           	pop de
173+  8B30 7B           	ld a,e
174+  8B31 AE           	xor (hl)
175+  8B32 77           	ld (hl),a
176+  8B33 2B           	dec hl
177+  8B34 24            	inc h
178+  8B35 7C               ld a,h
179+  8B36 E6 07            and 7
180+  8B38 20 0A            jr nz,2F
181+  8B3A 7D               ld a,l
182+  8B3B C6 20            add a,$20
183+  8B3D 6F               ld l,a
184+  8B3E 38 04            jr c,2F
185+  8B40 7C               ld a,h
186+  8B41 D6 08            sub 8
187+  8B43 67               ld h,a
188+  8B44 7C           2 ld a,h
189+  8B45 FE 58            cp $58
190+  8B47 28 20            jr z,4F
191+  8B49 D1               pop de
192+  8B4A 7B           	ld a,e
193+  8B4B AE           	xor (hl)
194+  8B4C 77           	ld (hl),a
195+  8B4D 23           	inc hl
196+  8B4E 7A           	ld a,d
197+  8B4F AE           	xor (hl)
198+  8B50 77           	ld (hl),a
199+  8B51 2B           	dec hl
200+  8B52 24           	inc h
201+  8B53 7C               ld a,h
202+  8B54 E6 07            and 7
203+  8B56 20 0A            jr nz,3F
204+  8B58 7D               ld a,l
205+  8B59 C6 20            add a,$20
206+  8B5B 6F               ld l,a
207+  8B5C 38 04            jr c,3F
208+  8B5E 7C               ld a,h
209+  8B5F D6 08            sub 8
210+  8B61 67               ld h,a
211+  8B62 7C           3 ld a,h
212+  8B63 FE 58            cp $58
213+  8B65 28 02            jr z,4F
214+  8B67 10 C1            djnz 1B
215+  8B69 ED 7B 02 85  4 ld sp,(Stack)
216+  8B6D C9           	ret
217+  8B6E
218+  8B6E ED 73 02 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B72 FD F9        	ld sp,iy
220+  8B74 06 08            ld b,8
221+  8B76 D1           1 pop de
222+  8B77 D1           	pop de
223+  8B78 7B           	ld a,e
224+  8B79 AE           	xor (hl)
225+  8B7A 77           	ld (hl),a
226+  8B7B 24            	inc h
227+  8B7C 7C               ld a,h
228+  8B7D E6 07            and 7
229+  8B7F 20 0A            jr nz,2F
230+  8B81 7D               ld a,l
231+  8B82 C6 20            add a,$20
232+  8B84 6F               ld l,a
233+  8B85 38 04            jr c,2F
234+  8B87 7C               ld a,h
235+  8B88 D6 08            sub 8
236+  8B8A 67               ld h,a
237+  8B8B 7C           2 ld a,h
238+  8B8C FE 58            cp $58
239+  8B8E 28 1B            jr z,4F
240+  8B90 D1               pop de
241+  8B91 7A           	ld a,d
242+  8B92 AE           	xor (hl)
243+  8B93 77           	ld (hl),a
244+  8B94 24           	inc h
245+  8B95 7C               ld a,h
246+  8B96 E6 07            and 7
247+  8B98 20 0A            jr nz,3F
248+  8B9A 7D               ld a,l
249+  8B9B C6 20            add a,$20
250+  8B9D 6F               ld l,a
251+  8B9E 38 04            jr c,3F
252+  8BA0 7C               ld a,h
253+  8BA1 D6 08            sub 8
254+  8BA3 67               ld h,a
255+  8BA4 7C           3 ld a,h
256+  8BA5 FE 58            cp $58
257+  8BA7 28 02            jr z,4F
258+  8BA9 10 CB            djnz 1B
259+  8BAB ED 7B 02 85  4 ld sp,(Stack)
260+  8BAF C9           	ret
261+  8BB0
262+  8BB0 ED 73 02 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8BB4 FD F9        	ld sp,iy
264+  8BB6 06 08            ld b,8
265+  8BB8 D1           1 pop de
266+  8BB9 7B           	ld a,e
267+  8BBA AE           	xor (hl)
268+  8BBB 77           	ld (hl),a
269+  8BBC 23           	inc hl
270+  8BBD 7A           	ld a,d
271+  8BBE AE           	xor (hl)
272+  8BBF 77           	ld (hl),a
273+  8BC0 2B           	dec hl
274+  8BC1 24             	inc h
275+  8BC2 7C               ld a,h
276+  8BC3 E6 07            and 7
277+  8BC5 20 0A            jr nz,2F
278+  8BC7 7D               ld a,l
279+  8BC8 C6 20            add a,$20
280+  8BCA 6F               ld l,a
281+  8BCB 38 04            jr c,2F
282+  8BCD 7C               ld a,h
283+  8BCE D6 08            sub 8
284+  8BD0 67               ld h,a
285+  8BD1 7C           2 ld a,h
286+  8BD2 FE 58            cp $58
287+  8BD4 28 21            jr z,4F
288+  8BD6 D1               pop de
289+  8BD7 7A           	ld a,d
290+  8BD8 AE           	xor (hl)
291+  8BD9 77           	ld (hl),a
292+  8BDA 23           	inc hl
293+  8BDB D1               pop de
294+  8BDC 7B           	ld a,e
295+  8BDD AE           	xor (hl)
296+  8BDE 77           	ld (hl),a
297+  8BDF 2B           	dec hl
298+  8BE0 24           	inc h
299+  8BE1 7C               ld a,h
300+  8BE2 E6 07            and 7
301+  8BE4 20 0A            jr nz,3F
302+  8BE6 7D               ld a,l
303+  8BE7 C6 20            add a,$20
304+  8BE9 6F               ld l,a
305+  8BEA 38 04            jr c,3F
306+  8BEC 7C               ld a,h
307+  8BED D6 08            sub 8
308+  8BEF 67               ld h,a
309+  8BF0 7C           3 ld a,h
310+  8BF1 FE 58            cp $58
311+  8BF3 28 02            jr z,4F
312+  8BF5 10 C1            djnz 1B
313+  8BF7 ED 7B 02 85  4 ld sp,(Stack)
314+  8BFB C9           	ret
315+  8BFC
316+  8BFC ED 73 02 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8C00 FD F9        	ld sp,iy
318+  8C02 06 08            ld b,8
319+  8C04 D1           1 pop de
320+  8C05 7B           	ld a,e
321+  8C06 AE           	xor (hl)
322+  8C07 77           	ld (hl),a
323+  8C08 24            	inc h
324+  8C09 7C               ld a,h
325+  8C0A E6 07            and 7
326+  8C0C 20 0A            jr nz,2F
327+  8C0E 7D               ld a,l
328+  8C0F C6 20            add a,$20
329+  8C11 6F               ld l,a
330+  8C12 38 04            jr c,2F
331+  8C14 7C               ld a,h
332+  8C15 D6 08            sub 8
333+  8C17 67               ld h,a
334+  8C18 7C           2 ld a,h
335+  8C19 FE 58            cp $58
336+  8C1B 28 1C            jr z,4F
337+  8C1D D1               pop de
338+  8C1E 7A           	ld a,d
339+  8C1F AE           	xor (hl)
340+  8C20 77           	ld (hl),a
341+  8C21 24           	inc h
342+  8C22 7C               ld a,h
343+  8C23 E6 07            and 7
344+  8C25 20 0A            jr nz,3F
345+  8C27 7D               ld a,l
346+  8C28 C6 20            add a,$20
347+  8C2A 6F               ld l,a
348+  8C2B 38 04            jr c,3F
349+  8C2D 7C               ld a,h
350+  8C2E D6 08            sub 8
351+  8C30 67               ld h,a
352+  8C31 7C           3 ld a,h
353+  8C32 FE 58            cp $58
354+  8C34 28 03            jr z,4F
355+  8C36 D1               pop de
356+  8C37 10 CB            djnz 1B
357+  8C39 ED 7B 02 85  4 ld sp,(Stack)
358+  8C3D C9           	ret
359+  8C3E
360+  8C3E              ; ---------------------------------------------------
361+  8C3E
# file closed: Rutinas_de_impresion_sprites.asm
587   8C3E              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C3E              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C3E              ;
  3+  8C3E              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C3E              ;
  5+  8C3E              ; *****************************************************************************************************************************************************************************************
  6+  8C3E              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C3E
  8+  8C3E 7C           calcula_tercio ld a,h
  9+  8C3F E6 18        	and $18
 10+  8C41 CB 2F        	sra a
 11+  8C43 CB 2F        	sra a
 12+  8C45 CB 2F        	sra a
 13+  8C47 C9           	ret
 14+  8C48
# file closed: calcula_tercio.asm
588   8C48              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C48              ; -----------------------------------------------------------------------------------------
  2+  8C48              ;
  3+  8C48              ;   04/11/22
  4+  8C48              ;
  5+  8C48              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C48              ;
  7+  8C48              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C48              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C48              ;
 10+  8C48              ;   DESTRUYE: HL y A. !!!!!
 11+  8C48
 12+  8C48 CD 3E 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C4B 26 58            ld h,$58
 14+  8C4D 84               add h
 15+  8C4E 67               ld h,a
 16+  8C4F C9               ret
# file closed: Calcula_direccion_atributos.asm
589   8C50              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C50              ; ********** **********
  2+  8C50              ;
  3+  8C50              ;   5/11/22
  4+  8C50              ;
  5+  8C50              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C50              ;
  7+  8C50              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C50              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C50              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C50              ;
 11+  8C50              ;   NO DESTROYERSSSS !!!!!
 12+  8C50
 13+  8C50 E5           Define_atributos push hl
 14+  8C51 C5           	push bc
 15+  8C52 D5           	push de
 16+  8C53
 17+  8C53 CD 48 8C     	call Calcula_direccion_atributos
 18+  8C56
 19+  8C56 D9               exx
 20+  8C57 E5               push hl
 21+  8C58 D9               exx
 22+  8C59 D1               pop de
 23+  8C5A
 24+  8C5A 42               ld b,d
 25+  8C5B 7B               ld a,e 									; (Attr) en A.
 26+  8C5C
 27+  8C5C C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C5D E5            	push hl 								; Guardo dirección de attr.
 29+  8C5E
 30+  8C5E              ; -----
 31+  8C5E
 32+  8C5E 77           2 ld (hl),a
 33+  8C5F 0D           	dec c 									; Decremento (Columnas).
 34+  8C60 28 03        	jr z,1F
 35+  8C62 23           	inc hl
 36+  8C63 18 F9        	jr 2B
 37+  8C65
 38+  8C65 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C66 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C67
 41+  8C67 05           	dec b									; Decremento (Filas).
 42+  8C68 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C6A
 44+  8C6A 11 20 00     	ld de,32
 45+  8C6D A7           	and a
 46+  8C6E ED 5A        	adc hl,de
 47+  8C70 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C72
 49+  8C72 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C73 C1           	pop bc
 51+  8C74 E1           	pop hl
 52+  8C75
 53+  8C75 C9           	ret
 54+  8C76
# file closed: Define_atributos.asm
590   8C76              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C76              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C76              ;
  3+  8C76              ;
  4+  8C76              ;	CLS.
  5+  8C76              ;
  6+  8C76              ;	Limpia la pantalla y define sus atributos.
  7+  8C76              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C76              ;
  9+  8C76              ;	COLORES: 0 ..... NEGRO
 10+  8C76              ;    		 1 ..... AZUL
 11+  8C76              ; 			 2 ..... ROJO
 12+  8C76              ;			 3 ..... MAGENTA
 13+  8C76              ; 			 4 ..... VERDE
 14+  8C76              ; 			 5 ..... CIAN
 15+  8C76              ;			 6 ..... AMARILLO
 16+  8C76              ; 			 7 ..... BLANCO
 17+  8C76              ;
 18+  8C76              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C76              ;
 20+  8C76              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C76
 22+  8C76
 23+  8C76 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C79 11 01 40     	LD DE,$4001
 25+  8C7C 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C7F 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C81 ED B0        	LDIR
 28+  8C83 01 FF 02     	LD BC,767
 29+  8C86 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C87 ED B0        	LDIR
 31+  8C89 C9           	ret
 32+  8C8A
# file closed: Cls.asm
591   8C8A              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C8A              ; ******************************************************************************************************************************************************************************************
  2+  8C8A              ;
  3+  8C8A              ;   19/10/22
  4+  8C8A              ;
  5+  8C8A              ;	Mov_down
  6+  8C8A              ;
  7+  8C8A              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C8A              ;
  9+  8C8A              ;
 10+  8C8A 21 E5 84     Mov_down ld hl,Ctrl_0
 11+  8C8D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C8F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C8F              ; 																	; _ en el caso de que no lo haya.
 14+  8C8F 3A DA 84     	ld a,(Vel_down)
 15+  8C92 47           	ld b,a
 16+  8C93 2A CA 84         ld hl,(Posicion_actual)
 17+  8C96 CD 3E 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C99 E6 02        	and 2
 19+  8C9B 28 0F        	jr z,1F
 20+  8C9D 7C           	ld a,h
 21+  8C9E FE 57        	cp $57
 22+  8CA0 20 0A        	jr nz,1F
 23+  8CA2 7D           	ld a,l
 24+  8CA3 C6 20        	add $20
 25+  8CA5 30 05        	jr nc,1F
 26+  8CA7
 27+  8CA7              ; ------------------------------
 28+  8CA7 CD 97 8F     	call Reaparece_arriba
 29+  8CAA              ;	call Reinicio
 30+  8CAA              ; ------------------------------
 31+  8CAA
 32+  8CAA 18 08        	jr 3F
 33+  8CAC CD F3 89     1 call NextScan
 34+  8CAF 22 CA 84     	ld (Posicion_actual),hl
 35+  8CB2 10 E2            djnz 2B
 36+  8CB4 C9           3 ret
 37+  8CB5
 38+  8CB5
 39+  8CB5              ; ******************************************************************************************************************************************************************************************
 40+  8CB5              ;
 41+  8CB5              ;   19/10/22
 42+  8CB5              ;
 43+  8CB5              ;	Mov_up
 44+  8CB5              ;
 45+  8CB5              ; 	Mueve el Sprite hacia arriba.
 46+  8CB5              ;
 47+  8CB5              ;
 48+  8CB5 21 E5 84     Mov_up ld hl,Ctrl_0
 49+  8CB8 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 50+  8CBA              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 51+  8CBA              ; 																		; _ en el caso de que no lo haya.
 52+  8CBA 3A D9 84     	ld a,(Vel_up)
 53+  8CBD 47           	ld b,a
 54+  8CBE 2A CA 84     	ld hl,(Posicion_actual)
 55+  8CC1 CD 3E 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 56+  8CC4 A7           	and a
 57+  8CC5 20 10        	jr nz,1F
 58+  8CC7 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 59+  8CC8 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 60+  8CCA 20 0B            jr nz,1F
 61+  8CCC 7D               ld a,l
 62+  8CCD D6 20            sub $20
 63+  8CCF 30 06            jr nc,1F
 64+  8CD1 25               dec h
 65+  8CD2
 66+  8CD2              ; -----------------------------
 67+  8CD2 CD 87 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 68+  8CD5              ;	call Reinicio
 69+  8CD5              ; -----------------------------
 70+  8CD5
 71+  8CD5 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 72+  8CD7 CD 05 8A     1 call PreviousScan
 73+  8CDA 22 CA 84     	ld (Posicion_actual),hl
 74+  8CDD 10 E2            djnz 3B
 75+  8CDF C9           2   ret
 76+  8CE0
 77+  8CE0              ; ******************************************************************************************************************************************************************************************
 78+  8CE0              ;
 79+  8CE0              ;	19/10/22
 80+  8CE0              ;
 81+  8CE0              ;	Mov_right.
 82+  8CE0              ;
 83+  8CE0              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 84+  8CE0              ;
 85+  8CE0
 86+  8CE0 21 E5 84     Mov_right ld hl,Ctrl_0
 87+  8CE3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 88+  8CE5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 89+  8CE5              ; 																	; _ en el caso de que no lo haya.
 90+  8CE5 3A CC 84     	ld a,(CTRL_DESPLZ)
 91+  8CE8 A7           	and a
 92+  8CE9 28 0B        	jr z,10F
 93+  8CEB
 94+  8CEB 3A E5 84     	ld a,(Ctrl_0)
 95+  8CEE CB 7F        	bit 7,a
 96+  8CF0 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 97+  8CF2 21 CC 84     	ld hl,CTRL_DESPLZ
 98+  8CF5 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 99+  8CF6
100+  8CF6 3A E5 84     10 ld a,(Ctrl_0)
101+  8CF9 CB 77        	bit 6,a
102+  8CFB 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
103+  8CFD
104+  8CFD CD 46 8F     	call Stop_Amadeus_right
105+  8D00 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
106+  8D01 18 4A        	jr 3F
107+  8D03
108+  8D03 3A D5 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
109+  8D06 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
110+  8D08 20 43        	jr nz,3F
111+  8D0A
112+  8D0A 3A CC 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
113+  8D0D A7           	and a 															; _[3] para continuar con el DESPLZ.
114+  8D0E 28 3D        	jr z,3F
115+  8D10
116+  8D10              ; ---------- ---------- ----------
117+  8D10
118+  8D10 3A D8 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8D13 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8D15 28 11        	jr z,1F
121+  8D17 38 06        	jr c,6F
122+  8D19 FE 04        	cp 4
123+  8D1B 28 14        	jr z,7F
124+  8D1D 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8D1F
126+  8D1F              ; ---------- ---------- ----------
127+  8D1F              ;
128+  8D1F              ; Perfiles de velocidad
129+  8D1F              ;
130+  8D1F 3A CC 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
131+  8D22 FE FE        	cp $fe
132+  8D24 20 27        	jr nz,3F
133+  8D26 18 10        	jr 4F
134+  8D28 3A CC 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
135+  8D2B FE FD        	cp $fd
136+  8D2D 20 1E        	jr nz,3F
137+  8D2F 18 07        	jr 4F
138+  8D31 3A CC 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
139+  8D34 FE FB        	cp $fb
140+  8D36 20 15        	jr nz,3F
141+  8D38
142+  8D38              ; ---------- ---------- ----------
143+  8D38
144+  8D38 CD 75 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
145+  8D3B              ;	call Reinicio
146+  8D3B
147+  8D3B              ; ---------- ---------- ----------
148+  8D3B
149+  8D3B 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
150+  8D3D C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
151+  8D3E CD 76 8D     	call DESPLZ_DER
152+  8D41 C1           	pop bc
153+  8D42 10 F9        	djnz 5B
154+  8D44 2A CA 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
155+  8D47 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
156+  8D48 22 CA 84     	ld (Posicion_actual),hl
157+  8D4B 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
158+  8D4D
159+  8D4D              ; ---------- ---------- ----------
160+  8D4D
161+  8D4D 3A D8 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
162+  8D50 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
163+  8D52 20 1B        	jr nz,8F
164+  8D54 2A CA 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
165+  8D57 7D           	ld a,l
166+  8D58 E6 1F        	and $1f
167+  8D5A FE 1F        	cp 31
168+  8D5C 20 05        	jr nz,9F
169+  8D5E
170+  8D5E              ; ---------- ---------- ----------
171+  8D5E
172+  8D5E CD 75 8F     	call Reaparece_izquierda
173+  8D61
174+  8D61              ; ---------- ---------- ----------
175+  8D61
176+  8D61 18 12        	jr 2F
177+  8D63 2A CA 84     9 ld hl,(Posicion_actual)
178+  8D66 23           	inc hl
179+  8D67 22 CA 84     	ld (Posicion_actual),hl
180+  8D6A CD B0 8F     	call Genera_coordenadas
181+  8D6D 18 06        	jr 2F
182+  8D6F 2A CA 84     8 ld hl,(Posicion_actual)
183+  8D72 CD 76 8D     	call DESPLZ_DER
184+  8D75 C9           2 ret
185+  8D76
186+  8D76              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
187+  8D76              ;
188+  8D76              ;	22/9/22
189+  8D76              ;
190+  8D76
191+  8D76 CD 85 8D     DESPLZ_DER call Desplaza_derecha
192+  8D79 CD 9A 8D         call modifica_parametros_1er_DESPLZ_2
193+  8D7C CD C0 8D         call Ciclo_completo
194+  8D7F 21 E5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
195+  8D82 CB FE        	set 7,(hl)
196+  8D84 C9           	ret
197+  8D85
198+  8D85              ; ******************************************************************************************************************************************************************************************
199+  8D85              ;	14/9/22
200+  8D85              ;
201+  8D85
202+  8D85 3A D8 84     Desplaza_derecha ld a,(Vel_right)
203+  8D88 47           	ld b,a
204+  8D89 2A D0 84     	ld hl,(Puntero_DESPLZ)
205+  8D8C 23           1 inc hl
206+  8D8D 23           	inc hl
207+  8D8E 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
208+  8D90 22 D0 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
209+  8D93 CD 1A 86     	call Extrae_address
210+  8D96 22 F6 84     	ld (Caja_de_DESPLZ),hl
211+  8D99 C9           	ret
212+  8D9A
213+  8D9A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
214+  8D9A              ;
215+  8D9A              ;	24/7/22
216+  8D9A              ;
217+  8D9A              ;	modifica_parametros_1er_DESPLZ_2
218+  8D9A              ;
219+  8D9A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
220+  8D9A              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
221+  8D9A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
222+  8D9A
223+  8D9A 3A CC 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
224+  8D9D A7           	and a
225+  8D9E 20 1C        	jr nz,1F
226+  8DA0 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
227+  8DA2 32 CC 84         ld (CTRL_DESPLZ),a
228+  8DA5 21 C9 84     	ld hl,Columns
229+  8DA8 34           	inc (hl)
230+  8DA9 3A D4 84     	ld a,(Cuad_objeto)
231+  8DAC E6 01        	and 1
232+  8DAE 28 0C        	jr z,1F
233+  8DB0 2A CA 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
234+  8DB3 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
235+  8DB4 22 CA 84     	ld (Posicion_actual),hl
236+  8DB7 CD 52 8F     	call Inc_CTRL_DESPLZ
237+  8DBA 18 03        	jr 2F
238+  8DBC CD 52 8F     1 call Inc_CTRL_DESPLZ
239+  8DBF C9           2 ret
240+  8DC0
241+  8DC0              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
242+  8DC0              ;
243+  8DC0              ;	24/7/22
244+  8DC0              ;
245+  8DC0              ;	Ciclo_completo.
246+  8DC0              ;
247+  8DC0              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
248+  8DC0              ;
249+  8DC0              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
250+  8DC0              ; 	Decrementamos (Columns).
251+  8DC0              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
252+  8DC0              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
253+  8DC0
254+  8DC0
255+  8DC0 3A CC 84     Ciclo_completo ld a,(CTRL_DESPLZ)
256+  8DC3 FE FF        	cp $ff
257+  8DC5 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
258+  8DC7 18 25        	jr 3f
259+  8DC9 21 C9 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
260+  8DCC 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
261+  8DCD AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
262+  8DCE 32 CC 84     	ld (CTRL_DESPLZ),a
263+  8DD1 3A D4 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
264+  8DD4 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
265+  8DD6 20 07        	jr nz,2F
266+  8DD8 2A CA 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
267+  8DDB 23           	inc hl
268+  8DDC 22 CA 84     	ld (Posicion_actual),hl
269+  8DDF 2A CE 84     2 ld hl,(Indice_Sprite)
270+  8DE2 22 D0 84     	ld (Puntero_DESPLZ),hl
271+  8DE5 21 00 00     	ld hl,0
272+  8DE8 22 F6 84     	ld (Caja_de_DESPLZ),hl
273+  8DEB CD B0 8F     	call Genera_coordenadas
274+  8DEE C9           3 ret
275+  8DEF
276+  8DEF              ; ******************************************************************************************************************************************************************************************
277+  8DEF              ;
278+  8DEF              ;	19/10/22
279+  8DEF              ;
280+  8DEF              ;	Mov_left.
281+  8DEF              ;
282+  8DEF              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
283+  8DEF              ;
284+  8DEF              Mov_left
285+  8DEF
286+  8DEF 21 E5 84     	ld hl,Ctrl_0
287+  8DF2 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
288+  8DF4              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
289+  8DF4              ; 																	; _ en el caso de que no lo haya.
290+  8DF4 3A CC 84     	ld a,(CTRL_DESPLZ)
291+  8DF7 A7           	and a
292+  8DF8 20 19        	jr nz,10F
293+  8DFA
294+  8DFA 2A EE 84     	ld hl,(Puntero_objeto)
295+  8DFD 22 D0 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
296+  8E00
297+  8E00 3A E5 84     	ld a,(Ctrl_0)
298+  8E03 CB 77        	bit 6,a
299+  8E05 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
300+  8E07
301+  8E07 CD 4C 8F     	call Stop_Amadeus_left
302+  8E0A 20 5F        	jr nz,3F
303+  8E0C
304+  8E0C 2A CE 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
305+  8E0F 22 D0 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
306+  8E12 C9           	ret
307+  8E13
308+  8E13 3A E5 84     10 	ld a,(Ctrl_0)
309+  8E16 CB 7F        	bit 7,a
310+  8E18 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
311+  8E1A 21 CC 84     	ld hl,CTRL_DESPLZ
312+  8E1D 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
313+  8E1E
314+  8E1E 3A D5 84     11 ld a,(Coordenada_X)
315+  8E21 A7           	and a
316+  8E22 20 47        	jr nz,3F
317+  8E24 3A CC 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
318+  8E27 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
319+  8E28 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
320+  8E2A
321+  8E2A              ; ---------- ---------- ----------
322+  8E2A
323+  8E2A 3A D7 84     	ld a,(Vel_left)
324+  8E2D FE 02        	cp 2
325+  8E2F 28 0F        	jr z,1F
326+  8E31 38 04        	jr c,6F
327+  8E33 FE 04        	cp 4
328+  8E35 28 12        	jr z,7F
329+  8E37
330+  8E37              ; ---------- ---------- ----------
331+  8E37
332+  8E37 3A CC 84     6 ld a,(CTRL_DESPLZ)
333+  8E3A FE F9        	cp $f9
334+  8E3C 20 2D        	jr nz,3F
335+  8E3E 18 10        	jr 4F
336+  8E40 3A CC 84     1 ld a,(CTRL_DESPLZ)
337+  8E43 FE FA        	cp $fa
338+  8E45 20 24        	jr nz,3F
339+  8E47 18 07        	jr 4F
340+  8E49 3A CC 84     7 ld a,(CTRL_DESPLZ)
341+  8E4C FE FC        	cp $fc
342+  8E4E 20 1B        	jr nz,3F
343+  8E50
344+  8E50              ; ---------- ---------- ----------
345+  8E50
346+  8E50 CD 63 8F     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
347+  8E53              ;	call Reinicio
348+  8E53
349+  8E53              ; ---------- ---------- ----------
350+  8E53
351+  8E53 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
352+  8E55 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
353+  8E56 2A EE 84     	ld hl,(Puntero_objeto)
354+  8E59 22 D0 84     	ld (Puntero_DESPLZ),hl
355+  8E5C CD 92 8E     	call DESPLZ_IZQ
356+  8E5F C1           	pop bc
357+  8E60 10 F3        	djnz 5B
358+  8E62 2A CA 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
359+  8E65 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
360+  8E66 22 CA 84     	ld (Posicion_actual),hl
361+  8E69 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8E6B
363+  8E6B              ; ---------- ---------- ----------
364+  8E6B
365+  8E6B 3A D7 84     3 ld a,(Vel_left)
366+  8E6E FE 08        	cp 8
367+  8E70 20 19        	jr nz,8F
368+  8E72 2A CA 84     	ld hl,(Posicion_actual)
369+  8E75 7D           	ld a,l
370+  8E76 E6 1F        	and $1f
371+  8E78 20 05        	jr nz,9F
372+  8E7A
373+  8E7A              ; ---------- ---------- ----------
374+  8E7A
375+  8E7A CD 63 8F     	call Reaparece_derecha
376+  8E7D
377+  8E7D              ; ---------- ---------- ----------
378+  8E7D
379+  8E7D 18 12        	jr 2F
380+  8E7F 2A CA 84     9 ld hl,(Posicion_actual)
381+  8E82 2B           	dec hl
382+  8E83 22 CA 84     	ld (Posicion_actual),hl
383+  8E86 CD B0 8F     	call Genera_coordenadas
384+  8E89 18 06        	jr 2F
385+  8E8B 2A CA 84     8 ld hl,(Posicion_actual)
386+  8E8E CD 92 8E     	call DESPLZ_IZQ
387+  8E91 C9           2 ret
388+  8E92
389+  8E92              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
390+  8E92              ;
391+  8E92              ;	22/9/22
392+  8E92
393+  8E92 CD A1 8E     DESPLZ_IZQ call Desplaza_izquierda
394+  8E95 CD B6 8E         call modifica_parametros_1er_DESPLZ
395+  8E98 CD D7 8E     	call Ciclo_completo_2
396+  8E9B 21 E5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
397+  8E9E CB BE        	res 7,(hl)
398+  8EA0 C9           	ret
399+  8EA1
400+  8EA1 3A D7 84     Desplaza_izquierda ld a,(Vel_left)
401+  8EA4 47           	ld b,a
402+  8EA5 2A D0 84     	ld hl,(Puntero_DESPLZ)
403+  8EA8 2B           1 dec hl
404+  8EA9 2B           	dec hl
405+  8EAA 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
406+  8EAC 22 D0 84     	ld (Puntero_DESPLZ),hl
407+  8EAF CD 1A 86     	call Extrae_address
408+  8EB2 22 F6 84     	ld (Caja_de_DESPLZ),hl
409+  8EB5 C9           	ret
410+  8EB6
411+  8EB6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
412+  8EB6              ;
413+  8EB6              ;	modifica_parametros_1er_DESPLZ
414+  8EB6              ;
415+  8EB6              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
416+  8EB6              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
417+  8EB6              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
418+  8EB6
419+  8EB6 3A CC 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
420+  8EB9 A7           	and a
421+  8EBA 20 17        	jr nz,1F
422+  8EBC 21 C9 84     	ld hl,Columns
423+  8EBF 34           	inc (hl)
424+  8EC0 3A D4 84     	ld a,(Cuad_objeto)
425+  8EC3 E6 01        	and 1
426+  8EC5 20 0C        	jr nz,1F
427+  8EC7 2A CA 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
428+  8ECA 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
429+  8ECB 22 CA 84     	ld (Posicion_actual),hl
430+  8ECE CD 35 8F     	call Dec_CTRL_DESPLZ
431+  8ED1 18 03        	jr 2F
432+  8ED3 CD 35 8F     1 call Dec_CTRL_DESPLZ
433+  8ED6 C9           2 ret
434+  8ED7
435+  8ED7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
436+  8ED7              ;
437+  8ED7 3A CC 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
438+  8EDA FE F8        	cp $f8
439+  8EDC 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
440+  8EDE 18 19        	jr 3f
441+  8EE0 21 C9 84     1 ld hl,Columns
442+  8EE3 35           	dec (hl)
443+  8EE4 AF           	xor a
444+  8EE5 32 CC 84     	ld (CTRL_DESPLZ),a
445+  8EE8 3A D4 84     	ld a,(Cuad_objeto)
446+  8EEB E6 01        	and 1
447+  8EED 28 07        	jr z,2F
448+  8EEF 2A CA 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
449+  8EF2 2B           	dec hl
450+  8EF3 22 CA 84     	ld (Posicion_actual),hl
451+  8EF6 CD B0 8F     2 call Genera_coordenadas
452+  8EF9 C9           3 ret
453+  8EFA
454+  8EFA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
455+  8EFA
456+  8EFA CD E7 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
457+  8EFD              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
458+  8EFD              ;																	; Filas * Columnas en DE´.
459+  8EFD 3A D4 84     	ld a,(Cuad_objeto)
460+  8F00 FE 02        	cp 2
461+  8F02 38 1A        	jr c,2F
462+  8F04 28 18        	jr z,2F
463+  8F06 E6 01        	and 1
464+  8F08 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
465+  8F0A              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
466+  8F0A              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
467+  8F0A C5           	push bc
468+  8F0B E5           	push hl
469+  8F0C 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
470+  8F0E 0D           	dec c
471+  8F0F 2A F0 84     	ld hl,(Puntero_datas)
472+  8F12 A7           	and a
473+  8F13 ED 4A        	adc hl,bc
474+  8F15 22 F0 84     	ld (Puntero_datas),hl
475+  8F18 E1           	pop hl
476+  8F19 C1           	pop bc
477+  8F1A 18 18        	jr 4F
478+  8F1C              1
479+  8F1C              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
480+  8F1C 18 16        	jr 4F
481+  8F1E E6 01        2 and 1
482+  8F20 28 02        	jr z,3F
483+  8F22              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
484+  8F22 18 10        	jr 4F
485+  8F24              3
486+  8F24              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
487+  8F24 C5           	push bc
488+  8F25 E5           	push hl
489+  8F26 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
490+  8F28 0D           	dec c
491+  8F29 2A F0 84     	ld hl,(Puntero_datas)
492+  8F2C A7           	and a
493+  8F2D ED 42        	sbc hl,bc
494+  8F2F 22 F0 84     	ld (Puntero_datas),hl
495+  8F32 E1           	pop hl
496+  8F33 C1           	pop bc
497+  8F34 C9           4 ret
498+  8F35
499+  8F35              ; ---------- ---------- ---------- ---------- ---------- ----------
500+  8F35              ;
501+  8F35              ;	Dec_CTRL_DESPLZ
502+  8F35              ;
503+  8F35              ;	Subrutina de [modifica_punteros].
504+  8F35              ;
505+  8F35              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
506+  8F35
507+  8F35 21 CC 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
508+  8F38 3A D7 84     	ld a,(Vel_left)
509+  8F3B A7           	and a
510+  8F3C 28 06        	jr z,1F
511+  8F3E 47           	ld b,a
512+  8F3F 35           3 dec (hl)
513+  8F40 10 FD        	djnz 3B
514+  8F42 18 01        	jr 2F
515+  8F44 35           1 dec (hl)
516+  8F45 C9           2 ret
517+  8F46
518+  8F46              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8F46              ;
520+  8F46              ;	19/10/22
521+  8F46              ;
522+  8F46              ;	(cp 29) para un Amadeus de 3 Columns.
523+  8F46              ;	(cp 30)   ""  ""    ""     2 Columns.
524+  8F46
525+  8F46 3A D5 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
526+  8F49 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
527+  8F4B C9           	ret
528+  8F4C
529+  8F4C              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F4C              ;
531+  8F4C              ;	19/10/22
532+  8F4C              ;
533+  8F4C              ;	(cp 2) para un Amadeus de 3 Columns.
534+  8F4C              ;	(cp 1)   ""  ""    ""     2 Columns.
535+  8F4C
536+  8F4C 3A D5 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
537+  8F4F FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
538+  8F51 C9           	ret
539+  8F52
540+  8F52              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F52              ;
542+  8F52              ;	24/7/22
543+  8F52              ;
544+  8F52              ;	Inc_CTRL_DESPLZ
545+  8F52              ;
546+  8F52              ;	Subrutina de [modifica_punteros].
547+  8F52              ;
548+  8F52              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
549+  8F52
550+  8F52 21 CC 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
551+  8F55 3A D8 84     	ld a,(Vel_right)
552+  8F58 A7           	and a
553+  8F59 28 06        	jr z,1F
554+  8F5B 47           	ld b,a
555+  8F5C 34           3 inc (hl)
556+  8F5D 10 FD        	djnz 3B
557+  8F5F 18 01        	jr 2F
558+  8F61 34           1 inc (hl)
559+  8F62 C9           2 ret
560+  8F63
561+  8F63              ; ---------- ---------- ---------- ---------- ---------- ----------
562+  8F63
563+  8F63 2A CA 84     Reaparece_derecha ld hl,(Posicion_actual)
564+  8F66 01 1F 00     	ld bc,31
565+  8F69 A7           	and a
566+  8F6A ED 4A        	adc hl,bc
567+  8F6C 22 CA 84     	ld (Posicion_actual),hl
568+  8F6F 21 E5 84     	ld hl,Ctrl_0														; $xxx1
569+  8F72 CB C6        	set 0,(hl)
570+  8F74 C9           	ret
571+  8F75
572+  8F75              ; ---------- ---------- ---------- ---------- ---------- ----------
573+  8F75
574+  8F75 2A CA 84     Reaparece_izquierda ld hl,(Posicion_actual)
575+  8F78 01 1F 00     	ld bc,31
576+  8F7B A7           	and a
577+  8F7C ED 42        	sbc hl,bc
578+  8F7E 22 CA 84     	ld (Posicion_actual),hl 											; $xx1x
579+  8F81 21 E5 84     	ld hl,Ctrl_0
580+  8F84 CB CE        	set 1,(hl)
581+  8F86 C9           	ret
582+  8F87
583+  8F87              ; ---------- ---------- ---------- ---------- ---------- ----------
584+  8F87
585+  8F87 24           Reaparece_abajo inc h
586+  8F88 01 E0 17     	ld bc,$17e0
587+  8F8B A7           	and a
588+  8F8C ED 4A        	adc hl,bc
589+  8F8E 22 CA 84     	ld (Posicion_actual),hl
590+  8F91 21 E5 84     	ld hl,Ctrl_0
591+  8F94 CB D6        	set 2,(hl)
592+  8F96 C9           	ret
593+  8F97
594+  8F97              ; ---------- ---------- ---------- ---------- ---------- ----------
595+  8F97
596+  8F97 01 E0 17     Reaparece_arriba ld bc,$17e0
597+  8F9A A7           	and a
598+  8F9B ED 42        	sbc hl,bc
599+  8F9D 22 CA 84     	ld (Posicion_actual),hl
600+  8FA0 21 E5 84     	ld hl,Ctrl_0
601+  8FA3 CB DE        	set 3,(hl)
602+  8FA5 C9           	ret
603+  8FA6
604+  8FA6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
605+  8FA6
606+  8FA6 2A D2 84     Reinicio ld hl,(Posicion_inicio)
607+  8FA9
608+  8FA9              ;	ld (Posicion_actual),hl
609+  8FA9 21 00 00     	ld hl,0
610+  8FAC 22 CA 84     	ld (Posicion_actual),hl
611+  8FAF
612+  8FAF
613+  8FAF C9           	ret
# file closed: Direcciones.asm
592   8FB0              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FB0              ;	12/12/22
  2+  8FB0              ;
  3+  8FB0              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FB0              ;	Fila superior "0", Columna izquierda "0".
  5+  8FB0              ;
  6+  8FB0              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FB0              ;
  8+  8FB0              ;	Modifica: A
  9+  8FB0
 10+  8FB0 C5           Genera_coordenadas push bc
 11+  8FB1 E5           	push hl
 12+  8FB2 2A CA 84     	ld hl,(Posicion_actual)
 13+  8FB5 7D           	ld a,l
 14+  8FB6 E6 1F        	and $1f
 15+  8FB8 32 D5 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FBB CD 3E 8C     	call calcula_tercio
 17+  8FBE 47           	ld b,a
 18+  8FBF 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FC0 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FC2 7D           	ld a,l
 21+  8FC3 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FC5 28 05        	jr z,2F
 23+  8FC7 0C           1 inc c
 24+  8FC8 D6 20        	sub 32
 25+  8FCA 20 FB        	jr nz,1B
 26+  8FCC 0C           2 inc c
 27+  8FCD 04           	inc b
 28+  8FCE 05           	dec b
 29+  8FCF 28 04        	jr z,3F
 30+  8FD1 3E E0        	ld a,$e0
 31+  8FD3 10 F2        	djnz 1B
 32+  8FD5 79           3 ld a,c
 33+  8FD6 3D           	dec a
 34+  8FD7 32 D6 84     	ld (Coordenada_y),a
 35+  8FDA E1           	pop hl
 36+  8FDB C1           	pop bc
 37+  8FDC C9           	ret
# file closed: Genera_coordenadas.asm
593   8FDD              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FDD
  2+  8FDD
  3+  8FDD              ;   11/8/22
  4+  8FDD              ;
  5+  8FDD              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FDD              ;
  7+  8FDD              ;   Mov_obj.asm
  8+  8FDD              ;
  9+  8FDD              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FDD              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FDD              ;
 12+  8FDD              ;   Codificación:
 13+  8FDD              ;
 14+  8FDD              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FDD              ;
 16+  8FDD
 17+  8FDD 02 10 00     Izquierda db 2,%00010000,0
 18+  8FE0 02 20 00     Derecha db 2,%00100000,0
 19+  8FE3 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FE7 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FEB 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FEF 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FF3 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FF7 60 42 60 40
 23+  8FFB 63
 24+  8FFC 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  9000 22 A3 80 A0
 25+  9004 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  9008 84 A0 83 A0
 26+  900C 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  9010 80 A3 22 A0
 27+  9014 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  9018 40 60 42 60
 28+  901C 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  9020
 30+  9020 E0 8F        Indice_mov_Badsat defw Derecha
 31+  9022 E7 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  9024 EF 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  9026 E3 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  9028
 35+  9028 3A EB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  902B A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  902C 28 02            jr z,1F
 38+  902E 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  9030
 40+  9030 3A EC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  9033 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  9035 32 EC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  9038              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  9038 2A E9 84         ld hl,(Puntero_mov)
 45+  903B 7E               ld a,(hl)
 46+  903C 32 EB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  903F 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  9040 22 E9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  9043
 50+  9043 3A ED 84     Decoder ld a,(Repetimos_db)
 51+  9046 A7               and a
 52+  9047 20 0C            jr nz,12F
 53+  9049 2A E9 84         ld hl,(Puntero_mov)
 54+  904C 7E               ld a,(hl)
 55+  904D A7               and a
 56+  904E 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  9050
 58+  9050 E6 0F            and $0f
 59+  9052 32 ED 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  9055              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  9055 2A E9 84     12 ld hl,(Puntero_mov)
 62+  9058 CB 7E            bit 7,(hl)
 63+  905A 28 03            jr z,2F
 64+  905C CD 8A 8C         call Mov_down
 65+  905F 2A E9 84     2 ld hl, (Puntero_mov)
 66+  9062 CB 76            bit 6,(hl)
 67+  9064 28 03            jr z,3F
 68+  9066 CD B5 8C         call Mov_up
 69+  9069 2A E9 84     3 ld hl, (Puntero_mov)
 70+  906C CB 6E            bit 5,(hl)
 71+  906E 28 03            jr z,4F
 72+  9070 CD E0 8C         call Mov_right
 73+  9073 2A E9 84     4 ld hl, (Puntero_mov)
 74+  9076 CB 66            bit 4,(hl)
 75+  9078 28 03            jr z,5F
 76+  907A CD EF 8D         call Mov_left
 77+  907D
 78+  907D              ; ---------- --------- --------- ---------- ----------
 79+  907D
 80+  907D 3A ED 84     5 ld a,(Repetimos_db)
 81+  9080 A7               and a
 82+  9081 28 07            jr z,6F
 83+  9083 3D               dec a
 84+  9084 32 ED 84         ld (Repetimos_db),a
 85+  9087 28 01            jr z,6f
 86+  9089 C9           11 ret
 87+  908A 21 EB 84     6 ld hl,Contador_db_mov
 88+  908D 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  908E 2A E9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9091 23               inc hl
 91+  9092 22 E9 84         ld (Puntero_mov),hl
 92+  9095 18 F2            jr 11B
 93+  9097 2A E7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  909A 3A EC 84         ld a,(Incrementa_puntero)
 95+  909D 47               ld b,a
 96+  909E 23           8 inc hl
 97+  909F 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  90A1 5E               ld e,(hl)
 99+  90A2 23               inc hl
100+  90A3 56               ld d,(hl)
101+  90A4 EB               ex de,hl
102+  90A5 22 E9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  90A8 18 DF            jr 11B
104+  90AA
105+  90AA              ; ---------- --------- --------- ---------- ----------
106+  90AA              ;
107+  90AA              ;   11/8/22
108+  90AA              ;
109+  90AA              ;   Prepara_Puntero_mov
110+  90AA
111+  90AA E5           Prepara_Puntero_mov push hl
112+  90AB D5               push de
113+  90AC 2A E7 84         ld hl,(Puntero_indice_mov)
114+  90AF 5E               ld e,(hl)
115+  90B0 23               inc hl
116+  90B1 56               ld d,(hl)
117+  90B2 EB               ex de,hl
118+  90B3 22 E9 84         ld (Puntero_mov),hl
119+  90B6 D1               pop de
120+  90B7 E1               pop hl
121+  90B8 C9               ret
122+  90B9
123+  90B9              ; ---------- --------- --------- ---------- ----------
124+  90B9              ;
125+  90B9              ;   11/8/22
126+  90B9              ;
127+  90B9              ;   Reinicia_el_movimiento
128+  90B9
129+  90B9 CD AA 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  90BC AF               xor a
131+  90BD 32 EB 84         ld (Contador_db_mov),a
132+  90C0 32 EC 84         ld (Incrementa_puntero),a
133+  90C3 C3 28 90         jp Movimiento
134+  90C6
135+  90C6              ; ---------- --------- --------- ---------- ----------
136+  90C6
137+  90C6
138+  90C6
139+  90C6
140+  90C6
141+  90C6
142+  90C6
143+  90C6
144+  90C6
145+  90C6
146+  90C6
147+  90C6
148+  90C6
149+  90C6
150+  90C6
151+  90C6
152+  90C6
153+  90C6
# file closed: Patrones_de_mov.asm
594   90C6              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90C6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90C6              ;
  3+  90C6              ;	3/1/23
  4+  90C6              ;
  5+  90C6              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90C6
  7+  90C6              ;	ADC HL,SP	LD (addr),SP
  8+  90C6              ;	ADD HL,SP	LD SP,(addr)
  9+  90C6              ;	ADD IX,SP	LD SP,nn
 10+  90C6              ; 	ADD IY,SP	LD SP,HL
 11+  90C6              ;				LD SP,IX
 12+  90C6              ;	DEC SP		LD SP,IY
 13+  90C6
 14+  90C6              ;	EX (SP),HL
 15+  90C6              ;	EX (SP),IX
 16+  90C6              ;	EX (SP),IY
 17+  90C6
 18+  90C6              ;	INC SP
 19+  90C6
 20+  90C6
 21+  90C6                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 02 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 06 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 06 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 02 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
595   7FC0
596   7FC0              	SAVESNA "Pruebas.sna", START
597   7FC0
598   7FC0
599   7FC0
# file closed: Banco_de_pruebas.asm
