# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 3F 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000
 11+  8000 08 80        Indice_disparo defw Disparo_0
 12+  8002 0C 80        	defw Disparo_f9
 13+  8004 10 80        	defw Disparo_fb
 14+  8006 14 80        	defw Disparo_fd
 15+  8008
 16+  8008              ; Disparo (CTRL_DESPLZ)="0".
 17+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 18+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 19+  800C 00 60 00 60  Disparo_f9 DEFB $00,$60,$00,$60
 20+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 21+  8010 18 00 18 00  Disparo_fb DEFB $18,$00,$18,$00
 22+  8014              ; Disparo (CTRL_DESPLZ)="fd"
 23+  8014 06 00 06 00  Disparo_fd DEFB $06,$00,$06,$00
 24+  8018
 25+  8018              ; ----------------------------------------------------------------------------------------
 26+  8018
 27+  8018              ; Badsat_izq. 2x2.
 28+  8018
 29+  8018 28 80        Indice_Badsat_izq defw Badsat_izquierda
 30+  801A 68 81        	defw Badsat_izq_fe
 31+  801C 38 81        	defw Badsat_izq_fd
 32+  801E 08 81        	defw Badsat_izq_fc
 33+  8020 D8 80        	defw Badsat_izq_fb
 34+  8022 A8 80        	defw Badsat_izq_fa
 35+  8024 78 80        	defw Badsat_izq_f9
 36+  8026 48 80        	defw Badsat_izq_f8
 37+  8028
 38+  8028 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 38+  802C 02 2A 02 55
 39+  8030 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 39+  8034 7F E8 03 60
 40+  8038 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 40+  803C 2B E8 54 40
 41+  8040 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 41+  8044 28 00 10 00
 42+  8048
 43+  8048 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 43+  804C 0A 00 01 15
 44+  8050 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 44+  8054 01 55 00 01
 45+  8058 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 45+  805C 00 01 B0 00
 46+  8060 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 46+  8064 FC 00 15 F4
 47+  8068 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 47+  806C 55 30 00 2A
 48+  8070 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 48+  8074 00 08 00 00
 49+  8078
 50+  8078 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 50+  807C 85 00 00 8A
 51+  8080 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 51+  8084 00 AA 80 00
 52+  8088 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 52+  808C 00 00 D8 00
 53+  8090 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 53+  8094 FE 00 0A FA
 54+  8098 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 54+  809C 2A 98 00 15
 55+  80A0 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 55+  80A4 00 04 00 00
 56+  80A8
 57+  80A8 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 57+  80AC 42 80 00 45
 58+  80B0 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 58+  80B4 00 55 40 00
 59+  80B8 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 59+  80BC 00 00 6C 00
 60+  80C0 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 60+  80C4 FF 00 05 7D
 61+  80C8 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 61+  80CC 15 4C 00 0A
 62+  80D0 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 62+  80D4 00 02 00 00
 63+  80D8
 64+  80D8 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 64+  80DC 21 40 00 22
 65+  80E0 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 65+  80E4 00 2A A0 00
 66+  80E8 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 66+  80EC 80 00 36 00
 67+  80F0 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 67+  80F4 7F 80 02 BE
 68+  80F8 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 68+  80FC 0A A6 00 05
 69+  8100 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 69+  8104 00 01 00 00
 70+  8108
 71+  8108 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 71+  810C 10 A0 00 11
 72+  8110 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 72+  8114 00 15 50 00
 73+  8118 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 73+  811C 40 00 1B 00
 74+  8120 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 74+  8124 BF C0 01 5F
 75+  8128 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 75+  812C 05 53 00 02
 76+  8130 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 76+  8134 00 00 80 00
 77+  8138
 78+  8138 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 78+  813C 08 50 00 08
 79+  8140 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 79+  8144 00 0A A8 00
 80+  8148 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 80+  814C A0 00 0D 80
 81+  8150 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 81+  8154 5F F8 00 AF
 82+  8158 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 82+  815C 02 A9 00 01
 83+  8160 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 83+  8164 00 00 40 00
 84+  8168
 85+  8168 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 85+  816C 04 28 00 04
 86+  8170 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 86+  8174 00 05 54 00
 87+  8178 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 87+  817C D0 00 06 C0
 88+  8180 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 88+  8184 2F FC 00 57
 89+  8188 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 89+  818C 01 54 80 00
 90+  8190 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 90+  8194 00 00 20 00
 91+  8198
 92+  8198
 93+  8198 A8 81        Indice_Badsat_der defw Badsat_derecha
 94+  819A C8 81        	defw Badsat_der_f8
 95+  819C F8 81        	defw Badsat_der_f9
 96+  819E 28 82        	defw Badsat_der_fa
 97+  81A0 58 82        	defw Badsat_der_fb
 98+  81A2 88 82        	defw Badsat_der_fc
 99+  81A4 B8 82        	defw Badsat_der_fd
100+  81A6 E8 82        	defw Badsat_der_fe
101+  81A8
102+  81A8 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
102+  81AC 54 40 AA 40
103+  81B0 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
103+  81B4 17 FE 06 C0
104+  81B8 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
104+  81BC 17 D4 02 2A
105+  81C0 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
105+  81C4 00 14 00 08
106+  81C8
107+  81C8 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
107+  81CC 20 00 2A 20
108+  81D0 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
108+  81D4 2A A0 00 15
109+  81D8 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
109+  81DC 00 03 60 00
110+  81E0 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
110+  81E4 F4 00 0B EA
111+  81E8 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
111+  81EC 03 2A 80 00
112+  81F0 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
112+  81F4 00 00 04 00
113+  81F8
114+  81F8 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
114+  81FC 10 00 15 10
115+  8200 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
115+  8204 15 50 00 0A
116+  8208 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
116+  820C 80 01 B0 00
117+  8210 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
117+  8214 FA 00 05 F5
118+  8218 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
118+  821C 01 95 40 00
119+  8220 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
119+  8224 00 00 02 00
120+  8228
121+  8228 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
121+  822C 08 00 0A 88
122+  8230 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
122+  8234 0A A8 00 05
123+  8238 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
123+  823C C0 00 D8 00
124+  8240 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
124+  8244 FD 00 02 FA
125+  8248 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
125+  824C 00 CA A0 00
126+  8250 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
126+  8254 80 00 01 00
127+  8258
128+  8258 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
128+  825C 84 00 05 44
129+  8260 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
129+  8264 05 54 00 02
130+  8268 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
130+  826C E0 00 6C 00
131+  8270 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
131+  8274 FE 80 01 7D
132+  8278 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
132+  827C 00 65 50 00
133+  8280 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
133+  8284 40 00 00 80
134+  8288
135+  8288 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
135+  828C 42 00 02 A2
136+  8290 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
136+  8294 02 AA 00 01
137+  8298 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
137+  829C F0 00 36 00
138+  82A0 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
138+  82A4 FF 40 00 BE
139+  82A8 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
139+  82AC 00 32 A8 00
140+  82B0 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
140+  82B4 A0 00 00 40
141+  82B8
142+  82B8 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
142+  82BC A1 00 01 51
143+  82C0 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
143+  82C4 01 55 00 00
144+  82C8 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
144+  82CC F8 00 1B 00
145+  82D0 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
145+  82D4 FF A0 00 1F
146+  82D8 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
146+  82DC 00 09 54 00
147+  82E0 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
147+  82E4 50 00 00 20
148+  82E8
149+  82E8 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
149+  82EC 50 80 00 A8
150+  82F0 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
150+  82F4 00 AA 80 00
151+  82F8 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
151+  82FC FC 00 0D 80
152+  8300 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
152+  8304 FF D0 00 0F
153+  8308 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
153+  830C 00 04 AA 00
154+  8310 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
154+  8314 28 00 00 10
155+  8318
156+  8318              ; ----------------------------------------------------------------------------------------
157+  8318
158+  8318              ; Amadeus. 2x2.
159+  8318
160+  8318 38 83        Indice_Amadeus_der defw Amadeus
161+  831A 00 00        	defw 0
162+  831C 58 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
163+  831E 00 00        	defw 0
164+  8320 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
165+  8322 00 00        	defw 0
166+  8324 B8 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
167+  8326 00 00        	defw 0	 								; (Fín de índice).
168+  8328
169+  8328 38 83        Indice_Amadeus_izq defw Amadeus
170+  832A 00 00        	defw 0
171+  832C B8 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
172+  832E 00 00        	defw 0
173+  8330 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
174+  8332 00 00        	defw 0
175+  8334 58 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
176+  8336 00 00        	defw 0	 								; (Fín de índice).
177+  8338
178+  8338 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
178+  833C 26 64 24 24
179+  8340 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
179+  8344 6F F6 67 E6
180+  8348 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
180+  834C F7 EF FF FF
181+  8350 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
181+  8354 8B D1 71 8E
182+  8358
183+  8358 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
183+  835C F1 00 09 99
184+  8360 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
184+  8364 0B 0D 00 1B
185+  8368 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
185+  836C 80 19 F9 80
186+  8370 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
186+  8374 F3 C0 3D FB
187+  8378 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
187+  837C 3E F7 C0 3E
188+  8380 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
188+  8384 40 1C 63 80
189+  8388
190+  8388 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
190+  838C 3C 40 02 66
191+  8390 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
191+  8394 02 C3 40 06
192+  8398 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
192+  839C 60 06 7E 60
193+  83A0 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
193+  83A4 3C F0 0F 7E
194+  83A8 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
194+  83AC 0F BD F0 0F
195+  83B0 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
195+  83B4 10 07 18 E0
196+  83B8
197+  83B8 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
197+  83BC 8F 10 00 99
198+  83C0 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
198+  83C4 00 B0 D0 01
199+  83C8 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
199+  83CC D8 01 9F 98
200+  83D0 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
200+  83D4 CF 3C 03 DF
201+  83D8 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
201+  83DC 03 EF 7C 03
202+  83E0 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
202+  83E4 44 01 C6 38
203+  83E8
204+  83E8              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83E8              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83E8
  2+  83E8              ; Base de datos de entidades e Índice.
  3+  83E8              ;
  4+  83E8              ; 17/02/23
  5+  83E8
  6+  83E8              ; Control. %00000001 00000001
  7+  83E8              ;
  8+  83E8              ;     [Bit0] ..... Impacto. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
  9+  83E8              ;                  _ hacen las entidades hacia abajo.
 10+  83E8              ;
 11+  83E8              ;     [Bit8] ..... Dirección. "1" Cuando se produce colisión al generar un disparo.
 12+  83E8
 13+  83E8 EE 83        Indice_de_disparos_Amadeus defw Disparo_1A
 14+  83EA F6 83        	defw Disparo_2A
 15+  83EC FE 83        	defw Disparo_3A
 16+  83EE
 17+  83EE 00 00        Disparo_1A defw 0									; Control.
 18+  83F0 00 00        	defw 0											; Puntero objeto.
 19+  83F2 00 00        	defw 0											; Puntero de impresión.
 20+  83F4 00 00        	defw 0											; Rutina de impresión.
 21+  83F6
 22+  83F6 00 00        Disparo_2A defw 0									; Control.
 23+  83F8 00 00        	defw 0											; Puntero objeto.
 24+  83FA 00 00        	defw 0											; Puntero de impresión.
 25+  83FC 00 00        	defw 0											; Rutina de impresión.
 26+  83FE
 27+  83FE 00 00        Disparo_3A defw 0
 28+  8400
 29+  8400 16 84        Indice_de_disparos_entidades defw Disparo_1
 30+  8402 1E 84        	defw Disparo_2
 31+  8404 26 84        	defw Disparo_3
 32+  8406 2E 84        	defw Disparo_4
 33+  8408 36 84        	defw Disparo_5
 34+  840A 3E 84        	defw Disparo_6
 35+  840C 46 84        	defw Disparo_7
 36+  840E 4E 84        	defw Disparo_8
 37+  8410 56 84        	defw Disparo_9
 38+  8412 5E 84        	defw Disparo_10
 39+  8414 66 84        	defw Disparo_11
 40+  8416
 41+  8416 00 00        Disparo_1 defw 0									; Control.
 42+  8418 00 00        	defw 0											; Puntero objeto.
 43+  841A 00 00        	defw 0											; Puntero de impresión.
 44+  841C 00 00        	defw 0											; Rutina de impresión.
 45+  841E
 46+  841E 00 00        Disparo_2 defw 0									; Control.
 47+  8420 00 00        	defw 0											; Puntero objeto.
 48+  8422 00 00        	defw 0											; Puntero de impresión.
 49+  8424 00 00        	defw 0											; Rutina de impresión.
 50+  8426
 51+  8426 00 00        Disparo_3 defw 0									; Control.
 52+  8428 00 00        	defw 0											; Puntero objeto.
 53+  842A 00 00        	defw 0											; Puntero de impresión.
 54+  842C 00 00        	defw 0											; Rutina de impresión.
 55+  842E
 56+  842E 00 00        Disparo_4 defw 0									; Control.
 57+  8430 00 00        	defw 0											; Puntero objeto.
 58+  8432 00 00        	defw 0											; Puntero de impresión.
 59+  8434 00 00        	defw 0											; Rutina de impresión.
 60+  8436
 61+  8436 00 00        Disparo_5 defw 0									; Control.
 62+  8438 00 00        	defw 0											; Puntero objeto.
 63+  843A 00 00        	defw 0											; Puntero de impresión.
 64+  843C 00 00        	defw 0											; Rutina de impresión.
 65+  843E
 66+  843E 00 00        Disparo_6 defw 0									; Control.
 67+  8440 00 00        	defw 0											; Puntero objeto.
 68+  8442 00 00        	defw 0											; Puntero de impresión.
 69+  8444 00 00        	defw 0											; Rutina de impresión.
 70+  8446
 71+  8446 00 00        Disparo_7 defw 0									; Control.
 72+  8448 00 00        	defw 0											; Puntero objeto.
 73+  844A 00 00        	defw 0											; Puntero de impresión.
 74+  844C 00 00        	defw 0											; Rutina de impresión.
 75+  844E
 76+  844E 00 00        Disparo_8 defw 0									; Control.
 77+  8450 00 00        	defw 0											; Puntero objeto.
 78+  8452 00 00        	defw 0											; Puntero de impresión.
 79+  8454 00 00        	defw 0											; Rutina de impresión.
 80+  8456
 81+  8456 00 00        Disparo_9 defw 0									; Control.
 82+  8458 00 00        	defw 0											; Puntero objeto.
 83+  845A 00 00        	defw 0											; Puntero de impresión.
 84+  845C 00 00        	defw 0											; Rutina de impresión.
 85+  845E
 86+  845E 00 00        Disparo_10 defw 0									; Control.
 87+  8460 00 00        	defw 0											; Puntero objeto.
 88+  8462 00 00        	defw 0											; Puntero de impresión.
 89+  8464 00 00        	defw 0											; Rutina de impresión.
 90+  8466
 91+  8466 00 00        Disparo_11 defw 0
 92+  8468
 93+  8468              ; -------------------------------------------------------------------------------------
 94+  8468
 95+  8468              Indice_de_entidades									; 58 Bytes por entidad.
 96+  8468
 97+  8468 AE 84        	defw Entidad_1
 98+  846A E8 84        	defw Entidad_2
 99+  846C 22 85        	defw Entidad_3
100+  846E 5C 85        	defw Entidad_4
101+  8470              ;	...
102+  8470              ;	...
103+  8470              ;	+ entidades ...
104+  8470
105+  8470 00 00        	defw 0
106+  8472 00 00        	defw 0
107+  8474
108+  8474              ; ---------- ---------- ---------- ---------- ----------
109+  8474
110+  8474 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
111+  8476 00 00        	defw 0		 									; (Posicion_actual).
112+  8478 00 00        	defw 0	 										; (Puntero_objeto).
113+  847A 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
114+  847D
115+  847D 05           	db %00000101									; (Attr).
116+  847E
117+  847E 18 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
118+  8480 28 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
119+  8482 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
120+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
121+  8486
122+  8486 D0 50        	defw $50d0										; (Posicion_inicio).
123+  8488 04           	db 4 											; (Cuad_objeto).
124+  8489
125+  8489 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
126+  848D
127+  848D 00 00        	db 0,0											; Variables_de_borrado
128+  848F 00 00        	defw 0											;	" " " " " " "
129+  8491 00 00        	defw 0											;	" " " " " " "
130+  8493 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
131+  8497
132+  8497 00 00        	db 0,0											; Variables_de_pintado
133+  8499 00 00        	defw 0											;	" " " " " " "
134+  849B 00 00        	defw 0											;	" " " " " " "
135+  849D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
136+  84A1
137+  84A1 40 00        	db $40,0										; (Ctrl_0) / (Obj_dibujado).
138+  84A3
139+  84A3 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
140+  84A7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
141+  84AA
142+  84AA 00           	db 0 											; (Columnas).
143+  84AB 00 00        	defw 0											; (Limite_horizontal).
144+  84AD 00           	db 0											; (Limite_vertical).
145+  84AE
146+  84AE              ; ---------- ---------- ---------- ---------- ----------
147+  84AE
148+  84AE 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
149+  84B0 00 00        	defw 0											; (Posicion_actual).
150+  84B2 00 00        	defw 0 											; (Puntero_objeto).
151+  84B4 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
152+  84B7
153+  84B7 00           	db %00000000 									; (Attr).
154+  84B8
155+  84B8 00 00        	defw 0											; (Indice_Sprite_der).
156+  84BA 00 00        	defw 0											; (Indice_Sprite_izq).
157+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_der).
158+  84BE 00 00        	defw 0											; (Puntero_DESPLZ_izq).
159+  84C0
160+  84C0 00 00        	defw 0											; (Posicion_inicio).
161+  84C2 00           	db 0											; (Cuad_objeto).
162+  84C3
163+  84C3 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
164+  84C7
165+  84C7 00 00        	db 0,0										    ; Variables_de_borrado
166+  84C9 00 00        	defw 0											;	" " " " " " "
167+  84CB 00 00        	defw 0											;	" " " " " " "
168+  84CD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
169+  84D1
170+  84D1 00 00        	db 0,0											; Variables_de_pintado
171+  84D3 00 00        	defw 0											;	" " " " " " "
172+  84D5 00 00        	defw 0											;	" " " " " " "
173+  84D7 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
174+  84DB
175+  84DB 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
176+  84DD
177+  84DD 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
178+  84E1 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
179+  84E4
180+  84E4 00           	db 0 											; (Columnas).
181+  84E5 00 00        	defw 0											; (Limite_horizontal).
182+  84E7 00           	db 0											; (Limite_vertical).
183+  84E8
184+  84E8              ; ---------- ---------- ---------- ---------- ----------
185+  84E8
186+  84E8 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
187+  84EA 00 00        	defw 0                                          ; (Posicion_actual).
188+  84EC 00 00        	defw 0											; (Puntero_objeto).
189+  84EE 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
190+  84F1
191+  84F1 02           	db %00000010									; (Attr).
192+  84F2
193+  84F2 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
194+  84F4 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
195+  84F6 00 00        	defw 0											; (Puntero_DESPLZ_der).
196+  84F8 00 00        	defw 0											; (Puntero_DESPLZ_izq).
197+  84FA
198+  84FA 7E 47        	defw $477e                                      ; (Posicion_inicio).
199+  84FC 02           	db 2											; (Cuad_objeto).
200+  84FD
201+  84FD 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
202+  8501
203+  8501 00 00        	db 0,0											; Variables_de_borrado
204+  8503 00 00        	defw 0										 	;	" " " " " " "
205+  8505 00 00        	defw 0											;	" " " " " " "
206+  8507 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
207+  850B
208+  850B 00 00        	db 0,0											; Variables_de_pintado
209+  850D 00 00        	defw 0											;	" " " " " " "
210+  850F 00 00        	defw 0											;	" " " " " " "
211+  8511 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
212+  8515
213+  8515 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
214+  8517
215+  8517 A5 93 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
216+  851B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
217+  851E
218+  851E 00           	db 0 											; (Columnas).
219+  851F 00 00        	defw 0											; (Limite_horizontal).
220+  8521 00           	db 0											; (Limite_vertical).
221+  8522
222+  8522              ; ---------- ---------- ---------- ---------- ----------
223+  8522
224+  8522 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
225+  8524 00 00        	defw 0                                          ; (Posicion_actual).
226+  8526 00 00        	defw 0											; (Puntero_objeto).
227+  8528 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
228+  852B
229+  852B 04           	db %00000100									; (Attr).
230+  852C
231+  852C 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
232+  852E 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
233+  8530
234+  8530 00 00        	defw 0											; (Puntero_DESPLZ_der).
235+  8532 00 00        	defw 0											; (Puntero_DESPLZ_izq).
236+  8534
237+  8534 A1 47        	defw $47a1                                      ; (Posicion_inicio).
238+  8536 01           	db 1											; (Cuad_objeto).
239+  8537
240+  8537 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
241+  853B
242+  853B 00 00        	db 0,0											; Variables_de_borrado
243+  853D 00 00        	defw 0										 	;	" " " " " " "
244+  853F 00 00        	defw 0											;	" " " " " " "
245+  8541 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
246+  8545
247+  8545 00 00        	db 0,0											; Variables_de_pintado
248+  8547 00 00        	defw 0											;	" " " " " " "
249+  8549 00 00        	defw 0											;	" " " " " " "
250+  854B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
251+  854F
252+  854F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
253+  8551
254+  8551 A7 93 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
255+  8555 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
256+  8558
257+  8558 00           	db 0 											; (Columnas).
258+  8559 00 00        	defw 0											; (Limite_horizontal).
259+  855B 00           	db 0											; (Limite_vertical).
260+  855C
261+  855C              ; ---------- ---------- ---------- ---------- ----------
262+  855C
263+  855C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
264+  855E 00 00        	defw 0                                          ; (Posicion_actual).
265+  8560 00 00        	defw 0 											; (Puntero_objeto).
266+  8562 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
267+  8565
268+  8565 01           	db %00000001									; (Attr).
269+  8566
270+  8566 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
271+  8568 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
272+  856A
273+  856A 00 00        	defw 0											; (Puntero_DESPLZ_der).
274+  856C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
275+  856E
276+  856E BE 47        	defw $47be                                      ; (Posicion_inicio).
277+  8570 00           	db 0											; (Cuad_objeto).
278+  8571
279+  8571 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
280+  8575
281+  8575 00 00        	db 0,0											; Variables_de_borrado
282+  8577 00 00        	defw 0										 	;	" " " " " " "
283+  8579 00 00        	defw 0											;	" " " " " " "
284+  857B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
285+  857F
286+  857F 00 00        	db 0,0											; Variables_de_pintado
287+  8581 00 00        	defw 0											;	" " " " " " "
288+  8583 00 00        	defw 0											;	" " " " " " "
289+  8585 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
290+  8589
291+  8589 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
292+  858B
293+  858B 97 93 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
294+  858F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
295+  8592
296+  8592 00           	db 0 											; (Columnas).
297+  8593 00 00        	defw 0											; (Limite_horizontal).
298+  8595 00           	db 0											; (Limite_vertical).
299+  8596
# file closed: Entidades_y_disparos.asm
 21   8596
 22   8596              ; ******************************************************************************************************************************************************************************************
 23   8596              ; Constantes.
 24   8596              ; ******************************************************************************************************************************************************************************************
 25   8596              ;
 26   8596              ; 8/11/22
 27   8596              ;
 28   8596              ; Constantes generales.
 29   8596              ;
 30   8596
 31   8596              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8596              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8596              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8596              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8596
 36   8596              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 37   8596              ;                                   				    ; _de los registros y las llamadas a las rutinas de impresión.
 38   8596              ;                               				        ; De momento situamos este almacén en $7000.
 39   8596              Album_de_fotos_disparos equ $7060						; En (Album_de_fotos_disparos) vamos a ir almacenando los valores_
 40   8596              ;                                   				    ; _de los registros y llamadas a las distintas rutinas de impresión para poder pintar `disparos´.
 41   8596              ;                               				        ; De momento situamos este almacén en $7060.
 42   8596
 43   8596              ; ******************************************************************************************************************************************************************************************
 44   8596              ; Variables.
 45   8596              ; ******************************************************************************************************************************************************************************************
 46   8596              ;
 47   8596              ; 10/11/22
 48   8596              ;
 49   8596              ; Variables de DRAW. (Motor principal).
 50   8596              ;
 51   8596              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 52   8596
 53   8596 02           Filas db 2												; Filas. [DRAW]
 54   8597 02           Columns db 2  											; Nº de columnas. [DRAW]
 55   8598 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 56   859A 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 57   859C 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 58   859D 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 59   859E
 60   859E              ; ---------- ---------- ---------- ---------;      ;---------
 61   859E
 62   859E 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 63   859F              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 64   859F              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 65   859F 04           Attr db %00000100										; Atributos de la entidad:
 66   85A0
 67   85A0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   85A0              ;
 69   85A0              ;	COLORES: 0 ..... NEGRO
 70   85A0              ;    		 1 ..... AZUL
 71   85A0              ; 			 2 ..... ROJO
 72   85A0              ;			 3 ..... MAGENTA
 73   85A0              ; 			 4 ..... VERDE
 74   85A0              ; 			 5 ..... CIAN
 75   85A0              ;			 6 ..... AMARILLO
 76   85A0              ; 			 7 ..... BLANCO
 77   85A0
 78   85A0 98 81        Indice_Sprite_der defw Indice_Badsat_der
 79   85A2 18 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   85A4 00 00        Puntero_DESPLZ_der defw 0
 81   85A6 00 00        Puntero_DESPLZ_izq defw 0
 82   85A8
 83   85A8 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   85AA 02           Cuad_objeto db 2										; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   85AB
 86   85AB              ; Variables de objeto. (Características).
 87   85AB
 88   85AB 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   85AC 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   85AD 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   85AE 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   85AF
 93   85AF 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   85B1 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   85B3 00 00        	defw 0
 96   85B5 00 00 00 00  	db 0,0,0,0
 97   85B9
 98   85B9 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   85BB 00 00        	defw 0
100   85BD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   85BF 00 00 00 00  	db 0,0,0,0
102   85C3
103   85C3              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   85C3
105   85C3 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   85C4              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   85C4              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   85C4              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   85C4              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   85C4              ;
111   85C4              ; 														DESCRIPCIÖN:
112   85C4              ;
113   85C4              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   85C4              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   85C4              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   85C4              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   85C4              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   85C4              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   85C4              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   85C4              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   85C4              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   85C4              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   85C4              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   85C4              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   85C4              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   85C4              ;
127   85C4              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   85C4              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   85C4              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   85C4
131   85C4 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   85C5
133   85C5              ; Movimiento.
134   85C5
135   85C5 93 93        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
136   85C7 00 00        Puntero_mov defw 0
137   85C9 00           Contador_db_mov db 0
138   85CA 00           Incrementa_puntero db 0
139   85CB 00           Repetimos_db db 0
140   85CC
141   85CC              ; Variables de funcionamiento. [DRAW].
142   85CC
143   85CC 00           Columnas db 0
144   85CD 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
145   85CF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   85CF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   85D0
148   85D0              ; 59 Bytes por entidad.
149   85D0              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
150   85D0              ;					         		---------;      ;---------
151   85D0
152   85D0
153   85D0              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   85D0
155   85D0 00           Ctrl_1 db 0 											; 2º Byte de control de propósito general.
156   85D1
157   85D1              ;														DESCRIPCIÓN:
158   85D1              ;
159   85D1              ;														BIT 0, La rutina de generación de disparos, [Genera_disparo], pone este bit a "1" para indicar a la_
160   85D1              ;															_ rutina [Guarda_foto_registros] que los datos a guardar pertenecen a un disparo y no a una entidad,_
161   85D1              ;															_ por lo tanto hemos de almacenarlos en `Album_de_fotos_disparos´ en lugar de `Album_de_fotos´.
162   85D1              ; Gestión de ENTIDADES.
163   85D1
164   85D1 00 00        Puntero_store_entidades defw 0
165   85D3 00 00        Puntero_restore_entidades defw 0
166   85D5 00 00        Indice_restore defw 0
167   85D7 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
168   85D8 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
169   85D9              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
170   85D9              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
171   85D9              ;														; _ (Numero_de_malotes)="0".
172   85D9 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
173   85DB              ;														; _variable para almacenar lo posición del puntero_
174   85DB              ; 														; _de pila, SP.
175   85DB 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
176   85DD              ;														; La utiliza la rutina [Extrae_foto_registros].
177   85DD 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
178   85DF              ;														; _el snapshot de los registros de la siguiente entidad.
179   85DF              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
180   85DF 60 70        Stack_snapshot_disparos defw Album_de_fotos_disparos	; Puntero que indica la posición de memoria donde vamos a guardar_
181   85E1              ;														; _el snapshot de los registros del siguiente disparo.
182   85E1              ;														; Inicialmente está situado en la posición $7060, Album_de_fotos_disparos.
183   85E1
184   85E1              ; Gestión de Disparos.
185   85E1
186   85E1              ;Puntero_extraccion_disparo_Amadeus defw 0
187   85E1              ;Puntero_extraccion_disparo_entidades defw 0
188   85E1 00           Numero_de_disparotes db 0
189   85E2 00 00        Puntero_DESPLZ_DISPARO_ENTIDADES defw 0
190   85E4 00 00        Puntero_DESPLZ_DISPARO_AMADEUS defw 0
191   85E6
192   85E6              ; Gestión de FRAMES.
193   85E6
194   85E6 00           Switch db 0
195   85E7
196   85E7              ; Variables de Raster y localización en pantalla.
197   85E7
198   85E7 00 FF        Temp_Raster defw $ff00
199   85E9
200   85E9              ; Rutina principal *************************************************************************************************************************************************************************
201   85E9              ;
202   85E9              ;	14/11/22
203   85E9
204   85E9 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
205   85EC
206   85EC 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
207   85EE ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
208   85F0 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
209   85F2 F3           	DI
210   85F3
211   85F3 3E 01        	ld a,1
212   85F5 D3 FE        	out ($fe),a
213   85F7
214   85F7 3E 07        	ld a,%00000111
215   85F9 CD CC 8F     	call Cls
216   85FC
217   85FC              ;	call Pinta_FILAS
218   85FC
219   85FC CD 38 88     	call Pulsa_ENTER
220   85FF
221   85FF 21 D7 85     	ld hl,Numero_de_entidades
222   8602 46           	ld b,(hl)
223   8603 04           	inc b
224   8604 05           	dec b
225   8605 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
226   8607
227   8607              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
228   8607              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
229   8607              ;	Pintamos el resto de entidades:
230   8607
231   8607 CD 31 87     	call Inicia_punteros_de_entidades
232   860A
233   860A              ;	INICIA ENTIDADES!!!!!
234   860A
235   860A C5           1 push bc  												; Guardo el contador de entidades.
236   860B CD 8B 87      	call Inicia_Puntero_objeto
237   860E CD 1C 8A     	call Draw
238   8611 CD A0 7F     	call Guarda_foto_registros
239   8614 CD D3 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
240   8617 C1           	pop bc
241   8618 10 F0        	djnz 1B  											; Decremento el contador de entidades.
242   861A
243   861A              ; 	INICIA AMADEUS!!!!!
244   861A
245   861A CD 14 88     3 call Restore_Amadeus
246   861D CD 8B 87     	call Inicia_Puntero_objeto
247   8620 CD 1C 8A     	call Draw
248   8623 CD A0 7F     	call Guarda_foto_registros
249   8626 CD 26 88     	call Store_Amadeus
250   8629
251   8629              ; Iniciamos los punteros de los índices de las dos bases de datos de disparo, (Amadeus/Entidades).
252   8629
253   8629 CD 47 87     	call Inicia_Puntero_Disparo_Entidades
254   862C CD 4E 87     	call Inicia_Puntero_Disparo_Amadeus
255   862F
256   862F              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
257   862F
258   862F CD 31 87     	call Inicia_punteros_de_entidades
259   8632 CD 02 88     	call Restore_Primera_entidad
260   8635
261   8635 3A D7 85     	ld a,(Numero_de_entidades)
262   8638 3C           	inc a
263   8639 32 D8 85     	ld (Numero_de_malotes),a
264   863C
265   863C FB           2 ei
266   863D 18 FD        	jr 2B
267   863F
268   863F              ; -----------------------------------------------------------------------------------
269   863F
270   863F              Frame
271   863F
272   863F              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
273   863F              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
274   863F
275   863F 3E 02            ld a,2
276   8641 D3 FE            out ($fe),a
277   8643 CD 20 8D     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
278   8646 CD 59 8D     	call Extrae_foto_disparos
279   8649 3E 01            ld a,1
280   864B D3 FE            out ($fe),a
281   864D
282   864D              ; ----------------------------------------------------------------------
283   864D
284   864D CD FE 89     	call Limpia_album_disparos 							; Después de borrar/pintar los disparos, limpiamos el album.
285   8650
286   8650 21 00 70     	ld hl,Album_de_fotos
287   8653 22 DD 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
288   8656              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
289   8656 3A D7 85         ld a,(Numero_de_entidades)
290   8659 47               ld b,a
291   865A A7           	and a
292   865B 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
293   865D
294   865D C5           2 push bc
295   865E CD AA 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
296   8661 3A C3 85     	ld a,(Ctrl_0)
297   8664 CB 67        	bit 4,a
298   8666 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
299   8668
300   8668              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
301   8668              ; Las entidades sólo generan disparo cuando se mueven.
302   8668              ; 16/02/23.
303   8668              ; [[[
304   8668 CD 6F 88     	call Detecta_disparo_entidad
305   866B              ; ]]]
306   866B CD F8 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
307   866E
308   866E 21 C3 85     1 ld hl,Ctrl_0
309   8671 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
310   8673 AF           	xor a
311   8674 32 C4 85     	ld (Obj_dibujado),a
312   8677 CD D3 87     	call Store_Restore_entidades
313   867A C1           	pop bc
314   867B 10 E0        	djnz 2B
315   867D
316   867D              ; Tras la gestión de las entidades, ... AMADEUS.
317   867D
318   867D CD 14 88     4 call Restore_Amadeus
319   8680 CD C9 86     	call Mov_Amadeus
320   8683 3A C3 85     	ld a,(Ctrl_0)
321   8686 CB 67        	bit 4,a
322   8688 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
323   868A CD F8 86     	call Guarda_foto_entidad_a_pintar
324   868D
325   868D 21 C3 85     3 ld hl,Ctrl_0
326   8690 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
327   8692 AF           	xor a
328   8693 32 C4 85     	ld (Obj_dibujado),a
329   8696 CD 26 88     	call Store_Amadeus
330   8699
331   8699              ; -----
332   8699
333   8699 CD 31 87     	call Inicia_punteros_de_entidades
334   869C CD 02 88     	call Restore_Primera_entidad
335   869F
336   869F              ; Calculamos el nº de malotes y de disparotes para pintarlos nada más comenzar el siguiente FRAME.
337   869F
338   869F CD 55 87     	call Calcula_numero_de_malotes
339   86A2 CD 6D 87     	call Calcula_numero_de_disparotes
340   86A5
341   86A5 3E 04        	ld a,4
342   86A7 D3 FE        	out ($fe),a
343   86A9 C9           	ret
344   86AA
345   86AA              ; --------------------------------------------------------------------------------------------------------------
346   86AA              ;
347   86AA              ;	29/1/23
348   86AA
349   86AA              Mov_obj
350   86AA
351   86AA              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
352   86AA
353   86AA AF           	xor a
354   86AB 32 C4 85     	ld (Obj_dibujado),a
355   86AE CD 02 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
356   86B1              ;														; Obj_dibujado="0".
357   86B1              ; Movemos Entidades malignas.
358   86B1
359   86B1 CD A9 93     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
360   86B4 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
361   86B7 CB 67        	bit 4,a
362   86B9 C8           	ret z
363   86BA
364   86BA              ; ---------
365   86BA
366   86BA 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
367   86BC 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
368   86BF CD 02 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
369   86C2 CD 19 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
370   86C5 CD E8 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
371   86C8 C9           	ret													; _de la misma.
372   86C9
373   86C9              ; --------------------------------------------------------------------------------------------------------------
374   86C9              ;
375   86C9              ;	29/1/23
376   86C9
377   86C9              Mov_Amadeus
378   86C9
379   86C9 AF           	xor a
380   86CA 32 C4 85     	ld (Obj_dibujado),a
381   86CD CD 02 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
382   86D0              ;														; Obj_dibujado="0".
383   86D0              ; Movemos Amadeus.
384   86D0
385   86D0 CD 4C 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
386   86D3 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
387   86D6 CB 67        	bit 4,a
388   86D8 C8           	ret z
389   86D9
390   86D9              ; ---------
391   86D9
392   86D9 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
393   86DB 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
394   86DE CD 02 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
395   86E1 CD 19 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
396   86E4 CD E8 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
397   86E7 C9           	ret													; _de la nave.
398   86E8
399   86E8              ; --------------------------------------------------------------------------------------------------------------
400   86E8              ;
401   86E8              ;	31/01/23
402   86E8              ;
403   86E8              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
404   86E8
405   86E8              Guarda_foto_entidad_a_borrar
406   86E8
407   86E8 CD F6 8C     	call Prepara_draw
408   86EB CD 30 8C     	call calcula_CColumnass
409   86EE CD 67 8C     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
410   86F1 CD BC 8C     	call Define_rutina_de_impresion
411   86F4 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
412   86F7 C9           	ret
413   86F8
414   86F8              ; --------------------------------------------------------------------------------------------------------------
415   86F8              ;
416   86F8              ;	31/01/23
417   86F8              ;
418   86F8              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
419   86F8              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
420   86F8
421   86F8              Guarda_foto_entidad_a_pintar
422   86F8
423   86F8 CD 25 87     	call Repone_pintar
424   86FB CD 1C 8A     	call Draw
425   86FE CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
426   8701 C9           	ret
427   8702
428   8702              ; --------------------------------------------------------------------------------------------------------------
429   8702              ;
430   8702              ;
431   8702
432   8702 21 96 85     Prepara_var_pintado_borrado	ld hl,Filas
433   8705 3A C4 85     	ld a,(Obj_dibujado)
434   8708 A7           	and a
435   8709 28 05        	jr z,1F
436   870B 11 B9 85     	ld de,Variables_de_pintado
437   870E 18 03        	jr 2F
438   8710 11 AF 85     1 ld de,Variables_de_borrado
439   8713 01 08 00     2 ld bc,8
440   8716 ED B0        	ldir
441   8718 C9           	ret
442   8719
443   8719              ; --------------------------------------------------------------------------------------------------------------
444   8719
445   8719 21 AF 85     Repone_borrar ld hl,Variables_de_borrado
446   871C 11 96 85     	ld de,Filas
447   871F 01 08 00     	ld bc,8
448   8722 ED B0        	ldir
449   8724 C9           	ret
450   8725
451   8725 21 B9 85     Repone_pintar ld hl,Variables_de_pintado
452   8728 11 96 85     	ld de,Filas
453   872B 01 08 00     	ld bc,8
454   872E ED B0        	ldir
455   8730 C9           	ret
456   8731
457   8731              ; *************************************************************************************************************************************************************
458   8731              ;
459   8731              ; 8/1/23
460   8731              ;
461   8731              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
462   8731              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
463   8731              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
464   8731
465   8731              ; Destruye HL y DE !!!!!
466   8731
467   8731              Inicia_punteros_de_entidades
468   8731
469   8731 21 68 84     	ld hl,Indice_de_entidades
470   8734 CD 85 87         call Extrae_address
471   8737 22 D1 85         ld (Puntero_store_entidades),hl
472   873A 21 6A 84     	ld hl,Indice_de_entidades+2
473   873D 22 D5 85     	ld (Indice_restore),hl
474   8740 CD 85 87     	call Extrae_address
475   8743 22 D3 85     	ld (Puntero_restore_entidades),hl
476   8746 C9               ret
477   8747
478   8747              ; *************************************************************************************************************************************************************
479   8747              ;
480   8747              ; 8/1/23
481   8747              ;
482   8747              ;	Inicializamos los punteros de selección de los 2 índices de disparo, Amadeus y Entidades.
483   8747
484   8747 21 00 84     Inicia_Puntero_Disparo_Entidades ld hl,Indice_de_disparos_entidades
485   874A 22 E2 85     	ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
486   874D C9           	ret
487   874E 21 E8 83     Inicia_Puntero_Disparo_Amadeus ld hl,Indice_de_disparos_Amadeus
488   8751 22 E4 85     	ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
489   8754 C9           	ret
490   8755
491   8755              ; -------------------------------------------------------------------------------------------------------------
492   8755              ;
493   8755              ; 28/2/23
494   8755              ;
495   8755
496   8755              Calcula_numero_de_malotes
497   8755
498   8755 21 00 70     	ld hl,Album_de_fotos
499   8758 EB           	ex de,hl
500   8759 2A DD 85     	ld hl,(Stack_snapshot)
501   875C
502   875C 06 00        	ld b,0
503   875E 7D           	ld a,l
504   875F 93           	sub e
505   8760 28 07        	jr z,1F
506   8762
507   8762              ; Nº de malotes no es "0".
508   8762
509   8762 D6 06        2 sub 6
510   8764 04           	inc b
511   8765 A7           	and a
512   8766 20 FA        	jr nz,2B
513   8768 78           	ld a,b
514   8769
515   8769 32 D8 85     1 ld (Numero_de_malotes),a
516   876C C9           	ret
517   876D
518   876D              ; -------------------------------------------------------------------------------------------------------------
519   876D              ;
520   876D              ; 28/2/23
521   876D              ;
522   876D
523   876D              Calcula_numero_de_disparotes
524   876D
525   876D 21 60 70     	ld hl,Album_de_fotos_disparos
526   8770 EB           	ex de,hl
527   8771 2A DF 85     	ld hl,(Stack_snapshot_disparos)
528   8774
529   8774 06 00        	ld b,0
530   8776 7D           	ld a,l
531   8777 93           	sub e
532   8778 28 07        	jr z,1F
533   877A
534   877A              ; Nº de malotes no es "0".
535   877A
536   877A D6 06        2 sub 6
537   877C 04           	inc b
538   877D A7           	and a
539   877E 20 FA        	jr nz,2B
540   8780 78           	ld a,b
541   8781
542   8781 32 E1 85     1 ld (Numero_de_disparotes),a
543   8784 C9           	ret
544   8785              ; *************************************************************************************************************************************************************
545   8785              ;
546   8785              ; 20/10/22
547   8785              ;
548   8785              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
549   8785              ;
550   8785              ; Destruye el puntero y DE !!!!!
551   8785
552   8785 5E           Extrae_address ld e,(hl)
553   8786 23           	inc hl
554   8787 56           	ld d,(hl)
555   8788 2B           	dec hl
556   8789 EB           	ex de,hl
557   878A C9           	ret
558   878B
559   878B              ; *************************************************************************************************************************************************************
560   878B              ;
561   878B              ;	7/2/23
562   878B              ;
563   878B              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
564   878B              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
565   878B              ;
566   878B              ;   Destruye HL y BC !!!!!,
567   878B              ;
568   878B              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
569   878B              ;					"0" ..... Izquierda.
570   878B
571   878B              Inicia_Puntero_objeto
572   878B
573   878B 3A AA 85     	ld a,(Cuad_objeto)
574   878E E6 01        	and 1
575   8790 F5           	push af
576   8791 CC AF 87     	call z,Inicia_puntero_objeto_izq
577   8794 F1           	pop af
578   8795 28 2B        	jr z,1F
579   8797 CD 9C 87     	call Inicia_puntero_objeto_der
580   879A 18 26        	jr 1F
581   879C
582   879C              ; Arrancamos desde la parte izquierda de la pantalla.
583   879C              ; Iniciamos (Indice_Sprite_der).
584   879C
585   879C 2A A0 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
586   879F 22 A4 85     	ld (Puntero_DESPLZ_der),hl
587   87A2 CD 85 87     	call Extrae_address
588   87A5 22 9A 85     	ld (Puntero_objeto),hl
589   87A8
590   87A8 2A A2 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
591   87AB              ;	call Extrae_address
592   87AB 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
593   87AE C9           	ret
594   87AF
595   87AF              ; Arrancamos desde la parte derecha de la pantalla.
596   87AF              ; Iniciamos (Indice_Sprite_izq).
597   87AF
598   87AF 2A A2 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
599   87B2 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
600   87B5 CD 85 87     	call Extrae_address
601   87B8 22 9A 85     	ld (Puntero_objeto),hl
602   87BB
603   87BB 2A A0 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
604   87BE              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
605   87BE 22 A4 85     	ld (Puntero_DESPLZ_der),hl
606   87C1 C9           	ret
607   87C2
608   87C2              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
609   87C2
610   87C2 21 38 83     1 ld hl,Amadeus
611   87C5 ED 4B 9A 85  	ld bc,(Puntero_objeto)
612   87C9 B7 ED 42     	sub hl,bc
613   87CC C0           	ret nz
614   87CD 21 C3 85     	ld hl,Ctrl_0
615   87D0 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
616   87D2 C9           	ret 												; _de nuestra nave en los extremos.
617   87D3
618   87D3              ; *************************************************************************************************************************************************************
619   87D3              ;
620   87D3              ;	8/1/23
621   87D3              ;
622   87D3              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
623   87D3              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
624   87D3
625   87D3              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
626   87D3              ;	_de la 2ª y 3ª entidad respectivamente.
627   87D3
628   87D3              Store_Restore_entidades
629   87D3
630   87D3 E5           	push hl
631   87D4 D5           	push de
632   87D5 C5            	push bc
633   87D6
634   87D6              ;	STORE !!!!!
635   87D6              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
636   87D6
637   87D6 21 96 85     	ld hl,Filas
638   87D9 ED 5B D1 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
639   87DD 01 3A 00     	ld bc,58
640   87E0 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
641   87E2
642   87E2              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
643   87E2
644   87E2 2A D3 85     	ld hl,(Puntero_restore_entidades)
645   87E5 22 D1 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
646   87E8 11 96 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
647   87EB 01 3A 00     	ld bc,58
648   87EE ED B0        	ldir
649   87F0
650   87F0              ;	Incrementa RESTORE !!!!!
651   87F0
652   87F0 2A D5 85         ld hl,(Indice_restore)
653   87F3 23           	inc hl
654   87F4 23           	inc hl
655   87F5 22 D5 85     	ld (Indice_restore),hl
656   87F8 CD 85 87         call Extrae_address
657   87FB 22 D3 85         ld (Puntero_restore_entidades),hl
658   87FE C1           	pop bc
659   87FF D1           	pop de
660   8800 E1           	pop hl
661   8801 C9           	ret
662   8802
663   8802              ; **************************************************************************************************
664   8802              ;
665   8802              ;	29/10/22
666   8802              ;
667   8802              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
668   8802
669   8802 E5           Restore_Primera_entidad push hl
670   8803 D5           	push de
671   8804 C5            	push bc
672   8805 2A D1 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
673   8808 11 96 85     	ld de,Filas
674   880B 01 3A 00     	ld bc,58
675   880E ED B0        	ldir
676   8810 C1           	pop bc
677   8811 D1           	pop de
678   8812 E1           	pop hl
679   8813 C9           	ret
680   8814
681   8814              ; **************************************************************************************************
682   8814              ;
683   8814              ;	25/01/23
684   8814              ;
685   8814              ;	Restore_Amadeus
686   8814              ;
687   8814              ;	Cargamos en DRAW los parámetros de Amadeus.
688   8814              ;
689   8814
690   8814 E5           Restore_Amadeus	push hl
691   8815 D5           	push de
692   8816 C5            	push bc
693   8817 21 74 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
694   881A 11 96 85     	ld de,Filas
695   881D 01 3A 00     	ld bc,58
696   8820 ED B0        	ldir
697   8822 C1           	pop bc
698   8823 D1           	pop de
699   8824 E1           	pop hl
700   8825 C9           	ret
701   8826
702   8826              ; *************************************************************************************************************************************************************
703   8826              ;
704   8826              ;	29/01/23
705   8826              ;
706   8826              ;	Store_Amadeus
707   8826              ;
708   8826              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
709   8826              ;
710   8826
711   8826 E5           Store_Amadeus push hl
712   8827 D5           	push de
713   8828 C5            	push bc
714   8829 21 96 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
715   882C 11 74 84     	ld de,Amadeus_db
716   882F 01 3A 00     	ld bc,58
717   8832 ED B0        	ldir
718   8834 C1           	pop bc
719   8835 D1           	pop de
720   8836 E1           	pop hl
721   8837 C9           	ret
722   8838
723   8838              ; **************************************************************************************************
724   8838
725   8838              ; Teclado.
726   8838
727   8838 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
728   883A DB FE        	in a,($fe)
729   883C E6 01        	and $01
730   883E 28 02        	jr z,1f
731   8840 18 F6        	jr Pulsa_ENTER
732   8842 C9           1 ret
733   8843
734   8843              ; **************************************************************************************************
735   8843              ;
736   8843              ; Temporización.
737   8843
738   8843              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
739   8843              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
740   8843              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
741   8843              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
742   8843
743   8843              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
744   8843              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
745   8843              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
746   8843
747   8843              ; A partir de $4f61 no hace falta DELAY.
748   8843
749   8843              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
750   8843
751   8843 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
752   8846 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
753   8847 78           	LD A,B
754   8848 A7           	AND A
755   8849 20 FB        	JR NZ,wait
756   884B C9           	RET
757   884C
758   884C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
759   884C              ;
760   884C              ;	5/3/23
761   884C              ;
762   884C              ;	En 1er lugar detectamos disparo (5), seguido de los movimientos a izq. / derecha.
763   884C
764   884C              Movimiento_Amadeus
765   884C
766   884C              ; Disparo.
767   884C
768   884C 3E F7        	ld a,$f7												; "5" para disparar.
769   884E DB FE        	in a,($fe)
770   8850 E6 10        	and $10
771   8852 CC A3 88     	call z,Genera_disparo
772   8855
773   8855 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
774   8857 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
775   8859 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
776   885B CC 5A 91         call z,Mov_left											;			"			"			"			"			"			"			"			"
777   885E 3E F7        	ld a,$f7
778   8860 DB FE        	in a,($fe)
779   8862 E6 01        	and $01
780   8864 C8           	ret z
781   8865
782   8865 3E F7        	ld a,$f7
783   8867 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
784   8869 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
785   886B CC 3C 90     	call z,Mov_right										;			"			"			"			"			"			"			"			"
786   886E C9           	ret
787   886F
788   886F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
789   886F              ;
790   886F              ;	Rutina provisional para que los malotes cagen balas.
791   886F
792   886F 3E 7F        Detecta_disparo_entidad ld a,$7f
793   8871 DB FE        	in a,($fe)
794   8873 E6 01        	and 1
795   8875 C0           	ret nz
796   8876 CD A3 88     	call Genera_disparo
797   8879 C9           	ret
798   887A
799   887A              ; Pinta indicadores de FILAS. ------------------------------------------------------
800   887A
801   887A 21 10 40     Pinta_FILAS ld hl,$4010
802   887D              ;	ld b,9
803   887D              ;2 push hl
804   887D              ;	push bc
805   887D 06 BF        	ld b,$bf
806   887F 36 80        1 ld (hl),%10000000
807   8881 CD 02 8D     	call NextScan
808   8884 10 F9        	djnz 1B
809   8886              ;	pop bc
810   8886              ;	pop hl
811   8886              ;	inc l
812   8886              ;	djnz 2B
813   8886 06 03        	ld b,3
814   8888 21 00 47         ld hl,$4700
815   888B CD 91 88     3 call Bucle_1
816   888E 10 FB            djnz 3B
817   8890 C9               ret
818   8891
819   8891 C5           Bucle_1 push bc
820   8892 E5                   push hl
821   8893 D1                   pop de
822   8894 13                   inc de
823   8895 01 FF 00             ld bc,255
824   8898 36 FF                ld (hl),255
825   889A ED B0                ldir
826   889C 23                   inc hl
827   889D 3E 07                ld a,7
828   889F 84                   add a,h
829   88A0 67                   ld h,a
830   88A1 C1                   pop bc
831   88A2 C9                   ret
832   88A3
833   88A3              ; ---------------------------------------------------------------
834   88A3
835   88A3              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  88A3              ; ******************************************************************************************************************************************************************************************
  2+  88A3              ;
  3+  88A3              ;   19/02/23
  4+  88A3              ;
  5+  88A3              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  88A3              ;   En el caso de generar disparo la rutina proporciona 4 variables:
  7+  88A3              ;
  8+  88A3              ;
  9+  88A3              ;       -1 .defw ..... Control. %00000001 00000001
 10+  88A3              ;
 11+  88A3              ;           [Bit0] ..... Dirección. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
 12+  88A3              ;               _ hacen las entidades hacia abajo.
 13+  88A3              ;
 14+  88A3              ;           [Bit8] ..... Impacto. "1" Cuando se produce colisión al generar un disparo.
 15+  88A3              ;
 16+  88A3              ;       - 2 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 17+  88A3              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 18+  88A3              ;
 19+  88A3              ;       - 3 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 20+  88A3              ;           _ la bala.
 21+  88A3              ;
 22+  88A3              ;       - 4 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 23+  88A3              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 24+  88A3              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 25+  88A3              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 26+  88A3              ;           _ en el momento de generarse la bala)).
 27+  88A3
 28+  88A3              Genera_disparo
 29+  88A3
 30+  88A3              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 31+  88A3              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 32+  88A3              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 33+  88A3              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 34+  88A3              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 35+  88A3              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga estos valores, $00, $f9, $fb y $fd.
 36+  88A3              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 37+  88A3
 38+  88A3 3A CC 85         ld a,(Columnas)
 39+  88A6 47               ld b,a
 40+  88A7 3A 97 85         ld a,(Columns)
 41+  88AA B8               cp b
 42+  88AB C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 43+  88AC
 44+  88AC              ; ----- ----- -----
 45+  88AC
 46+  88AC 21 00 80         ld hl,Indice_disparo
 47+  88AF 3A 9E 85         ld a,(CTRL_DESPLZ)
 48+  88B2 4F               ld c,a
 49+  88B3 06 00            ld b,0	                            ; B será 0,1,2 o 3 en función del valor de (CTRL_DESPLZ).
 50+  88B5              ;                                           Cuando (CTRL_DESPLZ)="0", B="0"
 51+  88B5              ;                                            ""        ""       "f9", B="1"
 52+  88B5              ;                                            ""        ""       "fb", B="2"
 53+  88B5              ;                                            ""        ""       "fb", B="3"
 54+  88B5 A7               and a
 55+  88B6 28 10            jr z,1F
 56+  88B8 E6 01            and 1
 57+  88BA C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 58+  88BB
 59+  88BB 79               ld a,c
 60+  88BC 16 F9            ld d,$f9
 61+  88BE 23           2 inc hl
 62+  88BF 23               inc hl
 63+  88C0 04               inc b
 64+  88C1 BA               cp d
 65+  88C2 28 04            jr z,1F
 66+  88C4 14               inc d
 67+  88C5 14               inc d
 68+  88C6 18 F6            jr 2B
 69+  88C8
 70+  88C8 CD 85 87     1 call Extrae_address
 71+  88CB E5               push hl
 72+  88CC FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 73+  88CE DD 21 95 8F  	ld ix, Pinta_Disparo        		; Rutinas_de_impresion en IX.
 74+  88D2
 75+  88D2              ;	Se cumplen las condiciones necesarias para generar un disparo.
 76+  88D2              ;   Las variables de disparo varían en función del cuadrante en el que se encuentre la entidad/Amadeus.
 77+  88D2
 78+  88D2 3A AA 85     	ld a,(Cuad_objeto)
 79+  88D5 FE 02            cp 2
 80+  88D7 38 60            jr c,3F
 81+  88D9 28 5E            jr z,3F
 82+  88DB
 83+  88DB              ; 	Nos encontramos en la mitad inferior de la pantalla, (3er y 4º cuadrante).
 84+  88DB
 85+  88DB E6 01            and 1
 86+  88DD 28 2D            jr z,4F
 87+  88DF
 88+  88DF              ; 	Estamos en el 3er cuadrante de pantalla.
 89+  88DF              ; 	3er CUAD. ----- ----- ----- ----- -----
 90+  88DF              ;
 91+  88DF              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 92+  88DF              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 93+  88DF              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 94+  88DF
 95+  88DF 2A 98 85     	ld hl,(Posicion_actual)
 96+  88E2
 97+  88E2              ;   Amadeus o entidad ???.
 98+  88E2
 99+  88E2 3A C3 85         ld a,(Ctrl_0)
100+  88E5 CB 77            bit 6,a
101+  88E7 28 0D            jr z,8F
102+  88E9
103+  88E9              ; 	Dispara Amadeus.
104+  88E9
105+  88E9 0E 81            ld c,$81	                                    ; Dirección "$81", hacia arriba.
106+  88EB CD 11 8D         call PreviousScan
107+  88EE CD 11 8D         call PreviousScan
108+  88F1
109+  88F1              ;	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
110+  88F1              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
111+  88F1              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
112+  88F1              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
113+  88F1
114+  88F1 CD 63 89         call Ajusta_disparo_parte_izquierda
115+  88F4 18 0E            jr 10F
116+  88F6
117+  88F6              ; 	Dispara Entidad.
118+  88F6
119+  88F6 0E 80        8 ld c,$80	                                        ; Dirección "$80", hacia abajo.
120+  88F8
121+  88F8              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
122+  88F8              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
123+  88F8
124+  88F8 C5               push bc
125+  88F9 06 10            ld b,16
126+  88FB CD 02 8D     9 call NextScan
127+  88FE 10 FB            djnz 9B
128+  8900 C1               pop bc
129+  8901
130+  8901              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
131+  8901              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
132+  8901              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
133+  8901              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
134+  8901
135+  8901 CD 63 89         call Ajusta_disparo_parte_izquierda
136+  8904
137+  8904 CD D8 89     10 call Comprueba_Colision                          ; Retorna "$81" o "$80" en B indicando si se produce Colisión
138+  8907              ;                                                   ; _al generar el disparo.
139+  8907
140+  8907              ; 	LLegados a este punto tendremos:
141+  8907              ;
142+  8907              ;       Puntero_objeto_disparo en IY.
143+  8907              ;       Rutinas_de_impresion en IX.
144+  8907              ;       Puntero_de_impresion en HL.
145+  8907              ;       Impacto/Dirección en BC.
146+  8907
147+  8907 CD 6B 89         call Almacena_disparo
148+  890A 18 4F            jr 6F                                           ; RET.
149+  890C
150+  890C
151+  890C              ; 	Estamos en el 4º cuadrante de pantalla.
152+  890C              ; 	4º CUAD. ----- ----- ----- ----- -----
153+  890C              ;
154+  890C              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
155+  890C              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
156+  890C              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
157+  890C
158+  890C 2A 98 85     4 ld hl,(Posicion_actual)
159+  890F
160+  890F              ;   Amadeus o entidad ???.
161+  890F
162+  890F 3A C3 85         ld a,(Ctrl_0)
163+  8912 CB 77            bit 6,a
164+  8914 28 0D            jr z,11F
165+  8916
166+  8916              ; 	Dispara Amadeus.
167+  8916
168+  8916 0E 81            ld c,$81                                          ; Dirección "$81", hacia arriba.
169+  8918 CD 11 8D         call PreviousScan
170+  891B CD 11 8D         call PreviousScan
171+  891E
172+  891E              ; 	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
173+  891E              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
174+  891E              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
175+  891E              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
176+  891E
177+  891E CD 5C 89         call Ajusta_disparo_parte_derecha
178+  8921 18 0E            jr 13F
179+  8923
180+  8923              ; 	Dispara Entidad.
181+  8923
182+  8923 0E 80        11 ld c,$80                                        	  ; Dirección "$80", hacia abajo.
183+  8925
184+  8925              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
185+  8925              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
186+  8925
187+  8925 C5               push bc
188+  8926
189+  8926 06 10            ld b,16
190+  8928 CD 02 8D     12 call NextScan
191+  892B 10 FB            djnz 12B
192+  892D
193+  892D C1               pop bc
194+  892E
195+  892E              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
196+  892E              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
197+  892E              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
198+  892E              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
199+  892E
200+  892E CD 5C 89         call Ajusta_disparo_parte_derecha
201+  8931
202+  8931 CD D8 89     13 call Comprueba_Colision                            ; Retorna "$81" o "$80" en B indicando si se produce Colisión
203+  8934              ;                                                     ; _al generar el disparo.
204+  8934
205+  8934              ; LLegados a este punto tendremos:
206+  8934              ;
207+  8934              ;       Puntero_objeto_disparo en IY.
208+  8934              ;       Rutinas_de_impresion en IX.
209+  8934              ;       Puntero_de_impresion en HL.
210+  8934              ;       Impacto/Dirección en BC.
211+  8934
212+  8934 CD 6B 89         call Almacena_disparo
213+  8937 18 22            jr 6F                                           ; RET.
214+  8939
215+  8939              ; 	La entidad que dispara se encuentra en la mitad superior de pantalla, (cuadrantes 1º y 2º).
216+  8939
217+  8939 28 11        3 jr z,5F
218+  893B
219+  893B              ; 	1er CUAD. ----- ----- ----- ----- -----
220+  893B              ;
221+  893B              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
222+  893B              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
223+  893B              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
224+  893B              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
225+  893B
226+  893B              ; 	Cuando (CTRL_DESPLZ)="0", B="0"
227+  893B              ;	   ""        ""       "f9", B="1"
228+  893B              ;	   ""        ""       "fb", B="2"
229+  893B              ; 	   ""        ""       "fb", B="3"
230+  893B
231+  893B 2A 98 85     	ld hl,(Posicion_actual)
232+  893E CD 02 8D     	call NextScan
233+  8941
234+  8941              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
235+  8941              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
236+  8941              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
237+  8941              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
238+  8941
239+  8941 CD 63 89         call Ajusta_disparo_parte_izquierda
240+  8944
241+  8944              ; 	No se produce impacto. B="$80"
242+  8944              ; 	Dirección del proyectil hacia abajo. C="$80"
243+  8944
244+  8944 01 80 80         ld bc,$8080
245+  8947
246+  8947              ; 	LLegados a este punto tendremos:
247+  8947              ;
248+  8947              ;       Puntero_objeto_disparo en IY.
249+  8947              ;       Rutinas_de_impresion en IX.
250+  8947              ;       Puntero_de_impresion en HL.
251+  8947              ;       Impacto/Dirección en BC.
252+  8947
253+  8947 CD 6B 89         call Almacena_disparo
254+  894A 18 0F            jr 6F                                           ; RET.
255+  894C
256+  894C              ; 	Estamos en el 2º cuadrante de pantalla.
257+  894C              ; 	2º CUAD. ----- ----- ----- ----- -----
258+  894C              ;
259+  894C              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
260+  894C              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
261+  894C              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
262+  894C              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
263+  894C
264+  894C 2A 98 85     5 ld hl,(Posicion_actual)
265+  894F CD 02 8D     	call NextScan
266+  8952
267+  8952              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
268+  8952              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
269+  8952              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
270+  8952              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
271+  8952
272+  8952 CD 5C 89         call Ajusta_disparo_parte_derecha
273+  8955
274+  8955              ; 	No se produce impacto. B="$80"
275+  8955              ; 	Dirección del proyectil hacia abajo. C="80"
276+  8955
277+  8955 01 80 80     15 ld bc,$8080
278+  8958
279+  8958              ; 	LLegados a este punto tendremos:
280+  8958              ;
281+  8958              ;       Puntero_objeto_disparo en IY.
282+  8958              ;       Rutinas_de_impresion en IX.
283+  8958              ;       Puntero_de_impresion en HL.
284+  8958              ;       Impacto/Dirección en BC.
285+  8958
286+  8958 CD 6B 89         call Almacena_disparo
287+  895B
288+  895B C9           6 ret
289+  895C
290+  895C              ; ----------------------------------------------------------------
291+  895C              ;
292+  895C              ;	Estas dos subrutinas se encargan de `corregir´, el puntero de impresión del proyectil_
293+  895C              ;	_ en función del valor de la variable (CTRL_DESPLZ) y de la situación en pantalla,_
294+  895C              ;	_ (lado izq. o derecho), de la entidad que lo genera.
295+  895C
296+  895C 78           Ajusta_disparo_parte_derecha ld a,b
297+  895D FE 02            cp 2
298+  895F 38 01            jr c,1F
299+  8961 23               inc hl
300+  8962 C9           1 ret
301+  8963
302+  8963 78           Ajusta_disparo_parte_izquierda ld a,b
303+  8964 FE 01        	cp 1
304+  8966 20 01        	jr nz,1F
305+  8968 2B           	dec hl
306+  8969 2B           1 dec hl
307+  896A C9               ret
308+  896B
309+  896B              ; ----------------------------------------------------------------
310+  896B              ;
311+  896B              ;   25/02/23
312+  896B              ;
313+  896B              ;   La Rutina va almacenando disparos en sus respectiva bases de datos.
314+  896B              ;   Amadeus dispone de 2 disparos mientras que las entidades disponen de un máximo de 10.
315+  896B
316+  896B              Almacena_disparo
317+  896B
318+  896B E5               push hl  										; HL contiene el puntero de impresión.
319+  896C F1               pop af
320+  896D 08               ex af,af                                        ; Puntero_de_impresion en AF'.
321+  896E
322+  896E 79           3 ld a,c 											; C contiene la "dirección" del proyectil.
323+  896F E6 01            and 1
324+  8971 28 1A            jr z,1F                                         ; Según la `Dirección' del proyectil sabemos si_
325+  8973              ;                                                   ; _ es Amadeus o una entidad la que dispara.
326+  8973              ; 	Dispara AMADEUS.
327+  8973
328+  8973              ;	Comprobamos que a Amadeus aún le quedan disparos.
329+  8973              ;	Si es así, nos situamos en la siguiente dirección del índice de disparos de Amadeus.
330+  8973              ;	Si por el contrario, estamos al final de índice, (no disponemos de más disparos),_
331+  8973              ;	_ iniciamos (Puntero_DESPLZ_DISPARO_AMADEUS) situándolo al comienzo del índice y salimos.
332+  8973
333+  8973 C5               push bc
334+  8974 01 EC 83         ld bc,Indice_de_disparos_Amadeus+4              ; Disparo_3A
335+  8977 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
336+  897A A7               and a
337+  897B ED 42            sbc hl,bc
338+  897D CC 4E 87         call z,Inicia_Puntero_Disparo_Amadeus
339+  8980 C1               pop bc
340+  8981 28 54            jr z,4F
341+  8983
342+  8983 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
343+  8986 23               inc hl
344+  8987 23               inc hl
345+  8988 22 E4 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl          ; (Puntero_DESPLZ_DISPARO_AMADEUS) ya apunta al siguiente_
346+  898B              ;                                                   ; _ Disparo_(+1).
347+  898B 18 18            jr 2F
348+  898D
349+  898D              ; Dispara una entidad.
350+  898D
351+  898D C5           1 push bc
352+  898E 01 14 84         ld bc,Indice_de_disparos_entidades+20           ; Disparo_11
353+  8991 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
354+  8994 A7               and a
355+  8995 ED 42            sbc hl,bc
356+  8997 CC 47 87         call z,Inicia_Puntero_Disparo_Entidades
357+  899A C1               pop bc
358+  899B 28 3A            jr z,4F
359+  899D
360+  899D 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
361+  89A0 23               inc hl
362+  89A1 23               inc hl
363+  89A2 22 E2 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl        ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
364+  89A5              ;                                                   ; _ Disparo_(+1).
365+  89A5 CD 85 87     2 call Extrae_address                               ; HL contiene la dirección donde vamos a almacenar_
366+  89A8              ;                                                   ; _ los 8 bytes que definen el disparo:
367+  89A8              ;
368+  89A8              ;                                                     Puntero_objeto_disparo en IY.
369+  89A8              ;                                                     Rutinas_de_impresion en IX.
370+  89A8              ;                                                     Puntero_de_impresion en HL.
371+  89A8              ;                                                     Impacto/Dirección en BC.
372+  89A8
373+  89A8 2B               dec hl                                          ; Esta parte de la rutina comprueba si este_
374+  89A9 7E               ld a,(hl)                                       ; _ almacén de disparo está vacio. Si no es así, saltamos_
375+  89AA 23               inc hl                                          ; _ al siguiente.
376+  89AB A7               and a
377+  89AC 20 C0            jr nz,3B
378+  89AE
379+  89AE 08               ex af,af
380+  89AF ED 73 D9 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
381+  89B3 F9               ld sp,hl
382+  89B4
383+  89B4 DD E5            push ix                                         ; Rutina de impresión.
384+  89B6 F5               push af                                         ; Puntero de impresión.
385+  89B7 FD E5            push iy                                         ; Puntero objeto.
386+  89B9 C5               push bc                                         ; Control.
387+  89BA
388+  89BA ED 7B D9 85      ld sp,(Stack)
389+  89BE
390+  89BE              ; Guardamos en Album_de_fotos_disparos los proyectiles generados.
391+  89BE
392+  89BE 21 D0 85     	ld hl,Ctrl_1
393+  89C1 CB C6        	set 0,(hl)
394+  89C3
395+  89C3 DD E5        	push ix
396+  89C5 E1               pop hl
397+  89C6 F5               push af
398+  89C7 DD E1            pop ix
399+  89C9
400+  89C9 CD A0 7F     	call Guarda_foto_registros
401+  89CC
402+  89CC 21 D0 85     	ld hl,Ctrl_1									; Restauramos el indicador de disparo antes de salir.
403+  89CF CB 86        	res 0,(hl)
404+  89D1
405+  89D1              ;   Inicializamos los punteros de disparos antes de salir. Pretendemos que los campos vacíos del índice siempre estén
406+  89D1              ;   _ al final. Los disparos nuevos que se generen se guardarán en el primer cajón vacío del índice.
407+  89D1
408+  89D1 CD 4E 87         call Inicia_Puntero_Disparo_Amadeus
409+  89D4 CD 47 87         call Inicia_Puntero_Disparo_Entidades
410+  89D7
411+  89D7 C9           4 ret
412+  89D8
413+  89D8              ; ----------------------------------------------------------------
414+  89D8              ;
415+  89D8              ;   4/3/23
416+  89D8              ;
417+  89D8              ;   Entrega el siguiente dato en el registro B en función de si se produce colisión, o no,_
418+  89D8              ;   _ al generarse el disparo.
419+  89D8              ;       "$80" ..... No se produce colisión.
420+  89D8              ;       "$81" ..... Se produce colisión.
421+  89D8
422+  89D8 E5           Comprueba_Colision push hl
423+  89D9 1E 80            ld e,$80                                       ; E,(Impacto)="0".
424+  89DB CD F0 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
425+  89DE
426+  89DE 7B               ld a,e
427+  89DF E6 01            and 1
428+  89E1 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
429+  89E3
430+  89E3              ; Hay impacto.
431+  89E3
432+  89E3 43           2 ld b,e
433+  89E4 E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
434+  89E5 C9           3 ret
435+  89E6
436+  89E6 E1           1 pop hl
437+  89E7 E5               push hl
438+  89E8 CD 02 8D         call NextScan
439+  89EB CD F0 89         call Bucle_2
440+  89EE 18 F3            jr 2B
441+  89F0
442+  89F0              ; ---------- ----------
443+  89F0
444+  89F0 06 02        Bucle_2 ld b,2
445+  89F2 7E           2 ld a,(hl)
446+  89F3 A7               and a
447+  89F4 20 04            jr nz,1F
448+  89F6 23               inc hl
449+  89F7 10 F9            djnz 2B
450+  89F9 C9           3 ret
451+  89FA 1E 81        1 ld e,$81
452+  89FC 18 FB            jr 3B
453+  89FE
454+  89FE              ; -------------------------------------------------------------------------------------------------------------
455+  89FE              ;
456+  89FE              ;   13/03/23
457+  89FE              ;
458+  89FE              ;   Limpia el album de fotos de disparos después de cada borra/pinta. 50fps.
459+  89FE              ;
460+  89FE              ;   DESTRUYE: HL,BC,DE y A.
461+  89FE
462+  89FE 21 60 70     Limpia_album_disparos ld hl,Album_de_fotos_disparos
463+  8A01 7E               ld a,(hl)
464+  8A02 A7               and a
465+  8A03 C8               ret z                                               ; Salimos de la rutina si no hay ningún disparo en pantalla.
466+  8A04
467+  8A04 44               ld b,h
468+  8A05 4D               ld c,l
469+  8A06 2A DF 85         ld hl,(Stack_snapshot_disparos)
470+  8A09 E5               push hl
471+  8A0A A7               and a
472+  8A0B ED 42            sbc hl,bc
473+  8A0D E5               push hl
474+  8A0E C1               pop bc                                              ; BC contiene el nº de bytes a limpiar.
475+  8A0F
476+  8A0F E1               pop hl
477+  8A10 54               ld d,h
478+  8A11 5D               ld e,l
479+  8A12 1B               dec de
480+  8A13 ED B8            lddr                                                ; Limpiamos.
481+  8A15
482+  8A15 21 60 70         ld hl,Album_de_fotos_disparos
483+  8A18 22 DF 85         ld (Stack_snapshot_disparos),hl
484+  8A1B
485+  8A1B C9               ret
486+  8A1C
487+  8A1C              ; -------------------------------------------------------------------------------------------------------------
# file closed: Disparo.asm
836   8A1C              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8A1C              ; ******************************************************************************************************************************************************************************************
  2+  8A1C              ;
  3+  8A1C              ; 01/23
  4+  8A1C              ;
  5+  8A1C              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8A1C
  7+  8A1C CD F6 8C     Draw call Prepara_draw
  8+  8A1F 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8A20 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8A21 28 05        	jr z,2F
 11+  8A23
 12+  8A23 3A AA 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  8A26 18 0C        	jr 1F
 14+  8A28 2A A8 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8A2B 22 98 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8A2E CD BD 8B     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8A31              ;													; _la esquina superior izquierda de la pantalla.
 18+  8A31 CD 2B 94     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  8A34 3A C3 85     1 ld a,(Ctrl_0)
 20+  8A37 CB 6F        	bit 5,a
 21+  8A39 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8A3B
 23+  8A3B CD 53 8A     	call Comprueba_limite_horizontal
 24+  8A3E CD E3 8A     	call Comprueba_limite_vertical
 25+  8A41
 26+  8A41              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8A41
 28+  8A41 CD 30 8C     3 call calcula_CColumnass
 29+  8A44 CD 67 8C     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8A47 CD BC 8C     	call Define_rutina_de_impresion
 31+  8A4A
 32+  8A4A 3A C3 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8A4D CB AF        	res 5,a											; _a ser de utilidad.
 34+  8A4F 32 C3 85     	ld (Ctrl_0),a
 35+  8A52
 36+  8A52 C9           	ret
 37+  8A53
 38+  8A53              ; *******************************************************************************************************************************************************************************************
 39+  8A53              ;	21/01/23
 40+  8A53              ;
 41+  8A53              ; 	Comprueba_limite_horizontal.
 42+  8A53              ;
 43+  8A53              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8A53              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8A53              ;
 46+  8A53              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8A53              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8A53              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8A53              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8A53
 51+  8A53
 52+  8A53
 53+  8A53 3A C3 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8A56 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8A58 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8A5A E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8A5C 32 C3 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8A5F 18 09            jr 6F
 59+  8A61 CB 5F        1 bit 3,a
 60+  8A63 28 0A            jr z,2F
 61+  8A65 E6 F7            and $f7
 62+  8A67 32 C3 85         ld (Ctrl_0),a
 63+  8A6A CD BD 8B     6 call Inicializacion
 64+  8A6D 18 5B            jr 5F
 65+  8A6F E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8A70
 67+  8A70              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8A70              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8A70
 70+  8A70 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8A71 2A CD 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8A74 CD C2 8F     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8A77 67           	ld h,a
 74+  8A78 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8A79 CD C2 8F     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8A7C 67           	ld h,a
 77+  8A7D A7           	and a
 78+  8A7E ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8A80 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8A81 3A AA 85     	ld a,(Cuad_objeto)
 81+  8A84 FE 02        	cp 2
 82+  8A86 38 1E        	jr c,3F
 83+  8A88 28 1C        	jr z,3F
 84+  8A8A 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8A8B 28 23            jr z,7F
 86+  8A8D 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8A8F 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8A91 E1           	pop hl
 89+  8A92
 90+  8A92              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8A92              ; _para indicar con E="2" en caso necesario.
 92+  8A92
 93+  8A92 E5               push hl
 94+  8A93 C5               push bc
 95+  8A94 CD C2 8F     	call calcula_tercio
 96+  8A97 FE 01        	cp 1
 97+  8A99 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8A9B CD CB 8A         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8A9E 28 26            jr z,9F
100+  8AA0 38 24            jr c,9F
101+  8AA2 1E 00        11 ld e,0
102+  8AA4 18 22            jr 8F
103+  8AA6 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8AA7 28 07        	jr z, 7F
105+  8AA9 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8AAB 1E 00         	ld e,0
107+  8AAD E1           	pop hl
108+  8AAE 18 04        	jr 4F
109+  8AB0 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8AB2 18 15            jr 10F
111+  8AB4
112+  8AB4              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8AB4              ; _para indicar con E="2" en caso necesario.
114+  8AB4
115+  8AB4 E5           4 push hl
116+  8AB5 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8AB6 CD C2 8F     	call calcula_tercio
118+  8AB9 FE 01        	cp 1
119+  8ABB 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8ABD CD CB 8A         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8AC0 28 04            jr z,9F
122+  8AC2 30 02            jr nc,9F
123+  8AC4 18 02        	jr 8F
124+  8AC6 1E 02        9 ld e,2
125+  8AC8 C1           8 pop bc
126+  8AC9 E1           10 pop hl
127+  8ACA C9           5 ret
128+  8ACB
129+  8ACB              ; --------------------
130+  8ACB              ;
131+  8ACB              ; 25/08/22
132+  8ACB
133+  8ACB CD C2 8F     Comprueba_centro call calcula_tercio
134+  8ACE 67               ld h,a
135+  8ACF 08           	ex af,af
136+  8AD0 FE 02        	cp 2
137+  8AD2 38 07        	jr c,1F
138+  8AD4 28 05        	jr z,1F
139+  8AD6 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8AD9 18 03        	jr 2F
141+  8ADB 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8ADE 08           2 ex af,af
143+  8ADF A7               and a
144+  8AE0 ED 42            sbc hl,bc
145+  8AE2 C9               ret
146+  8AE3
147+  8AE3              ; *********************************************************************************************************************************************************************************************
148+  8AE3              ;
149+  8AE3              ;   16/8/22
150+  8AE3              ;
151+  8AE3              ;	Comprueba_limite_vertical
152+  8AE3              ;
153+  8AE3              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8AE3              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8AE3              ;
156+  8AE3
157+  8AE3 2A 98 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8AE6 7D           	ld a,l
159+  8AE7 E6 1F        	and $1F
160+  8AE9 57           	ld d,a
161+  8AEA 3A CF 85     	ld a,(Limite_vertical)
162+  8AED BA           	cp d 											; Límite - Posición.
163+  8AEE 08           	ex af,af 										; Resultado de CP d en F'.
164+  8AEF 3A AA 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8AF2 CB 47        	bit 0,a
166+  8AF4 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8AF6
168+  8AF6              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8AF6
170+  8AF6 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8AF7 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8AF9
173+  8AF9              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8AF9              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8AF9
176+  8AF9 3A 9C 85         ld a,(Coordenada_X)
177+  8AFC 16 0F            ld d,Centro_izquierda
178+  8AFE A7               and a
179+  8AFF 92               sub d 											 ; Posición - Centro_izquierda.
180+  8B00 28 1E            jr z,3F
181+  8B02 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8B04              ;                                                    ; _salimos sin modificar nada.
183+  8B04 18 0E            jr 2F
184+  8B06 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8B07 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8B09
187+  8B09              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8B09              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8B09
190+  8B09 3A 9C 85         ld a,(Coordenada_X)
191+  8B0C 16 10            ld d,Centro_derecha
192+  8B0E A7               and a
193+  8B0F 92               sub d
194+  8B10 28 0E            jr z,3F
195+  8B12 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8B14              ;                                                    ; _salimos sin modificar nada.
197+  8B14 CB 43        2 bit 0,e
198+  8B16 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8B18 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8B19 CD AD 8B         call Modificaccionne
201+  8B1C C1           	pop bc
202+  8B1D CD BD 8B         call Inicializacion
203+  8B20 C9           3 ret 				 								 ; Salimos de la rutina.
204+  8B21
205+  8B21              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8B21
207+  8B21 C5           4 push bc
208+  8B22 01 97 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8B25 0A           	ld a,(bc)
210+  8B26 3D           	dec a
211+  8B27 47           	ld b,a 											 ; Columnas-1 en B.
212+  8B28 7D           	ld a,l
213+  8B29 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8B2A CB 47        	bit 0,a
215+  8B2C 28 03        	jr z,5F
216+  8B2E 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8B2F 18 2E        	jr 7F
218+  8B31
219+  8B31              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8B31
221+  8B31 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8B32 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8B33 3A C3 85     	ld a,(Ctrl_0)
224+  8B36 CB 4F        	bit 1,a
225+  8B38 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8B3A F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8B3B
228+  8B3B              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8B3B
230+  8B3B 1C               inc e
231+  8B3C 1D               dec e
232+  8B3D 20 07            jr nz,12F
233+  8B3F 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8B40 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8B41 22 98 85     	ld (Posicion_actual),hl
236+  8B44 18 44        13 jr 9F
237+  8B46 CB 43        12 bit 0,e
238+  8B48 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8B4A              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8B4A C1           	pop bc
241+  8B4B 18 D3        	jr 3B
242+  8B4D 80           14 add b
243+  8B4E 6F               ld l,a
244+  8B4F 22 98 85     	ld (Posicion_actual),hl
245+  8B52 CD AD 8B         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8B55 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8B57 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8B59 32 C3 85         ld (Ctrl_0),a
249+  8B5C F1           	pop af
250+  8B5D 18 2B        	jr 9F
251+  8B5F
252+  8B5F              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8B5F
254+  8B5F F5           7 push af
255+  8B60 3A C3 85     	ld a,(Ctrl_0)
256+  8B63 CB 47        	bit 0,a
257+  8B65 20 1D        	jr nz,8F
258+  8B67 F1           	pop af
259+  8B68
260+  8B68              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8B68
262+  8B68 1C           	inc e
263+  8B69 1D               dec e
264+  8B6A 20 07            jr nz,10F
265+  8B6C 90           	sub b
266+  8B6D 6F               ld l,a
267+  8B6E 22 98 85     	ld (Posicion_actual),hl
268+  8B71 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8B73              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8B73 CB 43        10 bit 0,e
271+  8B75 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8B77              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8B77 C1           	pop bc
274+  8B78 18 A6        	jr 3B
275+  8B7A 90           16 sub b
276+  8B7B 6F               ld l,a
277+  8B7C 22 98 85     	ld (Posicion_actual),hl
278+  8B7F CD AD 8B         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8B82 18 06            jr 9F
280+  8B84 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8B86 32 C3 85         ld (Ctrl_0),a
282+  8B89 F1           	pop af
283+  8B8A C1           9 pop bc
284+  8B8B 1E 00        	ld e,0
285+  8B8D CD BD 8B         call Inicializacion
286+  8B90 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8B91 08           	ex af,af
288+  8B92 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8B93 18 8B            jr 3B
290+  8B95
291+  8B95              ; --------------------
292+  8B95
293+  8B95 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8B97 CD 11 8D     1 call PreviousScan
295+  8B9A 10 FB            djnz 1B
296+  8B9C 22 98 85     	ld (Posicion_actual),hl
297+  8B9F AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8BA0 C9           	ret
299+  8BA1
300+  8BA1              ; --------------------
301+  8BA1
302+  8BA1 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8BA3 CD 02 8D     1 call NextScan
304+  8BA6 10 FB            djnz 1B
305+  8BA8 22 98 85     	ld (Posicion_actual),hl
306+  8BAB AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8BAC C9           	ret
308+  8BAD
309+  8BAD              ; --------------------
310+  8BAD              ;
311+  8BAD              ;	22/01/23
312+  8BAD              ;
313+  8BAD              ;	E="1". Hemos cambiado de cuadrante.
314+  8BAD              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8BAD              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8BAD
317+  8BAD
318+  8BAD              Modificaccionne
319+  8BAD
320+  8BAD 3A AA 85     	ld a,(Cuad_objeto)
321+  8BB0 FE 02        	cp 2
322+  8BB2 CC 95 8B         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8BB5 DC 95 8B         call c,Modifica_Pos_actual
324+  8BB8 C8           	ret z
325+  8BB9 CD A1 8B         call Modifica_Pos_actual2
326+  8BBC C9               ret
327+  8BBD
328+  8BBD              ; *************************************************************************************************************************************************************************************************
329+  8BBD              ;
330+  8BBD              ;	13/8/22
331+  8BBD              ;
332+  8BBD              ;	Inicializacion
333+  8BBD              ;
334+  8BBD              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8BBD              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8BBD              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8BBD              ;
338+  8BBD              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8BBD              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8BBD              ;	_ desaparece/aparece.
341+  8BBD
342+  8BBD              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8BBD              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8BBD              ;
345+  8BBD              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8BBD              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8BBD              ; 		   [E] ="0"
348+  8BBD
349+  8BBD              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8BBD
351+  8BBD CD C2 8F     Inicializacion call calcula_tercio
352+  8BC0 28 36        	jr z,primit
353+  8BC2 E6 02        	and 2
354+  8BC4 20 07        	jr nz,segmit
355+  8BC6 7D           	ld a,l
356+  8BC7 FE 7F        	cp $7f
357+  8BC9 38 2D        	jr c,primit
358+  8BCB 28 2B        	jr z,primit
359+  8BCD CD 2A 8C     segmit call column
360+  8BD0 38 13        	jr c,tercuad
361+  8BD2 3E 04        cuarcuad ld a,4
362+  8BD4 32 AA 85     	ld (Cuad_objeto),a
363+  8BD7 21 20 48     	ld hl,$4820
364+  8BDA 22 CD 85     	ld (Limite_horizontal),hl
365+  8BDD 21 CF 85     	ld hl,Limite_vertical
366+  8BE0 36 0D        	ld (hl),$0d
367+  8BE2 08           	ex af,af
368+  8BE3 18 3C        	jr 1F
369+  8BE5              tercuad
370+  8BE5 3E 03        	ld a,3
371+  8BE7 32 AA 85     	ld (Cuad_objeto),a
372+  8BEA 21 20 48     	ld hl,$4820
373+  8BED 22 CD 85     	ld (Limite_horizontal),hl
374+  8BF0 21 CF 85     	ld hl,Limite_vertical
375+  8BF3 36 12        	ld (hl),$12
376+  8BF5 08           	ex af,af
377+  8BF6 18 29        	jr 1F
378+  8BF8 CD 2A 8C     primit call column
379+  8BFB 38 13        	jr c, primcuad
380+  8BFD              segcuad
381+  8BFD 3E 02        	ld a,2
382+  8BFF 32 AA 85     	ld (Cuad_objeto),a
383+  8C02 21 C0 4F     	ld hl,$4fc0
384+  8C05 22 CD 85     	ld (Limite_horizontal),hl
385+  8C08 21 CF 85     	ld hl,Limite_vertical
386+  8C0B 36 0D        	ld (hl),$0d
387+  8C0D 08           	ex af,af
388+  8C0E 18 11        	jr 1F
389+  8C10              primcuad
390+  8C10 3E 01        	ld a,1
391+  8C12 32 AA 85     	ld (Cuad_objeto),a
392+  8C15 21 C0 4F     	ld hl,$4fc0
393+  8C18 22 CD 85     	ld (Limite_horizontal),hl
394+  8C1B 21 CF 85     	ld hl,Limite_vertical
395+  8C1E 36 12        	ld (hl),$12
396+  8C20 08           	ex af,af
397+  8C21 CD F4 92     1 call Genera_coordenadas
398+  8C24 21 C3 85     	ld hl,Ctrl_0
399+  8C27 CB EE        	set 5,(hl)
400+  8C29 C9           	ret
401+  8C2A
402+  8C2A              ; ------------------------------------------------------------------------------------------------------------------
403+  8C2A
404+  8C2A              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8C2A              ;
406+  8C2A              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8C2A
408+  8C2A 7D           column ld a,l
409+  8C2B E6 1F        	and $1f
410+  8C2D FE 10         	cp $10
411+  8C2F C9            	ret
412+  8C30
413+  8C30              ; --------------------------------------------------------------------------------------------------------------------
414+  8C30              ;
415+  8C30              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8C30              ;
417+  8C30              ; 14/12/22
418+  8C30              ;
419+  8C30              ;	Modifica: A y BC.
420+  8C30
421+  8C30 3A AA 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8C33 E6 01        	and 1
423+  8C35 28 17        	jr z,1F
424+  8C37
425+  8C37              ; Nos encontramos en la parte izquierda de la pantalla
426+  8C37
427+  8C37 3A 9C 85     	ld a,(Coordenada_X)
428+  8C3A 47           	ld b,a
429+  8C3B 04           	inc b											; (Coordenada_X)+1 en B.
430+  8C3C 79           	ld a,c
431+  8C3D 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8C3E 38 08        	jr c,2F
433+  8C40 47           	ld b,a
434+  8C41 79           	ld a,c
435+  8C42 90           	sub b
436+  8C43 32 CC 85     	ld (Columnas),a
437+  8C46 18 1B        	jr 4F
438+  8C48 79           2 ld a,c
439+  8C49 32 CC 85     	ld (Columnas),a
440+  8C4C 18 15        	jr 4F
441+  8C4E
442+  8C4E              ; Nos encontramos en la parte derecha de la pantalla.
443+  8C4E
444+  8C4E 3A 9C 85     1 ld a,(Coordenada_X)
445+  8C51 81           	add c
446+  8C52 3D           	dec a
447+  8C53 D6 1F        	sub $1f
448+  8C55 38 08        	jr c,3F
449+  8C57 47           	ld b,a
450+  8C58 79           	ld a,c
451+  8C59 90           	sub b
452+  8C5A 32 CC 85     	ld (Columnas),a
453+  8C5D 18 04        	jr 4F
454+  8C5F 79           3 ld a,c
455+  8C60 32 CC 85     	ld (Columnas),a
456+  8C63 D9           4 exx
457+  8C64 4F           	ld c,a
458+  8C65 D9           	exx
459+  8C66 C9            ret
460+  8C67
461+  8C67              ; --------------------------------------------------------------------------------------------------------------------
462+  8C67              ;
463+  8C67              ; 7/1/23
464+  8C67              ;
465+  8C67              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8C67              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8C67              ;
468+  8C67              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8C67              ;	DESTRUYE: HL,B Y A.
470+  8C67
471+  8C67 3A AA 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8C6A FE 02        	cp 2
473+  8C6C 38 18        	jr c,1F
474+  8C6E 28 16        	jr z,1F
475+  8C70 E6 01        	and 1
476+  8C72 28 0D        	jr z,3F
477+  8C74
478+  8C74              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8C74
480+  8C74 CD B0 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8C77
482+  8C77 7D           9 ld a,l
483+  8C78 E6 1F        	and $1f
484+  8C7A 28 2A        	jr z,7F
485+  8C7C 2B           	dec hl
486+  8C7D 10 F8        	djnz 9B
487+  8C7F 18 25        	jr 7F
488+  8C81
489+  8C81              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8C81
491+  8C81 2A 98 85     3 ld hl,(Posicion_actual)
492+  8C84 18 20        	jr 7F
493+  8C86
494+  8C86 28 14        1 jr z,2F
495+  8C88
496+  8C88              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8C88
498+  8C88 CD B0 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8C8B 7D           4 ld a,l
500+  8C8C E6 1F        	and $1f
501+  8C8E 28 03        	jr z,6F
502+  8C90 2B           	dec hl
503+  8C91 10 F8        	djnz 4B
504+  8C93 06 0F        6 ld b,15
505+  8C95 CD 11 8D     5 call PreviousScan
506+  8C98 10 FB        	djnz 5B
507+  8C9A 18 0A        	jr 7F
508+  8C9C
509+  8C9C              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8C9C
511+  8C9C CD B0 8C     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8C9F 06 0F        	ld b,15
513+  8CA1 CD 11 8D     8 call PreviousScan
514+  8CA4 10 FB        	djnz 8B
515+  8CA6
516+  8CA6 E5           7 push hl
517+  8CA7 DD E1        	pop ix
518+  8CA9
519+  8CA9 2A 9A 85     	ld hl,(Puntero_objeto)
520+  8CAC E5           	push hl
521+  8CAD FD E1        	pop iy
522+  8CAF
523+  8CAF C9           	ret
524+  8CB0
525+  8CB0              ; --------------------------------------------------------------------------------------------------------------------
526+  8CB0              ;
527+  8CB0              ;	2/1/23
528+  8CB0              ;
529+  8CB0              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8CB0              ;
531+  8CB0              ;	Tras esta rutina tenemos:
532+  8CB0              ;
533+  8CB0              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8CB0              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8CB0              ;
536+  8CB0              ;	DESTRUYE!!!!! HL,B y A.
537+  8CB0
538+  8CB0 2A 98 85     Operandos ld hl,(Posicion_actual)
539+  8CB3 3A CC 85     	ld a,(Columnas)
540+  8CB6 3D           	dec a
541+  8CB7 20 01        	jr nz,1F
542+  8CB9 3C           	inc a
543+  8CBA 47           1 ld b,a
544+  8CBB C9           	ret
545+  8CBC
546+  8CBC              ; --------------------------------------------------------------------------------------------------------------------
547+  8CBC              ;
548+  8CBC              ;	3/1/23
549+  8CBC              ;
550+  8CBC              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8CBC              ;
552+  8CBC              ;	Destruye: A,B,HL y DE.
553+  8CBC
554+  8CBC              Define_rutina_de_impresion
555+  8CBC
556+  8CBC 3A 97 85     	ld a,(Columns)
557+  8CBF 47           	ld b,a
558+  8CC0 3A CC 85     	ld a,(Columnas)
559+  8CC3 B8           	cp b
560+  8CC4 20 0D        	jr nz,2f
561+  8CC6
562+  8CC6              ;	La entidad se imprime entera.
563+  8CC6
564+  8CC6 21 92 8D     	ld hl, Indice_entidades_completas
565+  8CC9 E6 01        	and 1
566+  8CCB 28 02        	jr z,1F
567+  8CCD
568+  8CCD 23           	inc hl
569+  8CCE 23           	inc hl
570+  8CCF
571+  8CCF CD 85 87     1 call Extrae_address
572+  8CD2 C9           	ret		;	ret
573+  8CD3
574+  8CD3              ;	La entidad no se imprime entera en pantalla.
575+  8CD3
576+  8CD3 3A AA 85     2 ld a,(Cuad_objeto)
577+  8CD6 E6 01        	and 1
578+  8CD8 28 17        	jr z,3F
579+  8CDA
580+  8CDA              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8CDA
582+  8CDA 21 96 8D     	ld hl, Indice_entidades_incompletas_izquierda
583+  8CDD 3A 97 85     4 ld a,(Columns)
584+  8CE0 E6 01        	and 1
585+  8CE2 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8CE4
587+  8CE4 23           	inc hl
588+  8CE5 23           	inc hl
589+  8CE6
590+  8CE6 3A CC 85     	ld a,(Columnas)
591+  8CE9 E6 01        	and 1
592+  8CEB 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8CED
594+  8CED 23           	inc hl
595+  8CEE 23           	inc hl
596+  8CEF
597+  8CEF 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8CF1
599+  8CF1 21 9C 8D     3 ld hl, Indice_entidades_incompletas_derecha
600+  8CF4 18 E7        	jr 4B
601+  8CF6
602+  8CF6              ; --------------------------------------------------------------------------------------------------------------------
603+  8CF6              ;
604+  8CF6              ;	Prepara_draw
605+  8CF6              ;
606+  8CF6              ;	Es una rutina de carga.
607+  8CF6              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8CF6              ;
609+  8CF6              ;	FUNCIONAMIENTO:
610+  8CF6              ;
611+  8CF6              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8CF6              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8CF6              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8CF6              ;
615+  8CF6              ;	DESTRUYE:
616+  8CF6              ;
617+  8CF6              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8CF6
619+  8CF6 21 96 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8CF9 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8CFA 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8CFB 4E           	ld c,(hl)
623+  8CFC 2A 98 85     	ld hl,(Posicion_actual)
624+  8CFF 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8D01 C9           	ret
626+  8D02
627+  8D02              ;----------------------------------------------------------------------------------------------------------------
628+  8D02              ;
629+  8D02              ;	5/08/22
630+  8D02              ;
631+  8D02              ;   NextScan.
632+  8D02              ;
633+  8D02              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8D02              ;
635+  8D02              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8D02              ;
637+  8D02              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8D02              ;
639+  8D02              ;       DESTRUIDOS: AF y HL !!!
640+  8D02              ;
641+  8D02              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8D02              ;
643+  8D02
644+  8D02 24           NextScan inc h          ; Incrementamos el scanline.
645+  8D03 7C               ld a,h
646+  8D04 E6 07            and 7
647+  8D06 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8D07
649+  8D07 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8D08 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8D0A 6F               ld l,a
652+  8D0B D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8D0C
654+  8D0C 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8D0D D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8D0F 67               ld h,a
657+  8D10 C9               ret
658+  8D11
659+  8D11              ;----------------------------------------------------------------------------------------------------------------
660+  8D11              ;
661+  8D11              ;	5/08/22
662+  8D11              ;
663+  8D11              ;   PreviousScan.
664+  8D11              ;
665+  8D11              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8D11              ;
667+  8D11              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8D11              ;
669+  8D11              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8D11              ;
671+  8D11              ;       DESTRUIDOS: AF y HL !!!
672+  8D11              ;
673+  8D11              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8D11              ;
675+  8D11
676+  8D11 7C           PreviousScan ld a,h
677+  8D12 25               dec h               ; Dec H.
678+  8D13 E6 07            and 7
679+  8D15 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8D16
681+  8D16 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8D17 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8D19 6F               ld l,a
684+  8D1A D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8D1B
686+  8D1B 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8D1C C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8D1E 67               ld h,a
689+  8D1F C9               ret
690+  8D20
691+  8D20              ; -----------------------------------------------------------------------------------
692+  8D20              ;
693+  8D20              ;	28/2/23
694+  8D20              ;
695+  8D20              ;	Rutina principal de pintado de entidades/Amadeus.
696+  8D20              ;	Extrae fotos de Album_de_fotos.
697+  8D20
698+  8D20 3A D8 85     Extrae_foto_registros ld a,(Numero_de_malotes)
699+  8D23 A7           	and a
700+  8D24 C8           	ret z
701+  8D25 ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
702+  8D29 31 00 70     	ld sp,Album_de_fotos
703+  8D2C
704+  8D2C FD E1        2 pop iy																	; (Puntero_objeto) en IY.
705+  8D2E E1           	pop hl																	; Puntero de impresión de pantalla en HL.
706+  8D2F D1           	pop de																	; Dirección de la rutina de impresión en DE.
707+  8D30
708+  8D30 ED 73 DB 85  	ld (Stack_2),sp
709+  8D34 ED 7B D9 85  	ld sp,(Stack)
710+  8D38
711+  8D38              ; Fabrica la llamada a la correspondiente rutina de impresión.
712+  8D38
713+  8D38 3E CD        	ld a,$cd
714+  8D3A 32 42 8D     	ld (Imprime),a
715+  8D3D EB           	ex de,hl
716+  8D3E 22 43 8D     	ld (Imprime+1),hl
717+  8D41 EB           	ex de,hl
718+  8D42
719+  8D42              ; Ejecuta la llamada:	CALL $xx,xx
720+  8D42
721+  8D42 00 00 00     Imprime db 0,0,0
722+  8D45
723+  8D45 3A D8 85     	ld a,(Numero_de_malotes)
724+  8D48 3D           	dec a
725+  8D49 28 09        	jr z,1F
726+  8D4B 32 D8 85      	ld (Numero_de_malotes),a
727+  8D4E
728+  8D4E ED 7B DB 85   	ld sp,(Stack_2)
729+  8D52 18 D8        	jr 2B
730+  8D54
731+  8D54 AF           1 xor a
732+  8D55 32 DB 85     	ld (Stack_2),a
733+  8D58 C9           	ret
734+  8D59
735+  8D59              ; -----------------------------------------------------------------------------------
736+  8D59              ;
737+  8D59              ;	28/2/23
738+  8D59              ;
739+  8D59              ;	Pinta los disparos generados.
740+  8D59
741+  8D59              Extrae_foto_disparos
742+  8D59
743+  8D59 3A E1 85     	ld a,(Numero_de_disparotes)
744+  8D5C A7           	and a
745+  8D5D C8           	ret z
746+  8D5E ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
747+  8D62 31 60 70     	ld sp,Album_de_fotos_disparos
748+  8D65
749+  8D65 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
750+  8D67 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
751+  8D68 D1           	pop de																	; Dirección de la rutina de impresión en DE.
752+  8D69
753+  8D69 ED 73 DB 85  	ld (Stack_2),sp
754+  8D6D ED 7B D9 85  	ld sp,(Stack)
755+  8D71
756+  8D71              ; Fabrica la llamada a la correspondiente rutina de impresión.
757+  8D71
758+  8D71 3E CD        	ld a,$cd
759+  8D73 32 7B 8D     	ld (Imprime2),a
760+  8D76 EB           	ex de,hl
761+  8D77 22 7C 8D     	ld (Imprime2+1),hl
762+  8D7A EB           	ex de,hl
763+  8D7B
764+  8D7B              ; Ejecuta la llamada:	CALL $xx,xx
765+  8D7B
766+  8D7B 00 00 00     Imprime2 db 0,0,0
767+  8D7E
768+  8D7E 3A E1 85     	ld a,(Numero_de_disparotes)
769+  8D81 3D           	dec a
770+  8D82 28 09        	jr z,1F
771+  8D84 32 E1 85      	ld (Numero_de_disparotes),a
772+  8D87
773+  8D87 ED 7B DB 85  	ld sp,(Stack_2)
774+  8D8B 18 D8        	jr 2B
775+  8D8D
776+  8D8D AF           1 xor a
777+  8D8E 32 DB 85     	ld (Stack_2),a
778+  8D91 C9           	ret
779+  8D92
# file closed: Draw_XOR.asm
837   8D92              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8D92              ;   índices de Rutinas de impresión.
  2+  8D92
  3+  8D92 A2 8D        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8D94 CF 8D            defw Pinta_Amadeus_3x2
  5+  8D96
  6+  8D96 25 8E        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8D98 C5 8E            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8D9A 79 8E            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8D9C
 10+  8D9C 4F 8E        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8D9E 53 8F            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8DA0 07 8F            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8DA2
 14+  8DA2
 15+  8DA2              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8DA2              ;
 17+  8DA2              ;   12/12/22
 18+  8DA2              ;
 19+  8DA2              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8DA2              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8DA2              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8DA2              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8DA2              ;
 24+  8DA2              ;   Modifica: DE y HL.
 25+  8DA2
 26+  8DA2 ED 73 D9 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8DA6 FD F9        	ld sp,iy
 28+  8DA8 06 10            ld b,16
 29+  8DAA D1           1 pop de
 30+  8DAB 7B               ld a,e
 31+  8DAC AE               xor (hl)
 32+  8DAD 77           	ld (hl),a
 33+  8DAE 23           	inc hl
 34+  8DAF 7A               ld a,d
 35+  8DB0 AE               xor (hl)
 36+  8DB1 77           	ld (hl),a
 37+  8DB2 2B           	dec hl
 38+  8DB3 24           	inc h
 39+  8DB4 7C               ld a,h
 40+  8DB5 E6 07            and 7
 41+  8DB7 20 0A            jr nz,2F
 42+  8DB9 7D               ld a,l
 43+  8DBA C6 20            add a,$20
 44+  8DBC 6F               ld l,a
 45+  8DBD 38 04            jr c,2F
 46+  8DBF 7C               ld a,h
 47+  8DC0 D6 08            sub 8
 48+  8DC2 67               ld h,a
 49+  8DC3 7C           2 ld a,h
 50+  8DC4 FE 58            cp $58
 51+  8DC6 28 02            jr z,3F
 52+  8DC8 10 E0            djnz 1B
 53+  8DCA ED 7B D9 85  3 ld sp,(Stack)
 54+  8DCE C9           	ret
 55+  8DCF
 56+  8DCF ED 73 D9 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8DD3 FD F9        	ld sp,iy
 58+  8DD5 06 08            ld b,8
 59+  8DD7 D1           1 pop de
 60+  8DD8 7B               ld a,e
 61+  8DD9 AE               xor (hl)
 62+  8DDA 77           	ld (hl),a
 63+  8DDB 23           	inc hl
 64+  8DDC 7A               ld a,d
 65+  8DDD AE               xor (hl)
 66+  8DDE 77           	ld (hl),a
 67+  8DDF 23           	inc hl
 68+  8DE0 D1           	pop de
 69+  8DE1 7B               ld a,e
 70+  8DE2 AE               xor (hl)
 71+  8DE3 77           	ld (hl),a
 72+  8DE4 2B           	dec hl
 73+  8DE5 2B           	dec hl
 74+  8DE6 24           	inc h
 75+  8DE7 7C               ld a,h
 76+  8DE8 E6 07            and 7
 77+  8DEA 20 0A            jr nz,2F
 78+  8DEC 7D               ld a,l
 79+  8DED C6 20            add a,$20
 80+  8DEF 6F               ld l,a
 81+  8DF0 38 04            jr c,2F
 82+  8DF2 7C               ld a,h
 83+  8DF3 D6 08            sub 8
 84+  8DF5 67               ld h,a
 85+  8DF6 7C           2 ld a,h
 86+  8DF7 FE 58            cp $58
 87+  8DF9 28 25            jr z,4F
 88+  8DFB 7A               ld a,d
 89+  8DFC AE               xor (hl)
 90+  8DFD 77               ld (hl),a
 91+  8DFE D1           	pop de
 92+  8DFF 23           	inc hl
 93+  8E00 7B               ld a,e
 94+  8E01 AE               xor (hl)
 95+  8E02 77           	ld (hl),a
 96+  8E03 23           	inc hl
 97+  8E04 7A               ld a,d
 98+  8E05 AE               xor (hl)
 99+  8E06 77           	ld (hl),a
100+  8E07 2B           	dec hl
101+  8E08 2B           	dec hl
102+  8E09 24           	inc h
103+  8E0A 7C               ld a,h
104+  8E0B E6 07            and 7
105+  8E0D 20 0A            jr nz,3F
106+  8E0F 7D               ld a,l
107+  8E10 C6 20            add a,$20
108+  8E12 6F               ld l,a
109+  8E13 38 04            jr c,3F
110+  8E15 7C               ld a,h
111+  8E16 D6 08            sub 8
112+  8E18 67               ld h,a
113+  8E19 7C           3 ld a,h
114+  8E1A FE 58            cp $58
115+  8E1C 28 02            jr z,4F
116+  8E1E 10 B7            djnz 1B
117+  8E20 ED 7B D9 85  4 ld sp,(Stack)
118+  8E24 C9           	ret
119+  8E25
120+  8E25              ; ---------------------------------------------------
121+  8E25
122+  8E25 ED 73 D9 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8E29 FD F9        	ld sp,iy
124+  8E2B
125+  8E2B              ; >>>
126+  8E2B
127+  8E2B 06 10            ld b,16
128+  8E2D D1           1 pop de
129+  8E2E 7A           	ld a,d
130+  8E2F AE           	xor (hl)
131+  8E30 77           	ld (hl),a
132+  8E31 24           	inc h
133+  8E32 7C               ld a,h
134+  8E33 E6 07            and 7
135+  8E35 20 0C            jr nz,2F
136+  8E37 7D               ld a,l
137+  8E38 C6 20            add a,$20
138+  8E3A 6F               ld l,a
139+  8E3B 38 06            jr c,2F
140+  8E3D 7C               ld a,h
141+  8E3E D6 08            sub 8
142+  8E40 67               ld h,a
143+  8E41 18 00            jr 2F
144+  8E43 7C           2 ld a,h
145+  8E44 FE 58            cp $58
146+  8E46 28 02            jr z,3F
147+  8E48 10 E3            djnz 1B
148+  8E4A ED 7B D9 85  3 ld sp,(Stack)
149+  8E4E C9           	ret
150+  8E4F
151+  8E4F ED 73 D9 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
152+  8E53 FD F9        	ld sp,iy
153+  8E55
154+  8E55              ; >>>
155+  8E55
156+  8E55 06 10            ld b,16
157+  8E57 D1           1 pop de
158+  8E58 7B           	ld a,e
159+  8E59 AE           	xor (hl)
160+  8E5A 77           	ld (hl),a
161+  8E5B 24           	inc h
162+  8E5C 7C               ld a,h
163+  8E5D E6 07            and 7
164+  8E5F 20 0C            jr nz,2F
165+  8E61 7D               ld a,l
166+  8E62 C6 20            add a,$20
167+  8E64 6F               ld l,a
168+  8E65 38 06            jr c,2F
169+  8E67 7C               ld a,h
170+  8E68 D6 08            sub 8
171+  8E6A 67               ld h,a
172+  8E6B 18 00            jr 2F
173+  8E6D 7C           2 ld a,h
174+  8E6E FE 58            cp $58
175+  8E70 28 02            jr z,3F
176+  8E72 10 E3            djnz 1B
177+  8E74 ED 7B D9 85  3 ld sp,(Stack)
178+  8E78 C9           	ret
179+  8E79
180+  8E79              ; ---------------------------------------------------
181+  8E79
182+  8E79 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
183+  8E7D FD F9        	ld sp,iy
184+  8E7F 06 08            ld b,8
185+  8E81 D1           1 pop de
186+  8E82 7A           	ld a,d
187+  8E83 AE           	xor (hl)
188+  8E84 77           	ld (hl),a
189+  8E85 23           	inc hl
190+  8E86 D1           	pop de
191+  8E87 7B           	ld a,e
192+  8E88 AE           	xor (hl)
193+  8E89 77           	ld (hl),a
194+  8E8A 2B           	dec hl
195+  8E8B 24            	inc h
196+  8E8C 7C               ld a,h
197+  8E8D E6 07            and 7
198+  8E8F 20 0A            jr nz,2F
199+  8E91 7D               ld a,l
200+  8E92 C6 20            add a,$20
201+  8E94 6F               ld l,a
202+  8E95 38 04            jr c,2F
203+  8E97 7C               ld a,h
204+  8E98 D6 08            sub 8
205+  8E9A 67               ld h,a
206+  8E9B 7C           2 ld a,h
207+  8E9C FE 58            cp $58
208+  8E9E 28 20            jr z,4F
209+  8EA0 D1               pop de
210+  8EA1 7B           	ld a,e
211+  8EA2 AE           	xor (hl)
212+  8EA3 77           	ld (hl),a
213+  8EA4 23           	inc hl
214+  8EA5 7A           	ld a,d
215+  8EA6 AE           	xor (hl)
216+  8EA7 77           	ld (hl),a
217+  8EA8 2B           	dec hl
218+  8EA9 24           	inc h
219+  8EAA 7C               ld a,h
220+  8EAB E6 07            and 7
221+  8EAD 20 0A            jr nz,3F
222+  8EAF 7D               ld a,l
223+  8EB0 C6 20            add a,$20
224+  8EB2 6F               ld l,a
225+  8EB3 38 04            jr c,3F
226+  8EB5 7C               ld a,h
227+  8EB6 D6 08            sub 8
228+  8EB8 67               ld h,a
229+  8EB9 7C           3 ld a,h
230+  8EBA FE 58            cp $58
231+  8EBC 28 02            jr z,4F
232+  8EBE 10 C1            djnz 1B
233+  8EC0 ED 7B D9 85  4 ld sp,(Stack)
234+  8EC4 C9           	ret
235+  8EC5
236+  8EC5 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
237+  8EC9 FD F9        	ld sp,iy
238+  8ECB 06 08            ld b,8
239+  8ECD D1           1 pop de
240+  8ECE D1           	pop de
241+  8ECF 7B           	ld a,e
242+  8ED0 AE           	xor (hl)
243+  8ED1 77           	ld (hl),a
244+  8ED2 24            	inc h
245+  8ED3 7C               ld a,h
246+  8ED4 E6 07            and 7
247+  8ED6 20 0A            jr nz,2F
248+  8ED8 7D               ld a,l
249+  8ED9 C6 20            add a,$20
250+  8EDB 6F               ld l,a
251+  8EDC 38 04            jr c,2F
252+  8EDE 7C               ld a,h
253+  8EDF D6 08            sub 8
254+  8EE1 67               ld h,a
255+  8EE2 7C           2 ld a,h
256+  8EE3 FE 58            cp $58
257+  8EE5 28 1B            jr z,4F
258+  8EE7 D1               pop de
259+  8EE8 7A           	ld a,d
260+  8EE9 AE           	xor (hl)
261+  8EEA 77           	ld (hl),a
262+  8EEB 24           	inc h
263+  8EEC 7C               ld a,h
264+  8EED E6 07            and 7
265+  8EEF 20 0A            jr nz,3F
266+  8EF1 7D               ld a,l
267+  8EF2 C6 20            add a,$20
268+  8EF4 6F               ld l,a
269+  8EF5 38 04            jr c,3F
270+  8EF7 7C               ld a,h
271+  8EF8 D6 08            sub 8
272+  8EFA 67               ld h,a
273+  8EFB 7C           3 ld a,h
274+  8EFC FE 58            cp $58
275+  8EFE 28 02            jr z,4F
276+  8F00 10 CB            djnz 1B
277+  8F02 ED 7B D9 85  4 ld sp,(Stack)
278+  8F06 C9           	ret
279+  8F07
280+  8F07 ED 73 D9 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
281+  8F0B FD F9        	ld sp,iy
282+  8F0D 06 08            ld b,8
283+  8F0F D1           1 pop de
284+  8F10 7B           	ld a,e
285+  8F11 AE           	xor (hl)
286+  8F12 77           	ld (hl),a
287+  8F13 23           	inc hl
288+  8F14 7A           	ld a,d
289+  8F15 AE           	xor (hl)
290+  8F16 77           	ld (hl),a
291+  8F17 2B           	dec hl
292+  8F18 24             	inc h
293+  8F19 7C               ld a,h
294+  8F1A E6 07            and 7
295+  8F1C 20 0A            jr nz,2F
296+  8F1E 7D               ld a,l
297+  8F1F C6 20            add a,$20
298+  8F21 6F               ld l,a
299+  8F22 38 04            jr c,2F
300+  8F24 7C               ld a,h
301+  8F25 D6 08            sub 8
302+  8F27 67               ld h,a
303+  8F28 7C           2 ld a,h
304+  8F29 FE 58            cp $58
305+  8F2B 28 21            jr z,4F
306+  8F2D D1               pop de
307+  8F2E 7A           	ld a,d
308+  8F2F AE           	xor (hl)
309+  8F30 77           	ld (hl),a
310+  8F31 23           	inc hl
311+  8F32 D1               pop de
312+  8F33 7B           	ld a,e
313+  8F34 AE           	xor (hl)
314+  8F35 77           	ld (hl),a
315+  8F36 2B           	dec hl
316+  8F37 24           	inc h
317+  8F38 7C               ld a,h
318+  8F39 E6 07            and 7
319+  8F3B 20 0A            jr nz,3F
320+  8F3D 7D               ld a,l
321+  8F3E C6 20            add a,$20
322+  8F40 6F               ld l,a
323+  8F41 38 04            jr c,3F
324+  8F43 7C               ld a,h
325+  8F44 D6 08            sub 8
326+  8F46 67               ld h,a
327+  8F47 7C           3 ld a,h
328+  8F48 FE 58            cp $58
329+  8F4A 28 02            jr z,4F
330+  8F4C 10 C1            djnz 1B
331+  8F4E ED 7B D9 85  4 ld sp,(Stack)
332+  8F52 C9           	ret
333+  8F53
334+  8F53 ED 73 D9 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
335+  8F57 FD F9        	ld sp,iy
336+  8F59 06 08            ld b,8
337+  8F5B D1           1 pop de
338+  8F5C 7B           	ld a,e
339+  8F5D AE           	xor (hl)
340+  8F5E 77           	ld (hl),a
341+  8F5F 24            	inc h
342+  8F60 7C               ld a,h
343+  8F61 E6 07            and 7
344+  8F63 20 0A            jr nz,2F
345+  8F65 7D               ld a,l
346+  8F66 C6 20            add a,$20
347+  8F68 6F               ld l,a
348+  8F69 38 04            jr c,2F
349+  8F6B 7C               ld a,h
350+  8F6C D6 08            sub 8
351+  8F6E 67               ld h,a
352+  8F6F 7C           2 ld a,h
353+  8F70 FE 58            cp $58
354+  8F72 28 1C            jr z,4F
355+  8F74 D1               pop de
356+  8F75 7A           	ld a,d
357+  8F76 AE           	xor (hl)
358+  8F77 77           	ld (hl),a
359+  8F78 24           	inc h
360+  8F79 7C               ld a,h
361+  8F7A E6 07            and 7
362+  8F7C 20 0A            jr nz,3F
363+  8F7E 7D               ld a,l
364+  8F7F C6 20            add a,$20
365+  8F81 6F               ld l,a
366+  8F82 38 04            jr c,3F
367+  8F84 7C               ld a,h
368+  8F85 D6 08            sub 8
369+  8F87 67               ld h,a
370+  8F88 7C           3 ld a,h
371+  8F89 FE 58            cp $58
372+  8F8B 28 03            jr z,4F
373+  8F8D D1               pop de
374+  8F8E 10 CB            djnz 1B
375+  8F90 ED 7B D9 85  4 ld sp,(Stack)
376+  8F94 C9           	ret
377+  8F95
378+  8F95              ; ---------------------------------------------------
379+  8F95              ;
380+  8F95              ;   27/02/23
381+  8F95              ;
382+  8F95              ;   Rutina idéntica a Pinta_Amadeus_2x2, sólo difiere de esta en el nº de scanlines_
383+  8F95              ;   _ que imprime. No utilizamos [Pinta_Amadeus_2x2] porque cuando el programa está_
384+  8F95              ;   _ imprimiendo elementos, no discrimina el tipo de Sprite que está pintando.
385+  8F95
386+  8F95 ED 73 D9 85  Pinta_Disparo ld (Stack),sp
387+  8F99 FD F9            ld sp,iy
388+  8F9B 06 02            ld b,2
389+  8F9D D1           1 pop de
390+  8F9E 7B               ld a,e
391+  8F9F AE               xor (hl)
392+  8FA0 77               ld (hl),a
393+  8FA1 23               inc hl
394+  8FA2 7A               ld a,d
395+  8FA3 AE               xor (hl)
396+  8FA4 77               ld (hl),a
397+  8FA5 2B               dec hl
398+  8FA6 24               inc h
399+  8FA7 7C               ld a,h
400+  8FA8 E6 07            and 7
401+  8FAA 20 0A            jr nz,2F
402+  8FAC 7D               ld a,l
403+  8FAD C6 20            add a,$20
404+  8FAF 6F               ld l,a
405+  8FB0 38 04            jr c,2F
406+  8FB2 7C               ld a,h
407+  8FB3 D6 08            sub 8
408+  8FB5 67               ld h,a
409+  8FB6 7C           2 ld a,h
410+  8FB7 FE 58            cp $58
411+  8FB9 28 02            jr z,3F
412+  8FBB 10 E0            djnz 1B
413+  8FBD ED 7B D9 85  3 ld sp,(Stack)
414+  8FC1 C9               ret
415+  8FC2
# file closed: Rutinas_de_impresion_sprites.asm
838   8FC2              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8FC2              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8FC2              ;
  3+  8FC2              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8FC2              ;
  5+  8FC2              ; *****************************************************************************************************************************************************************************************
  6+  8FC2              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8FC2
  8+  8FC2 7C           calcula_tercio ld a,h
  9+  8FC3 E6 18        	and $18
 10+  8FC5 CB 2F        	sra a
 11+  8FC7 CB 2F        	sra a
 12+  8FC9 CB 2F        	sra a
 13+  8FCB C9           	ret
 14+  8FCC
# file closed: calcula_tercio.asm
839   8FCC              	include "Cls.asm"
# file opened: Cls.asm
  1+  8FCC              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8FCC              ;
  3+  8FCC              ;
  4+  8FCC              ;	CLS.
  5+  8FCC              ;
  6+  8FCC              ;	Limpia la pantalla y define sus atributos.
  7+  8FCC              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8FCC              ;
  9+  8FCC              ;	COLORES: 0 ..... NEGRO
 10+  8FCC              ;    		 1 ..... AZUL
 11+  8FCC              ; 			 2 ..... ROJO
 12+  8FCC              ;			 3 ..... MAGENTA
 13+  8FCC              ; 			 4 ..... VERDE
 14+  8FCC              ; 			 5 ..... CIAN
 15+  8FCC              ;			 6 ..... AMARILLO
 16+  8FCC              ; 			 7 ..... BLANCO
 17+  8FCC              ;
 18+  8FCC              ;	INPUT: A contiene los atributos de pantalla.
 19+  8FCC              ;
 20+  8FCC              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8FCC
 22+  8FCC
 23+  8FCC 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8FCF 11 01 40     	LD DE,$4001
 25+  8FD2 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8FD5 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8FD7 ED B0        	LDIR
 28+  8FD9 01 FF 02     	LD BC,767
 29+  8FDC 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8FDD ED B0        	LDIR
 31+  8FDF C9           	ret
 32+  8FE0
# file closed: Cls.asm
840   8FE0              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8FE0              ; ******************************************************************************************************************************************************************************************
  2+  8FE0              ;
  3+  8FE0              ;   22/01/23
  4+  8FE0              ;
  5+  8FE0              ;	Mov_down
  6+  8FE0              ;
  7+  8FE0              ; 	Mueve el Sprite X px hacia abajo.
  8+  8FE0              ;
  9+  8FE0              ;
 10+  8FE0 21 C3 85     Mov_down ld hl,Ctrl_0
 11+  8FE3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8FE5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8FE5              ; 																	; _ en el caso de que no lo haya.
 14+  8FE5 3A AE 85     	ld a,(Vel_down)
 15+  8FE8 47           	ld b,a
 16+  8FE9 2A 98 85         ld hl,(Posicion_actual)
 17+  8FEC CD C2 8F     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8FEF E6 02        	and 2
 19+  8FF1 28 0F        	jr z,1F
 20+  8FF3
 21+  8FF3              ; Nos encontramos en el último tercio de pantalla.
 22+  8FF3              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8FF3
 24+  8FF3 7C           	ld a,h
 25+  8FF4 FE 57        	cp $57
 26+  8FF6 20 0A        	jr nz,1F
 27+  8FF8 7D           	ld a,l
 28+  8FF9 C6 20        	add $20
 29+  8FFB 30 05        	jr nc,1F
 30+  8FFD
 31+  8FFD              ; ------------------------------
 32+  8FFD CD DE 92     	call Reaparece_arriba
 33+  9000              ;	call Reinicio
 34+  9000              ; ------------------------------
 35+  9000 18 08        	jr 3F
 36+  9002 CD 02 8D     1 call NextScan
 37+  9005 22 98 85     	ld (Posicion_actual),hl
 38+  9008 10 E2            djnz 2B
 39+  900A CD F4 92     3 call Genera_coordenadas
 40+  900D C9           	ret
 41+  900E
 42+  900E
 43+  900E              ; ******************************************************************************************************************************************************************************************
 44+  900E              ;
 45+  900E              ;   22/01/23
 46+  900E              ;
 47+  900E              ;	Mov_up
 48+  900E              ;
 49+  900E              ; 	Mueve el Sprite hacia arriba.
 50+  900E              ;
 51+  900E              ;
 52+  900E 21 C3 85     Mov_up ld hl,Ctrl_0
 53+  9011 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  9013              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  9013              ; 																		; _ en el caso de que no lo haya.
 56+  9013 3A AD 85     	ld a,(Vel_up)
 57+  9016 47           	ld b,a
 58+  9017 2A 98 85     	ld hl,(Posicion_actual)
 59+  901A CD C2 8F     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  901D A7           	and a
 61+  901E 20 10        	jr nz,1F
 62+  9020
 63+  9020              ; Nos encontramos en el 1er tercio de pantalla.
 64+  9020              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  9020
 66+  9020 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  9021 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  9023 20 0B            jr nz,1F
 69+  9025 7D               ld a,l
 70+  9026 D6 20            sub $20
 71+  9028 30 06            jr nc,1F
 72+  902A 25               dec h
 73+  902B
 74+  902B              ; -----------------------------
 75+  902B CD CE 92         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  902E              ;	call Reinicio
 77+  902E              ; -----------------------------
 78+  902E
 79+  902E 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  9030 CD 11 8D     1 call PreviousScan
 81+  9033 22 98 85     	ld (Posicion_actual),hl
 82+  9036 10 E2            djnz 3B
 83+  9038 CD F4 92     2 call Genera_coordenadas
 84+  903B C9           	ret
 85+  903C
 86+  903C              ; ******************************************************************************************************************************************************************************************
 87+  903C              ;
 88+  903C              ;	19/10/22
 89+  903C              ;
 90+  903C              ;	Mov_right.
 91+  903C              ;
 92+  903C              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  903C              ;
 94+  903C
 95+  903C 21 C3 85     Mov_right ld hl,Ctrl_0
 96+  903F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  9041              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  9041              ; 																	; _ en el caso de que no lo haya.
 99+  9041 3A C3 85     	ld a,(Ctrl_0)
100+  9044 CB 77        	bit 6,a
101+  9046 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  9048
103+  9048 CD 7C 92     	call Stop_Amadeus_right
104+  904B C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  904C 18 4D        	jr 8F
106+  904E
107+  904E 3A 9C 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  9051 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  9053 20 46        	jr nz,8F
110+  9055
111+  9055 3A 9E 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  9058 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  9059 28 40        	jr z,8F
114+  905B
115+  905B              ; ---------- ---------- ----------
116+  905B              ;
117+  905B              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  905B
119+  905B 3A AC 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  905E FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  9060 28 11        	jr z,1F
122+  9062 38 06        	jr c,6F
123+  9064 FE 04        	cp 4
124+  9066 28 14        	jr z,7F
125+  9068 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  906A
127+  906A              ; ---------- ---------- ----------
128+  906A              ;
129+  906A              ; Perfiles de velocidad
130+  906A              ;
131+  906A
132+  906A 3A 9E 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  906D FE FE        	cp $fe
134+  906F 20 2A        	jr nz,8F
135+  9071 18 10        	jr 3F
136+  9073 3A 9E 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  9076 FE FD        	cp $fd
138+  9078 20 21        	jr nz,8F
139+  907A 18 07        	jr 3F
140+  907C 3A 9E 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  907F FE FB        	cp $fb
142+  9081 20 18        	jr nz,8F
143+  9083
144+  9083              ; ---------- ---------- ----------
145+  9083
146+  9083              3
147+  9083 CD BC 92     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  9086              ;	call Reinicio
149+  9086
150+  9086              ; ---------- ---------- ----------
151+  9086              ;
152+  9086              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  9086
154+  9086 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  9088 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  9089 CD A2 90     	call DESPLZ_DER
157+  908C C1           	pop bc
158+  908D 10 F9        	djnz 5B
159+  908F 2A 98 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  9092 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  9093 22 98 85     	ld (Posicion_actual),hl
162+  9096 CD F4 92     	call Genera_coordenadas
163+  9099 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  909B
165+  909B              ; ---------- ---------- ----------
166+  909B
167+  909B 2A 98 85     8 ld hl,(Posicion_actual)
168+  909E CD A2 90     	call DESPLZ_DER
169+  90A1 C9           2 ret
170+  90A2
171+  90A2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  90A2              ;
173+  90A2              ;	22/9/22
174+  90A2              ;
175+  90A2
176+  90A2 CD B1 90     DESPLZ_DER call Desplaza_derecha
177+  90A5 CD FD 90         call modifica_parametros_1er_DESPLZ_2
178+  90A8 CD 26 91         call Ciclo_completo
179+  90AB 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  90AE CB FE        	set 7,(hl)
181+  90B0 C9           	ret
182+  90B1
183+  90B1              ; ******************************************************************************************************************************************************************************************
184+  90B1              ;	15/02/23
185+  90B1              ;
186+  90B1
187+  90B1 3A AC 85     Desplaza_derecha ld a,(Vel_right)
188+  90B4 47           	ld b,a
189+  90B5 2A A4 85     	ld hl,(Puntero_DESPLZ_der)
190+  90B8 23           1 inc hl
191+  90B9 23           	inc hl
192+  90BA 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  90BC 22 A4 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  90BF CD 85 87     	call Extrae_address
195+  90C2 22 9A 85     	ld (Puntero_objeto),hl
196+  90C5
197+  90C5              ; Modifica (Puntero_DESPLZ_izq).
198+  90C5
199+  90C5              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  90C5              ; Cuántos movimientos hemos hecho ??
201+  90C5              ; DE contiene (Puntero_DESPLZ_der).
202+  90C5
203+  90C5 2A A0 85     7 ld hl,(Indice_Sprite_der)
204+  90C8 EB           	ex de,hl
205+  90C9 A7           	and a
206+  90CA ED 52        	sbc hl,de
207+  90CC CB 3D        	srl l
208+  90CE 3E 08        6 ld a,8
209+  90D0 95           	sub l
210+  90D1 30 1E        	jr nc,3F
211+  90D3
212+  90D3              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  90D3              ; B="0".
214+  90D3
215+  90D3 04           4 inc b
216+  90D4 3C           	inc a
217+  90D5 20 FC        	jr nz,4B
218+  90D7 78           	ld a,b
219+  90D8 08           	ex af,af
220+  90D9 2A A0 85     	ld hl,(Indice_Sprite_der)
221+  90DC 23           5 inc hl
222+  90DD 23           	inc hl
223+  90DE 10 FC        	djnz 5B
224+  90E0 22 A4 85     	ld (Puntero_DESPLZ_der),hl
225+  90E3 CD 85 87     	call Extrae_address
226+  90E6 22 9A 85     	ld (Puntero_objeto),hl
227+  90E9
228+  90E9              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  90E9              ; _(Posicion_actual).
230+  90E9
231+  90E9 21 98 85     	ld hl,Posicion_actual
232+  90EC 34           	inc (hl)
233+  90ED 08               ex af,af
234+  90EE 6F           	ld l,a
235+  90EF 18 DD        	jr 6B
236+  90F1
237+  90F1              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  90F1
239+  90F1 47           3 ld b,a
240+  90F2 2A A2 85     	ld hl,(Indice_Sprite_izq)
241+  90F5 23           2 inc hl
242+  90F6 23           	inc hl
243+  90F7 10 FC        	djnz 2B
244+  90F9 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
245+  90FC C9           8 ret
246+  90FD
247+  90FD              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  90FD              ;
249+  90FD              ;	24/7/22
250+  90FD              ;
251+  90FD              ;	modifica_parametros_1er_DESPLZ_2
252+  90FD              ;
253+  90FD              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  90FD              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  90FD              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  90FD
257+  90FD 3A 9E 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  9100 A7           	and a
259+  9101 20 1F        	jr nz,1F
260+  9103 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  9105 32 9E 85         ld (CTRL_DESPLZ),a
262+  9108
263+  9108 21 97 85     	ld hl,Columns
264+  910B 34           	inc (hl)
265+  910C 3A AA 85     	ld a,(Cuad_objeto)
266+  910F E6 01        	and 1
267+  9111 28 0F        	jr z,1F
268+  9113 2A 98 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  9116 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  9117 22 98 85     	ld (Posicion_actual),hl
271+  911A CD F4 92     	call Genera_coordenadas
272+  911D CD 88 92     	call Inc_CTRL_DESPLZ
273+  9120 18 03        	jr 2F
274+  9122 CD 88 92     1 call Inc_CTRL_DESPLZ
275+  9125 C9           2 ret
276+  9126
277+  9126              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  9126              ;
279+  9126              ;	24/7/22
280+  9126              ;
281+  9126              ;	Ciclo_completo.
282+  9126              ;
283+  9126              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  9126              ;
285+  9126              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  9126              ; 	Decrementamos (Columns).
287+  9126              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  9126              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  9126
290+  9126
291+  9126 3A 9E 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  9129 FE FF        	cp $ff
293+  912B 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  912D E6 F0        	and $f0
295+  912F 20 28        	jr nz,3F
296+  9131
297+  9131              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  9131
299+  9131 3A 9E 85     	ld a,(CTRL_DESPLZ)
300+  9134 47           	ld b,a
301+  9135 3E F8        	ld a,$f8
302+  9137 80           	add b
303+  9138 32 9E 85     	ld (CTRL_DESPLZ),a
304+  913B 18 1C        	jr 3F
305+  913D 21 97 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  9140 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  9141 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  9142 32 9E 85     	ld (CTRL_DESPLZ),a
309+  9145 3A AA 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  9148 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  914A 20 0A        	jr nz,2F
312+  914C 2A 98 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  914F 23           	inc hl
314+  9150 22 98 85     	ld (Posicion_actual),hl
315+  9153 CD F4 92     	call Genera_coordenadas
316+  9156
317+  9156              ; Inicia el puntero de Sprite.
318+  9156
319+  9156 CD 9C 87     2 call Inicia_puntero_objeto_der
320+  9159 C9           3 ret
321+  915A
322+  915A              ; ******************************************************************************************************************************************************************************************
323+  915A              ;
324+  915A              ;	15/02/23
325+  915A              ;
326+  915A              ;	Mov_left.
327+  915A              ;
328+  915A              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  915A              ;
330+  915A              Mov_left
331+  915A
332+  915A 21 C3 85     	ld hl,Ctrl_0
333+  915D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  915F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  915F              ; 																	; _ en el caso de que no lo haya.
336+  915F 3A C3 85     	ld a,(Ctrl_0)
337+  9162 CB 77        	bit 6,a
338+  9164 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  9166
340+  9166 CD 82 92     	call Stop_Amadeus_left
341+  9169 C8           	ret z
342+  916A 20 50        	jr nz,8F
343+  916C
344+  916C 3A 9C 85     11 ld a,(Coordenada_X)
345+  916F A7           	and a
346+  9170 20 4A        	jr nz,8F
347+  9172
348+  9172 3A 9E 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  9175 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  9176 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  9178
352+  9178              ; ---------- ---------- ----------
353+  9178
354+  9178 3A AB 85     	ld a,(Vel_left)
355+  917B FE 02        	cp 2
356+  917D 28 0F        	jr z,1F
357+  917F 38 04        	jr c,6F
358+  9181 FE 04        	cp 4
359+  9183 28 12        	jr z,7F
360+  9185
361+  9185              ; ---------- ---------- ----------
362+  9185
363+  9185 3A 9E 85     6 ld a,(CTRL_DESPLZ)
364+  9188 FE F9        	cp $f9
365+  918A 20 30        	jr nz,8F
366+  918C 18 10        	jr 4F
367+  918E 3A 9E 85     1 ld a,(CTRL_DESPLZ)
368+  9191 FE FA        	cp $fa
369+  9193 20 27        	jr nz,8F
370+  9195 18 07        	jr 4F
371+  9197 3A 9E 85     7 ld a,(CTRL_DESPLZ)
372+  919A FE FC        	cp $fc
373+  919C 20 1E        	jr nz,8F
374+  919E
375+  919E              ; ---------- ---------- ----------
376+  919E
377+  919E              4
378+  919E CD AA 92     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  91A1              ;	call Reinicio
380+  91A1
381+  91A1              ; ---------- ---------- ----------
382+  91A1
383+  91A1 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  91A3 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  91A4
386+  91A4 2A A2 85     	ld hl,(Indice_Sprite_izq)
387+  91A7 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
388+  91AA
389+  91AA CD C3 91     	call DESPLZ_IZQ
390+  91AD C1           	pop bc
391+  91AE 10 F3        	djnz 5B
392+  91B0 2A 98 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  91B3 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  91B4 22 98 85     	ld (Posicion_actual),hl
395+  91B7 CD F4 92     	call Genera_coordenadas
396+  91BA 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  91BC
398+  91BC              ; ---------- ---------- ----------
399+  91BC              ; Movemos, no hay recolocación.
400+  91BC
401+  91BC 2A 98 85     8 ld hl,(Posicion_actual)
402+  91BF CD C3 91     	call DESPLZ_IZQ
403+  91C2 C9           2 ret
404+  91C3
405+  91C3              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  91C3              ;
407+  91C3              ;	22/9/22
408+  91C3
409+  91C3              DESPLZ_IZQ
410+  91C3
411+  91C3 CD D2 91     	call Desplaza_izquierda
412+  91C6 CD 1E 92         call modifica_parametros_1er_DESPLZ
413+  91C9 CD 46 92     	call Ciclo_completo_2
414+  91CC 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  91CF CB BE        	res 7,(hl)
416+  91D1 C9           	ret
417+  91D2
418+  91D2              Desplaza_izquierda
419+  91D2
420+  91D2 3A AB 85     	ld a,(Vel_left)
421+  91D5 47           	ld b,a
422+  91D6 2A A6 85     	ld hl,(Puntero_DESPLZ_izq)
423+  91D9 23           1 inc hl
424+  91DA 23           	inc hl
425+  91DB 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  91DD 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
427+  91E0 CD 85 87     	call Extrae_address
428+  91E3 22 9A 85     	ld (Puntero_objeto),hl
429+  91E6
430+  91E6              ; Modifica (Puntero_DESPLZ_der).
431+  91E6
432+  91E6              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  91E6              ; Cuántos movimientos hemos hecho ??
434+  91E6              ; DE contiene (Puntero_DESPLZ_izq).
435+  91E6
436+  91E6 2A A2 85     7 ld hl,(Indice_Sprite_izq)
437+  91E9 EB           	ex de,hl
438+  91EA A7           	and a
439+  91EB ED 52        	sbc hl,de
440+  91ED CB 3D        	srl l
441+  91EF 3E 08        6 ld a,8
442+  91F1 95           	sub l
443+  91F2 30 1E        	jr nc,3F
444+  91F4
445+  91F4              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  91F4              ; B="0".
447+  91F4
448+  91F4 04           4 inc b
449+  91F5 3C           	inc a
450+  91F6 20 FC        	jr nz,4B
451+  91F8 78           	ld a,b
452+  91F9 08           	ex af,af
453+  91FA 2A A2 85     	ld hl,(Indice_Sprite_izq)
454+  91FD 23           5 inc hl
455+  91FE 23           	inc hl
456+  91FF 10 FC        	djnz 5B
457+  9201 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
458+  9204 CD 85 87     	call Extrae_address
459+  9207 22 9A 85     	ld (Puntero_objeto),hl
460+  920A
461+  920A              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  920A              ; _(Posicion_actual).
463+  920A
464+  920A 21 98 85     	ld hl,Posicion_actual
465+  920D 35           	dec (hl)
466+  920E 08           	ex af,af
467+  920F 6F           	ld l,a
468+  9210 18 DD        	jr 6B
469+  9212
470+  9212              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  9212
472+  9212 47           3 ld b,a
473+  9213 2A A0 85     	ld hl,(Indice_Sprite_der)
474+  9216 23           2 inc hl
475+  9217 23           	inc hl
476+  9218 10 FC        	djnz 2B
477+  921A 22 A4 85     	ld (Puntero_DESPLZ_der),hl
478+  921D C9           8 ret
479+  921E
480+  921E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  921E              ;
482+  921E              ;	modifica_parametros_1er_DESPLZ
483+  921E              ;
484+  921E              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  921E              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  921E              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  921E
488+  921E 3A 9E 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  9221 A7           	and a
490+  9222 20 1E        	jr nz,1F
491+  9224 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  9225 32 9E 85         ld (CTRL_DESPLZ),a
493+  9228 21 97 85     	ld hl,Columns
494+  922B 34           	inc (hl)
495+  922C 3A AA 85     	ld a,(Cuad_objeto)
496+  922F E6 01        	and 1
497+  9231 20 0F        	jr nz,1F
498+  9233 2A 98 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  9236 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  9237 22 98 85     	ld (Posicion_actual),hl
501+  923A CD F4 92     	call Genera_coordenadas
502+  923D CD 99 92     	call Dec_CTRL_DESPLZ
503+  9240 18 03        	jr 2F
504+  9242 CD 99 92     1 call Dec_CTRL_DESPLZ
505+  9245 C9           2 ret
506+  9246
507+  9246              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  9246
509+  9246 3A 9E 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  9249 FE F7        	cp $f7
511+  924B 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  924D 30 2C        	jr nc,3F
513+  924F
514+  924F              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  924F
516+  924F 06 00        	ld b,0
517+  9251 04           4 inc b
518+  9252 3C           	inc a
519+  9253 FE F7        	cp $f7
520+  9255 20 FA        	jr nz,4B
521+  9257 3E FF        	ld a,$ff
522+  9259 90           	sub b
523+  925A 32 9E 85     	ld (CTRL_DESPLZ),a
524+  925D 18 1C        	jr 3F
525+  925F
526+  925F              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  925F
528+  925F 21 97 85     1 ld hl,Columns
529+  9262 35           	dec (hl)
530+  9263 AF           	xor a
531+  9264 32 9E 85     	ld (CTRL_DESPLZ),a
532+  9267 3A AA 85     	ld a,(Cuad_objeto)
533+  926A E6 01        	and 1
534+  926C 28 0A        	jr z,2F
535+  926E 2A 98 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  9271 2B           	dec hl
537+  9272 22 98 85     	ld (Posicion_actual),hl
538+  9275 CD F4 92     	call Genera_coordenadas
539+  9278
540+  9278              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  9278
542+  9278 CD AF 87     2 call Inicia_puntero_objeto_izq
543+  927B C9           3 ret
544+  927C
545+  927C              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  927C              ;
547+  927C              ;	19/10/22
548+  927C              ;
549+  927C              ;	(cp 29) para un Amadeus de 3 Columns.
550+  927C              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  927C
552+  927C 3A 9C 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  927F FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  9281 C9           	ret
555+  9282
556+  9282              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  9282              ;
558+  9282              ;	19/10/22
559+  9282              ;
560+  9282              ;	(cp 2) para un Amadeus de 3 Columns.
561+  9282              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  9282
563+  9282 3A 9C 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  9285 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  9287 C9           	ret
566+  9288
567+  9288              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  9288              ;
569+  9288              ;	24/7/22
570+  9288              ;
571+  9288              ;	Inc_CTRL_DESPLZ
572+  9288              ;
573+  9288              ;
574+  9288              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  9288
576+  9288 21 9E 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  928B 3A AC 85     	ld a,(Vel_right)
578+  928E A7           	and a
579+  928F 28 06        	jr z,1F
580+  9291 47           	ld b,a
581+  9292 34           3 inc (hl)
582+  9293 10 FD        	djnz 3B
583+  9295 18 01        	jr 2F
584+  9297 34           1 inc (hl)
585+  9298 C9           2 ret
586+  9299
587+  9299              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  9299              ;
589+  9299              ;	5/2/23
590+  9299              ;
591+  9299              ;	Dec_CTRL_DESPLZ
592+  9299              ;
593+  9299              ;
594+  9299              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  9299
596+  9299 21 9E 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  929C 3A AB 85     	ld a,(Vel_left)
598+  929F A7           	and a
599+  92A0 28 06        	jr z,1F
600+  92A2 47           	ld b,a
601+  92A3 35           3 dec (hl)
602+  92A4 10 FD        	djnz 3B
603+  92A6 18 01        	jr 2F
604+  92A8 35           1 dec (hl)
605+  92A9 C9           2 ret
606+  92AA
607+  92AA              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  92AA
609+  92AA 2A 98 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  92AD 01 1F 00     	ld bc,31
611+  92B0 A7           	and a
612+  92B1 ED 4A        	adc hl,bc
613+  92B3 22 98 85     	ld (Posicion_actual),hl
614+  92B6 21 C3 85     	ld hl,Ctrl_0														; $xxx1
615+  92B9 CB C6        	set 0,(hl)
616+  92BB C9           	ret
617+  92BC
618+  92BC              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  92BC
620+  92BC 2A 98 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  92BF 01 1F 00     	ld bc,31
622+  92C2 A7           	and a
623+  92C3 ED 42        	sbc hl,bc
624+  92C5 22 98 85     	ld (Posicion_actual),hl 											; $xx1x
625+  92C8 21 C3 85     	ld hl,Ctrl_0
626+  92CB CB CE        	set 1,(hl)
627+  92CD C9           	ret
628+  92CE
629+  92CE              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  92CE
631+  92CE 24           Reaparece_abajo inc h
632+  92CF 01 E0 17     	ld bc,$17e0
633+  92D2 A7           	and a
634+  92D3 ED 4A        	adc hl,bc
635+  92D5 22 98 85     	ld (Posicion_actual),hl
636+  92D8 21 C3 85     	ld hl,Ctrl_0
637+  92DB CB D6        	set 2,(hl)
638+  92DD C9           	ret
639+  92DE
640+  92DE              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  92DE
642+  92DE 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  92E1 A7           	and a
644+  92E2 ED 42        	sbc hl,bc
645+  92E4 22 98 85     	ld (Posicion_actual),hl
646+  92E7 21 C3 85     	ld hl,Ctrl_0
647+  92EA CB DE        	set 3,(hl)
648+  92EC C9           	ret
649+  92ED
650+  92ED              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  92ED
652+  92ED 2A A8 85     Reinicio ld hl,(Posicion_inicio)
653+  92F0 22 98 85     	ld (Posicion_actual),hl
654+  92F3 C9           	ret
# file closed: Direcciones.asm
841   92F4              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  92F4              ;	12/12/22
  2+  92F4              ;
  3+  92F4              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  92F4              ;	Fila superior "0", Columna izquierda "0".
  5+  92F4              ;
  6+  92F4              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  92F4              ;
  8+  92F4              ;	Modifica: A
  9+  92F4
 10+  92F4 C5           Genera_coordenadas push bc
 11+  92F5 E5           	push hl
 12+  92F6 2A 98 85     	ld hl,(Posicion_actual)
 13+  92F9 7D           	ld a,l
 14+  92FA E6 1F        	and $1f
 15+  92FC 32 9C 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  92FF CD C2 8F     	call calcula_tercio
 17+  9302 47           	ld b,a
 18+  9303 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9304 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  9306 7D           	ld a,l
 21+  9307 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  9309 28 05        	jr z,2F
 23+  930B 0C           1 inc c
 24+  930C D6 20        	sub 32
 25+  930E 20 FB        	jr nz,1B
 26+  9310 0C           2 inc c
 27+  9311 04           	inc b
 28+  9312 05           	dec b
 29+  9313 28 04        	jr z,3F
 30+  9315 3E E0        	ld a,$e0
 31+  9317 10 F2        	djnz 1B
 32+  9319 79           3 ld a,c
 33+  931A 3D           	dec a
 34+  931B 32 9D 85     	ld (Coordenada_y),a
 35+  931E E1           	pop hl
 36+  931F C1           	pop bc
 37+  9320 C9           	ret
# file closed: Genera_coordenadas.asm
842   9321              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9321
  2+  9321
  3+  9321              ;   11/8/22
  4+  9321              ;
  5+  9321              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9321              ;
  7+  9321              ;   Mov_obj.asm
  8+  9321              ;
  9+  9321              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9321              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9321              ;
 12+  9321              ;   Codificación:
 13+  9321              ;
 14+  9321              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9321
 16+  9321              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9321
 18+  9321 02 40 00     Arriba db 2,%01000000,0
 19+  9324 02 80 00     Abajo db 2,%10000000,0
 20+  9327 02 20 00     Derecha db 2,%00100000,0
 21+  932A 02 10 00     Izquierda db 2,%00010000,0
 22+  932D 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9331 60 42 60 40
 22+  9335 63
 23+  9336 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  933A 22 A3 80 A0
 24+  933E 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9342 84 A0 83 A0
 25+  9346 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  934A 80 A3 22 A0
 26+  934E 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  9352 40 60 42 60
 27+  9356 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  935A 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  935E 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  9362 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  9366 84
 31+  9367 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  936B 84 00
 32+  936D 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  9371 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  9375 1F 1F 1F 1F
 34+  9379 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  937D 1F 1F 1F 1F
 34+  9381 1F
 35+  9382 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  9386 2F 2F 2F 2F
 35+  938A 2F 2F
 36+  938C 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  9390 2F 2F 00
 37+  9393
 38+  9393
 39+  9393              ; ----- ----- ----- ----- -----
 40+  9393
 41+  9393 71 93        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  9395 6D 93        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  9397 2A 93        Indice_mov_Izquierda defw Izquierda
 44+  9399 27 93        Indice_mov_Derecha defw Derecha
 45+  939B 24 93        Indice_mov_Abajo defw Abajo
 46+  939D 21 93        Indice_mov_Arriba defw Arriba
 47+  939F 5E 93        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  93A1 62 93        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  93A3 5A 93        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  93A5 67 93        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  93A7 2D 93        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  93A9              ; ----- ----- ----- ----- -----
 53+  93A9
 54+  93A9 3A C9 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  93AC A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  93AD 28 02            jr z,1F
 57+  93AF 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  93B1 3A CA 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  93B4 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  93B6 32 CA 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  93B9              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  93B9 2A C7 85         ld hl,(Puntero_mov)
 63+  93BC 7E               ld a,(hl)
 64+  93BD 32 C9 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  93C0 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  93C1 22 C7 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  93C4
 68+  93C4 3A CB 85     Decoder ld a,(Repetimos_db)
 69+  93C7 A7               and a
 70+  93C8 20 0C            jr nz,12F
 71+  93CA 2A C7 85         ld hl,(Puntero_mov)
 72+  93CD 7E               ld a,(hl)
 73+  93CE A7               and a
 74+  93CF 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  93D1 E6 0F            and $0f
 76+  93D3 32 CB 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  93D6              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  93D6 2A C7 85     12 ld hl,(Puntero_mov)
 79+  93D9 CB 7E            bit 7,(hl)
 80+  93DB 28 03            jr z,2F
 81+  93DD CD E0 8F         call Mov_down
 82+  93E0 2A C7 85     2 ld hl, (Puntero_mov)
 83+  93E3 CB 76            bit 6,(hl)
 84+  93E5 28 03            jr z,3F
 85+  93E7 CD 0E 90         call Mov_up
 86+  93EA 2A C7 85     3 ld hl, (Puntero_mov)
 87+  93ED CB 6E            bit 5,(hl)
 88+  93EF 28 03            jr z,4F
 89+  93F1 CD 3C 90         call Mov_right
 90+  93F4 2A C7 85     4 ld hl, (Puntero_mov)
 91+  93F7 CB 66            bit 4,(hl)
 92+  93F9 28 03            jr z,5F
 93+  93FB CD 5A 91         call Mov_left
 94+  93FE
 95+  93FE              ; ---------- --------- --------- ---------- ----------
 96+  93FE
 97+  93FE 3A CB 85     5 ld a,(Repetimos_db)
 98+  9401 A7               and a
 99+  9402 28 07            jr z,6F
100+  9404 3D               dec a
101+  9405 32 CB 85         ld (Repetimos_db),a
102+  9408 28 01            jr z,6f
103+  940A C9           11 ret
104+  940B 21 C9 85     6 ld hl,Contador_db_mov
105+  940E 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  940F 2A C7 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9412 23               inc hl
108+  9413 22 C7 85         ld (Puntero_mov),hl
109+  9416 18 F2            jr 11B
110+  9418 2A C5 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  941B 3A CA 85         ld a,(Incrementa_puntero)
112+  941E 47               ld b,a
113+  941F 23           8 inc hl
114+  9420 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9422 5E               ld e,(hl)
116+  9423 23               inc hl
117+  9424 56               ld d,(hl)
118+  9425 EB               ex de,hl
119+  9426 22 C7 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9429 18 DF            jr 11B
121+  942B
122+  942B              ; ---------- --------- --------- ---------- ----------
123+  942B              ;
124+  942B              ;   11/8/22
125+  942B              ;
126+  942B              ;   Prepara_Puntero_mov
127+  942B
128+  942B E5           Prepara_Puntero_mov push hl
129+  942C D5               push de
130+  942D 2A C5 85         ld hl,(Puntero_indice_mov)
131+  9430 5E               ld e,(hl)
132+  9431 23               inc hl
133+  9432 56               ld d,(hl)
134+  9433 EB               ex de,hl
135+  9434 22 C7 85         ld (Puntero_mov),hl
136+  9437 D1               pop de
137+  9438 E1               pop hl
138+  9439 C9               ret
139+  943A
140+  943A              ; ---------- --------- --------- ---------- ----------
141+  943A              ;
142+  943A              ;   11/8/22
143+  943A              ;
144+  943A              ;   Reinicia_el_movimiento
145+  943A
146+  943A CD 2B 94     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  943D AF               xor a
148+  943E 32 C9 85         ld (Contador_db_mov),a
149+  9441 32 CA 85         ld (Incrementa_puntero),a
150+  9444
151+  9444              ;    jr $
152+  9444
153+  9444 C3 A9 93         jp Movimiento
154+  9447 C9               ret
155+  9448              ; ---------- --------- --------- ---------- ----------
156+  9448
157+  9448
158+  9448
159+  9448
160+  9448
161+  9448
162+  9448
163+  9448
164+  9448
165+  9448
166+  9448
167+  9448
168+  9448
169+  9448
170+  9448
171+  9448
172+  9448
173+  9448
# file closed: Patrones_de_mov.asm
843   9448              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9448              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9448              ;
  3+  9448              ;	3/1/23
  4+  9448              ;
  5+  9448              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9448
  7+  9448              ;	ADC HL,SP	LD (addr),SP
  8+  9448              ;	ADD HL,SP	LD SP,(addr)
  9+  9448              ;	ADD IX,SP	LD SP,nn
 10+  9448              ; 	ADD IY,SP	LD SP,HL
 11+  9448              ;				LD SP,IX
 12+  9448              ;	DEC SP		LD SP,IY
 13+  9448
 14+  9448              ;	EX (SP),HL
 15+  9448              ;	EX (SP),IX
 16+  9448              ;	EX (SP),IY
 17+  9448
 18+  9448              ;	INC SP
 19+  9448
 20+  9448
 21+  9448                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero objeto.
 27+  7FA0              ;   $7002 / 03 ..... Puntero de impresion.
 28+  7FA0              ;   $7004 / 05 ..... Rutina de impresión.
 29+  7FA0
 30+  7FA0 ED 73 D9 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 A0 7F         ld sp,Guarda_foto_registros                   ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 3A D0 85         ld a,(Ctrl_1)
 38+  7FAF CB 47            bit 0,a
 39+  7FB1 28 05            jr z,2F
 40+  7FB3
 41+  7FB3 2A DF 85         ld hl,(Stack_snapshot_disparos)
 42+  7FB6
 43+  7FB6 18 03            jr 4F
 44+  7FB8
 45+  7FB8 2A DD 85     2 ld hl,(Stack_snapshot)                          ; Album_de_fotos contiene la imagen de los registros implicados en el_
 46+  7FBB 06 03        4 ld b,3                                          ; _correcto funcionamiento de las distintas rutinas de impresión.
 47+  7FBD
 48+  7FBD D1           1 pop de
 49+  7FBE 73               ld (hl),e
 50+  7FBF 23               inc hl
 51+  7FC0 72               ld (hl),d
 52+  7FC1 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 53+  7FC2 10 F9            djnz 1B
 54+  7FC4
 55+  7FC4 A7               and a
 56+  7FC5 28 05            jr z,5F
 57+  7FC7
 58+  7FC7 22 DF 85         ld (Stack_snapshot_disparos),hl
 59+  7FCA 18 03            jr 6F
 60+  7FCC
 61+  7FCC 22 DD 85     5 ld (Stack_snapshot),hl
 62+  7FCF ED 7B D9 85  6 ld sp,(Stack)
 63+  7FD3
 64+  7FD3 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 65+  7FD4
 66+  7FD4
# file closed: Guarda_foto_registros.asm
844   7FD4
845   7FD4              	SAVESNA "Pruebas.sna", START
846   7FD4
847   7FD4
848   7FD4
# file closed: Banco_de_pruebas.asm
