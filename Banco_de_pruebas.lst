# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 68 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 00 84        	defw Entidad_1
  9+  83C2 34 84        	defw Entidad_2
 10+  83C4 68 84        	defw Entidad_3
 11+  83C6 9C 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE D0 50        	defw $50d0	 									; (Posicion_actual).
 23+  83D0 10 83        	defw $8310 										; (Puntero_objeto).
 24+  83D2 00 10 16     	db 0,$10,$16									; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 28+  83D8 00 83        	defw $8300	 									; (Puntero_DESPLZ).
 29+  83DA D0 50        	defw $50d0										; (Posicion_inicio).
 30+  83DC 04           	db 4 											; (Cuad_objeto).
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 33+  83E1
 34+  83E1 00 00        	db 0,0											; Variables_de_borrado
 35+  83E3 00 00        	defw 0											;	" " " " " " "
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00 00     	db 0,0,0										;	" " " " " " "
 38+  83EA
 39+  83EA 00 00        	db 0,0											; Variables_de_pintado
 40+  83EC 00 00        	defw 0											;	" " " " " " "
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00 00     	db 0,0,0										;	" " " " " " "
 43+  83F3
 44+  83F3 40 00        	db $40,0										; (Ctrl_0) / (Obj_dibujado).
 45+  83F5
 46+  83F5 00 00 F3 AF  	defw 0,$aff3 									; (Puntero_indice_mov) / (Puntero_mov).
 47+  83F9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 48+  83FC
 49+  83FC 02           	db 2 											; (Columnas).
 50+  83FD 00 00        	defw 0											; (Limite_horizontal).
 51+  83FF 00           	db 0											; (Limite_vertical).
 52+  8400
 53+  8400              ; ---------- ---------- ---------- ---------- ----------
 54+  8400
 55+  8400 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 56+  8402 00 00        	defw 0											; (Posicion_actual).
 57+  8404 00 00        	defw 0 											; (Puntero_objeto).
 58+  8406 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 59+  8409
 60+  8409 00           	db %00000000 									; (Attr).
 61+  840A 00 00        	defw 0											; (Indice_Sprite).
 62+  840C 00 00        	defw 0											; (Puntero_DESPLZ).
 63+  840E 00 00        	defw 0											; (Posicion_inicio).
 64+  8410 00           	db 0											; (Cuad_objeto).
 65+  8411
 66+  8411 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 67+  8415
 68+  8415 00 00        	db 0,0										    ; Variables_de_borrado
 69+  8417 00 00        	defw 0											;	" " " " " " "
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00 00     	db 0,0,0										;	" " " " " " "
 72+  841E
 73+  841E 00 00        	db 0,0											; Variables_de_pintado
 74+  8420 00 00        	defw 0											;	" " " " " " "
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00 00     	db 0,0,0										;	" " " " " " "
 77+  8427
 78+  8427 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 79+  8429
 80+  8429 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 81+  842D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 82+  8430
 83+  8430 00           	db 0 											; (Columnas).
 84+  8431 00 00        	defw 0											; (Limite_horizontal).
 85+  8433 00           	db 0											; (Limite_vertical).
 86+  8434
 87+  8434              ; ---------- ---------- ---------- ---------- ----------
 88+  8434
 89+  8434 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 90+  8436 00 00        	defw 0                                          ; (Posicion_actual).
 91+  8438 00 00        	defw 0											; (Puntero_objeto).
 92+  843A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 93+  843D
 94+  843D 02           	db %00000010									; (Attr).
 95+  843E 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 96+  8440 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 97+  8442 7E 47        	defw $477e                                      ; (Posicion_inicio).
 98+  8444 02           	db 2											; (Cuad_objeto).
 99+  8445
100+  8445 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
101+  8449
102+  8449 00 00        	db 0,0											; Variables_de_borrado
103+  844B 00 00        	defw 0										 	;	" " " " " " "
104+  844D 00 00        	defw 0											;	" " " " " " "
105+  844F 00 00 00     	db 0,0,0										;	" " " " " " "
106+  8452
107+  8452 00 00        	db 0,0											; Variables_de_pintado
108+  8454 00 00        	defw 0											;	" " " " " " "
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00 00     	db 0,0,0										;	" " " " " " "
111+  845B
112+  845B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
113+  845D
114+  845D 29 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
115+  8461 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
116+  8464
117+  8464 00           	db 0 											; (Columnas).
118+  8465 00 00        	defw 0											; (Limite_horizontal).
119+  8467 00           	db 0											; (Limite_vertical).
120+  8468
121+  8468              ; ---------- ---------- ---------- ---------- ----------
122+  8468
123+  8468 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
124+  846A 00 00        	defw 0                                          ; (Posicion_actual).
125+  846C 00 00        	defw 0											; (Puntero_objeto).
126+  846E 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
127+  8471
128+  8471 04           	db %00000100									; (Attr).
129+  8472 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
130+  8474 00 00        	defw 0                                          ; (Puntero_DESPLZ).
131+  8476 A1 47        	defw $47a1                                      ; (Posicion_inicio).
132+  8478 01           	db 1											; (Cuad_objeto).
133+  8479
134+  8479 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
135+  847D
136+  847D 00 00        	db 0,0											; Variables_de_borrado
137+  847F 00 00        	defw 0										 	;	" " " " " " "
138+  8481 00 00        	defw 0											;	" " " " " " "
139+  8483 00 00 00     	db 0,0,0										;	" " " " " " "
140+  8486
141+  8486 00 00        	db 0,0											; Variables_de_pintado
142+  8488 00 00        	defw 0											;	" " " " " " "
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00 00     	db 0,0,0										;	" " " " " " "
145+  848F
146+  848F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
147+  8491
148+  8491 2B 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
149+  8495 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
150+  8498
151+  8498 00           	db 0 											; (Columnas).
152+  8499 00 00        	defw 0											; (Limite_horizontal).
153+  849B 00           	db 0											; (Limite_vertical).
154+  849C
155+  849C              ; ---------- ---------- ---------- ---------- ----------
156+  849C
157+  849C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
158+  849E 00 00        	defw 0                                          ; (Posicion_actual).
159+  84A0 00 00        	defw 0 											; (Puntero_objeto).
160+  84A2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
161+  84A5
162+  84A5 01           	db %00000001									; (Attr).
163+  84A6 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
164+  84A8 00 00        	defw 0                                          ; (Puntero_DESPLZ).
165+  84AA BE 47        	defw $47be                                      ; (Posicion_inicio).
166+  84AC 00           	db 0											; (Cuad_objeto).
167+  84AD
168+  84AD 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
169+  84B1
170+  84B1 00 00        	db 0,0											; Variables_de_borrado
171+  84B3 00 00        	defw 0										 	;	" " " " " " "
172+  84B5 00 00        	defw 0											;	" " " " " " "
173+  84B7 00 00 00     	db 0,0,0										;	" " " " " " "
174+  84BA
175+  84BA 00 00        	db 0,0											; Variables_de_pintado
176+  84BC 00 00        	defw 0											;	" " " " " " "
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84C3
180+  84C3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
181+  84C5
182+  84C5 1B 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
183+  84C9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
184+  84CC
185+  84CC 00           	db 0 											; (Columnas).
186+  84CD 00 00        	defw 0											; (Limite_horizontal).
187+  84CF 00           	db 0											; (Limite_vertical).
188+  84D0
# file closed: Entidades.asm
 21   84D0
 22   84D0              ; ******************************************************************************************************************************************************************************************
 23   84D0              ; Constantes.
 24   84D0              ; ******************************************************************************************************************************************************************************************
 25   84D0              ;
 26   84D0              ; 8/11/22
 27   84D0              ;
 28   84D0              ; Constantes generales.
 29   84D0              ;
 30   84D0
 31   84D0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D0
 37   84D0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D0
 40   84D0
 41   84D0              ; ******************************************************************************************************************************************************************************************
 42   84D0              ; Variables.
 43   84D0              ; ******************************************************************************************************************************************************************************************
 44   84D0              ;
 45   84D0              ; 10/11/22
 46   84D0              ;
 47   84D0              ; Variables de DRAW. (Motor principal).
 48   84D0              ;
 49   84D0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D0
 51   84D0 02           Filas db 2												; Filas. [DRAW]
 52   84D1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D2 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D9
 62   84D9              ; ---------- ---------- ----------
 63   84D9
 64   84D9
 65   84D9 04           Attr db %00000100										; Atributos de la entidad:
 66   84DA
 67   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DA              ;
 69   84DA              ;	COLORES: 0 ..... NEGRO
 70   84DA              ;    		 1 ..... AZUL
 71   84DA              ; 			 2 ..... ROJO
 72   84DA              ;			 3 ..... MAGENTA
 73   84DA              ; 			 4 ..... VERDE
 74   84DA              ; 			 5 ..... CIAN
 75   84DA              ;			 6 ..... AMARILLO
 76   84DA              ; 			 7 ..... BLANCO
 77   84DA
 78   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DC 00 00        Puntero_DESPLZ defw 0
 80   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E1
 83   84E1              ; Variables de objeto. (Características).
 84   84E1
 85   84E1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E4 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E5
 90   84E5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E9 00 00        	defw 0
 93   84EB 00 00 00     	db 0,0,0
 94   84EE
 95   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F0 00 00        	defw 0
 97   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F4 00 00 00     	db 0,0,0
 99   84F7
100   84F7              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F7
102   84F7 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F8              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F8              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F8              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F8              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F8              ;
108   84F8              ; 														DESCRIPCIÖN:
109   84F8              ;
110   84F8              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F8              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F8              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F8              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F8              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F8              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F8              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F8              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F8              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F8              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F8              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F8              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F8              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F8              ;
124   84F8              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F8              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F8              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F8
128   84F8 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F9
130   84F9              ; Movimiento.
131   84F9
132   84F9 1D 90        Puntero_indice_mov defw Indice_mov_Derecha
133   84FB 00 00        Puntero_mov defw 0
134   84FD 00           Contador_db_mov db 0
135   84FE 00           Incrementa_puntero db 0
136   84FF 00           Repetimos_db db 0
137   8500
138   8500
139   8500              ; Variables de funcionamiento. [DRAW].
140   8500
141   8500 00           Columnas db 0
142   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8504
146   8504              ; 52 Bytes por entidad.
147   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8504              ;					         		---------;      ;---------
149   8504
150   8504
151   8504              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8504              ; Gestión de ENTIDADES.
153   8504
154   8504 00 00        Puntero_store_entidades defw 0
155   8506 00 00        Puntero_restore_entidades defw 0
156   8508 00 00        Indice_restore defw 0
157   850A 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
158   850B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850C              ;														; _ (Numero_de_malotes)="0".
162   850C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850E              ;														; _variable para almacenar lo posición del puntero_
164   850E              ; 														; _de pila, SP.
165   850E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8510              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8510 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8512              ;														; _el snapshot de los registros de la siguiente entidad.
169   8512              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8512
171   8512              ; Gestión de FRAMES.
172   8512
173   8512 00           Switch db 0
174   8513
175   8513              ; Variables de Raster y localización en pantalla.
176   8513
177   8513 00 FF        Temp_Raster defw $ff00
178   8515
179   8515              ; Rutina principal *************************************************************************************************************************************************************************
180   8515              ;
181   8515              ;	14/11/22
182   8515
183   8515 31 FF FF     START ld sp,$ffff
184   8518
185   8518 3E A0        	ld a,$a0
186   851A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851E F3           	DI
189   851F
190   851F 3E 01        	ld a,1
191   8521 D3 FE        	out ($fe),a
192   8523
193   8523 3E 07        	ld a,%00000111
194   8525 CD CD 8C     	call Cls
195   8528
196   8528              ;	call Pinta_FILAS
197   8528
198   8528 CD FF 86     	call Pulsa_ENTER
199   852B
200   852B 21 0A 85     	ld hl,Numero_de_entidades
201   852E 46           	ld b,(hl)
202   852F 04           	inc b
203   8530 05           	dec b
204   8531 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 4E 86     	call Inicia_punteros_de_entidades
211   8536
212   8536 C5           1 push bc  												; Guardo el contador de entidades.
213   8537 CD 7D 86      	call Inicia_Puntero_objeto
214   853A CD 56 87     	call Draw
215   853D CD A0 7F     	call Guarda_foto_registros
216   8540 CD 9A 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
217   8543 C1           	pop bc
218   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
219   8546
220   8546              ; 	Amadeus.
221   8546
222   8546 CD DB 86     3 call Restore_Amadeus
223   8549 CD 30 8A     	call Prepara_draw
224   854C CD 6A 89     	call calcula_CColumnass
225   854F CD A1 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
226   8552 CD F6 89     	call Define_rutina_de_impresion
227   8555 CD A0 7F     	call Guarda_foto_registros
228   8558
229   8558              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
230   8558
231   8558 CD 4E 86     	call Inicia_punteros_de_entidades
232   855B CD C9 86     	call Restore_Primera_entidad
233   855E 3A 0A 85     	ld a,(Numero_de_entidades)
234   8561 3C           	inc a
235   8562 32 0B 85     	ld (Numero_de_malotes),a
236   8565
237   8565 FB           2 ei
238   8566 18 FD        	jr 2B
239   8568
240   8568              ; -----------------------------------------------------------------------------------
241   8568
242   8568              Frame
243   8568
244   8568              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
245   8568              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
246   8568
247   8568 3E 07            ld a,7
248   856A D3 FE            out ($fe),a
249   856C CD 5A 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
250   856F 3E 01            ld a,1
251   8571 D3 FE            out ($fe),a
252   8573
253   8573              ; ----------------------------------------------------------------------
254   8573
255   8573 21 00 70     	ld hl,Album_de_fotos
256   8576 22 10 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
257   8579              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
258   8579 3A 0A 85         ld a,(Numero_de_entidades)
259   857C 47               ld b,a
260   857D C5           2 push bc
261   857E CD C7 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
262   8581 3A F7 84     	ld a,(Ctrl_0)
263   8584 CB 67        	bit 4,a
264   8586 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
265   8588 CD 15 86         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
266   858B 21 F7 84     1 ld hl,Ctrl_0
267   858E CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
268   8590 AF           	xor a
269   8591 32 F8 84     	ld (Obj_dibujado),a
270   8594 CD 9A 86     	call Store_Restore_entidades
271   8597 C1           	pop bc
272   8598 10 E3        	djnz 2B
273   859A
274   859A CD DB 86     	call Restore_Amadeus
275   859D CD E6 85     	call Mov_Amadeus
276   85A0 3A F7 84     	ld a,(Ctrl_0)
277   85A3 CB 67        	bit 4,a
278   85A5 28 06        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
279   85A7 CD 42 86      	call Repone_pintar
280   85AA CD 05 86     	call Guarda_foto_Amadeus
281   85AD
282   85AD 21 F7 84     3 ld hl,Ctrl_0
283   85B0 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
284   85B2 AF           	xor a
285   85B3 32 F8 84     	ld (Obj_dibujado),a
286   85B6 CD ED 86     	call Store_Amadeus
287   85B9
288   85B9              ; -----
289   85B9
290   85B9 CD 4E 86     	call Inicia_punteros_de_entidades
291   85BC CD C9 86     	call Restore_Primera_entidad
292   85BF CD 64 86     	call Calcula_numero_de_malotes
293   85C2 3E 00        	ld a,0
294   85C4 D3 FE        	out ($fe),a
295   85C6 C9           	ret
296   85C7
297   85C7              ; --------------------------------------------------------------------------------------------------------------
298   85C7              ;
299   85C7              ;	29/1/23
300   85C7
301   85C7              Mov_obj
302   85C7
303   85C7              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
304   85C7
305   85C7 AF           	xor a
306   85C8 32 F8 84     	ld (Obj_dibujado),a
307   85CB CD 1F 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
308   85CE              ;														; Obj_dibujado="0".
309   85CE              ; Movemos Entidades malignas.
310   85CE
311   85CE CD 2D 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
312   85D1 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
313   85D4 CB 67        	bit 4,a
314   85D6 C8           	ret z
315   85D7
316   85D7              ; ---------
317   85D7
318   85D7 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
319   85D9 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
320   85DC CD 1F 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
321   85DF CD 36 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
322   85E2 CD 05 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
323   85E5 C9           	ret													; _de la misma.
324   85E6
325   85E6              ; --------------------------------------------------------------------------------------------------------------
326   85E6              ;
327   85E6              ;	29/1/23
328   85E6
329   85E6              Mov_Amadeus
330   85E6
331   85E6 AF           	xor a
332   85E7 32 F8 84     	ld (Obj_dibujado),a
333   85EA CD 1F 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
334   85ED              ;														; Obj_dibujado="0".
335   85ED              ; Movemos Amadeus.
336   85ED
337   85ED CD 13 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
338   85F0 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
339   85F3 CB 67        	bit 4,a
340   85F5 C8           	ret z
341   85F6
342   85F6              ; ---------
343   85F6
344   85F6 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
345   85F8 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
346   85FB CD 1F 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
347   85FE CD 36 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
348   8601 CD 05 86     	call Guarda_foto_Amadeus 							; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
349   8604 C9           	ret													; _de la misma.
350   8605
351   8605              ; --------------------------------------------------------------------------------------------------------------
352   8605              ;
353   8605              ;	29/01/23
354   8605              ;
355   8605              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN").
356   8605
357   8605 CD 30 8A     Guarda_foto_Amadeus	call Prepara_draw
358   8608 CD 6A 89     	call calcula_CColumnass
359   860B CD A1 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
360   860E CD F6 89     	call Define_rutina_de_impresion
361   8611 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
362   8614 C9           	ret
363   8615
364   8615              ; --------------------------------------------------------------------------------------------------------------
365   8615
366   8615 CD 42 86     Borra_Pinta_obj call Repone_pintar
367   8618 CD 56 87     	call Draw
368   861B CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
369   861E C9           	ret
370   861F
371   861F              ; --------------------------------------------------------------------------------------------------------------
372   861F
373   861F 21 D0 84     Prepara_var_pintado_borrado	ld hl,Filas
374   8622 3A F8 84     	ld a,(Obj_dibujado)
375   8625 A7           	and a
376   8626 28 05        	jr z,1F
377   8628 11 EE 84     	ld de,Variables_de_pintado
378   862B 18 03        	jr 2F
379   862D 11 E5 84     1 ld de,Variables_de_borrado
380   8630 01 09 00     2 ld bc,9
381   8633 ED B0        	ldir
382   8635 C9           	ret
383   8636
384   8636 21 E5 84     Repone_borrar ld hl,Variables_de_borrado
385   8639 11 D0 84     	ld de,Filas
386   863C 01 09 00     	ld bc,9
387   863F ED B0        	ldir
388   8641 C9           	ret
389   8642
390   8642 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
391   8645 11 D0 84     	ld de,Filas
392   8648 01 09 00     	ld bc,9
393   864B ED B0        	ldir
394   864D C9           	ret
395   864E
396   864E              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
397   864E              ;	ld (Caja_de_BORRADO),hl
398   864E              ;	ret
399   864E
400   864E              ; *************************************************************************************************************************************************************
401   864E              ;
402   864E              ; 8/1/23
403   864E              ;
404   864E              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
405   864E              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
406   864E              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
407   864E
408   864E              ; Destruye HL y DE !!!!!
409   864E
410   864E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
411   8651 CD 77 86         call Extrae_address
412   8654 22 04 85         ld (Puntero_store_entidades),hl
413   8657 21 C2 83     	ld hl,Indice_de_entidades+2
414   865A 22 08 85     	ld (Indice_restore),hl
415   865D CD 77 86     	call Extrae_address
416   8660 22 06 85     	ld (Puntero_restore_entidades),hl
417   8663 C9               ret
418   8664
419   8664              ; -------------------------------------------------------------------------------------------------------------
420   8664              ;
421   8664              ; 7/1/23
422   8664              ;
423   8664
424   8664 2A 10 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
425   8667 AF           	xor a
426   8668 67           	ld h,a
427   8669 7D           	ld a,l
428   866A D6 06        1 sub 6
429   866C 28 03        	jr z,2F
430   866E 24           	inc h
431   866F 18 F9        	jr 1B
432   8671 24           2 inc h
433   8672 7C           	ld a,h
434   8673 32 0B 85     	ld (Numero_de_malotes),a
435   8676 C9           	ret
436   8677
437   8677              ; *************************************************************************************************************************************************************
438   8677              ;
439   8677              ; 20/10/22
440   8677              ;
441   8677              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
442   8677              ;
443   8677              ; Destruye el puntero y DE !!!!!
444   8677
445   8677 5E           Extrae_address ld e,(hl)
446   8678 23           	inc hl
447   8679 56           	ld d,(hl)
448   867A 2B           	dec hl
449   867B EB           	ex de,hl
450   867C C9           	ret
451   867D
452   867D              ; *************************************************************************************************************************************************************
453   867D              ;
454   867D              ;	21/9/22
455   867D              ;
456   867D              ;   Destruye HL y BC !!!!!,
457   867D
458   867D 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
459   8680 22 DC 84     	ld (Puntero_DESPLZ),hl
460   8683 CD 77 86     	call Extrae_address
461   8686 22 D4 84     	ld (Puntero_objeto),hl
462   8689
463   8689              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
464   8689
465   8689 21 10 83     	ld hl,Amadeus
466   868C ED 4B D4 84  	ld bc,(Puntero_objeto)
467   8690 B7 ED 42     	sub hl,bc
468   8693 C0           	ret nz
469   8694 21 F7 84     	ld hl,Ctrl_0
470   8697 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
471   8699 C9           	ret 												; _de nuestra nave en los extremos.
472   869A
473   869A              ; *************************************************************************************************************************************************************
474   869A              ;
475   869A              ;	8/1/23
476   869A              ;
477   869A              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
478   869A              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
479   869A
480   869A              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
481   869A              ;	_de la 2ª y 3ª entidad respectivamente.
482   869A
483   869A
484   869A
485   869A              Store_Restore_entidades
486   869A
487   869A E5           	push hl
488   869B D5           	push de
489   869C C5            	push bc
490   869D
491   869D              ;	STORE !!!!!
492   869D              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
493   869D
494   869D 21 D0 84     	ld hl,Filas
495   86A0 ED 5B 04 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
496   86A4 01 34 00     	ld bc,52
497   86A7 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
498   86A9
499   86A9              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
500   86A9
501   86A9 2A 06 85     	ld hl,(Puntero_restore_entidades)
502   86AC 22 04 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
503   86AF 11 D0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
504   86B2 01 34 00     	ld bc,52
505   86B5 ED B0        	ldir
506   86B7
507   86B7              ;	Incrementa RESTORE !!!!!
508   86B7
509   86B7 2A 08 85         ld hl,(Indice_restore)
510   86BA 23           	inc hl
511   86BB 23           	inc hl
512   86BC 22 08 85     	ld (Indice_restore),hl
513   86BF CD 77 86         call Extrae_address
514   86C2 22 06 85         ld (Puntero_restore_entidades),hl
515   86C5 C1           	pop bc
516   86C6 D1           	pop de
517   86C7 E1           	pop hl
518   86C8 C9           	ret
519   86C9
520   86C9              ; **************************************************************************************************
521   86C9              ;
522   86C9              ;	29/10/22
523   86C9              ;
524   86C9              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
525   86C9
526   86C9 E5           Restore_Primera_entidad push hl
527   86CA D5           	push de
528   86CB C5            	push bc
529   86CC 2A 04 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
530   86CF 11 D0 84     	ld de,Filas
531   86D2 01 34 00     	ld bc,52
532   86D5 ED B0        	ldir
533   86D7 C1           	pop bc
534   86D8 D1           	pop de
535   86D9 E1           	pop hl
536   86DA C9           	ret
537   86DB
538   86DB              ; **************************************************************************************************
539   86DB              ;
540   86DB              ;	25/01/23
541   86DB              ;
542   86DB              ;	Restore_Amadeus
543   86DB              ;
544   86DB              ;	Cargamos en DRAW los parámetros de Amadeus.
545   86DB              ;
546   86DB
547   86DB E5           Restore_Amadeus	push hl
548   86DC D5           	push de
549   86DD C5            	push bc
550   86DE 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
551   86E1 11 D0 84     	ld de,Filas
552   86E4 01 34 00     	ld bc,52
553   86E7 ED B0        	ldir
554   86E9 C1           	pop bc
555   86EA D1           	pop de
556   86EB E1           	pop hl
557   86EC C9           	ret
558   86ED
559   86ED              ; *************************************************************************************************************************************************************
560   86ED              ;
561   86ED              ;	29/01/23
562   86ED              ;
563   86ED              ;	Store_Amadeus
564   86ED              ;
565   86ED              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
566   86ED              ;
567   86ED
568   86ED E5           Store_Amadeus push hl
569   86EE D5           	push de
570   86EF C5            	push bc
571   86F0 21 D0 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
572   86F3 11 CC 83     	ld de,Amadeus_db
573   86F6 01 34 00     	ld bc,52
574   86F9 ED B0        	ldir
575   86FB C1           	pop bc
576   86FC D1           	pop de
577   86FD E1           	pop hl
578   86FE C9           	ret
579   86FF
580   86FF              ; **************************************************************************************************
581   86FF
582   86FF              ; Teclado.
583   86FF
584   86FF 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
585   8701 DB FE        	in a,($fe)
586   8703 E6 01        	and $01
587   8705 28 02        	jr z,1f
588   8707 18 F6        	jr Pulsa_ENTER
589   8709 C9           1 ret
590   870A
591   870A              ; **************************************************************************************************
592   870A              ;
593   870A              ; Temporización.
594   870A
595   870A              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
596   870A              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
597   870A              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
598   870A              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
599   870A
600   870A              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
601   870A              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
602   870A              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
603   870A
604   870A              ; A partir de $4f61 no hace falta DELAY.
605   870A
606   870A              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
607   870A
608   870A 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
609   870D 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
610   870E 78           	LD A,B
611   870F A7           	AND A
612   8710 20 FB        	JR NZ,wait
613   8712 C9           	RET
614   8713
615   8713              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
616   8713              ;
617   8713              ;	21/4/22
618   8713
619   8713              Movimiento_Amadeus
620   8713
621   8713 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
622   8715 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
623   8717 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
624   8719 CC 30 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
625   871C 3E F7        	ld a,$f7
626   871E DB FE        	in a,($fe)
627   8720 E6 01        	and $01
628   8722 C8           	ret z
629   8723 3E F7        	ld a,$f7
630   8725 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
631   8727 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
632   8729 CC 3D 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
633   872C C9               ret
634   872D
635   872D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
636   872D
637   872D              ; Pinta indicadores de FILAS. ------------------------------------------------------
638   872D
639   872D 21 10 40     Pinta_FILAS ld hl,$4010
640   8730              ;	ld b,9
641   8730              ;2 push hl
642   8730              ;	push bc
643   8730 06 BF        	ld b,$bf
644   8732 36 80        1 ld (hl),%10000000
645   8734 CD 3C 8A     	call NextScan
646   8737 10 F9        	djnz 1B
647   8739              ;	pop bc
648   8739              ;	pop hl
649   8739              ;	inc l
650   8739              ;	djnz 2B
651   8739 06 03        	ld b,3
652   873B 21 00 47         ld hl,$4700
653   873E CD 44 87     3 call Bucle_1
654   8741 10 FB            djnz 3B
655   8743 C9               ret
656   8744
657   8744 C5           Bucle_1 push bc
658   8745 E5                   push hl
659   8746 D1                   pop de
660   8747 13                   inc de
661   8748 01 FF 00             ld bc,255
662   874B 36 FF                ld (hl),255
663   874D ED B0                ldir
664   874F 23                   inc hl
665   8750 3E 07                ld a,7
666   8752 84                   add a,h
667   8753 67                   ld h,a
668   8754 C1                   pop bc
669   8755 C9                   ret
670   8756
671   8756              ; ---------------------------------------------------------------
672   8756
673   8756              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8756              ; ******************************************************************************************************************************************************************************************
  2+  8756              ;
  3+  8756              ; 01/23
  4+  8756              ;
  5+  8756              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8756
  7+  8756 CD 30 8A     Draw call Prepara_draw
  8+  8759 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  875A A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  875B 28 05        	jr z,2F
 11+  875D 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  8760 18 0C        	jr 1F
 13+  8762 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8765 22 D2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8768 CD F7 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  876B              ;													; _la esquina superior izquierda de la pantalla.
 17+  876B CD AF 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  876E 3A F7 84     1 ld a,(Ctrl_0)
 19+  8771 CB 6F        	bit 5,a
 20+  8773 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8775
 22+  8775 CD 8D 87     	call Comprueba_limite_horizontal
 23+  8778 CD 1D 88     	call Comprueba_limite_vertical
 24+  877B
 25+  877B              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  877B
 27+  877B CD 6A 89     3 call calcula_CColumnass
 28+  877E CD A1 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8781 CD F6 89     	call Define_rutina_de_impresion
 30+  8784
 31+  8784 3A F7 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8787 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8789 32 F7 84     	ld (Ctrl_0),a
 34+  878C
 35+  878C C9           	ret
 36+  878D
 37+  878D              ; *******************************************************************************************************************************************************************************************
 38+  878D              ;	21/01/23
 39+  878D              ;
 40+  878D              ; 	Comprueba_limite_horizontal.
 41+  878D              ;
 42+  878D              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  878D              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  878D              ;
 45+  878D              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  878D              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  878D              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  878D              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  878D
 50+  878D
 51+  878D
 52+  878D 3A F7 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  8790 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  8792 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  8794 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8796 32 F7 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8799 18 09            jr 6F
 58+  879B CB 5F        1 bit 3,a
 59+  879D 28 0A            jr z,2F
 60+  879F E6 F7            and $f7
 61+  87A1 32 F7 84         ld (Ctrl_0),a
 62+  87A4 CD F7 88     6 call Inicializacion
 63+  87A7 18 5B            jr 5F
 64+  87A9 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87AA
 66+  87AA              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87AA              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87AA
 69+  87AA EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87AB 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87AE CD 95 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87B1 67           	ld h,a
 73+  87B2 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87B3 CD 95 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  87B6 67           	ld h,a
 76+  87B7 A7           	and a
 77+  87B8 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  87BA 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  87BB 3A E0 84     	ld a,(Cuad_objeto)
 80+  87BE FE 02        	cp 2
 81+  87C0 38 1E        	jr c,3F
 82+  87C2 28 1C        	jr z,3F
 83+  87C4 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  87C5 28 23            jr z,7F
 85+  87C7 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  87C9 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  87CB E1           	pop hl
 88+  87CC
 89+  87CC              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  87CC              ; _para indicar con E="2" en caso necesario.
 91+  87CC
 92+  87CC E5               push hl
 93+  87CD C5               push bc
 94+  87CE CD 95 8C     	call calcula_tercio
 95+  87D1 FE 01        	cp 1
 96+  87D3 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  87D5 CD 05 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87D8 28 26            jr z,9F
 99+  87DA 38 24            jr c,9F
100+  87DC 1E 00        11 ld e,0
101+  87DE 18 22            jr 8F
102+  87E0 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  87E1 28 07        	jr z, 7F
104+  87E3 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  87E5 1E 00         	ld e,0
106+  87E7 E1           	pop hl
107+  87E8 18 04        	jr 4F
108+  87EA 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  87EC 18 15            jr 10F
110+  87EE
111+  87EE              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  87EE              ; _para indicar con E="2" en caso necesario.
113+  87EE
114+  87EE E5           4 push hl
115+  87EF C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  87F0 CD 95 8C     	call calcula_tercio
117+  87F3 FE 01        	cp 1
118+  87F5 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87F7 CD 05 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  87FA 28 04            jr z,9F
121+  87FC 30 02            jr nc,9F
122+  87FE 18 02        	jr 8F
123+  8800 1E 02        9 ld e,2
124+  8802 C1           8 pop bc
125+  8803 E1           10 pop hl
126+  8804 C9           5 ret
127+  8805
128+  8805              ; --------------------
129+  8805              ;
130+  8805              ; 25/08/22
131+  8805
132+  8805 CD 95 8C     Comprueba_centro call calcula_tercio
133+  8808 67               ld h,a
134+  8809 08           	ex af,af
135+  880A FE 02        	cp 2
136+  880C 38 07        	jr c,1F
137+  880E 28 05        	jr z,1F
138+  8810 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  8813 18 03        	jr 2F
140+  8815 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  8818 08           2 ex af,af
142+  8819 A7               and a
143+  881A ED 42            sbc hl,bc
144+  881C C9               ret
145+  881D
146+  881D              ; *********************************************************************************************************************************************************************************************
147+  881D              ;
148+  881D              ;   16/8/22
149+  881D              ;
150+  881D              ;	Comprueba_limite_vertical
151+  881D              ;
152+  881D              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  881D              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  881D              ;
155+  881D
156+  881D 2A D2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  8820 7D           	ld a,l
158+  8821 E6 1F        	and $1F
159+  8823 57           	ld d,a
160+  8824 3A 03 85     	ld a,(Limite_vertical)
161+  8827 BA           	cp d 											; Límite - Posición.
162+  8828 08           	ex af,af 										; Resultado de CP d en F'.
163+  8829 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  882C CB 47        	bit 0,a
165+  882E 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  8830
167+  8830              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  8830
169+  8830 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  8831 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  8833
172+  8833              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  8833              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  8833
175+  8833 3A D7 84         ld a,(Coordenada_X)
176+  8836 16 0F            ld d,Centro_izquierda
177+  8838 A7               and a
178+  8839 92               sub d 											 ; Posición - Centro_izquierda.
179+  883A 28 1E            jr z,3F
180+  883C 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  883E              ;                                                    ; _salimos sin modificar nada.
182+  883E 18 0E            jr 2F
183+  8840 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  8841 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  8843
186+  8843              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  8843              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  8843
189+  8843 3A D7 84         ld a,(Coordenada_X)
190+  8846 16 10            ld d,Centro_derecha
191+  8848 A7               and a
192+  8849 92               sub d
193+  884A 28 0E            jr z,3F
194+  884C 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  884E              ;                                                    ; _salimos sin modificar nada.
196+  884E CB 43        2 bit 0,e
197+  8850 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8852 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  8853 CD E7 88         call Modificaccionne
200+  8856 C1           	pop bc
201+  8857 CD F7 88         call Inicializacion
202+  885A C9           3 ret 				 								 ; Salimos de la rutina.
203+  885B
204+  885B              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  885B
206+  885B C5           4 push bc
207+  885C 01 D1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  885F 0A           	ld a,(bc)
209+  8860 3D           	dec a
210+  8861 47           	ld b,a 											 ; Columnas-1 en B.
211+  8862 7D           	ld a,l
212+  8863 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  8864 CB 47        	bit 0,a
214+  8866 28 03        	jr z,5F
215+  8868 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8869 18 2E        	jr 7F
217+  886B
218+  886B              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  886B
220+  886B 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  886C F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  886D 3A F7 84     	ld a,(Ctrl_0)
223+  8870 CB 4F        	bit 1,a
224+  8872 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8874 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8875
227+  8875              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8875
229+  8875 1C               inc e
230+  8876 1D               dec e
231+  8877 20 07            jr nz,12F
232+  8879 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  887A 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  887B 22 D2 84     	ld (Posicion_actual),hl
235+  887E 18 44        13 jr 9F
236+  8880 CB 43        12 bit 0,e
237+  8882 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  8884              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  8884 C1           	pop bc
240+  8885 18 D3        	jr 3B
241+  8887 80           14 add b
242+  8888 6F               ld l,a
243+  8889 22 D2 84     	ld (Posicion_actual),hl
244+  888C CD E7 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  888F 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  8891 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  8893 32 F7 84         ld (Ctrl_0),a
248+  8896 F1           	pop af
249+  8897 18 2B        	jr 9F
250+  8899
251+  8899              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8899
253+  8899 F5           7 push af
254+  889A 3A F7 84     	ld a,(Ctrl_0)
255+  889D CB 47        	bit 0,a
256+  889F 20 1D        	jr nz,8F
257+  88A1 F1           	pop af
258+  88A2
259+  88A2              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88A2
261+  88A2 1C           	inc e
262+  88A3 1D               dec e
263+  88A4 20 07            jr nz,10F
264+  88A6 90           	sub b
265+  88A7 6F               ld l,a
266+  88A8 22 D2 84     	ld (Posicion_actual),hl
267+  88AB 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88AD              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88AD CB 43        10 bit 0,e
270+  88AF 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88B1              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88B1 C1           	pop bc
273+  88B2 18 A6        	jr 3B
274+  88B4 90           16 sub b
275+  88B5 6F               ld l,a
276+  88B6 22 D2 84     	ld (Posicion_actual),hl
277+  88B9 CD E7 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  88BC 18 06            jr 9F
279+  88BE E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  88C0 32 F7 84         ld (Ctrl_0),a
281+  88C3 F1           	pop af
282+  88C4 C1           9 pop bc
283+  88C5 1E 00        	ld e,0
284+  88C7 CD F7 88         call Inicializacion
285+  88CA F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  88CB 08           	ex af,af
287+  88CC F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  88CD 18 8B            jr 3B
289+  88CF
290+  88CF              ; --------------------
291+  88CF
292+  88CF 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  88D1 CD 4B 8A     1 call PreviousScan
294+  88D4 10 FB            djnz 1B
295+  88D6 22 D2 84     	ld (Posicion_actual),hl
296+  88D9 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88DA C9           	ret
298+  88DB
299+  88DB              ; --------------------
300+  88DB
301+  88DB 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  88DD CD 3C 8A     1 call NextScan
303+  88E0 10 FB            djnz 1B
304+  88E2 22 D2 84     	ld (Posicion_actual),hl
305+  88E5 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  88E6 C9           	ret
307+  88E7
308+  88E7              ; --------------------
309+  88E7              ;
310+  88E7              ;	22/01/23
311+  88E7              ;
312+  88E7              ;	E="1". Hemos cambiado de cuadrante.
313+  88E7              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  88E7              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  88E7
316+  88E7
317+  88E7              Modificaccionne
318+  88E7
319+  88E7 3A E0 84     	ld a,(Cuad_objeto)
320+  88EA FE 02        	cp 2
321+  88EC CC CF 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  88EF DC CF 88         call c,Modifica_Pos_actual
323+  88F2 C8           	ret z
324+  88F3 CD DB 88         call Modifica_Pos_actual2
325+  88F6 C9               ret
326+  88F7
327+  88F7              ; *************************************************************************************************************************************************************************************************
328+  88F7              ;
329+  88F7              ;	13/8/22
330+  88F7              ;
331+  88F7              ;	Inicializacion
332+  88F7              ;
333+  88F7              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88F7              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88F7              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88F7              ;
337+  88F7              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88F7              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88F7              ;	_ desaparece/aparece.
340+  88F7
341+  88F7              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88F7              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88F7              ;
344+  88F7              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88F7              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88F7              ; 		   [E] ="0"
347+  88F7
348+  88F7              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88F7
350+  88F7 CD 95 8C     Inicializacion call calcula_tercio
351+  88FA 28 36        	jr z,primit
352+  88FC E6 02        	and 2
353+  88FE 20 07        	jr nz,segmit
354+  8900 7D           	ld a,l
355+  8901 FE 7F        	cp $7f
356+  8903 38 2D        	jr c,primit
357+  8905 28 2B        	jr z,primit
358+  8907 CD 64 89     segmit call column
359+  890A 38 13        	jr c,tercuad
360+  890C 3E 04        cuarcuad ld a,4
361+  890E 32 E0 84     	ld (Cuad_objeto),a
362+  8911 21 20 48     	ld hl,$4820
363+  8914 22 01 85     	ld (Limite_horizontal),hl
364+  8917 21 03 85     	ld hl,Limite_vertical
365+  891A 36 0D        	ld (hl),$0d
366+  891C 08           	ex af,af
367+  891D 18 3C        	jr 1F
368+  891F              tercuad
369+  891F              ;	call Fija_punteros
370+  891F 3E 03        	ld a,3
371+  8921 32 E0 84     	ld (Cuad_objeto),a
372+  8924 21 20 48     	ld hl,$4820
373+  8927 22 01 85     	ld (Limite_horizontal),hl
374+  892A 21 03 85     	ld hl,Limite_vertical
375+  892D 36 12        	ld (hl),$12
376+  892F 08           	ex af,af
377+  8930 18 29        	jr 1F
378+  8932 CD 64 89     primit call column
379+  8935 38 13        	jr c, primcuad
380+  8937              segcuad
381+  8937              ;	call Fija_punteros
382+  8937 3E 02        	ld a,2
383+  8939 32 E0 84     	ld (Cuad_objeto),a
384+  893C 21 C0 4F     	ld hl,$4fc0
385+  893F 22 01 85     	ld (Limite_horizontal),hl
386+  8942 21 03 85     	ld hl,Limite_vertical
387+  8945 36 0D        	ld (hl),$0d
388+  8947 08           	ex af,af
389+  8948 18 11        	jr 1F
390+  894A              primcuad
391+  894A              ;	call Fija_punteros
392+  894A 3E 01        	ld a,1
393+  894C 32 E0 84     	ld (Cuad_objeto),a
394+  894F 21 C0 4F     	ld hl,$4fc0
395+  8952 22 01 85     	ld (Limite_horizontal),hl
396+  8955 21 03 85     	ld hl,Limite_vertical
397+  8958 36 12        	ld (hl),$12
398+  895A 08           	ex af,af
399+  895B CD A5 8F     1 call Genera_coordenadas
400+  895E 21 F7 84     	ld hl,Ctrl_0
401+  8961 CB EE        	set 5,(hl)
402+  8963 C9           	ret
403+  8964
404+  8964              ; ------------------------------------------------------------------------------------------------------------------
405+  8964
406+  8964              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  8964              ;
408+  8964              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  8964
410+  8964 7D           column ld a,l
411+  8965 E6 1F        	and $1f
412+  8967 FE 10         	cp $10
413+  8969 C9            	ret
414+  896A
415+  896A              ; --------------------------------------------------------------------------------------------------------------------
416+  896A              ;
417+  896A              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  896A              ;
419+  896A              ; 14/12/22
420+  896A              ;
421+  896A              ;	Modifica: A y BC.
422+  896A
423+  896A 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  896D E6 01        	and 1
425+  896F 28 17        	jr z,1F
426+  8971
427+  8971              ; Nos encontramos en la parte izquierda de la pantalla
428+  8971
429+  8971 3A D7 84     	ld a,(Coordenada_X)
430+  8974 47           	ld b,a
431+  8975 04           	inc b											; (Coordenada_X)+1 en B.
432+  8976 79           	ld a,c
433+  8977 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8978 38 08        	jr c,2F
435+  897A 47           	ld b,a
436+  897B 79           	ld a,c
437+  897C 90           	sub b
438+  897D 32 00 85     	ld (Columnas),a
439+  8980 18 1B        	jr 4F
440+  8982 79           2 ld a,c
441+  8983 32 00 85     	ld (Columnas),a
442+  8986 18 15        	jr 4F
443+  8988
444+  8988              ; Nos encontramos en la parte derecha de la pantalla.
445+  8988
446+  8988 3A D7 84     1 ld a,(Coordenada_X)
447+  898B 81           	add c
448+  898C 3D           	dec a
449+  898D D6 1F        	sub $1f
450+  898F 38 08        	jr c,3F
451+  8991 47           	ld b,a
452+  8992 79           	ld a,c
453+  8993 90           	sub b
454+  8994 32 00 85     	ld (Columnas),a
455+  8997 18 04        	jr 4F
456+  8999 79           3 ld a,c
457+  899A 32 00 85     	ld (Columnas),a
458+  899D D9           4 exx
459+  899E 4F           	ld c,a
460+  899F D9           	exx
461+  89A0 C9            ret
462+  89A1
463+  89A1              ; --------------------------------------------------------------------------------------------------------------------
464+  89A1              ;
465+  89A1              ; 7/1/23
466+  89A1              ;
467+  89A1              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89A1              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89A1              ;
470+  89A1              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89A1              ;	DESTRUYE: HL,B Y A.
472+  89A1
473+  89A1 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89A4 FE 02        	cp 2
475+  89A6 38 18        	jr c,1F
476+  89A8 28 16        	jr z,1F
477+  89AA E6 01        	and 1
478+  89AC 28 0D        	jr z,3F
479+  89AE
480+  89AE              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89AE
482+  89AE CD EA 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89B1
484+  89B1 7D           9 ld a,l
485+  89B2 E6 1F        	and $1f
486+  89B4 28 2A        	jr z,7F
487+  89B6 2B           	dec hl
488+  89B7 10 F8        	djnz 9B
489+  89B9 18 25        	jr 7F
490+  89BB
491+  89BB              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  89BB
493+  89BB 2A D2 84     3 ld hl,(Posicion_actual)
494+  89BE 18 20        	jr 7F
495+  89C0
496+  89C0 28 14        1 jr z,2F
497+  89C2
498+  89C2              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  89C2
500+  89C2 CD EA 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  89C5 7D           4 ld a,l
502+  89C6 E6 1F        	and $1f
503+  89C8 28 03        	jr z,6F
504+  89CA 2B           	dec hl
505+  89CB 10 F8        	djnz 4B
506+  89CD 06 0F        6 ld b,15
507+  89CF CD 4B 8A     5 call PreviousScan
508+  89D2 10 FB        	djnz 5B
509+  89D4 18 0A        	jr 7F
510+  89D6
511+  89D6              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89D6
513+  89D6 CD EA 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89D9 06 0F        	ld b,15
515+  89DB CD 4B 8A     8 call PreviousScan
516+  89DE 10 FB        	djnz 8B
517+  89E0
518+  89E0 E5           7 push hl
519+  89E1 DD E1        	pop ix
520+  89E3
521+  89E3 2A D4 84     	ld hl,(Puntero_objeto)
522+  89E6 E5           	push hl
523+  89E7 FD E1        	pop iy
524+  89E9
525+  89E9 C9           	ret
526+  89EA
527+  89EA              ; --------------------------------------------------------------------------------------------------------------------
528+  89EA              ;
529+  89EA              ;	2/1/23
530+  89EA              ;
531+  89EA              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  89EA              ;
533+  89EA              ;	Tras esta rutina tenemos:
534+  89EA              ;
535+  89EA              ;	OUTPUT: HL contiene (Posicion_actual).
536+  89EA              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  89EA              ;
538+  89EA              ;	DESTRUYE!!!!! HL,B y A.
539+  89EA
540+  89EA 2A D2 84     Operandos ld hl,(Posicion_actual)
541+  89ED 3A 00 85     	ld a,(Columnas)
542+  89F0 3D           	dec a
543+  89F1 20 01        	jr nz,1F
544+  89F3 3C           	inc a
545+  89F4 47           1 ld b,a
546+  89F5 C9           	ret
547+  89F6
548+  89F6              ; --------------------------------------------------------------------------------------------------------------------
549+  89F6              ;
550+  89F6              ;	3/1/23
551+  89F6              ;
552+  89F6              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89F6              ;
554+  89F6              ;	Destruye: A,B,HL y DE.
555+  89F6
556+  89F6              Define_rutina_de_impresion
557+  89F6
558+  89F6 3A D1 84     	ld a,(Columns)
559+  89F9 47           	ld b,a
560+  89FA 3A 00 85     	ld a,(Columnas)
561+  89FD B8           	cp b
562+  89FE 20 0D        	jr nz,2f
563+  8A00
564+  8A00              ;	La entidad se imprime entera.
565+  8A00
566+  8A00 21 92 8A     	ld hl, Indice_entidades_completas
567+  8A03 E6 01        	and 1
568+  8A05 28 02        	jr z,1F
569+  8A07
570+  8A07 23           	inc hl
571+  8A08 23           	inc hl
572+  8A09
573+  8A09 CD 77 86     1 call Extrae_address
574+  8A0C C9           	ret		;	ret
575+  8A0D
576+  8A0D              ;	La entidad no se imprime entera en pantalla.
577+  8A0D
578+  8A0D 3A E0 84     2 ld a,(Cuad_objeto)
579+  8A10 E6 01        	and 1
580+  8A12 28 17        	jr z,3F
581+  8A14
582+  8A14              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A14
584+  8A14 21 96 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A17 3A D1 84     4 ld a,(Columns)
586+  8A1A E6 01        	and 1
587+  8A1C 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A1E
589+  8A1E 23           	inc hl
590+  8A1F 23           	inc hl
591+  8A20
592+  8A20 3A 00 85     	ld a,(Columnas)
593+  8A23 E6 01        	and 1
594+  8A25 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A27
596+  8A27 23           	inc hl
597+  8A28 23           	inc hl
598+  8A29
599+  8A29 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A2B
601+  8A2B 21 9C 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A2E 18 E7        	jr 4B
603+  8A30
604+  8A30              ; --------------------------------------------------------------------------------------------------------------------
605+  8A30              ;
606+  8A30              ;	Prepara_draw
607+  8A30              ;
608+  8A30              ;	Es una rutina de carga.
609+  8A30              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A30              ;
611+  8A30              ;	FUNCIONAMIENTO:
612+  8A30              ;
613+  8A30              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A30              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A30              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A30              ;
617+  8A30              ;	DESTRUYE:
618+  8A30              ;
619+  8A30              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A30
621+  8A30 21 D0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A33 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A34 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A35 4E           	ld c,(hl)
625+  8A36 2A D2 84     	ld hl,(Posicion_actual)
626+  8A39 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A3B C9           	ret
628+  8A3C
629+  8A3C              ;----------------------------------------------------------------------------------------------------------------
630+  8A3C              ;
631+  8A3C              ;	5/08/22
632+  8A3C              ;
633+  8A3C              ;   NextScan.
634+  8A3C              ;
635+  8A3C              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A3C              ;
637+  8A3C              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A3C              ;
639+  8A3C              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A3C              ;
641+  8A3C              ;       DESTRUIDOS: AF y HL !!!
642+  8A3C              ;
643+  8A3C              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A3C              ;
645+  8A3C
646+  8A3C 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A3D 7C               ld a,h
648+  8A3E E6 07            and 7
649+  8A40 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A41
651+  8A41 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A42 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A44 6F               ld l,a
654+  8A45 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A46
656+  8A46 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A47 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A49 67               ld h,a
659+  8A4A C9               ret
660+  8A4B
661+  8A4B              ;----------------------------------------------------------------------------------------------------------------
662+  8A4B              ;
663+  8A4B              ;	5/08/22
664+  8A4B              ;
665+  8A4B              ;   PreviousScan.
666+  8A4B              ;
667+  8A4B              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A4B              ;
669+  8A4B              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A4B              ;
671+  8A4B              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A4B              ;
673+  8A4B              ;       DESTRUIDOS: AF y HL !!!
674+  8A4B              ;
675+  8A4B              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A4B              ;
677+  8A4B
678+  8A4B 7C           PreviousScan ld a,h
679+  8A4C 25               dec h               ; Dec H.
680+  8A4D E6 07            and 7
681+  8A4F C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A50
683+  8A50 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A51 D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A53 6F               ld l,a
686+  8A54 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A55
688+  8A55 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A56 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A58 67               ld h,a
691+  8A59 C9               ret
692+  8A5A
693+  8A5A              ; -----------------------------------------------------------------------------------
694+  8A5A              ;
695+  8A5A              ;	15/1/23
696+  8A5A
697+  8A5A ED 73 0C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  8A5E 31 00 70     	ld sp,Album_de_fotos
699+  8A61
700+  8A61 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  8A63 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  8A64 D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  8A65
704+  8A65 ED 73 0E 85  	ld (Stack_2),sp
705+  8A69 ED 7B 0C 85  	ld sp,(Stack)
706+  8A6D
707+  8A6D              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  8A6D
709+  8A6D 3E CD        	ld a,$cd
710+  8A6F 32 77 8A     	ld (Imprime),a
711+  8A72 EB           	ex de,hl
712+  8A73 22 78 8A     	ld (Imprime+1),hl
713+  8A76 EB           	ex de,hl
714+  8A77
715+  8A77              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A77
717+  8A77 00 00 00     Imprime db 0,0,0
718+  8A7A
719+  8A7A ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A7E
721+  8A7E 3A 0B 85     	ld a,(Numero_de_malotes)
722+  8A81 3D           	dec a
723+  8A82 28 09        	jr z,1F
724+  8A84 32 0B 85      	ld (Numero_de_malotes),a
725+  8A87 ED 7B 0E 85  	ld sp,(Stack_2)
726+  8A8B 18 D4        	jr 2B
727+  8A8D
728+  8A8D AF           1 xor a
729+  8A8E 32 0E 85     	ld (Stack_2),a
730+  8A91 C9           	ret
731+  8A92
732+  8A92
# file closed: Draw_XOR.asm
674   8A92              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A92              ;   índices de Rutinas de impresión.
  2+  8A92
  3+  8A92 A2 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A94 CF 8A            defw Pinta_Amadeus_3x2
  5+  8A96
  6+  8A96 25 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A98 C5 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A9A 79 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A9C
 10+  8A9C 4F 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A9E 53 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AA0 07 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AA2
 14+  8AA2
 15+  8AA2              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AA2              ;
 17+  8AA2              ;   12/12/22
 18+  8AA2              ;
 19+  8AA2              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AA2              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AA2              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AA2              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AA2              ;
 24+  8AA2              ;   Modifica: DE y HL.
 25+  8AA2
 26+  8AA2 ED 73 0C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AA6 FD F9        	ld sp,iy
 28+  8AA8 06 10            ld b,16
 29+  8AAA D1           1 pop de
 30+  8AAB 7B               ld a,e
 31+  8AAC AE               xor (hl)
 32+  8AAD 77           	ld (hl),a
 33+  8AAE 23           	inc hl
 34+  8AAF 7A               ld a,d
 35+  8AB0 AE               xor (hl)
 36+  8AB1 77           	ld (hl),a
 37+  8AB2 2B           	dec hl
 38+  8AB3 24           	inc h
 39+  8AB4 7C               ld a,h
 40+  8AB5 E6 07            and 7
 41+  8AB7 20 0A            jr nz,2F
 42+  8AB9 7D               ld a,l
 43+  8ABA C6 20            add a,$20
 44+  8ABC 6F               ld l,a
 45+  8ABD 38 04            jr c,2F
 46+  8ABF 7C               ld a,h
 47+  8AC0 D6 08            sub 8
 48+  8AC2 67               ld h,a
 49+  8AC3 7C           2 ld a,h
 50+  8AC4 FE 58            cp $58
 51+  8AC6 28 02            jr z,3F
 52+  8AC8 10 E0            djnz 1B
 53+  8ACA ED 7B 0C 85  3 ld sp,(Stack)
 54+  8ACE C9           	ret
 55+  8ACF
 56+  8ACF ED 73 0C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8AD3 FD F9        	ld sp,iy
 58+  8AD5 06 08            ld b,8
 59+  8AD7 D1           1 pop de
 60+  8AD8 7B               ld a,e
 61+  8AD9 AE               xor (hl)
 62+  8ADA 77           	ld (hl),a
 63+  8ADB 23           	inc hl
 64+  8ADC 7A               ld a,d
 65+  8ADD AE               xor (hl)
 66+  8ADE 77           	ld (hl),a
 67+  8ADF 23           	inc hl
 68+  8AE0 D1           	pop de
 69+  8AE1 7B               ld a,e
 70+  8AE2 AE               xor (hl)
 71+  8AE3 77           	ld (hl),a
 72+  8AE4 2B           	dec hl
 73+  8AE5 2B           	dec hl
 74+  8AE6 24           	inc h
 75+  8AE7 7C               ld a,h
 76+  8AE8 E6 07            and 7
 77+  8AEA 20 0A            jr nz,2F
 78+  8AEC 7D               ld a,l
 79+  8AED C6 20            add a,$20
 80+  8AEF 6F               ld l,a
 81+  8AF0 38 04            jr c,2F
 82+  8AF2 7C               ld a,h
 83+  8AF3 D6 08            sub 8
 84+  8AF5 67               ld h,a
 85+  8AF6 7C           2 ld a,h
 86+  8AF7 FE 58            cp $58
 87+  8AF9 28 25            jr z,4F
 88+  8AFB 7A               ld a,d
 89+  8AFC AE               xor (hl)
 90+  8AFD 77               ld (hl),a
 91+  8AFE D1           	pop de
 92+  8AFF 23           	inc hl
 93+  8B00 7B               ld a,e
 94+  8B01 AE               xor (hl)
 95+  8B02 77           	ld (hl),a
 96+  8B03 23           	inc hl
 97+  8B04 7A               ld a,d
 98+  8B05 AE               xor (hl)
 99+  8B06 77           	ld (hl),a
100+  8B07 2B           	dec hl
101+  8B08 2B           	dec hl
102+  8B09 24           	inc h
103+  8B0A 7C               ld a,h
104+  8B0B E6 07            and 7
105+  8B0D 20 0A            jr nz,3F
106+  8B0F 7D               ld a,l
107+  8B10 C6 20            add a,$20
108+  8B12 6F               ld l,a
109+  8B13 38 04            jr c,3F
110+  8B15 7C               ld a,h
111+  8B16 D6 08            sub 8
112+  8B18 67               ld h,a
113+  8B19 7C           3 ld a,h
114+  8B1A FE 58            cp $58
115+  8B1C 28 02            jr z,4F
116+  8B1E 10 B7            djnz 1B
117+  8B20 ED 7B 0C 85  4 ld sp,(Stack)
118+  8B24 C9           	ret
119+  8B25
120+  8B25              ; ---------------------------------------------------
121+  8B25
122+  8B25 ED 73 0C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B29 FD F9        	ld sp,iy
124+  8B2B 06 10            ld b,16
125+  8B2D D1           1 pop de
126+  8B2E 7A           	ld a,d
127+  8B2F AE           	xor (hl)
128+  8B30 77           	ld (hl),a
129+  8B31 24           	inc h
130+  8B32 7C               ld a,h
131+  8B33 E6 07            and 7
132+  8B35 20 0C            jr nz,2F
133+  8B37 7D               ld a,l
134+  8B38 C6 20            add a,$20
135+  8B3A 6F               ld l,a
136+  8B3B 38 06            jr c,2F
137+  8B3D 7C               ld a,h
138+  8B3E D6 08            sub 8
139+  8B40 67               ld h,a
140+  8B41 18 00            jr 2F
141+  8B43 7C           2 ld a,h
142+  8B44 FE 58            cp $58
143+  8B46 28 02            jr z,3F
144+  8B48 10 E3            djnz 1B
145+  8B4A ED 7B 0C 85  3 ld sp,(Stack)
146+  8B4E C9           	ret
147+  8B4F
148+  8B4F ED 73 0C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B53 FD F9        	ld sp,iy
150+  8B55 06 10            ld b,16
151+  8B57 D1           1 pop de
152+  8B58 7B           	ld a,e
153+  8B59 AE           	xor (hl)
154+  8B5A 77           	ld (hl),a
155+  8B5B 24           	inc h
156+  8B5C 7C               ld a,h
157+  8B5D E6 07            and 7
158+  8B5F 20 0C            jr nz,2F
159+  8B61 7D               ld a,l
160+  8B62 C6 20            add a,$20
161+  8B64 6F               ld l,a
162+  8B65 38 06            jr c,2F
163+  8B67 7C               ld a,h
164+  8B68 D6 08            sub 8
165+  8B6A 67               ld h,a
166+  8B6B 18 00            jr 2F
167+  8B6D 7C           2 ld a,h
168+  8B6E FE 58            cp $58
169+  8B70 28 02            jr z,3F
170+  8B72 10 E3            djnz 1B
171+  8B74 ED 7B 0C 85  3 ld sp,(Stack)
172+  8B78 C9           	ret
173+  8B79
174+  8B79              ; ---------------------------------------------------
175+  8B79
176+  8B79 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B7D FD F9        	ld sp,iy
178+  8B7F 06 08            ld b,8
179+  8B81 D1           1 pop de
180+  8B82 7A           	ld a,d
181+  8B83 AE           	xor (hl)
182+  8B84 77           	ld (hl),a
183+  8B85 23           	inc hl
184+  8B86 D1           	pop de
185+  8B87 7B           	ld a,e
186+  8B88 AE           	xor (hl)
187+  8B89 77           	ld (hl),a
188+  8B8A 2B           	dec hl
189+  8B8B 24            	inc h
190+  8B8C 7C               ld a,h
191+  8B8D E6 07            and 7
192+  8B8F 20 0A            jr nz,2F
193+  8B91 7D               ld a,l
194+  8B92 C6 20            add a,$20
195+  8B94 6F               ld l,a
196+  8B95 38 04            jr c,2F
197+  8B97 7C               ld a,h
198+  8B98 D6 08            sub 8
199+  8B9A 67               ld h,a
200+  8B9B 7C           2 ld a,h
201+  8B9C FE 58            cp $58
202+  8B9E 28 20            jr z,4F
203+  8BA0 D1               pop de
204+  8BA1 7B           	ld a,e
205+  8BA2 AE           	xor (hl)
206+  8BA3 77           	ld (hl),a
207+  8BA4 23           	inc hl
208+  8BA5 7A           	ld a,d
209+  8BA6 AE           	xor (hl)
210+  8BA7 77           	ld (hl),a
211+  8BA8 2B           	dec hl
212+  8BA9 24           	inc h
213+  8BAA 7C               ld a,h
214+  8BAB E6 07            and 7
215+  8BAD 20 0A            jr nz,3F
216+  8BAF 7D               ld a,l
217+  8BB0 C6 20            add a,$20
218+  8BB2 6F               ld l,a
219+  8BB3 38 04            jr c,3F
220+  8BB5 7C               ld a,h
221+  8BB6 D6 08            sub 8
222+  8BB8 67               ld h,a
223+  8BB9 7C           3 ld a,h
224+  8BBA FE 58            cp $58
225+  8BBC 28 02            jr z,4F
226+  8BBE 10 C1            djnz 1B
227+  8BC0 ED 7B 0C 85  4 ld sp,(Stack)
228+  8BC4 C9           	ret
229+  8BC5
230+  8BC5 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8BC9 FD F9        	ld sp,iy
232+  8BCB 06 08            ld b,8
233+  8BCD D1           1 pop de
234+  8BCE D1           	pop de
235+  8BCF 7B           	ld a,e
236+  8BD0 AE           	xor (hl)
237+  8BD1 77           	ld (hl),a
238+  8BD2 24            	inc h
239+  8BD3 7C               ld a,h
240+  8BD4 E6 07            and 7
241+  8BD6 20 0A            jr nz,2F
242+  8BD8 7D               ld a,l
243+  8BD9 C6 20            add a,$20
244+  8BDB 6F               ld l,a
245+  8BDC 38 04            jr c,2F
246+  8BDE 7C               ld a,h
247+  8BDF D6 08            sub 8
248+  8BE1 67               ld h,a
249+  8BE2 7C           2 ld a,h
250+  8BE3 FE 58            cp $58
251+  8BE5 28 1B            jr z,4F
252+  8BE7 D1               pop de
253+  8BE8 7A           	ld a,d
254+  8BE9 AE           	xor (hl)
255+  8BEA 77           	ld (hl),a
256+  8BEB 24           	inc h
257+  8BEC 7C               ld a,h
258+  8BED E6 07            and 7
259+  8BEF 20 0A            jr nz,3F
260+  8BF1 7D               ld a,l
261+  8BF2 C6 20            add a,$20
262+  8BF4 6F               ld l,a
263+  8BF5 38 04            jr c,3F
264+  8BF7 7C               ld a,h
265+  8BF8 D6 08            sub 8
266+  8BFA 67               ld h,a
267+  8BFB 7C           3 ld a,h
268+  8BFC FE 58            cp $58
269+  8BFE 28 02            jr z,4F
270+  8C00 10 CB            djnz 1B
271+  8C02 ED 7B 0C 85  4 ld sp,(Stack)
272+  8C06 C9           	ret
273+  8C07
274+  8C07 ED 73 0C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C0B FD F9        	ld sp,iy
276+  8C0D 06 08            ld b,8
277+  8C0F D1           1 pop de
278+  8C10 7B           	ld a,e
279+  8C11 AE           	xor (hl)
280+  8C12 77           	ld (hl),a
281+  8C13 23           	inc hl
282+  8C14 7A           	ld a,d
283+  8C15 AE           	xor (hl)
284+  8C16 77           	ld (hl),a
285+  8C17 2B           	dec hl
286+  8C18 24             	inc h
287+  8C19 7C               ld a,h
288+  8C1A E6 07            and 7
289+  8C1C 20 0A            jr nz,2F
290+  8C1E 7D               ld a,l
291+  8C1F C6 20            add a,$20
292+  8C21 6F               ld l,a
293+  8C22 38 04            jr c,2F
294+  8C24 7C               ld a,h
295+  8C25 D6 08            sub 8
296+  8C27 67               ld h,a
297+  8C28 7C           2 ld a,h
298+  8C29 FE 58            cp $58
299+  8C2B 28 21            jr z,4F
300+  8C2D D1               pop de
301+  8C2E 7A           	ld a,d
302+  8C2F AE           	xor (hl)
303+  8C30 77           	ld (hl),a
304+  8C31 23           	inc hl
305+  8C32 D1               pop de
306+  8C33 7B           	ld a,e
307+  8C34 AE           	xor (hl)
308+  8C35 77           	ld (hl),a
309+  8C36 2B           	dec hl
310+  8C37 24           	inc h
311+  8C38 7C               ld a,h
312+  8C39 E6 07            and 7
313+  8C3B 20 0A            jr nz,3F
314+  8C3D 7D               ld a,l
315+  8C3E C6 20            add a,$20
316+  8C40 6F               ld l,a
317+  8C41 38 04            jr c,3F
318+  8C43 7C               ld a,h
319+  8C44 D6 08            sub 8
320+  8C46 67               ld h,a
321+  8C47 7C           3 ld a,h
322+  8C48 FE 58            cp $58
323+  8C4A 28 02            jr z,4F
324+  8C4C 10 C1            djnz 1B
325+  8C4E ED 7B 0C 85  4 ld sp,(Stack)
326+  8C52 C9           	ret
327+  8C53
328+  8C53 ED 73 0C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C57 FD F9        	ld sp,iy
330+  8C59 06 08            ld b,8
331+  8C5B D1           1 pop de
332+  8C5C 7B           	ld a,e
333+  8C5D AE           	xor (hl)
334+  8C5E 77           	ld (hl),a
335+  8C5F 24            	inc h
336+  8C60 7C               ld a,h
337+  8C61 E6 07            and 7
338+  8C63 20 0A            jr nz,2F
339+  8C65 7D               ld a,l
340+  8C66 C6 20            add a,$20
341+  8C68 6F               ld l,a
342+  8C69 38 04            jr c,2F
343+  8C6B 7C               ld a,h
344+  8C6C D6 08            sub 8
345+  8C6E 67               ld h,a
346+  8C6F 7C           2 ld a,h
347+  8C70 FE 58            cp $58
348+  8C72 28 1C            jr z,4F
349+  8C74 D1               pop de
350+  8C75 7A           	ld a,d
351+  8C76 AE           	xor (hl)
352+  8C77 77           	ld (hl),a
353+  8C78 24           	inc h
354+  8C79 7C               ld a,h
355+  8C7A E6 07            and 7
356+  8C7C 20 0A            jr nz,3F
357+  8C7E 7D               ld a,l
358+  8C7F C6 20            add a,$20
359+  8C81 6F               ld l,a
360+  8C82 38 04            jr c,3F
361+  8C84 7C               ld a,h
362+  8C85 D6 08            sub 8
363+  8C87 67               ld h,a
364+  8C88 7C           3 ld a,h
365+  8C89 FE 58            cp $58
366+  8C8B 28 03            jr z,4F
367+  8C8D D1               pop de
368+  8C8E 10 CB            djnz 1B
369+  8C90 ED 7B 0C 85  4 ld sp,(Stack)
370+  8C94 C9           	ret
371+  8C95
372+  8C95              ; ---------------------------------------------------
373+  8C95
# file closed: Rutinas_de_impresion_sprites.asm
675   8C95              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C95              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C95              ;
  3+  8C95              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C95              ;
  5+  8C95              ; *****************************************************************************************************************************************************************************************
  6+  8C95              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C95
  8+  8C95 7C           calcula_tercio ld a,h
  9+  8C96 E6 18        	and $18
 10+  8C98 CB 2F        	sra a
 11+  8C9A CB 2F        	sra a
 12+  8C9C CB 2F        	sra a
 13+  8C9E C9           	ret
 14+  8C9F
# file closed: calcula_tercio.asm
676   8C9F              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C9F              ; -----------------------------------------------------------------------------------------
  2+  8C9F              ;
  3+  8C9F              ;   04/11/22
  4+  8C9F              ;
  5+  8C9F              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C9F              ;
  7+  8C9F              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C9F              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C9F              ;
 10+  8C9F              ;   DESTRUYE: HL y A. !!!!!
 11+  8C9F
 12+  8C9F CD 95 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CA2 26 58            ld h,$58
 14+  8CA4 84               add h
 15+  8CA5 67               ld h,a
 16+  8CA6 C9               ret
# file closed: Calcula_direccion_atributos.asm
677   8CA7              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CA7              ; ********** **********
  2+  8CA7              ;
  3+  8CA7              ;   5/11/22
  4+  8CA7              ;
  5+  8CA7              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CA7              ;
  7+  8CA7              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CA7              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CA7              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CA7              ;
 11+  8CA7              ;   NO DESTROYERSSSS !!!!!
 12+  8CA7
 13+  8CA7 E5           Define_atributos push hl
 14+  8CA8 C5           	push bc
 15+  8CA9 D5           	push de
 16+  8CAA
 17+  8CAA CD 9F 8C     	call Calcula_direccion_atributos
 18+  8CAD
 19+  8CAD D9               exx
 20+  8CAE E5               push hl
 21+  8CAF D9               exx
 22+  8CB0 D1               pop de
 23+  8CB1
 24+  8CB1 42               ld b,d
 25+  8CB2 7B               ld a,e 									; (Attr) en A.
 26+  8CB3
 27+  8CB3 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8CB4 E5            	push hl 								; Guardo dirección de attr.
 29+  8CB5
 30+  8CB5              ; -----
 31+  8CB5
 32+  8CB5 77           2 ld (hl),a
 33+  8CB6 0D           	dec c 									; Decremento (Columnas).
 34+  8CB7 28 03        	jr z,1F
 35+  8CB9 23           	inc hl
 36+  8CBA 18 F9        	jr 2B
 37+  8CBC
 38+  8CBC E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8CBD C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8CBE
 41+  8CBE 05           	dec b									; Decremento (Filas).
 42+  8CBF 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8CC1
 44+  8CC1 11 20 00     	ld de,32
 45+  8CC4 A7           	and a
 46+  8CC5 ED 5A        	adc hl,de
 47+  8CC7 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8CC9
 49+  8CC9 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8CCA C1           	pop bc
 51+  8CCB E1           	pop hl
 52+  8CCC
 53+  8CCC C9           	ret
 54+  8CCD
# file closed: Define_atributos.asm
678   8CCD              	include "Cls.asm"
# file opened: Cls.asm
  1+  8CCD              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8CCD              ;
  3+  8CCD              ;
  4+  8CCD              ;	CLS.
  5+  8CCD              ;
  6+  8CCD              ;	Limpia la pantalla y define sus atributos.
  7+  8CCD              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8CCD              ;
  9+  8CCD              ;	COLORES: 0 ..... NEGRO
 10+  8CCD              ;    		 1 ..... AZUL
 11+  8CCD              ; 			 2 ..... ROJO
 12+  8CCD              ;			 3 ..... MAGENTA
 13+  8CCD              ; 			 4 ..... VERDE
 14+  8CCD              ; 			 5 ..... CIAN
 15+  8CCD              ;			 6 ..... AMARILLO
 16+  8CCD              ; 			 7 ..... BLANCO
 17+  8CCD              ;
 18+  8CCD              ;	INPUT: A contiene los atributos de pantalla.
 19+  8CCD              ;
 20+  8CCD              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8CCD
 22+  8CCD
 23+  8CCD 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8CD0 11 01 40     	LD DE,$4001
 25+  8CD3 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CD6 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8CD8 ED B0        	LDIR
 28+  8CDA 01 FF 02     	LD BC,767
 29+  8CDD 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8CDE ED B0        	LDIR
 31+  8CE0 C9           	ret
 32+  8CE1
# file closed: Cls.asm
679   8CE1              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8CE1              ; ******************************************************************************************************************************************************************************************
  2+  8CE1              ;
  3+  8CE1              ;   22/01/23
  4+  8CE1              ;
  5+  8CE1              ;	Mov_down
  6+  8CE1              ;
  7+  8CE1              ; 	Mueve el Sprite X px hacia abajo.
  8+  8CE1              ;
  9+  8CE1              ;
 10+  8CE1 21 F7 84     Mov_down ld hl,Ctrl_0
 11+  8CE4 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8CE6              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8CE6              ; 																	; _ en el caso de que no lo haya.
 14+  8CE6 3A E4 84     	ld a,(Vel_down)
 15+  8CE9 47           	ld b,a
 16+  8CEA 2A D2 84         ld hl,(Posicion_actual)
 17+  8CED CD 95 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8CF0 E6 02        	and 2
 19+  8CF2 28 0F        	jr z,1F
 20+  8CF4
 21+  8CF4              ; Nos encontramos en el último tercio de pantalla.
 22+  8CF4              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8CF4
 24+  8CF4 7C           	ld a,h
 25+  8CF5 FE 57        	cp $57
 26+  8CF7 20 0A        	jr nz,1F
 27+  8CF9 7D           	ld a,l
 28+  8CFA C6 20        	add $20
 29+  8CFC 30 05        	jr nc,1F
 30+  8CFE              ; ------------------------------
 31+  8CFE CD 8F 8F     	call Reaparece_arriba
 32+  8D01              ;	call Reinicio
 33+  8D01              ; ------------------------------
 34+  8D01 18 08        	jr 3F
 35+  8D03 CD 3C 8A     1 call NextScan
 36+  8D06 22 D2 84     	ld (Posicion_actual),hl
 37+  8D09 10 E2            djnz 2B
 38+  8D0B CD A5 8F     3 call Genera_coordenadas
 39+  8D0E C9           	ret
 40+  8D0F
 41+  8D0F
 42+  8D0F              ; ******************************************************************************************************************************************************************************************
 43+  8D0F              ;
 44+  8D0F              ;   22/01/23
 45+  8D0F              ;
 46+  8D0F              ;	Mov_up
 47+  8D0F              ;
 48+  8D0F              ; 	Mueve el Sprite hacia arriba.
 49+  8D0F              ;
 50+  8D0F              ;
 51+  8D0F 21 F7 84     Mov_up ld hl,Ctrl_0
 52+  8D12 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D14              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D14              ; 																		; _ en el caso de que no lo haya.
 55+  8D14 3A E3 84     	ld a,(Vel_up)
 56+  8D17 47           	ld b,a
 57+  8D18 2A D2 84     	ld hl,(Posicion_actual)
 58+  8D1B CD 95 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D1E A7           	and a
 60+  8D1F 20 10        	jr nz,1F
 61+  8D21
 62+  8D21              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D21              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D21
 65+  8D21 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D22 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D24 20 0B            jr nz,1F
 68+  8D26 7D               ld a,l
 69+  8D27 D6 20            sub $20
 70+  8D29 30 06            jr nc,1F
 71+  8D2B 25               dec h
 72+  8D2C
 73+  8D2C              ; -----------------------------
 74+  8D2C CD 7F 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D2F              ;	call Reinicio
 76+  8D2F              ; -----------------------------
 77+  8D2F
 78+  8D2F 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D31 CD 4B 8A     1 call PreviousScan
 80+  8D34 22 D2 84     	ld (Posicion_actual),hl
 81+  8D37 10 E2            djnz 3B
 82+  8D39 CD A5 8F     2 call Genera_coordenadas
 83+  8D3C C9           	ret
 84+  8D3D
 85+  8D3D              ; ******************************************************************************************************************************************************************************************
 86+  8D3D              ;
 87+  8D3D              ;	19/10/22
 88+  8D3D              ;
 89+  8D3D              ;	Mov_right.
 90+  8D3D              ;
 91+  8D3D              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D3D              ;
 93+  8D3D
 94+  8D3D 21 F7 84     Mov_right ld hl,Ctrl_0
 95+  8D40 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D42              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D42              ; 																	; _ en el caso de que no lo haya.
 98+  8D42 3A D6 84     	ld a,(CTRL_DESPLZ)
 99+  8D45 A7           	and a
100+  8D46 28 0B        	jr z,9F
101+  8D48
102+  8D48 3A F7 84     	ld a,(Ctrl_0)
103+  8D4B CB 7F        	bit 7,a
104+  8D4D 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D4F 21 D6 84     	ld hl,CTRL_DESPLZ
106+  8D52 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D53
108+  8D53 3A F7 84     9 ld a,(Ctrl_0)
109+  8D56 CB 77        	bit 6,a
110+  8D58 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D5A
112+  8D5A CD 3E 8F     	call Stop_Amadeus_right
113+  8D5D C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D5E 18 4D        	jr 8F
115+  8D60
116+  8D60 3A D7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D63 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D65 20 46        	jr nz,8F
119+  8D67
120+  8D67 3A D6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D6A A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D6B 28 40        	jr z,8F
123+  8D6D
124+  8D6D              ; ---------- ---------- ----------
125+  8D6D              ;
126+  8D6D              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D6D
128+  8D6D 3A E2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D70 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D72 28 11        	jr z,1F
131+  8D74 38 06        	jr c,6F
132+  8D76 FE 04        	cp 4
133+  8D78 28 14        	jr z,7F
134+  8D7A 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D7C
136+  8D7C              ; ---------- ---------- ----------
137+  8D7C              ;
138+  8D7C              ; Perfiles de velocidad
139+  8D7C              ;
140+  8D7C
141+  8D7C 3A D6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
142+  8D7F FE FE        	cp $fe
143+  8D81 20 2A        	jr nz,8F
144+  8D83 18 10        	jr 3F
145+  8D85 3A D6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
146+  8D88 FE FD        	cp $fd
147+  8D8A 20 21        	jr nz,8F
148+  8D8C 18 07        	jr 3F
149+  8D8E 3A D6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
150+  8D91 FE FB        	cp $fb
151+  8D93 20 18        	jr nz,8F
152+  8D95
153+  8D95              ; ---------- ---------- ----------
154+  8D95
155+  8D95 CD 6D 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
156+  8D98              ;	call Reinicio
157+  8D98
158+  8D98              ; ---------- ---------- ----------
159+  8D98              ;
160+  8D98              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
161+  8D98
162+  8D98 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
163+  8D9A C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
164+  8D9B CD B4 8D     	call DESPLZ_DER
165+  8D9E C1           	pop bc
166+  8D9F 10 F9        	djnz 5B
167+  8DA1 2A D2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
168+  8DA4 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
169+  8DA5 22 D2 84     	ld (Posicion_actual),hl
170+  8DA8 CD A5 8F     	call Genera_coordenadas
171+  8DAB 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
172+  8DAD
173+  8DAD              ; ---------- ---------- ----------
174+  8DAD
175+  8DAD 2A D2 84     8 ld hl,(Posicion_actual)
176+  8DB0 CD B4 8D     	call DESPLZ_DER
177+  8DB3 C9           2 ret
178+  8DB4
179+  8DB4              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
180+  8DB4              ;
181+  8DB4              ;	22/9/22
182+  8DB4              ;
183+  8DB4
184+  8DB4 CD C3 8D     DESPLZ_DER call Desplaza_derecha
185+  8DB7 CD D8 8D         call modifica_parametros_1er_DESPLZ_2
186+  8DBA CD 01 8E         call Ciclo_completo
187+  8DBD 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
188+  8DC0 CB FE        	set 7,(hl)
189+  8DC2 C9           	ret
190+  8DC3
191+  8DC3              ; ******************************************************************************************************************************************************************************************
192+  8DC3              ;	14/9/22
193+  8DC3              ;
194+  8DC3
195+  8DC3 3A E2 84     Desplaza_derecha ld a,(Vel_right)
196+  8DC6 47           	ld b,a
197+  8DC7 2A DC 84     	ld hl,(Puntero_DESPLZ)
198+  8DCA 23           1 inc hl
199+  8DCB 23           	inc hl
200+  8DCC 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
201+  8DCE 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
202+  8DD1 CD 77 86     	call Extrae_address
203+  8DD4 22 D4 84     	ld (Puntero_objeto),hl
204+  8DD7 C9           	ret
205+  8DD8
206+  8DD8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
207+  8DD8              ;
208+  8DD8              ;	24/7/22
209+  8DD8              ;
210+  8DD8              ;	modifica_parametros_1er_DESPLZ_2
211+  8DD8              ;
212+  8DD8              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
213+  8DD8              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
214+  8DD8              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
215+  8DD8
216+  8DD8 3A D6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
217+  8DDB A7           	and a
218+  8DDC 20 1F        	jr nz,1F
219+  8DDE D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
220+  8DE0 32 D6 84         ld (CTRL_DESPLZ),a
221+  8DE3 21 D1 84     	ld hl,Columns
222+  8DE6 34           	inc (hl)
223+  8DE7 3A E0 84     	ld a,(Cuad_objeto)
224+  8DEA E6 01        	and 1
225+  8DEC 28 0F        	jr z,1F
226+  8DEE 2A D2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
227+  8DF1 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
228+  8DF2 22 D2 84     	ld (Posicion_actual),hl
229+  8DF5 CD A5 8F     	call Genera_coordenadas
230+  8DF8 CD 4A 8F     	call Inc_CTRL_DESPLZ
231+  8DFB 18 03        	jr 2F
232+  8DFD CD 4A 8F     1 call Inc_CTRL_DESPLZ
233+  8E00 C9           2 ret
234+  8E01
235+  8E01              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
236+  8E01              ;
237+  8E01              ;	24/7/22
238+  8E01              ;
239+  8E01              ;	Ciclo_completo.
240+  8E01              ;
241+  8E01              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
242+  8E01              ;
243+  8E01              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
244+  8E01              ; 	Decrementamos (Columns).
245+  8E01              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
246+  8E01              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
247+  8E01
248+  8E01
249+  8E01 3A D6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
250+  8E04 FE FF        	cp $ff
251+  8E06 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
252+  8E08 18 25        	jr 3f
253+  8E0A 21 D1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
254+  8E0D 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
255+  8E0E AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
256+  8E0F 32 D6 84     	ld (CTRL_DESPLZ),a
257+  8E12 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
258+  8E15 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
259+  8E17 20 0A        	jr nz,2F
260+  8E19 2A D2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
261+  8E1C 23           	inc hl
262+  8E1D 22 D2 84     	ld (Posicion_actual),hl
263+  8E20 CD A5 8F     	call Genera_coordenadas
264+  8E23
265+  8E23              ; Inicia el puntero de Sprite.
266+  8E23
267+  8E23 2A DA 84     2 ld hl,(Indice_Sprite)
268+  8E26 22 DC 84     	ld (Puntero_DESPLZ),hl
269+  8E29 CD 77 86     	call Extrae_address
270+  8E2C 22 D4 84     	ld (Puntero_objeto),hl
271+  8E2F
272+  8E2F C9           3 ret
273+  8E30
274+  8E30              ; ******************************************************************************************************************************************************************************************
275+  8E30              ;
276+  8E30              ;	21/01/23
277+  8E30              ;
278+  8E30              ;	Mov_left.
279+  8E30              ;
280+  8E30              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
281+  8E30              ;
282+  8E30              Mov_left
283+  8E30
284+  8E30 21 F7 84     	ld hl,Ctrl_0
285+  8E33 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
286+  8E35              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
287+  8E35              ; 																	; _ en el caso de que no lo haya.
288+  8E35 3A D6 84     	ld a,(CTRL_DESPLZ)
289+  8E38 A7           	and a
290+  8E39 20 19        	jr nz,10F
291+  8E3B
292+  8E3B 2A D4 84     	ld hl,(Puntero_objeto)
293+  8E3E 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
294+  8E41
295+  8E41 3A F7 84     	ld a,(Ctrl_0)
296+  8E44 CB 77        	bit 6,a
297+  8E46 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
298+  8E48
299+  8E48 CD 44 8F     	call Stop_Amadeus_left
300+  8E4B 20 62        	jr nz,8F
301+  8E4D
302+  8E4D 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
303+  8E50 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
304+  8E53 C9           	ret
305+  8E54
306+  8E54 3A F7 84     10 ld a,(Ctrl_0)
307+  8E57 CB 7F        	bit 7,a
308+  8E59 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
309+  8E5B 21 D6 84     	ld hl,CTRL_DESPLZ
310+  8E5E 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
311+  8E5F
312+  8E5F 3A D7 84     11 ld a,(Coordenada_X)
313+  8E62 A7           	and a
314+  8E63 20 4A        	jr nz,8F
315+  8E65 3A D6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
316+  8E68 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
317+  8E69 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
318+  8E6B
319+  8E6B              ; ---------- ---------- ----------
320+  8E6B
321+  8E6B 3A E1 84     	ld a,(Vel_left)
322+  8E6E FE 02        	cp 2
323+  8E70 28 0F        	jr z,1F
324+  8E72 38 04        	jr c,6F
325+  8E74 FE 04        	cp 4
326+  8E76 28 12        	jr z,7F
327+  8E78
328+  8E78              ; ---------- ---------- ----------
329+  8E78
330+  8E78 3A D6 84     6 ld a,(CTRL_DESPLZ)
331+  8E7B FE F9        	cp $f9
332+  8E7D 20 30        	jr nz,8F
333+  8E7F 18 10        	jr 4F
334+  8E81 3A D6 84     1 ld a,(CTRL_DESPLZ)
335+  8E84 FE FA        	cp $fa
336+  8E86 20 27        	jr nz,8F
337+  8E88 18 07        	jr 4F
338+  8E8A 3A D6 84     7 ld a,(CTRL_DESPLZ)
339+  8E8D FE FC        	cp $fc
340+  8E8F 20 1E        	jr nz,8F
341+  8E91
342+  8E91              ; ---------- ---------- ----------
343+  8E91
344+  8E91              4
345+  8E91 CD 5B 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
346+  8E94              ;	call Reinicio
347+  8E94
348+  8E94              ; ---------- ---------- ----------
349+  8E94
350+  8E94 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
351+  8E96 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
352+  8E97 2A D4 84     	ld hl,(Puntero_objeto)
353+  8E9A 22 DC 84     	ld (Puntero_DESPLZ),hl
354+  8E9D CD B6 8E     	call DESPLZ_IZQ
355+  8EA0 C1           	pop bc
356+  8EA1 10 F3        	djnz 5B
357+  8EA3 2A D2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
358+  8EA6 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
359+  8EA7 22 D2 84     	ld (Posicion_actual),hl
360+  8EAA CD A5 8F     	call Genera_coordenadas
361+  8EAD 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8EAF
363+  8EAF              ; ---------- ---------- ----------
364+  8EAF
365+  8EAF 2A D2 84     8 ld hl,(Posicion_actual)
366+  8EB2 CD B6 8E     	call DESPLZ_IZQ
367+  8EB5 C9           2 ret
368+  8EB6
369+  8EB6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
370+  8EB6              ;
371+  8EB6              ;	22/9/22
372+  8EB6
373+  8EB6              DESPLZ_IZQ
374+  8EB6
375+  8EB6 CD C5 8E     	call Desplaza_izquierda
376+  8EB9 CD DA 8E         call modifica_parametros_1er_DESPLZ
377+  8EBC CD FE 8E     	call Ciclo_completo_2
378+  8EBF 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
379+  8EC2 CB BE        	res 7,(hl)
380+  8EC4 C9           	ret
381+  8EC5 3A E1 84     Desplaza_izquierda ld a,(Vel_left)
382+  8EC8 47           	ld b,a
383+  8EC9 2A DC 84     	ld hl,(Puntero_DESPLZ)
384+  8ECC 2B           1 dec hl
385+  8ECD 2B           	dec hl
386+  8ECE 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8ED0 22 DC 84     	ld (Puntero_DESPLZ),hl
388+  8ED3 CD 77 86     	call Extrae_address
389+  8ED6 22 D4 84     	ld (Puntero_objeto),hl
390+  8ED9 C9           	ret
391+  8EDA
392+  8EDA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8EDA              ;
394+  8EDA              ;	modifica_parametros_1er_DESPLZ
395+  8EDA              ;
396+  8EDA              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8EDA              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8EDA              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8EDA
400+  8EDA 3A D6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8EDD A7           	and a
402+  8EDE 20 1A        	jr nz,1F
403+  8EE0 21 D1 84     	ld hl,Columns
404+  8EE3 34           	inc (hl)
405+  8EE4 3A E0 84     	ld a,(Cuad_objeto)
406+  8EE7 E6 01        	and 1
407+  8EE9 20 0F        	jr nz,1F
408+  8EEB 2A D2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8EEE 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8EEF 22 D2 84     	ld (Posicion_actual),hl
411+  8EF2 CD A5 8F     	call Genera_coordenadas
412+  8EF5 CD 2D 8F     	call Dec_CTRL_DESPLZ
413+  8EF8 18 03        	jr 2F
414+  8EFA CD 2D 8F     1 call Dec_CTRL_DESPLZ
415+  8EFD C9           2 ret
416+  8EFE
417+  8EFE              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8EFE              ;
419+  8EFE
420+  8EFE 3A D6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
421+  8F01 FE F8        	cp $f8
422+  8F03 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
423+  8F05 18 25        	jr 3f
424+  8F07 21 D1 84     1 ld hl,Columns
425+  8F0A 35           	dec (hl)
426+  8F0B AF           	xor a
427+  8F0C 32 D6 84     	ld (CTRL_DESPLZ),a
428+  8F0F 3A E0 84     	ld a,(Cuad_objeto)
429+  8F12 E6 01        	and 1
430+  8F14 28 0A        	jr z,2F
431+  8F16 2A D2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
432+  8F19 2B           	dec hl
433+  8F1A 22 D2 84     	ld (Posicion_actual),hl
434+  8F1D CD A5 8F     	call Genera_coordenadas
435+  8F20
436+  8F20              ; Inicia el puntero de Sprite.
437+  8F20
438+  8F20 2A DA 84     2 ld hl,(Indice_Sprite)
439+  8F23 22 DC 84     	ld (Puntero_DESPLZ),hl
440+  8F26 CD 77 86     	call Extrae_address
441+  8F29 22 D4 84     	ld (Puntero_objeto),hl
442+  8F2C C9           3 ret
443+  8F2D
444+  8F2D              ; ---------- ---------- ---------- ---------- ---------- ----------
445+  8F2D              ;
446+  8F2D              ;	Dec_CTRL_DESPLZ
447+  8F2D              ;
448+  8F2D              ;	Subrutina de [modifica_punteros].
449+  8F2D              ;
450+  8F2D              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
451+  8F2D
452+  8F2D 21 D6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
453+  8F30 3A E1 84     	ld a,(Vel_left)
454+  8F33 A7           	and a
455+  8F34 28 06        	jr z,1F
456+  8F36 47           	ld b,a
457+  8F37 35           3 dec (hl)
458+  8F38 10 FD        	djnz 3B
459+  8F3A 18 01        	jr 2F
460+  8F3C 35           1 dec (hl)
461+  8F3D C9           2 ret
462+  8F3E
463+  8F3E              ; ---------- ---------- ---------- ---------- ---------- ----------
464+  8F3E              ;
465+  8F3E              ;	19/10/22
466+  8F3E              ;
467+  8F3E              ;	(cp 29) para un Amadeus de 3 Columns.
468+  8F3E              ;	(cp 30)   ""  ""    ""     2 Columns.
469+  8F3E
470+  8F3E 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
471+  8F41 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
472+  8F43 C9           	ret
473+  8F44
474+  8F44              ; ---------- ---------- ---------- ---------- ---------- ----------
475+  8F44              ;
476+  8F44              ;	19/10/22
477+  8F44              ;
478+  8F44              ;	(cp 2) para un Amadeus de 3 Columns.
479+  8F44              ;	(cp 1)   ""  ""    ""     2 Columns.
480+  8F44
481+  8F44 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
482+  8F47 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
483+  8F49 C9           	ret
484+  8F4A
485+  8F4A              ; ---------- ---------- ---------- ---------- ---------- ----------
486+  8F4A              ;
487+  8F4A              ;	24/7/22
488+  8F4A              ;
489+  8F4A              ;	Inc_CTRL_DESPLZ
490+  8F4A              ;
491+  8F4A              ;	Subrutina de [modifica_punteros].
492+  8F4A              ;
493+  8F4A              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
494+  8F4A
495+  8F4A 21 D6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
496+  8F4D 3A E2 84     	ld a,(Vel_right)
497+  8F50 A7           	and a
498+  8F51 28 06        	jr z,1F
499+  8F53 47           	ld b,a
500+  8F54 34           3 inc (hl)
501+  8F55 10 FD        	djnz 3B
502+  8F57 18 01        	jr 2F
503+  8F59 34           1 inc (hl)
504+  8F5A C9           2 ret
505+  8F5B
506+  8F5B              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F5B
508+  8F5B 2A D2 84     Reaparece_derecha ld hl,(Posicion_actual)
509+  8F5E 01 1F 00     	ld bc,31
510+  8F61 A7           	and a
511+  8F62 ED 4A        	adc hl,bc
512+  8F64 22 D2 84     	ld (Posicion_actual),hl
513+  8F67 21 F7 84     	ld hl,Ctrl_0														; $xxx1
514+  8F6A CB C6        	set 0,(hl)
515+  8F6C C9           	ret
516+  8F6D
517+  8F6D              ; ---------- ---------- ---------- ---------- ---------- ----------
518+  8F6D
519+  8F6D 2A D2 84     Reaparece_izquierda ld hl,(Posicion_actual)
520+  8F70 01 1F 00     	ld bc,31
521+  8F73 A7           	and a
522+  8F74 ED 42        	sbc hl,bc
523+  8F76 22 D2 84     	ld (Posicion_actual),hl 											; $xx1x
524+  8F79 21 F7 84     	ld hl,Ctrl_0
525+  8F7C CB CE        	set 1,(hl)
526+  8F7E C9           	ret
527+  8F7F
528+  8F7F              ; ---------- ---------- ---------- ---------- ---------- ----------
529+  8F7F
530+  8F7F 24           Reaparece_abajo inc h
531+  8F80 01 E0 17     	ld bc,$17e0
532+  8F83 A7           	and a
533+  8F84 ED 4A        	adc hl,bc
534+  8F86 22 D2 84     	ld (Posicion_actual),hl
535+  8F89 21 F7 84     	ld hl,Ctrl_0
536+  8F8C CB D6        	set 2,(hl)
537+  8F8E C9           	ret
538+  8F8F
539+  8F8F              ; ---------- ---------- ---------- ---------- ---------- ----------
540+  8F8F
541+  8F8F 01 E0 17     Reaparece_arriba ld bc,$17e0
542+  8F92 A7           	and a
543+  8F93 ED 42        	sbc hl,bc
544+  8F95 22 D2 84     	ld (Posicion_actual),hl
545+  8F98 21 F7 84     	ld hl,Ctrl_0
546+  8F9B CB DE        	set 3,(hl)
547+  8F9D C9           	ret
548+  8F9E
549+  8F9E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
550+  8F9E
551+  8F9E 2A DE 84     Reinicio ld hl,(Posicion_inicio)
552+  8FA1 22 D2 84     	ld (Posicion_actual),hl
553+  8FA4 C9           	ret
# file closed: Direcciones.asm
680   8FA5              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FA5              ;	12/12/22
  2+  8FA5              ;
  3+  8FA5              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FA5              ;	Fila superior "0", Columna izquierda "0".
  5+  8FA5              ;
  6+  8FA5              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FA5              ;
  8+  8FA5              ;	Modifica: A
  9+  8FA5
 10+  8FA5 C5           Genera_coordenadas push bc
 11+  8FA6 E5           	push hl
 12+  8FA7 2A D2 84     	ld hl,(Posicion_actual)
 13+  8FAA 7D           	ld a,l
 14+  8FAB E6 1F        	and $1f
 15+  8FAD 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FB0 CD 95 8C     	call calcula_tercio
 17+  8FB3 47           	ld b,a
 18+  8FB4 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FB5 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FB7 7D           	ld a,l
 21+  8FB8 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FBA 28 05        	jr z,2F
 23+  8FBC 0C           1 inc c
 24+  8FBD D6 20        	sub 32
 25+  8FBF 20 FB        	jr nz,1B
 26+  8FC1 0C           2 inc c
 27+  8FC2 04           	inc b
 28+  8FC3 05           	dec b
 29+  8FC4 28 04        	jr z,3F
 30+  8FC6 3E E0        	ld a,$e0
 31+  8FC8 10 F2        	djnz 1B
 32+  8FCA 79           3 ld a,c
 33+  8FCB 3D           	dec a
 34+  8FCC 32 D8 84     	ld (Coordenada_y),a
 35+  8FCF E1           	pop hl
 36+  8FD0 C1           	pop bc
 37+  8FD1 C9           	ret
# file closed: Genera_coordenadas.asm
681   8FD2              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FD2
  2+  8FD2
  3+  8FD2              ;   11/8/22
  4+  8FD2              ;
  5+  8FD2              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FD2              ;
  7+  8FD2              ;   Mov_obj.asm
  8+  8FD2              ;
  9+  8FD2              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FD2              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FD2              ;
 12+  8FD2              ;   Codificación:
 13+  8FD2              ;
 14+  8FD2              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FD2
 16+  8FD2 02 10 00     Izquierda db 2,%00010000,0
 17+  8FD5 02 20 00     Derecha db 2,%00100000,0
 18+  8FD8 02 80 00     Abajo db 2,%10000000,0
 19+  8FDB 02 40 00     Arriba db 2,%01000000,0
 20+  8FDE
 21+  8FDE 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8FE2 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8FE6 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8FEA 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8FEE 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8FF2 60 42 60 40
 25+  8FF6 63
 26+  8FF7 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FFB 22 A3 80 A0
 27+  8FFF 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  9003 84 A0 83 A0
 28+  9007 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  900B 80 A3 22 A0
 29+  900F 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  9013 40 60 42 60
 30+  9017 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  901B
 32+  901B D2 8F        Indice_mov_Izquierda defw Izquierda
 33+  901D D5 8F        Indice_mov_Derecha defw Derecha
 34+  901F D8 8F        Indice_mov_Abajo defw Abajo
 35+  9021 DB 8F        Indice_mov_Arriba defw Arriba
 36+  9023 E2 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  9025 E6 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  9027 DE 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  9029 EA 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  902B EE 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  902D
 42+  902D 3A FD 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  9030 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  9031 28 02            jr z,1F
 45+  9033 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  9035 3A FE 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  9038 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  903A 32 FE 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  903D              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  903D 2A FB 84         ld hl,(Puntero_mov)
 51+  9040 7E               ld a,(hl)
 52+  9041 32 FD 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  9044 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  9045 22 FB 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  9048
 56+  9048 3A FF 84     Decoder ld a,(Repetimos_db)
 57+  904B A7               and a
 58+  904C 20 0C            jr nz,12F
 59+  904E 2A FB 84         ld hl,(Puntero_mov)
 60+  9051 7E               ld a,(hl)
 61+  9052 A7               and a
 62+  9053 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  9055 E6 0F             and $0f
 64+  9057 32 FF 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  905A              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  905A 2A FB 84     12 ld hl,(Puntero_mov)
 67+  905D CB 7E            bit 7,(hl)
 68+  905F 28 03            jr z,2F
 69+  9061 CD E1 8C         call Mov_down
 70+  9064 2A FB 84     2 ld hl, (Puntero_mov)
 71+  9067 CB 76            bit 6,(hl)
 72+  9069 28 03            jr z,3F
 73+  906B CD 0F 8D         call Mov_up
 74+  906E 2A FB 84     3 ld hl, (Puntero_mov)
 75+  9071 CB 6E            bit 5,(hl)
 76+  9073 28 03            jr z,4F
 77+  9075 CD 3D 8D         call Mov_right
 78+  9078 2A FB 84     4 ld hl, (Puntero_mov)
 79+  907B CB 66            bit 4,(hl)
 80+  907D 28 03            jr z,5F
 81+  907F CD 30 8E         call Mov_left
 82+  9082
 83+  9082              ; ---------- --------- --------- ---------- ----------
 84+  9082
 85+  9082 3A FF 84     5 ld a,(Repetimos_db)
 86+  9085 A7               and a
 87+  9086 28 07            jr z,6F
 88+  9088 3D               dec a
 89+  9089 32 FF 84         ld (Repetimos_db),a
 90+  908C 28 01            jr z,6f
 91+  908E C9           11 ret
 92+  908F 21 FD 84     6 ld hl,Contador_db_mov
 93+  9092 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  9093 2A FB 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9096 23               inc hl
 96+  9097 22 FB 84         ld (Puntero_mov),hl
 97+  909A 18 F2            jr 11B
 98+  909C 2A F9 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  909F 3A FE 84         ld a,(Incrementa_puntero)
100+  90A2 47               ld b,a
101+  90A3 23           8 inc hl
102+  90A4 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  90A6 5E               ld e,(hl)
104+  90A7 23               inc hl
105+  90A8 56               ld d,(hl)
106+  90A9 EB               ex de,hl
107+  90AA 22 FB 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  90AD 18 DF            jr 11B
109+  90AF
110+  90AF              ; ---------- --------- --------- ---------- ----------
111+  90AF              ;
112+  90AF              ;   11/8/22
113+  90AF              ;
114+  90AF              ;   Prepara_Puntero_mov
115+  90AF
116+  90AF E5           Prepara_Puntero_mov push hl
117+  90B0 D5               push de
118+  90B1 2A F9 84         ld hl,(Puntero_indice_mov)
119+  90B4 5E               ld e,(hl)
120+  90B5 23               inc hl
121+  90B6 56               ld d,(hl)
122+  90B7 EB               ex de,hl
123+  90B8 22 FB 84         ld (Puntero_mov),hl
124+  90BB D1               pop de
125+  90BC E1               pop hl
126+  90BD C9               ret
127+  90BE
128+  90BE              ; ---------- --------- --------- ---------- ----------
129+  90BE              ;
130+  90BE              ;   11/8/22
131+  90BE              ;
132+  90BE              ;   Reinicia_el_movimiento
133+  90BE
134+  90BE CD AF 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  90C1 AF               xor a
136+  90C2 32 FD 84         ld (Contador_db_mov),a
137+  90C5 32 FE 84         ld (Incrementa_puntero),a
138+  90C8 C3 2D 90         jp Movimiento
139+  90CB
140+  90CB              ; ---------- --------- --------- ---------- ----------
141+  90CB
142+  90CB
143+  90CB
144+  90CB
145+  90CB
146+  90CB
147+  90CB
148+  90CB
149+  90CB
150+  90CB
151+  90CB
152+  90CB
153+  90CB
154+  90CB
155+  90CB
156+  90CB
157+  90CB
158+  90CB
# file closed: Patrones_de_mov.asm
682   90CB              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90CB              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90CB              ;
  3+  90CB              ;	3/1/23
  4+  90CB              ;
  5+  90CB              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90CB
  7+  90CB              ;	ADC HL,SP	LD (addr),SP
  8+  90CB              ;	ADD HL,SP	LD SP,(addr)
  9+  90CB              ;	ADD IX,SP	LD SP,nn
 10+  90CB              ; 	ADD IY,SP	LD SP,HL
 11+  90CB              ;				LD SP,IX
 12+  90CB              ;	DEC SP		LD SP,IY
 13+  90CB
 14+  90CB              ;	EX (SP),HL
 15+  90CB              ;	EX (SP),IX
 16+  90CB              ;	EX (SP),IY
 17+  90CB
 18+  90CB              ;	INC SP
 19+  90CB
 20+  90CB
 21+  90CB                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 10 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 10 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
683   7FC0
684   7FC0              	SAVESNA "Pruebas.sna", START
685   7FC0
686   7FC0
687   7FC0
# file closed: Banco_de_pruebas.asm
