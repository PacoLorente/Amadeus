# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 71 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									 ; 58 Bytes por entidad.
  7+  83C0
  8+  83C0 08 84        	defw Badsat
  9+  83C2 42 84        	defw Badsat2
 10+  83C4 7C 84        	defw Badsat3
 11+  83C6 B6 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 23+  83D0 00 00        	defw 0 											; (Posicion_actual).
 24+  83D2 00 00        	defw 0 											; (Puntero_objeto).
 25+  83D4 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 26+  83D7
 27+  83D7 05           	db %00000101									; (Attr).
 28+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 29+  83DA 00 00        	defw 0	 										; (Puntero_DESPLZ).
 30+  83DC CF 50        	defw $50cf										; (Posicion_inicio).
 31+  83DE 00           	db 0 											; (Cuad_objeto).
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 34+  83E3
 35+  83E3 00 00        	db 0,0											; Variables_de_borrado
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00        	defw 0											;	" " " " " " "
 38+  83E9 00 00 00     	db 0,0,0										;	" " " " " " "
 39+  83EC
 40+  83EC 00 00        	db 0,0											; Variables_de_pintado
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00        	defw 0											;	" " " " " " "
 43+  83F2 00 00 00     	db 0,0,0										;	" " " " " " "
 44+  83F5
 45+  83F5 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 46+  83F7
 47+  83F7 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 48+  83FB 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 49+  83FE
 50+  83FE 00           	db 0 											; (Columnas).
 51+  83FF 00 00        	defw 0											; (Limite_horizontal).
 52+  8401 00           	db 0											; (Limite_vertical).
 53+  8402 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 53+  8406 00 00
 54+  8408
 55+  8408              ; ---------- ---------- ---------- ---------- ----------
 56+  8408
 57+  8408 02 02        Badsat db 2,2										; (Filas) / (Columns).
 58+  840A 00 00        	defw 0											; (Posicion_actual).
 59+  840C 00 00        	defw 0 											; (Puntero_objeto).
 60+  840E 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 61+  8411
 62+  8411 06           	db %00000110 									; (Attr).
 63+  8412 80 81        	defw Indice_Badsat_der							; (Indice_Sprite).
 64+  8414 00 00        	defw 0											; (Puntero_DESPLZ).
 65+  8416 A1 47        	defw $47a1										; (Posicion_inicio).
 66+  8418 00           	db 0											; (Cuad_objeto).
 67+  8419
 68+  8419 01 01 01 02  	db 1,1,1,2										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 69+  841D
 70+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 71+  841F 00 00        	defw 0											;	" " " " " " "
 72+  8421 00 00        	defw 0											;	" " " " " " "
 73+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 74+  8426
 75+  8426 00 00        	db 0,0											; Variables_de_pintado
 76+  8428 00 00        	defw 0											;	" " " " " " "
 77+  842A 00 00        	defw 0											;	" " " " " " "
 78+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 79+  842F
 80+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 81+  8431
 82+  8431 C7 8F 00 00  	defw Indice_mov_Badsat,0 						; (Puntero_indice_mov) / (Puntero_mov).
 83+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 84+  8438
 85+  8438 00           	db 0 											; (Columnas).
 86+  8439 00 00        	defw 0											; (Limite_horizontal).
 87+  843B 00           	db 0											; (Limite_vertical).
 88+  843C 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 88+  8440 00 00
 89+  8442
 90+  8442              ; ---------- ---------- ---------- ---------- ----------
 91+  8442
 92+  8442 02 02        Badsat2 db 2,2		                                ; (Filas) / (Columns).
 93+  8444 00 00        	defw 0                                          ; (Posicion_actual).
 94+  8446 00 00        	defw 0											; (Puntero_objeto).
 95+  8448 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 96+  844B
 97+  844B 02           	db %00000010									; (Attr).
 98+  844C 80 81        	defw Indice_Badsat_der	                        ; (Indice_Sprite).
 99+  844E 00 00        	defw 0                                          ; (Puntero_DESPLZ).
100+  8450 61 47        	defw $4761                                      ; (Posicion_inicio).
101+  8452 00           	db 0											; (Cuad_objeto).
102+  8453
103+  8453 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
104+  8457
105+  8457 00 00        	db 0,0											; Variables_de_borrado
106+  8459 00 00        	defw 0										 	;	" " " " " " "
107+  845B 00 00        	defw 0											;	" " " " " " "
108+  845D 00 00 00     	db 0,0,0										;	" " " " " " "
109+  8460
110+  8460 00 00        	db 0,0											; Variables_de_pintado
111+  8462 00 00        	defw 0											;	" " " " " " "
112+  8464 00 00        	defw 0											;	" " " " " " "
113+  8466 00 00 00     	db 0,0,0										;	" " " " " " "
114+  8469
115+  8469 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
116+  846B
117+  846B C9 8F 00 00  	defw Indice_mov_Badsat2,0                       ; (Puntero_indice_mov) / (Puntero_mov).
118+  846F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
119+  8472
120+  8472 00           	db 0 											; (Columnas).
121+  8473 00 00        	defw 0											; (Limite_horizontal).
122+  8475 00           	db 0											; (Limite_vertical).
123+  8476 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
123+  847A 00 00
124+  847C
125+  847C              ; ---------- ---------- ---------- ---------- ----------
126+  847C
127+  847C 02 02        Badsat3 db 2,2                                 		; (Filas) / (Columns).
128+  847E 00 00        	defw 0                                          ; (Posicion_actual).
129+  8480 00 00        	defw 0											; (Puntero_objeto).
130+  8482 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
131+  8485
132+  8485 04           	db %00000100									; (Attr).
133+  8486 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
134+  8488 00 00        	defw 0                                          ; (Puntero_DESPLZ).
135+  848A 7E 47        	defw $477e                                      ; (Posicion_inicio).
136+  848C 00           	db 0											; (Cuad_objeto).
137+  848D
138+  848D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
139+  8491
140+  8491 00 00        	db 0,0											; Variables_de_borrado
141+  8493 00 00        	defw 0										 	;	" " " " " " "
142+  8495 00 00        	defw 0											;	" " " " " " "
143+  8497 00 00 00     	db 0,0,0										;	" " " " " " "
144+  849A
145+  849A 00 00        	db 0,0											; Variables_de_pintado
146+  849C 00 00        	defw 0											;	" " " " " " "
147+  849E 00 00        	defw 0											;	" " " " " " "
148+  84A0 00 00 00     	db 0,0,0										;	" " " " " " "
149+  84A3
150+  84A3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
151+  84A5
152+  84A5 CB 8F 00 00  	defw Indice_mov_Badsat3,0                       ; (Puntero_indice_mov) / (Puntero_mov).
153+  84A9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
154+  84AC
155+  84AC 00           	db 0 											; (Columnas).
156+  84AD 00 00        	defw 0											; (Limite_horizontal).
157+  84AF 00           	db 0											; (Limite_vertical).
158+  84B0 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
158+  84B4 00 00
159+  84B6
160+  84B6              ; ---------- ---------- ---------- ---------- ----------
161+  84B6
162+  84B6 02 02        Badsat4 db 2,2                                  	; (Filas) / (Columns).
163+  84B8 00 00        	defw 0                                          ; (Posicion_actual).
164+  84BA 00 00        	defw 0 											; (Puntero_objeto).
165+  84BC 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
166+  84BF
167+  84BF 01           	db %00000001									; (Attr).
168+  84C0 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
169+  84C2 00 00        	defw 0                                          ; (Puntero_DESPLZ).
170+  84C4 BE 47        	defw $47be                                      ; (Posicion_inicio).
171+  84C6 00           	db 0											; (Cuad_objeto).
172+  84C7
173+  84C7 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
174+  84CB
175+  84CB 00 00        	db 0,0											; Variables_de_borrado
176+  84CD 00 00        	defw 0										 	;	" " " " " " "
177+  84CF 00 00        	defw 0											;	" " " " " " "
178+  84D1 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84D4
180+  84D4 00 00        	db 0,0											; Variables_de_pintado
181+  84D6 00 00        	defw 0											;	" " " " " " "
182+  84D8 00 00        	defw 0											;	" " " " " " "
183+  84DA 00 00 00     	db 0,0,0										;	" " " " " " "
184+  84DD
185+  84DD 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
186+  84DF
187+  84DF CD 8F 00 00  	defw Indice_mov_Badsat4,0                       ; (Puntero_indice_mov) / (Puntero_mov).
188+  84E3 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
189+  84E6
190+  84E6 00           	db 0 											; (Columnas).
191+  84E7 00 00        	defw 0											; (Limite_horizontal).
192+  84E9 00           	db 0											; (Limite_vertical).
193+  84EA 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
193+  84EE 00 00
# file closed: Base_de_datos_Sprites.asm
 21   84F0
 22   84F0              ; ******************************************************************************************************************************************************************************************
 23   84F0              ; Constantes.
 24   84F0              ; ******************************************************************************************************************************************************************************************
 25   84F0              ;
 26   84F0              ; 8/11/22
 27   84F0              ;
 28   84F0              ; Constantes generales.
 29   84F0              ;
 30   84F0
 31   84F0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84F0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84F0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84F0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84F0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84F0
 37   84F0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84F0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84F0
 40   84F0
 41   84F0              ; ******************************************************************************************************************************************************************************************
 42   84F0              ; Variables.
 43   84F0              ; ******************************************************************************************************************************************************************************************
 44   84F0              ;
 45   84F0              ; 10/11/22
 46   84F0              ;
 47   84F0              ; Variables de DRAW. (Motor principal).
 48   84F0              ;
 49   84F0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84F0
 51   84F0 02           Filas db 2												; Filas. [DRAW]
 52   84F1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84F2 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 54   84F4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84F6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84F7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84F7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84F7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84F7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84F8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84F9
 62   84F9              ; ---------- ---------- ----------
 63   84F9
 64   84F9
 65   84F9 06           Attr db %00000110										; Atributos de la entidad:
 66   84FA
 67   84FA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84FA              ;
 69   84FA              ;	COLORES: 0 ..... NEGRO
 70   84FA              ;    		 1 ..... AZUL
 71   84FA              ; 			 2 ..... ROJO
 72   84FA              ;			 3 ..... MAGENTA
 73   84FA              ; 			 4 ..... VERDE
 74   84FA              ; 			 5 ..... CIAN
 75   84FA              ;			 6 ..... AMARILLO
 76   84FA              ; 			 7 ..... BLANCO
 77   84FA
 78   84FA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84FC 00 00        Puntero_DESPLZ defw 0
 80   84FE E3 48        Posicion_inicio defw $48e3								; Dirección de pantalla donde aparece el objeto. [DRAW]
 81   8500 03           Cuad_objeto db 3			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   8501
 83   8501              ; Variables de objeto. (Características).
 84   8501
 85   8501 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   8502 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   8503 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   8504 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   8505
 90   8505 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   8507 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   8509 00 00        	defw 0
 93   850B 00 00 00     	db 0,0,0
 94   850E
 95   850E 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   8510 00 00        	defw 0
 97   8512 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   8514 00 00 00     	db 0,0,0
 99   8517
100   8517              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   8517
102   8517 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   8518              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   8518              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   8518              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   8518              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   8518              ;
108   8518              ; 														DESCRIPCIÖN:
109   8518              ;
110   8518              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   8518              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   8518              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   8518              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   8518              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   8518              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   8518              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   8518              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   8518              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   8518              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   8518              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   8518              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   8518              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   8518              ;
124   8518              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   8518              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   8518              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   8518
128   8518 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   8519
130   8519              ; Movimiento.
131   8519
132   8519 C7 8F        Puntero_indice_mov defw Indice_mov_Badsat
133   851B 00 00        Puntero_mov defw 0
134   851D 00           Contador_db_mov db 0
135   851E 00           Incrementa_puntero db 0
136   851F 00           Repetimos_db db 0
137   8520
138   8520
139   8520              ; Variables de funcionamiento. [DRAW].
140   8520
141   8520 00           Columnas db 0
142   8521 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8523              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8523 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8524
146   8524
147   8524              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8524
149   8524              ; Gestión de ENTIDADES.
150   8524
151   8524 00 00        Puntero_store_entidades defw 0
152   8526 00 00        Puntero_restore_entidades defw 0
153   8528 00 00        Indice_restore defw 0
154   852A
155   852A              ; 58 Bytes por entidad.
156   852A              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
157   852A
158   852A 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   852B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   852C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   852C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   852C              ;														; _ (Numero_de_malotes)="0".
163   852C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   852E              ;														; _variable para almacenar lo posición del puntero_
165   852E              ; 														; _de pila, SP.
166   852E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   8530              ;														; La utiliza la rutina [Extrae_foto_registros].
168   8530 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   8532              ;														; _el snapshot de los registros de la siguiente entidad.
170   8532              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   8532
172   8532              ; Gestión de FRAMES.
173   8532
174   8532 00           Switch db 0
175   8533
176   8533              ; Variables de Raster y localización en pantalla.
177   8533
178   8533 00 FF        Temp_Raster defw $ff00
179   8535
180   8535              ; Rutina principal *************************************************************************************************************************************************************************
181   8535              ;
182   8535              ;	14/11/22
183   8535
184   8535 31 FF FF     START ld sp,$ffff
185   8538
186   8538 3E A0        	ld a,$a0
187   853A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
188   853C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
189   853E F3           	DI
190   853F
191   853F 3E 01        	ld a,1
192   8541 D3 FE        	out ($fe),a
193   8543
194   8543 3E 07        	ld a,%00000111
195   8545 CD 74 8C     	call Cls
196   8548
197   8548              ;	call Pinta_FILAS
198   8548
199   8548 CD AB 86     	call Pulsa_ENTER
200   854B
201   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
202   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
203   854B              ;	Pintamos el resto de entidades:
204   854B
205   854B CD 1E 86     	call Inicia_punteros_de_entidades
206   854E 21 2A 85     	ld hl,Numero_de_entidades
207   8551 46           	ld b,(hl)
208   8552
209   8552 C5           1 push bc  												; Guardo el contador de entidades.
210   8553 CD 4D 86      	call Inicia_Puntero_objeto
211   8556 CD 02 87     	call Draw
212   8559 CD A0 7F     	call Guarda_foto_registros
213   855C CD 6A 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
214   855F C1           	pop bc
215   8560 10 F0        	djnz 1B  											; Decremento el contador de entidades.
216   8562
217   8562              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
218   8562
219   8562 CD 1E 86     	call Inicia_punteros_de_entidades
220   8565 CD 99 86     	call Restore_Primera_entidad
221   8568
222   8568 3A 2A 85     	ld a,(Numero_de_entidades)
223   856B 32 2B 85     	ld (Numero_de_malotes),a
224   856E
225   856E FB           2 ei
226   856F 18 FD        	jr 2B
227   8571
228   8571              ; -----------------------------------------------------------------------------------
229   8571
230   8571              Frame
231   8571
232   8571              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
233   8571              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
234   8571
235   8571 3E 07            ld a,7
236   8573 D3 FE            out ($fe),a
237   8575
238   8575 CD 01 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
239   8578
240   8578 3E 01            ld a,1
241   857A D3 FE            out ($fe),a
242   857C
243   857C              ; ----------------------------------------------------------------------
244   857C
245   857C 21 00 70     	ld hl,Album_de_fotos
246   857F 22 30 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
247   8582              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
248   8582 3A 2A 85         ld a,(Numero_de_entidades)
249   8585 47               ld b,a
250   8586
251   8586 C5           2 push bc
252   8587
253   8587 CD AD 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
254   858A
255   858A 3A 17 85      	ld a,(Ctrl_0)
256   858D CB 67        	bit 4,a
257   858F 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
258   8591
259   8591 CD E5 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
260   8594
261   8594 21 17 85     	ld hl,Ctrl_0
262   8597 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
263   8599
264   8599 CD 6A 86     1 call Store_Restore_entidades
265   859C
266   859C C1           	pop bc
267   859D 10 E7        	djnz 2B
268   859F
269   859F CD 1E 86     	call Inicia_punteros_de_entidades
270   85A2 CD 99 86     	call Restore_Primera_entidad
271   85A5 CD 34 86     	call Calcula_numero_de_malotes
272   85A8
273   85A8 3E 00        	ld a,0
274   85AA D3 FE        	out ($fe),a
275   85AC
276   85AC C9           	ret
277   85AD
278   85AD              ; --------------------------------------------------------------------------------------------------------------
279   85AD              ;
280   85AD              Mov_obj
281   85AD
282   85AD              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
283   85AD
284   85AD AF           	xor a
285   85AE 32 18 85     	ld (Obj_dibujado),a
286   85B1 CD EF 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
287   85B4              ;														; Obj_dibujado="0".
288   85B4              ; Movemos Amadeus o enemigos...
289   85B4
290   85B4 3A 17 85     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
291   85B7 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
292   85B9 C4 BF 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
293   85BC
294   85BC 3A 17 85     	ld a,(Ctrl_0)
295   85BF CB 77        	bit 6,a
296   85C1 CC CF 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
297   85C4
298   85C4 3A 17 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
299   85C7 CB 67        	bit 4,a
300   85C9 C8           	ret z
301   85CA
302   85CA              ; ---------
303   85CA
304   85CA 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
305   85CC 32 18 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
306   85CF CD EF 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
307   85D2
308   85D2 CD 06 86         call Repone_borrar
309   85D5
310   85D5              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
311   85D5
312   85D5 CD D7 89     	call Prepara_draw
313   85D8 CD 11 89     	call calcula_CColumnass
314   85DB CD 48 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
315   85DE CD 9D 89     	call Define_rutina_de_impresion
316   85E1 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
317   85E4
318   85E4 C9           	ret
319   85E5
320   85E5              ; --------------------------------------------------------------------------------------------------------------
321   85E5              ;
322   85E5 CD 12 86     Borra_Pinta_obj call Repone_pintar
323   85E8 CD 02 87     	call Draw
324   85EB CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
325   85EE C9           	ret
326   85EF
327   85EF              ; --------------------------------------------------------------------------------------------------------------
328   85EF
329   85EF 21 F0 84     Prepara_var_pintado_borrado	ld hl,Filas
330   85F2 3A 18 85     	ld a,(Obj_dibujado)
331   85F5 A7           	and a
332   85F6 28 05        	jr z,1F
333   85F8 11 0E 85     	ld de,Variables_de_pintado
334   85FB 18 03        	jr 2F
335   85FD 11 05 85     1 ld de,Variables_de_borrado
336   8600 01 09 00     2 ld bc,9
337   8603 ED B0        	ldir
338   8605 C9           	ret
339   8606
340   8606 21 05 85     Repone_borrar ld hl,Variables_de_borrado
341   8609 11 F0 84     	ld de,Filas
342   860C 01 09 00     	ld bc,9
343   860F ED B0        	ldir
344   8611 C9           	ret
345   8612
346   8612 21 0E 85     Repone_pintar ld hl,Variables_de_pintado
347   8615 11 F0 84     	ld de,Filas
348   8618 01 09 00     	ld bc,9
349   861B ED B0        	ldir
350   861D C9           	ret
351   861E
352   861E              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
353   861E              ;	ld (Caja_de_BORRADO),hl
354   861E              ;	ret
355   861E
356   861E              ; *************************************************************************************************************************************************************
357   861E              ;
358   861E              ; 8/1/23
359   861E              ;
360   861E              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
361   861E              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
362   861E              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
363   861E
364   861E              ; Destruye HL y DE !!!!!
365   861E
366   861E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
367   8621 CD 47 86         call Extrae_address
368   8624 22 24 85         ld (Puntero_store_entidades),hl
369   8627 21 C2 83     	ld hl,Indice_de_entidades+2
370   862A 22 28 85     	ld (Indice_restore),hl
371   862D CD 47 86     	call Extrae_address
372   8630 22 26 85     	ld (Puntero_restore_entidades),hl
373   8633 C9               ret
374   8634
375   8634              ; -------------------------------------------------------------------------------------------------------------
376   8634              ;
377   8634              ; 7/1/23
378   8634              ;
379   8634
380   8634 2A 30 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
381   8637 AF           	xor a
382   8638 67           	ld h,a
383   8639 7D           	ld a,l
384   863A D6 06        1 sub 6
385   863C 28 03        	jr z,2F
386   863E 24           	inc h
387   863F 18 F9        	jr 1B
388   8641 24           2 inc h
389   8642 7C           	ld a,h
390   8643 32 2B 85     	ld (Numero_de_malotes),a
391   8646 C9           	ret
392   8647
393   8647              ; *************************************************************************************************************************************************************
394   8647              ;
395   8647              ; 20/10/22
396   8647              ;
397   8647              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
398   8647              ;
399   8647              ; Destruye el puntero y DE !!!!!
400   8647
401   8647 5E           Extrae_address ld e,(hl)
402   8648 23           	inc hl
403   8649 56           	ld d,(hl)
404   864A 2B           	dec hl
405   864B EB           	ex de,hl
406   864C C9           	ret
407   864D
408   864D              ; *************************************************************************************************************************************************************
409   864D              ;
410   864D              ;	21/9/22
411   864D              ;
412   864D              ;   Destruye HL y BC !!!!!,
413   864D
414   864D 2A FA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
415   8650 22 FC 84     	ld (Puntero_DESPLZ),hl
416   8653 CD 47 86     	call Extrae_address
417   8656 22 F4 84     	ld (Puntero_objeto),hl
418   8659
419   8659              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
420   8659
421   8659 21 10 83     	ld hl,Amadeus
422   865C ED 4B F4 84  	ld bc,(Puntero_objeto)
423   8660 B7 ED 42     	sub hl,bc
424   8663 C0           	ret nz
425   8664
426   8664 21 17 85     	ld hl,Ctrl_0
427   8667 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
428   8669
429   8669 C9            	ret 												; _de nuestra nave en los extremos.
430   866A
431   866A              ; *************************************************************************************************************************************************************
432   866A              ;
433   866A              ;	8/1/23
434   866A              ;
435   866A              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
436   866A              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
437   866A
438   866A              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
439   866A              ;	_de la 2ª y 3ª entidad respectivamente.
440   866A
441   866A
442   866A
443   866A              Store_Restore_entidades
444   866A
445   866A E5           	push hl
446   866B D5           	push de
447   866C C5            	push bc
448   866D
449   866D              ;	STORE !!!!!
450   866D
451   866D 21 F0 84     	ld hl,Filas
452   8670 ED 5B 24 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
453   8674 01 3A 00     	ld bc,58
454   8677 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
455   8679
456   8679              ;	Incrementa STORE y ejecuta RESTORE !!!!!
457   8679
458   8679 2A 26 85     	ld hl,(Puntero_restore_entidades)
459   867C 22 24 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
460   867F 11 F0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
461   8682 01 3A 00     	ld bc,58
462   8685 ED B0        	ldir
463   8687
464   8687              ;	Incrementa RESTORE !!!!!
465   8687
466   8687 2A 28 85         ld hl,(Indice_restore)
467   868A 23           	inc hl
468   868B 23           	inc hl
469   868C 22 28 85     	ld (Indice_restore),hl
470   868F CD 47 86         call Extrae_address
471   8692 22 26 85         ld (Puntero_restore_entidades),hl
472   8695
473   8695 C1           	pop bc
474   8696 D1           	pop de
475   8697 E1           	pop hl
476   8698
477   8698 C9           	ret
478   8699
479   8699              ; **************************************************************************************************
480   8699              ;
481   8699              ;	29/10/22
482   8699              ;
483   8699              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
484   8699
485   8699 E5           Restore_Primera_entidad push hl
486   869A D5           	push de
487   869B C5            	push bc
488   869C 2A 24 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
489   869F 11 F0 84     	ld de,Filas
490   86A2 01 3A 00     	ld bc,58
491   86A5 ED B0        	ldir
492   86A7 C1           	pop bc
493   86A8 D1           	pop de
494   86A9 E1           	pop hl
495   86AA C9           	ret
496   86AB
497   86AB              ; *************************************************************************************************************************************************************
498   86AB              ;
499   86AB              ; Teclado.
500   86AB
501   86AB 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
502   86AD DB FE        	in a,($fe)
503   86AF E6 01        	and $01
504   86B1 28 02        	jr z,1f
505   86B3 18 F6        	jr Pulsa_ENTER
506   86B5 C9           1 ret
507   86B6
508   86B6              ; **************************************************************************************************
509   86B6              ;
510   86B6              ; Temporización.
511   86B6
512   86B6              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
513   86B6              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
514   86B6              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
515   86B6              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
516   86B6
517   86B6              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
518   86B6              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
519   86B6              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
520   86B6
521   86B6              ; A partir de $4f61 no hace falta DELAY.
522   86B6
523   86B6              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
524   86B6
525   86B6 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
526   86B9 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
527   86BA 78           	LD A,B
528   86BB A7           	AND A
529   86BC 20 FB        	JR NZ,wait
530   86BE C9           	RET
531   86BF
532   86BF              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
533   86BF              ;
534   86BF              ;	21/4/22
535   86BF
536   86BF              Movimiento_Amadeus
537   86BF
538   86BF 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
539   86C1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
540   86C3 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
541   86C5 CC D7 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
542   86C8 3E F7        	ld a,$f7
543   86CA DB FE        	in a,($fe)
544   86CC E6 01        	and $01
545   86CE C8           	ret z
546   86CF 3E F7        	ld a,$f7
547   86D1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
548   86D3 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
549   86D5 CC E4 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
550   86D8 C9               ret
551   86D9
552   86D9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
553   86D9
554   86D9              ; Pinta indicadores de FILAS. ------------------------------------------------------
555   86D9
556   86D9 21 10 40     Pinta_FILAS ld hl,$4010
557   86DC              ;	ld b,9
558   86DC              ;2 push hl
559   86DC              ;	push bc
560   86DC 06 BF        	ld b,$bf
561   86DE 36 80        1 ld (hl),%10000000
562   86E0 CD E3 89     	call NextScan
563   86E3 10 F9        	djnz 1B
564   86E5              ;	pop bc
565   86E5              ;	pop hl
566   86E5              ;	inc l
567   86E5              ;	djnz 2B
568   86E5
569   86E5 06 03        	ld b,3
570   86E7 21 00 47         ld hl,$4700
571   86EA CD F0 86     3 call Bucle_1
572   86ED 10 FB            djnz 3B
573   86EF C9               ret
574   86F0
575   86F0 C5           Bucle_1 push bc
576   86F1 E5                   push hl
577   86F2 D1                   pop de
578   86F3 13                   inc de
579   86F4 01 FF 00             ld bc,255
580   86F7 36 FF                ld (hl),255
581   86F9 ED B0                ldir
582   86FB 23                   inc hl
583   86FC 3E 07                ld a,7
584   86FE 84                   add a,h
585   86FF 67                   ld h,a
586   8700 C1                   pop bc
587   8701 C9                   ret
588   8702
589   8702              ; ---------------------------------------------------------------
590   8702
591   8702              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8702              ; ******************************************************************************************************************************************************************************************
  2+  8702              ;
  3+  8702              ; 01/23
  4+  8702              ;
  5+  8702              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8702
  7+  8702 CD D7 89     Draw call Prepara_draw
  8+  8705 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8706 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8707 28 05        	jr z,2F
 11+  8709 3A 00 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  870C 18 0C        	jr 1F
 13+  870E 2A FE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8711 22 F2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8714 CD 9E 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8717              ;													; _la esquina superior izquierda de la pantalla.
 17+  8717 CD 51 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  871A 3A 17 85     1 ld a,(Ctrl_0)
 19+  871D CB 6F        	bit 5,a
 20+  871F 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8721
 22+  8721 CD 39 87     	call Comprueba_limite_horizontal
 23+  8724 CD C7 87     	call Comprueba_limite_vertical
 24+  8727
 25+  8727              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8727
 27+  8727 CD 11 89     3 call calcula_CColumnass
 28+  872A CD 48 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  872D CD 9D 89     	call Define_rutina_de_impresion
 30+  8730
 31+  8730 3A 17 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8733 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8735 32 17 85     	ld (Ctrl_0),a
 34+  8738
 35+  8738 C9           	ret
 36+  8739
 37+  8739              ; *******************************************************************************************************************************************************************************************
 38+  8739              ;	17/1/23
 39+  8739              ;
 40+  8739              ; 	Comprueba_limite_horizontal.
 41+  8739              ;
 42+  8739
 43+  8739              Comprueba_limite_horizontal
 44+  8739
 45+  8739 3A 17 85     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^1F^ para comprobar_
 46+  873C CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 47+  873E 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 48+  8740
 49+  8740 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 50+  8742 32 17 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 51+  8745 18 09            jr 6F
 52+  8747 CB 5F        1 bit 3,a
 53+  8749 28 0A            jr z,2F
 54+  874B E6 F7            and $f7
 55+  874D 32 17 85         ld (Ctrl_0),a
 56+  8750
 57+  8750 CD 9E 88     6 call Inicializacion
 58+  8753
 59+  8753 18 59            jr 5F
 60+  8755 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 61+  8756
 62+  8756              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 63+  8756              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 64+  8756
 65+  8756 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 66+  8757 2A 21 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 67+  875A CD 3C 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 68+  875D 67           	ld h,a
 69+  875E EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 70+  875F CD 3C 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 71+  8762 67           	ld h,a
 72+  8763 A7           	and a
 73+  8764 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 74+  8766 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 75+  8767
 76+  8767 3A 00 85     	ld a,(Cuad_objeto)
 77+  876A FE 02        	cp 2
 78+  876C 38 1C        	jr c,3F
 79+  876E 28 1A        	jr z,3F
 80+  8770
 81+  8770 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 82+  8771 28 21            jr z,7F
 83+  8773 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 84+  8775              ;	ld e,0
 85+  8775 E1           	pop hl
 86+  8776
 87+  8776              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 88+  8776              ; _para indicar con E="2" en caso necesario.
 89+  8776
 90+  8776 E5               push hl
 91+  8777 C5               push bc
 92+  8778
 93+  8778 CD 3C 8C     	call calcula_tercio
 94+  877B FE 01        	cp 1
 95+  877D 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 96+  877F
 97+  877F CD AF 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8782 28 26            jr z,9F
 99+  8784 38 24            jr c,9F
100+  8786 1E 00        11 ld e,0
101+  8788 18 22            jr 8F
102+  878A
103+  878A 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  878B 28 07        	jr z, 7F
105+  878D 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  878F 1E 00         	ld e,0
107+  8791 E1           	pop hl
108+  8792 18 04        	jr 4F
109+  8794 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8796 18 15            jr 10F
111+  8798
112+  8798              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8798              ; _para indicar con E="2" en caso necesario.
114+  8798
115+  8798 E5           4 push hl
116+  8799 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  879A
118+  879A CD 3C 8C     	call calcula_tercio
119+  879D FE 01        	cp 1
120+  879F 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
121+  87A1 CD AF 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
122+  87A4 28 04            jr z,9F
123+  87A6 30 02            jr nc,9F
124+  87A8 18 02        	jr 8F
125+  87AA 1E 02        9 ld e,2
126+  87AC C1           8 pop bc
127+  87AD E1           10 pop hl
128+  87AE C9           5 ret
129+  87AF
130+  87AF              ; --------------------
131+  87AF              ;
132+  87AF              ; 25/08/22
133+  87AF
134+  87AF CD 3C 8C     Comprueba_centro call calcula_tercio
135+  87B2 67               ld h,a
136+  87B3 08           	ex af,af
137+  87B4 FE 02        	cp 2
138+  87B6 38 07        	jr c,1F
139+  87B8 28 05        	jr z,1F
140+  87BA 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
141+  87BD 18 03        	jr 2F
142+  87BF 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
143+  87C2 08           2 ex af,af
144+  87C3 A7               and a
145+  87C4 ED 42            sbc hl,bc
146+  87C6 C9               ret
147+  87C7
148+  87C7              ; *********************************************************************************************************************************************************************************************
149+  87C7              ;
150+  87C7              ;   16/8/22
151+  87C7              ;
152+  87C7              ;	Comprueba_limite_vertical
153+  87C7              ;
154+  87C7              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
155+  87C7              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
156+  87C7              ;
157+  87C7
158+  87C7              Comprueba_limite_vertical
159+  87C7
160+  87C7              ;	ld a,(Obj_dibujado)
161+  87C7              ;	and a
162+  87C7              ;	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
163+  87C7
164+  87C7              ;	jr $
165+  87C7
166+  87C7 7D           	ld a,l
167+  87C8 E6 1F        	and $1F
168+  87CA 57           	ld d,a
169+  87CB 3A 23 85     	ld a,(Limite_vertical)
170+  87CE BA           	cp d 											; Límite - Posición.
171+  87CF 08           	ex af,af 										; Resultado de CP d en F'.
172+  87D0
173+  87D0 3A 00 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
174+  87D3 CB 47        	bit 0,a
175+  87D5 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
176+  87D7
177+  87D7              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
178+  87D7
179+  87D7 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
180+  87D8 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
181+  87DA
182+  87DA               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
183+  87DA              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
184+  87DA
185+  87DA 3A F7 84         ld a,(Coordenada_X)
186+  87DD 16 0F            ld d,Centro_izquierda
187+  87DF A7               and a
188+  87E0 92               sub d 											 ; Posición - Centro_izquierda.
189+  87E1
190+  87E1 28 21            jr z,3F
191+  87E3 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
192+  87E5              ;                                                    ; _salimos sin modificar nada.
193+  87E5 18 0E            jr 2F
194+  87E7
195+  87E7 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
196+  87E8 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
197+  87EA
198+  87EA              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
199+  87EA              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
200+  87EA
201+  87EA 3A F7 84         ld a,(Coordenada_X)
202+  87ED 16 10            ld d,Centro_derecha
203+  87EF A7               and a
204+  87F0 92               sub d
205+  87F1
206+  87F1 28 11            jr z,3F
207+  87F3 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
208+  87F5              ;                                                    ; _salimos sin modificar nada.
209+  87F5 CB 43        2 bit 0,e
210+  87F7 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
211+  87F9 C5           	push bc
212+  87FA CD 8D 88         call Modificaccionne
213+  87FD C1           	pop bc
214+  87FE CD 9E 88         call Inicializacion
215+  8801 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
216+  8802 08           	ex af,af
217+  8803 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
218+  8804 C9           3 ret 				 								 ; Salimos de la rutina.
219+  8805
220+  8805              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
221+  8805
222+  8805 C5           4 push bc
223+  8806 01 F1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
224+  8809 0A           	ld a,(bc)
225+  880A 3D           	dec a
226+  880B 47           	ld b,a 											 ; Columnas-1 en B.
227+  880C 7D           	ld a,l
228+  880D 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
229+  880E CB 47        	bit 0,a
230+  8810 28 03        	jr z,5F
231+  8812 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
232+  8813 18 2E        	jr 7F
233+  8815
234+  8815              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
235+  8815
236+  8815 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
237+  8816 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
238+  8817 3A 17 85     	ld a,(Ctrl_0)
239+  881A CB 4F        	bit 1,a
240+  881C 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
241+  881E F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
242+  881F
243+  881F              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
244+  881F
245+  881F 1C               inc e
246+  8820 1D               dec e
247+  8821 20 07            jr nz,12F
248+  8823 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
249+  8824 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
250+  8825 22 F2 84     	ld (Posicion_actual),hl
251+  8828 18 44        13 jr 9F
252+  882A
253+  882A CB 43        12 bit 0,e
254+  882C 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
255+  882E              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
256+  882E C1           	pop bc
257+  882F 18 D3        	jr 3B
258+  8831
259+  8831 80           14 add b
260+  8832 6F               ld l,a
261+  8833 22 F2 84     	ld (Posicion_actual),hl
262+  8836 CD 8D 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
263+  8839 18 33            jr 9F 											 ; _inicializamos y salimos.
264+  883B
265+  883B E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
266+  883D 32 17 85         ld (Ctrl_0),a
267+  8840 F1           	pop af
268+  8841 18 2B        	jr 9F
269+  8843
270+  8843              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
271+  8843
272+  8843 F5           7 push af
273+  8844 3A 17 85     	ld a,(Ctrl_0)
274+  8847 CB 47        	bit 0,a
275+  8849 20 1D        	jr nz,8F
276+  884B F1           	pop af
277+  884C
278+  884C              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
279+  884C
280+  884C 1C           	inc e
281+  884D 1D               dec e
282+  884E 20 07            jr nz,10F
283+  8850
284+  8850 90           	sub b
285+  8851 6F               ld l,a
286+  8852 22 F2 84     	ld (Posicion_actual),hl
287+  8855 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
288+  8857              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
289+  8857 CB 43        10 bit 0,e
290+  8859 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
291+  885B              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
292+  885B C1           	pop bc
293+  885C 18 A6        	jr 3B
294+  885E
295+  885E 90           16 sub b
296+  885F 6F               ld l,a
297+  8860 22 F2 84     	ld (Posicion_actual),hl
298+  8863 CD 8D 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
299+  8866 18 06            jr 9F
300+  8868
301+  8868 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
302+  886A 32 17 85         ld (Ctrl_0),a
303+  886D F1           	pop af
304+  886E
305+  886E C1           9 pop bc
306+  886F              ;	ld e,0
307+  886F CD 9E 88         call Inicializacion
308+  8872 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
309+  8873 08           	ex af,af
310+  8874 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
311+  8875 18 8D            jr 3B
312+  8877
313+  8877              ; --------------------
314+  8877
315+  8877              Modifica_Pos_actual
316+  8877
317+  8877              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
318+  8877
319+  8877 05               dec B                                           ; Scanlines-1 en B.
320+  8878 CD F2 89     1 call PreviousScan
321+  887B 10 FB            djnz 1B
322+  887D 22 F2 84     	ld (Posicion_actual),hl
323+  8880 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
324+  8881 C9           	ret
325+  8882
326+  8882              ; --------------------
327+  8882
328+  8882              Modifica_Pos_actual2
329+  8882
330+  8882              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
331+  8882
332+  8882 05               dec B                                           ; Scanlines-1 en B.
333+  8883 CD E3 89     1 call NextScan
334+  8886 10 FB            djnz 1B
335+  8888 22 F2 84     	ld (Posicion_actual),hl
336+  888B AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
337+  888C C9           	ret
338+  888D
339+  888D              ; --------------------
340+  888D
341+  888D              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
342+  888D              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
343+  888D
344+  888D 08           Modificaccionne ex af,af
345+  888E FE 02            cp 2
346+  8890 F5               push af                                         ; Guardo el resultado de la comparación.
347+  8891 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
348+  8892 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
349+  8893 CC 77 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
350+  8896 DC 77 88         call c,Modifica_Pos_actual
351+  8899 C8           	ret z
352+  889A CD 82 88         call Modifica_Pos_actual2
353+  889D C9               ret
354+  889E
355+  889E              ; *************************************************************************************************************************************************************************************************
356+  889E              ;
357+  889E              ;	13/8/22
358+  889E              ;
359+  889E              ;	Inicializacion
360+  889E              ;
361+  889E              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
362+  889E              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
363+  889E              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
364+  889E              ;
365+  889E              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
366+  889E              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
367+  889E              ;	_ desaparece/aparece.
368+  889E
369+  889E              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
370+  889E              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
371+  889E              ;
372+  889E              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
373+  889E              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
374+  889E              ; 		   [E] ="0"
375+  889E
376+  889E              ; 	OUTPUT: DESTRUYE [AF] y [D].
377+  889E
378+  889E CD 3C 8C     Inicializacion call calcula_tercio
379+  88A1 28 36        	jr z,primit
380+  88A3 E6 02        	and 2
381+  88A5 20 07        	jr nz,segmit
382+  88A7 7D           	ld a,l
383+  88A8 FE 7F        	cp $7f
384+  88AA 38 2D        	jr c,primit
385+  88AC 28 2B        	jr z,primit
386+  88AE CD 0B 89     segmit call column
387+  88B1 38 13        	jr c,tercuad
388+  88B3 3E 04        cuarcuad ld a,4
389+  88B5 32 00 85     	ld (Cuad_objeto),a
390+  88B8 21 20 48     	ld hl,$4820
391+  88BB 22 21 85     	ld (Limite_horizontal),hl
392+  88BE 21 23 85     	ld hl,Limite_vertical
393+  88C1 36 0D        	ld (hl),$0d
394+  88C3 08           	ex af,af
395+  88C4 18 3C        	jr 1F
396+  88C6              tercuad
397+  88C6              ;	call Fija_punteros
398+  88C6 3E 03        	ld a,3
399+  88C8 32 00 85     	ld (Cuad_objeto),a
400+  88CB 21 20 48     	ld hl,$4820
401+  88CE 22 21 85     	ld (Limite_horizontal),hl
402+  88D1 21 23 85     	ld hl,Limite_vertical
403+  88D4 36 12        	ld (hl),$12
404+  88D6 08           	ex af,af
405+  88D7 18 29        	jr 1F
406+  88D9 CD 0B 89     primit call column
407+  88DC 38 13        	jr c, primcuad
408+  88DE              segcuad
409+  88DE              ;	call Fija_punteros
410+  88DE 3E 02        	ld a,2
411+  88E0 32 00 85     	ld (Cuad_objeto),a
412+  88E3 21 C0 4F     	ld hl,$4fc0
413+  88E6 22 21 85     	ld (Limite_horizontal),hl
414+  88E9 21 23 85     	ld hl,Limite_vertical
415+  88EC 36 0D        	ld (hl),$0d
416+  88EE 08           	ex af,af
417+  88EF 18 11        	jr 1F
418+  88F1              primcuad
419+  88F1              ;	call Fija_punteros
420+  88F1 3E 01        	ld a,1
421+  88F3 32 00 85     	ld (Cuad_objeto),a
422+  88F6 21 C0 4F     	ld hl,$4fc0
423+  88F9 22 21 85     	ld (Limite_horizontal),hl
424+  88FC 21 23 85     	ld hl,Limite_vertical
425+  88FF 36 12        	ld (hl),$12
426+  8901 08           	ex af,af
427+  8902 CD 57 8F     1 call Genera_coordenadas
428+  8905 21 17 85     	ld hl,Ctrl_0
429+  8908 CB EE        	set 5,(hl)
430+  890A C9           	ret
431+  890B
432+  890B              ; ------------------------------------------------------------------------------------------------------------------
433+  890B
434+  890B              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
435+  890B              ;
436+  890B              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
437+  890B
438+  890B 7D           column ld a,l
439+  890C E6 1F        	and $1f
440+  890E FE 10         	cp $10
441+  8910 C9            	ret
442+  8911
443+  8911              ; --------------------------------------------------------------------------------------------------------------------
444+  8911              ;
445+  8911              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
446+  8911              ;
447+  8911              ; 14/12/22
448+  8911              ;
449+  8911              ;	Modifica: A y BC.
450+  8911
451+  8911 3A 00 85     calcula_CColumnass ld a,(Cuad_objeto)
452+  8914 E6 01        	and 1
453+  8916 28 17        	jr z,1F
454+  8918
455+  8918              ; Nos encontramos en la parte izquierda de la pantalla
456+  8918
457+  8918 3A F7 84     	ld a,(Coordenada_X)
458+  891B 47           	ld b,a
459+  891C 04           	inc b											; (Coordenada_X)+1 en B.
460+  891D 79           	ld a,c
461+  891E 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
462+  891F 38 08        	jr c,2F
463+  8921 47           	ld b,a
464+  8922 79           	ld a,c
465+  8923 90           	sub b
466+  8924 32 20 85     	ld (Columnas),a
467+  8927 18 1B        	jr 4F
468+  8929 79           2 ld a,c
469+  892A 32 20 85     	ld (Columnas),a
470+  892D 18 15        	jr 4F
471+  892F
472+  892F              ; Nos encontramos en la parte derecha de la pantalla.
473+  892F
474+  892F 3A F7 84     1 ld a,(Coordenada_X)
475+  8932 81           	add c
476+  8933 3D           	dec a
477+  8934 D6 1F        	sub $1f
478+  8936 38 08        	jr c,3F
479+  8938 47           	ld b,a
480+  8939 79           	ld a,c
481+  893A 90           	sub b
482+  893B 32 20 85     	ld (Columnas),a
483+  893E 18 04        	jr 4F
484+  8940 79           3 ld a,c
485+  8941 32 20 85     	ld (Columnas),a
486+  8944 D9           4 exx
487+  8945 4F           	ld c,a
488+  8946 D9           	exx
489+  8947 C9            ret
490+  8948
491+  8948              ; --------------------------------------------------------------------------------------------------------------------
492+  8948              ;
493+  8948              ; 7/1/23
494+  8948              ;
495+  8948              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
496+  8948              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
497+  8948              ;
498+  8948              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
499+  8948              ;	DESTRUYE: HL,B Y A.
500+  8948
501+  8948 3A 00 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
502+  894B FE 02        	cp 2
503+  894D 38 18        	jr c,1F
504+  894F 28 16        	jr z,1F
505+  8951 E6 01        	and 1
506+  8953 28 0D        	jr z,3F
507+  8955
508+  8955              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
509+  8955
510+  8955 CD 91 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
511+  8958
512+  8958 7D           9 ld a,l
513+  8959 E6 1F        	and $1f
514+  895B 28 2A        	jr z,7F
515+  895D 2B           	dec hl
516+  895E 10 F8        	djnz 9B
517+  8960 18 25        	jr 7F
518+  8962
519+  8962              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
520+  8962
521+  8962 2A F2 84     3 ld hl,(Posicion_actual)
522+  8965 18 20        	jr 7F
523+  8967
524+  8967 28 14        1 jr z,2F
525+  8969
526+  8969              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
527+  8969
528+  8969 CD 91 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
529+  896C 7D           4 ld a,l
530+  896D E6 1F        	and $1f
531+  896F 28 03        	jr z,6F
532+  8971 2B           	dec hl
533+  8972 10 F8        	djnz 4B
534+  8974 06 0F        6 ld b,15
535+  8976 CD F2 89     5 call PreviousScan
536+  8979 10 FB        	djnz 5B
537+  897B 18 0A        	jr 7F
538+  897D
539+  897D              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
540+  897D
541+  897D CD 91 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8980 06 0F        	ld b,15
543+  8982 CD F2 89     8 call PreviousScan
544+  8985 10 FB        	djnz 8B
545+  8987
546+  8987 E5           7 push hl
547+  8988 DD E1        	pop ix
548+  898A
549+  898A 2A F4 84     	ld hl,(Puntero_objeto)
550+  898D E5           	push hl
551+  898E FD E1        	pop iy
552+  8990
553+  8990 C9           	ret
554+  8991
555+  8991              ; --------------------------------------------------------------------------------------------------------------------
556+  8991              ;
557+  8991              ;	2/1/23
558+  8991              ;
559+  8991              ;	Sub-rutina de [Calcula_puntero_de_impresion].
560+  8991              ;
561+  8991              ;	Tras esta rutina tenemos:
562+  8991              ;
563+  8991              ;	OUTPUT: HL contiene (Posicion_actual).
564+  8991              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
565+  8991              ;
566+  8991              ;	DESTRUYE!!!!! HL,B y A.
567+  8991
568+  8991 2A F2 84     Operandos ld hl,(Posicion_actual)
569+  8994 3A 20 85     	ld a,(Columnas)
570+  8997 3D           	dec a
571+  8998 20 01        	jr nz,1F
572+  899A 3C           	inc a
573+  899B 47           1 ld b,a
574+  899C C9           	ret
575+  899D
576+  899D              ; --------------------------------------------------------------------------------------------------------------------
577+  899D              ;
578+  899D              ;	3/1/23
579+  899D              ;
580+  899D              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
581+  899D              ;
582+  899D              ;	Destruye: A,B,HL y DE.
583+  899D
584+  899D              Define_rutina_de_impresion
585+  899D
586+  899D 3A F1 84     	ld a,(Columns)
587+  89A0 47           	ld b,a
588+  89A1 3A 20 85     	ld a,(Columnas)
589+  89A4 B8           	cp b
590+  89A5 20 0D        	jr nz,2f
591+  89A7
592+  89A7              ;	La entidad se imprime entera.
593+  89A7
594+  89A7 21 39 8A     	ld hl, Indice_entidades_completas
595+  89AA E6 01        	and 1
596+  89AC 28 02        	jr z,1F
597+  89AE
598+  89AE 23           	inc hl
599+  89AF 23           	inc hl
600+  89B0
601+  89B0 CD 47 86     1 call Extrae_address
602+  89B3 C9           	ret		;	ret
603+  89B4
604+  89B4              ;	La entidad no se imprime entera en pantalla.
605+  89B4
606+  89B4 3A 00 85     2 ld a,(Cuad_objeto)
607+  89B7 E6 01        	and 1
608+  89B9 28 17        	jr z,3F
609+  89BB
610+  89BB              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
611+  89BB
612+  89BB 21 3D 8A     	ld hl, Indice_entidades_incompletas_izquierda
613+  89BE 3A F1 84     4 ld a,(Columns)
614+  89C1 E6 01        	and 1
615+  89C3 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
616+  89C5
617+  89C5 23           	inc hl
618+  89C6 23           	inc hl
619+  89C7
620+  89C7 3A 20 85     	ld a,(Columnas)
621+  89CA E6 01        	and 1
622+  89CC 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
623+  89CE
624+  89CE 23           	inc hl
625+  89CF 23           	inc hl
626+  89D0
627+  89D0 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
628+  89D2
629+  89D2 21 43 8A     3 ld hl, Indice_entidades_incompletas_derecha
630+  89D5 18 E7        	jr 4B
631+  89D7
632+  89D7              ; --------------------------------------------------------------------------------------------------------------------
633+  89D7              ;
634+  89D7              ;	Prepara_draw
635+  89D7              ;
636+  89D7              ;	Es una rutina de carga.
637+  89D7              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
638+  89D7              ;
639+  89D7              ;	FUNCIONAMIENTO:
640+  89D7              ;
641+  89D7              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
642+  89D7              ;	- LD (Posicion_actual) del objeto en [HL].
643+  89D7              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
644+  89D7              ;
645+  89D7              ;	DESTRUYE:
646+  89D7              ;
647+  89D7              ;	Logicamente, BC,HL y E quedan destruidos.
648+  89D7
649+  89D7 21 F0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
650+  89DA 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
651+  89DB 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
652+  89DC 4E           	ld c,(hl)
653+  89DD 2A F2 84     	ld hl,(Posicion_actual)
654+  89E0 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
655+  89E2 C9           	ret
656+  89E3
657+  89E3              ;----------------------------------------------------------------------------------------------------------------
658+  89E3              ;
659+  89E3              ;	5/08/22
660+  89E3              ;
661+  89E3              ;   NextScan.
662+  89E3              ;
663+  89E3              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
664+  89E3              ;
665+  89E3              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
666+  89E3              ;
667+  89E3              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
668+  89E3              ;
669+  89E3              ;       DESTRUIDOS: AF y HL !!!
670+  89E3              ;
671+  89E3              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
672+  89E3              ;
673+  89E3
674+  89E3 24           NextScan inc h          ; Incrementamos el scanline.
675+  89E4 7C               ld a,h
676+  89E5 E6 07            and 7
677+  89E7 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
678+  89E8
679+  89E8 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
680+  89E9 C6 20            add a,$20           ; Vamos a comprobarlo...
681+  89EB 6F               ld l,a
682+  89EC D8               ret c               ; Salimos si se produce el cambio de tercio.
683+  89ED
684+  89ED 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
685+  89EE D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
686+  89F0 67               ld h,a
687+  89F1 C9               ret
688+  89F2
689+  89F2              ;----------------------------------------------------------------------------------------------------------------
690+  89F2              ;
691+  89F2              ;	5/08/22
692+  89F2              ;
693+  89F2              ;   PreviousScan.
694+  89F2              ;
695+  89F2              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
696+  89F2              ;
697+  89F2              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
698+  89F2              ;
699+  89F2              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
700+  89F2              ;
701+  89F2              ;       DESTRUIDOS: AF y HL !!!
702+  89F2              ;
703+  89F2              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
704+  89F2              ;
705+  89F2
706+  89F2 7C           PreviousScan ld a,h
707+  89F3 25               dec h               ; Dec H.
708+  89F4 E6 07            and 7
709+  89F6 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
710+  89F7
711+  89F7 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
712+  89F8 D6 20            sub $20             ; Vamos a comprobarlo...
713+  89FA 6F               ld l,a
714+  89FB D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
715+  89FC
716+  89FC 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
717+  89FD C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
718+  89FF 67               ld h,a
719+  8A00 C9               ret
720+  8A01
721+  8A01              ; -----------------------------------------------------------------------------------
722+  8A01              ;
723+  8A01              ;	15/1/23
724+  8A01
725+  8A01 ED 73 2C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
726+  8A05 31 00 70     	ld sp,Album_de_fotos
727+  8A08
728+  8A08 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
729+  8A0A E1           	pop hl																	; Puntero de impresión de pantalla en HL.
730+  8A0B D1           	pop de																	; Dirección de la rutina de impresión en DE.
731+  8A0C
732+  8A0C ED 73 2E 85  	ld (Stack_2),sp
733+  8A10 ED 7B 2C 85  	ld sp,(Stack)
734+  8A14
735+  8A14              ; Fabrica la llamada a la correspondiente rutina de impresión.
736+  8A14
737+  8A14 3E CD        	ld a,$cd
738+  8A16 32 1E 8A     	ld (Imprime),a
739+  8A19 EB           	ex de,hl
740+  8A1A 22 1F 8A     	ld (Imprime+1),hl
741+  8A1D EB           	ex de,hl
742+  8A1E
743+  8A1E              ; Ejecuta la llamada:	CALL $xx,xx
744+  8A1E
745+  8A1E 00 00 00     Imprime db 0,0,0
746+  8A21
747+  8A21 ED 73 2C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
748+  8A25
749+  8A25 3A 2B 85     	ld a,(Numero_de_malotes)
750+  8A28 3D           	dec a
751+  8A29 28 09        	jr z,1F
752+  8A2B 32 2B 85      	ld (Numero_de_malotes),a
753+  8A2E ED 7B 2E 85  	ld sp,(Stack_2)
754+  8A32 18 D4        	jr 2B
755+  8A34
756+  8A34 AF           1 xor a
757+  8A35 32 2E 85     	ld (Stack_2),a
758+  8A38 C9           	ret
759+  8A39
760+  8A39
# file closed: Draw_XOR.asm
592   8A39              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A39              ;   índices de Rutinas de impresión.
  2+  8A39
  3+  8A39 49 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A3B 76 8A            defw Pinta_Amadeus_3x2
  5+  8A3D
  6+  8A3D CC 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A3F 6C 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A41 20 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A43
 10+  8A43 F6 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A45 FA 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A47 AE 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A49
 14+  8A49
 15+  8A49              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A49              ;
 17+  8A49              ;   12/12/22
 18+  8A49              ;
 19+  8A49              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A49              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A49              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A49              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A49              ;
 24+  8A49              ;   Modifica: DE y HL.
 25+  8A49
 26+  8A49 ED 73 2C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A4D FD F9        	ld sp,iy
 28+  8A4F 06 10            ld b,16
 29+  8A51 D1           1 pop de
 30+  8A52 7B               ld a,e
 31+  8A53 AE               xor (hl)
 32+  8A54 77           	ld (hl),a
 33+  8A55 23           	inc hl
 34+  8A56 7A               ld a,d
 35+  8A57 AE               xor (hl)
 36+  8A58 77           	ld (hl),a
 37+  8A59 2B           	dec hl
 38+  8A5A 24           	inc h
 39+  8A5B 7C               ld a,h
 40+  8A5C E6 07            and 7
 41+  8A5E 20 0A            jr nz,2F
 42+  8A60 7D               ld a,l
 43+  8A61 C6 20            add a,$20
 44+  8A63 6F               ld l,a
 45+  8A64 38 04            jr c,2F
 46+  8A66 7C               ld a,h
 47+  8A67 D6 08            sub 8
 48+  8A69 67               ld h,a
 49+  8A6A 7C           2 ld a,h
 50+  8A6B FE 58            cp $58
 51+  8A6D 28 02            jr z,3F
 52+  8A6F 10 E0            djnz 1B
 53+  8A71 ED 7B 2C 85  3 ld sp,(Stack)
 54+  8A75 C9           	ret
 55+  8A76
 56+  8A76 ED 73 2C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A7A FD F9        	ld sp,iy
 58+  8A7C 06 08            ld b,8
 59+  8A7E D1           1 pop de
 60+  8A7F 7B               ld a,e
 61+  8A80 AE               xor (hl)
 62+  8A81 77           	ld (hl),a
 63+  8A82 23           	inc hl
 64+  8A83 7A               ld a,d
 65+  8A84 AE               xor (hl)
 66+  8A85 77           	ld (hl),a
 67+  8A86 23           	inc hl
 68+  8A87 D1           	pop de
 69+  8A88 7B               ld a,e
 70+  8A89 AE               xor (hl)
 71+  8A8A 77           	ld (hl),a
 72+  8A8B 2B           	dec hl
 73+  8A8C 2B           	dec hl
 74+  8A8D 24           	inc h
 75+  8A8E 7C               ld a,h
 76+  8A8F E6 07            and 7
 77+  8A91 20 0A            jr nz,2F
 78+  8A93 7D               ld a,l
 79+  8A94 C6 20            add a,$20
 80+  8A96 6F               ld l,a
 81+  8A97 38 04            jr c,2F
 82+  8A99 7C               ld a,h
 83+  8A9A D6 08            sub 8
 84+  8A9C 67               ld h,a
 85+  8A9D 7C           2 ld a,h
 86+  8A9E FE 58            cp $58
 87+  8AA0 28 25            jr z,4F
 88+  8AA2 7A               ld a,d
 89+  8AA3 AE               xor (hl)
 90+  8AA4 77               ld (hl),a
 91+  8AA5 D1           	pop de
 92+  8AA6 23           	inc hl
 93+  8AA7 7B               ld a,e
 94+  8AA8 AE               xor (hl)
 95+  8AA9 77           	ld (hl),a
 96+  8AAA 23           	inc hl
 97+  8AAB 7A               ld a,d
 98+  8AAC AE               xor (hl)
 99+  8AAD 77           	ld (hl),a
100+  8AAE 2B           	dec hl
101+  8AAF 2B           	dec hl
102+  8AB0 24           	inc h
103+  8AB1 7C               ld a,h
104+  8AB2 E6 07            and 7
105+  8AB4 20 0A            jr nz,3F
106+  8AB6 7D               ld a,l
107+  8AB7 C6 20            add a,$20
108+  8AB9 6F               ld l,a
109+  8ABA 38 04            jr c,3F
110+  8ABC 7C               ld a,h
111+  8ABD D6 08            sub 8
112+  8ABF 67               ld h,a
113+  8AC0 7C           3 ld a,h
114+  8AC1 FE 58            cp $58
115+  8AC3 28 02            jr z,4F
116+  8AC5 10 B7            djnz 1B
117+  8AC7 ED 7B 2C 85  4 ld sp,(Stack)
118+  8ACB C9           	ret
119+  8ACC
120+  8ACC              ; ---------------------------------------------------
121+  8ACC
122+  8ACC ED 73 2C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AD0 FD F9        	ld sp,iy
124+  8AD2 06 10            ld b,16
125+  8AD4 D1           1 pop de
126+  8AD5 7A           	ld a,d
127+  8AD6 AE           	xor (hl)
128+  8AD7 77           	ld (hl),a
129+  8AD8 24           	inc h
130+  8AD9 7C               ld a,h
131+  8ADA E6 07            and 7
132+  8ADC 20 0C            jr nz,2F
133+  8ADE 7D               ld a,l
134+  8ADF C6 20            add a,$20
135+  8AE1 6F               ld l,a
136+  8AE2 38 06            jr c,2F
137+  8AE4 7C               ld a,h
138+  8AE5 D6 08            sub 8
139+  8AE7 67               ld h,a
140+  8AE8 18 00            jr 2F
141+  8AEA 7C           2 ld a,h
142+  8AEB FE 58            cp $58
143+  8AED 28 02            jr z,3F
144+  8AEF 10 E3            djnz 1B
145+  8AF1 ED 7B 2C 85  3 ld sp,(Stack)
146+  8AF5 C9           	ret
147+  8AF6
148+  8AF6 ED 73 2C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AFA FD F9        	ld sp,iy
150+  8AFC 06 10            ld b,16
151+  8AFE D1           1 pop de
152+  8AFF 7B           	ld a,e
153+  8B00 AE           	xor (hl)
154+  8B01 77           	ld (hl),a
155+  8B02 24           	inc h
156+  8B03 7C               ld a,h
157+  8B04 E6 07            and 7
158+  8B06 20 0C            jr nz,2F
159+  8B08 7D               ld a,l
160+  8B09 C6 20            add a,$20
161+  8B0B 6F               ld l,a
162+  8B0C 38 06            jr c,2F
163+  8B0E 7C               ld a,h
164+  8B0F D6 08            sub 8
165+  8B11 67               ld h,a
166+  8B12 18 00            jr 2F
167+  8B14 7C           2 ld a,h
168+  8B15 FE 58            cp $58
169+  8B17 28 02            jr z,3F
170+  8B19 10 E3            djnz 1B
171+  8B1B ED 7B 2C 85  3 ld sp,(Stack)
172+  8B1F C9           	ret
173+  8B20
174+  8B20              ; ---------------------------------------------------
175+  8B20
176+  8B20 ED 73 2C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B24 FD F9        	ld sp,iy
178+  8B26 06 08            ld b,8
179+  8B28 D1           1 pop de
180+  8B29 7A           	ld a,d
181+  8B2A AE           	xor (hl)
182+  8B2B 77           	ld (hl),a
183+  8B2C 23           	inc hl
184+  8B2D D1           	pop de
185+  8B2E 7B           	ld a,e
186+  8B2F AE           	xor (hl)
187+  8B30 77           	ld (hl),a
188+  8B31 2B           	dec hl
189+  8B32 24            	inc h
190+  8B33 7C               ld a,h
191+  8B34 E6 07            and 7
192+  8B36 20 0A            jr nz,2F
193+  8B38 7D               ld a,l
194+  8B39 C6 20            add a,$20
195+  8B3B 6F               ld l,a
196+  8B3C 38 04            jr c,2F
197+  8B3E 7C               ld a,h
198+  8B3F D6 08            sub 8
199+  8B41 67               ld h,a
200+  8B42 7C           2 ld a,h
201+  8B43 FE 58            cp $58
202+  8B45 28 20            jr z,4F
203+  8B47 D1               pop de
204+  8B48 7B           	ld a,e
205+  8B49 AE           	xor (hl)
206+  8B4A 77           	ld (hl),a
207+  8B4B 23           	inc hl
208+  8B4C 7A           	ld a,d
209+  8B4D AE           	xor (hl)
210+  8B4E 77           	ld (hl),a
211+  8B4F 2B           	dec hl
212+  8B50 24           	inc h
213+  8B51 7C               ld a,h
214+  8B52 E6 07            and 7
215+  8B54 20 0A            jr nz,3F
216+  8B56 7D               ld a,l
217+  8B57 C6 20            add a,$20
218+  8B59 6F               ld l,a
219+  8B5A 38 04            jr c,3F
220+  8B5C 7C               ld a,h
221+  8B5D D6 08            sub 8
222+  8B5F 67               ld h,a
223+  8B60 7C           3 ld a,h
224+  8B61 FE 58            cp $58
225+  8B63 28 02            jr z,4F
226+  8B65 10 C1            djnz 1B
227+  8B67 ED 7B 2C 85  4 ld sp,(Stack)
228+  8B6B C9           	ret
229+  8B6C
230+  8B6C ED 73 2C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B70 FD F9        	ld sp,iy
232+  8B72 06 08            ld b,8
233+  8B74 D1           1 pop de
234+  8B75 D1           	pop de
235+  8B76 7B           	ld a,e
236+  8B77 AE           	xor (hl)
237+  8B78 77           	ld (hl),a
238+  8B79 24            	inc h
239+  8B7A 7C               ld a,h
240+  8B7B E6 07            and 7
241+  8B7D 20 0A            jr nz,2F
242+  8B7F 7D               ld a,l
243+  8B80 C6 20            add a,$20
244+  8B82 6F               ld l,a
245+  8B83 38 04            jr c,2F
246+  8B85 7C               ld a,h
247+  8B86 D6 08            sub 8
248+  8B88 67               ld h,a
249+  8B89 7C           2 ld a,h
250+  8B8A FE 58            cp $58
251+  8B8C 28 1B            jr z,4F
252+  8B8E D1               pop de
253+  8B8F 7A           	ld a,d
254+  8B90 AE           	xor (hl)
255+  8B91 77           	ld (hl),a
256+  8B92 24           	inc h
257+  8B93 7C               ld a,h
258+  8B94 E6 07            and 7
259+  8B96 20 0A            jr nz,3F
260+  8B98 7D               ld a,l
261+  8B99 C6 20            add a,$20
262+  8B9B 6F               ld l,a
263+  8B9C 38 04            jr c,3F
264+  8B9E 7C               ld a,h
265+  8B9F D6 08            sub 8
266+  8BA1 67               ld h,a
267+  8BA2 7C           3 ld a,h
268+  8BA3 FE 58            cp $58
269+  8BA5 28 02            jr z,4F
270+  8BA7 10 CB            djnz 1B
271+  8BA9 ED 7B 2C 85  4 ld sp,(Stack)
272+  8BAD C9           	ret
273+  8BAE
274+  8BAE ED 73 2C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8BB2 FD F9        	ld sp,iy
276+  8BB4 06 08            ld b,8
277+  8BB6 D1           1 pop de
278+  8BB7 7B           	ld a,e
279+  8BB8 AE           	xor (hl)
280+  8BB9 77           	ld (hl),a
281+  8BBA 23           	inc hl
282+  8BBB 7A           	ld a,d
283+  8BBC AE           	xor (hl)
284+  8BBD 77           	ld (hl),a
285+  8BBE 2B           	dec hl
286+  8BBF 24             	inc h
287+  8BC0 7C               ld a,h
288+  8BC1 E6 07            and 7
289+  8BC3 20 0A            jr nz,2F
290+  8BC5 7D               ld a,l
291+  8BC6 C6 20            add a,$20
292+  8BC8 6F               ld l,a
293+  8BC9 38 04            jr c,2F
294+  8BCB 7C               ld a,h
295+  8BCC D6 08            sub 8
296+  8BCE 67               ld h,a
297+  8BCF 7C           2 ld a,h
298+  8BD0 FE 58            cp $58
299+  8BD2 28 21            jr z,4F
300+  8BD4 D1               pop de
301+  8BD5 7A           	ld a,d
302+  8BD6 AE           	xor (hl)
303+  8BD7 77           	ld (hl),a
304+  8BD8 23           	inc hl
305+  8BD9 D1               pop de
306+  8BDA 7B           	ld a,e
307+  8BDB AE           	xor (hl)
308+  8BDC 77           	ld (hl),a
309+  8BDD 2B           	dec hl
310+  8BDE 24           	inc h
311+  8BDF 7C               ld a,h
312+  8BE0 E6 07            and 7
313+  8BE2 20 0A            jr nz,3F
314+  8BE4 7D               ld a,l
315+  8BE5 C6 20            add a,$20
316+  8BE7 6F               ld l,a
317+  8BE8 38 04            jr c,3F
318+  8BEA 7C               ld a,h
319+  8BEB D6 08            sub 8
320+  8BED 67               ld h,a
321+  8BEE 7C           3 ld a,h
322+  8BEF FE 58            cp $58
323+  8BF1 28 02            jr z,4F
324+  8BF3 10 C1            djnz 1B
325+  8BF5 ED 7B 2C 85  4 ld sp,(Stack)
326+  8BF9 C9           	ret
327+  8BFA
328+  8BFA ED 73 2C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BFE FD F9        	ld sp,iy
330+  8C00 06 08            ld b,8
331+  8C02 D1           1 pop de
332+  8C03 7B           	ld a,e
333+  8C04 AE           	xor (hl)
334+  8C05 77           	ld (hl),a
335+  8C06 24            	inc h
336+  8C07 7C               ld a,h
337+  8C08 E6 07            and 7
338+  8C0A 20 0A            jr nz,2F
339+  8C0C 7D               ld a,l
340+  8C0D C6 20            add a,$20
341+  8C0F 6F               ld l,a
342+  8C10 38 04            jr c,2F
343+  8C12 7C               ld a,h
344+  8C13 D6 08            sub 8
345+  8C15 67               ld h,a
346+  8C16 7C           2 ld a,h
347+  8C17 FE 58            cp $58
348+  8C19 28 1C            jr z,4F
349+  8C1B D1               pop de
350+  8C1C 7A           	ld a,d
351+  8C1D AE           	xor (hl)
352+  8C1E 77           	ld (hl),a
353+  8C1F 24           	inc h
354+  8C20 7C               ld a,h
355+  8C21 E6 07            and 7
356+  8C23 20 0A            jr nz,3F
357+  8C25 7D               ld a,l
358+  8C26 C6 20            add a,$20
359+  8C28 6F               ld l,a
360+  8C29 38 04            jr c,3F
361+  8C2B 7C               ld a,h
362+  8C2C D6 08            sub 8
363+  8C2E 67               ld h,a
364+  8C2F 7C           3 ld a,h
365+  8C30 FE 58            cp $58
366+  8C32 28 03            jr z,4F
367+  8C34 D1               pop de
368+  8C35 10 CB            djnz 1B
369+  8C37 ED 7B 2C 85  4 ld sp,(Stack)
370+  8C3B C9           	ret
371+  8C3C
372+  8C3C              ; ---------------------------------------------------
373+  8C3C
# file closed: Rutinas_de_impresion_sprites.asm
593   8C3C              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C3C              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C3C              ;
  3+  8C3C              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C3C              ;
  5+  8C3C              ; *****************************************************************************************************************************************************************************************
  6+  8C3C              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C3C
  8+  8C3C 7C           calcula_tercio ld a,h
  9+  8C3D E6 18        	and $18
 10+  8C3F CB 2F        	sra a
 11+  8C41 CB 2F        	sra a
 12+  8C43 CB 2F        	sra a
 13+  8C45 C9           	ret
 14+  8C46
# file closed: calcula_tercio.asm
594   8C46              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C46              ; -----------------------------------------------------------------------------------------
  2+  8C46              ;
  3+  8C46              ;   04/11/22
  4+  8C46              ;
  5+  8C46              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C46              ;
  7+  8C46              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C46              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C46              ;
 10+  8C46              ;   DESTRUYE: HL y A. !!!!!
 11+  8C46
 12+  8C46 CD 3C 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C49 26 58            ld h,$58
 14+  8C4B 84               add h
 15+  8C4C 67               ld h,a
 16+  8C4D C9               ret
# file closed: Calcula_direccion_atributos.asm
595   8C4E              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C4E              ; ********** **********
  2+  8C4E              ;
  3+  8C4E              ;   5/11/22
  4+  8C4E              ;
  5+  8C4E              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C4E              ;
  7+  8C4E              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C4E              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C4E              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C4E              ;
 11+  8C4E              ;   NO DESTROYERSSSS !!!!!
 12+  8C4E
 13+  8C4E E5           Define_atributos push hl
 14+  8C4F C5           	push bc
 15+  8C50 D5           	push de
 16+  8C51
 17+  8C51 CD 46 8C     	call Calcula_direccion_atributos
 18+  8C54
 19+  8C54 D9               exx
 20+  8C55 E5               push hl
 21+  8C56 D9               exx
 22+  8C57 D1               pop de
 23+  8C58
 24+  8C58 42               ld b,d
 25+  8C59 7B               ld a,e 									; (Attr) en A.
 26+  8C5A
 27+  8C5A C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C5B E5            	push hl 								; Guardo dirección de attr.
 29+  8C5C
 30+  8C5C              ; -----
 31+  8C5C
 32+  8C5C 77           2 ld (hl),a
 33+  8C5D 0D           	dec c 									; Decremento (Columnas).
 34+  8C5E 28 03        	jr z,1F
 35+  8C60 23           	inc hl
 36+  8C61 18 F9        	jr 2B
 37+  8C63
 38+  8C63 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C64 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C65
 41+  8C65 05           	dec b									; Decremento (Filas).
 42+  8C66 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C68
 44+  8C68 11 20 00     	ld de,32
 45+  8C6B A7           	and a
 46+  8C6C ED 5A        	adc hl,de
 47+  8C6E 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C70
 49+  8C70 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C71 C1           	pop bc
 51+  8C72 E1           	pop hl
 52+  8C73
 53+  8C73 C9           	ret
 54+  8C74
# file closed: Define_atributos.asm
596   8C74              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C74              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C74              ;
  3+  8C74              ;
  4+  8C74              ;	CLS.
  5+  8C74              ;
  6+  8C74              ;	Limpia la pantalla y define sus atributos.
  7+  8C74              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C74              ;
  9+  8C74              ;	COLORES: 0 ..... NEGRO
 10+  8C74              ;    		 1 ..... AZUL
 11+  8C74              ; 			 2 ..... ROJO
 12+  8C74              ;			 3 ..... MAGENTA
 13+  8C74              ; 			 4 ..... VERDE
 14+  8C74              ; 			 5 ..... CIAN
 15+  8C74              ;			 6 ..... AMARILLO
 16+  8C74              ; 			 7 ..... BLANCO
 17+  8C74              ;
 18+  8C74              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C74              ;
 20+  8C74              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C74
 22+  8C74
 23+  8C74 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C77 11 01 40     	LD DE,$4001
 25+  8C7A 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C7D 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C7F ED B0        	LDIR
 28+  8C81 01 FF 02     	LD BC,767
 29+  8C84 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C85 ED B0        	LDIR
 31+  8C87 C9           	ret
 32+  8C88
# file closed: Cls.asm
597   8C88              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C88              ; ******************************************************************************************************************************************************************************************
  2+  8C88              ;
  3+  8C88              ;   19/10/22
  4+  8C88              ;
  5+  8C88              ;	Mov_down
  6+  8C88              ;
  7+  8C88              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C88              ;
  9+  8C88              ;
 10+  8C88 21 17 85     Mov_down ld hl,Ctrl_0
 11+  8C8B CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C8D              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C8D              ; 																	; _ en el caso de que no lo haya.
 14+  8C8D 3A 04 85     	ld a,(Vel_down)
 15+  8C90 47           	ld b,a
 16+  8C91 2A F2 84         ld hl,(Posicion_actual)
 17+  8C94 CD 3C 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C97 E6 02        	and 2
 19+  8C99 28 0F        	jr z,1F
 20+  8C9B 7C           	ld a,h
 21+  8C9C FE 57        	cp $57
 22+  8C9E 20 0A        	jr nz,1F
 23+  8CA0 7D           	ld a,l
 24+  8CA1 C6 20        	add $20
 25+  8CA3 30 05        	jr nc,1F
 26+  8CA5
 27+  8CA5              ; ------------------------------
 28+  8CA5 CD 41 8F     	call Reaparece_arriba
 29+  8CA8              ;	call Reinicio
 30+  8CA8              ; ------------------------------
 31+  8CA8
 32+  8CA8 18 08        	jr 3F
 33+  8CAA CD E3 89     1 call NextScan
 34+  8CAD 22 F2 84     	ld (Posicion_actual),hl
 35+  8CB0 10 E2            djnz 2B
 36+  8CB2 CD 57 8F     3 call Genera_coordenadas
 37+  8CB5 C9           	ret
 38+  8CB6
 39+  8CB6
 40+  8CB6              ; ******************************************************************************************************************************************************************************************
 41+  8CB6              ;
 42+  8CB6              ;   19/10/22
 43+  8CB6              ;
 44+  8CB6              ;	Mov_up
 45+  8CB6              ;
 46+  8CB6              ; 	Mueve el Sprite hacia arriba.
 47+  8CB6              ;
 48+  8CB6              ;
 49+  8CB6 21 17 85     Mov_up ld hl,Ctrl_0
 50+  8CB9 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8CBB              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8CBB              ; 																		; _ en el caso de que no lo haya.
 53+  8CBB 3A 03 85     	ld a,(Vel_up)
 54+  8CBE 47           	ld b,a
 55+  8CBF 2A F2 84     	ld hl,(Posicion_actual)
 56+  8CC2 CD 3C 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CC5 A7           	and a
 58+  8CC6 20 10        	jr nz,1F
 59+  8CC8 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CC9 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CCB 20 0B            jr nz,1F
 62+  8CCD 7D               ld a,l
 63+  8CCE D6 20            sub $20
 64+  8CD0 30 06            jr nc,1F
 65+  8CD2 25               dec h
 66+  8CD3
 67+  8CD3              ; -----------------------------
 68+  8CD3 CD 31 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CD6              ;	call Reinicio
 70+  8CD6              ; -----------------------------
 71+  8CD6
 72+  8CD6 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CD8 CD F2 89     1 call PreviousScan
 74+  8CDB 22 F2 84     	ld (Posicion_actual),hl
 75+  8CDE 10 E2            djnz 3B
 76+  8CE0 CD 57 8F     2 call Genera_coordenadas
 77+  8CE3 C9           	ret
 78+  8CE4
 79+  8CE4              ; ******************************************************************************************************************************************************************************************
 80+  8CE4              ;
 81+  8CE4              ;	19/10/22
 82+  8CE4              ;
 83+  8CE4              ;	Mov_right.
 84+  8CE4              ;
 85+  8CE4              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CE4              ;
 87+  8CE4
 88+  8CE4 21 17 85     Mov_right ld hl,Ctrl_0
 89+  8CE7 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CE9              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CE9              ; 																	; _ en el caso de que no lo haya.
 92+  8CE9 3A F6 84     	ld a,(CTRL_DESPLZ)
 93+  8CEC A7           	and a
 94+  8CED 28 0B        	jr z,9F
 95+  8CEF
 96+  8CEF 3A 17 85     	ld a,(Ctrl_0)
 97+  8CF2 CB 7F        	bit 7,a
 98+  8CF4 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CF6 21 F6 84     	ld hl,CTRL_DESPLZ
100+  8CF9 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CFA
102+  8CFA 3A 17 85     9 ld a,(Ctrl_0)
103+  8CFD CB 77        	bit 6,a
104+  8CFF 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8D01
106+  8D01 CD F0 8E     	call Stop_Amadeus_right
107+  8D04 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8D05 18 4D        	jr 8F
109+  8D07
110+  8D07 3A F7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8D0A FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8D0C 20 46        	jr nz,8F
113+  8D0E
114+  8D0E 3A F6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8D11 A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8D12 28 40        	jr z,8F
117+  8D14
118+  8D14              ; ---------- ---------- ----------
119+  8D14              ;
120+  8D14              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
121+  8D14
122+  8D14 3A 02 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
123+  8D17 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
124+  8D19 28 11        	jr z,1F
125+  8D1B 38 06        	jr c,6F
126+  8D1D FE 04        	cp 4
127+  8D1F 28 14        	jr z,7F
128+  8D21 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
129+  8D23
130+  8D23              ; ---------- ---------- ----------
131+  8D23              ;
132+  8D23              ; Perfiles de velocidad
133+  8D23              ;
134+  8D23 3A F6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
135+  8D26 FE FE        	cp $fe
136+  8D28 20 2A        	jr nz,8F
137+  8D2A 18 10        	jr 3F
138+  8D2C 3A F6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
139+  8D2F FE FD        	cp $fd
140+  8D31 20 21        	jr nz,8F
141+  8D33 18 07        	jr 3F
142+  8D35 3A F6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
143+  8D38 FE FB        	cp $fb
144+  8D3A 20 18        	jr nz,8F
145+  8D3C
146+  8D3C              ; ---------- ---------- ----------
147+  8D3C
148+  8D3C CD 1F 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
149+  8D3F              ;	call Reinicio
150+  8D3F
151+  8D3F              ; ---------- ---------- ----------
152+  8D3F              ;
153+  8D3F              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
154+  8D3F
155+  8D3F 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
156+  8D41 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
157+  8D42 CD 5B 8D     	call DESPLZ_DER
158+  8D45 C1           	pop bc
159+  8D46 10 F9        	djnz 5B
160+  8D48 2A F2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
161+  8D4B 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
162+  8D4C 22 F2 84     	ld (Posicion_actual),hl
163+  8D4F CD 57 8F     	call Genera_coordenadas
164+  8D52 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
165+  8D54
166+  8D54              ; ---------- ---------- ----------
167+  8D54
168+  8D54 2A F2 84     8 ld hl,(Posicion_actual)
169+  8D57 CD 5B 8D     	call DESPLZ_DER
170+  8D5A C9           2 ret
171+  8D5B
172+  8D5B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
173+  8D5B              ;
174+  8D5B              ;	22/9/22
175+  8D5B              ;
176+  8D5B
177+  8D5B CD 6A 8D     DESPLZ_DER call Desplaza_derecha
178+  8D5E CD 7F 8D         call modifica_parametros_1er_DESPLZ_2
179+  8D61 CD A8 8D         call Ciclo_completo
180+  8D64 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
181+  8D67 CB FE        	set 7,(hl)
182+  8D69 C9           	ret
183+  8D6A
184+  8D6A              ; ******************************************************************************************************************************************************************************************
185+  8D6A              ;	14/9/22
186+  8D6A              ;
187+  8D6A
188+  8D6A 3A 02 85     Desplaza_derecha ld a,(Vel_right)
189+  8D6D 47           	ld b,a
190+  8D6E 2A FC 84     	ld hl,(Puntero_DESPLZ)
191+  8D71 23           1 inc hl
192+  8D72 23           	inc hl
193+  8D73 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
194+  8D75 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
195+  8D78 CD 47 86     	call Extrae_address
196+  8D7B 22 F4 84     	ld (Puntero_objeto),hl
197+  8D7E C9           	ret
198+  8D7F
199+  8D7F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
200+  8D7F              ;
201+  8D7F              ;	24/7/22
202+  8D7F              ;
203+  8D7F              ;	modifica_parametros_1er_DESPLZ_2
204+  8D7F              ;
205+  8D7F              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
206+  8D7F              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
207+  8D7F              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
208+  8D7F
209+  8D7F 3A F6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
210+  8D82 A7           	and a
211+  8D83 20 1F        	jr nz,1F
212+  8D85 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
213+  8D87 32 F6 84         ld (CTRL_DESPLZ),a
214+  8D8A 21 F1 84     	ld hl,Columns
215+  8D8D 34           	inc (hl)
216+  8D8E 3A 00 85     	ld a,(Cuad_objeto)
217+  8D91 E6 01        	and 1
218+  8D93 28 0F        	jr z,1F
219+  8D95 2A F2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
220+  8D98 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
221+  8D99 22 F2 84     	ld (Posicion_actual),hl
222+  8D9C CD 57 8F     	call Genera_coordenadas
223+  8D9F CD FC 8E     	call Inc_CTRL_DESPLZ
224+  8DA2 18 03        	jr 2F
225+  8DA4 CD FC 8E     1 call Inc_CTRL_DESPLZ
226+  8DA7 C9           2 ret
227+  8DA8
228+  8DA8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
229+  8DA8              ;
230+  8DA8              ;	24/7/22
231+  8DA8              ;
232+  8DA8              ;	Ciclo_completo.
233+  8DA8              ;
234+  8DA8              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
235+  8DA8              ;
236+  8DA8              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
237+  8DA8              ; 	Decrementamos (Columns).
238+  8DA8              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
239+  8DA8              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
240+  8DA8
241+  8DA8
242+  8DA8 3A F6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
243+  8DAB FE FF        	cp $ff
244+  8DAD 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
245+  8DAF 18 25        	jr 3f
246+  8DB1 21 F1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
247+  8DB4 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
248+  8DB5 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
249+  8DB6 32 F6 84     	ld (CTRL_DESPLZ),a
250+  8DB9 3A 00 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
251+  8DBC E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
252+  8DBE 20 0A        	jr nz,2F
253+  8DC0 2A F2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
254+  8DC3 23           	inc hl
255+  8DC4 22 F2 84     	ld (Posicion_actual),hl
256+  8DC7 CD 57 8F     	call Genera_coordenadas
257+  8DCA
258+  8DCA              ; Inicia el puntero de Sprite.
259+  8DCA
260+  8DCA 2A FA 84     2 ld hl,(Indice_Sprite)
261+  8DCD 22 FC 84     	ld (Puntero_DESPLZ),hl
262+  8DD0 CD 47 86     	call Extrae_address
263+  8DD3 22 F4 84     	ld (Puntero_objeto),hl
264+  8DD6
265+  8DD6 C9           3 ret
266+  8DD7
267+  8DD7              ; ******************************************************************************************************************************************************************************************
268+  8DD7              ;
269+  8DD7              ;	19/10/22
270+  8DD7              ;
271+  8DD7              ;	Mov_left.
272+  8DD7              ;
273+  8DD7              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
274+  8DD7              ;
275+  8DD7              Mov_left
276+  8DD7
277+  8DD7 21 17 85     	ld hl,Ctrl_0
278+  8DDA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
279+  8DDC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
280+  8DDC              ; 																	; _ en el caso de que no lo haya.
281+  8DDC 3A F6 84     	ld a,(CTRL_DESPLZ)
282+  8DDF A7           	and a
283+  8DE0 20 19        	jr nz,10F
284+  8DE2
285+  8DE2 2A F4 84     	ld hl,(Puntero_objeto)
286+  8DE5 22 FC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
287+  8DE8
288+  8DE8 3A 17 85     	ld a,(Ctrl_0)
289+  8DEB CB 77        	bit 6,a
290+  8DED 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
291+  8DEF
292+  8DEF CD F6 8E     	call Stop_Amadeus_left
293+  8DF2 20 5F        	jr nz,3F
294+  8DF4
295+  8DF4 2A FA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
296+  8DF7 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
297+  8DFA C9           	ret
298+  8DFB
299+  8DFB 3A 17 85     10 ld a,(Ctrl_0)
300+  8DFE CB 7F        	bit 7,a
301+  8E00 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
302+  8E02 21 F6 84     	ld hl,CTRL_DESPLZ
303+  8E05 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
304+  8E06
305+  8E06 3A F7 84     11 ld a,(Coordenada_X)
306+  8E09 A7           	and a
307+  8E0A 20 47        	jr nz,3F
308+  8E0C 3A F6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
309+  8E0F A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
310+  8E10 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
311+  8E12
312+  8E12              ; ---------- ---------- ----------
313+  8E12
314+  8E12 3A 01 85     	ld a,(Vel_left)
315+  8E15 FE 02        	cp 2
316+  8E17 28 0F        	jr z,1F
317+  8E19 38 04        	jr c,6F
318+  8E1B FE 04        	cp 4
319+  8E1D 28 12        	jr z,7F
320+  8E1F
321+  8E1F              ; ---------- ---------- ----------
322+  8E1F
323+  8E1F 3A F6 84     6 ld a,(CTRL_DESPLZ)
324+  8E22 FE F9        	cp $f9
325+  8E24 20 2D        	jr nz,3F
326+  8E26 18 10        	jr 4F
327+  8E28 3A F6 84     1 ld a,(CTRL_DESPLZ)
328+  8E2B FE FA        	cp $fa
329+  8E2D 20 24        	jr nz,3F
330+  8E2F 18 07        	jr 4F
331+  8E31 3A F6 84     7 ld a,(CTRL_DESPLZ)
332+  8E34 FE FC        	cp $fc
333+  8E36 20 1B        	jr nz,3F
334+  8E38
335+  8E38              ; ---------- ---------- ----------
336+  8E38
337+  8E38 CD 0D 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
338+  8E3B              ;	call Reinicio
339+  8E3B
340+  8E3B              ; ---------- ---------- ----------
341+  8E3B
342+  8E3B 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
343+  8E3D C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
344+  8E3E 2A F4 84     	ld hl,(Puntero_objeto)
345+  8E41 22 FC 84     	ld (Puntero_DESPLZ),hl
346+  8E44 CD 7A 8E     	call DESPLZ_IZQ
347+  8E47 C1           	pop bc
348+  8E48 10 F3        	djnz 5B
349+  8E4A 2A F2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
350+  8E4D 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
351+  8E4E 22 F2 84     	ld (Posicion_actual),hl
352+  8E51 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
353+  8E53
354+  8E53              ; ---------- ---------- ----------
355+  8E53
356+  8E53 3A 01 85     3 ld a,(Vel_left)
357+  8E56 FE 08        	cp 8
358+  8E58 20 16        	jr nz,8F
359+  8E5A 2A F2 84     	ld hl,(Posicion_actual)
360+  8E5D 7D           	ld a,l
361+  8E5E E6 1F        	and $1f
362+  8E60 20 05        	jr nz,9F
363+  8E62
364+  8E62              ; ---------- ---------- ----------
365+  8E62
366+  8E62 CD 0D 8F     	call Reaparece_derecha
367+  8E65
368+  8E65              ; ---------- ---------- ----------
369+  8E65
370+  8E65 18 0F        	jr 2F
371+  8E67 2A F2 84     9 ld hl,(Posicion_actual)
372+  8E6A 2B           	dec hl
373+  8E6B 22 F2 84     	ld (Posicion_actual),hl
374+  8E6E 18 06        	jr 2F
375+  8E70 2A F2 84     8 ld hl,(Posicion_actual)
376+  8E73 CD 7A 8E     	call DESPLZ_IZQ
377+  8E76 CD 57 8F     2 call Genera_coordenadas
378+  8E79 C9           	ret
379+  8E7A
380+  8E7A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
381+  8E7A              ;
382+  8E7A              ;	22/9/22
383+  8E7A
384+  8E7A CD 89 8E     DESPLZ_IZQ call Desplaza_izquierda
385+  8E7D CD 9B 8E         call modifica_parametros_1er_DESPLZ
386+  8E80 CD BC 8E     	call Ciclo_completo_2
387+  8E83 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
388+  8E86 CB BE        	res 7,(hl)
389+  8E88 C9           	ret
390+  8E89
391+  8E89 3A 01 85     Desplaza_izquierda ld a,(Vel_left)
392+  8E8C 47           	ld b,a
393+  8E8D 2A FC 84     	ld hl,(Puntero_DESPLZ)
394+  8E90 2B           1 dec hl
395+  8E91 2B           	dec hl
396+  8E92 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
397+  8E94 22 FC 84     	ld (Puntero_DESPLZ),hl
398+  8E97 CD 47 86     	call Extrae_address
399+  8E9A              ;	ld (Caja_de_DESPLZ),hl 		 	;!!!!!!!!!!!!!!!!!!!!!!!!!
400+  8E9A C9           	ret
401+  8E9B
402+  8E9B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
403+  8E9B              ;
404+  8E9B              ;	modifica_parametros_1er_DESPLZ
405+  8E9B              ;
406+  8E9B              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
407+  8E9B              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
408+  8E9B              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
409+  8E9B
410+  8E9B 3A F6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
411+  8E9E A7           	and a
412+  8E9F 20 17        	jr nz,1F
413+  8EA1 21 F1 84     	ld hl,Columns
414+  8EA4 34           	inc (hl)
415+  8EA5 3A 00 85     	ld a,(Cuad_objeto)
416+  8EA8 E6 01        	and 1
417+  8EAA 20 0C        	jr nz,1F
418+  8EAC 2A F2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
419+  8EAF 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
420+  8EB0 22 F2 84     	ld (Posicion_actual),hl
421+  8EB3 CD DF 8E     	call Dec_CTRL_DESPLZ
422+  8EB6 18 03        	jr 2F
423+  8EB8 CD DF 8E     1 call Dec_CTRL_DESPLZ
424+  8EBB C9           2 ret
425+  8EBC
426+  8EBC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
427+  8EBC              ;
428+  8EBC 3A F6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
429+  8EBF FE F8        	cp $f8
430+  8EC1 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
431+  8EC3 18 19        	jr 3f
432+  8EC5 21 F1 84     1 ld hl,Columns
433+  8EC8 35           	dec (hl)
434+  8EC9 AF           	xor a
435+  8ECA 32 F6 84     	ld (CTRL_DESPLZ),a
436+  8ECD 3A 00 85     	ld a,(Cuad_objeto)
437+  8ED0 E6 01        	and 1
438+  8ED2 28 07        	jr z,2F
439+  8ED4 2A F2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
440+  8ED7 2B           	dec hl
441+  8ED8 22 F2 84     	ld (Posicion_actual),hl
442+  8EDB CD 57 8F     2 call Genera_coordenadas
443+  8EDE C9           3 ret
444+  8EDF
445+  8EDF              ; ---------- ---------- ---------- ---------- ---------- ----------
446+  8EDF              ;
447+  8EDF              ;	Dec_CTRL_DESPLZ
448+  8EDF              ;
449+  8EDF              ;	Subrutina de [modifica_punteros].
450+  8EDF              ;
451+  8EDF              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
452+  8EDF
453+  8EDF 21 F6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
454+  8EE2 3A 01 85     	ld a,(Vel_left)
455+  8EE5 A7           	and a
456+  8EE6 28 06        	jr z,1F
457+  8EE8 47           	ld b,a
458+  8EE9 35           3 dec (hl)
459+  8EEA 10 FD        	djnz 3B
460+  8EEC 18 01        	jr 2F
461+  8EEE 35           1 dec (hl)
462+  8EEF C9           2 ret
463+  8EF0
464+  8EF0              ; ---------- ---------- ---------- ---------- ---------- ----------
465+  8EF0              ;
466+  8EF0              ;	19/10/22
467+  8EF0              ;
468+  8EF0              ;	(cp 29) para un Amadeus de 3 Columns.
469+  8EF0              ;	(cp 30)   ""  ""    ""     2 Columns.
470+  8EF0
471+  8EF0 3A F7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
472+  8EF3 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
473+  8EF5 C9           	ret
474+  8EF6
475+  8EF6              ; ---------- ---------- ---------- ---------- ---------- ----------
476+  8EF6              ;
477+  8EF6              ;	19/10/22
478+  8EF6              ;
479+  8EF6              ;	(cp 2) para un Amadeus de 3 Columns.
480+  8EF6              ;	(cp 1)   ""  ""    ""     2 Columns.
481+  8EF6
482+  8EF6 3A F7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
483+  8EF9 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
484+  8EFB C9           	ret
485+  8EFC
486+  8EFC              ; ---------- ---------- ---------- ---------- ---------- ----------
487+  8EFC              ;
488+  8EFC              ;	24/7/22
489+  8EFC              ;
490+  8EFC              ;	Inc_CTRL_DESPLZ
491+  8EFC              ;
492+  8EFC              ;	Subrutina de [modifica_punteros].
493+  8EFC              ;
494+  8EFC              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
495+  8EFC
496+  8EFC 21 F6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
497+  8EFF 3A 02 85     	ld a,(Vel_right)
498+  8F02 A7           	and a
499+  8F03 28 06        	jr z,1F
500+  8F05 47           	ld b,a
501+  8F06 34           3 inc (hl)
502+  8F07 10 FD        	djnz 3B
503+  8F09 18 01        	jr 2F
504+  8F0B 34           1 inc (hl)
505+  8F0C C9           2 ret
506+  8F0D
507+  8F0D              ; ---------- ---------- ---------- ---------- ---------- ----------
508+  8F0D
509+  8F0D 2A F2 84     Reaparece_derecha ld hl,(Posicion_actual)
510+  8F10 01 1F 00     	ld bc,31
511+  8F13 A7           	and a
512+  8F14 ED 4A        	adc hl,bc
513+  8F16 22 F2 84     	ld (Posicion_actual),hl
514+  8F19 21 17 85     	ld hl,Ctrl_0														; $xxx1
515+  8F1C CB C6        	set 0,(hl)
516+  8F1E C9           	ret
517+  8F1F
518+  8F1F              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8F1F
520+  8F1F 2A F2 84     Reaparece_izquierda ld hl,(Posicion_actual)
521+  8F22 01 1F 00     	ld bc,31
522+  8F25 A7           	and a
523+  8F26 ED 42        	sbc hl,bc
524+  8F28 22 F2 84     	ld (Posicion_actual),hl 											; $xx1x
525+  8F2B 21 17 85     	ld hl,Ctrl_0
526+  8F2E CB CE        	set 1,(hl)
527+  8F30 C9           	ret
528+  8F31
529+  8F31              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F31
531+  8F31 24           Reaparece_abajo inc h
532+  8F32 01 E0 17     	ld bc,$17e0
533+  8F35 A7           	and a
534+  8F36 ED 4A        	adc hl,bc
535+  8F38 22 F2 84     	ld (Posicion_actual),hl
536+  8F3B 21 17 85     	ld hl,Ctrl_0
537+  8F3E CB D6        	set 2,(hl)
538+  8F40 C9           	ret
539+  8F41
540+  8F41              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F41
542+  8F41 01 E0 17     Reaparece_arriba ld bc,$17e0
543+  8F44 A7           	and a
544+  8F45 ED 42        	sbc hl,bc
545+  8F47 22 F2 84     	ld (Posicion_actual),hl
546+  8F4A 21 17 85     	ld hl,Ctrl_0
547+  8F4D CB DE        	set 3,(hl)
548+  8F4F C9           	ret
549+  8F50
550+  8F50              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
551+  8F50
552+  8F50 2A FE 84     Reinicio ld hl,(Posicion_inicio)
553+  8F53 22 F2 84     	ld (Posicion_actual),hl
554+  8F56 C9           	ret
# file closed: Direcciones.asm
598   8F57              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F57              ;	12/12/22
  2+  8F57              ;
  3+  8F57              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F57              ;	Fila superior "0", Columna izquierda "0".
  5+  8F57              ;
  6+  8F57              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F57              ;
  8+  8F57              ;	Modifica: A
  9+  8F57
 10+  8F57 C5           Genera_coordenadas push bc
 11+  8F58 E5           	push hl
 12+  8F59 2A F2 84     	ld hl,(Posicion_actual)
 13+  8F5C 7D           	ld a,l
 14+  8F5D E6 1F        	and $1f
 15+  8F5F 32 F7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F62 CD 3C 8C     	call calcula_tercio
 17+  8F65 47           	ld b,a
 18+  8F66 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F67 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F69 7D           	ld a,l
 21+  8F6A E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F6C 28 05        	jr z,2F
 23+  8F6E 0C           1 inc c
 24+  8F6F D6 20        	sub 32
 25+  8F71 20 FB        	jr nz,1B
 26+  8F73 0C           2 inc c
 27+  8F74 04           	inc b
 28+  8F75 05           	dec b
 29+  8F76 28 04        	jr z,3F
 30+  8F78 3E E0        	ld a,$e0
 31+  8F7A 10 F2        	djnz 1B
 32+  8F7C 79           3 ld a,c
 33+  8F7D 3D           	dec a
 34+  8F7E 32 F8 84     	ld (Coordenada_y),a
 35+  8F81 E1           	pop hl
 36+  8F82 C1           	pop bc
 37+  8F83 C9           	ret
# file closed: Genera_coordenadas.asm
599   8F84              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F84
  2+  8F84
  3+  8F84              ;   11/8/22
  4+  8F84              ;
  5+  8F84              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F84              ;
  7+  8F84              ;   Mov_obj.asm
  8+  8F84              ;
  9+  8F84              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F84              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F84              ;
 12+  8F84              ;   Codificación:
 13+  8F84              ;
 14+  8F84              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F84              ;
 16+  8F84
 17+  8F84 02 10 00     Izquierda db 2,%00010000,0
 18+  8F87 02 20 00     Derecha db 2,%00100000,0
 19+  8F8A 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F8E 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F92 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F96 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F9A 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F9E 60 42 60 40
 23+  8FA2 63
 24+  8FA3 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FA7 22 A3 80 A0
 25+  8FAB 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FAF 84 A0 83 A0
 26+  8FB3 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FB7 80 A3 22 A0
 27+  8FBB 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FBF 40 60 42 60
 28+  8FC3 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FC7
 30+  8FC7 87 8F        Indice_mov_Badsat defw Derecha
 31+  8FC9 8E 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FCB 96 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FCD 8A 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FCF
 35+  8FCF 3A 1D 85     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FD2 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FD3 28 02            jr z,1F
 38+  8FD5 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FD7
 40+  8FD7 3A 1E 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FDA C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FDC 32 1E 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FDF              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FDF 2A 1B 85         ld hl,(Puntero_mov)
 45+  8FE2 7E               ld a,(hl)
 46+  8FE3 32 1D 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FE6 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FE7 22 1B 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FEA
 50+  8FEA 3A 1F 85     Decoder ld a,(Repetimos_db)
 51+  8FED A7               and a
 52+  8FEE 20 0C            jr nz,12F
 53+  8FF0 2A 1B 85         ld hl,(Puntero_mov)
 54+  8FF3 7E               ld a,(hl)
 55+  8FF4 A7               and a
 56+  8FF5 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FF7
 58+  8FF7 E6 0F            and $0f
 59+  8FF9 32 1F 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  8FFC              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  8FFC 2A 1B 85     12 ld hl,(Puntero_mov)
 62+  8FFF CB 7E            bit 7,(hl)
 63+  9001 28 03            jr z,2F
 64+  9003 CD 88 8C         call Mov_down
 65+  9006 2A 1B 85     2 ld hl, (Puntero_mov)
 66+  9009 CB 76            bit 6,(hl)
 67+  900B 28 03            jr z,3F
 68+  900D CD B6 8C         call Mov_up
 69+  9010 2A 1B 85     3 ld hl, (Puntero_mov)
 70+  9013 CB 6E            bit 5,(hl)
 71+  9015 28 03            jr z,4F
 72+  9017 CD E4 8C         call Mov_right
 73+  901A 2A 1B 85     4 ld hl, (Puntero_mov)
 74+  901D CB 66            bit 4,(hl)
 75+  901F 28 03            jr z,5F
 76+  9021 CD D7 8D         call Mov_left
 77+  9024
 78+  9024              ; ---------- --------- --------- ---------- ----------
 79+  9024
 80+  9024 3A 1F 85     5 ld a,(Repetimos_db)
 81+  9027 A7               and a
 82+  9028 28 07            jr z,6F
 83+  902A 3D               dec a
 84+  902B 32 1F 85         ld (Repetimos_db),a
 85+  902E 28 01            jr z,6f
 86+  9030 C9           11 ret
 87+  9031 21 1D 85     6 ld hl,Contador_db_mov
 88+  9034 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9035 2A 1B 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9038 23               inc hl
 91+  9039 22 1B 85         ld (Puntero_mov),hl
 92+  903C 18 F2            jr 11B
 93+  903E 2A 19 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9041 3A 1E 85         ld a,(Incrementa_puntero)
 95+  9044 47               ld b,a
 96+  9045 23           8 inc hl
 97+  9046 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9048 5E               ld e,(hl)
 99+  9049 23               inc hl
100+  904A 56               ld d,(hl)
101+  904B EB               ex de,hl
102+  904C 22 1B 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  904F 18 DF            jr 11B
104+  9051
105+  9051              ; ---------- --------- --------- ---------- ----------
106+  9051              ;
107+  9051              ;   11/8/22
108+  9051              ;
109+  9051              ;   Prepara_Puntero_mov
110+  9051
111+  9051 E5           Prepara_Puntero_mov push hl
112+  9052 D5               push de
113+  9053 2A 19 85         ld hl,(Puntero_indice_mov)
114+  9056 5E               ld e,(hl)
115+  9057 23               inc hl
116+  9058 56               ld d,(hl)
117+  9059 EB               ex de,hl
118+  905A 22 1B 85         ld (Puntero_mov),hl
119+  905D D1               pop de
120+  905E E1               pop hl
121+  905F C9               ret
122+  9060
123+  9060              ; ---------- --------- --------- ---------- ----------
124+  9060              ;
125+  9060              ;   11/8/22
126+  9060              ;
127+  9060              ;   Reinicia_el_movimiento
128+  9060
129+  9060 CD 51 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  9063 AF               xor a
131+  9064 32 1D 85         ld (Contador_db_mov),a
132+  9067 32 1E 85         ld (Incrementa_puntero),a
133+  906A C3 CF 8F         jp Movimiento
134+  906D
135+  906D              ; ---------- --------- --------- ---------- ----------
136+  906D
137+  906D
138+  906D
139+  906D
140+  906D
141+  906D
142+  906D
143+  906D
144+  906D
145+  906D
146+  906D
147+  906D
148+  906D
149+  906D
150+  906D
151+  906D
152+  906D
153+  906D
# file closed: Patrones_de_mov.asm
600   906D              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  906D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  906D              ;
  3+  906D              ;	3/1/23
  4+  906D              ;
  5+  906D              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  906D
  7+  906D              ;	ADC HL,SP	LD (addr),SP
  8+  906D              ;	ADD HL,SP	LD SP,(addr)
  9+  906D              ;	ADD IX,SP	LD SP,nn
 10+  906D              ; 	ADD IY,SP	LD SP,HL
 11+  906D              ;				LD SP,IX
 12+  906D              ;	DEC SP		LD SP,IY
 13+  906D
 14+  906D              ;	EX (SP),HL
 15+  906D              ;	EX (SP),IX
 16+  906D              ;	EX (SP),IY
 17+  906D
 18+  906D              ;	INC SP
 19+  906D
 20+  906D
 21+  906D                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 2C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 30 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 30 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 2C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
601   7FC0
602   7FC0              	SAVESNA "Pruebas.sna", START
603   7FC0
604   7FC0
605   7FC0
# file closed: Banco_de_pruebas.asm
