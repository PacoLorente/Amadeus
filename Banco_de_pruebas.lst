# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 1D 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0 04 84        Indice_de_disparos defw Disparo_1
  7+  83F2 0C 84        	defw Disparo_2
  8+  83F4 14 84        	defw Disparo_3
  9+  83F6 1C 84        	defw Disparo_4
 10+  83F8 24 84        	defw Disparo_5
 11+  83FA 2C 84        	defw Disparo_6
 12+  83FC 34 84        	defw Disparo_7
 13+  83FE 3C 84        	defw Disparo_8
 14+  8400 44 84        	defw Disparo_9
 15+  8402 4C 84        	defw Disparo_10
 16+  8404
 17+  8404 00 00        Disparo_1 db 0,0									; Impacto / Dirección.
 18+  8406 00 00        	defw 0											; Puntero de_impresión.
 19+  8408 00 00        	defw 0											; Puntero objeto.
 20+  840A 00 00        	defw 0											; Rutina de impresión.
 21+  840C
 22+  840C 00 00        Disparo_2 db 0,0									; Impacto / Dirección.
 23+  840E 00 00        	defw 0											; Puntero de_impresión.
 24+  8410 00 00        	defw 0											; Puntero objeto.
 25+  8412 00 00        	defw 0											; Rutina de impresión.
 26+  8414
 27+  8414 00 00        Disparo_3 db 0,0									; Impacto / Dirección.
 28+  8416 00 00        	defw 0											; Puntero de_impresión.
 29+  8418 00 00        	defw 0											; Puntero objeto.
 30+  841A 00 00        	defw 0											; Rutina de impresión.
 31+  841C
 32+  841C 00 00        Disparo_4 db 0,0									; Impacto / Dirección.
 33+  841E 00 00        	defw 0											; Puntero de_impresión.
 34+  8420 00 00        	defw 0											; Puntero objeto.
 35+  8422 00 00        	defw 0											; Rutina de impresión.
 36+  8424
 37+  8424 00 00        Disparo_5 db 0,0									; Impacto / Dirección.
 38+  8426 00 00        	defw 0											; Puntero de_impresión.
 39+  8428 00 00        	defw 0											; Puntero objeto.
 40+  842A 00 00        	defw 0											; Rutina de impresión.
 41+  842C
 42+  842C 00 00        Disparo_6 db 0,0									; Impacto / Dirección.
 43+  842E 00 00        	defw 0											; Puntero de_impresión.
 44+  8430 00 00        	defw 0											; Puntero objeto.
 45+  8432 00 00        	defw 0											; Rutina de impresión.
 46+  8434
 47+  8434 00 00        Disparo_7 db 0,0									; Impacto / Dirección.
 48+  8436 00 00        	defw 0											; Puntero de_impresión.
 49+  8438 00 00        	defw 0											; Puntero objeto.
 50+  843A 00 00        	defw 0											; Rutina de impresión.
 51+  843C
 52+  843C 00 00        Disparo_8 db 0,0									; Impacto / Dirección.
 53+  843E 00 00        	defw 0											; Puntero de_impresión.
 54+  8440 00 00        	defw 0											; Puntero objeto.
 55+  8442 00 00        	defw 0											; Rutina de impresión.
 56+  8444
 57+  8444 00 00        Disparo_9 db 0,0									; Impacto / Dirección.
 58+  8446 00 00        	defw 0											; Puntero de_impresión.
 59+  8448 00 00        	defw 0											; Puntero objeto.
 60+  844A 00 00        	defw 0											; Rutina de impresión.
 61+  844C
 62+  844C 00 00        Disparo_10 db 0,0									; Impacto / Dirección.
 63+  844E 00 00        	defw 0											; Puntero de_impresión.
 64+  8450 00 00        	defw 0											; Puntero objeto.
 65+  8452 00 00        	defw 0											; Rutina de impresión.
 66+  8454
 67+  8454              ; -------------------------------------------------------------------------------------
 68+  8454
 69+  8454              Indice_de_entidades									; 58 Bytes por entidad.
 70+  8454
 71+  8454 9A 84        	defw Entidad_1
 72+  8456 D4 84        	defw Entidad_2
 73+  8458 0E 85        	defw Entidad_3
 74+  845A 48 85        	defw Entidad_4
 75+  845C              ;	...
 76+  845C              ;	...
 77+  845C              ;	+ entidades ...
 78+  845C
 79+  845C 00 00        	defw 0
 80+  845E 00 00        	defw 0
 81+  8460
 82+  8460              ; ---------- ---------- ---------- ---------- ----------
 83+  8460
 84+  8460 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 85+  8462 00 00        	defw 0		 									; (Posicion_actual).
 86+  8464 00 00        	defw 0	 										; (Puntero_objeto).
 87+  8466 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 88+  8469
 89+  8469 05           	db %00000101									; (Attr).
 90+  846A
 91+  846A 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 92+  846C 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 93+  846E 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 94+  8470 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 95+  8472
 96+  8472 D0 50        	defw $50d0										; (Posicion_inicio).
 97+  8474 04           	db 4 											; (Cuad_objeto).
 98+  8475
 99+  8475 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
100+  8479
101+  8479 00 00        	db 0,0											; Variables_de_borrado
102+  847B 00 00        	defw 0											;	" " " " " " "
103+  847D 00 00        	defw 0											;	" " " " " " "
104+  847F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
105+  8483
106+  8483 00 00        	db 0,0											; Variables_de_pintado
107+  8485 00 00        	defw 0											;	" " " " " " "
108+  8487 00 00        	defw 0											;	" " " " " " "
109+  8489 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
110+  848D
111+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
112+  848F
113+  848F 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
114+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
115+  8496
116+  8496 00           	db 0 											; (Columnas).
117+  8497 00 00        	defw 0											; (Limite_horizontal).
118+  8499 00           	db 0											; (Limite_vertical).
119+  849A
120+  849A              ; ---------- ---------- ---------- ---------- ----------
121+  849A
122+  849A 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
123+  849C 00 00        	defw 0											; (Posicion_actual).
124+  849E 00 00        	defw 0 											; (Puntero_objeto).
125+  84A0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
126+  84A3
127+  84A3 00           	db %00000000 									; (Attr).
128+  84A4
129+  84A4 00 00        	defw 0											; (Indice_Sprite_der).
130+  84A6 00 00        	defw 0											; (Indice_Sprite_izq).
131+  84A8 00 00        	defw 0											; (Puntero_DESPLZ_der).
132+  84AA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
133+  84AC
134+  84AC 00 00        	defw 0											; (Posicion_inicio).
135+  84AE 00           	db 0											; (Cuad_objeto).
136+  84AF
137+  84AF 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
138+  84B3
139+  84B3 00 00        	db 0,0										    ; Variables_de_borrado
140+  84B5 00 00        	defw 0											;	" " " " " " "
141+  84B7 00 00        	defw 0											;	" " " " " " "
142+  84B9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
143+  84BD
144+  84BD 00 00        	db 0,0											; Variables_de_pintado
145+  84BF 00 00        	defw 0											;	" " " " " " "
146+  84C1 00 00        	defw 0											;	" " " " " " "
147+  84C3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
148+  84C7
149+  84C7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
150+  84C9
151+  84C9 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
152+  84CD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
153+  84D0
154+  84D0 00           	db 0 											; (Columnas).
155+  84D1 00 00        	defw 0											; (Limite_horizontal).
156+  84D3 00           	db 0											; (Limite_vertical).
157+  84D4
158+  84D4              ; ---------- ---------- ---------- ---------- ----------
159+  84D4
160+  84D4 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
161+  84D6 00 00        	defw 0                                          ; (Posicion_actual).
162+  84D8 00 00        	defw 0											; (Puntero_objeto).
163+  84DA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
164+  84DD
165+  84DD 02           	db %00000010									; (Attr).
166+  84DE
167+  84DE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
168+  84E0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
169+  84E2 00 00        	defw 0											; (Puntero_DESPLZ_der).
170+  84E4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
171+  84E6
172+  84E6 7E 47        	defw $477e                                      ; (Posicion_inicio).
173+  84E8 02           	db 2											; (Cuad_objeto).
174+  84E9
175+  84E9 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
176+  84ED
177+  84ED 00 00        	db 0,0											; Variables_de_borrado
178+  84EF 00 00        	defw 0										 	;	" " " " " " "
179+  84F1 00 00        	defw 0											;	" " " " " " "
180+  84F3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
181+  84F7
182+  84F7 00 00        	db 0,0											; Variables_de_pintado
183+  84F9 00 00        	defw 0											;	" " " " " " "
184+  84FB 00 00        	defw 0											;	" " " " " " "
185+  84FD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
186+  8501
187+  8501 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
188+  8503
189+  8503 9C 91 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
190+  8507 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
191+  850A
192+  850A 00           	db 0 											; (Columnas).
193+  850B 00 00        	defw 0											; (Limite_horizontal).
194+  850D 00           	db 0											; (Limite_vertical).
195+  850E
196+  850E              ; ---------- ---------- ---------- ---------- ----------
197+  850E
198+  850E 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
199+  8510 00 00        	defw 0                                          ; (Posicion_actual).
200+  8512 00 00        	defw 0											; (Puntero_objeto).
201+  8514 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
202+  8517
203+  8517 04           	db %00000100									; (Attr).
204+  8518
205+  8518 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
206+  851A 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
207+  851C
208+  851C 00 00        	defw 0											; (Puntero_DESPLZ_der).
209+  851E 00 00        	defw 0											; (Puntero_DESPLZ_izq).
210+  8520
211+  8520 A1 47        	defw $47a1                                      ; (Posicion_inicio).
212+  8522 01           	db 1											; (Cuad_objeto).
213+  8523
214+  8523 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
215+  8527
216+  8527 00 00        	db 0,0											; Variables_de_borrado
217+  8529 00 00        	defw 0										 	;	" " " " " " "
218+  852B 00 00        	defw 0											;	" " " " " " "
219+  852D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
220+  8531
221+  8531 00 00        	db 0,0											; Variables_de_pintado
222+  8533 00 00        	defw 0											;	" " " " " " "
223+  8535 00 00        	defw 0											;	" " " " " " "
224+  8537 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
225+  853B
226+  853B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
227+  853D
228+  853D 9E 91 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
229+  8541 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
230+  8544
231+  8544 00           	db 0 											; (Columnas).
232+  8545 00 00        	defw 0											; (Limite_horizontal).
233+  8547 00           	db 0											; (Limite_vertical).
234+  8548
235+  8548              ; ---------- ---------- ---------- ---------- ----------
236+  8548
237+  8548 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
238+  854A 00 00        	defw 0                                          ; (Posicion_actual).
239+  854C 00 00        	defw 0 											; (Puntero_objeto).
240+  854E 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
241+  8551
242+  8551 01           	db %00000001									; (Attr).
243+  8552
244+  8552 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
245+  8554 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
246+  8556
247+  8556 00 00        	defw 0											; (Puntero_DESPLZ_der).
248+  8558 00 00        	defw 0											; (Puntero_DESPLZ_izq).
249+  855A
250+  855A BE 47        	defw $47be                                      ; (Posicion_inicio).
251+  855C 00           	db 0											; (Cuad_objeto).
252+  855D
253+  855D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
254+  8561
255+  8561 00 00        	db 0,0											; Variables_de_borrado
256+  8563 00 00        	defw 0										 	;	" " " " " " "
257+  8565 00 00        	defw 0											;	" " " " " " "
258+  8567 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
259+  856B
260+  856B 00 00        	db 0,0											; Variables_de_pintado
261+  856D 00 00        	defw 0											;	" " " " " " "
262+  856F 00 00        	defw 0											;	" " " " " " "
263+  8571 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
264+  8575
265+  8575 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
266+  8577
267+  8577 8E 91 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
268+  857B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
269+  857E
270+  857E 00           	db 0 											; (Columnas).
271+  857F 00 00        	defw 0											; (Limite_horizontal).
272+  8581 00           	db 0											; (Limite_vertical).
273+  8582
# file closed: Entidades_y_disparos.asm
 21   8582
 22   8582              ; ******************************************************************************************************************************************************************************************
 23   8582              ; Constantes.
 24   8582              ; ******************************************************************************************************************************************************************************************
 25   8582              ;
 26   8582              ; 8/11/22
 27   8582              ;
 28   8582              ; Constantes generales.
 29   8582              ;
 30   8582
 31   8582              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8582              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8582              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8582              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8582              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   8582
 37   8582              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   8582              ;                               				        ; De momento situamos este almacén en $7000.
 39   8582
 40   8582
 41   8582              ; ******************************************************************************************************************************************************************************************
 42   8582              ; Variables.
 43   8582              ; ******************************************************************************************************************************************************************************************
 44   8582              ;
 45   8582              ; 10/11/22
 46   8582              ;
 47   8582              ; Variables de DRAW. (Motor principal).
 48   8582              ;
 49   8582              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   8582
 51   8582 02           Filas db 2												; Filas. [DRAW]
 52   8583 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8584 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8586 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8588 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8589 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   858A
 58   858A              ; ---------- ---------- ---------- ---------;      ;---------
 59   858A
 60   858A 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   858B              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   858B              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   858B 04           Attr db %00000100										; Atributos de la entidad:
 64   858C
 65   858C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   858C              ;
 67   858C              ;	COLORES: 0 ..... NEGRO
 68   858C              ;    		 1 ..... AZUL
 69   858C              ; 			 2 ..... ROJO
 70   858C              ;			 3 ..... MAGENTA
 71   858C              ; 			 4 ..... VERDE
 72   858C              ; 			 5 ..... CIAN
 73   858C              ;			 6 ..... AMARILLO
 74   858C              ; 			 7 ..... BLANCO
 75   858C
 76   858C A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   858E 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   8590 00 00        Puntero_DESPLZ_der defw 0
 79   8592 00 00        Puntero_DESPLZ_izq defw 0
 80   8594
 81   8594 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8596 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8597
 84   8597              ; Variables de objeto. (Características).
 85   8597
 86   8597 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8598 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8599 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   859A 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   859B
 91   859B 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   859D 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   859F 00 00        	defw 0
 94   85A1 00 00 00 00  	db 0,0,0,0
 95   85A5
 96   85A5 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85A7 00 00        	defw 0
 98   85A9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85AB 00 00 00 00  	db 0,0,0,0
100   85AF
101   85AF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85AF
103   85AF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85B0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85B0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85B0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85B0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85B0              ;
109   85B0              ; 														DESCRIPCIÖN:
110   85B0              ;
111   85B0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85B0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85B0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85B0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85B0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85B0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85B0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85B0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85B0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85B0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85B0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85B0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85B0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85B0              ;
125   85B0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85B0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85B0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85B0
129   85B0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85B1
131   85B1              ; Movimiento.
132   85B1
133   85B1 8A 91        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85B3 00 00        Puntero_mov defw 0
135   85B5 00           Contador_db_mov db 0
136   85B6 00           Incrementa_puntero db 0
137   85B7 00           Repetimos_db db 0
138   85B8
139   85B8              ; Variables de funcionamiento. [DRAW].
140   85B8
141   85B8 00           Columnas db 0
142   85B9 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85BB              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85BB 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85BC
146   85BC              ; 59 Bytes por entidad.
147   85BC              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85BC              ;					         		---------;      ;---------
149   85BC
150   85BC
151   85BC              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85BC              ; Gestión de ENTIDADES.
153   85BC
154   85BC 00 00        Puntero_store_entidades defw 0
155   85BE 00 00        Puntero_restore_entidades defw 0
156   85C0 00 00        Indice_restore defw 0
157   85C2 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   85C3 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   85C4              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   85C4              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   85C4              ;														; _ (Numero_de_malotes)="0".
162   85C4 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   85C6              ;														; _variable para almacenar lo posición del puntero_
164   85C6              ; 														; _de pila, SP.
165   85C6 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   85C8              ;														; La utiliza la rutina [Extrae_foto_registros].
167   85C8 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   85CA              ;														; _el snapshot de los registros de la siguiente entidad.
169   85CA              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   85CA
171   85CA              ; Gestión de FRAMES.
172   85CA
173   85CA 00           Switch db 0
174   85CB
175   85CB              ; Variables de Raster y localización en pantalla.
176   85CB
177   85CB 00 FF        Temp_Raster defw $ff00
178   85CD
179   85CD              ; Rutina principal *************************************************************************************************************************************************************************
180   85CD              ;
181   85CD              ;	14/11/22
182   85CD
183   85CD 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   85D0
185   85D0 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   85D2 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   85D4 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   85D6 F3           	DI
189   85D7
190   85D7 3E 01        	ld a,1
191   85D9 D3 FE        	out ($fe),a
192   85DB
193   85DB 3E 07        	ld a,%00000111
194   85DD CD C3 8D     	call Cls
195   85E0
196   85E0              ;	call Pinta_FILAS
197   85E0
198   85E0 CD E6 87     	call Pulsa_ENTER
199   85E3
200   85E3 21 C2 85     	ld hl,Numero_de_entidades
201   85E6 46           	ld b,(hl)
202   85E7 04           	inc b
203   85E8 05           	dec b
204   85E9 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   85EB
206   85EB              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   85EB              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   85EB              ;	Pintamos el resto de entidades:
209   85EB
210   85EB CD 06 87     	call Inicia_punteros_de_entidades
211   85EE
212   85EE              ;	INICIA ENTIDADES!!!!!
213   85EE
214   85EE C5           1 push bc  												; Guardo el contador de entidades.
215   85EF CD 39 87      	call Inicia_Puntero_objeto
216   85F2 CD 75 88     	call Draw
217   85F5 CD A0 7F     	call Guarda_foto_registros
218   85F8 CD 81 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   85FB C1           	pop bc
220   85FC 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   85FE
222   85FE              ; 	INICIA AMADEUS!!!!!
223   85FE
224   85FE CD C2 87     3 call Restore_Amadeus
225   8601 CD 39 87     	call Inicia_Puntero_objeto
226   8604 CD 75 88     	call Draw
227   8607 CD A0 7F     	call Guarda_foto_registros
228   860A CD D4 87     	call Store_Amadeus
229   860D
230   860D              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   860D
232   860D CD 06 87     	call Inicia_punteros_de_entidades
233   8610 CD B0 87     	call Restore_Primera_entidad
234   8613
235   8613 3A C2 85     	ld a,(Numero_de_entidades)
236   8616 3C           	inc a
237   8617 32 C3 85     	ld (Numero_de_malotes),a
238   861A
239   861A FB           2 ei
240   861B 18 FD        	jr 2B
241   861D
242   861D              ; -----------------------------------------------------------------------------------
243   861D
244   861D              Frame
245   861D
246   861D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   861D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   861D
249   861D 3E 07            ld a,7
250   861F D3 FE            out ($fe),a
251   8621 CD 79 8B     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   8624 3E 01            ld a,1
253   8626 D3 FE            out ($fe),a
254   8628
255   8628              ; ----------------------------------------------------------------------
256   8628
257   8628 21 00 70     	ld hl,Album_de_fotos
258   862B 22 C8 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
259   862E              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
260   862E 3A C2 85         ld a,(Numero_de_entidades)
261   8631 47               ld b,a
262   8632 A7           	and a
263   8633 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
264   8635
265   8635 C5           2 push bc
266   8636 CD 7F 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
267   8639 3A AF 85     	ld a,(Ctrl_0)
268   863C CB 67        	bit 4,a
269   863E 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
270   8640 CD CD 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
271   8643
272   8643              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
273   8643              ; 16/02/23.
274   8643              ; [[[
275   8643 CD 1D 88     1 call Detecta_disparo_entidad
276   8646              ; ]]]
277   8646
278   8646              ;1
279   8646 21 AF 85     	ld hl,Ctrl_0
280   8649 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
281   864B AF           	xor a
282   864C 32 B0 85     	ld (Obj_dibujado),a
283   864F CD 81 87     	call Store_Restore_entidades
284   8652 C1           	pop bc
285   8653 10 E0        	djnz 2B
286   8655
287   8655 CD C2 87     4 call Restore_Amadeus
288   8658 CD 9E 86     	call Mov_Amadeus
289   865B 3A AF 85     	ld a,(Ctrl_0)
290   865E CB 67        	bit 4,a
291   8660 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
292   8662 CD CD 86     	call Guarda_foto_entidad_a_pintar
293   8665
294   8665 21 AF 85     3 ld hl,Ctrl_0
295   8668 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
296   866A AF           	xor a
297   866B 32 B0 85     	ld (Obj_dibujado),a
298   866E CD D4 87     	call Store_Amadeus
299   8671
300   8671              ; -----
301   8671
302   8671 CD 06 87     	call Inicia_punteros_de_entidades
303   8674 CD B0 87     	call Restore_Primera_entidad
304   8677 CD 1C 87     	call Calcula_numero_de_malotes
305   867A
306   867A 3E 00        	ld a,0
307   867C D3 FE        	out ($fe),a
308   867E C9           	ret
309   867F
310   867F              ; --------------------------------------------------------------------------------------------------------------
311   867F              ;
312   867F              ;	29/1/23
313   867F
314   867F              Mov_obj
315   867F
316   867F              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
317   867F
318   867F AF           	xor a
319   8680 32 B0 85     	ld (Obj_dibujado),a
320   8683 CD D7 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
321   8686              ;														; Obj_dibujado="0".
322   8686              ; Movemos Entidades malignas.
323   8686
324   8686 CD A0 91     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
325   8689 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
326   868C CB 67        	bit 4,a
327   868E C8           	ret z
328   868F
329   868F              ; ---------
330   868F
331   868F 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
332   8691 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
333   8694 CD D7 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
334   8697 CD EE 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
335   869A CD BD 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
336   869D C9           	ret													; _de la misma.
337   869E
338   869E              ; --------------------------------------------------------------------------------------------------------------
339   869E              ;
340   869E              ;	29/1/23
341   869E
342   869E              Mov_Amadeus
343   869E
344   869E AF           	xor a
345   869F 32 B0 85     	ld (Obj_dibujado),a
346   86A2 CD D7 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
347   86A5              ;														; Obj_dibujado="0".
348   86A5              ; Movemos Amadeus.
349   86A5
350   86A5 CD FA 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
351   86A8 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
352   86AB CB 67        	bit 4,a
353   86AD C8           	ret z
354   86AE
355   86AE              ; ---------
356   86AE
357   86AE 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
358   86B0 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
359   86B3 CD D7 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
360   86B6 CD EE 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
361   86B9 CD BD 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
362   86BC C9           	ret													; _de la nave.
363   86BD
364   86BD              ; --------------------------------------------------------------------------------------------------------------
365   86BD              ;
366   86BD              ;	31/01/23
367   86BD              ;
368   86BD              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
369   86BD
370   86BD              Guarda_foto_entidad_a_borrar
371   86BD
372   86BD CD 4F 8B     	call Prepara_draw
373   86C0 CD 89 8A     	call calcula_CColumnass
374   86C3 CD C0 8A     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
375   86C6 CD 15 8B     	call Define_rutina_de_impresion
376   86C9 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
377   86CC C9           	ret
378   86CD
379   86CD              ; --------------------------------------------------------------------------------------------------------------
380   86CD              ;
381   86CD              ;	31/01/23
382   86CD              ;
383   86CD              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
384   86CD              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
385   86CD
386   86CD              Guarda_foto_entidad_a_pintar
387   86CD
388   86CD CD FA 86     	call Repone_pintar
389   86D0 CD 75 88     	call Draw
390   86D3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
391   86D6 C9           	ret
392   86D7
393   86D7              ; --------------------------------------------------------------------------------------------------------------
394   86D7              ;
395   86D7              ;
396   86D7
397   86D7 21 82 85     Prepara_var_pintado_borrado	ld hl,Filas
398   86DA 3A B0 85     	ld a,(Obj_dibujado)
399   86DD A7           	and a
400   86DE 28 05        	jr z,1F
401   86E0 11 A5 85     	ld de,Variables_de_pintado
402   86E3 18 03        	jr 2F
403   86E5 11 9B 85     1 ld de,Variables_de_borrado
404   86E8 01 08 00     2 ld bc,8
405   86EB ED B0        	ldir
406   86ED C9           	ret
407   86EE
408   86EE              ; --------------------------------------------------------------------------------------------------------------
409   86EE
410   86EE 21 9B 85     Repone_borrar ld hl,Variables_de_borrado
411   86F1 11 82 85     	ld de,Filas
412   86F4 01 08 00     	ld bc,8
413   86F7 ED B0        	ldir
414   86F9 C9           	ret
415   86FA
416   86FA 21 A5 85     Repone_pintar ld hl,Variables_de_pintado
417   86FD 11 82 85     	ld de,Filas
418   8700 01 08 00     	ld bc,8
419   8703 ED B0        	ldir
420   8705 C9           	ret
421   8706
422   8706              ; *************************************************************************************************************************************************************
423   8706              ;
424   8706              ; 8/1/23
425   8706              ;
426   8706              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
427   8706              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
428   8706              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
429   8706
430   8706              ; Destruye HL y DE !!!!!
431   8706
432   8706              Inicia_punteros_de_entidades
433   8706
434   8706 21 54 84     	ld hl,Indice_de_entidades
435   8709 CD 33 87         call Extrae_address
436   870C 22 BC 85         ld (Puntero_store_entidades),hl
437   870F 21 56 84     	ld hl,Indice_de_entidades+2
438   8712 22 C0 85     	ld (Indice_restore),hl
439   8715 CD 33 87     	call Extrae_address
440   8718 22 BE 85     	ld (Puntero_restore_entidades),hl
441   871B C9               ret
442   871C
443   871C              ; -------------------------------------------------------------------------------------------------------------
444   871C              ;
445   871C              ; 30/1/23
446   871C              ;
447   871C
448   871C 2A C8 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
449   871F 7D           	ld a,l
450   8720 A7           	and a
451   8721 28 0C        	jr z,3F
452   8723 AF           	xor a
453   8724 67           	ld h,a
454   8725 7D           	ld a,l
455   8726 D6 06        1 sub 6
456   8728 28 03        	jr z,2F
457   872A 24           	inc h
458   872B 18 F9        	jr 1B
459   872D 24           2 inc h
460   872E 7C           	ld a,h
461   872F 32 C3 85     3 ld (Numero_de_malotes),a
462   8732 C9           	ret
463   8733
464   8733              ; *************************************************************************************************************************************************************
465   8733              ;
466   8733              ; 20/10/22
467   8733              ;
468   8733              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
469   8733              ;
470   8733              ; Destruye el puntero y DE !!!!!
471   8733
472   8733 5E           Extrae_address ld e,(hl)
473   8734 23           	inc hl
474   8735 56           	ld d,(hl)
475   8736 2B           	dec hl
476   8737 EB           	ex de,hl
477   8738 C9           	ret
478   8739
479   8739              ; *************************************************************************************************************************************************************
480   8739              ;
481   8739              ;	7/2/23
482   8739              ;
483   8739              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
484   8739              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
485   8739              ;
486   8739              ;   Destruye HL y BC !!!!!,
487   8739              ;
488   8739              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
489   8739              ;					"0" ..... Izquierda.
490   8739
491   8739              Inicia_Puntero_objeto
492   8739
493   8739 3A 96 85     	ld a,(Cuad_objeto)
494   873C E6 01        	and 1
495   873E F5           	push af
496   873F CC 5D 87     	call z,Inicia_puntero_objeto_izq
497   8742 F1           	pop af
498   8743 28 2B        	jr z,1F
499   8745 CD 4A 87     	call Inicia_puntero_objeto_der
500   8748 18 26        	jr 1F
501   874A
502   874A              ; Arrancamos desde la parte izquierda de la pantalla.
503   874A              ; Iniciamos (Indice_Sprite_der).
504   874A
505   874A 2A 8C 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
506   874D 22 90 85     	ld (Puntero_DESPLZ_der),hl
507   8750 CD 33 87     	call Extrae_address
508   8753 22 86 85     	ld (Puntero_objeto),hl
509   8756
510   8756 2A 8E 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
511   8759              ;	call Extrae_address
512   8759 22 92 85     	ld (Puntero_DESPLZ_izq),hl
513   875C C9           	ret
514   875D
515   875D              ; Arrancamos desde la parte derecha de la pantalla.
516   875D              ; Iniciamos (Indice_Sprite_izq).
517   875D
518   875D 2A 8E 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
519   8760 22 92 85     	ld (Puntero_DESPLZ_izq),hl
520   8763 CD 33 87     	call Extrae_address
521   8766 22 86 85     	ld (Puntero_objeto),hl
522   8769
523   8769 2A 8C 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
524   876C              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
525   876C 22 90 85     	ld (Puntero_DESPLZ_der),hl
526   876F C9           	ret
527   8770
528   8770              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
529   8770
530   8770 21 40 83     1 ld hl,Amadeus
531   8773 ED 4B 86 85  	ld bc,(Puntero_objeto)
532   8777 B7 ED 42     	sub hl,bc
533   877A C0           	ret nz
534   877B 21 AF 85     	ld hl,Ctrl_0
535   877E CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
536   8780 C9           	ret 												; _de nuestra nave en los extremos.
537   8781
538   8781              ; *************************************************************************************************************************************************************
539   8781              ;
540   8781              ;	8/1/23
541   8781              ;
542   8781              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
543   8781              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
544   8781
545   8781              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
546   8781              ;	_de la 2ª y 3ª entidad respectivamente.
547   8781
548   8781
549   8781
550   8781              Store_Restore_entidades
551   8781
552   8781 E5           	push hl
553   8782 D5           	push de
554   8783 C5            	push bc
555   8784
556   8784              ;	STORE !!!!!
557   8784              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
558   8784
559   8784 21 82 85     	ld hl,Filas
560   8787 ED 5B BC 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
561   878B 01 3A 00     	ld bc,58
562   878E ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
563   8790
564   8790              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
565   8790
566   8790 2A BE 85     	ld hl,(Puntero_restore_entidades)
567   8793 22 BC 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
568   8796 11 82 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
569   8799 01 3A 00     	ld bc,58
570   879C ED B0        	ldir
571   879E
572   879E              ;	Incrementa RESTORE !!!!!
573   879E
574   879E 2A C0 85         ld hl,(Indice_restore)
575   87A1 23           	inc hl
576   87A2 23           	inc hl
577   87A3 22 C0 85     	ld (Indice_restore),hl
578   87A6 CD 33 87         call Extrae_address
579   87A9 22 BE 85         ld (Puntero_restore_entidades),hl
580   87AC C1           	pop bc
581   87AD D1           	pop de
582   87AE E1           	pop hl
583   87AF C9           	ret
584   87B0
585   87B0              ; **************************************************************************************************
586   87B0              ;
587   87B0              ;	29/10/22
588   87B0              ;
589   87B0              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
590   87B0
591   87B0 E5           Restore_Primera_entidad push hl
592   87B1 D5           	push de
593   87B2 C5            	push bc
594   87B3 2A BC 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
595   87B6 11 82 85     	ld de,Filas
596   87B9 01 3A 00     	ld bc,58
597   87BC ED B0        	ldir
598   87BE C1           	pop bc
599   87BF D1           	pop de
600   87C0 E1           	pop hl
601   87C1 C9           	ret
602   87C2
603   87C2              ; **************************************************************************************************
604   87C2              ;
605   87C2              ;	25/01/23
606   87C2              ;
607   87C2              ;	Restore_Amadeus
608   87C2              ;
609   87C2              ;	Cargamos en DRAW los parámetros de Amadeus.
610   87C2              ;
611   87C2
612   87C2 E5           Restore_Amadeus	push hl
613   87C3 D5           	push de
614   87C4 C5            	push bc
615   87C5 21 60 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
616   87C8 11 82 85     	ld de,Filas
617   87CB 01 3A 00     	ld bc,58
618   87CE ED B0        	ldir
619   87D0 C1           	pop bc
620   87D1 D1           	pop de
621   87D2 E1           	pop hl
622   87D3 C9           	ret
623   87D4
624   87D4              ; *************************************************************************************************************************************************************
625   87D4              ;
626   87D4              ;	29/01/23
627   87D4              ;
628   87D4              ;	Store_Amadeus
629   87D4              ;
630   87D4              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
631   87D4              ;
632   87D4
633   87D4 E5           Store_Amadeus push hl
634   87D5 D5           	push de
635   87D6 C5            	push bc
636   87D7 21 82 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
637   87DA 11 60 84     	ld de,Amadeus_db
638   87DD 01 3A 00     	ld bc,58
639   87E0 ED B0        	ldir
640   87E2 C1           	pop bc
641   87E3 D1           	pop de
642   87E4 E1           	pop hl
643   87E5 C9           	ret
644   87E6
645   87E6              ; **************************************************************************************************
646   87E6
647   87E6              ; Teclado.
648   87E6
649   87E6 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
650   87E8 DB FE        	in a,($fe)
651   87EA E6 01        	and $01
652   87EC 28 02        	jr z,1f
653   87EE 18 F6        	jr Pulsa_ENTER
654   87F0 C9           1 ret
655   87F1
656   87F1              ; **************************************************************************************************
657   87F1              ;
658   87F1              ; Temporización.
659   87F1
660   87F1              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
661   87F1              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
662   87F1              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
663   87F1              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
664   87F1
665   87F1              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
666   87F1              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
667   87F1              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
668   87F1
669   87F1              ; A partir de $4f61 no hace falta DELAY.
670   87F1
671   87F1              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
672   87F1
673   87F1 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
674   87F4 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
675   87F5 78           	LD A,B
676   87F6 A7           	AND A
677   87F7 20 FB        	JR NZ,wait
678   87F9 C9           	RET
679   87FA
680   87FA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
681   87FA              ;
682   87FA              ;	16/02/23
683   87FA
684   87FA              Movimiento_Amadeus
685   87FA
686   87FA 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
687   87FC DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
688   87FE E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
689   8800 CC 51 8F         call z,Mov_left											;			"			"			"			"			"			"			"			"
690   8803 3E F7        	ld a,$f7
691   8805 DB FE        	in a,($fe)
692   8807 E6 01        	and $01
693   8809 C8           	ret z
694   880A
695   880A 3E F7        	ld a,$f7
696   880C DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
697   880E E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
698   8810 CC 33 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
699   8813
700   8813              ; Disparo.
701   8813
702   8813 3E F7        	ld a,$f7												; "5" para disparar.
703   8815 DB FE        	in a,($fe)
704   8817 E6 10        	and $10
705   8819 CC 50 88     	call z,Genera_disparo
706   881C C9               ret
707   881D
708   881D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
709   881D              ;
710   881D              Detecta_disparo_entidad
711   881D
712   881D 3E 7F        	ld a,$7f
713   881F DB FE        	in a,($fe)
714   8821 E6 01        	and 1
715   8823 C0           	ret nz
716   8824 CD 50 88     	call Genera_disparo
717   8827
718   8827              ; Pinta indicadores de FILAS. ------------------------------------------------------
719   8827
720   8827 21 10 40     Pinta_FILAS ld hl,$4010
721   882A              ;	ld b,9
722   882A              ;2 push hl
723   882A              ;	push bc
724   882A 06 BF        	ld b,$bf
725   882C 36 80        1 ld (hl),%10000000
726   882E CD 5B 8B     	call NextScan
727   8831 10 F9        	djnz 1B
728   8833              ;	pop bc
729   8833              ;	pop hl
730   8833              ;	inc l
731   8833              ;	djnz 2B
732   8833 06 03        	ld b,3
733   8835 21 00 47         ld hl,$4700
734   8838 CD 3E 88     3 call Bucle_1
735   883B 10 FB            djnz 3B
736   883D C9               ret
737   883E
738   883E C5           Bucle_1 push bc
739   883F E5                   push hl
740   8840 D1                   pop de
741   8841 13                   inc de
742   8842 01 FF 00             ld bc,255
743   8845 36 FF                ld (hl),255
744   8847 ED B0                ldir
745   8849 23                   inc hl
746   884A 3E 07                ld a,7
747   884C 84                   add a,h
748   884D 67                   ld h,a
749   884E C1                   pop bc
750   884F C9                   ret
751   8850
752   8850              ; ---------------------------------------------------------------
753   8850
754   8850              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  8850              ; ******************************************************************************************************************************************************************************************
  2+  8850              ;
  3+  8850              ;   16/02/23
  4+  8850              ;
  5+  8850              ;
  6+  8850              ;
  7+  8850              ; 	Calcula la dirección de memoria de pantalla donde se va a iniciar el disparo, (se aplica a_)
  8+  8850              ;   _entidades y Amadeus).
  9+  8850
 10+  8850              Genera_disparo
 11+  8850
 12+  8850 3A 96 85         ld a,(Cuad_objeto)
 13+  8853 FE 02            cp 2
 14+  8855 38 0A            jr c,1F
 15+  8857 28 08            jr z,1F
 16+  8859
 17+  8859              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 18+  8859
 19+  8859 E6 01            and 1
 20+  885B 28 02            jr z,2F
 21+  885D
 22+  885D              ; Estamos en el 3er cuadrante de pantalla.
 23+  885D
 24+  885D 18 FE            jr $
 25+  885F
 26+  885F              ; Estamos en el 4º cuadrante de pantalla.
 27+  885F
 28+  885F 18 FE        2 jr $
 29+  8861
 30+  8861              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
 31+  8861
 32+  8861 28 0F        1 jr z,3F
 33+  8863
 34+  8863              ; 1er CUAD. ----- ----- ----- ----- -----
 35+  8863              ;
 36+  8863              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
 37+  8863              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
 38+  8863              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
 39+  8863              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
 40+  8863
 41+  8863 2A 84 85     	ld hl,(Posicion_actual)
 42+  8866 CD 5B 8B     	call NextScan
 43+  8869
 44+  8869              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
 45+  8869
 46+  8869 3A 8A 85         ld a,(CTRL_DESPLZ)
 47+  886C A7               and a
 48+  886D 28 00            jr z,1F
 49+  886F
 50+  886F              ; (CTRL_DESPLZ)="0".
 51+  886F
Disparo.asm(52): error: Illegal instruction: 1 ld
 52+  886F              1 ld
 53+  886F E5           	push hl
 54+  8870 DD E1        	pop ix										; IX contiene el puntero de impresión.
 55+  8872
 56+  8872
 57+  8872
 58+  8872
 59+  8872
 60+  8872
 61+  8872
 62+  8872              ; Estamos en el 2º cuadrante de pantalla.
 63+  8872
 64+  8872 18 FE        3 jr $
 65+  8874
 66+  8874 C9           10 ret
 67+  8875
# file closed: Disparo.asm
755   8875              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8875              ; ******************************************************************************************************************************************************************************************
  2+  8875              ;
  3+  8875              ; 01/23
  4+  8875              ;
  5+  8875              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8875
  7+  8875 CD 4F 8B     Draw call Prepara_draw
  8+  8878 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8879 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  887A 28 05        	jr z,2F
 11+  887C
 12+  887C 3A 96 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  887F 18 0C        	jr 1F
 14+  8881 2A 94 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8884 22 84 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8887 CD 16 8A     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  888A              ;													; _la esquina superior izquierda de la pantalla.
 18+  888A CD 22 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  888D 3A AF 85     1 ld a,(Ctrl_0)
 20+  8890 CB 6F        	bit 5,a
 21+  8892 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8894
 23+  8894 CD AC 88     	call Comprueba_limite_horizontal
 24+  8897 CD 3C 89     	call Comprueba_limite_vertical
 25+  889A
 26+  889A              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  889A
 28+  889A CD 89 8A     3 call calcula_CColumnass
 29+  889D CD C0 8A     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  88A0 CD 15 8B     	call Define_rutina_de_impresion
 31+  88A3
 32+  88A3 3A AF 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  88A6 CB AF        	res 5,a											; _a ser de utilidad.
 34+  88A8 32 AF 85     	ld (Ctrl_0),a
 35+  88AB
 36+  88AB C9           	ret
 37+  88AC
 38+  88AC              ; *******************************************************************************************************************************************************************************************
 39+  88AC              ;	21/01/23
 40+  88AC              ;
 41+  88AC              ; 	Comprueba_limite_horizontal.
 42+  88AC              ;
 43+  88AC              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  88AC              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  88AC              ;
 46+  88AC              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  88AC              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  88AC              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  88AC              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  88AC
 51+  88AC
 52+  88AC
 53+  88AC 3A AF 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  88AF CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  88B1 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  88B3 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  88B5 32 AF 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  88B8 18 09            jr 6F
 59+  88BA CB 5F        1 bit 3,a
 60+  88BC 28 0A            jr z,2F
 61+  88BE E6 F7            and $f7
 62+  88C0 32 AF 85         ld (Ctrl_0),a
 63+  88C3 CD 16 8A     6 call Inicializacion
 64+  88C6 18 5B            jr 5F
 65+  88C8 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  88C9
 67+  88C9              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  88C9              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  88C9
 70+  88C9 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  88CA 2A B9 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  88CD CD B9 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  88D0 67           	ld h,a
 74+  88D1 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  88D2 CD B9 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  88D5 67           	ld h,a
 77+  88D6 A7           	and a
 78+  88D7 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  88D9 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  88DA 3A 96 85     	ld a,(Cuad_objeto)
 81+  88DD FE 02        	cp 2
 82+  88DF 38 1E        	jr c,3F
 83+  88E1 28 1C        	jr z,3F
 84+  88E3 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  88E4 28 23            jr z,7F
 86+  88E6 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  88E8 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  88EA E1           	pop hl
 89+  88EB
 90+  88EB              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  88EB              ; _para indicar con E="2" en caso necesario.
 92+  88EB
 93+  88EB E5               push hl
 94+  88EC C5               push bc
 95+  88ED CD B9 8D     	call calcula_tercio
 96+  88F0 FE 01        	cp 1
 97+  88F2 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  88F4 CD 24 89         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  88F7 28 26            jr z,9F
100+  88F9 38 24            jr c,9F
101+  88FB 1E 00        11 ld e,0
102+  88FD 18 22            jr 8F
103+  88FF 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8900 28 07        	jr z, 7F
105+  8902 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8904 1E 00         	ld e,0
107+  8906 E1           	pop hl
108+  8907 18 04        	jr 4F
109+  8909 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  890B 18 15            jr 10F
111+  890D
112+  890D              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  890D              ; _para indicar con E="2" en caso necesario.
114+  890D
115+  890D E5           4 push hl
116+  890E C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  890F CD B9 8D     	call calcula_tercio
118+  8912 FE 01        	cp 1
119+  8914 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8916 CD 24 89         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8919 28 04            jr z,9F
122+  891B 30 02            jr nc,9F
123+  891D 18 02        	jr 8F
124+  891F 1E 02        9 ld e,2
125+  8921 C1           8 pop bc
126+  8922 E1           10 pop hl
127+  8923 C9           5 ret
128+  8924
129+  8924              ; --------------------
130+  8924              ;
131+  8924              ; 25/08/22
132+  8924
133+  8924 CD B9 8D     Comprueba_centro call calcula_tercio
134+  8927 67               ld h,a
135+  8928 08           	ex af,af
136+  8929 FE 02        	cp 2
137+  892B 38 07        	jr c,1F
138+  892D 28 05        	jr z,1F
139+  892F 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8932 18 03        	jr 2F
141+  8934 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8937 08           2 ex af,af
143+  8938 A7               and a
144+  8939 ED 42            sbc hl,bc
145+  893B C9               ret
146+  893C
147+  893C              ; *********************************************************************************************************************************************************************************************
148+  893C              ;
149+  893C              ;   16/8/22
150+  893C              ;
151+  893C              ;	Comprueba_limite_vertical
152+  893C              ;
153+  893C              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  893C              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  893C              ;
156+  893C
157+  893C 2A 84 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  893F 7D           	ld a,l
159+  8940 E6 1F        	and $1F
160+  8942 57           	ld d,a
161+  8943 3A BB 85     	ld a,(Limite_vertical)
162+  8946 BA           	cp d 											; Límite - Posición.
163+  8947 08           	ex af,af 										; Resultado de CP d en F'.
164+  8948 3A 96 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  894B CB 47        	bit 0,a
166+  894D 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  894F
168+  894F              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  894F
170+  894F 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8950 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8952
173+  8952              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8952              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8952
176+  8952 3A 88 85         ld a,(Coordenada_X)
177+  8955 16 0F            ld d,Centro_izquierda
178+  8957 A7               and a
179+  8958 92               sub d 											 ; Posición - Centro_izquierda.
180+  8959 28 1E            jr z,3F
181+  895B 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  895D              ;                                                    ; _salimos sin modificar nada.
183+  895D 18 0E            jr 2F
184+  895F 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8960 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8962
187+  8962              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8962              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8962
190+  8962 3A 88 85         ld a,(Coordenada_X)
191+  8965 16 10            ld d,Centro_derecha
192+  8967 A7               and a
193+  8968 92               sub d
194+  8969 28 0E            jr z,3F
195+  896B 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  896D              ;                                                    ; _salimos sin modificar nada.
197+  896D CB 43        2 bit 0,e
198+  896F 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8971 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8972 CD 06 8A         call Modificaccionne
201+  8975 C1           	pop bc
202+  8976 CD 16 8A         call Inicializacion
203+  8979 C9           3 ret 				 								 ; Salimos de la rutina.
204+  897A
205+  897A              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  897A
207+  897A C5           4 push bc
208+  897B 01 83 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  897E 0A           	ld a,(bc)
210+  897F 3D           	dec a
211+  8980 47           	ld b,a 											 ; Columnas-1 en B.
212+  8981 7D           	ld a,l
213+  8982 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8983 CB 47        	bit 0,a
215+  8985 28 03        	jr z,5F
216+  8987 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8988 18 2E        	jr 7F
218+  898A
219+  898A              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  898A
221+  898A 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  898B F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  898C 3A AF 85     	ld a,(Ctrl_0)
224+  898F CB 4F        	bit 1,a
225+  8991 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8993 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8994
228+  8994              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8994
230+  8994 1C               inc e
231+  8995 1D               dec e
232+  8996 20 07            jr nz,12F
233+  8998 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8999 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  899A 22 84 85     	ld (Posicion_actual),hl
236+  899D 18 44        13 jr 9F
237+  899F CB 43        12 bit 0,e
238+  89A1 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  89A3              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  89A3 C1           	pop bc
241+  89A4 18 D3        	jr 3B
242+  89A6 80           14 add b
243+  89A7 6F               ld l,a
244+  89A8 22 84 85     	ld (Posicion_actual),hl
245+  89AB CD 06 8A         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  89AE 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  89B0 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  89B2 32 AF 85         ld (Ctrl_0),a
249+  89B5 F1           	pop af
250+  89B6 18 2B        	jr 9F
251+  89B8
252+  89B8              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  89B8
254+  89B8 F5           7 push af
255+  89B9 3A AF 85     	ld a,(Ctrl_0)
256+  89BC CB 47        	bit 0,a
257+  89BE 20 1D        	jr nz,8F
258+  89C0 F1           	pop af
259+  89C1
260+  89C1              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  89C1
262+  89C1 1C           	inc e
263+  89C2 1D               dec e
264+  89C3 20 07            jr nz,10F
265+  89C5 90           	sub b
266+  89C6 6F               ld l,a
267+  89C7 22 84 85     	ld (Posicion_actual),hl
268+  89CA 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  89CC              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  89CC CB 43        10 bit 0,e
271+  89CE 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  89D0              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  89D0 C1           	pop bc
274+  89D1 18 A6        	jr 3B
275+  89D3 90           16 sub b
276+  89D4 6F               ld l,a
277+  89D5 22 84 85     	ld (Posicion_actual),hl
278+  89D8 CD 06 8A         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  89DB 18 06            jr 9F
280+  89DD E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  89DF 32 AF 85         ld (Ctrl_0),a
282+  89E2 F1           	pop af
283+  89E3 C1           9 pop bc
284+  89E4 1E 00        	ld e,0
285+  89E6 CD 16 8A         call Inicializacion
286+  89E9 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  89EA 08           	ex af,af
288+  89EB F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  89EC 18 8B            jr 3B
290+  89EE
291+  89EE              ; --------------------
292+  89EE
293+  89EE 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  89F0 CD 6A 8B     1 call PreviousScan
295+  89F3 10 FB            djnz 1B
296+  89F5 22 84 85     	ld (Posicion_actual),hl
297+  89F8 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  89F9 C9           	ret
299+  89FA
300+  89FA              ; --------------------
301+  89FA
302+  89FA 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  89FC CD 5B 8B     1 call NextScan
304+  89FF 10 FB            djnz 1B
305+  8A01 22 84 85     	ld (Posicion_actual),hl
306+  8A04 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8A05 C9           	ret
308+  8A06
309+  8A06              ; --------------------
310+  8A06              ;
311+  8A06              ;	22/01/23
312+  8A06              ;
313+  8A06              ;	E="1". Hemos cambiado de cuadrante.
314+  8A06              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8A06              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8A06
317+  8A06
318+  8A06              Modificaccionne
319+  8A06
320+  8A06 3A 96 85     	ld a,(Cuad_objeto)
321+  8A09 FE 02        	cp 2
322+  8A0B CC EE 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8A0E DC EE 89         call c,Modifica_Pos_actual
324+  8A11 C8           	ret z
325+  8A12 CD FA 89         call Modifica_Pos_actual2
326+  8A15 C9               ret
327+  8A16
328+  8A16              ; *************************************************************************************************************************************************************************************************
329+  8A16              ;
330+  8A16              ;	13/8/22
331+  8A16              ;
332+  8A16              ;	Inicializacion
333+  8A16              ;
334+  8A16              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8A16              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8A16              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8A16              ;
338+  8A16              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8A16              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8A16              ;	_ desaparece/aparece.
341+  8A16
342+  8A16              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8A16              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8A16              ;
345+  8A16              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8A16              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8A16              ; 		   [E] ="0"
348+  8A16
349+  8A16              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8A16
351+  8A16 CD B9 8D     Inicializacion call calcula_tercio
352+  8A19 28 36        	jr z,primit
353+  8A1B E6 02        	and 2
354+  8A1D 20 07        	jr nz,segmit
355+  8A1F 7D           	ld a,l
356+  8A20 FE 7F        	cp $7f
357+  8A22 38 2D        	jr c,primit
358+  8A24 28 2B        	jr z,primit
359+  8A26 CD 83 8A     segmit call column
360+  8A29 38 13        	jr c,tercuad
361+  8A2B 3E 04        cuarcuad ld a,4
362+  8A2D 32 96 85     	ld (Cuad_objeto),a
363+  8A30 21 20 48     	ld hl,$4820
364+  8A33 22 B9 85     	ld (Limite_horizontal),hl
365+  8A36 21 BB 85     	ld hl,Limite_vertical
366+  8A39 36 0D        	ld (hl),$0d
367+  8A3B 08           	ex af,af
368+  8A3C 18 3C        	jr 1F
369+  8A3E              tercuad
370+  8A3E 3E 03        	ld a,3
371+  8A40 32 96 85     	ld (Cuad_objeto),a
372+  8A43 21 20 48     	ld hl,$4820
373+  8A46 22 B9 85     	ld (Limite_horizontal),hl
374+  8A49 21 BB 85     	ld hl,Limite_vertical
375+  8A4C 36 12        	ld (hl),$12
376+  8A4E 08           	ex af,af
377+  8A4F 18 29        	jr 1F
378+  8A51 CD 83 8A     primit call column
379+  8A54 38 13        	jr c, primcuad
380+  8A56              segcuad
381+  8A56 3E 02        	ld a,2
382+  8A58 32 96 85     	ld (Cuad_objeto),a
383+  8A5B 21 C0 4F     	ld hl,$4fc0
384+  8A5E 22 B9 85     	ld (Limite_horizontal),hl
385+  8A61 21 BB 85     	ld hl,Limite_vertical
386+  8A64 36 0D        	ld (hl),$0d
387+  8A66 08           	ex af,af
388+  8A67 18 11        	jr 1F
389+  8A69              primcuad
390+  8A69 3E 01        	ld a,1
391+  8A6B 32 96 85     	ld (Cuad_objeto),a
392+  8A6E 21 C0 4F     	ld hl,$4fc0
393+  8A71 22 B9 85     	ld (Limite_horizontal),hl
394+  8A74 21 BB 85     	ld hl,Limite_vertical
395+  8A77 36 12        	ld (hl),$12
396+  8A79 08           	ex af,af
397+  8A7A CD EB 90     1 call Genera_coordenadas
398+  8A7D 21 AF 85     	ld hl,Ctrl_0
399+  8A80 CB EE        	set 5,(hl)
400+  8A82 C9           	ret
401+  8A83
402+  8A83              ; ------------------------------------------------------------------------------------------------------------------
403+  8A83
404+  8A83              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8A83              ;
406+  8A83              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8A83
408+  8A83 7D           column ld a,l
409+  8A84 E6 1F        	and $1f
410+  8A86 FE 10         	cp $10
411+  8A88 C9            	ret
412+  8A89
413+  8A89              ; --------------------------------------------------------------------------------------------------------------------
414+  8A89              ;
415+  8A89              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8A89              ;
417+  8A89              ; 14/12/22
418+  8A89              ;
419+  8A89              ;	Modifica: A y BC.
420+  8A89
421+  8A89 3A 96 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8A8C E6 01        	and 1
423+  8A8E 28 17        	jr z,1F
424+  8A90
425+  8A90              ; Nos encontramos en la parte izquierda de la pantalla
426+  8A90
427+  8A90 3A 88 85     	ld a,(Coordenada_X)
428+  8A93 47           	ld b,a
429+  8A94 04           	inc b											; (Coordenada_X)+1 en B.
430+  8A95 79           	ld a,c
431+  8A96 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8A97 38 08        	jr c,2F
433+  8A99 47           	ld b,a
434+  8A9A 79           	ld a,c
435+  8A9B 90           	sub b
436+  8A9C 32 B8 85     	ld (Columnas),a
437+  8A9F 18 1B        	jr 4F
438+  8AA1 79           2 ld a,c
439+  8AA2 32 B8 85     	ld (Columnas),a
440+  8AA5 18 15        	jr 4F
441+  8AA7
442+  8AA7              ; Nos encontramos en la parte derecha de la pantalla.
443+  8AA7
444+  8AA7 3A 88 85     1 ld a,(Coordenada_X)
445+  8AAA 81           	add c
446+  8AAB 3D           	dec a
447+  8AAC D6 1F        	sub $1f
448+  8AAE 38 08        	jr c,3F
449+  8AB0 47           	ld b,a
450+  8AB1 79           	ld a,c
451+  8AB2 90           	sub b
452+  8AB3 32 B8 85     	ld (Columnas),a
453+  8AB6 18 04        	jr 4F
454+  8AB8 79           3 ld a,c
455+  8AB9 32 B8 85     	ld (Columnas),a
456+  8ABC D9           4 exx
457+  8ABD 4F           	ld c,a
458+  8ABE D9           	exx
459+  8ABF C9            ret
460+  8AC0
461+  8AC0              ; --------------------------------------------------------------------------------------------------------------------
462+  8AC0              ;
463+  8AC0              ; 7/1/23
464+  8AC0              ;
465+  8AC0              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8AC0              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8AC0              ;
468+  8AC0              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8AC0              ;	DESTRUYE: HL,B Y A.
470+  8AC0
471+  8AC0 3A 96 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8AC3 FE 02        	cp 2
473+  8AC5 38 18        	jr c,1F
474+  8AC7 28 16        	jr z,1F
475+  8AC9 E6 01        	and 1
476+  8ACB 28 0D        	jr z,3F
477+  8ACD
478+  8ACD              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8ACD
480+  8ACD CD 09 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8AD0
482+  8AD0 7D           9 ld a,l
483+  8AD1 E6 1F        	and $1f
484+  8AD3 28 2A        	jr z,7F
485+  8AD5 2B           	dec hl
486+  8AD6 10 F8        	djnz 9B
487+  8AD8 18 25        	jr 7F
488+  8ADA
489+  8ADA              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8ADA
491+  8ADA 2A 84 85     3 ld hl,(Posicion_actual)
492+  8ADD 18 20        	jr 7F
493+  8ADF
494+  8ADF 28 14        1 jr z,2F
495+  8AE1
496+  8AE1              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8AE1
498+  8AE1 CD 09 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8AE4 7D           4 ld a,l
500+  8AE5 E6 1F        	and $1f
501+  8AE7 28 03        	jr z,6F
502+  8AE9 2B           	dec hl
503+  8AEA 10 F8        	djnz 4B
504+  8AEC 06 0F        6 ld b,15
505+  8AEE CD 6A 8B     5 call PreviousScan
506+  8AF1 10 FB        	djnz 5B
507+  8AF3 18 0A        	jr 7F
508+  8AF5
509+  8AF5              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8AF5
511+  8AF5 CD 09 8B     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8AF8 06 0F        	ld b,15
513+  8AFA CD 6A 8B     8 call PreviousScan
514+  8AFD 10 FB        	djnz 8B
515+  8AFF
516+  8AFF E5           7 push hl
517+  8B00 DD E1        	pop ix
518+  8B02
519+  8B02 2A 86 85     	ld hl,(Puntero_objeto)
520+  8B05 E5           	push hl
521+  8B06 FD E1        	pop iy
522+  8B08
523+  8B08 C9           	ret
524+  8B09
525+  8B09              ; --------------------------------------------------------------------------------------------------------------------
526+  8B09              ;
527+  8B09              ;	2/1/23
528+  8B09              ;
529+  8B09              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8B09              ;
531+  8B09              ;	Tras esta rutina tenemos:
532+  8B09              ;
533+  8B09              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8B09              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8B09              ;
536+  8B09              ;	DESTRUYE!!!!! HL,B y A.
537+  8B09
538+  8B09 2A 84 85     Operandos ld hl,(Posicion_actual)
539+  8B0C 3A B8 85     	ld a,(Columnas)
540+  8B0F 3D           	dec a
541+  8B10 20 01        	jr nz,1F
542+  8B12 3C           	inc a
543+  8B13 47           1 ld b,a
544+  8B14 C9           	ret
545+  8B15
546+  8B15              ; --------------------------------------------------------------------------------------------------------------------
547+  8B15              ;
548+  8B15              ;	3/1/23
549+  8B15              ;
550+  8B15              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8B15              ;
552+  8B15              ;	Destruye: A,B,HL y DE.
553+  8B15
554+  8B15              Define_rutina_de_impresion
555+  8B15
556+  8B15 3A 83 85     	ld a,(Columns)
557+  8B18 47           	ld b,a
558+  8B19 3A B8 85     	ld a,(Columnas)
559+  8B1C B8           	cp b
560+  8B1D 20 0D        	jr nz,2f
561+  8B1F
562+  8B1F              ;	La entidad se imprime entera.
563+  8B1F
564+  8B1F 21 B6 8B     	ld hl, Indice_entidades_completas
565+  8B22 E6 01        	and 1
566+  8B24 28 02        	jr z,1F
567+  8B26
568+  8B26 23           	inc hl
569+  8B27 23           	inc hl
570+  8B28
571+  8B28 CD 33 87     1 call Extrae_address
572+  8B2B C9           	ret		;	ret
573+  8B2C
574+  8B2C              ;	La entidad no se imprime entera en pantalla.
575+  8B2C
576+  8B2C 3A 96 85     2 ld a,(Cuad_objeto)
577+  8B2F E6 01        	and 1
578+  8B31 28 17        	jr z,3F
579+  8B33
580+  8B33              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8B33
582+  8B33 21 BA 8B     	ld hl, Indice_entidades_incompletas_izquierda
583+  8B36 3A 83 85     4 ld a,(Columns)
584+  8B39 E6 01        	and 1
585+  8B3B 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8B3D
587+  8B3D 23           	inc hl
588+  8B3E 23           	inc hl
589+  8B3F
590+  8B3F 3A B8 85     	ld a,(Columnas)
591+  8B42 E6 01        	and 1
592+  8B44 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8B46
594+  8B46 23           	inc hl
595+  8B47 23           	inc hl
596+  8B48
597+  8B48 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8B4A
599+  8B4A 21 C0 8B     3 ld hl, Indice_entidades_incompletas_derecha
600+  8B4D 18 E7        	jr 4B
601+  8B4F
602+  8B4F              ; --------------------------------------------------------------------------------------------------------------------
603+  8B4F              ;
604+  8B4F              ;	Prepara_draw
605+  8B4F              ;
606+  8B4F              ;	Es una rutina de carga.
607+  8B4F              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8B4F              ;
609+  8B4F              ;	FUNCIONAMIENTO:
610+  8B4F              ;
611+  8B4F              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8B4F              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8B4F              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8B4F              ;
615+  8B4F              ;	DESTRUYE:
616+  8B4F              ;
617+  8B4F              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8B4F
619+  8B4F 21 82 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8B52 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8B53 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8B54 4E           	ld c,(hl)
623+  8B55 2A 84 85     	ld hl,(Posicion_actual)
624+  8B58 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8B5A C9           	ret
626+  8B5B
627+  8B5B              ;----------------------------------------------------------------------------------------------------------------
628+  8B5B              ;
629+  8B5B              ;	5/08/22
630+  8B5B              ;
631+  8B5B              ;   NextScan.
632+  8B5B              ;
633+  8B5B              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8B5B              ;
635+  8B5B              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8B5B              ;
637+  8B5B              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8B5B              ;
639+  8B5B              ;       DESTRUIDOS: AF y HL !!!
640+  8B5B              ;
641+  8B5B              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8B5B              ;
643+  8B5B
644+  8B5B 24           NextScan inc h          ; Incrementamos el scanline.
645+  8B5C 7C               ld a,h
646+  8B5D E6 07            and 7
647+  8B5F C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8B60
649+  8B60 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8B61 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8B63 6F               ld l,a
652+  8B64 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8B65
654+  8B65 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8B66 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8B68 67               ld h,a
657+  8B69 C9               ret
658+  8B6A
659+  8B6A              ;----------------------------------------------------------------------------------------------------------------
660+  8B6A              ;
661+  8B6A              ;	5/08/22
662+  8B6A              ;
663+  8B6A              ;   PreviousScan.
664+  8B6A              ;
665+  8B6A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8B6A              ;
667+  8B6A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8B6A              ;
669+  8B6A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8B6A              ;
671+  8B6A              ;       DESTRUIDOS: AF y HL !!!
672+  8B6A              ;
673+  8B6A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8B6A              ;
675+  8B6A
676+  8B6A 7C           PreviousScan ld a,h
677+  8B6B 25               dec h               ; Dec H.
678+  8B6C E6 07            and 7
679+  8B6E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8B6F
681+  8B6F 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8B70 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8B72 6F               ld l,a
684+  8B73 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8B74
686+  8B74 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8B75 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8B77 67               ld h,a
689+  8B78 C9               ret
690+  8B79
691+  8B79              ; -----------------------------------------------------------------------------------
692+  8B79              ;
693+  8B79              ;	15/1/23
694+  8B79
695+  8B79              Extrae_foto_registros
696+  8B79
697+  8B79 3A C3 85     	ld a,(Numero_de_malotes)
698+  8B7C A7           	and a
699+  8B7D C8           	ret z
700+  8B7E
701+  8B7E
702+  8B7E ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8B82 31 00 70     	ld sp,Album_de_fotos
704+  8B85
705+  8B85 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8B87 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8B88 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8B89
709+  8B89 ED 73 C6 85  	ld (Stack_2),sp
710+  8B8D ED 7B C4 85  	ld sp,(Stack)
711+  8B91
712+  8B91              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8B91
714+  8B91 3E CD        	ld a,$cd
715+  8B93 32 9B 8B     	ld (Imprime),a
716+  8B96 EB           	ex de,hl
717+  8B97 22 9C 8B     	ld (Imprime+1),hl
718+  8B9A EB           	ex de,hl
719+  8B9B
720+  8B9B              ; Ejecuta la llamada:	CALL $xx,xx
721+  8B9B
722+  8B9B 00 00 00     Imprime db 0,0,0
723+  8B9E
724+  8B9E ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8BA2
726+  8BA2 3A C3 85     	ld a,(Numero_de_malotes)
727+  8BA5 3D           	dec a
728+  8BA6 28 09        	jr z,1F
729+  8BA8 32 C3 85      	ld (Numero_de_malotes),a
730+  8BAB ED 7B C6 85  	ld sp,(Stack_2)
731+  8BAF 18 D4        	jr 2B
732+  8BB1
733+  8BB1 AF           1 xor a
734+  8BB2 32 C6 85     	ld (Stack_2),a
735+  8BB5 C9           	ret
736+  8BB6
737+  8BB6
# file closed: Draw_XOR.asm
756   8BB6              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8BB6              ;   índices de Rutinas de impresión.
  2+  8BB6
  3+  8BB6 C6 8B        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8BB8 F3 8B            defw Pinta_Amadeus_3x2
  5+  8BBA
  6+  8BBA 49 8C        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8BBC E9 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8BBE 9D 8C            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8BC0
 10+  8BC0 73 8C        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8BC2 77 8D            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8BC4 2B 8D            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8BC6
 14+  8BC6
 15+  8BC6              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8BC6              ;
 17+  8BC6              ;   12/12/22
 18+  8BC6              ;
 19+  8BC6              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8BC6              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8BC6              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8BC6              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8BC6              ;
 24+  8BC6              ;   Modifica: DE y HL.
 25+  8BC6
 26+  8BC6 ED 73 C4 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8BCA FD F9        	ld sp,iy
 28+  8BCC 06 10            ld b,16
 29+  8BCE D1           1 pop de
 30+  8BCF 7B               ld a,e
 31+  8BD0 AE               xor (hl)
 32+  8BD1 77           	ld (hl),a
 33+  8BD2 23           	inc hl
 34+  8BD3 7A               ld a,d
 35+  8BD4 AE               xor (hl)
 36+  8BD5 77           	ld (hl),a
 37+  8BD6 2B           	dec hl
 38+  8BD7 24           	inc h
 39+  8BD8 7C               ld a,h
 40+  8BD9 E6 07            and 7
 41+  8BDB 20 0A            jr nz,2F
 42+  8BDD 7D               ld a,l
 43+  8BDE C6 20            add a,$20
 44+  8BE0 6F               ld l,a
 45+  8BE1 38 04            jr c,2F
 46+  8BE3 7C               ld a,h
 47+  8BE4 D6 08            sub 8
 48+  8BE6 67               ld h,a
 49+  8BE7 7C           2 ld a,h
 50+  8BE8 FE 58            cp $58
 51+  8BEA 28 02            jr z,3F
 52+  8BEC 10 E0            djnz 1B
 53+  8BEE ED 7B C4 85  3 ld sp,(Stack)
 54+  8BF2 C9           	ret
 55+  8BF3
 56+  8BF3 ED 73 C4 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8BF7 FD F9        	ld sp,iy
 58+  8BF9 06 08            ld b,8
 59+  8BFB D1           1 pop de
 60+  8BFC 7B               ld a,e
 61+  8BFD AE               xor (hl)
 62+  8BFE 77           	ld (hl),a
 63+  8BFF 23           	inc hl
 64+  8C00 7A               ld a,d
 65+  8C01 AE               xor (hl)
 66+  8C02 77           	ld (hl),a
 67+  8C03 23           	inc hl
 68+  8C04 D1           	pop de
 69+  8C05 7B               ld a,e
 70+  8C06 AE               xor (hl)
 71+  8C07 77           	ld (hl),a
 72+  8C08 2B           	dec hl
 73+  8C09 2B           	dec hl
 74+  8C0A 24           	inc h
 75+  8C0B 7C               ld a,h
 76+  8C0C E6 07            and 7
 77+  8C0E 20 0A            jr nz,2F
 78+  8C10 7D               ld a,l
 79+  8C11 C6 20            add a,$20
 80+  8C13 6F               ld l,a
 81+  8C14 38 04            jr c,2F
 82+  8C16 7C               ld a,h
 83+  8C17 D6 08            sub 8
 84+  8C19 67               ld h,a
 85+  8C1A 7C           2 ld a,h
 86+  8C1B FE 58            cp $58
 87+  8C1D 28 25            jr z,4F
 88+  8C1F 7A               ld a,d
 89+  8C20 AE               xor (hl)
 90+  8C21 77               ld (hl),a
 91+  8C22 D1           	pop de
 92+  8C23 23           	inc hl
 93+  8C24 7B               ld a,e
 94+  8C25 AE               xor (hl)
 95+  8C26 77           	ld (hl),a
 96+  8C27 23           	inc hl
 97+  8C28 7A               ld a,d
 98+  8C29 AE               xor (hl)
 99+  8C2A 77           	ld (hl),a
100+  8C2B 2B           	dec hl
101+  8C2C 2B           	dec hl
102+  8C2D 24           	inc h
103+  8C2E 7C               ld a,h
104+  8C2F E6 07            and 7
105+  8C31 20 0A            jr nz,3F
106+  8C33 7D               ld a,l
107+  8C34 C6 20            add a,$20
108+  8C36 6F               ld l,a
109+  8C37 38 04            jr c,3F
110+  8C39 7C               ld a,h
111+  8C3A D6 08            sub 8
112+  8C3C 67               ld h,a
113+  8C3D 7C           3 ld a,h
114+  8C3E FE 58            cp $58
115+  8C40 28 02            jr z,4F
116+  8C42 10 B7            djnz 1B
117+  8C44 ED 7B C4 85  4 ld sp,(Stack)
118+  8C48 C9           	ret
119+  8C49
120+  8C49              ; ---------------------------------------------------
121+  8C49
122+  8C49 ED 73 C4 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8C4D FD F9        	ld sp,iy
124+  8C4F 06 10            ld b,16
125+  8C51 D1           1 pop de
126+  8C52 7A           	ld a,d
127+  8C53 AE           	xor (hl)
128+  8C54 77           	ld (hl),a
129+  8C55 24           	inc h
130+  8C56 7C               ld a,h
131+  8C57 E6 07            and 7
132+  8C59 20 0C            jr nz,2F
133+  8C5B 7D               ld a,l
134+  8C5C C6 20            add a,$20
135+  8C5E 6F               ld l,a
136+  8C5F 38 06            jr c,2F
137+  8C61 7C               ld a,h
138+  8C62 D6 08            sub 8
139+  8C64 67               ld h,a
140+  8C65 18 00            jr 2F
141+  8C67 7C           2 ld a,h
142+  8C68 FE 58            cp $58
143+  8C6A 28 02            jr z,3F
144+  8C6C 10 E3            djnz 1B
145+  8C6E ED 7B C4 85  3 ld sp,(Stack)
146+  8C72 C9           	ret
147+  8C73
148+  8C73 ED 73 C4 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8C77 FD F9        	ld sp,iy
150+  8C79 06 10            ld b,16
151+  8C7B D1           1 pop de
152+  8C7C 7B           	ld a,e
153+  8C7D AE           	xor (hl)
154+  8C7E 77           	ld (hl),a
155+  8C7F 24           	inc h
156+  8C80 7C               ld a,h
157+  8C81 E6 07            and 7
158+  8C83 20 0C            jr nz,2F
159+  8C85 7D               ld a,l
160+  8C86 C6 20            add a,$20
161+  8C88 6F               ld l,a
162+  8C89 38 06            jr c,2F
163+  8C8B 7C               ld a,h
164+  8C8C D6 08            sub 8
165+  8C8E 67               ld h,a
166+  8C8F 18 00            jr 2F
167+  8C91 7C           2 ld a,h
168+  8C92 FE 58            cp $58
169+  8C94 28 02            jr z,3F
170+  8C96 10 E3            djnz 1B
171+  8C98 ED 7B C4 85  3 ld sp,(Stack)
172+  8C9C C9           	ret
173+  8C9D
174+  8C9D              ; ---------------------------------------------------
175+  8C9D
176+  8C9D ED 73 C4 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8CA1 FD F9        	ld sp,iy
178+  8CA3 06 08            ld b,8
179+  8CA5 D1           1 pop de
180+  8CA6 7A           	ld a,d
181+  8CA7 AE           	xor (hl)
182+  8CA8 77           	ld (hl),a
183+  8CA9 23           	inc hl
184+  8CAA D1           	pop de
185+  8CAB 7B           	ld a,e
186+  8CAC AE           	xor (hl)
187+  8CAD 77           	ld (hl),a
188+  8CAE 2B           	dec hl
189+  8CAF 24            	inc h
190+  8CB0 7C               ld a,h
191+  8CB1 E6 07            and 7
192+  8CB3 20 0A            jr nz,2F
193+  8CB5 7D               ld a,l
194+  8CB6 C6 20            add a,$20
195+  8CB8 6F               ld l,a
196+  8CB9 38 04            jr c,2F
197+  8CBB 7C               ld a,h
198+  8CBC D6 08            sub 8
199+  8CBE 67               ld h,a
200+  8CBF 7C           2 ld a,h
201+  8CC0 FE 58            cp $58
202+  8CC2 28 20            jr z,4F
203+  8CC4 D1               pop de
204+  8CC5 7B           	ld a,e
205+  8CC6 AE           	xor (hl)
206+  8CC7 77           	ld (hl),a
207+  8CC8 23           	inc hl
208+  8CC9 7A           	ld a,d
209+  8CCA AE           	xor (hl)
210+  8CCB 77           	ld (hl),a
211+  8CCC 2B           	dec hl
212+  8CCD 24           	inc h
213+  8CCE 7C               ld a,h
214+  8CCF E6 07            and 7
215+  8CD1 20 0A            jr nz,3F
216+  8CD3 7D               ld a,l
217+  8CD4 C6 20            add a,$20
218+  8CD6 6F               ld l,a
219+  8CD7 38 04            jr c,3F
220+  8CD9 7C               ld a,h
221+  8CDA D6 08            sub 8
222+  8CDC 67               ld h,a
223+  8CDD 7C           3 ld a,h
224+  8CDE FE 58            cp $58
225+  8CE0 28 02            jr z,4F
226+  8CE2 10 C1            djnz 1B
227+  8CE4 ED 7B C4 85  4 ld sp,(Stack)
228+  8CE8 C9           	ret
229+  8CE9
230+  8CE9 ED 73 C4 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8CED FD F9        	ld sp,iy
232+  8CEF 06 08            ld b,8
233+  8CF1 D1           1 pop de
234+  8CF2 D1           	pop de
235+  8CF3 7B           	ld a,e
236+  8CF4 AE           	xor (hl)
237+  8CF5 77           	ld (hl),a
238+  8CF6 24            	inc h
239+  8CF7 7C               ld a,h
240+  8CF8 E6 07            and 7
241+  8CFA 20 0A            jr nz,2F
242+  8CFC 7D               ld a,l
243+  8CFD C6 20            add a,$20
244+  8CFF 6F               ld l,a
245+  8D00 38 04            jr c,2F
246+  8D02 7C               ld a,h
247+  8D03 D6 08            sub 8
248+  8D05 67               ld h,a
249+  8D06 7C           2 ld a,h
250+  8D07 FE 58            cp $58
251+  8D09 28 1B            jr z,4F
252+  8D0B D1               pop de
253+  8D0C 7A           	ld a,d
254+  8D0D AE           	xor (hl)
255+  8D0E 77           	ld (hl),a
256+  8D0F 24           	inc h
257+  8D10 7C               ld a,h
258+  8D11 E6 07            and 7
259+  8D13 20 0A            jr nz,3F
260+  8D15 7D               ld a,l
261+  8D16 C6 20            add a,$20
262+  8D18 6F               ld l,a
263+  8D19 38 04            jr c,3F
264+  8D1B 7C               ld a,h
265+  8D1C D6 08            sub 8
266+  8D1E 67               ld h,a
267+  8D1F 7C           3 ld a,h
268+  8D20 FE 58            cp $58
269+  8D22 28 02            jr z,4F
270+  8D24 10 CB            djnz 1B
271+  8D26 ED 7B C4 85  4 ld sp,(Stack)
272+  8D2A C9           	ret
273+  8D2B
274+  8D2B ED 73 C4 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8D2F FD F9        	ld sp,iy
276+  8D31 06 08            ld b,8
277+  8D33 D1           1 pop de
278+  8D34 7B           	ld a,e
279+  8D35 AE           	xor (hl)
280+  8D36 77           	ld (hl),a
281+  8D37 23           	inc hl
282+  8D38 7A           	ld a,d
283+  8D39 AE           	xor (hl)
284+  8D3A 77           	ld (hl),a
285+  8D3B 2B           	dec hl
286+  8D3C 24             	inc h
287+  8D3D 7C               ld a,h
288+  8D3E E6 07            and 7
289+  8D40 20 0A            jr nz,2F
290+  8D42 7D               ld a,l
291+  8D43 C6 20            add a,$20
292+  8D45 6F               ld l,a
293+  8D46 38 04            jr c,2F
294+  8D48 7C               ld a,h
295+  8D49 D6 08            sub 8
296+  8D4B 67               ld h,a
297+  8D4C 7C           2 ld a,h
298+  8D4D FE 58            cp $58
299+  8D4F 28 21            jr z,4F
300+  8D51 D1               pop de
301+  8D52 7A           	ld a,d
302+  8D53 AE           	xor (hl)
303+  8D54 77           	ld (hl),a
304+  8D55 23           	inc hl
305+  8D56 D1               pop de
306+  8D57 7B           	ld a,e
307+  8D58 AE           	xor (hl)
308+  8D59 77           	ld (hl),a
309+  8D5A 2B           	dec hl
310+  8D5B 24           	inc h
311+  8D5C 7C               ld a,h
312+  8D5D E6 07            and 7
313+  8D5F 20 0A            jr nz,3F
314+  8D61 7D               ld a,l
315+  8D62 C6 20            add a,$20
316+  8D64 6F               ld l,a
317+  8D65 38 04            jr c,3F
318+  8D67 7C               ld a,h
319+  8D68 D6 08            sub 8
320+  8D6A 67               ld h,a
321+  8D6B 7C           3 ld a,h
322+  8D6C FE 58            cp $58
323+  8D6E 28 02            jr z,4F
324+  8D70 10 C1            djnz 1B
325+  8D72 ED 7B C4 85  4 ld sp,(Stack)
326+  8D76 C9           	ret
327+  8D77
328+  8D77 ED 73 C4 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8D7B FD F9        	ld sp,iy
330+  8D7D 06 08            ld b,8
331+  8D7F D1           1 pop de
332+  8D80 7B           	ld a,e
333+  8D81 AE           	xor (hl)
334+  8D82 77           	ld (hl),a
335+  8D83 24            	inc h
336+  8D84 7C               ld a,h
337+  8D85 E6 07            and 7
338+  8D87 20 0A            jr nz,2F
339+  8D89 7D               ld a,l
340+  8D8A C6 20            add a,$20
341+  8D8C 6F               ld l,a
342+  8D8D 38 04            jr c,2F
343+  8D8F 7C               ld a,h
344+  8D90 D6 08            sub 8
345+  8D92 67               ld h,a
346+  8D93 7C           2 ld a,h
347+  8D94 FE 58            cp $58
348+  8D96 28 1C            jr z,4F
349+  8D98 D1               pop de
350+  8D99 7A           	ld a,d
351+  8D9A AE           	xor (hl)
352+  8D9B 77           	ld (hl),a
353+  8D9C 24           	inc h
354+  8D9D 7C               ld a,h
355+  8D9E E6 07            and 7
356+  8DA0 20 0A            jr nz,3F
357+  8DA2 7D               ld a,l
358+  8DA3 C6 20            add a,$20
359+  8DA5 6F               ld l,a
360+  8DA6 38 04            jr c,3F
361+  8DA8 7C               ld a,h
362+  8DA9 D6 08            sub 8
363+  8DAB 67               ld h,a
364+  8DAC 7C           3 ld a,h
365+  8DAD FE 58            cp $58
366+  8DAF 28 03            jr z,4F
367+  8DB1 D1               pop de
368+  8DB2 10 CB            djnz 1B
369+  8DB4 ED 7B C4 85  4 ld sp,(Stack)
370+  8DB8 C9           	ret
371+  8DB9
372+  8DB9              ; ---------------------------------------------------
373+  8DB9
# file closed: Rutinas_de_impresion_sprites.asm
757   8DB9              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8DB9              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8DB9              ;
  3+  8DB9              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8DB9              ;
  5+  8DB9              ; *****************************************************************************************************************************************************************************************
  6+  8DB9              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8DB9
  8+  8DB9 7C           calcula_tercio ld a,h
  9+  8DBA E6 18        	and $18
 10+  8DBC CB 2F        	sra a
 11+  8DBE CB 2F        	sra a
 12+  8DC0 CB 2F        	sra a
 13+  8DC2 C9           	ret
 14+  8DC3
# file closed: calcula_tercio.asm
758   8DC3              	include "Cls.asm"
# file opened: Cls.asm
  1+  8DC3              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8DC3              ;
  3+  8DC3              ;
  4+  8DC3              ;	CLS.
  5+  8DC3              ;
  6+  8DC3              ;	Limpia la pantalla y define sus atributos.
  7+  8DC3              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8DC3              ;
  9+  8DC3              ;	COLORES: 0 ..... NEGRO
 10+  8DC3              ;    		 1 ..... AZUL
 11+  8DC3              ; 			 2 ..... ROJO
 12+  8DC3              ;			 3 ..... MAGENTA
 13+  8DC3              ; 			 4 ..... VERDE
 14+  8DC3              ; 			 5 ..... CIAN
 15+  8DC3              ;			 6 ..... AMARILLO
 16+  8DC3              ; 			 7 ..... BLANCO
 17+  8DC3              ;
 18+  8DC3              ;	INPUT: A contiene los atributos de pantalla.
 19+  8DC3              ;
 20+  8DC3              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8DC3
 22+  8DC3
 23+  8DC3 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8DC6 11 01 40     	LD DE,$4001
 25+  8DC9 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8DCC 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8DCE ED B0        	LDIR
 28+  8DD0 01 FF 02     	LD BC,767
 29+  8DD3 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8DD4 ED B0        	LDIR
 31+  8DD6 C9           	ret
 32+  8DD7
# file closed: Cls.asm
759   8DD7              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8DD7              ; ******************************************************************************************************************************************************************************************
  2+  8DD7              ;
  3+  8DD7              ;   22/01/23
  4+  8DD7              ;
  5+  8DD7              ;	Mov_down
  6+  8DD7              ;
  7+  8DD7              ; 	Mueve el Sprite X px hacia abajo.
  8+  8DD7              ;
  9+  8DD7              ;
 10+  8DD7 21 AF 85     Mov_down ld hl,Ctrl_0
 11+  8DDA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8DDC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8DDC              ; 																	; _ en el caso de que no lo haya.
 14+  8DDC 3A 9A 85     	ld a,(Vel_down)
 15+  8DDF 47           	ld b,a
 16+  8DE0 2A 84 85         ld hl,(Posicion_actual)
 17+  8DE3 CD B9 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8DE6 E6 02        	and 2
 19+  8DE8 28 0F        	jr z,1F
 20+  8DEA
 21+  8DEA              ; Nos encontramos en el último tercio de pantalla.
 22+  8DEA              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8DEA
 24+  8DEA 7C           	ld a,h
 25+  8DEB FE 57        	cp $57
 26+  8DED 20 0A        	jr nz,1F
 27+  8DEF 7D           	ld a,l
 28+  8DF0 C6 20        	add $20
 29+  8DF2 30 05        	jr nc,1F
 30+  8DF4
 31+  8DF4              ; ------------------------------
 32+  8DF4 CD D5 90     	call Reaparece_arriba
 33+  8DF7              ;	call Reinicio
 34+  8DF7              ; ------------------------------
 35+  8DF7 18 08        	jr 3F
 36+  8DF9 CD 5B 8B     1 call NextScan
 37+  8DFC 22 84 85     	ld (Posicion_actual),hl
 38+  8DFF 10 E2            djnz 2B
 39+  8E01 CD EB 90     3 call Genera_coordenadas
 40+  8E04 C9           	ret
 41+  8E05
 42+  8E05
 43+  8E05              ; ******************************************************************************************************************************************************************************************
 44+  8E05              ;
 45+  8E05              ;   22/01/23
 46+  8E05              ;
 47+  8E05              ;	Mov_up
 48+  8E05              ;
 49+  8E05              ; 	Mueve el Sprite hacia arriba.
 50+  8E05              ;
 51+  8E05              ;
 52+  8E05 21 AF 85     Mov_up ld hl,Ctrl_0
 53+  8E08 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8E0A              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8E0A              ; 																		; _ en el caso de que no lo haya.
 56+  8E0A 3A 99 85     	ld a,(Vel_up)
 57+  8E0D 47           	ld b,a
 58+  8E0E 2A 84 85     	ld hl,(Posicion_actual)
 59+  8E11 CD B9 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8E14 A7           	and a
 61+  8E15 20 10        	jr nz,1F
 62+  8E17
 63+  8E17              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8E17              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8E17
 66+  8E17 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8E18 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8E1A 20 0B            jr nz,1F
 69+  8E1C 7D               ld a,l
 70+  8E1D D6 20            sub $20
 71+  8E1F 30 06            jr nc,1F
 72+  8E21 25               dec h
 73+  8E22
 74+  8E22              ; -----------------------------
 75+  8E22 CD C5 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8E25              ;	call Reinicio
 77+  8E25              ; -----------------------------
 78+  8E25
 79+  8E25 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8E27 CD 6A 8B     1 call PreviousScan
 81+  8E2A 22 84 85     	ld (Posicion_actual),hl
 82+  8E2D 10 E2            djnz 3B
 83+  8E2F CD EB 90     2 call Genera_coordenadas
 84+  8E32 C9           	ret
 85+  8E33
 86+  8E33              ; ******************************************************************************************************************************************************************************************
 87+  8E33              ;
 88+  8E33              ;	19/10/22
 89+  8E33              ;
 90+  8E33              ;	Mov_right.
 91+  8E33              ;
 92+  8E33              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8E33              ;
 94+  8E33
 95+  8E33 21 AF 85     Mov_right ld hl,Ctrl_0
 96+  8E36 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8E38              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8E38              ; 																	; _ en el caso de que no lo haya.
 99+  8E38 3A AF 85     	ld a,(Ctrl_0)
100+  8E3B CB 77        	bit 6,a
101+  8E3D 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8E3F
103+  8E3F CD 73 90     	call Stop_Amadeus_right
104+  8E42 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8E43 18 4D        	jr 8F
106+  8E45
107+  8E45 3A 88 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8E48 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8E4A 20 46        	jr nz,8F
110+  8E4C
111+  8E4C 3A 8A 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8E4F A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8E50 28 40        	jr z,8F
114+  8E52
115+  8E52              ; ---------- ---------- ----------
116+  8E52              ;
117+  8E52              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8E52
119+  8E52 3A 98 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8E55 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8E57 28 11        	jr z,1F
122+  8E59 38 06        	jr c,6F
123+  8E5B FE 04        	cp 4
124+  8E5D 28 14        	jr z,7F
125+  8E5F 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8E61
127+  8E61              ; ---------- ---------- ----------
128+  8E61              ;
129+  8E61              ; Perfiles de velocidad
130+  8E61              ;
131+  8E61
132+  8E61 3A 8A 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8E64 FE FE        	cp $fe
134+  8E66 20 2A        	jr nz,8F
135+  8E68 18 10        	jr 3F
136+  8E6A 3A 8A 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8E6D FE FD        	cp $fd
138+  8E6F 20 21        	jr nz,8F
139+  8E71 18 07        	jr 3F
140+  8E73 3A 8A 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8E76 FE FB        	cp $fb
142+  8E78 20 18        	jr nz,8F
143+  8E7A
144+  8E7A              ; ---------- ---------- ----------
145+  8E7A
146+  8E7A              3
147+  8E7A CD B3 90     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8E7D              ;	call Reinicio
149+  8E7D
150+  8E7D              ; ---------- ---------- ----------
151+  8E7D              ;
152+  8E7D              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8E7D
154+  8E7D 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8E7F C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8E80 CD 99 8E     	call DESPLZ_DER
157+  8E83 C1           	pop bc
158+  8E84 10 F9        	djnz 5B
159+  8E86 2A 84 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8E89 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8E8A 22 84 85     	ld (Posicion_actual),hl
162+  8E8D CD EB 90     	call Genera_coordenadas
163+  8E90 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8E92
165+  8E92              ; ---------- ---------- ----------
166+  8E92
167+  8E92 2A 84 85     8 ld hl,(Posicion_actual)
168+  8E95 CD 99 8E     	call DESPLZ_DER
169+  8E98 C9           2 ret
170+  8E99
171+  8E99              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8E99              ;
173+  8E99              ;	22/9/22
174+  8E99              ;
175+  8E99
176+  8E99 CD A8 8E     DESPLZ_DER call Desplaza_derecha
177+  8E9C CD F4 8E         call modifica_parametros_1er_DESPLZ_2
178+  8E9F CD 1D 8F         call Ciclo_completo
179+  8EA2 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8EA5 CB FE        	set 7,(hl)
181+  8EA7 C9           	ret
182+  8EA8
183+  8EA8              ; ******************************************************************************************************************************************************************************************
184+  8EA8              ;	15/02/23
185+  8EA8              ;
186+  8EA8
187+  8EA8 3A 98 85     Desplaza_derecha ld a,(Vel_right)
188+  8EAB 47           	ld b,a
189+  8EAC 2A 90 85     	ld hl,(Puntero_DESPLZ_der)
190+  8EAF 23           1 inc hl
191+  8EB0 23           	inc hl
192+  8EB1 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8EB3 22 90 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8EB6 CD 33 87     	call Extrae_address
195+  8EB9 22 86 85     	ld (Puntero_objeto),hl
196+  8EBC
197+  8EBC              ; Modifica (Puntero_DESPLZ_izq).
198+  8EBC
199+  8EBC              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8EBC              ; Cuántos movimientos hemos hecho ??
201+  8EBC              ; DE contiene (Puntero_DESPLZ_der).
202+  8EBC
203+  8EBC 2A 8C 85     7 ld hl,(Indice_Sprite_der)
204+  8EBF EB           	ex de,hl
205+  8EC0 A7           	and a
206+  8EC1 ED 52        	sbc hl,de
207+  8EC3 CB 3D        	srl l
208+  8EC5 3E 08        6 ld a,8
209+  8EC7 95           	sub l
210+  8EC8 30 1E        	jr nc,3F
211+  8ECA
212+  8ECA              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8ECA              ; B="0".
214+  8ECA
215+  8ECA 04           4 inc b
216+  8ECB 3C           	inc a
217+  8ECC 20 FC        	jr nz,4B
218+  8ECE 78           	ld a,b
219+  8ECF 08           	ex af,af
220+  8ED0 2A 8C 85     	ld hl,(Indice_Sprite_der)
221+  8ED3 23           5 inc hl
222+  8ED4 23           	inc hl
223+  8ED5 10 FC        	djnz 5B
224+  8ED7 22 90 85     	ld (Puntero_DESPLZ_der),hl
225+  8EDA CD 33 87     	call Extrae_address
226+  8EDD 22 86 85     	ld (Puntero_objeto),hl
227+  8EE0
228+  8EE0              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8EE0              ; _(Posicion_actual).
230+  8EE0
231+  8EE0 21 84 85     	ld hl,Posicion_actual
232+  8EE3 34           	inc (hl)
233+  8EE4 08               ex af,af
234+  8EE5 6F           	ld l,a
235+  8EE6 18 DD        	jr 6B
236+  8EE8
237+  8EE8              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8EE8
239+  8EE8 47           3 ld b,a
240+  8EE9 2A 8E 85     	ld hl,(Indice_Sprite_izq)
241+  8EEC 23           2 inc hl
242+  8EED 23           	inc hl
243+  8EEE 10 FC        	djnz 2B
244+  8EF0 22 92 85     	ld (Puntero_DESPLZ_izq),hl
245+  8EF3 C9           8 ret
246+  8EF4
247+  8EF4              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8EF4              ;
249+  8EF4              ;	24/7/22
250+  8EF4              ;
251+  8EF4              ;	modifica_parametros_1er_DESPLZ_2
252+  8EF4              ;
253+  8EF4              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8EF4              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8EF4              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8EF4
257+  8EF4 3A 8A 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8EF7 A7           	and a
259+  8EF8 20 1F        	jr nz,1F
260+  8EFA D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8EFC 32 8A 85         ld (CTRL_DESPLZ),a
262+  8EFF
263+  8EFF 21 83 85     	ld hl,Columns
264+  8F02 34           	inc (hl)
265+  8F03 3A 96 85     	ld a,(Cuad_objeto)
266+  8F06 E6 01        	and 1
267+  8F08 28 0F        	jr z,1F
268+  8F0A 2A 84 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8F0D 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8F0E 22 84 85     	ld (Posicion_actual),hl
271+  8F11 CD EB 90     	call Genera_coordenadas
272+  8F14 CD 7F 90     	call Inc_CTRL_DESPLZ
273+  8F17 18 03        	jr 2F
274+  8F19 CD 7F 90     1 call Inc_CTRL_DESPLZ
275+  8F1C C9           2 ret
276+  8F1D
277+  8F1D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8F1D              ;
279+  8F1D              ;	24/7/22
280+  8F1D              ;
281+  8F1D              ;	Ciclo_completo.
282+  8F1D              ;
283+  8F1D              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8F1D              ;
285+  8F1D              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8F1D              ; 	Decrementamos (Columns).
287+  8F1D              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8F1D              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8F1D
290+  8F1D
291+  8F1D 3A 8A 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8F20 FE FF        	cp $ff
293+  8F22 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8F24 E6 F0        	and $f0
295+  8F26 20 28        	jr nz,3F
296+  8F28
297+  8F28              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8F28
299+  8F28 3A 8A 85     	ld a,(CTRL_DESPLZ)
300+  8F2B 47           	ld b,a
301+  8F2C 3E F8        	ld a,$f8
302+  8F2E 80           	add b
303+  8F2F 32 8A 85     	ld (CTRL_DESPLZ),a
304+  8F32 18 1C        	jr 3F
305+  8F34 21 83 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8F37 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8F38 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8F39 32 8A 85     	ld (CTRL_DESPLZ),a
309+  8F3C 3A 96 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8F3F E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8F41 20 0A        	jr nz,2F
312+  8F43 2A 84 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8F46 23           	inc hl
314+  8F47 22 84 85     	ld (Posicion_actual),hl
315+  8F4A CD EB 90     	call Genera_coordenadas
316+  8F4D
317+  8F4D              ; Inicia el puntero de Sprite.
318+  8F4D
319+  8F4D CD 4A 87     2 call Inicia_puntero_objeto_der
320+  8F50 C9           3 ret
321+  8F51
322+  8F51              ; ******************************************************************************************************************************************************************************************
323+  8F51              ;
324+  8F51              ;	15/02/23
325+  8F51              ;
326+  8F51              ;	Mov_left.
327+  8F51              ;
328+  8F51              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8F51              ;
330+  8F51              Mov_left
331+  8F51
332+  8F51 21 AF 85     	ld hl,Ctrl_0
333+  8F54 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8F56              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8F56              ; 																	; _ en el caso de que no lo haya.
336+  8F56 3A AF 85     	ld a,(Ctrl_0)
337+  8F59 CB 77        	bit 6,a
338+  8F5B 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8F5D
340+  8F5D CD 79 90     	call Stop_Amadeus_left
341+  8F60 C8           	ret z
342+  8F61 20 50        	jr nz,8F
343+  8F63
344+  8F63 3A 88 85     11 ld a,(Coordenada_X)
345+  8F66 A7           	and a
346+  8F67 20 4A        	jr nz,8F
347+  8F69
348+  8F69 3A 8A 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8F6C A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8F6D 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8F6F
352+  8F6F              ; ---------- ---------- ----------
353+  8F6F
354+  8F6F 3A 97 85     	ld a,(Vel_left)
355+  8F72 FE 02        	cp 2
356+  8F74 28 0F        	jr z,1F
357+  8F76 38 04        	jr c,6F
358+  8F78 FE 04        	cp 4
359+  8F7A 28 12        	jr z,7F
360+  8F7C
361+  8F7C              ; ---------- ---------- ----------
362+  8F7C
363+  8F7C 3A 8A 85     6 ld a,(CTRL_DESPLZ)
364+  8F7F FE F9        	cp $f9
365+  8F81 20 30        	jr nz,8F
366+  8F83 18 10        	jr 4F
367+  8F85 3A 8A 85     1 ld a,(CTRL_DESPLZ)
368+  8F88 FE FA        	cp $fa
369+  8F8A 20 27        	jr nz,8F
370+  8F8C 18 07        	jr 4F
371+  8F8E 3A 8A 85     7 ld a,(CTRL_DESPLZ)
372+  8F91 FE FC        	cp $fc
373+  8F93 20 1E        	jr nz,8F
374+  8F95
375+  8F95              ; ---------- ---------- ----------
376+  8F95
377+  8F95              4
378+  8F95 CD A1 90     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8F98              ;	call Reinicio
380+  8F98
381+  8F98              ; ---------- ---------- ----------
382+  8F98
383+  8F98 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  8F9A C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  8F9B
386+  8F9B 2A 8E 85     	ld hl,(Indice_Sprite_izq)
387+  8F9E 22 92 85     	ld (Puntero_DESPLZ_izq),hl
388+  8FA1
389+  8FA1 CD BA 8F     	call DESPLZ_IZQ
390+  8FA4 C1           	pop bc
391+  8FA5 10 F3        	djnz 5B
392+  8FA7 2A 84 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  8FAA 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  8FAB 22 84 85     	ld (Posicion_actual),hl
395+  8FAE CD EB 90     	call Genera_coordenadas
396+  8FB1 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  8FB3
398+  8FB3              ; ---------- ---------- ----------
399+  8FB3              ; Movemos, no hay recolocación.
400+  8FB3
401+  8FB3 2A 84 85     8 ld hl,(Posicion_actual)
402+  8FB6 CD BA 8F     	call DESPLZ_IZQ
403+  8FB9 C9           2 ret
404+  8FBA
405+  8FBA              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  8FBA              ;
407+  8FBA              ;	22/9/22
408+  8FBA
409+  8FBA              DESPLZ_IZQ
410+  8FBA
411+  8FBA CD C9 8F     	call Desplaza_izquierda
412+  8FBD CD 15 90         call modifica_parametros_1er_DESPLZ
413+  8FC0 CD 3D 90     	call Ciclo_completo_2
414+  8FC3 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  8FC6 CB BE        	res 7,(hl)
416+  8FC8 C9           	ret
417+  8FC9
418+  8FC9              Desplaza_izquierda
419+  8FC9
420+  8FC9 3A 97 85     	ld a,(Vel_left)
421+  8FCC 47           	ld b,a
422+  8FCD 2A 92 85     	ld hl,(Puntero_DESPLZ_izq)
423+  8FD0 23           1 inc hl
424+  8FD1 23           	inc hl
425+  8FD2 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  8FD4 22 92 85     	ld (Puntero_DESPLZ_izq),hl
427+  8FD7 CD 33 87     	call Extrae_address
428+  8FDA 22 86 85     	ld (Puntero_objeto),hl
429+  8FDD
430+  8FDD              ; Modifica (Puntero_DESPLZ_der).
431+  8FDD
432+  8FDD              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  8FDD              ; Cuántos movimientos hemos hecho ??
434+  8FDD              ; DE contiene (Puntero_DESPLZ_izq).
435+  8FDD
436+  8FDD 2A 8E 85     7 ld hl,(Indice_Sprite_izq)
437+  8FE0 EB           	ex de,hl
438+  8FE1 A7           	and a
439+  8FE2 ED 52        	sbc hl,de
440+  8FE4 CB 3D        	srl l
441+  8FE6 3E 08        6 ld a,8
442+  8FE8 95           	sub l
443+  8FE9 30 1E        	jr nc,3F
444+  8FEB
445+  8FEB              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  8FEB              ; B="0".
447+  8FEB
448+  8FEB 04           4 inc b
449+  8FEC 3C           	inc a
450+  8FED 20 FC        	jr nz,4B
451+  8FEF 78           	ld a,b
452+  8FF0 08           	ex af,af
453+  8FF1 2A 8E 85     	ld hl,(Indice_Sprite_izq)
454+  8FF4 23           5 inc hl
455+  8FF5 23           	inc hl
456+  8FF6 10 FC        	djnz 5B
457+  8FF8 22 92 85     	ld (Puntero_DESPLZ_izq),hl
458+  8FFB CD 33 87     	call Extrae_address
459+  8FFE 22 86 85     	ld (Puntero_objeto),hl
460+  9001
461+  9001              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  9001              ; _(Posicion_actual).
463+  9001
464+  9001 21 84 85     	ld hl,Posicion_actual
465+  9004 35           	dec (hl)
466+  9005 08           	ex af,af
467+  9006 6F           	ld l,a
468+  9007 18 DD        	jr 6B
469+  9009
470+  9009              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  9009
472+  9009 47           3 ld b,a
473+  900A 2A 8C 85     	ld hl,(Indice_Sprite_der)
474+  900D 23           2 inc hl
475+  900E 23           	inc hl
476+  900F 10 FC        	djnz 2B
477+  9011 22 90 85     	ld (Puntero_DESPLZ_der),hl
478+  9014 C9           8 ret
479+  9015
480+  9015              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  9015              ;
482+  9015              ;	modifica_parametros_1er_DESPLZ
483+  9015              ;
484+  9015              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  9015              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  9015              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  9015
488+  9015 3A 8A 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  9018 A7           	and a
490+  9019 20 1E        	jr nz,1F
491+  901B 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  901C 32 8A 85         ld (CTRL_DESPLZ),a
493+  901F 21 83 85     	ld hl,Columns
494+  9022 34           	inc (hl)
495+  9023 3A 96 85     	ld a,(Cuad_objeto)
496+  9026 E6 01        	and 1
497+  9028 20 0F        	jr nz,1F
498+  902A 2A 84 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  902D 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  902E 22 84 85     	ld (Posicion_actual),hl
501+  9031 CD EB 90     	call Genera_coordenadas
502+  9034 CD 90 90     	call Dec_CTRL_DESPLZ
503+  9037 18 03        	jr 2F
504+  9039 CD 90 90     1 call Dec_CTRL_DESPLZ
505+  903C C9           2 ret
506+  903D
507+  903D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  903D
509+  903D 3A 8A 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  9040 FE F7        	cp $f7
511+  9042 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  9044 30 2C        	jr nc,3F
513+  9046
514+  9046              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  9046
516+  9046 06 00        	ld b,0
517+  9048 04           4 inc b
518+  9049 3C           	inc a
519+  904A FE F7        	cp $f7
520+  904C 20 FA        	jr nz,4B
521+  904E 3E FF        	ld a,$ff
522+  9050 90           	sub b
523+  9051 32 8A 85     	ld (CTRL_DESPLZ),a
524+  9054 18 1C        	jr 3F
525+  9056
526+  9056              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  9056
528+  9056 21 83 85     1 ld hl,Columns
529+  9059 35           	dec (hl)
530+  905A AF           	xor a
531+  905B 32 8A 85     	ld (CTRL_DESPLZ),a
532+  905E 3A 96 85     	ld a,(Cuad_objeto)
533+  9061 E6 01        	and 1
534+  9063 28 0A        	jr z,2F
535+  9065 2A 84 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  9068 2B           	dec hl
537+  9069 22 84 85     	ld (Posicion_actual),hl
538+  906C CD EB 90     	call Genera_coordenadas
539+  906F
540+  906F              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  906F
542+  906F CD 5D 87     2 call Inicia_puntero_objeto_izq
543+  9072 C9           3 ret
544+  9073
545+  9073              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9073              ;
547+  9073              ;	19/10/22
548+  9073              ;
549+  9073              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9073              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9073
552+  9073 3A 88 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  9076 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  9078 C9           	ret
555+  9079
556+  9079              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  9079              ;
558+  9079              ;	19/10/22
559+  9079              ;
560+  9079              ;	(cp 2) para un Amadeus de 3 Columns.
561+  9079              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  9079
563+  9079 3A 88 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  907C FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  907E C9           	ret
566+  907F
567+  907F              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  907F              ;
569+  907F              ;	24/7/22
570+  907F              ;
571+  907F              ;	Inc_CTRL_DESPLZ
572+  907F              ;
573+  907F              ;
574+  907F              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  907F
576+  907F 21 8A 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  9082 3A 98 85     	ld a,(Vel_right)
578+  9085 A7           	and a
579+  9086 28 06        	jr z,1F
580+  9088 47           	ld b,a
581+  9089 34           3 inc (hl)
582+  908A 10 FD        	djnz 3B
583+  908C 18 01        	jr 2F
584+  908E 34           1 inc (hl)
585+  908F C9           2 ret
586+  9090
587+  9090              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  9090              ;
589+  9090              ;	5/2/23
590+  9090              ;
591+  9090              ;	Dec_CTRL_DESPLZ
592+  9090              ;
593+  9090              ;
594+  9090              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  9090
596+  9090 21 8A 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9093 3A 97 85     	ld a,(Vel_left)
598+  9096 A7           	and a
599+  9097 28 06        	jr z,1F
600+  9099 47           	ld b,a
601+  909A 35           3 dec (hl)
602+  909B 10 FD        	djnz 3B
603+  909D 18 01        	jr 2F
604+  909F 35           1 dec (hl)
605+  90A0 C9           2 ret
606+  90A1
607+  90A1              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  90A1
609+  90A1 2A 84 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  90A4 01 1F 00     	ld bc,31
611+  90A7 A7           	and a
612+  90A8 ED 4A        	adc hl,bc
613+  90AA 22 84 85     	ld (Posicion_actual),hl
614+  90AD 21 AF 85     	ld hl,Ctrl_0														; $xxx1
615+  90B0 CB C6        	set 0,(hl)
616+  90B2 C9           	ret
617+  90B3
618+  90B3              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  90B3
620+  90B3 2A 84 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  90B6 01 1F 00     	ld bc,31
622+  90B9 A7           	and a
623+  90BA ED 42        	sbc hl,bc
624+  90BC 22 84 85     	ld (Posicion_actual),hl 											; $xx1x
625+  90BF 21 AF 85     	ld hl,Ctrl_0
626+  90C2 CB CE        	set 1,(hl)
627+  90C4 C9           	ret
628+  90C5
629+  90C5              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  90C5
631+  90C5 24           Reaparece_abajo inc h
632+  90C6 01 E0 17     	ld bc,$17e0
633+  90C9 A7           	and a
634+  90CA ED 4A        	adc hl,bc
635+  90CC 22 84 85     	ld (Posicion_actual),hl
636+  90CF 21 AF 85     	ld hl,Ctrl_0
637+  90D2 CB D6        	set 2,(hl)
638+  90D4 C9           	ret
639+  90D5
640+  90D5              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  90D5
642+  90D5 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  90D8 A7           	and a
644+  90D9 ED 42        	sbc hl,bc
645+  90DB 22 84 85     	ld (Posicion_actual),hl
646+  90DE 21 AF 85     	ld hl,Ctrl_0
647+  90E1 CB DE        	set 3,(hl)
648+  90E3 C9           	ret
649+  90E4
650+  90E4              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  90E4
652+  90E4 2A 94 85     Reinicio ld hl,(Posicion_inicio)
653+  90E7 22 84 85     	ld (Posicion_actual),hl
654+  90EA C9           	ret
# file closed: Direcciones.asm
760   90EB              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  90EB              ;	12/12/22
  2+  90EB              ;
  3+  90EB              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  90EB              ;	Fila superior "0", Columna izquierda "0".
  5+  90EB              ;
  6+  90EB              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  90EB              ;
  8+  90EB              ;	Modifica: A
  9+  90EB
 10+  90EB C5           Genera_coordenadas push bc
 11+  90EC E5           	push hl
 12+  90ED 2A 84 85     	ld hl,(Posicion_actual)
 13+  90F0 7D           	ld a,l
 14+  90F1 E6 1F        	and $1f
 15+  90F3 32 88 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  90F6 CD B9 8D     	call calcula_tercio
 17+  90F9 47           	ld b,a
 18+  90FA 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  90FB 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  90FD 7D           	ld a,l
 21+  90FE E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  9100 28 05        	jr z,2F
 23+  9102 0C           1 inc c
 24+  9103 D6 20        	sub 32
 25+  9105 20 FB        	jr nz,1B
 26+  9107 0C           2 inc c
 27+  9108 04           	inc b
 28+  9109 05           	dec b
 29+  910A 28 04        	jr z,3F
 30+  910C 3E E0        	ld a,$e0
 31+  910E 10 F2        	djnz 1B
 32+  9110 79           3 ld a,c
 33+  9111 3D           	dec a
 34+  9112 32 89 85     	ld (Coordenada_y),a
 35+  9115 E1           	pop hl
 36+  9116 C1           	pop bc
 37+  9117 C9           	ret
# file closed: Genera_coordenadas.asm
761   9118              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9118
  2+  9118
  3+  9118              ;   11/8/22
  4+  9118              ;
  5+  9118              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9118              ;
  7+  9118              ;   Mov_obj.asm
  8+  9118              ;
  9+  9118              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9118              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9118              ;
 12+  9118              ;   Codificación:
 13+  9118              ;
 14+  9118              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9118
 16+  9118              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9118
 18+  9118 02 40 00     Arriba db 2,%01000000,0
 19+  911B 02 80 00     Abajo db 2,%10000000,0
 20+  911E 02 20 00     Derecha db 2,%00100000,0
 21+  9121 02 10 00     Izquierda db 2,%00010000,0
 22+  9124 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9128 60 42 60 40
 22+  912C 63
 23+  912D 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9131 22 A3 80 A0
 24+  9135 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9139 84 A0 83 A0
 25+  913D 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9141 80 A3 22 A0
 26+  9145 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  9149 40 60 42 60
 27+  914D 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9151 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  9155 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  9159 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  915D 84
 31+  915E 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  9162 84 00
 32+  9164 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  9168 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  916C 1F 1F 1F 1F
 34+  9170 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9174 1F 1F 1F 1F
 34+  9178 1F
 35+  9179 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  917D 2F 2F 2F 2F
 35+  9181 2F 2F
 36+  9183 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  9187 2F 2F 00
 37+  918A
 38+  918A
 39+  918A              ; ----- ----- ----- ----- -----
 40+  918A
 41+  918A 68 91        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  918C 64 91        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  918E 21 91        Indice_mov_Izquierda defw Izquierda
 44+  9190 1E 91        Indice_mov_Derecha defw Derecha
 45+  9192 1B 91        Indice_mov_Abajo defw Abajo
 46+  9194 18 91        Indice_mov_Arriba defw Arriba
 47+  9196 55 91        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  9198 59 91        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  919A 51 91        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  919C 5E 91        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  919E 24 91        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  91A0              ; ----- ----- ----- ----- -----
 53+  91A0
 54+  91A0 3A B5 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  91A3 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  91A4 28 02            jr z,1F
 57+  91A6 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  91A8 3A B6 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  91AB C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  91AD 32 B6 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  91B0              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  91B0 2A B3 85         ld hl,(Puntero_mov)
 63+  91B3 7E               ld a,(hl)
 64+  91B4 32 B5 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  91B7 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  91B8 22 B3 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  91BB
 68+  91BB 3A B7 85     Decoder ld a,(Repetimos_db)
 69+  91BE A7               and a
 70+  91BF 20 0C            jr nz,12F
 71+  91C1 2A B3 85         ld hl,(Puntero_mov)
 72+  91C4 7E               ld a,(hl)
 73+  91C5 A7               and a
 74+  91C6 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  91C8 E6 0F            and $0f
 76+  91CA 32 B7 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  91CD              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  91CD 2A B3 85     12 ld hl,(Puntero_mov)
 79+  91D0 CB 7E            bit 7,(hl)
 80+  91D2 28 03            jr z,2F
 81+  91D4 CD D7 8D         call Mov_down
 82+  91D7 2A B3 85     2 ld hl, (Puntero_mov)
 83+  91DA CB 76            bit 6,(hl)
 84+  91DC 28 03            jr z,3F
 85+  91DE CD 05 8E         call Mov_up
 86+  91E1 2A B3 85     3 ld hl, (Puntero_mov)
 87+  91E4 CB 6E            bit 5,(hl)
 88+  91E6 28 03            jr z,4F
 89+  91E8 CD 33 8E         call Mov_right
 90+  91EB 2A B3 85     4 ld hl, (Puntero_mov)
 91+  91EE CB 66            bit 4,(hl)
 92+  91F0 28 03            jr z,5F
 93+  91F2 CD 51 8F         call Mov_left
 94+  91F5
 95+  91F5              ; ---------- --------- --------- ---------- ----------
 96+  91F5
 97+  91F5 3A B7 85     5 ld a,(Repetimos_db)
 98+  91F8 A7               and a
 99+  91F9 28 07            jr z,6F
100+  91FB 3D               dec a
101+  91FC 32 B7 85         ld (Repetimos_db),a
102+  91FF 28 01            jr z,6f
103+  9201 C9           11 ret
104+  9202 21 B5 85     6 ld hl,Contador_db_mov
105+  9205 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  9206 2A B3 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9209 23               inc hl
108+  920A 22 B3 85         ld (Puntero_mov),hl
109+  920D 18 F2            jr 11B
110+  920F 2A B1 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  9212 3A B6 85         ld a,(Incrementa_puntero)
112+  9215 47               ld b,a
113+  9216 23           8 inc hl
114+  9217 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9219 5E               ld e,(hl)
116+  921A 23               inc hl
117+  921B 56               ld d,(hl)
118+  921C EB               ex de,hl
119+  921D 22 B3 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9220 18 DF            jr 11B
121+  9222
122+  9222              ; ---------- --------- --------- ---------- ----------
123+  9222              ;
124+  9222              ;   11/8/22
125+  9222              ;
126+  9222              ;   Prepara_Puntero_mov
127+  9222
128+  9222 E5           Prepara_Puntero_mov push hl
129+  9223 D5               push de
130+  9224 2A B1 85         ld hl,(Puntero_indice_mov)
131+  9227 5E               ld e,(hl)
132+  9228 23               inc hl
133+  9229 56               ld d,(hl)
134+  922A EB               ex de,hl
135+  922B 22 B3 85         ld (Puntero_mov),hl
136+  922E D1               pop de
137+  922F E1               pop hl
138+  9230 C9               ret
139+  9231
140+  9231              ; ---------- --------- --------- ---------- ----------
141+  9231              ;
142+  9231              ;   11/8/22
143+  9231              ;
144+  9231              ;   Reinicia_el_movimiento
145+  9231
146+  9231 CD 22 92     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9234 AF               xor a
148+  9235 32 B5 85         ld (Contador_db_mov),a
149+  9238 32 B6 85         ld (Incrementa_puntero),a
150+  923B
151+  923B              ;    jr $
152+  923B
153+  923B C3 A0 91         jp Movimiento
154+  923E C9               ret
155+  923F              ; ---------- --------- --------- ---------- ----------
156+  923F
157+  923F
158+  923F
159+  923F
160+  923F
161+  923F
162+  923F
163+  923F
164+  923F
165+  923F
166+  923F
167+  923F
168+  923F
169+  923F
170+  923F
171+  923F
172+  923F
173+  923F
# file closed: Patrones_de_mov.asm
762   923F              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  923F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  923F              ;
  3+  923F              ;	3/1/23
  4+  923F              ;
  5+  923F              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  923F
  7+  923F              ;	ADC HL,SP	LD (addr),SP
  8+  923F              ;	ADD HL,SP	LD SP,(addr)
  9+  923F              ;	ADD IX,SP	LD SP,nn
 10+  923F              ; 	ADD IY,SP	LD SP,HL
 11+  923F              ;				LD SP,IX
 12+  923F              ;	DEC SP		LD SP,IY
 13+  923F
 14+  923F              ;	EX (SP),HL
 15+  923F              ;	EX (SP),IX
 16+  923F              ;	EX (SP),IY
 17+  923F
 18+  923F              ;	INC SP
 19+  923F
 20+  923F
 21+  923F                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 C4 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A C8 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 C8 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B C4 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
763   7FC0
764   7FC0              	SAVESNA "Pruebas.sna", START
765   7FC0
766   7FC0
767   7FC0
# file closed: Banco_de_pruebas.asm
