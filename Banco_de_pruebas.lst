# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 73 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83C0
  8+  83C0 08 84        	defw Entidad_1
  9+  83C2 42 84        	defw Entidad_2
 10+  83C4 7C 84        	defw Entidad_3
 11+  83C6 B6 84        	defw Entidad_4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 23+  83D0 00 00        	defw 0 											; (Posicion_actual).
 24+  83D2 00 00        	defw 0 											; (Puntero_objeto).
 25+  83D4 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 26+  83D7
 27+  83D7 05           	db %00000101									; (Attr).
 28+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 29+  83DA 00 00        	defw 0	 										; (Puntero_DESPLZ).
 30+  83DC CF 50        	defw $50cf										; (Posicion_inicio).
 31+  83DE 00           	db 0 											; (Cuad_objeto).
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 34+  83E3
 35+  83E3 00 00        	db 0,0											; Variables_de_borrado
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00        	defw 0											;	" " " " " " "
 38+  83E9 00 00 00     	db 0,0,0										;	" " " " " " "
 39+  83EC
 40+  83EC 00 00        	db 0,0											; Variables_de_pintado
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00        	defw 0											;	" " " " " " "
 43+  83F2 00 00 00     	db 0,0,0										;	" " " " " " "
 44+  83F5
 45+  83F5 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 46+  83F7
 47+  83F7 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 48+  83FB 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 49+  83FE
 50+  83FE 00           	db 0 											; (Columnas).
 51+  83FF 00 00        	defw 0											; (Limite_horizontal).
 52+  8401 00           	db 0											; (Limite_vertical).
 53+  8402 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 53+  8406 00 00
 54+  8408
 55+  8408              ; ---------- ---------- ---------- ---------- ----------
 56+  8408
 57+  8408 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 58+  840A 00 00        	defw 0											; (Posicion_actual).
 59+  840C 00 00        	defw 0 											; (Puntero_objeto).
 60+  840E 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 61+  8411
 62+  8411 00           	db %00000000 									; (Attr).
 63+  8412 00 00        	defw 0											; (Indice_Sprite).
 64+  8414 00 00        	defw 0											; (Puntero_DESPLZ).
 65+  8416 00 00        	defw 0											; (Posicion_inicio).
 66+  8418 00           	db 0											; (Cuad_objeto).
 67+  8419
 68+  8419 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 69+  841D
 70+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 71+  841F 00 00        	defw 0											;	" " " " " " "
 72+  8421 00 00        	defw 0											;	" " " " " " "
 73+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 74+  8426
 75+  8426 00 00        	db 0,0											; Variables_de_pintado
 76+  8428 00 00        	defw 0											;	" " " " " " "
 77+  842A 00 00        	defw 0											;	" " " " " " "
 78+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 79+  842F
 80+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 81+  8431
 82+  8431 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 83+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 84+  8438
 85+  8438 00           	db 0 											; (Columnas).
 86+  8439 00 00        	defw 0											; (Limite_horizontal).
 87+  843B 00           	db 0											; (Limite_vertical).
 88+  843C 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
 88+  8440 00 00
 89+  8442
 90+  8442              ; ---------- ---------- ---------- ---------- ----------
 91+  8442
 92+  8442 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 93+  8444 00 00        	defw 0                                          ; (Posicion_actual).
 94+  8446 00 00        	defw 0											; (Puntero_objeto).
 95+  8448 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 96+  844B
 97+  844B 02           	db %00000010									; (Attr).
 98+  844C 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 99+  844E 00 00        	defw 0                                          ; (Puntero_DESPLZ).
100+  8450 7E 47        	defw $477e                                      ; (Posicion_inicio).
101+  8452 02           	db 2											; (Cuad_objeto).
102+  8453
103+  8453 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
104+  8457
105+  8457 00 00        	db 0,0											; Variables_de_borrado
106+  8459 00 00        	defw 0										 	;	" " " " " " "
107+  845B 00 00        	defw 0											;	" " " " " " "
108+  845D 00 00 00     	db 0,0,0										;	" " " " " " "
109+  8460
110+  8460 00 00        	db 0,0											; Variables_de_pintado
111+  8462 00 00        	defw 0											;	" " " " " " "
112+  8464 00 00        	defw 0											;	" " " " " " "
113+  8466 00 00 00     	db 0,0,0										;	" " " " " " "
114+  8469
115+  8469 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
116+  846B
117+  846B C9 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
118+  846F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
119+  8472
120+  8472 00           	db 0 											; (Columnas).
121+  8473 00 00        	defw 0											; (Limite_horizontal).
122+  8475 00           	db 0											; (Limite_vertical).
123+  8476 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
123+  847A 00 00
124+  847C
125+  847C              ; ---------- ---------- ---------- ---------- ----------
126+  847C
127+  847C 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
128+  847E 00 00        	defw 0                                          ; (Posicion_actual).
129+  8480 00 00        	defw 0											; (Puntero_objeto).
130+  8482 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
131+  8485
132+  8485 04           	db %00000100									; (Attr).
133+  8486 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
134+  8488 00 00        	defw 0                                          ; (Puntero_DESPLZ).
135+  848A 7E 47        	defw $477e                                      ; (Posicion_inicio).
136+  848C 00           	db 0											; (Cuad_objeto).
137+  848D
138+  848D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
139+  8491
140+  8491 00 00        	db 0,0											; Variables_de_borrado
141+  8493 00 00        	defw 0										 	;	" " " " " " "
142+  8495 00 00        	defw 0											;	" " " " " " "
143+  8497 00 00 00     	db 0,0,0										;	" " " " " " "
144+  849A
145+  849A 00 00        	db 0,0											; Variables_de_pintado
146+  849C 00 00        	defw 0											;	" " " " " " "
147+  849E 00 00        	defw 0											;	" " " " " " "
148+  84A0 00 00 00     	db 0,0,0										;	" " " " " " "
149+  84A3
150+  84A3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
151+  84A5
152+  84A5 C9 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
153+  84A9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
154+  84AC
155+  84AC 00           	db 0 											; (Columnas).
156+  84AD 00 00        	defw 0											; (Limite_horizontal).
157+  84AF 00           	db 0											; (Limite_vertical).
158+  84B0 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
158+  84B4 00 00
159+  84B6
160+  84B6              ; ---------- ---------- ---------- ---------- ----------
161+  84B6
162+  84B6 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
163+  84B8 00 00        	defw 0                                          ; (Posicion_actual).
164+  84BA 00 00        	defw 0 											; (Puntero_objeto).
165+  84BC 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
166+  84BF
167+  84BF 01           	db %00000001									; (Attr).
168+  84C0 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
169+  84C2 00 00        	defw 0                                          ; (Puntero_DESPLZ).
170+  84C4 BE 47        	defw $47be                                      ; (Posicion_inicio).
171+  84C6 00           	db 0											; (Cuad_objeto).
172+  84C7
173+  84C7 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
174+  84CB
175+  84CB 00 00        	db 0,0											; Variables_de_borrado
176+  84CD 00 00        	defw 0										 	;	" " " " " " "
177+  84CF 00 00        	defw 0											;	" " " " " " "
178+  84D1 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84D4
180+  84D4 00 00        	db 0,0											; Variables_de_pintado
181+  84D6 00 00        	defw 0											;	" " " " " " "
182+  84D8 00 00        	defw 0											;	" " " " " " "
183+  84DA 00 00 00     	db 0,0,0										;	" " " " " " "
184+  84DD
185+  84DD 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
186+  84DF
187+  84DF C9 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
188+  84E3 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
189+  84E6
190+  84E6 00           	db 0 											; (Columnas).
191+  84E7 00 00        	defw 0											; (Limite_horizontal).
192+  84E9 00           	db 0											; (Limite_vertical).
193+  84EA 00 00 00 00  	defw 0,0,0										; (Puntero_store_entidades) / (Puntero_restore_entidades) / (Indice_restore).
193+  84EE 00 00
# file closed: Base_de_datos_Sprites.asm
 21   84F0
 22   84F0              ; ******************************************************************************************************************************************************************************************
 23   84F0              ; Constantes.
 24   84F0              ; ******************************************************************************************************************************************************************************************
 25   84F0              ;
 26   84F0              ; 8/11/22
 27   84F0              ;
 28   84F0              ; Constantes generales.
 29   84F0              ;
 30   84F0
 31   84F0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84F0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84F0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84F0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84F0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84F0
 37   84F0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84F0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84F0
 40   84F0
 41   84F0              ; ******************************************************************************************************************************************************************************************
 42   84F0              ; Variables.
 43   84F0              ; ******************************************************************************************************************************************************************************************
 44   84F0              ;
 45   84F0              ; 10/11/22
 46   84F0              ;
 47   84F0              ; Variables de DRAW. (Motor principal).
 48   84F0              ;
 49   84F0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84F0
 51   84F0 02           Filas db 2												; Filas. [DRAW]
 52   84F1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84F2 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 54   84F4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84F6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84F7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84F7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84F7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84F7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84F8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84F9
 62   84F9              ; ---------- ---------- ----------
 63   84F9
 64   84F9
 65   84F9 04           Attr db %00000100										; Atributos de la entidad:
 66   84FA
 67   84FA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84FA              ;
 69   84FA              ;	COLORES: 0 ..... NEGRO
 70   84FA              ;    		 1 ..... AZUL
 71   84FA              ; 			 2 ..... ROJO
 72   84FA              ;			 3 ..... MAGENTA
 73   84FA              ; 			 4 ..... VERDE
 74   84FA              ; 			 5 ..... CIAN
 75   84FA              ;			 6 ..... AMARILLO
 76   84FA              ; 			 7 ..... BLANCO
 77   84FA
 78   84FA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84FC 00 00        Puntero_DESPLZ defw 0
 80   84FE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   8500 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   8501
 83   8501              ; Variables de objeto. (Características).
 84   8501
 85   8501 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   8502 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   8503 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   8504 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   8505
 90   8505 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   8507 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   8509 00 00        	defw 0
 93   850B 00 00 00     	db 0,0,0
 94   850E
 95   850E 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   8510 00 00        	defw 0
 97   8512 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   8514 00 00 00     	db 0,0,0
 99   8517
100   8517              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   8517
102   8517 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   8518              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   8518              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   8518              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   8518              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   8518              ;
108   8518              ; 														DESCRIPCIÖN:
109   8518              ;
110   8518              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   8518              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   8518              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   8518              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   8518              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   8518              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   8518              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   8518              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   8518              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   8518              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   8518              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   8518              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   8518              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   8518              ;
124   8518              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   8518              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   8518              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   8518
128   8518 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   8519
130   8519              ; Movimiento.
131   8519
132   8519 CB 8F        Puntero_indice_mov defw Indice_mov_Derecha
133   851B 00 00        Puntero_mov defw 0
134   851D 00           Contador_db_mov db 0
135   851E 00           Incrementa_puntero db 0
136   851F 00           Repetimos_db db 0
137   8520
138   8520
139   8520              ; Variables de funcionamiento. [DRAW].
140   8520
141   8520 00           Columnas db 0
142   8521 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8523              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8523 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8524
146   8524
147   8524              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8524
149   8524              ; Gestión de ENTIDADES.
150   8524
151   8524 00 00        Puntero_store_entidades defw 0
152   8526 00 00        Puntero_restore_entidades defw 0
153   8528 00 00        Indice_restore defw 0
154   852A
155   852A              ; 58 Bytes por entidad.
156   852A              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
157   852A
158   852A 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
159   852B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   852C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   852C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   852C              ;														; _ (Numero_de_malotes)="0".
163   852C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   852E              ;														; _variable para almacenar lo posición del puntero_
165   852E              ; 														; _de pila, SP.
166   852E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   8530              ;														; La utiliza la rutina [Extrae_foto_registros].
168   8530 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   8532              ;														; _el snapshot de los registros de la siguiente entidad.
170   8532              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   8532
172   8532              ; Gestión de FRAMES.
173   8532
174   8532 00           Switch db 0
175   8533
176   8533              ; Variables de Raster y localización en pantalla.
177   8533
178   8533 00 FF        Temp_Raster defw $ff00
179   8535
180   8535              ; Rutina principal *************************************************************************************************************************************************************************
181   8535              ;
182   8535              ;	14/11/22
183   8535
184   8535 31 FF FF     START ld sp,$ffff
185   8538
186   8538 3E A0        	ld a,$a0
187   853A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
188   853C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
189   853E F3           	DI
190   853F
191   853F 3E 01        	ld a,1
192   8541 D3 FE        	out ($fe),a
193   8543
194   8543 3E 07        	ld a,%00000111
195   8545 CD 7B 8C     	call Cls
196   8548
197   8548              ;	call Pinta_FILAS
198   8548
199   8548 CD AD 86     	call Pulsa_ENTER
200   854B
201   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
202   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
203   854B              ;	Pintamos el resto de entidades:
204   854B
205   854B CD 20 86     	call Inicia_punteros_de_entidades
206   854E 21 2A 85     	ld hl,Numero_de_entidades
207   8551 46           	ld b,(hl)
208   8552
209   8552 C5           1 push bc  												; Guardo el contador de entidades.
210   8553 CD 4F 86      	call Inicia_Puntero_objeto
211   8556 CD 04 87     	call Draw
212   8559 CD A0 7F     	call Guarda_foto_registros
213   855C CD 6C 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
214   855F C1           	pop bc
215   8560
216   8560 18 FE        	jr $
217   8562
218   8562 10 EE        	djnz 1B  											; Decremento el contador de entidades.
219   8564
220   8564              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
221   8564
222   8564 CD 20 86     	call Inicia_punteros_de_entidades
223   8567 CD 9B 86     	call Restore_Primera_entidad
224   856A
225   856A 3A 2A 85     	ld a,(Numero_de_entidades)
226   856D 32 2B 85     	ld (Numero_de_malotes),a
227   8570
228   8570 FB           2 ei
229   8571 18 FD        	jr 2B
230   8573
231   8573              ; -----------------------------------------------------------------------------------
232   8573
233   8573              Frame
234   8573
235   8573              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
236   8573              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
237   8573
238   8573 3E 07            ld a,7
239   8575 D3 FE            out ($fe),a
240   8577
241   8577 CD 08 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
242   857A
243   857A 3E 01            ld a,1
244   857C D3 FE            out ($fe),a
245   857E
246   857E              ; ----------------------------------------------------------------------
247   857E
248   857E 21 00 70     	ld hl,Album_de_fotos
249   8581 22 30 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
250   8584              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
251   8584 3A 2A 85         ld a,(Numero_de_entidades)
252   8587 47               ld b,a
253   8588
254   8588 C5           2 push bc
255   8589
256   8589 CD AF 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
257   858C
258   858C 3A 17 85      	ld a,(Ctrl_0)
259   858F CB 67        	bit 4,a
260   8591 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
261   8593
262   8593 CD E7 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
263   8596
264   8596 21 17 85     	ld hl,Ctrl_0
265   8599 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
266   859B
267   859B CD 6C 86     1 call Store_Restore_entidades
268   859E
269   859E C1           	pop bc
270   859F 10 E7        	djnz 2B
271   85A1
272   85A1 CD 20 86     	call Inicia_punteros_de_entidades
273   85A4 CD 9B 86     	call Restore_Primera_entidad
274   85A7 CD 36 86     	call Calcula_numero_de_malotes
275   85AA
276   85AA 3E 00        	ld a,0
277   85AC D3 FE        	out ($fe),a
278   85AE
279   85AE C9           	ret
280   85AF
281   85AF              ; --------------------------------------------------------------------------------------------------------------
282   85AF              ;
283   85AF              Mov_obj
284   85AF
285   85AF              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
286   85AF
287   85AF AF           	xor a
288   85B0 32 18 85     	ld (Obj_dibujado),a
289   85B3 CD F1 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
290   85B6              ;														; Obj_dibujado="0".
291   85B6              ; Movemos Amadeus o enemigos...
292   85B6
293   85B6 3A 17 85     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
294   85B9 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
295   85BB C4 C1 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
296   85BE
297   85BE 3A 17 85     	ld a,(Ctrl_0)
298   85C1 CB 77        	bit 6,a
299   85C3 CC D9 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
300   85C6
301   85C6 3A 17 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
302   85C9 CB 67        	bit 4,a
303   85CB C8           	ret z
304   85CC
305   85CC              ; ---------
306   85CC
307   85CC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
308   85CE 32 18 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
309   85D1 CD F1 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
310   85D4
311   85D4 CD 08 86         call Repone_borrar
312   85D7
313   85D7              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
314   85D7
315   85D7 CD DE 89     	call Prepara_draw
316   85DA CD 18 89     	call calcula_CColumnass
317   85DD CD 4F 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
318   85E0 CD A4 89     	call Define_rutina_de_impresion
319   85E3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
320   85E6
321   85E6 C9           	ret
322   85E7
323   85E7              ; --------------------------------------------------------------------------------------------------------------
324   85E7              ;
325   85E7 CD 14 86     Borra_Pinta_obj call Repone_pintar
326   85EA CD 04 87     	call Draw
327   85ED CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
328   85F0 C9           	ret
329   85F1
330   85F1              ; --------------------------------------------------------------------------------------------------------------
331   85F1
332   85F1 21 F0 84     Prepara_var_pintado_borrado	ld hl,Filas
333   85F4 3A 18 85     	ld a,(Obj_dibujado)
334   85F7 A7           	and a
335   85F8 28 05        	jr z,1F
336   85FA 11 0E 85     	ld de,Variables_de_pintado
337   85FD 18 03        	jr 2F
338   85FF 11 05 85     1 ld de,Variables_de_borrado
339   8602 01 09 00     2 ld bc,9
340   8605 ED B0        	ldir
341   8607 C9           	ret
342   8608
343   8608 21 05 85     Repone_borrar ld hl,Variables_de_borrado
344   860B 11 F0 84     	ld de,Filas
345   860E 01 09 00     	ld bc,9
346   8611 ED B0        	ldir
347   8613 C9           	ret
348   8614
349   8614 21 0E 85     Repone_pintar ld hl,Variables_de_pintado
350   8617 11 F0 84     	ld de,Filas
351   861A 01 09 00     	ld bc,9
352   861D ED B0        	ldir
353   861F C9           	ret
354   8620
355   8620              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
356   8620              ;	ld (Caja_de_BORRADO),hl
357   8620              ;	ret
358   8620
359   8620              ; *************************************************************************************************************************************************************
360   8620              ;
361   8620              ; 8/1/23
362   8620              ;
363   8620              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
364   8620              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
365   8620              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
366   8620
367   8620              ; Destruye HL y DE !!!!!
368   8620
369   8620 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
370   8623 CD 49 86         call Extrae_address
371   8626 22 24 85         ld (Puntero_store_entidades),hl
372   8629 21 C2 83     	ld hl,Indice_de_entidades+2
373   862C 22 28 85     	ld (Indice_restore),hl
374   862F CD 49 86     	call Extrae_address
375   8632 22 26 85     	ld (Puntero_restore_entidades),hl
376   8635 C9               ret
377   8636
378   8636              ; -------------------------------------------------------------------------------------------------------------
379   8636              ;
380   8636              ; 7/1/23
381   8636              ;
382   8636
383   8636 2A 30 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
384   8639 AF           	xor a
385   863A 67           	ld h,a
386   863B 7D           	ld a,l
387   863C D6 06        1 sub 6
388   863E 28 03        	jr z,2F
389   8640 24           	inc h
390   8641 18 F9        	jr 1B
391   8643 24           2 inc h
392   8644 7C           	ld a,h
393   8645 32 2B 85     	ld (Numero_de_malotes),a
394   8648 C9           	ret
395   8649
396   8649              ; *************************************************************************************************************************************************************
397   8649              ;
398   8649              ; 20/10/22
399   8649              ;
400   8649              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
401   8649              ;
402   8649              ; Destruye el puntero y DE !!!!!
403   8649
404   8649 5E           Extrae_address ld e,(hl)
405   864A 23           	inc hl
406   864B 56           	ld d,(hl)
407   864C 2B           	dec hl
408   864D EB           	ex de,hl
409   864E C9           	ret
410   864F
411   864F              ; *************************************************************************************************************************************************************
412   864F              ;
413   864F              ;	21/9/22
414   864F              ;
415   864F              ;   Destruye HL y BC !!!!!,
416   864F
417   864F 2A FA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
418   8652 22 FC 84     	ld (Puntero_DESPLZ),hl
419   8655 CD 49 86     	call Extrae_address
420   8658 22 F4 84     	ld (Puntero_objeto),hl
421   865B
422   865B              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
423   865B
424   865B 21 10 83     	ld hl,Amadeus
425   865E ED 4B F4 84  	ld bc,(Puntero_objeto)
426   8662 B7 ED 42     	sub hl,bc
427   8665 C0           	ret nz
428   8666
429   8666 21 17 85     	ld hl,Ctrl_0
430   8669 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
431   866B
432   866B C9            	ret 												; _de nuestra nave en los extremos.
433   866C
434   866C              ; *************************************************************************************************************************************************************
435   866C              ;
436   866C              ;	8/1/23
437   866C              ;
438   866C              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
439   866C              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
440   866C
441   866C              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
442   866C              ;	_de la 2ª y 3ª entidad respectivamente.
443   866C
444   866C
445   866C
446   866C              Store_Restore_entidades
447   866C
448   866C E5           	push hl
449   866D D5           	push de
450   866E C5            	push bc
451   866F
452   866F              ;	STORE !!!!!
453   866F
454   866F 21 F0 84     	ld hl,Filas
455   8672 ED 5B 24 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
456   8676 01 3A 00     	ld bc,58
457   8679 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
458   867B
459   867B              ;	Incrementa STORE y ejecuta RESTORE !!!!!
460   867B
461   867B 2A 26 85     	ld hl,(Puntero_restore_entidades)
462   867E 22 24 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
463   8681 11 F0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
464   8684 01 3A 00     	ld bc,58
465   8687 ED B0        	ldir
466   8689
467   8689              ;	Incrementa RESTORE !!!!!
468   8689
469   8689 2A 28 85         ld hl,(Indice_restore)
470   868C 23           	inc hl
471   868D 23           	inc hl
472   868E 22 28 85     	ld (Indice_restore),hl
473   8691 CD 49 86         call Extrae_address
474   8694 22 26 85         ld (Puntero_restore_entidades),hl
475   8697
476   8697 C1           	pop bc
477   8698 D1           	pop de
478   8699 E1           	pop hl
479   869A
480   869A C9           	ret
481   869B
482   869B              ; **************************************************************************************************
483   869B              ;
484   869B              ;	29/10/22
485   869B              ;
486   869B              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
487   869B
488   869B E5           Restore_Primera_entidad push hl
489   869C D5           	push de
490   869D C5            	push bc
491   869E 2A 24 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
492   86A1 11 F0 84     	ld de,Filas
493   86A4 01 3A 00     	ld bc,58
494   86A7 ED B0        	ldir
495   86A9 C1           	pop bc
496   86AA D1           	pop de
497   86AB E1           	pop hl
498   86AC C9           	ret
499   86AD
500   86AD              ; *************************************************************************************************************************************************************
501   86AD              ;
502   86AD              ; Teclado.
503   86AD
504   86AD 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
505   86AF DB FE        	in a,($fe)
506   86B1 E6 01        	and $01
507   86B3 28 02        	jr z,1f
508   86B5 18 F6        	jr Pulsa_ENTER
509   86B7 C9           1 ret
510   86B8
511   86B8              ; **************************************************************************************************
512   86B8              ;
513   86B8              ; Temporización.
514   86B8
515   86B8              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
516   86B8              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
517   86B8              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
518   86B8              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
519   86B8
520   86B8              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
521   86B8              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
522   86B8              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
523   86B8
524   86B8              ; A partir de $4f61 no hace falta DELAY.
525   86B8
526   86B8              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
527   86B8
528   86B8 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
529   86BB 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
530   86BC 78           	LD A,B
531   86BD A7           	AND A
532   86BE 20 FB        	JR NZ,wait
533   86C0 C9           	RET
534   86C1
535   86C1              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
536   86C1              ;
537   86C1              ;	21/4/22
538   86C1
539   86C1              Movimiento_Amadeus
540   86C1
541   86C1 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
542   86C3 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
543   86C5 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
544   86C7 CC DE 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
545   86CA 3E F7        	ld a,$f7
546   86CC DB FE        	in a,($fe)
547   86CE E6 01        	and $01
548   86D0 C8           	ret z
549   86D1 3E F7        	ld a,$f7
550   86D3 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
551   86D5 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
552   86D7 CC EB 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
553   86DA C9               ret
554   86DB
555   86DB              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
556   86DB
557   86DB              ; Pinta indicadores de FILAS. ------------------------------------------------------
558   86DB
559   86DB 21 10 40     Pinta_FILAS ld hl,$4010
560   86DE              ;	ld b,9
561   86DE              ;2 push hl
562   86DE              ;	push bc
563   86DE 06 BF        	ld b,$bf
564   86E0 36 80        1 ld (hl),%10000000
565   86E2 CD EA 89     	call NextScan
566   86E5 10 F9        	djnz 1B
567   86E7              ;	pop bc
568   86E7              ;	pop hl
569   86E7              ;	inc l
570   86E7              ;	djnz 2B
571   86E7
572   86E7 06 03        	ld b,3
573   86E9 21 00 47         ld hl,$4700
574   86EC CD F2 86     3 call Bucle_1
575   86EF 10 FB            djnz 3B
576   86F1 C9               ret
577   86F2
578   86F2 C5           Bucle_1 push bc
579   86F3 E5                   push hl
580   86F4 D1                   pop de
581   86F5 13                   inc de
582   86F6 01 FF 00             ld bc,255
583   86F9 36 FF                ld (hl),255
584   86FB ED B0                ldir
585   86FD 23                   inc hl
586   86FE 3E 07                ld a,7
587   8700 84                   add a,h
588   8701 67                   ld h,a
589   8702 C1                   pop bc
590   8703 C9                   ret
591   8704
592   8704              ; ---------------------------------------------------------------
593   8704
594   8704              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8704              ; ******************************************************************************************************************************************************************************************
  2+  8704              ;
  3+  8704              ; 01/23
  4+  8704              ;
  5+  8704              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8704
  7+  8704 CD DE 89     Draw call Prepara_draw
  8+  8707 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8708 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8709 28 05        	jr z,2F
 11+  870B 3A 00 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  870E 18 0C        	jr 1F
 13+  8710 2A FE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8713 22 F2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8716 CD A5 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8719              ;													; _la esquina superior izquierda de la pantalla.
 17+  8719 CD 5B 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  871C 3A 17 85     1 ld a,(Ctrl_0)
 19+  871F CB 6F        	bit 5,a
 20+  8721 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8723
 22+  8723 CD 3B 87     	call Comprueba_limite_horizontal
 23+  8726 CD CB 87     	call Comprueba_limite_vertical
 24+  8729
 25+  8729              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8729
 27+  8729 CD 18 89     3 call calcula_CColumnass
 28+  872C CD 4F 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  872F CD A4 89     	call Define_rutina_de_impresion
 30+  8732
 31+  8732 3A 17 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8735 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8737 32 17 85     	ld (Ctrl_0),a
 34+  873A
 35+  873A C9           	ret
 36+  873B
 37+  873B              ; *******************************************************************************************************************************************************************************************
 38+  873B              ;	21/01/23
 39+  873B              ;
 40+  873B              ; 	Comprueba_limite_horizontal.
 41+  873B              ;
 42+  873B              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  873B              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  873B              ;
 45+  873B              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  873B              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  873B              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  873B              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  873B
 50+  873B
 51+  873B
 52+  873B 3A 17 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  873E CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  8740 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  8742 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8744 32 17 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8747 18 09            jr 6F
 58+  8749 CB 5F        1 bit 3,a
 59+  874B 28 0A            jr z,2F
 60+  874D E6 F7            and $f7
 61+  874F 32 17 85         ld (Ctrl_0),a
 62+  8752 CD A5 88     6 call Inicializacion
 63+  8755 18 5B            jr 5F
 64+  8757 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  8758
 66+  8758              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8758              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8758
 69+  8758 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8759 2A 21 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  875C CD 43 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  875F 67           	ld h,a
 73+  8760 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  8761 CD 43 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8764 67           	ld h,a
 76+  8765 A7           	and a
 77+  8766 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8768 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8769 3A 00 85     	ld a,(Cuad_objeto)
 80+  876C FE 02        	cp 2
 81+  876E 38 1E        	jr c,3F
 82+  8770 28 1C        	jr z,3F
 83+  8772 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8773 28 23            jr z,7F
 85+  8775 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8777 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8779 E1           	pop hl
 88+  877A
 89+  877A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  877A              ; _para indicar con E="2" en caso necesario.
 91+  877A
 92+  877A E5               push hl
 93+  877B C5               push bc
 94+  877C CD 43 8C     	call calcula_tercio
 95+  877F FE 01        	cp 1
 96+  8781 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  8783 CD B3 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8786 28 26            jr z,9F
 99+  8788 38 24            jr c,9F
100+  878A 1E 00        11 ld e,0
101+  878C 18 22            jr 8F
102+  878E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  878F 28 07        	jr z, 7F
104+  8791 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  8793 1E 00         	ld e,0
106+  8795 E1           	pop hl
107+  8796 18 04        	jr 4F
108+  8798 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  879A 18 15            jr 10F
110+  879C
111+  879C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  879C              ; _para indicar con E="2" en caso necesario.
113+  879C
114+  879C E5           4 push hl
115+  879D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  879E CD 43 8C     	call calcula_tercio
117+  87A1 FE 01        	cp 1
118+  87A3 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87A5 CD B3 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  87A8 28 04            jr z,9F
121+  87AA 30 02            jr nc,9F
122+  87AC 18 02        	jr 8F
123+  87AE 1E 02        9 ld e,2
124+  87B0 C1           8 pop bc
125+  87B1 E1           10 pop hl
126+  87B2 C9           5 ret
127+  87B3
128+  87B3              ; --------------------
129+  87B3              ;
130+  87B3              ; 25/08/22
131+  87B3
132+  87B3 CD 43 8C     Comprueba_centro call calcula_tercio
133+  87B6 67               ld h,a
134+  87B7 08           	ex af,af
135+  87B8 FE 02        	cp 2
136+  87BA 38 07        	jr c,1F
137+  87BC 28 05        	jr z,1F
138+  87BE 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  87C1 18 03        	jr 2F
140+  87C3 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  87C6 08           2 ex af,af
142+  87C7 A7               and a
143+  87C8 ED 42            sbc hl,bc
144+  87CA C9               ret
145+  87CB
146+  87CB              ; *********************************************************************************************************************************************************************************************
147+  87CB              ;
148+  87CB              ;   16/8/22
149+  87CB              ;
150+  87CB              ;	Comprueba_limite_vertical
151+  87CB              ;
152+  87CB              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  87CB              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  87CB              ;
155+  87CB
156+  87CB 2A F2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  87CE 7D           	ld a,l
158+  87CF E6 1F        	and $1F
159+  87D1 57           	ld d,a
160+  87D2 3A 23 85     	ld a,(Limite_vertical)
161+  87D5 BA           	cp d 											; Límite - Posición.
162+  87D6 08           	ex af,af 										; Resultado de CP d en F'.
163+  87D7 3A 00 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  87DA CB 47        	bit 0,a
165+  87DC 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  87DE
167+  87DE              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  87DE
169+  87DE 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  87DF 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  87E1
172+  87E1              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  87E1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  87E1
175+  87E1 3A F7 84         ld a,(Coordenada_X)
176+  87E4 16 0F            ld d,Centro_izquierda
177+  87E6 A7               and a
178+  87E7 92               sub d 											 ; Posición - Centro_izquierda.
179+  87E8 28 1E            jr z,3F
180+  87EA 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  87EC              ;                                                    ; _salimos sin modificar nada.
182+  87EC 18 0E            jr 2F
183+  87EE 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  87EF 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  87F1
186+  87F1              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  87F1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  87F1
189+  87F1 3A F7 84         ld a,(Coordenada_X)
190+  87F4 16 10            ld d,Centro_derecha
191+  87F6 A7               and a
192+  87F7 92               sub d
193+  87F8 28 0E            jr z,3F
194+  87FA 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  87FC              ;                                                    ; _salimos sin modificar nada.
196+  87FC CB 43        2 bit 0,e
197+  87FE 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8800 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  8801 CD 95 88         call Modificaccionne
200+  8804 C1           	pop bc
201+  8805 CD A5 88         call Inicializacion
202+  8808 C9           3 ret 				 								 ; Salimos de la rutina.
203+  8809
204+  8809              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  8809
206+  8809 C5           4 push bc
207+  880A 01 F1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  880D 0A           	ld a,(bc)
209+  880E 3D           	dec a
210+  880F 47           	ld b,a 											 ; Columnas-1 en B.
211+  8810 7D           	ld a,l
212+  8811 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  8812 CB 47        	bit 0,a
214+  8814 28 03        	jr z,5F
215+  8816 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8817 18 2E        	jr 7F
217+  8819
218+  8819              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  8819
220+  8819 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  881A F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  881B 3A 17 85     	ld a,(Ctrl_0)
223+  881E CB 4F        	bit 1,a
224+  8820 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8822 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8823
227+  8823              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8823
229+  8823 1C               inc e
230+  8824 1D               dec e
231+  8825 20 07            jr nz,12F
232+  8827 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8828 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8829 22 F2 84     	ld (Posicion_actual),hl
235+  882C 18 44        13 jr 9F
236+  882E CB 43        12 bit 0,e
237+  8830 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  8832              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  8832 C1           	pop bc
240+  8833 18 D3        	jr 3B
241+  8835 80           14 add b
242+  8836 6F               ld l,a
243+  8837 22 F2 84     	ld (Posicion_actual),hl
244+  883A CD 95 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  883D 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  883F E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  8841 32 17 85         ld (Ctrl_0),a
248+  8844 F1           	pop af
249+  8845 18 2B        	jr 9F
250+  8847
251+  8847              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8847
253+  8847 F5           7 push af
254+  8848 3A 17 85     	ld a,(Ctrl_0)
255+  884B CB 47        	bit 0,a
256+  884D 20 1D        	jr nz,8F
257+  884F F1           	pop af
258+  8850
259+  8850              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  8850
261+  8850 1C           	inc e
262+  8851 1D               dec e
263+  8852 20 07            jr nz,10F
264+  8854 90           	sub b
265+  8855 6F               ld l,a
266+  8856 22 F2 84     	ld (Posicion_actual),hl
267+  8859 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  885B              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  885B CB 43        10 bit 0,e
270+  885D 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  885F              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  885F C1           	pop bc
273+  8860 18 A6        	jr 3B
274+  8862 90           16 sub b
275+  8863 6F               ld l,a
276+  8864 22 F2 84     	ld (Posicion_actual),hl
277+  8867 CD 95 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  886A 18 06            jr 9F
279+  886C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  886E 32 17 85         ld (Ctrl_0),a
281+  8871 F1           	pop af
282+  8872 C1           9 pop bc
283+  8873 1E 00        	ld e,0
284+  8875 CD A5 88         call Inicializacion
285+  8878 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8879 08           	ex af,af
287+  887A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  887B 18 8B            jr 3B
289+  887D
290+  887D              ; --------------------
291+  887D
292+  887D 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  887F CD F9 89     1 call PreviousScan
294+  8882 10 FB            djnz 1B
295+  8884 22 F2 84     	ld (Posicion_actual),hl
296+  8887 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  8888 C9           	ret
298+  8889
299+  8889              ; --------------------
300+  8889
301+  8889 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  888B CD EA 89     1 call NextScan
303+  888E 10 FB            djnz 1B
304+  8890 22 F2 84     	ld (Posicion_actual),hl
305+  8893 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8894 C9           	ret
307+  8895
308+  8895              ; --------------------
309+  8895              ;
310+  8895              ;	22/01/23
311+  8895              ;
312+  8895              ;	E="1". Hemos cambiado de cuadrante.
313+  8895              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8895              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8895
316+  8895
317+  8895              Modificaccionne
318+  8895
319+  8895 3A 00 85     	ld a,(Cuad_objeto)
320+  8898 FE 02        	cp 2
321+  889A CC 7D 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  889D DC 7D 88         call c,Modifica_Pos_actual
323+  88A0 C8           	ret z
324+  88A1 CD 89 88         call Modifica_Pos_actual2
325+  88A4 C9               ret
326+  88A5
327+  88A5              ; *************************************************************************************************************************************************************************************************
328+  88A5              ;
329+  88A5              ;	13/8/22
330+  88A5              ;
331+  88A5              ;	Inicializacion
332+  88A5              ;
333+  88A5              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88A5              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88A5              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88A5              ;
337+  88A5              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88A5              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88A5              ;	_ desaparece/aparece.
340+  88A5
341+  88A5              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88A5              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88A5              ;
344+  88A5              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88A5              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88A5              ; 		   [E] ="0"
347+  88A5
348+  88A5              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88A5
350+  88A5 CD 43 8C     Inicializacion call calcula_tercio
351+  88A8 28 36        	jr z,primit
352+  88AA E6 02        	and 2
353+  88AC 20 07        	jr nz,segmit
354+  88AE 7D           	ld a,l
355+  88AF FE 7F        	cp $7f
356+  88B1 38 2D        	jr c,primit
357+  88B3 28 2B        	jr z,primit
358+  88B5 CD 12 89     segmit call column
359+  88B8 38 13        	jr c,tercuad
360+  88BA 3E 04        cuarcuad ld a,4
361+  88BC 32 00 85     	ld (Cuad_objeto),a
362+  88BF 21 20 48     	ld hl,$4820
363+  88C2 22 21 85     	ld (Limite_horizontal),hl
364+  88C5 21 23 85     	ld hl,Limite_vertical
365+  88C8 36 0D        	ld (hl),$0d
366+  88CA 08           	ex af,af
367+  88CB 18 3C        	jr 1F
368+  88CD              tercuad
369+  88CD              ;	call Fija_punteros
370+  88CD 3E 03        	ld a,3
371+  88CF 32 00 85     	ld (Cuad_objeto),a
372+  88D2 21 20 48     	ld hl,$4820
373+  88D5 22 21 85     	ld (Limite_horizontal),hl
374+  88D8 21 23 85     	ld hl,Limite_vertical
375+  88DB 36 12        	ld (hl),$12
376+  88DD 08           	ex af,af
377+  88DE 18 29        	jr 1F
378+  88E0 CD 12 89     primit call column
379+  88E3 38 13        	jr c, primcuad
380+  88E5              segcuad
381+  88E5              ;	call Fija_punteros
382+  88E5 3E 02        	ld a,2
383+  88E7 32 00 85     	ld (Cuad_objeto),a
384+  88EA 21 C0 4F     	ld hl,$4fc0
385+  88ED 22 21 85     	ld (Limite_horizontal),hl
386+  88F0 21 23 85     	ld hl,Limite_vertical
387+  88F3 36 0D        	ld (hl),$0d
388+  88F5 08           	ex af,af
389+  88F6 18 11        	jr 1F
390+  88F8              primcuad
391+  88F8              ;	call Fija_punteros
392+  88F8 3E 01        	ld a,1
393+  88FA 32 00 85     	ld (Cuad_objeto),a
394+  88FD 21 C0 4F     	ld hl,$4fc0
395+  8900 22 21 85     	ld (Limite_horizontal),hl
396+  8903 21 23 85     	ld hl,Limite_vertical
397+  8906 36 12        	ld (hl),$12
398+  8908 08           	ex af,af
399+  8909 CD 53 8F     1 call Genera_coordenadas
400+  890C 21 17 85     	ld hl,Ctrl_0
401+  890F CB EE        	set 5,(hl)
402+  8911 C9           	ret
403+  8912
404+  8912              ; ------------------------------------------------------------------------------------------------------------------
405+  8912
406+  8912              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  8912              ;
408+  8912              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  8912
410+  8912 7D           column ld a,l
411+  8913 E6 1F        	and $1f
412+  8915 FE 10         	cp $10
413+  8917 C9            	ret
414+  8918
415+  8918              ; --------------------------------------------------------------------------------------------------------------------
416+  8918              ;
417+  8918              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  8918              ;
419+  8918              ; 14/12/22
420+  8918              ;
421+  8918              ;	Modifica: A y BC.
422+  8918
423+  8918 3A 00 85     calcula_CColumnass ld a,(Cuad_objeto)
424+  891B E6 01        	and 1
425+  891D 28 17        	jr z,1F
426+  891F
427+  891F              ; Nos encontramos en la parte izquierda de la pantalla
428+  891F
429+  891F 3A F7 84     	ld a,(Coordenada_X)
430+  8922 47           	ld b,a
431+  8923 04           	inc b											; (Coordenada_X)+1 en B.
432+  8924 79           	ld a,c
433+  8925 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8926 38 08        	jr c,2F
435+  8928 47           	ld b,a
436+  8929 79           	ld a,c
437+  892A 90           	sub b
438+  892B 32 20 85     	ld (Columnas),a
439+  892E 18 1B        	jr 4F
440+  8930 79           2 ld a,c
441+  8931 32 20 85     	ld (Columnas),a
442+  8934 18 15        	jr 4F
443+  8936
444+  8936              ; Nos encontramos en la parte derecha de la pantalla.
445+  8936
446+  8936 3A F7 84     1 ld a,(Coordenada_X)
447+  8939 81           	add c
448+  893A 3D           	dec a
449+  893B D6 1F        	sub $1f
450+  893D 38 08        	jr c,3F
451+  893F 47           	ld b,a
452+  8940 79           	ld a,c
453+  8941 90           	sub b
454+  8942 32 20 85     	ld (Columnas),a
455+  8945 18 04        	jr 4F
456+  8947 79           3 ld a,c
457+  8948 32 20 85     	ld (Columnas),a
458+  894B D9           4 exx
459+  894C 4F           	ld c,a
460+  894D D9           	exx
461+  894E C9            ret
462+  894F
463+  894F              ; --------------------------------------------------------------------------------------------------------------------
464+  894F              ;
465+  894F              ; 7/1/23
466+  894F              ;
467+  894F              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  894F              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  894F              ;
470+  894F              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  894F              ;	DESTRUYE: HL,B Y A.
472+  894F
473+  894F 3A 00 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  8952 FE 02        	cp 2
475+  8954 38 18        	jr c,1F
476+  8956 28 16        	jr z,1F
477+  8958 E6 01        	and 1
478+  895A 28 0D        	jr z,3F
479+  895C
480+  895C              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  895C
482+  895C CD 98 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  895F
484+  895F 7D           9 ld a,l
485+  8960 E6 1F        	and $1f
486+  8962 28 2A        	jr z,7F
487+  8964 2B           	dec hl
488+  8965 10 F8        	djnz 9B
489+  8967 18 25        	jr 7F
490+  8969
491+  8969              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8969
493+  8969 2A F2 84     3 ld hl,(Posicion_actual)
494+  896C 18 20        	jr 7F
495+  896E
496+  896E 28 14        1 jr z,2F
497+  8970
498+  8970              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  8970
500+  8970 CD 98 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  8973 7D           4 ld a,l
502+  8974 E6 1F        	and $1f
503+  8976 28 03        	jr z,6F
504+  8978 2B           	dec hl
505+  8979 10 F8        	djnz 4B
506+  897B 06 0F        6 ld b,15
507+  897D CD F9 89     5 call PreviousScan
508+  8980 10 FB        	djnz 5B
509+  8982 18 0A        	jr 7F
510+  8984
511+  8984              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  8984
513+  8984 CD 98 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  8987 06 0F        	ld b,15
515+  8989 CD F9 89     8 call PreviousScan
516+  898C 10 FB        	djnz 8B
517+  898E
518+  898E E5           7 push hl
519+  898F DD E1        	pop ix
520+  8991
521+  8991 2A F4 84     	ld hl,(Puntero_objeto)
522+  8994 E5           	push hl
523+  8995 FD E1        	pop iy
524+  8997
525+  8997 C9           	ret
526+  8998
527+  8998              ; --------------------------------------------------------------------------------------------------------------------
528+  8998              ;
529+  8998              ;	2/1/23
530+  8998              ;
531+  8998              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8998              ;
533+  8998              ;	Tras esta rutina tenemos:
534+  8998              ;
535+  8998              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8998              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8998              ;
538+  8998              ;	DESTRUYE!!!!! HL,B y A.
539+  8998
540+  8998 2A F2 84     Operandos ld hl,(Posicion_actual)
541+  899B 3A 20 85     	ld a,(Columnas)
542+  899E 3D           	dec a
543+  899F 20 01        	jr nz,1F
544+  89A1 3C           	inc a
545+  89A2 47           1 ld b,a
546+  89A3 C9           	ret
547+  89A4
548+  89A4              ; --------------------------------------------------------------------------------------------------------------------
549+  89A4              ;
550+  89A4              ;	3/1/23
551+  89A4              ;
552+  89A4              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89A4              ;
554+  89A4              ;	Destruye: A,B,HL y DE.
555+  89A4
556+  89A4              Define_rutina_de_impresion
557+  89A4
558+  89A4 3A F1 84     	ld a,(Columns)
559+  89A7 47           	ld b,a
560+  89A8 3A 20 85     	ld a,(Columnas)
561+  89AB B8           	cp b
562+  89AC 20 0D        	jr nz,2f
563+  89AE
564+  89AE              ;	La entidad se imprime entera.
565+  89AE
566+  89AE 21 40 8A     	ld hl, Indice_entidades_completas
567+  89B1 E6 01        	and 1
568+  89B3 28 02        	jr z,1F
569+  89B5
570+  89B5 23           	inc hl
571+  89B6 23           	inc hl
572+  89B7
573+  89B7 CD 49 86     1 call Extrae_address
574+  89BA C9           	ret		;	ret
575+  89BB
576+  89BB              ;	La entidad no se imprime entera en pantalla.
577+  89BB
578+  89BB 3A 00 85     2 ld a,(Cuad_objeto)
579+  89BE E6 01        	and 1
580+  89C0 28 17        	jr z,3F
581+  89C2
582+  89C2              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  89C2
584+  89C2 21 44 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  89C5 3A F1 84     4 ld a,(Columns)
586+  89C8 E6 01        	and 1
587+  89CA 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  89CC
589+  89CC 23           	inc hl
590+  89CD 23           	inc hl
591+  89CE
592+  89CE 3A 20 85     	ld a,(Columnas)
593+  89D1 E6 01        	and 1
594+  89D3 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  89D5
596+  89D5 23           	inc hl
597+  89D6 23           	inc hl
598+  89D7
599+  89D7 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  89D9
601+  89D9 21 4A 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  89DC 18 E7        	jr 4B
603+  89DE
604+  89DE              ; --------------------------------------------------------------------------------------------------------------------
605+  89DE              ;
606+  89DE              ;	Prepara_draw
607+  89DE              ;
608+  89DE              ;	Es una rutina de carga.
609+  89DE              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  89DE              ;
611+  89DE              ;	FUNCIONAMIENTO:
612+  89DE              ;
613+  89DE              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  89DE              ;	- LD (Posicion_actual) del objeto en [HL].
615+  89DE              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  89DE              ;
617+  89DE              ;	DESTRUYE:
618+  89DE              ;
619+  89DE              ;	Logicamente, BC,HL y E quedan destruidos.
620+  89DE
621+  89DE 21 F0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  89E1 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  89E2 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  89E3 4E           	ld c,(hl)
625+  89E4 2A F2 84     	ld hl,(Posicion_actual)
626+  89E7 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  89E9 C9           	ret
628+  89EA
629+  89EA              ;----------------------------------------------------------------------------------------------------------------
630+  89EA              ;
631+  89EA              ;	5/08/22
632+  89EA              ;
633+  89EA              ;   NextScan.
634+  89EA              ;
635+  89EA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  89EA              ;
637+  89EA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  89EA              ;
639+  89EA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  89EA              ;
641+  89EA              ;       DESTRUIDOS: AF y HL !!!
642+  89EA              ;
643+  89EA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  89EA              ;
645+  89EA
646+  89EA 24           NextScan inc h          ; Incrementamos el scanline.
647+  89EB 7C               ld a,h
648+  89EC E6 07            and 7
649+  89EE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  89EF
651+  89EF 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  89F0 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  89F2 6F               ld l,a
654+  89F3 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  89F4
656+  89F4 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  89F5 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  89F7 67               ld h,a
659+  89F8 C9               ret
660+  89F9
661+  89F9              ;----------------------------------------------------------------------------------------------------------------
662+  89F9              ;
663+  89F9              ;	5/08/22
664+  89F9              ;
665+  89F9              ;   PreviousScan.
666+  89F9              ;
667+  89F9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  89F9              ;
669+  89F9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  89F9              ;
671+  89F9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  89F9              ;
673+  89F9              ;       DESTRUIDOS: AF y HL !!!
674+  89F9              ;
675+  89F9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  89F9              ;
677+  89F9
678+  89F9 7C           PreviousScan ld a,h
679+  89FA 25               dec h               ; Dec H.
680+  89FB E6 07            and 7
681+  89FD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  89FE
683+  89FE 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  89FF D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A01 6F               ld l,a
686+  8A02 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A03
688+  8A03 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A04 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A06 67               ld h,a
691+  8A07 C9               ret
692+  8A08
693+  8A08              ; -----------------------------------------------------------------------------------
694+  8A08              ;
695+  8A08              ;	15/1/23
696+  8A08
697+  8A08 ED 73 2C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  8A0C 31 00 70     	ld sp,Album_de_fotos
699+  8A0F
700+  8A0F FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  8A11 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  8A12 D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  8A13
704+  8A13 ED 73 2E 85  	ld (Stack_2),sp
705+  8A17 ED 7B 2C 85  	ld sp,(Stack)
706+  8A1B
707+  8A1B              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  8A1B
709+  8A1B 3E CD        	ld a,$cd
710+  8A1D 32 25 8A     	ld (Imprime),a
711+  8A20 EB           	ex de,hl
712+  8A21 22 26 8A     	ld (Imprime+1),hl
713+  8A24 EB           	ex de,hl
714+  8A25
715+  8A25              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A25
717+  8A25 00 00 00     Imprime db 0,0,0
718+  8A28
719+  8A28 ED 73 2C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A2C
721+  8A2C 3A 2B 85     	ld a,(Numero_de_malotes)
722+  8A2F 3D           	dec a
723+  8A30 28 09        	jr z,1F
724+  8A32 32 2B 85      	ld (Numero_de_malotes),a
725+  8A35 ED 7B 2E 85  	ld sp,(Stack_2)
726+  8A39 18 D4        	jr 2B
727+  8A3B
728+  8A3B AF           1 xor a
729+  8A3C 32 2E 85     	ld (Stack_2),a
730+  8A3F C9           	ret
731+  8A40
732+  8A40
# file closed: Draw_XOR.asm
595   8A40              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A40              ;   índices de Rutinas de impresión.
  2+  8A40
  3+  8A40 50 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A42 7D 8A            defw Pinta_Amadeus_3x2
  5+  8A44
  6+  8A44 D3 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A46 73 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A48 27 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A4A
 10+  8A4A FD 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A4C 01 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A4E B5 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A50
 14+  8A50
 15+  8A50              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A50              ;
 17+  8A50              ;   12/12/22
 18+  8A50              ;
 19+  8A50              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A50              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A50              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A50              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A50              ;
 24+  8A50              ;   Modifica: DE y HL.
 25+  8A50
 26+  8A50 ED 73 2C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A54 FD F9        	ld sp,iy
 28+  8A56 06 10            ld b,16
 29+  8A58 D1           1 pop de
 30+  8A59 7B               ld a,e
 31+  8A5A AE               xor (hl)
 32+  8A5B 77           	ld (hl),a
 33+  8A5C 23           	inc hl
 34+  8A5D 7A               ld a,d
 35+  8A5E AE               xor (hl)
 36+  8A5F 77           	ld (hl),a
 37+  8A60 2B           	dec hl
 38+  8A61 24           	inc h
 39+  8A62 7C               ld a,h
 40+  8A63 E6 07            and 7
 41+  8A65 20 0A            jr nz,2F
 42+  8A67 7D               ld a,l
 43+  8A68 C6 20            add a,$20
 44+  8A6A 6F               ld l,a
 45+  8A6B 38 04            jr c,2F
 46+  8A6D 7C               ld a,h
 47+  8A6E D6 08            sub 8
 48+  8A70 67               ld h,a
 49+  8A71 7C           2 ld a,h
 50+  8A72 FE 58            cp $58
 51+  8A74 28 02            jr z,3F
 52+  8A76 10 E0            djnz 1B
 53+  8A78 ED 7B 2C 85  3 ld sp,(Stack)
 54+  8A7C C9           	ret
 55+  8A7D
 56+  8A7D ED 73 2C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A81 FD F9        	ld sp,iy
 58+  8A83 06 08            ld b,8
 59+  8A85 D1           1 pop de
 60+  8A86 7B               ld a,e
 61+  8A87 AE               xor (hl)
 62+  8A88 77           	ld (hl),a
 63+  8A89 23           	inc hl
 64+  8A8A 7A               ld a,d
 65+  8A8B AE               xor (hl)
 66+  8A8C 77           	ld (hl),a
 67+  8A8D 23           	inc hl
 68+  8A8E D1           	pop de
 69+  8A8F 7B               ld a,e
 70+  8A90 AE               xor (hl)
 71+  8A91 77           	ld (hl),a
 72+  8A92 2B           	dec hl
 73+  8A93 2B           	dec hl
 74+  8A94 24           	inc h
 75+  8A95 7C               ld a,h
 76+  8A96 E6 07            and 7
 77+  8A98 20 0A            jr nz,2F
 78+  8A9A 7D               ld a,l
 79+  8A9B C6 20            add a,$20
 80+  8A9D 6F               ld l,a
 81+  8A9E 38 04            jr c,2F
 82+  8AA0 7C               ld a,h
 83+  8AA1 D6 08            sub 8
 84+  8AA3 67               ld h,a
 85+  8AA4 7C           2 ld a,h
 86+  8AA5 FE 58            cp $58
 87+  8AA7 28 25            jr z,4F
 88+  8AA9 7A               ld a,d
 89+  8AAA AE               xor (hl)
 90+  8AAB 77               ld (hl),a
 91+  8AAC D1           	pop de
 92+  8AAD 23           	inc hl
 93+  8AAE 7B               ld a,e
 94+  8AAF AE               xor (hl)
 95+  8AB0 77           	ld (hl),a
 96+  8AB1 23           	inc hl
 97+  8AB2 7A               ld a,d
 98+  8AB3 AE               xor (hl)
 99+  8AB4 77           	ld (hl),a
100+  8AB5 2B           	dec hl
101+  8AB6 2B           	dec hl
102+  8AB7 24           	inc h
103+  8AB8 7C               ld a,h
104+  8AB9 E6 07            and 7
105+  8ABB 20 0A            jr nz,3F
106+  8ABD 7D               ld a,l
107+  8ABE C6 20            add a,$20
108+  8AC0 6F               ld l,a
109+  8AC1 38 04            jr c,3F
110+  8AC3 7C               ld a,h
111+  8AC4 D6 08            sub 8
112+  8AC6 67               ld h,a
113+  8AC7 7C           3 ld a,h
114+  8AC8 FE 58            cp $58
115+  8ACA 28 02            jr z,4F
116+  8ACC 10 B7            djnz 1B
117+  8ACE ED 7B 2C 85  4 ld sp,(Stack)
118+  8AD2 C9           	ret
119+  8AD3
120+  8AD3              ; ---------------------------------------------------
121+  8AD3
122+  8AD3 ED 73 2C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AD7 FD F9        	ld sp,iy
124+  8AD9 06 10            ld b,16
125+  8ADB D1           1 pop de
126+  8ADC 7A           	ld a,d
127+  8ADD AE           	xor (hl)
128+  8ADE 77           	ld (hl),a
129+  8ADF 24           	inc h
130+  8AE0 7C               ld a,h
131+  8AE1 E6 07            and 7
132+  8AE3 20 0C            jr nz,2F
133+  8AE5 7D               ld a,l
134+  8AE6 C6 20            add a,$20
135+  8AE8 6F               ld l,a
136+  8AE9 38 06            jr c,2F
137+  8AEB 7C               ld a,h
138+  8AEC D6 08            sub 8
139+  8AEE 67               ld h,a
140+  8AEF 18 00            jr 2F
141+  8AF1 7C           2 ld a,h
142+  8AF2 FE 58            cp $58
143+  8AF4 28 02            jr z,3F
144+  8AF6 10 E3            djnz 1B
145+  8AF8 ED 7B 2C 85  3 ld sp,(Stack)
146+  8AFC C9           	ret
147+  8AFD
148+  8AFD ED 73 2C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B01 FD F9        	ld sp,iy
150+  8B03 06 10            ld b,16
151+  8B05 D1           1 pop de
152+  8B06 7B           	ld a,e
153+  8B07 AE           	xor (hl)
154+  8B08 77           	ld (hl),a
155+  8B09 24           	inc h
156+  8B0A 7C               ld a,h
157+  8B0B E6 07            and 7
158+  8B0D 20 0C            jr nz,2F
159+  8B0F 7D               ld a,l
160+  8B10 C6 20            add a,$20
161+  8B12 6F               ld l,a
162+  8B13 38 06            jr c,2F
163+  8B15 7C               ld a,h
164+  8B16 D6 08            sub 8
165+  8B18 67               ld h,a
166+  8B19 18 00            jr 2F
167+  8B1B 7C           2 ld a,h
168+  8B1C FE 58            cp $58
169+  8B1E 28 02            jr z,3F
170+  8B20 10 E3            djnz 1B
171+  8B22 ED 7B 2C 85  3 ld sp,(Stack)
172+  8B26 C9           	ret
173+  8B27
174+  8B27              ; ---------------------------------------------------
175+  8B27
176+  8B27 ED 73 2C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B2B FD F9        	ld sp,iy
178+  8B2D 06 08            ld b,8
179+  8B2F D1           1 pop de
180+  8B30 7A           	ld a,d
181+  8B31 AE           	xor (hl)
182+  8B32 77           	ld (hl),a
183+  8B33 23           	inc hl
184+  8B34 D1           	pop de
185+  8B35 7B           	ld a,e
186+  8B36 AE           	xor (hl)
187+  8B37 77           	ld (hl),a
188+  8B38 2B           	dec hl
189+  8B39 24            	inc h
190+  8B3A 7C               ld a,h
191+  8B3B E6 07            and 7
192+  8B3D 20 0A            jr nz,2F
193+  8B3F 7D               ld a,l
194+  8B40 C6 20            add a,$20
195+  8B42 6F               ld l,a
196+  8B43 38 04            jr c,2F
197+  8B45 7C               ld a,h
198+  8B46 D6 08            sub 8
199+  8B48 67               ld h,a
200+  8B49 7C           2 ld a,h
201+  8B4A FE 58            cp $58
202+  8B4C 28 20            jr z,4F
203+  8B4E D1               pop de
204+  8B4F 7B           	ld a,e
205+  8B50 AE           	xor (hl)
206+  8B51 77           	ld (hl),a
207+  8B52 23           	inc hl
208+  8B53 7A           	ld a,d
209+  8B54 AE           	xor (hl)
210+  8B55 77           	ld (hl),a
211+  8B56 2B           	dec hl
212+  8B57 24           	inc h
213+  8B58 7C               ld a,h
214+  8B59 E6 07            and 7
215+  8B5B 20 0A            jr nz,3F
216+  8B5D 7D               ld a,l
217+  8B5E C6 20            add a,$20
218+  8B60 6F               ld l,a
219+  8B61 38 04            jr c,3F
220+  8B63 7C               ld a,h
221+  8B64 D6 08            sub 8
222+  8B66 67               ld h,a
223+  8B67 7C           3 ld a,h
224+  8B68 FE 58            cp $58
225+  8B6A 28 02            jr z,4F
226+  8B6C 10 C1            djnz 1B
227+  8B6E ED 7B 2C 85  4 ld sp,(Stack)
228+  8B72 C9           	ret
229+  8B73
230+  8B73 ED 73 2C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B77 FD F9        	ld sp,iy
232+  8B79 06 08            ld b,8
233+  8B7B D1           1 pop de
234+  8B7C D1           	pop de
235+  8B7D 7B           	ld a,e
236+  8B7E AE           	xor (hl)
237+  8B7F 77           	ld (hl),a
238+  8B80 24            	inc h
239+  8B81 7C               ld a,h
240+  8B82 E6 07            and 7
241+  8B84 20 0A            jr nz,2F
242+  8B86 7D               ld a,l
243+  8B87 C6 20            add a,$20
244+  8B89 6F               ld l,a
245+  8B8A 38 04            jr c,2F
246+  8B8C 7C               ld a,h
247+  8B8D D6 08            sub 8
248+  8B8F 67               ld h,a
249+  8B90 7C           2 ld a,h
250+  8B91 FE 58            cp $58
251+  8B93 28 1B            jr z,4F
252+  8B95 D1               pop de
253+  8B96 7A           	ld a,d
254+  8B97 AE           	xor (hl)
255+  8B98 77           	ld (hl),a
256+  8B99 24           	inc h
257+  8B9A 7C               ld a,h
258+  8B9B E6 07            and 7
259+  8B9D 20 0A            jr nz,3F
260+  8B9F 7D               ld a,l
261+  8BA0 C6 20            add a,$20
262+  8BA2 6F               ld l,a
263+  8BA3 38 04            jr c,3F
264+  8BA5 7C               ld a,h
265+  8BA6 D6 08            sub 8
266+  8BA8 67               ld h,a
267+  8BA9 7C           3 ld a,h
268+  8BAA FE 58            cp $58
269+  8BAC 28 02            jr z,4F
270+  8BAE 10 CB            djnz 1B
271+  8BB0 ED 7B 2C 85  4 ld sp,(Stack)
272+  8BB4 C9           	ret
273+  8BB5
274+  8BB5 ED 73 2C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8BB9 FD F9        	ld sp,iy
276+  8BBB 06 08            ld b,8
277+  8BBD D1           1 pop de
278+  8BBE 7B           	ld a,e
279+  8BBF AE           	xor (hl)
280+  8BC0 77           	ld (hl),a
281+  8BC1 23           	inc hl
282+  8BC2 7A           	ld a,d
283+  8BC3 AE           	xor (hl)
284+  8BC4 77           	ld (hl),a
285+  8BC5 2B           	dec hl
286+  8BC6 24             	inc h
287+  8BC7 7C               ld a,h
288+  8BC8 E6 07            and 7
289+  8BCA 20 0A            jr nz,2F
290+  8BCC 7D               ld a,l
291+  8BCD C6 20            add a,$20
292+  8BCF 6F               ld l,a
293+  8BD0 38 04            jr c,2F
294+  8BD2 7C               ld a,h
295+  8BD3 D6 08            sub 8
296+  8BD5 67               ld h,a
297+  8BD6 7C           2 ld a,h
298+  8BD7 FE 58            cp $58
299+  8BD9 28 21            jr z,4F
300+  8BDB D1               pop de
301+  8BDC 7A           	ld a,d
302+  8BDD AE           	xor (hl)
303+  8BDE 77           	ld (hl),a
304+  8BDF 23           	inc hl
305+  8BE0 D1               pop de
306+  8BE1 7B           	ld a,e
307+  8BE2 AE           	xor (hl)
308+  8BE3 77           	ld (hl),a
309+  8BE4 2B           	dec hl
310+  8BE5 24           	inc h
311+  8BE6 7C               ld a,h
312+  8BE7 E6 07            and 7
313+  8BE9 20 0A            jr nz,3F
314+  8BEB 7D               ld a,l
315+  8BEC C6 20            add a,$20
316+  8BEE 6F               ld l,a
317+  8BEF 38 04            jr c,3F
318+  8BF1 7C               ld a,h
319+  8BF2 D6 08            sub 8
320+  8BF4 67               ld h,a
321+  8BF5 7C           3 ld a,h
322+  8BF6 FE 58            cp $58
323+  8BF8 28 02            jr z,4F
324+  8BFA 10 C1            djnz 1B
325+  8BFC ED 7B 2C 85  4 ld sp,(Stack)
326+  8C00 C9           	ret
327+  8C01
328+  8C01 ED 73 2C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C05 FD F9        	ld sp,iy
330+  8C07 06 08            ld b,8
331+  8C09 D1           1 pop de
332+  8C0A 7B           	ld a,e
333+  8C0B AE           	xor (hl)
334+  8C0C 77           	ld (hl),a
335+  8C0D 24            	inc h
336+  8C0E 7C               ld a,h
337+  8C0F E6 07            and 7
338+  8C11 20 0A            jr nz,2F
339+  8C13 7D               ld a,l
340+  8C14 C6 20            add a,$20
341+  8C16 6F               ld l,a
342+  8C17 38 04            jr c,2F
343+  8C19 7C               ld a,h
344+  8C1A D6 08            sub 8
345+  8C1C 67               ld h,a
346+  8C1D 7C           2 ld a,h
347+  8C1E FE 58            cp $58
348+  8C20 28 1C            jr z,4F
349+  8C22 D1               pop de
350+  8C23 7A           	ld a,d
351+  8C24 AE           	xor (hl)
352+  8C25 77           	ld (hl),a
353+  8C26 24           	inc h
354+  8C27 7C               ld a,h
355+  8C28 E6 07            and 7
356+  8C2A 20 0A            jr nz,3F
357+  8C2C 7D               ld a,l
358+  8C2D C6 20            add a,$20
359+  8C2F 6F               ld l,a
360+  8C30 38 04            jr c,3F
361+  8C32 7C               ld a,h
362+  8C33 D6 08            sub 8
363+  8C35 67               ld h,a
364+  8C36 7C           3 ld a,h
365+  8C37 FE 58            cp $58
366+  8C39 28 03            jr z,4F
367+  8C3B D1               pop de
368+  8C3C 10 CB            djnz 1B
369+  8C3E ED 7B 2C 85  4 ld sp,(Stack)
370+  8C42 C9           	ret
371+  8C43
372+  8C43              ; ---------------------------------------------------
373+  8C43
# file closed: Rutinas_de_impresion_sprites.asm
596   8C43              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C43              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C43              ;
  3+  8C43              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C43              ;
  5+  8C43              ; *****************************************************************************************************************************************************************************************
  6+  8C43              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C43
  8+  8C43 7C           calcula_tercio ld a,h
  9+  8C44 E6 18        	and $18
 10+  8C46 CB 2F        	sra a
 11+  8C48 CB 2F        	sra a
 12+  8C4A CB 2F        	sra a
 13+  8C4C C9           	ret
 14+  8C4D
# file closed: calcula_tercio.asm
597   8C4D              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C4D              ; -----------------------------------------------------------------------------------------
  2+  8C4D              ;
  3+  8C4D              ;   04/11/22
  4+  8C4D              ;
  5+  8C4D              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C4D              ;
  7+  8C4D              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C4D              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C4D              ;
 10+  8C4D              ;   DESTRUYE: HL y A. !!!!!
 11+  8C4D
 12+  8C4D CD 43 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C50 26 58            ld h,$58
 14+  8C52 84               add h
 15+  8C53 67               ld h,a
 16+  8C54 C9               ret
# file closed: Calcula_direccion_atributos.asm
598   8C55              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C55              ; ********** **********
  2+  8C55              ;
  3+  8C55              ;   5/11/22
  4+  8C55              ;
  5+  8C55              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C55              ;
  7+  8C55              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C55              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C55              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C55              ;
 11+  8C55              ;   NO DESTROYERSSSS !!!!!
 12+  8C55
 13+  8C55 E5           Define_atributos push hl
 14+  8C56 C5           	push bc
 15+  8C57 D5           	push de
 16+  8C58
 17+  8C58 CD 4D 8C     	call Calcula_direccion_atributos
 18+  8C5B
 19+  8C5B D9               exx
 20+  8C5C E5               push hl
 21+  8C5D D9               exx
 22+  8C5E D1               pop de
 23+  8C5F
 24+  8C5F 42               ld b,d
 25+  8C60 7B               ld a,e 									; (Attr) en A.
 26+  8C61
 27+  8C61 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C62 E5            	push hl 								; Guardo dirección de attr.
 29+  8C63
 30+  8C63              ; -----
 31+  8C63
 32+  8C63 77           2 ld (hl),a
 33+  8C64 0D           	dec c 									; Decremento (Columnas).
 34+  8C65 28 03        	jr z,1F
 35+  8C67 23           	inc hl
 36+  8C68 18 F9        	jr 2B
 37+  8C6A
 38+  8C6A E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C6B C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C6C
 41+  8C6C 05           	dec b									; Decremento (Filas).
 42+  8C6D 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C6F
 44+  8C6F 11 20 00     	ld de,32
 45+  8C72 A7           	and a
 46+  8C73 ED 5A        	adc hl,de
 47+  8C75 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C77
 49+  8C77 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C78 C1           	pop bc
 51+  8C79 E1           	pop hl
 52+  8C7A
 53+  8C7A C9           	ret
 54+  8C7B
# file closed: Define_atributos.asm
599   8C7B              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C7B              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C7B              ;
  3+  8C7B              ;
  4+  8C7B              ;	CLS.
  5+  8C7B              ;
  6+  8C7B              ;	Limpia la pantalla y define sus atributos.
  7+  8C7B              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C7B              ;
  9+  8C7B              ;	COLORES: 0 ..... NEGRO
 10+  8C7B              ;    		 1 ..... AZUL
 11+  8C7B              ; 			 2 ..... ROJO
 12+  8C7B              ;			 3 ..... MAGENTA
 13+  8C7B              ; 			 4 ..... VERDE
 14+  8C7B              ; 			 5 ..... CIAN
 15+  8C7B              ;			 6 ..... AMARILLO
 16+  8C7B              ; 			 7 ..... BLANCO
 17+  8C7B              ;
 18+  8C7B              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C7B              ;
 20+  8C7B              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C7B
 22+  8C7B
 23+  8C7B 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C7E 11 01 40     	LD DE,$4001
 25+  8C81 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C84 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C86 ED B0        	LDIR
 28+  8C88 01 FF 02     	LD BC,767
 29+  8C8B 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C8C ED B0        	LDIR
 31+  8C8E C9           	ret
 32+  8C8F
# file closed: Cls.asm
600   8C8F              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C8F              ; ******************************************************************************************************************************************************************************************
  2+  8C8F              ;
  3+  8C8F              ;   22/01/23
  4+  8C8F              ;
  5+  8C8F              ;	Mov_down
  6+  8C8F              ;
  7+  8C8F              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C8F              ;
  9+  8C8F              ;
 10+  8C8F 21 17 85     Mov_down ld hl,Ctrl_0
 11+  8C92 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C94              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C94              ; 																	; _ en el caso de que no lo haya.
 14+  8C94 3A 04 85     	ld a,(Vel_down)
 15+  8C97 47           	ld b,a
 16+  8C98 2A F2 84         ld hl,(Posicion_actual)
 17+  8C9B CD 43 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C9E E6 02        	and 2
 19+  8CA0 28 0F        	jr z,1F
 20+  8CA2
 21+  8CA2              ; Nos encontramos en el último tercio de pantalla.
 22+  8CA2              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8CA2
 24+  8CA2 7C           	ld a,h
 25+  8CA3 FE 57        	cp $57
 26+  8CA5 20 0A        	jr nz,1F
 27+  8CA7 7D           	ld a,l
 28+  8CA8 C6 20        	add $20
 29+  8CAA 30 05        	jr nc,1F
 30+  8CAC              ; ------------------------------
 31+  8CAC CD 3D 8F     	call Reaparece_arriba
 32+  8CAF              ;	call Reinicio
 33+  8CAF              ; ------------------------------
 34+  8CAF 18 08        	jr 3F
 35+  8CB1 CD EA 89     1 call NextScan
 36+  8CB4 22 F2 84     	ld (Posicion_actual),hl
 37+  8CB7 10 E2            djnz 2B
 38+  8CB9 CD 53 8F     3 call Genera_coordenadas
 39+  8CBC C9           	ret
 40+  8CBD
 41+  8CBD
 42+  8CBD              ; ******************************************************************************************************************************************************************************************
 43+  8CBD              ;
 44+  8CBD              ;   22/01/23
 45+  8CBD              ;
 46+  8CBD              ;	Mov_up
 47+  8CBD              ;
 48+  8CBD              ; 	Mueve el Sprite hacia arriba.
 49+  8CBD              ;
 50+  8CBD              ;
 51+  8CBD 21 17 85     Mov_up ld hl,Ctrl_0
 52+  8CC0 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8CC2              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8CC2              ; 																		; _ en el caso de que no lo haya.
 55+  8CC2 3A 03 85     	ld a,(Vel_up)
 56+  8CC5 47           	ld b,a
 57+  8CC6 2A F2 84     	ld hl,(Posicion_actual)
 58+  8CC9 CD 43 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CCC A7           	and a
 60+  8CCD 20 10        	jr nz,1F
 61+  8CCF
 62+  8CCF              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CCF              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CCF
 65+  8CCF 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CD0 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CD2 20 0B            jr nz,1F
 68+  8CD4 7D               ld a,l
 69+  8CD5 D6 20            sub $20
 70+  8CD7 30 06            jr nc,1F
 71+  8CD9 25               dec h
 72+  8CDA
 73+  8CDA              ; -----------------------------
 74+  8CDA CD 2D 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CDD              ;	call Reinicio
 76+  8CDD              ; -----------------------------
 77+  8CDD
 78+  8CDD 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CDF CD F9 89     1 call PreviousScan
 80+  8CE2 22 F2 84     	ld (Posicion_actual),hl
 81+  8CE5 10 E2            djnz 3B
 82+  8CE7 CD 53 8F     2 call Genera_coordenadas
 83+  8CEA C9           	ret
 84+  8CEB
 85+  8CEB              ; ******************************************************************************************************************************************************************************************
 86+  8CEB              ;
 87+  8CEB              ;	19/10/22
 88+  8CEB              ;
 89+  8CEB              ;	Mov_right.
 90+  8CEB              ;
 91+  8CEB              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8CEB              ;
 93+  8CEB
 94+  8CEB 21 17 85     Mov_right ld hl,Ctrl_0
 95+  8CEE CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8CF0              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8CF0              ; 																	; _ en el caso de que no lo haya.
 98+  8CF0 3A F6 84     	ld a,(CTRL_DESPLZ)
 99+  8CF3 A7           	and a
100+  8CF4 28 0B        	jr z,9F
101+  8CF6
102+  8CF6 3A 17 85     	ld a,(Ctrl_0)
103+  8CF9 CB 7F        	bit 7,a
104+  8CFB 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8CFD 21 F6 84     	ld hl,CTRL_DESPLZ
106+  8D00 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D01
108+  8D01 3A 17 85     9 ld a,(Ctrl_0)
109+  8D04 CB 77        	bit 6,a
110+  8D06 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D08
112+  8D08 CD EC 8E     	call Stop_Amadeus_right
113+  8D0B C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D0C 18 4D        	jr 8F
115+  8D0E
116+  8D0E 3A F7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D11 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D13 20 46        	jr nz,8F
119+  8D15
120+  8D15 3A F6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D18 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D19 28 40        	jr z,8F
123+  8D1B
124+  8D1B              ; ---------- ---------- ----------
125+  8D1B              ;
126+  8D1B              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D1B
128+  8D1B 3A 02 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D1E FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D20 28 11        	jr z,1F
131+  8D22 38 06        	jr c,6F
132+  8D24 FE 04        	cp 4
133+  8D26 28 14        	jr z,7F
134+  8D28 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D2A
136+  8D2A              ; ---------- ---------- ----------
137+  8D2A              ;
138+  8D2A              ; Perfiles de velocidad
139+  8D2A              ;
140+  8D2A 3A F6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D2D FE FE        	cp $fe
142+  8D2F 20 2A        	jr nz,8F
143+  8D31 18 10        	jr 3F
144+  8D33 3A F6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D36 FE FD        	cp $fd
146+  8D38 20 21        	jr nz,8F
147+  8D3A 18 07        	jr 3F
148+  8D3C 3A F6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D3F FE FB        	cp $fb
150+  8D41 20 18        	jr nz,8F
151+  8D43
152+  8D43              ; ---------- ---------- ----------
153+  8D43
154+  8D43 CD 1B 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D46              ;	call Reinicio
156+  8D46
157+  8D46              ; ---------- ---------- ----------
158+  8D46              ;
159+  8D46              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D46
161+  8D46 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D48 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D49 CD 62 8D     	call DESPLZ_DER
164+  8D4C C1           	pop bc
165+  8D4D 10 F9        	djnz 5B
166+  8D4F 2A F2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D52 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D53 22 F2 84     	ld (Posicion_actual),hl
169+  8D56 CD 53 8F     	call Genera_coordenadas
170+  8D59 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D5B
172+  8D5B              ; ---------- ---------- ----------
173+  8D5B
174+  8D5B 2A F2 84     8 ld hl,(Posicion_actual)
175+  8D5E CD 62 8D     	call DESPLZ_DER
176+  8D61 C9           2 ret
177+  8D62
178+  8D62              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D62              ;
180+  8D62              ;	22/9/22
181+  8D62              ;
182+  8D62
183+  8D62 CD 71 8D     DESPLZ_DER call Desplaza_derecha
184+  8D65 CD 86 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D68 CD AF 8D         call Ciclo_completo
186+  8D6B 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D6E CB FE        	set 7,(hl)
188+  8D70 C9           	ret
189+  8D71
190+  8D71              ; ******************************************************************************************************************************************************************************************
191+  8D71              ;	14/9/22
192+  8D71              ;
193+  8D71
194+  8D71 3A 02 85     Desplaza_derecha ld a,(Vel_right)
195+  8D74 47           	ld b,a
196+  8D75 2A FC 84     	ld hl,(Puntero_DESPLZ)
197+  8D78 23           1 inc hl
198+  8D79 23           	inc hl
199+  8D7A 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D7C 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D7F CD 49 86     	call Extrae_address
202+  8D82 22 F4 84     	ld (Puntero_objeto),hl
203+  8D85 C9           	ret
204+  8D86
205+  8D86              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8D86              ;
207+  8D86              ;	24/7/22
208+  8D86              ;
209+  8D86              ;	modifica_parametros_1er_DESPLZ_2
210+  8D86              ;
211+  8D86              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8D86              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8D86              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8D86
215+  8D86 3A F6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8D89 A7           	and a
217+  8D8A 20 1F        	jr nz,1F
218+  8D8C D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8D8E 32 F6 84         ld (CTRL_DESPLZ),a
220+  8D91 21 F1 84     	ld hl,Columns
221+  8D94 34           	inc (hl)
222+  8D95 3A 00 85     	ld a,(Cuad_objeto)
223+  8D98 E6 01        	and 1
224+  8D9A 28 0F        	jr z,1F
225+  8D9C 2A F2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8D9F 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8DA0 22 F2 84     	ld (Posicion_actual),hl
228+  8DA3 CD 53 8F     	call Genera_coordenadas
229+  8DA6 CD F8 8E     	call Inc_CTRL_DESPLZ
230+  8DA9 18 03        	jr 2F
231+  8DAB CD F8 8E     1 call Inc_CTRL_DESPLZ
232+  8DAE C9           2 ret
233+  8DAF
234+  8DAF              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8DAF              ;
236+  8DAF              ;	24/7/22
237+  8DAF              ;
238+  8DAF              ;	Ciclo_completo.
239+  8DAF              ;
240+  8DAF              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8DAF              ;
242+  8DAF              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8DAF              ; 	Decrementamos (Columns).
244+  8DAF              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8DAF              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8DAF
247+  8DAF
248+  8DAF 3A F6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8DB2 FE FF        	cp $ff
250+  8DB4 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8DB6 18 25        	jr 3f
252+  8DB8 21 F1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8DBB 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8DBC AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8DBD 32 F6 84     	ld (CTRL_DESPLZ),a
256+  8DC0 3A 00 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8DC3 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DC5 20 0A        	jr nz,2F
259+  8DC7 2A F2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DCA 23           	inc hl
261+  8DCB 22 F2 84     	ld (Posicion_actual),hl
262+  8DCE CD 53 8F     	call Genera_coordenadas
263+  8DD1
264+  8DD1              ; Inicia el puntero de Sprite.
265+  8DD1
266+  8DD1 2A FA 84     2 ld hl,(Indice_Sprite)
267+  8DD4 22 FC 84     	ld (Puntero_DESPLZ),hl
268+  8DD7 CD 49 86     	call Extrae_address
269+  8DDA 22 F4 84     	ld (Puntero_objeto),hl
270+  8DDD
271+  8DDD C9           3 ret
272+  8DDE
273+  8DDE              ; ******************************************************************************************************************************************************************************************
274+  8DDE              ;
275+  8DDE              ;	21/01/23
276+  8DDE              ;
277+  8DDE              ;	Mov_left.
278+  8DDE              ;
279+  8DDE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DDE              ;
281+  8DDE              Mov_left
282+  8DDE
283+  8DDE 21 17 85     	ld hl,Ctrl_0
284+  8DE1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DE3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DE3              ; 																	; _ en el caso de que no lo haya.
287+  8DE3 3A F6 84     	ld a,(CTRL_DESPLZ)
288+  8DE6 A7           	and a
289+  8DE7 20 19        	jr nz,10F
290+  8DE9
291+  8DE9 2A F4 84     	ld hl,(Puntero_objeto)
292+  8DEC 22 FC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8DEF
294+  8DEF 3A 17 85     	ld a,(Ctrl_0)
295+  8DF2 CB 77        	bit 6,a
296+  8DF4 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8DF6
298+  8DF6 CD F2 8E     	call Stop_Amadeus_left
299+  8DF9 20 62        	jr nz,8F
300+  8DFB
301+  8DFB 2A FA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8DFE 22 FC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8E01 C9           	ret
304+  8E02
305+  8E02 3A 17 85     10 ld a,(Ctrl_0)
306+  8E05 CB 7F        	bit 7,a
307+  8E07 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8E09 21 F6 84     	ld hl,CTRL_DESPLZ
309+  8E0C 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8E0D
311+  8E0D 3A F7 84     11 ld a,(Coordenada_X)
312+  8E10 A7           	and a
313+  8E11 20 4A        	jr nz,8F
314+  8E13 3A F6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8E16 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8E17 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8E19
318+  8E19              ; ---------- ---------- ----------
319+  8E19
320+  8E19 3A 01 85     	ld a,(Vel_left)
321+  8E1C FE 02        	cp 2
322+  8E1E 28 0F        	jr z,1F
323+  8E20 38 04        	jr c,6F
324+  8E22 FE 04        	cp 4
325+  8E24 28 12        	jr z,7F
326+  8E26
327+  8E26              ; ---------- ---------- ----------
328+  8E26
329+  8E26 3A F6 84     6 ld a,(CTRL_DESPLZ)
330+  8E29 FE F9        	cp $f9
331+  8E2B 20 30        	jr nz,8F
332+  8E2D 18 10        	jr 4F
333+  8E2F 3A F6 84     1 ld a,(CTRL_DESPLZ)
334+  8E32 FE FA        	cp $fa
335+  8E34 20 27        	jr nz,8F
336+  8E36 18 07        	jr 4F
337+  8E38 3A F6 84     7 ld a,(CTRL_DESPLZ)
338+  8E3B FE FC        	cp $fc
339+  8E3D 20 1E        	jr nz,8F
340+  8E3F
341+  8E3F              ; ---------- ---------- ----------
342+  8E3F
343+  8E3F              4
344+  8E3F CD 09 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E42              ;	call Reinicio
346+  8E42
347+  8E42              ; ---------- ---------- ----------
348+  8E42
349+  8E42 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E44 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E45 2A F4 84     	ld hl,(Puntero_objeto)
352+  8E48 22 FC 84     	ld (Puntero_DESPLZ),hl
353+  8E4B CD 64 8E     	call DESPLZ_IZQ
354+  8E4E C1           	pop bc
355+  8E4F 10 F3        	djnz 5B
356+  8E51 2A F2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E54 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E55 22 F2 84     	ld (Posicion_actual),hl
359+  8E58 CD 53 8F     	call Genera_coordenadas
360+  8E5B 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E5D
362+  8E5D              ; ---------- ---------- ----------
363+  8E5D
364+  8E5D 2A F2 84     8 ld hl,(Posicion_actual)
365+  8E60 CD 64 8E     	call DESPLZ_IZQ
366+  8E63 C9           2 ret
367+  8E64
368+  8E64              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E64              ;
370+  8E64              ;	22/9/22
371+  8E64
372+  8E64              DESPLZ_IZQ
373+  8E64
374+  8E64 CD 73 8E     	call Desplaza_izquierda
375+  8E67 CD 88 8E         call modifica_parametros_1er_DESPLZ
376+  8E6A CD AC 8E     	call Ciclo_completo_2
377+  8E6D 21 17 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E70 CB BE        	res 7,(hl)
379+  8E72 C9           	ret
380+  8E73
381+  8E73 3A 01 85     Desplaza_izquierda ld a,(Vel_left)
382+  8E76 47           	ld b,a
383+  8E77 2A FC 84     	ld hl,(Puntero_DESPLZ)
384+  8E7A 2B           1 dec hl
385+  8E7B 2B           	dec hl
386+  8E7C 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E7E 22 FC 84     	ld (Puntero_DESPLZ),hl
388+  8E81 CD 49 86     	call Extrae_address
389+  8E84 22 F4 84     	ld (Puntero_objeto),hl
390+  8E87 C9           	ret
391+  8E88
392+  8E88              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E88              ;
394+  8E88              ;	modifica_parametros_1er_DESPLZ
395+  8E88              ;
396+  8E88              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8E88              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8E88              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8E88
400+  8E88 3A F6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8E8B A7           	and a
402+  8E8C 20 1A        	jr nz,1F
403+  8E8E 21 F1 84     	ld hl,Columns
404+  8E91 34           	inc (hl)
405+  8E92 3A 00 85     	ld a,(Cuad_objeto)
406+  8E95 E6 01        	and 1
407+  8E97 20 0F        	jr nz,1F
408+  8E99 2A F2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8E9C 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8E9D 22 F2 84     	ld (Posicion_actual),hl
411+  8EA0 CD 53 8F     	call Genera_coordenadas
412+  8EA3 CD DB 8E     	call Dec_CTRL_DESPLZ
413+  8EA6 18 03        	jr 2F
414+  8EA8 CD DB 8E     1 call Dec_CTRL_DESPLZ
415+  8EAB C9           2 ret
416+  8EAC
417+  8EAC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8EAC              ;
419+  8EAC 3A F6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8EAF FE F8        	cp $f8
421+  8EB1 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8EB3 18 25        	jr 3f
423+  8EB5 21 F1 84     1 ld hl,Columns
424+  8EB8 35           	dec (hl)
425+  8EB9 AF           	xor a
426+  8EBA 32 F6 84     	ld (CTRL_DESPLZ),a
427+  8EBD 3A 00 85     	ld a,(Cuad_objeto)
428+  8EC0 E6 01        	and 1
429+  8EC2 28 0A        	jr z,2F
430+  8EC4 2A F2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EC7 2B           	dec hl
432+  8EC8 22 F2 84     	ld (Posicion_actual),hl
433+  8ECB CD 53 8F     	call Genera_coordenadas
434+  8ECE
435+  8ECE              ; Inicia el puntero de Sprite.
436+  8ECE
437+  8ECE 2A FA 84     2 ld hl,(Indice_Sprite)
438+  8ED1 22 FC 84     	ld (Puntero_DESPLZ),hl
439+  8ED4 CD 49 86     	call Extrae_address
440+  8ED7 22 F4 84     	ld (Puntero_objeto),hl
441+  8EDA C9           3 ret
442+  8EDB
443+  8EDB              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8EDB              ;
445+  8EDB              ;	Dec_CTRL_DESPLZ
446+  8EDB              ;
447+  8EDB              ;	Subrutina de [modifica_punteros].
448+  8EDB              ;
449+  8EDB              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8EDB
451+  8EDB 21 F6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8EDE 3A 01 85     	ld a,(Vel_left)
453+  8EE1 A7           	and a
454+  8EE2 28 06        	jr z,1F
455+  8EE4 47           	ld b,a
456+  8EE5 35           3 dec (hl)
457+  8EE6 10 FD        	djnz 3B
458+  8EE8 18 01        	jr 2F
459+  8EEA 35           1 dec (hl)
460+  8EEB C9           2 ret
461+  8EEC
462+  8EEC              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8EEC              ;
464+  8EEC              ;	19/10/22
465+  8EEC              ;
466+  8EEC              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8EEC              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8EEC
469+  8EEC 3A F7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8EEF FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8EF1 C9           	ret
472+  8EF2
473+  8EF2              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8EF2              ;
475+  8EF2              ;	19/10/22
476+  8EF2              ;
477+  8EF2              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8EF2              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8EF2
480+  8EF2 3A F7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8EF5 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8EF7 C9           	ret
483+  8EF8
484+  8EF8              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8EF8              ;
486+  8EF8              ;	24/7/22
487+  8EF8              ;
488+  8EF8              ;	Inc_CTRL_DESPLZ
489+  8EF8              ;
490+  8EF8              ;	Subrutina de [modifica_punteros].
491+  8EF8              ;
492+  8EF8              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8EF8
494+  8EF8 21 F6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8EFB 3A 02 85     	ld a,(Vel_right)
496+  8EFE A7           	and a
497+  8EFF 28 06        	jr z,1F
498+  8F01 47           	ld b,a
499+  8F02 34           3 inc (hl)
500+  8F03 10 FD        	djnz 3B
501+  8F05 18 01        	jr 2F
502+  8F07 34           1 inc (hl)
503+  8F08 C9           2 ret
504+  8F09
505+  8F09              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8F09
507+  8F09 2A F2 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8F0C 01 1F 00     	ld bc,31
509+  8F0F A7           	and a
510+  8F10 ED 4A        	adc hl,bc
511+  8F12 22 F2 84     	ld (Posicion_actual),hl
512+  8F15 21 17 85     	ld hl,Ctrl_0														; $xxx1
513+  8F18 CB C6        	set 0,(hl)
514+  8F1A C9           	ret
515+  8F1B
516+  8F1B              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8F1B
518+  8F1B 2A F2 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8F1E 01 1F 00     	ld bc,31
520+  8F21 A7           	and a
521+  8F22 ED 42        	sbc hl,bc
522+  8F24 22 F2 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F27 21 17 85     	ld hl,Ctrl_0
524+  8F2A CB CE        	set 1,(hl)
525+  8F2C C9           	ret
526+  8F2D
527+  8F2D              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F2D
529+  8F2D 24           Reaparece_abajo inc h
530+  8F2E 01 E0 17     	ld bc,$17e0
531+  8F31 A7           	and a
532+  8F32 ED 4A        	adc hl,bc
533+  8F34 22 F2 84     	ld (Posicion_actual),hl
534+  8F37 21 17 85     	ld hl,Ctrl_0
535+  8F3A CB D6        	set 2,(hl)
536+  8F3C C9           	ret
537+  8F3D
538+  8F3D              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F3D
540+  8F3D 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F40 A7           	and a
542+  8F41 ED 42        	sbc hl,bc
543+  8F43 22 F2 84     	ld (Posicion_actual),hl
544+  8F46 21 17 85     	ld hl,Ctrl_0
545+  8F49 CB DE        	set 3,(hl)
546+  8F4B C9           	ret
547+  8F4C
548+  8F4C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F4C
550+  8F4C 2A FE 84     Reinicio ld hl,(Posicion_inicio)
551+  8F4F 22 F2 84     	ld (Posicion_actual),hl
552+  8F52 C9           	ret
# file closed: Direcciones.asm
601   8F53              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F53              ;	12/12/22
  2+  8F53              ;
  3+  8F53              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F53              ;	Fila superior "0", Columna izquierda "0".
  5+  8F53              ;
  6+  8F53              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F53              ;
  8+  8F53              ;	Modifica: A
  9+  8F53
 10+  8F53 C5           Genera_coordenadas push bc
 11+  8F54 E5           	push hl
 12+  8F55 2A F2 84     	ld hl,(Posicion_actual)
 13+  8F58 7D           	ld a,l
 14+  8F59 E6 1F        	and $1f
 15+  8F5B 32 F7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F5E CD 43 8C     	call calcula_tercio
 17+  8F61 47           	ld b,a
 18+  8F62 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F63 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F65 7D           	ld a,l
 21+  8F66 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F68 28 05        	jr z,2F
 23+  8F6A 0C           1 inc c
 24+  8F6B D6 20        	sub 32
 25+  8F6D 20 FB        	jr nz,1B
 26+  8F6F 0C           2 inc c
 27+  8F70 04           	inc b
 28+  8F71 05           	dec b
 29+  8F72 28 04        	jr z,3F
 30+  8F74 3E E0        	ld a,$e0
 31+  8F76 10 F2        	djnz 1B
 32+  8F78 79           3 ld a,c
 33+  8F79 3D           	dec a
 34+  8F7A 32 F8 84     	ld (Coordenada_y),a
 35+  8F7D E1           	pop hl
 36+  8F7E C1           	pop bc
 37+  8F7F C9           	ret
# file closed: Genera_coordenadas.asm
602   8F80              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F80
  2+  8F80
  3+  8F80              ;   11/8/22
  4+  8F80              ;
  5+  8F80              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F80              ;
  7+  8F80              ;   Mov_obj.asm
  8+  8F80              ;
  9+  8F80              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F80              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F80              ;
 12+  8F80              ;   Codificación:
 13+  8F80              ;
 14+  8F80              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F80
 16+  8F80 02 10 00     Izquierda db 2,%00010000,0
 17+  8F83 02 20 00     Derecha db 2,%00100000,0
 18+  8F86 02 80 00     Abajo db 2,%10000000,0
 19+  8F89 02 40 00     Arriba db 2,%01000000,0
 20+  8F8C
 21+  8F8C 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8F90 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8F94 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8F98 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8F9C 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8FA0 60 42 60 40
 25+  8FA4 63
 26+  8FA5 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FA9 22 A3 80 A0
 27+  8FAD 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8FB1 84 A0 83 A0
 28+  8FB5 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8FB9 80 A3 22 A0
 29+  8FBD 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8FC1 40 60 42 60
 30+  8FC5 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FC9
 32+  8FC9 80 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FCB 83 8F        Indice_mov_Derecha defw Derecha
 34+  8FCD 86 8F        Indice_mov_Abajo defw Abajo
 35+  8FCF 89 8F        Indice_mov_Arriba defw Arriba
 36+  8FD1 90 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  8FD3 94 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  8FD5 8C 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  8FD7 9C 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 40+  8FD9
 41+  8FD9 3A 1D 85     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 42+  8FDC A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 43+  8FDD 28 02            jr z,1F
 44+  8FDF 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 45+  8FE1
 46+  8FE1 3A 1E 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  8FE4 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  8FE6 32 1E 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  8FE9              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  8FE9 2A 1B 85         ld hl,(Puntero_mov)
 51+  8FEC 7E               ld a,(hl)
 52+  8FED 32 1D 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  8FF0 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  8FF1 22 1B 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  8FF4
 56+  8FF4 3A 1F 85     Decoder ld a,(Repetimos_db)
 57+  8FF7 A7               and a
 58+  8FF8 20 0C            jr nz,12F
 59+  8FFA 2A 1B 85         ld hl,(Puntero_mov)
 60+  8FFD 7E               ld a,(hl)
 61+  8FFE A7               and a
 62+  8FFF 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  9001
 64+  9001 E6 0F            and $0f
 65+  9003 32 1F 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 66+  9006              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 67+  9006 2A 1B 85     12 ld hl,(Puntero_mov)
 68+  9009 CB 7E            bit 7,(hl)
 69+  900B 28 03            jr z,2F
 70+  900D CD 8F 8C         call Mov_down
 71+  9010 2A 1B 85     2 ld hl, (Puntero_mov)
 72+  9013 CB 76            bit 6,(hl)
 73+  9015 28 03            jr z,3F
 74+  9017 CD BD 8C         call Mov_up
 75+  901A 2A 1B 85     3 ld hl, (Puntero_mov)
 76+  901D CB 6E            bit 5,(hl)
 77+  901F 28 03            jr z,4F
 78+  9021 CD EB 8C         call Mov_right
 79+  9024 2A 1B 85     4 ld hl, (Puntero_mov)
 80+  9027 CB 66            bit 4,(hl)
 81+  9029 28 03            jr z,5F
 82+  902B CD DE 8D         call Mov_left
 83+  902E
 84+  902E              ; ---------- --------- --------- ---------- ----------
 85+  902E
 86+  902E 3A 1F 85     5 ld a,(Repetimos_db)
 87+  9031 A7               and a
 88+  9032 28 07            jr z,6F
 89+  9034 3D               dec a
 90+  9035 32 1F 85         ld (Repetimos_db),a
 91+  9038 28 01            jr z,6f
 92+  903A C9           11 ret
 93+  903B 21 1D 85     6 ld hl,Contador_db_mov
 94+  903E 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 95+  903F 2A 1B 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 96+  9042 23               inc hl
 97+  9043 22 1B 85         ld (Puntero_mov),hl
 98+  9046 18 F2            jr 11B
 99+  9048 2A 19 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
100+  904B 3A 1E 85         ld a,(Incrementa_puntero)
101+  904E 47               ld b,a
102+  904F 23           8 inc hl
103+  9050 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
104+  9052 5E               ld e,(hl)
105+  9053 23               inc hl
106+  9054 56               ld d,(hl)
107+  9055 EB               ex de,hl
108+  9056 22 1B 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
109+  9059 18 DF            jr 11B
110+  905B
111+  905B              ; ---------- --------- --------- ---------- ----------
112+  905B              ;
113+  905B              ;   11/8/22
114+  905B              ;
115+  905B              ;   Prepara_Puntero_mov
116+  905B
117+  905B E5           Prepara_Puntero_mov push hl
118+  905C D5               push de
119+  905D 2A 19 85         ld hl,(Puntero_indice_mov)
120+  9060 5E               ld e,(hl)
121+  9061 23               inc hl
122+  9062 56               ld d,(hl)
123+  9063 EB               ex de,hl
124+  9064 22 1B 85         ld (Puntero_mov),hl
125+  9067 D1               pop de
126+  9068 E1               pop hl
127+  9069 C9               ret
128+  906A
129+  906A              ; ---------- --------- --------- ---------- ----------
130+  906A              ;
131+  906A              ;   11/8/22
132+  906A              ;
133+  906A              ;   Reinicia_el_movimiento
134+  906A
135+  906A CD 5B 90     Reinicia_el_movimiento call Prepara_Puntero_mov
136+  906D AF               xor a
137+  906E 32 1D 85         ld (Contador_db_mov),a
138+  9071 32 1E 85         ld (Incrementa_puntero),a
139+  9074 C3 D9 8F         jp Movimiento
140+  9077
141+  9077              ; ---------- --------- --------- ---------- ----------
142+  9077
143+  9077
144+  9077
145+  9077
146+  9077
147+  9077
148+  9077
149+  9077
150+  9077
151+  9077
152+  9077
153+  9077
154+  9077
155+  9077
156+  9077
157+  9077
158+  9077
159+  9077
# file closed: Patrones_de_mov.asm
603   9077              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9077              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9077              ;
  3+  9077              ;	3/1/23
  4+  9077              ;
  5+  9077              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9077
  7+  9077              ;	ADC HL,SP	LD (addr),SP
  8+  9077              ;	ADD HL,SP	LD SP,(addr)
  9+  9077              ;	ADD IX,SP	LD SP,nn
 10+  9077              ; 	ADD IY,SP	LD SP,HL
 11+  9077              ;				LD SP,IX
 12+  9077              ;	DEC SP		LD SP,IY
 13+  9077
 14+  9077              ;	EX (SP),HL
 15+  9077              ;	EX (SP),IX
 16+  9077              ;	EX (SP),IY
 17+  9077
 18+  9077              ;	INC SP
 19+  9077
 20+  9077
 21+  9077                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 2C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 30 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 30 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 2C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
604   7FC0
605   7FC0              	SAVESNA "Pruebas.sna", START
606   7FC0
607   7FC0
608   7FC0
# file closed: Banco_de_pruebas.asm
