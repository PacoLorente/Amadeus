# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 1D 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0 04 84        Indice_de_disparos defw Disparo_1
  7+  83F2 0C 84        	defw Disparo_2
  8+  83F4 14 84        	defw Disparo_3
  9+  83F6 1C 84        	defw Disparo_4
 10+  83F8 24 84        	defw Disparo_5
 11+  83FA 2C 84        	defw Disparo_6
 12+  83FC 34 84        	defw Disparo_7
 13+  83FE 3C 84        	defw Disparo_8
 14+  8400 44 84        	defw Disparo_9
 15+  8402 4C 84        	defw Disparo_10
 16+  8404
 17+  8404 00 00        Disparo_1 db 0,0									; Impacto / Dirección.
 18+  8406 00 00        	defw 0											; Puntero de_impresión.
 19+  8408 00 00        	defw 0											; Puntero objeto.
 20+  840A 00 00        	defw 0											; Rutina de impresión.
 21+  840C
 22+  840C 00 00        Disparo_2 db 0,0									; Impacto / Dirección.
 23+  840E 00 00        	defw 0											; Puntero de_impresión.
 24+  8410 00 00        	defw 0											; Puntero objeto.
 25+  8412 00 00        	defw 0											; Rutina de impresión.
 26+  8414
 27+  8414 00 00        Disparo_3 db 0,0									; Impacto / Dirección.
 28+  8416 00 00        	defw 0											; Puntero de_impresión.
 29+  8418 00 00        	defw 0											; Puntero objeto.
 30+  841A 00 00        	defw 0											; Rutina de impresión.
 31+  841C
 32+  841C 00 00        Disparo_4 db 0,0									; Impacto / Dirección.
 33+  841E 00 00        	defw 0											; Puntero de_impresión.
 34+  8420 00 00        	defw 0											; Puntero objeto.
 35+  8422 00 00        	defw 0											; Rutina de impresión.
 36+  8424
 37+  8424 00 00        Disparo_5 db 0,0									; Impacto / Dirección.
 38+  8426 00 00        	defw 0											; Puntero de_impresión.
 39+  8428 00 00        	defw 0											; Puntero objeto.
 40+  842A 00 00        	defw 0											; Rutina de impresión.
 41+  842C
 42+  842C 00 00        Disparo_6 db 0,0									; Impacto / Dirección.
 43+  842E 00 00        	defw 0											; Puntero de_impresión.
 44+  8430 00 00        	defw 0											; Puntero objeto.
 45+  8432 00 00        	defw 0											; Rutina de impresión.
 46+  8434
 47+  8434 00 00        Disparo_7 db 0,0									; Impacto / Dirección.
 48+  8436 00 00        	defw 0											; Puntero de_impresión.
 49+  8438 00 00        	defw 0											; Puntero objeto.
 50+  843A 00 00        	defw 0											; Rutina de impresión.
 51+  843C
 52+  843C 00 00        Disparo_8 db 0,0									; Impacto / Dirección.
 53+  843E 00 00        	defw 0											; Puntero de_impresión.
 54+  8440 00 00        	defw 0											; Puntero objeto.
 55+  8442 00 00        	defw 0											; Rutina de impresión.
 56+  8444
 57+  8444 00 00        Disparo_9 db 0,0									; Impacto / Dirección.
 58+  8446 00 00        	defw 0											; Puntero de_impresión.
 59+  8448 00 00        	defw 0											; Puntero objeto.
 60+  844A 00 00        	defw 0											; Rutina de impresión.
 61+  844C
 62+  844C 00 00        Disparo_10 db 0,0									; Impacto / Dirección.
 63+  844E 00 00        	defw 0											; Puntero de_impresión.
 64+  8450 00 00        	defw 0											; Puntero objeto.
 65+  8452 00 00        	defw 0											; Rutina de impresión.
 66+  8454
 67+  8454              ; -------------------------------------------------------------------------------------
 68+  8454
 69+  8454              Indice_de_entidades									; 58 Bytes por entidad.
 70+  8454
 71+  8454 9A 84        	defw Entidad_1
 72+  8456 D4 84        	defw Entidad_2
 73+  8458 0E 85        	defw Entidad_3
 74+  845A 48 85        	defw Entidad_4
 75+  845C              ;	...
 76+  845C              ;	...
 77+  845C              ;	+ entidades ...
 78+  845C
 79+  845C 00 00        	defw 0
 80+  845E 00 00        	defw 0
 81+  8460
 82+  8460              ; ---------- ---------- ---------- ---------- ----------
 83+  8460
 84+  8460 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 85+  8462 00 00        	defw 0		 									; (Posicion_actual).
 86+  8464 00 00        	defw 0	 										; (Puntero_objeto).
 87+  8466 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 88+  8469
 89+  8469 05           	db %00000101									; (Attr).
 90+  846A
 91+  846A 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 92+  846C 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 93+  846E 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 94+  8470 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 95+  8472
 96+  8472 D0 50        	defw $50d0										; (Posicion_inicio).
 97+  8474 04           	db 4 											; (Cuad_objeto).
 98+  8475
 99+  8475 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
100+  8479
101+  8479 00 00        	db 0,0											; Variables_de_borrado
102+  847B 00 00        	defw 0											;	" " " " " " "
103+  847D 00 00        	defw 0											;	" " " " " " "
104+  847F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
105+  8483
106+  8483 00 00        	db 0,0											; Variables_de_pintado
107+  8485 00 00        	defw 0											;	" " " " " " "
108+  8487 00 00        	defw 0											;	" " " " " " "
109+  8489 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
110+  848D
111+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
112+  848F
113+  848F 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
114+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
115+  8496
116+  8496 00           	db 0 											; (Columnas).
117+  8497 00 00        	defw 0											; (Limite_horizontal).
118+  8499 00           	db 0											; (Limite_vertical).
119+  849A
120+  849A              ; ---------- ---------- ---------- ---------- ----------
121+  849A
122+  849A 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
123+  849C 00 00        	defw 0											; (Posicion_actual).
124+  849E 00 00        	defw 0 											; (Puntero_objeto).
125+  84A0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
126+  84A3
127+  84A3 00           	db %00000000 									; (Attr).
128+  84A4
129+  84A4 00 00        	defw 0											; (Indice_Sprite_der).
130+  84A6 00 00        	defw 0											; (Indice_Sprite_izq).
131+  84A8 00 00        	defw 0											; (Puntero_DESPLZ_der).
132+  84AA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
133+  84AC
134+  84AC 00 00        	defw 0											; (Posicion_inicio).
135+  84AE 00           	db 0											; (Cuad_objeto).
136+  84AF
137+  84AF 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
138+  84B3
139+  84B3 00 00        	db 0,0										    ; Variables_de_borrado
140+  84B5 00 00        	defw 0											;	" " " " " " "
141+  84B7 00 00        	defw 0											;	" " " " " " "
142+  84B9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
143+  84BD
144+  84BD 00 00        	db 0,0											; Variables_de_pintado
145+  84BF 00 00        	defw 0											;	" " " " " " "
146+  84C1 00 00        	defw 0											;	" " " " " " "
147+  84C3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
148+  84C7
149+  84C7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
150+  84C9
151+  84C9 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
152+  84CD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
153+  84D0
154+  84D0 00           	db 0 											; (Columnas).
155+  84D1 00 00        	defw 0											; (Limite_horizontal).
156+  84D3 00           	db 0											; (Limite_vertical).
157+  84D4
158+  84D4              ; ---------- ---------- ---------- ---------- ----------
159+  84D4
160+  84D4 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
161+  84D6 00 00        	defw 0                                          ; (Posicion_actual).
162+  84D8 00 00        	defw 0											; (Puntero_objeto).
163+  84DA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
164+  84DD
165+  84DD 02           	db %00000010									; (Attr).
166+  84DE
167+  84DE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
168+  84E0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
169+  84E2 00 00        	defw 0											; (Puntero_DESPLZ_der).
170+  84E4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
171+  84E6
172+  84E6 7E 47        	defw $477e                                      ; (Posicion_inicio).
173+  84E8 02           	db 2											; (Cuad_objeto).
174+  84E9
175+  84E9 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
176+  84ED
177+  84ED 00 00        	db 0,0											; Variables_de_borrado
178+  84EF 00 00        	defw 0										 	;	" " " " " " "
179+  84F1 00 00        	defw 0											;	" " " " " " "
180+  84F3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
181+  84F7
182+  84F7 00 00        	db 0,0											; Variables_de_pintado
183+  84F9 00 00        	defw 0											;	" " " " " " "
184+  84FB 00 00        	defw 0											;	" " " " " " "
185+  84FD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
186+  8501
187+  8501 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
188+  8503
189+  8503 DB 91 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
190+  8507 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
191+  850A
192+  850A 00           	db 0 											; (Columnas).
193+  850B 00 00        	defw 0											; (Limite_horizontal).
194+  850D 00           	db 0											; (Limite_vertical).
195+  850E
196+  850E              ; ---------- ---------- ---------- ---------- ----------
197+  850E
198+  850E 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
199+  8510 00 00        	defw 0                                          ; (Posicion_actual).
200+  8512 00 00        	defw 0											; (Puntero_objeto).
201+  8514 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
202+  8517
203+  8517 04           	db %00000100									; (Attr).
204+  8518
205+  8518 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
206+  851A 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
207+  851C
208+  851C 00 00        	defw 0											; (Puntero_DESPLZ_der).
209+  851E 00 00        	defw 0											; (Puntero_DESPLZ_izq).
210+  8520
211+  8520 A1 47        	defw $47a1                                      ; (Posicion_inicio).
212+  8522 01           	db 1											; (Cuad_objeto).
213+  8523
214+  8523 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
215+  8527
216+  8527 00 00        	db 0,0											; Variables_de_borrado
217+  8529 00 00        	defw 0										 	;	" " " " " " "
218+  852B 00 00        	defw 0											;	" " " " " " "
219+  852D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
220+  8531
221+  8531 00 00        	db 0,0											; Variables_de_pintado
222+  8533 00 00        	defw 0											;	" " " " " " "
223+  8535 00 00        	defw 0											;	" " " " " " "
224+  8537 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
225+  853B
226+  853B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
227+  853D
228+  853D DD 91 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
229+  8541 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
230+  8544
231+  8544 00           	db 0 											; (Columnas).
232+  8545 00 00        	defw 0											; (Limite_horizontal).
233+  8547 00           	db 0											; (Limite_vertical).
234+  8548
235+  8548              ; ---------- ---------- ---------- ---------- ----------
236+  8548
237+  8548 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
238+  854A 00 00        	defw 0                                          ; (Posicion_actual).
239+  854C 00 00        	defw 0 											; (Puntero_objeto).
240+  854E 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
241+  8551
242+  8551 01           	db %00000001									; (Attr).
243+  8552
244+  8552 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
245+  8554 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
246+  8556
247+  8556 00 00        	defw 0											; (Puntero_DESPLZ_der).
248+  8558 00 00        	defw 0											; (Puntero_DESPLZ_izq).
249+  855A
250+  855A BE 47        	defw $47be                                      ; (Posicion_inicio).
251+  855C 00           	db 0											; (Cuad_objeto).
252+  855D
253+  855D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
254+  8561
255+  8561 00 00        	db 0,0											; Variables_de_borrado
256+  8563 00 00        	defw 0										 	;	" " " " " " "
257+  8565 00 00        	defw 0											;	" " " " " " "
258+  8567 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
259+  856B
260+  856B 00 00        	db 0,0											; Variables_de_pintado
261+  856D 00 00        	defw 0											;	" " " " " " "
262+  856F 00 00        	defw 0											;	" " " " " " "
263+  8571 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
264+  8575
265+  8575 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
266+  8577
267+  8577 CD 91 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
268+  857B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
269+  857E
270+  857E 00           	db 0 											; (Columnas).
271+  857F 00 00        	defw 0											; (Limite_horizontal).
272+  8581 00           	db 0											; (Limite_vertical).
273+  8582
# file closed: Entidades_y_disparos.asm
 21   8582
 22   8582              ; ******************************************************************************************************************************************************************************************
 23   8582              ; Constantes.
 24   8582              ; ******************************************************************************************************************************************************************************************
 25   8582              ;
 26   8582              ; 8/11/22
 27   8582              ;
 28   8582              ; Constantes generales.
 29   8582              ;
 30   8582
 31   8582              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8582              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8582              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8582              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8582              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   8582
 37   8582              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   8582              ;                               				        ; De momento situamos este almacén en $7000.
 39   8582
 40   8582
 41   8582              ; ******************************************************************************************************************************************************************************************
 42   8582              ; Variables.
 43   8582              ; ******************************************************************************************************************************************************************************************
 44   8582              ;
 45   8582              ; 10/11/22
 46   8582              ;
 47   8582              ; Variables de DRAW. (Motor principal).
 48   8582              ;
 49   8582              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   8582
 51   8582 02           Filas db 2												; Filas. [DRAW]
 52   8583 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8584 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8586 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8588 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8589 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   858A
 58   858A              ; ---------- ---------- ---------- ---------;      ;---------
 59   858A
 60   858A 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   858B              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   858B              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   858B 04           Attr db %00000100										; Atributos de la entidad:
 64   858C
 65   858C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   858C              ;
 67   858C              ;	COLORES: 0 ..... NEGRO
 68   858C              ;    		 1 ..... AZUL
 69   858C              ; 			 2 ..... ROJO
 70   858C              ;			 3 ..... MAGENTA
 71   858C              ; 			 4 ..... VERDE
 72   858C              ; 			 5 ..... CIAN
 73   858C              ;			 6 ..... AMARILLO
 74   858C              ; 			 7 ..... BLANCO
 75   858C
 76   858C A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   858E 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   8590 00 00        Puntero_DESPLZ_der defw 0
 79   8592 00 00        Puntero_DESPLZ_izq defw 0
 80   8594
 81   8594 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8596 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8597
 84   8597              ; Variables de objeto. (Características).
 85   8597
 86   8597 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8598 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8599 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   859A 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   859B
 91   859B 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   859D 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   859F 00 00        	defw 0
 94   85A1 00 00 00 00  	db 0,0,0,0
 95   85A5
 96   85A5 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85A7 00 00        	defw 0
 98   85A9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85AB 00 00 00 00  	db 0,0,0,0
100   85AF
101   85AF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85AF
103   85AF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85B0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85B0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85B0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85B0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85B0              ;
109   85B0              ; 														DESCRIPCIÖN:
110   85B0              ;
111   85B0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85B0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85B0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85B0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85B0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85B0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85B0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85B0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85B0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85B0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85B0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85B0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85B0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85B0              ;
125   85B0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85B0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85B0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85B0
129   85B0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85B1
131   85B1              ; Movimiento.
132   85B1
133   85B1 C9 91        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85B3 00 00        Puntero_mov defw 0
135   85B5 00           Contador_db_mov db 0
136   85B6 00           Incrementa_puntero db 0
137   85B7 00           Repetimos_db db 0
138   85B8
139   85B8              ; Variables de funcionamiento. [DRAW].
140   85B8
141   85B8 00           Columnas db 0
142   85B9 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85BB              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85BB 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85BC
146   85BC              ; 59 Bytes por entidad.
147   85BC              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85BC              ;					         		---------;      ;---------
149   85BC
150   85BC
151   85BC              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85BC              ; Gestión de ENTIDADES.
153   85BC
154   85BC 00 00        Puntero_store_entidades defw 0
155   85BE 00 00        Puntero_restore_entidades defw 0
156   85C0 00 00        Indice_restore defw 0
157   85C2 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   85C3 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   85C4              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   85C4              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   85C4              ;														; _ (Numero_de_malotes)="0".
162   85C4 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   85C6              ;														; _variable para almacenar lo posición del puntero_
164   85C6              ; 														; _de pila, SP.
165   85C6 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   85C8              ;														; La utiliza la rutina [Extrae_foto_registros].
167   85C8 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   85CA              ;														; _el snapshot de los registros de la siguiente entidad.
169   85CA              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   85CA
171   85CA              ; Gestión de FRAMES.
172   85CA
173   85CA 00           Switch db 0
174   85CB
175   85CB              ; Variables de Raster y localización en pantalla.
176   85CB
177   85CB 00 FF        Temp_Raster defw $ff00
178   85CD
179   85CD              ; Rutina principal *************************************************************************************************************************************************************************
180   85CD              ;
181   85CD              ;	14/11/22
182   85CD
183   85CD 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   85D0
185   85D0 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   85D2 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   85D4 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   85D6 F3           	DI
189   85D7
190   85D7 3E 01        	ld a,1
191   85D9 D3 FE        	out ($fe),a
192   85DB
193   85DB 3E 07        	ld a,%00000111
194   85DD CD 02 8E     	call Cls
195   85E0
196   85E0              ;	call Pinta_FILAS
197   85E0
198   85E0 CD EB 87     	call Pulsa_ENTER
199   85E3
200   85E3 21 C2 85     	ld hl,Numero_de_entidades
201   85E6 46           	ld b,(hl)
202   85E7 04           	inc b
203   85E8 05           	dec b
204   85E9 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   85EB
206   85EB              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   85EB              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   85EB              ;	Pintamos el resto de entidades:
209   85EB
210   85EB CD 0B 87     	call Inicia_punteros_de_entidades
211   85EE
212   85EE              ;	INICIA ENTIDADES!!!!!
213   85EE
214   85EE C5           1 push bc  												; Guardo el contador de entidades.
215   85EF CD 3E 87      	call Inicia_Puntero_objeto
216   85F2 CD B4 88     	call Draw
217   85F5 CD A0 7F     	call Guarda_foto_registros
218   85F8 CD 86 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   85FB C1           	pop bc
220   85FC 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   85FE
222   85FE              ; 	INICIA AMADEUS!!!!!
223   85FE
224   85FE CD C7 87     3 call Restore_Amadeus
225   8601 CD 3E 87     	call Inicia_Puntero_objeto
226   8604 CD B4 88     	call Draw
227   8607 CD A0 7F     	call Guarda_foto_registros
228   860A CD D9 87     	call Store_Amadeus
229   860D
230   860D              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   860D
232   860D CD 0B 87     	call Inicia_punteros_de_entidades
233   8610 CD B5 87     	call Restore_Primera_entidad
234   8613
235   8613 3A C2 85     	ld a,(Numero_de_entidades)
236   8616 3C           	inc a
237   8617 32 C3 85     	ld (Numero_de_malotes),a
238   861A
239   861A FB           2 ei
240   861B 18 FD        	jr 2B
241   861D
242   861D              ; -----------------------------------------------------------------------------------
243   861D
244   861D              Frame
245   861D
246   861D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   861D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   861D
249   861D 3E 07            ld a,7
250   861F D3 FE            out ($fe),a
251   8621 CD B8 8B     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   8624 3E 01            ld a,1
253   8626 D3 FE            out ($fe),a
254   8628
255   8628 CD 55 88     	call Genera_disparo
256   862B
257   862B 18 FE        	jr $
258   862D
259   862D              ; ----------------------------------------------------------------------
260   862D
261   862D 21 00 70     	ld hl,Album_de_fotos
262   8630 22 C8 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
263   8633              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
264   8633 3A C2 85         ld a,(Numero_de_entidades)
265   8636 47               ld b,a
266   8637 A7           	and a
267   8638 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
268   863A
269   863A C5           2 push bc
270   863B CD 84 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
271   863E 3A AF 85     	ld a,(Ctrl_0)
272   8641 CB 67        	bit 4,a
273   8643 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
274   8645 CD D2 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
275   8648
276   8648              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
277   8648              ; 16/02/23.
278   8648              ; [[[
279   8648 CD 22 88     1 call Detecta_disparo_entidad
280   864B              ; ]]]
281   864B
282   864B              ;1
283   864B 21 AF 85     	ld hl,Ctrl_0
284   864E CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
285   8650 AF           	xor a
286   8651 32 B0 85     	ld (Obj_dibujado),a
287   8654 CD 86 87     	call Store_Restore_entidades
288   8657 C1           	pop bc
289   8658 10 E0        	djnz 2B
290   865A
291   865A CD C7 87     4 call Restore_Amadeus
292   865D CD A3 86     	call Mov_Amadeus
293   8660 3A AF 85     	ld a,(Ctrl_0)
294   8663 CB 67        	bit 4,a
295   8665 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
296   8667 CD D2 86     	call Guarda_foto_entidad_a_pintar
297   866A
298   866A 21 AF 85     3 ld hl,Ctrl_0
299   866D CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
300   866F AF           	xor a
301   8670 32 B0 85     	ld (Obj_dibujado),a
302   8673 CD D9 87     	call Store_Amadeus
303   8676
304   8676              ; -----
305   8676
306   8676 CD 0B 87     	call Inicia_punteros_de_entidades
307   8679 CD B5 87     	call Restore_Primera_entidad
308   867C CD 21 87     	call Calcula_numero_de_malotes
309   867F
310   867F 3E 00        	ld a,0
311   8681 D3 FE        	out ($fe),a
312   8683 C9           	ret
313   8684
314   8684              ; --------------------------------------------------------------------------------------------------------------
315   8684              ;
316   8684              ;	29/1/23
317   8684
318   8684              Mov_obj
319   8684
320   8684              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
321   8684
322   8684 AF           	xor a
323   8685 32 B0 85     	ld (Obj_dibujado),a
324   8688 CD DC 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
325   868B              ;														; Obj_dibujado="0".
326   868B              ; Movemos Entidades malignas.
327   868B
328   868B CD DF 91     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
329   868E 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
330   8691 CB 67        	bit 4,a
331   8693 C8           	ret z
332   8694
333   8694              ; ---------
334   8694
335   8694 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
336   8696 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
337   8699 CD DC 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
338   869C CD F3 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
339   869F CD C2 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
340   86A2 C9           	ret													; _de la misma.
341   86A3
342   86A3              ; --------------------------------------------------------------------------------------------------------------
343   86A3              ;
344   86A3              ;	29/1/23
345   86A3
346   86A3              Mov_Amadeus
347   86A3
348   86A3 AF           	xor a
349   86A4 32 B0 85     	ld (Obj_dibujado),a
350   86A7 CD DC 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
351   86AA              ;														; Obj_dibujado="0".
352   86AA              ; Movemos Amadeus.
353   86AA
354   86AA CD FF 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
355   86AD 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
356   86B0 CB 67        	bit 4,a
357   86B2 C8           	ret z
358   86B3
359   86B3              ; ---------
360   86B3
361   86B3 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
362   86B5 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
363   86B8 CD DC 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
364   86BB CD F3 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
365   86BE CD C2 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
366   86C1 C9           	ret													; _de la nave.
367   86C2
368   86C2              ; --------------------------------------------------------------------------------------------------------------
369   86C2              ;
370   86C2              ;	31/01/23
371   86C2              ;
372   86C2              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
373   86C2
374   86C2              Guarda_foto_entidad_a_borrar
375   86C2
376   86C2 CD 8E 8B     	call Prepara_draw
377   86C5 CD C8 8A     	call calcula_CColumnass
378   86C8 CD FF 8A     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
379   86CB CD 54 8B     	call Define_rutina_de_impresion
380   86CE CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
381   86D1 C9           	ret
382   86D2
383   86D2              ; --------------------------------------------------------------------------------------------------------------
384   86D2              ;
385   86D2              ;	31/01/23
386   86D2              ;
387   86D2              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
388   86D2              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
389   86D2
390   86D2              Guarda_foto_entidad_a_pintar
391   86D2
392   86D2 CD FF 86     	call Repone_pintar
393   86D5 CD B4 88     	call Draw
394   86D8 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
395   86DB C9           	ret
396   86DC
397   86DC              ; --------------------------------------------------------------------------------------------------------------
398   86DC              ;
399   86DC              ;
400   86DC
401   86DC 21 82 85     Prepara_var_pintado_borrado	ld hl,Filas
402   86DF 3A B0 85     	ld a,(Obj_dibujado)
403   86E2 A7           	and a
404   86E3 28 05        	jr z,1F
405   86E5 11 A5 85     	ld de,Variables_de_pintado
406   86E8 18 03        	jr 2F
407   86EA 11 9B 85     1 ld de,Variables_de_borrado
408   86ED 01 08 00     2 ld bc,8
409   86F0 ED B0        	ldir
410   86F2 C9           	ret
411   86F3
412   86F3              ; --------------------------------------------------------------------------------------------------------------
413   86F3
414   86F3 21 9B 85     Repone_borrar ld hl,Variables_de_borrado
415   86F6 11 82 85     	ld de,Filas
416   86F9 01 08 00     	ld bc,8
417   86FC ED B0        	ldir
418   86FE C9           	ret
419   86FF
420   86FF 21 A5 85     Repone_pintar ld hl,Variables_de_pintado
421   8702 11 82 85     	ld de,Filas
422   8705 01 08 00     	ld bc,8
423   8708 ED B0        	ldir
424   870A C9           	ret
425   870B
426   870B              ; *************************************************************************************************************************************************************
427   870B              ;
428   870B              ; 8/1/23
429   870B              ;
430   870B              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
431   870B              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
432   870B              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
433   870B
434   870B              ; Destruye HL y DE !!!!!
435   870B
436   870B              Inicia_punteros_de_entidades
437   870B
438   870B 21 54 84     	ld hl,Indice_de_entidades
439   870E CD 38 87         call Extrae_address
440   8711 22 BC 85         ld (Puntero_store_entidades),hl
441   8714 21 56 84     	ld hl,Indice_de_entidades+2
442   8717 22 C0 85     	ld (Indice_restore),hl
443   871A CD 38 87     	call Extrae_address
444   871D 22 BE 85     	ld (Puntero_restore_entidades),hl
445   8720 C9               ret
446   8721
447   8721              ; -------------------------------------------------------------------------------------------------------------
448   8721              ;
449   8721              ; 30/1/23
450   8721              ;
451   8721
452   8721 2A C8 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
453   8724 7D           	ld a,l
454   8725 A7           	and a
455   8726 28 0C        	jr z,3F
456   8728 AF           	xor a
457   8729 67           	ld h,a
458   872A 7D           	ld a,l
459   872B D6 06        1 sub 6
460   872D 28 03        	jr z,2F
461   872F 24           	inc h
462   8730 18 F9        	jr 1B
463   8732 24           2 inc h
464   8733 7C           	ld a,h
465   8734 32 C3 85     3 ld (Numero_de_malotes),a
466   8737 C9           	ret
467   8738
468   8738              ; *************************************************************************************************************************************************************
469   8738              ;
470   8738              ; 20/10/22
471   8738              ;
472   8738              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
473   8738              ;
474   8738              ; Destruye el puntero y DE !!!!!
475   8738
476   8738 5E           Extrae_address ld e,(hl)
477   8739 23           	inc hl
478   873A 56           	ld d,(hl)
479   873B 2B           	dec hl
480   873C EB           	ex de,hl
481   873D C9           	ret
482   873E
483   873E              ; *************************************************************************************************************************************************************
484   873E              ;
485   873E              ;	7/2/23
486   873E              ;
487   873E              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
488   873E              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
489   873E              ;
490   873E              ;   Destruye HL y BC !!!!!,
491   873E              ;
492   873E              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
493   873E              ;					"0" ..... Izquierda.
494   873E
495   873E              Inicia_Puntero_objeto
496   873E
497   873E 3A 96 85     	ld a,(Cuad_objeto)
498   8741 E6 01        	and 1
499   8743 F5           	push af
500   8744 CC 62 87     	call z,Inicia_puntero_objeto_izq
501   8747 F1           	pop af
502   8748 28 2B        	jr z,1F
503   874A CD 4F 87     	call Inicia_puntero_objeto_der
504   874D 18 26        	jr 1F
505   874F
506   874F              ; Arrancamos desde la parte izquierda de la pantalla.
507   874F              ; Iniciamos (Indice_Sprite_der).
508   874F
509   874F 2A 8C 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
510   8752 22 90 85     	ld (Puntero_DESPLZ_der),hl
511   8755 CD 38 87     	call Extrae_address
512   8758 22 86 85     	ld (Puntero_objeto),hl
513   875B
514   875B 2A 8E 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
515   875E              ;	call Extrae_address
516   875E 22 92 85     	ld (Puntero_DESPLZ_izq),hl
517   8761 C9           	ret
518   8762
519   8762              ; Arrancamos desde la parte derecha de la pantalla.
520   8762              ; Iniciamos (Indice_Sprite_izq).
521   8762
522   8762 2A 8E 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
523   8765 22 92 85     	ld (Puntero_DESPLZ_izq),hl
524   8768 CD 38 87     	call Extrae_address
525   876B 22 86 85     	ld (Puntero_objeto),hl
526   876E
527   876E 2A 8C 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
528   8771              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
529   8771 22 90 85     	ld (Puntero_DESPLZ_der),hl
530   8774 C9           	ret
531   8775
532   8775              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
533   8775
534   8775 21 40 83     1 ld hl,Amadeus
535   8778 ED 4B 86 85  	ld bc,(Puntero_objeto)
536   877C B7 ED 42     	sub hl,bc
537   877F C0           	ret nz
538   8780 21 AF 85     	ld hl,Ctrl_0
539   8783 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
540   8785 C9           	ret 												; _de nuestra nave en los extremos.
541   8786
542   8786              ; *************************************************************************************************************************************************************
543   8786              ;
544   8786              ;	8/1/23
545   8786              ;
546   8786              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
547   8786              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
548   8786
549   8786              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
550   8786              ;	_de la 2ª y 3ª entidad respectivamente.
551   8786
552   8786
553   8786
554   8786              Store_Restore_entidades
555   8786
556   8786 E5           	push hl
557   8787 D5           	push de
558   8788 C5            	push bc
559   8789
560   8789              ;	STORE !!!!!
561   8789              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
562   8789
563   8789 21 82 85     	ld hl,Filas
564   878C ED 5B BC 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
565   8790 01 3A 00     	ld bc,58
566   8793 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
567   8795
568   8795              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
569   8795
570   8795 2A BE 85     	ld hl,(Puntero_restore_entidades)
571   8798 22 BC 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
572   879B 11 82 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
573   879E 01 3A 00     	ld bc,58
574   87A1 ED B0        	ldir
575   87A3
576   87A3              ;	Incrementa RESTORE !!!!!
577   87A3
578   87A3 2A C0 85         ld hl,(Indice_restore)
579   87A6 23           	inc hl
580   87A7 23           	inc hl
581   87A8 22 C0 85     	ld (Indice_restore),hl
582   87AB CD 38 87         call Extrae_address
583   87AE 22 BE 85         ld (Puntero_restore_entidades),hl
584   87B1 C1           	pop bc
585   87B2 D1           	pop de
586   87B3 E1           	pop hl
587   87B4 C9           	ret
588   87B5
589   87B5              ; **************************************************************************************************
590   87B5              ;
591   87B5              ;	29/10/22
592   87B5              ;
593   87B5              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
594   87B5
595   87B5 E5           Restore_Primera_entidad push hl
596   87B6 D5           	push de
597   87B7 C5            	push bc
598   87B8 2A BC 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
599   87BB 11 82 85     	ld de,Filas
600   87BE 01 3A 00     	ld bc,58
601   87C1 ED B0        	ldir
602   87C3 C1           	pop bc
603   87C4 D1           	pop de
604   87C5 E1           	pop hl
605   87C6 C9           	ret
606   87C7
607   87C7              ; **************************************************************************************************
608   87C7              ;
609   87C7              ;	25/01/23
610   87C7              ;
611   87C7              ;	Restore_Amadeus
612   87C7              ;
613   87C7              ;	Cargamos en DRAW los parámetros de Amadeus.
614   87C7              ;
615   87C7
616   87C7 E5           Restore_Amadeus	push hl
617   87C8 D5           	push de
618   87C9 C5            	push bc
619   87CA 21 60 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
620   87CD 11 82 85     	ld de,Filas
621   87D0 01 3A 00     	ld bc,58
622   87D3 ED B0        	ldir
623   87D5 C1           	pop bc
624   87D6 D1           	pop de
625   87D7 E1           	pop hl
626   87D8 C9           	ret
627   87D9
628   87D9              ; *************************************************************************************************************************************************************
629   87D9              ;
630   87D9              ;	29/01/23
631   87D9              ;
632   87D9              ;	Store_Amadeus
633   87D9              ;
634   87D9              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
635   87D9              ;
636   87D9
637   87D9 E5           Store_Amadeus push hl
638   87DA D5           	push de
639   87DB C5            	push bc
640   87DC 21 82 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
641   87DF 11 60 84     	ld de,Amadeus_db
642   87E2 01 3A 00     	ld bc,58
643   87E5 ED B0        	ldir
644   87E7 C1           	pop bc
645   87E8 D1           	pop de
646   87E9 E1           	pop hl
647   87EA C9           	ret
648   87EB
649   87EB              ; **************************************************************************************************
650   87EB
651   87EB              ; Teclado.
652   87EB
653   87EB 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
654   87ED DB FE        	in a,($fe)
655   87EF E6 01        	and $01
656   87F1 28 02        	jr z,1f
657   87F3 18 F6        	jr Pulsa_ENTER
658   87F5 C9           1 ret
659   87F6
660   87F6              ; **************************************************************************************************
661   87F6              ;
662   87F6              ; Temporización.
663   87F6
664   87F6              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
665   87F6              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
666   87F6              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
667   87F6              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
668   87F6
669   87F6              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
670   87F6              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
671   87F6              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
672   87F6
673   87F6              ; A partir de $4f61 no hace falta DELAY.
674   87F6
675   87F6              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
676   87F6
677   87F6 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
678   87F9 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
679   87FA 78           	LD A,B
680   87FB A7           	AND A
681   87FC 20 FB        	JR NZ,wait
682   87FE C9           	RET
683   87FF
684   87FF              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
685   87FF              ;
686   87FF              ;	16/02/23
687   87FF
688   87FF              Movimiento_Amadeus
689   87FF
690   87FF 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
691   8801 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
692   8803 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
693   8805 CC 90 8F         call z,Mov_left											;			"			"			"			"			"			"			"			"
694   8808 3E F7        	ld a,$f7
695   880A DB FE        	in a,($fe)
696   880C E6 01        	and $01
697   880E C8           	ret z
698   880F
699   880F 3E F7        	ld a,$f7
700   8811 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
701   8813 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
702   8815 CC 72 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
703   8818
704   8818              ; Disparo.
705   8818
706   8818 3E F7        	ld a,$f7												; "5" para disparar.
707   881A DB FE        	in a,($fe)
708   881C E6 10        	and $10
709   881E CC 55 88     	call z,Genera_disparo
710   8821 C9               ret
711   8822
712   8822              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
713   8822              ;
714   8822              Detecta_disparo_entidad
715   8822
716   8822 3E 7F        	ld a,$7f
717   8824 DB FE        	in a,($fe)
718   8826 E6 01        	and 1
719   8828 C0           	ret nz
720   8829 CD 55 88     	call Genera_disparo
721   882C
722   882C              ; Pinta indicadores de FILAS. ------------------------------------------------------
723   882C
724   882C 21 10 40     Pinta_FILAS ld hl,$4010
725   882F              ;	ld b,9
726   882F              ;2 push hl
727   882F              ;	push bc
728   882F 06 BF        	ld b,$bf
729   8831 36 80        1 ld (hl),%10000000
730   8833 CD 9A 8B     	call NextScan
731   8836 10 F9        	djnz 1B
732   8838              ;	pop bc
733   8838              ;	pop hl
734   8838              ;	inc l
735   8838              ;	djnz 2B
736   8838 06 03        	ld b,3
737   883A 21 00 47         ld hl,$4700
738   883D CD 43 88     3 call Bucle_1
739   8840 10 FB            djnz 3B
740   8842 C9               ret
741   8843
742   8843 C5           Bucle_1 push bc
743   8844 E5                   push hl
744   8845 D1                   pop de
745   8846 13                   inc de
746   8847 01 FF 00             ld bc,255
747   884A 36 FF                ld (hl),255
748   884C ED B0                ldir
749   884E 23                   inc hl
750   884F 3E 07                ld a,7
751   8851 84                   add a,h
752   8852 67                   ld h,a
753   8853 C1                   pop bc
754   8854 C9                   ret
755   8855
756   8855              ; ---------------------------------------------------------------
757   8855
758   8855              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  8855              ; ******************************************************************************************************************************************************************************************
  2+  8855              ;
  3+  8855              ;   19/02/23
  4+  8855              ;
  5+  8855              ; 	Calcula la dirección de memoria de pantalla donde se va a iniciar el disparo, (se aplica a_)
  6+  8855              ;   _entidades y Amadeus).
  7+  8855
  8+  8855              Genera_disparo
  9+  8855
 10+  8855              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 11+  8855              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 12+  8855              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación.
 13+  8855              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 14+  8855
 15+  8855 21 00 80         ld hl,Indice_disparo
 16+  8858 3A 8A 85         ld a,(CTRL_DESPLZ)
 17+  885B 4F               ld c,a
 18+  885C A7               and a
 19+  885D 28 0F            jr z,1F
 20+  885F E6 01            and 1
 21+  8861 C8               ret z
 22+  8862 06 F9            ld b,$f9
 23+  8864 79               ld a,c
 24+  8865
 25+  8865 23           2 inc hl
 26+  8866 23               inc hl
 27+  8867 B8               cp b
 28+  8868 28 04            jr z,1F
 29+  886A 04               inc b
 30+  886B 04               inc b
 31+  886C 18 F7            jr 2B
 32+  886E
 33+  886E CD 38 87     1 call Extrae_address
 34+  8871 E5               push hl
 35+  8872 FD E1            pop iy
 36+  8874
 37+  8874              ; -----------------------------------------------------------------
 38+  8874
 39+  8874 3A 96 85         ld a,(Cuad_objeto)
 40+  8877 FE 02            cp 2
 41+  8879 38 0A            jr c,3F
 42+  887B 28 08            jr z,3F
 43+  887D
 44+  887D              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 45+  887D
 46+  887D E6 01            and 1
 47+  887F 28 02            jr z,4F
 48+  8881
 49+  8881              ; Estamos en el 3er cuadrante de pantalla.
 50+  8881
 51+  8881 18 FE            jr $
 52+  8883
 53+  8883              ; Estamos en el 4º cuadrante de pantalla.
 54+  8883
 55+  8883 18 FE        4 jr $
 56+  8885
 57+  8885              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
 58+  8885
 59+  8885 28 27        3 jr z,5F
 60+  8887
 61+  8887              ; 1er CUAD. ----- ----- ----- ----- -----
 62+  8887              ;
 63+  8887              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
 64+  8887              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
 65+  8887              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
 66+  8887              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
 67+  8887
 68+  8887 2A 84 85     	ld hl,(Posicion_actual)
 69+  888A CD 9A 8B     	call NextScan
 70+  888D
 71+  888D              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
 72+  888D
 73+  888D 3A B8 85         ld a,(Columnas)
 74+  8890 47               ld b,a
 75+  8891 FE 01            cp 1
 76+  8893 28 01            jr z,7F
 77+  8895 2B               dec hl
 78+  8896 E5           7 push hl
 79+  8897 DD E1            pop ix                                          ; IX contiene el puntero de impresión.
 80+  8899
 81+  8899              ; ----- ----- ----- -----
 82+  8899
 83+  8899 05               dec b
 84+  889A 28 05            jr z,8F
 85+  889C 21 05 8C         ld hl,Pinta_Amadeus_2x2
 86+  889F 18 03            jr 9F
 87+  88A1
 88+  88A1 21 88 8C     8 ld hl,Pinta_enemigo_2x2_izquierda
 89+  88A4 E5           9 push hl
 90+  88A5 D1               pop de                                          ; DE contiene la dirección de la rutina de impresión.
 91+  88A6 21 00 00         ld hl,0                                         ; Impacto,(H)="0". Dirección,(L)="0".
 92+  88A9 CD B1 88         call Guarda_disparo_en_archivo
 93+  88AC 18 02            jr 6F                                           ; RET.
 94+  88AE
 95+  88AE
 96+  88AE              ; Estamos en el 2º cuadrante de pantalla.
 97+  88AE
 98+  88AE 18 FE        5 jr $
 99+  88B0
100+  88B0 C9           6 ret
101+  88B1
102+  88B1              ; -------------------------------------------------------------------------------------------------
103+  88B1
104+  88B1 18 FE        Guarda_disparo_en_archivo jr $
105+  88B3 C9               ret
# file closed: Disparo.asm
759   88B4              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  88B4              ; ******************************************************************************************************************************************************************************************
  2+  88B4              ;
  3+  88B4              ; 01/23
  4+  88B4              ;
  5+  88B4              ; DRAW. ************************************************************************************************************************************************************************************
  6+  88B4
  7+  88B4 CD 8E 8B     Draw call Prepara_draw
  8+  88B7 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  88B8 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  88B9 28 05        	jr z,2F
 11+  88BB
 12+  88BB 3A 96 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  88BE 18 0C        	jr 1F
 14+  88C0 2A 94 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  88C3 22 84 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  88C6 CD 55 8A     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  88C9              ;													; _la esquina superior izquierda de la pantalla.
 18+  88C9 CD 61 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  88CC 3A AF 85     1 ld a,(Ctrl_0)
 20+  88CF CB 6F        	bit 5,a
 21+  88D1 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  88D3
 23+  88D3 CD EB 88     	call Comprueba_limite_horizontal
 24+  88D6 CD 7B 89     	call Comprueba_limite_vertical
 25+  88D9
 26+  88D9              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  88D9
 28+  88D9 CD C8 8A     3 call calcula_CColumnass
 29+  88DC CD FF 8A     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  88DF CD 54 8B     	call Define_rutina_de_impresion
 31+  88E2
 32+  88E2 3A AF 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  88E5 CB AF        	res 5,a											; _a ser de utilidad.
 34+  88E7 32 AF 85     	ld (Ctrl_0),a
 35+  88EA
 36+  88EA C9           	ret
 37+  88EB
 38+  88EB              ; *******************************************************************************************************************************************************************************************
 39+  88EB              ;	21/01/23
 40+  88EB              ;
 41+  88EB              ; 	Comprueba_limite_horizontal.
 42+  88EB              ;
 43+  88EB              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  88EB              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  88EB              ;
 46+  88EB              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  88EB              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  88EB              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  88EB              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  88EB
 51+  88EB
 52+  88EB
 53+  88EB 3A AF 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  88EE CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  88F0 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  88F2 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  88F4 32 AF 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  88F7 18 09            jr 6F
 59+  88F9 CB 5F        1 bit 3,a
 60+  88FB 28 0A            jr z,2F
 61+  88FD E6 F7            and $f7
 62+  88FF 32 AF 85         ld (Ctrl_0),a
 63+  8902 CD 55 8A     6 call Inicializacion
 64+  8905 18 5B            jr 5F
 65+  8907 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8908
 67+  8908              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8908              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8908
 70+  8908 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8909 2A B9 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  890C CD F8 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  890F 67           	ld h,a
 74+  8910 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8911 CD F8 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8914 67           	ld h,a
 77+  8915 A7           	and a
 78+  8916 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8918 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8919 3A 96 85     	ld a,(Cuad_objeto)
 81+  891C FE 02        	cp 2
 82+  891E 38 1E        	jr c,3F
 83+  8920 28 1C        	jr z,3F
 84+  8922 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8923 28 23            jr z,7F
 86+  8925 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8927 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8929 E1           	pop hl
 89+  892A
 90+  892A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  892A              ; _para indicar con E="2" en caso necesario.
 92+  892A
 93+  892A E5               push hl
 94+  892B C5               push bc
 95+  892C CD F8 8D     	call calcula_tercio
 96+  892F FE 01        	cp 1
 97+  8931 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8933 CD 63 89         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8936 28 26            jr z,9F
100+  8938 38 24            jr c,9F
101+  893A 1E 00        11 ld e,0
102+  893C 18 22            jr 8F
103+  893E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  893F 28 07        	jr z, 7F
105+  8941 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8943 1E 00         	ld e,0
107+  8945 E1           	pop hl
108+  8946 18 04        	jr 4F
109+  8948 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  894A 18 15            jr 10F
111+  894C
112+  894C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  894C              ; _para indicar con E="2" en caso necesario.
114+  894C
115+  894C E5           4 push hl
116+  894D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  894E CD F8 8D     	call calcula_tercio
118+  8951 FE 01        	cp 1
119+  8953 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8955 CD 63 89         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8958 28 04            jr z,9F
122+  895A 30 02            jr nc,9F
123+  895C 18 02        	jr 8F
124+  895E 1E 02        9 ld e,2
125+  8960 C1           8 pop bc
126+  8961 E1           10 pop hl
127+  8962 C9           5 ret
128+  8963
129+  8963              ; --------------------
130+  8963              ;
131+  8963              ; 25/08/22
132+  8963
133+  8963 CD F8 8D     Comprueba_centro call calcula_tercio
134+  8966 67               ld h,a
135+  8967 08           	ex af,af
136+  8968 FE 02        	cp 2
137+  896A 38 07        	jr c,1F
138+  896C 28 05        	jr z,1F
139+  896E 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8971 18 03        	jr 2F
141+  8973 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8976 08           2 ex af,af
143+  8977 A7               and a
144+  8978 ED 42            sbc hl,bc
145+  897A C9               ret
146+  897B
147+  897B              ; *********************************************************************************************************************************************************************************************
148+  897B              ;
149+  897B              ;   16/8/22
150+  897B              ;
151+  897B              ;	Comprueba_limite_vertical
152+  897B              ;
153+  897B              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  897B              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  897B              ;
156+  897B
157+  897B 2A 84 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  897E 7D           	ld a,l
159+  897F E6 1F        	and $1F
160+  8981 57           	ld d,a
161+  8982 3A BB 85     	ld a,(Limite_vertical)
162+  8985 BA           	cp d 											; Límite - Posición.
163+  8986 08           	ex af,af 										; Resultado de CP d en F'.
164+  8987 3A 96 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  898A CB 47        	bit 0,a
166+  898C 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  898E
168+  898E              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  898E
170+  898E 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  898F 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8991
173+  8991              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8991              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8991
176+  8991 3A 88 85         ld a,(Coordenada_X)
177+  8994 16 0F            ld d,Centro_izquierda
178+  8996 A7               and a
179+  8997 92               sub d 											 ; Posición - Centro_izquierda.
180+  8998 28 1E            jr z,3F
181+  899A 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  899C              ;                                                    ; _salimos sin modificar nada.
183+  899C 18 0E            jr 2F
184+  899E 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  899F 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  89A1
187+  89A1              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  89A1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  89A1
190+  89A1 3A 88 85         ld a,(Coordenada_X)
191+  89A4 16 10            ld d,Centro_derecha
192+  89A6 A7               and a
193+  89A7 92               sub d
194+  89A8 28 0E            jr z,3F
195+  89AA 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  89AC              ;                                                    ; _salimos sin modificar nada.
197+  89AC CB 43        2 bit 0,e
198+  89AE 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  89B0 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  89B1 CD 45 8A         call Modificaccionne
201+  89B4 C1           	pop bc
202+  89B5 CD 55 8A         call Inicializacion
203+  89B8 C9           3 ret 				 								 ; Salimos de la rutina.
204+  89B9
205+  89B9              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  89B9
207+  89B9 C5           4 push bc
208+  89BA 01 83 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  89BD 0A           	ld a,(bc)
210+  89BE 3D           	dec a
211+  89BF 47           	ld b,a 											 ; Columnas-1 en B.
212+  89C0 7D           	ld a,l
213+  89C1 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  89C2 CB 47        	bit 0,a
215+  89C4 28 03        	jr z,5F
216+  89C6 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  89C7 18 2E        	jr 7F
218+  89C9
219+  89C9              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  89C9
221+  89C9 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  89CA F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  89CB 3A AF 85     	ld a,(Ctrl_0)
224+  89CE CB 4F        	bit 1,a
225+  89D0 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  89D2 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  89D3
228+  89D3              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  89D3
230+  89D3 1C               inc e
231+  89D4 1D               dec e
232+  89D5 20 07            jr nz,12F
233+  89D7 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  89D8 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  89D9 22 84 85     	ld (Posicion_actual),hl
236+  89DC 18 44        13 jr 9F
237+  89DE CB 43        12 bit 0,e
238+  89E0 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  89E2              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  89E2 C1           	pop bc
241+  89E3 18 D3        	jr 3B
242+  89E5 80           14 add b
243+  89E6 6F               ld l,a
244+  89E7 22 84 85     	ld (Posicion_actual),hl
245+  89EA CD 45 8A         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  89ED 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  89EF E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  89F1 32 AF 85         ld (Ctrl_0),a
249+  89F4 F1           	pop af
250+  89F5 18 2B        	jr 9F
251+  89F7
252+  89F7              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  89F7
254+  89F7 F5           7 push af
255+  89F8 3A AF 85     	ld a,(Ctrl_0)
256+  89FB CB 47        	bit 0,a
257+  89FD 20 1D        	jr nz,8F
258+  89FF F1           	pop af
259+  8A00
260+  8A00              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8A00
262+  8A00 1C           	inc e
263+  8A01 1D               dec e
264+  8A02 20 07            jr nz,10F
265+  8A04 90           	sub b
266+  8A05 6F               ld l,a
267+  8A06 22 84 85     	ld (Posicion_actual),hl
268+  8A09 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8A0B              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8A0B CB 43        10 bit 0,e
271+  8A0D 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8A0F              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8A0F C1           	pop bc
274+  8A10 18 A6        	jr 3B
275+  8A12 90           16 sub b
276+  8A13 6F               ld l,a
277+  8A14 22 84 85     	ld (Posicion_actual),hl
278+  8A17 CD 45 8A         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8A1A 18 06            jr 9F
280+  8A1C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8A1E 32 AF 85         ld (Ctrl_0),a
282+  8A21 F1           	pop af
283+  8A22 C1           9 pop bc
284+  8A23 1E 00        	ld e,0
285+  8A25 CD 55 8A         call Inicializacion
286+  8A28 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8A29 08           	ex af,af
288+  8A2A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8A2B 18 8B            jr 3B
290+  8A2D
291+  8A2D              ; --------------------
292+  8A2D
293+  8A2D 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8A2F CD A9 8B     1 call PreviousScan
295+  8A32 10 FB            djnz 1B
296+  8A34 22 84 85     	ld (Posicion_actual),hl
297+  8A37 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8A38 C9           	ret
299+  8A39
300+  8A39              ; --------------------
301+  8A39
302+  8A39 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8A3B CD 9A 8B     1 call NextScan
304+  8A3E 10 FB            djnz 1B
305+  8A40 22 84 85     	ld (Posicion_actual),hl
306+  8A43 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8A44 C9           	ret
308+  8A45
309+  8A45              ; --------------------
310+  8A45              ;
311+  8A45              ;	22/01/23
312+  8A45              ;
313+  8A45              ;	E="1". Hemos cambiado de cuadrante.
314+  8A45              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8A45              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8A45
317+  8A45
318+  8A45              Modificaccionne
319+  8A45
320+  8A45 3A 96 85     	ld a,(Cuad_objeto)
321+  8A48 FE 02        	cp 2
322+  8A4A CC 2D 8A         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8A4D DC 2D 8A         call c,Modifica_Pos_actual
324+  8A50 C8           	ret z
325+  8A51 CD 39 8A         call Modifica_Pos_actual2
326+  8A54 C9               ret
327+  8A55
328+  8A55              ; *************************************************************************************************************************************************************************************************
329+  8A55              ;
330+  8A55              ;	13/8/22
331+  8A55              ;
332+  8A55              ;	Inicializacion
333+  8A55              ;
334+  8A55              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8A55              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8A55              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8A55              ;
338+  8A55              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8A55              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8A55              ;	_ desaparece/aparece.
341+  8A55
342+  8A55              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8A55              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8A55              ;
345+  8A55              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8A55              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8A55              ; 		   [E] ="0"
348+  8A55
349+  8A55              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8A55
351+  8A55 CD F8 8D     Inicializacion call calcula_tercio
352+  8A58 28 36        	jr z,primit
353+  8A5A E6 02        	and 2
354+  8A5C 20 07        	jr nz,segmit
355+  8A5E 7D           	ld a,l
356+  8A5F FE 7F        	cp $7f
357+  8A61 38 2D        	jr c,primit
358+  8A63 28 2B        	jr z,primit
359+  8A65 CD C2 8A     segmit call column
360+  8A68 38 13        	jr c,tercuad
361+  8A6A 3E 04        cuarcuad ld a,4
362+  8A6C 32 96 85     	ld (Cuad_objeto),a
363+  8A6F 21 20 48     	ld hl,$4820
364+  8A72 22 B9 85     	ld (Limite_horizontal),hl
365+  8A75 21 BB 85     	ld hl,Limite_vertical
366+  8A78 36 0D        	ld (hl),$0d
367+  8A7A 08           	ex af,af
368+  8A7B 18 3C        	jr 1F
369+  8A7D              tercuad
370+  8A7D 3E 03        	ld a,3
371+  8A7F 32 96 85     	ld (Cuad_objeto),a
372+  8A82 21 20 48     	ld hl,$4820
373+  8A85 22 B9 85     	ld (Limite_horizontal),hl
374+  8A88 21 BB 85     	ld hl,Limite_vertical
375+  8A8B 36 12        	ld (hl),$12
376+  8A8D 08           	ex af,af
377+  8A8E 18 29        	jr 1F
378+  8A90 CD C2 8A     primit call column
379+  8A93 38 13        	jr c, primcuad
380+  8A95              segcuad
381+  8A95 3E 02        	ld a,2
382+  8A97 32 96 85     	ld (Cuad_objeto),a
383+  8A9A 21 C0 4F     	ld hl,$4fc0
384+  8A9D 22 B9 85     	ld (Limite_horizontal),hl
385+  8AA0 21 BB 85     	ld hl,Limite_vertical
386+  8AA3 36 0D        	ld (hl),$0d
387+  8AA5 08           	ex af,af
388+  8AA6 18 11        	jr 1F
389+  8AA8              primcuad
390+  8AA8 3E 01        	ld a,1
391+  8AAA 32 96 85     	ld (Cuad_objeto),a
392+  8AAD 21 C0 4F     	ld hl,$4fc0
393+  8AB0 22 B9 85     	ld (Limite_horizontal),hl
394+  8AB3 21 BB 85     	ld hl,Limite_vertical
395+  8AB6 36 12        	ld (hl),$12
396+  8AB8 08           	ex af,af
397+  8AB9 CD 2A 91     1 call Genera_coordenadas
398+  8ABC 21 AF 85     	ld hl,Ctrl_0
399+  8ABF CB EE        	set 5,(hl)
400+  8AC1 C9           	ret
401+  8AC2
402+  8AC2              ; ------------------------------------------------------------------------------------------------------------------
403+  8AC2
404+  8AC2              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8AC2              ;
406+  8AC2              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8AC2
408+  8AC2 7D           column ld a,l
409+  8AC3 E6 1F        	and $1f
410+  8AC5 FE 10         	cp $10
411+  8AC7 C9            	ret
412+  8AC8
413+  8AC8              ; --------------------------------------------------------------------------------------------------------------------
414+  8AC8              ;
415+  8AC8              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8AC8              ;
417+  8AC8              ; 14/12/22
418+  8AC8              ;
419+  8AC8              ;	Modifica: A y BC.
420+  8AC8
421+  8AC8 3A 96 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8ACB E6 01        	and 1
423+  8ACD 28 17        	jr z,1F
424+  8ACF
425+  8ACF              ; Nos encontramos en la parte izquierda de la pantalla
426+  8ACF
427+  8ACF 3A 88 85     	ld a,(Coordenada_X)
428+  8AD2 47           	ld b,a
429+  8AD3 04           	inc b											; (Coordenada_X)+1 en B.
430+  8AD4 79           	ld a,c
431+  8AD5 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8AD6 38 08        	jr c,2F
433+  8AD8 47           	ld b,a
434+  8AD9 79           	ld a,c
435+  8ADA 90           	sub b
436+  8ADB 32 B8 85     	ld (Columnas),a
437+  8ADE 18 1B        	jr 4F
438+  8AE0 79           2 ld a,c
439+  8AE1 32 B8 85     	ld (Columnas),a
440+  8AE4 18 15        	jr 4F
441+  8AE6
442+  8AE6              ; Nos encontramos en la parte derecha de la pantalla.
443+  8AE6
444+  8AE6 3A 88 85     1 ld a,(Coordenada_X)
445+  8AE9 81           	add c
446+  8AEA 3D           	dec a
447+  8AEB D6 1F        	sub $1f
448+  8AED 38 08        	jr c,3F
449+  8AEF 47           	ld b,a
450+  8AF0 79           	ld a,c
451+  8AF1 90           	sub b
452+  8AF2 32 B8 85     	ld (Columnas),a
453+  8AF5 18 04        	jr 4F
454+  8AF7 79           3 ld a,c
455+  8AF8 32 B8 85     	ld (Columnas),a
456+  8AFB D9           4 exx
457+  8AFC 4F           	ld c,a
458+  8AFD D9           	exx
459+  8AFE C9            ret
460+  8AFF
461+  8AFF              ; --------------------------------------------------------------------------------------------------------------------
462+  8AFF              ;
463+  8AFF              ; 7/1/23
464+  8AFF              ;
465+  8AFF              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8AFF              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8AFF              ;
468+  8AFF              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8AFF              ;	DESTRUYE: HL,B Y A.
470+  8AFF
471+  8AFF 3A 96 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8B02 FE 02        	cp 2
473+  8B04 38 18        	jr c,1F
474+  8B06 28 16        	jr z,1F
475+  8B08 E6 01        	and 1
476+  8B0A 28 0D        	jr z,3F
477+  8B0C
478+  8B0C              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8B0C
480+  8B0C CD 48 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8B0F
482+  8B0F 7D           9 ld a,l
483+  8B10 E6 1F        	and $1f
484+  8B12 28 2A        	jr z,7F
485+  8B14 2B           	dec hl
486+  8B15 10 F8        	djnz 9B
487+  8B17 18 25        	jr 7F
488+  8B19
489+  8B19              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8B19
491+  8B19 2A 84 85     3 ld hl,(Posicion_actual)
492+  8B1C 18 20        	jr 7F
493+  8B1E
494+  8B1E 28 14        1 jr z,2F
495+  8B20
496+  8B20              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8B20
498+  8B20 CD 48 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8B23 7D           4 ld a,l
500+  8B24 E6 1F        	and $1f
501+  8B26 28 03        	jr z,6F
502+  8B28 2B           	dec hl
503+  8B29 10 F8        	djnz 4B
504+  8B2B 06 0F        6 ld b,15
505+  8B2D CD A9 8B     5 call PreviousScan
506+  8B30 10 FB        	djnz 5B
507+  8B32 18 0A        	jr 7F
508+  8B34
509+  8B34              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8B34
511+  8B34 CD 48 8B     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8B37 06 0F        	ld b,15
513+  8B39 CD A9 8B     8 call PreviousScan
514+  8B3C 10 FB        	djnz 8B
515+  8B3E
516+  8B3E E5           7 push hl
517+  8B3F DD E1        	pop ix
518+  8B41
519+  8B41 2A 86 85     	ld hl,(Puntero_objeto)
520+  8B44 E5           	push hl
521+  8B45 FD E1        	pop iy
522+  8B47
523+  8B47 C9           	ret
524+  8B48
525+  8B48              ; --------------------------------------------------------------------------------------------------------------------
526+  8B48              ;
527+  8B48              ;	2/1/23
528+  8B48              ;
529+  8B48              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8B48              ;
531+  8B48              ;	Tras esta rutina tenemos:
532+  8B48              ;
533+  8B48              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8B48              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8B48              ;
536+  8B48              ;	DESTRUYE!!!!! HL,B y A.
537+  8B48
538+  8B48 2A 84 85     Operandos ld hl,(Posicion_actual)
539+  8B4B 3A B8 85     	ld a,(Columnas)
540+  8B4E 3D           	dec a
541+  8B4F 20 01        	jr nz,1F
542+  8B51 3C           	inc a
543+  8B52 47           1 ld b,a
544+  8B53 C9           	ret
545+  8B54
546+  8B54              ; --------------------------------------------------------------------------------------------------------------------
547+  8B54              ;
548+  8B54              ;	3/1/23
549+  8B54              ;
550+  8B54              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8B54              ;
552+  8B54              ;	Destruye: A,B,HL y DE.
553+  8B54
554+  8B54              Define_rutina_de_impresion
555+  8B54
556+  8B54 3A 83 85     	ld a,(Columns)
557+  8B57 47           	ld b,a
558+  8B58 3A B8 85     	ld a,(Columnas)
559+  8B5B B8           	cp b
560+  8B5C 20 0D        	jr nz,2f
561+  8B5E
562+  8B5E              ;	La entidad se imprime entera.
563+  8B5E
564+  8B5E 21 F5 8B     	ld hl, Indice_entidades_completas
565+  8B61 E6 01        	and 1
566+  8B63 28 02        	jr z,1F
567+  8B65
568+  8B65 23           	inc hl
569+  8B66 23           	inc hl
570+  8B67
571+  8B67 CD 38 87     1 call Extrae_address
572+  8B6A C9           	ret		;	ret
573+  8B6B
574+  8B6B              ;	La entidad no se imprime entera en pantalla.
575+  8B6B
576+  8B6B 3A 96 85     2 ld a,(Cuad_objeto)
577+  8B6E E6 01        	and 1
578+  8B70 28 17        	jr z,3F
579+  8B72
580+  8B72              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8B72
582+  8B72 21 F9 8B     	ld hl, Indice_entidades_incompletas_izquierda
583+  8B75 3A 83 85     4 ld a,(Columns)
584+  8B78 E6 01        	and 1
585+  8B7A 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8B7C
587+  8B7C 23           	inc hl
588+  8B7D 23           	inc hl
589+  8B7E
590+  8B7E 3A B8 85     	ld a,(Columnas)
591+  8B81 E6 01        	and 1
592+  8B83 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8B85
594+  8B85 23           	inc hl
595+  8B86 23           	inc hl
596+  8B87
597+  8B87 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8B89
599+  8B89 21 FF 8B     3 ld hl, Indice_entidades_incompletas_derecha
600+  8B8C 18 E7        	jr 4B
601+  8B8E
602+  8B8E              ; --------------------------------------------------------------------------------------------------------------------
603+  8B8E              ;
604+  8B8E              ;	Prepara_draw
605+  8B8E              ;
606+  8B8E              ;	Es una rutina de carga.
607+  8B8E              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8B8E              ;
609+  8B8E              ;	FUNCIONAMIENTO:
610+  8B8E              ;
611+  8B8E              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8B8E              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8B8E              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8B8E              ;
615+  8B8E              ;	DESTRUYE:
616+  8B8E              ;
617+  8B8E              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8B8E
619+  8B8E 21 82 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8B91 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8B92 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8B93 4E           	ld c,(hl)
623+  8B94 2A 84 85     	ld hl,(Posicion_actual)
624+  8B97 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8B99 C9           	ret
626+  8B9A
627+  8B9A              ;----------------------------------------------------------------------------------------------------------------
628+  8B9A              ;
629+  8B9A              ;	5/08/22
630+  8B9A              ;
631+  8B9A              ;   NextScan.
632+  8B9A              ;
633+  8B9A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8B9A              ;
635+  8B9A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8B9A              ;
637+  8B9A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8B9A              ;
639+  8B9A              ;       DESTRUIDOS: AF y HL !!!
640+  8B9A              ;
641+  8B9A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8B9A              ;
643+  8B9A
644+  8B9A 24           NextScan inc h          ; Incrementamos el scanline.
645+  8B9B 7C               ld a,h
646+  8B9C E6 07            and 7
647+  8B9E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8B9F
649+  8B9F 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8BA0 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8BA2 6F               ld l,a
652+  8BA3 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8BA4
654+  8BA4 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8BA5 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8BA7 67               ld h,a
657+  8BA8 C9               ret
658+  8BA9
659+  8BA9              ;----------------------------------------------------------------------------------------------------------------
660+  8BA9              ;
661+  8BA9              ;	5/08/22
662+  8BA9              ;
663+  8BA9              ;   PreviousScan.
664+  8BA9              ;
665+  8BA9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8BA9              ;
667+  8BA9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8BA9              ;
669+  8BA9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8BA9              ;
671+  8BA9              ;       DESTRUIDOS: AF y HL !!!
672+  8BA9              ;
673+  8BA9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8BA9              ;
675+  8BA9
676+  8BA9 7C           PreviousScan ld a,h
677+  8BAA 25               dec h               ; Dec H.
678+  8BAB E6 07            and 7
679+  8BAD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8BAE
681+  8BAE 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8BAF D6 20            sub $20             ; Vamos a comprobarlo...
683+  8BB1 6F               ld l,a
684+  8BB2 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8BB3
686+  8BB3 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8BB4 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8BB6 67               ld h,a
689+  8BB7 C9               ret
690+  8BB8
691+  8BB8              ; -----------------------------------------------------------------------------------
692+  8BB8              ;
693+  8BB8              ;	15/1/23
694+  8BB8
695+  8BB8              Extrae_foto_registros
696+  8BB8
697+  8BB8 3A C3 85     	ld a,(Numero_de_malotes)
698+  8BBB A7           	and a
699+  8BBC C8           	ret z
700+  8BBD
701+  8BBD
702+  8BBD ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8BC1 31 00 70     	ld sp,Album_de_fotos
704+  8BC4
705+  8BC4 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8BC6 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8BC7 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8BC8
709+  8BC8 ED 73 C6 85  	ld (Stack_2),sp
710+  8BCC ED 7B C4 85  	ld sp,(Stack)
711+  8BD0
712+  8BD0              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8BD0
714+  8BD0 3E CD        	ld a,$cd
715+  8BD2 32 DA 8B     	ld (Imprime),a
716+  8BD5 EB           	ex de,hl
717+  8BD6 22 DB 8B     	ld (Imprime+1),hl
718+  8BD9 EB           	ex de,hl
719+  8BDA
720+  8BDA              ; Ejecuta la llamada:	CALL $xx,xx
721+  8BDA
722+  8BDA 00 00 00     Imprime db 0,0,0
723+  8BDD
724+  8BDD ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8BE1
726+  8BE1 3A C3 85     	ld a,(Numero_de_malotes)
727+  8BE4 3D           	dec a
728+  8BE5 28 09        	jr z,1F
729+  8BE7 32 C3 85      	ld (Numero_de_malotes),a
730+  8BEA ED 7B C6 85  	ld sp,(Stack_2)
731+  8BEE 18 D4        	jr 2B
732+  8BF0
733+  8BF0 AF           1 xor a
734+  8BF1 32 C6 85     	ld (Stack_2),a
735+  8BF4 C9           	ret
736+  8BF5
737+  8BF5
# file closed: Draw_XOR.asm
760   8BF5              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8BF5              ;   índices de Rutinas de impresión.
  2+  8BF5
  3+  8BF5 05 8C        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8BF7 32 8C            defw Pinta_Amadeus_3x2
  5+  8BF9
  6+  8BF9 88 8C        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8BFB 28 8D            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8BFD DC 8C            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8BFF
 10+  8BFF B2 8C        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8C01 B6 8D            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8C03 6A 8D            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8C05
 14+  8C05
 15+  8C05              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8C05              ;
 17+  8C05              ;   12/12/22
 18+  8C05              ;
 19+  8C05              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8C05              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8C05              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8C05              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8C05              ;
 24+  8C05              ;   Modifica: DE y HL.
 25+  8C05
 26+  8C05 ED 73 C4 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8C09 FD F9        	ld sp,iy
 28+  8C0B
 29+  8C0B              ; >>>
 30+  8C0B
 31+  8C0B 06 10            ld b,16
 32+  8C0D D1           1 pop de
 33+  8C0E 7B               ld a,e
 34+  8C0F AE               xor (hl)
 35+  8C10 77           	ld (hl),a
 36+  8C11 23           	inc hl
 37+  8C12 7A               ld a,d
 38+  8C13 AE               xor (hl)
 39+  8C14 77           	ld (hl),a
 40+  8C15 2B           	dec hl
 41+  8C16 24           	inc h
 42+  8C17 7C               ld a,h
 43+  8C18 E6 07            and 7
 44+  8C1A 20 0A            jr nz,2F
 45+  8C1C 7D               ld a,l
 46+  8C1D C6 20            add a,$20
 47+  8C1F 6F               ld l,a
 48+  8C20 38 04            jr c,2F
 49+  8C22 7C               ld a,h
 50+  8C23 D6 08            sub 8
 51+  8C25 67               ld h,a
 52+  8C26 7C           2 ld a,h
 53+  8C27 FE 58            cp $58
 54+  8C29 28 02            jr z,3F
 55+  8C2B 10 E0            djnz 1B
 56+  8C2D ED 7B C4 85  3 ld sp,(Stack)
 57+  8C31 C9           	ret
 58+  8C32
 59+  8C32 ED 73 C4 85  Pinta_Amadeus_3x2 ld (Stack),sp
 60+  8C36 FD F9        	ld sp,iy
 61+  8C38 06 08            ld b,8
 62+  8C3A D1           1 pop de
 63+  8C3B 7B               ld a,e
 64+  8C3C AE               xor (hl)
 65+  8C3D 77           	ld (hl),a
 66+  8C3E 23           	inc hl
 67+  8C3F 7A               ld a,d
 68+  8C40 AE               xor (hl)
 69+  8C41 77           	ld (hl),a
 70+  8C42 23           	inc hl
 71+  8C43 D1           	pop de
 72+  8C44 7B               ld a,e
 73+  8C45 AE               xor (hl)
 74+  8C46 77           	ld (hl),a
 75+  8C47 2B           	dec hl
 76+  8C48 2B           	dec hl
 77+  8C49 24           	inc h
 78+  8C4A 7C               ld a,h
 79+  8C4B E6 07            and 7
 80+  8C4D 20 0A            jr nz,2F
 81+  8C4F 7D               ld a,l
 82+  8C50 C6 20            add a,$20
 83+  8C52 6F               ld l,a
 84+  8C53 38 04            jr c,2F
 85+  8C55 7C               ld a,h
 86+  8C56 D6 08            sub 8
 87+  8C58 67               ld h,a
 88+  8C59 7C           2 ld a,h
 89+  8C5A FE 58            cp $58
 90+  8C5C 28 25            jr z,4F
 91+  8C5E 7A               ld a,d
 92+  8C5F AE               xor (hl)
 93+  8C60 77               ld (hl),a
 94+  8C61 D1           	pop de
 95+  8C62 23           	inc hl
 96+  8C63 7B               ld a,e
 97+  8C64 AE               xor (hl)
 98+  8C65 77           	ld (hl),a
 99+  8C66 23           	inc hl
100+  8C67 7A               ld a,d
101+  8C68 AE               xor (hl)
102+  8C69 77           	ld (hl),a
103+  8C6A 2B           	dec hl
104+  8C6B 2B           	dec hl
105+  8C6C 24           	inc h
106+  8C6D 7C               ld a,h
107+  8C6E E6 07            and 7
108+  8C70 20 0A            jr nz,3F
109+  8C72 7D               ld a,l
110+  8C73 C6 20            add a,$20
111+  8C75 6F               ld l,a
112+  8C76 38 04            jr c,3F
113+  8C78 7C               ld a,h
114+  8C79 D6 08            sub 8
115+  8C7B 67               ld h,a
116+  8C7C 7C           3 ld a,h
117+  8C7D FE 58            cp $58
118+  8C7F 28 02            jr z,4F
119+  8C81 10 B7            djnz 1B
120+  8C83 ED 7B C4 85  4 ld sp,(Stack)
121+  8C87 C9           	ret
122+  8C88
123+  8C88              ; ---------------------------------------------------
124+  8C88
125+  8C88 ED 73 C4 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
126+  8C8C FD F9        	ld sp,iy
127+  8C8E
128+  8C8E              ; >>>
129+  8C8E
130+  8C8E 06 10            ld b,16
131+  8C90 D1           1 pop de
132+  8C91 7A           	ld a,d
133+  8C92 AE           	xor (hl)
134+  8C93 77           	ld (hl),a
135+  8C94 24           	inc h
136+  8C95 7C               ld a,h
137+  8C96 E6 07            and 7
138+  8C98 20 0C            jr nz,2F
139+  8C9A 7D               ld a,l
140+  8C9B C6 20            add a,$20
141+  8C9D 6F               ld l,a
142+  8C9E 38 06            jr c,2F
143+  8CA0 7C               ld a,h
144+  8CA1 D6 08            sub 8
145+  8CA3 67               ld h,a
146+  8CA4 18 00            jr 2F
147+  8CA6 7C           2 ld a,h
148+  8CA7 FE 58            cp $58
149+  8CA9 28 02            jr z,3F
150+  8CAB 10 E3            djnz 1B
151+  8CAD ED 7B C4 85  3 ld sp,(Stack)
152+  8CB1 C9           	ret
153+  8CB2
154+  8CB2 ED 73 C4 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
155+  8CB6 FD F9        	ld sp,iy
156+  8CB8
157+  8CB8              ; >>>
158+  8CB8
159+  8CB8 06 10            ld b,16
160+  8CBA D1           1 pop de
161+  8CBB 7B           	ld a,e
162+  8CBC AE           	xor (hl)
163+  8CBD 77           	ld (hl),a
164+  8CBE 24           	inc h
165+  8CBF 7C               ld a,h
166+  8CC0 E6 07            and 7
167+  8CC2 20 0C            jr nz,2F
168+  8CC4 7D               ld a,l
169+  8CC5 C6 20            add a,$20
170+  8CC7 6F               ld l,a
171+  8CC8 38 06            jr c,2F
172+  8CCA 7C               ld a,h
173+  8CCB D6 08            sub 8
174+  8CCD 67               ld h,a
175+  8CCE 18 00            jr 2F
176+  8CD0 7C           2 ld a,h
177+  8CD1 FE 58            cp $58
178+  8CD3 28 02            jr z,3F
179+  8CD5 10 E3            djnz 1B
180+  8CD7 ED 7B C4 85  3 ld sp,(Stack)
181+  8CDB C9           	ret
182+  8CDC
183+  8CDC              ; ---------------------------------------------------
184+  8CDC
185+  8CDC ED 73 C4 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
186+  8CE0 FD F9        	ld sp,iy
187+  8CE2 06 08            ld b,8
188+  8CE4 D1           1 pop de
189+  8CE5 7A           	ld a,d
190+  8CE6 AE           	xor (hl)
191+  8CE7 77           	ld (hl),a
192+  8CE8 23           	inc hl
193+  8CE9 D1           	pop de
194+  8CEA 7B           	ld a,e
195+  8CEB AE           	xor (hl)
196+  8CEC 77           	ld (hl),a
197+  8CED 2B           	dec hl
198+  8CEE 24            	inc h
199+  8CEF 7C               ld a,h
200+  8CF0 E6 07            and 7
201+  8CF2 20 0A            jr nz,2F
202+  8CF4 7D               ld a,l
203+  8CF5 C6 20            add a,$20
204+  8CF7 6F               ld l,a
205+  8CF8 38 04            jr c,2F
206+  8CFA 7C               ld a,h
207+  8CFB D6 08            sub 8
208+  8CFD 67               ld h,a
209+  8CFE 7C           2 ld a,h
210+  8CFF FE 58            cp $58
211+  8D01 28 20            jr z,4F
212+  8D03 D1               pop de
213+  8D04 7B           	ld a,e
214+  8D05 AE           	xor (hl)
215+  8D06 77           	ld (hl),a
216+  8D07 23           	inc hl
217+  8D08 7A           	ld a,d
218+  8D09 AE           	xor (hl)
219+  8D0A 77           	ld (hl),a
220+  8D0B 2B           	dec hl
221+  8D0C 24           	inc h
222+  8D0D 7C               ld a,h
223+  8D0E E6 07            and 7
224+  8D10 20 0A            jr nz,3F
225+  8D12 7D               ld a,l
226+  8D13 C6 20            add a,$20
227+  8D15 6F               ld l,a
228+  8D16 38 04            jr c,3F
229+  8D18 7C               ld a,h
230+  8D19 D6 08            sub 8
231+  8D1B 67               ld h,a
232+  8D1C 7C           3 ld a,h
233+  8D1D FE 58            cp $58
234+  8D1F 28 02            jr z,4F
235+  8D21 10 C1            djnz 1B
236+  8D23 ED 7B C4 85  4 ld sp,(Stack)
237+  8D27 C9           	ret
238+  8D28
239+  8D28 ED 73 C4 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
240+  8D2C FD F9        	ld sp,iy
241+  8D2E 06 08            ld b,8
242+  8D30 D1           1 pop de
243+  8D31 D1           	pop de
244+  8D32 7B           	ld a,e
245+  8D33 AE           	xor (hl)
246+  8D34 77           	ld (hl),a
247+  8D35 24            	inc h
248+  8D36 7C               ld a,h
249+  8D37 E6 07            and 7
250+  8D39 20 0A            jr nz,2F
251+  8D3B 7D               ld a,l
252+  8D3C C6 20            add a,$20
253+  8D3E 6F               ld l,a
254+  8D3F 38 04            jr c,2F
255+  8D41 7C               ld a,h
256+  8D42 D6 08            sub 8
257+  8D44 67               ld h,a
258+  8D45 7C           2 ld a,h
259+  8D46 FE 58            cp $58
260+  8D48 28 1B            jr z,4F
261+  8D4A D1               pop de
262+  8D4B 7A           	ld a,d
263+  8D4C AE           	xor (hl)
264+  8D4D 77           	ld (hl),a
265+  8D4E 24           	inc h
266+  8D4F 7C               ld a,h
267+  8D50 E6 07            and 7
268+  8D52 20 0A            jr nz,3F
269+  8D54 7D               ld a,l
270+  8D55 C6 20            add a,$20
271+  8D57 6F               ld l,a
272+  8D58 38 04            jr c,3F
273+  8D5A 7C               ld a,h
274+  8D5B D6 08            sub 8
275+  8D5D 67               ld h,a
276+  8D5E 7C           3 ld a,h
277+  8D5F FE 58            cp $58
278+  8D61 28 02            jr z,4F
279+  8D63 10 CB            djnz 1B
280+  8D65 ED 7B C4 85  4 ld sp,(Stack)
281+  8D69 C9           	ret
282+  8D6A
283+  8D6A ED 73 C4 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
284+  8D6E FD F9        	ld sp,iy
285+  8D70 06 08            ld b,8
286+  8D72 D1           1 pop de
287+  8D73 7B           	ld a,e
288+  8D74 AE           	xor (hl)
289+  8D75 77           	ld (hl),a
290+  8D76 23           	inc hl
291+  8D77 7A           	ld a,d
292+  8D78 AE           	xor (hl)
293+  8D79 77           	ld (hl),a
294+  8D7A 2B           	dec hl
295+  8D7B 24             	inc h
296+  8D7C 7C               ld a,h
297+  8D7D E6 07            and 7
298+  8D7F 20 0A            jr nz,2F
299+  8D81 7D               ld a,l
300+  8D82 C6 20            add a,$20
301+  8D84 6F               ld l,a
302+  8D85 38 04            jr c,2F
303+  8D87 7C               ld a,h
304+  8D88 D6 08            sub 8
305+  8D8A 67               ld h,a
306+  8D8B 7C           2 ld a,h
307+  8D8C FE 58            cp $58
308+  8D8E 28 21            jr z,4F
309+  8D90 D1               pop de
310+  8D91 7A           	ld a,d
311+  8D92 AE           	xor (hl)
312+  8D93 77           	ld (hl),a
313+  8D94 23           	inc hl
314+  8D95 D1               pop de
315+  8D96 7B           	ld a,e
316+  8D97 AE           	xor (hl)
317+  8D98 77           	ld (hl),a
318+  8D99 2B           	dec hl
319+  8D9A 24           	inc h
320+  8D9B 7C               ld a,h
321+  8D9C E6 07            and 7
322+  8D9E 20 0A            jr nz,3F
323+  8DA0 7D               ld a,l
324+  8DA1 C6 20            add a,$20
325+  8DA3 6F               ld l,a
326+  8DA4 38 04            jr c,3F
327+  8DA6 7C               ld a,h
328+  8DA7 D6 08            sub 8
329+  8DA9 67               ld h,a
330+  8DAA 7C           3 ld a,h
331+  8DAB FE 58            cp $58
332+  8DAD 28 02            jr z,4F
333+  8DAF 10 C1            djnz 1B
334+  8DB1 ED 7B C4 85  4 ld sp,(Stack)
335+  8DB5 C9           	ret
336+  8DB6
337+  8DB6 ED 73 C4 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
338+  8DBA FD F9        	ld sp,iy
339+  8DBC 06 08            ld b,8
340+  8DBE D1           1 pop de
341+  8DBF 7B           	ld a,e
342+  8DC0 AE           	xor (hl)
343+  8DC1 77           	ld (hl),a
344+  8DC2 24            	inc h
345+  8DC3 7C               ld a,h
346+  8DC4 E6 07            and 7
347+  8DC6 20 0A            jr nz,2F
348+  8DC8 7D               ld a,l
349+  8DC9 C6 20            add a,$20
350+  8DCB 6F               ld l,a
351+  8DCC 38 04            jr c,2F
352+  8DCE 7C               ld a,h
353+  8DCF D6 08            sub 8
354+  8DD1 67               ld h,a
355+  8DD2 7C           2 ld a,h
356+  8DD3 FE 58            cp $58
357+  8DD5 28 1C            jr z,4F
358+  8DD7 D1               pop de
359+  8DD8 7A           	ld a,d
360+  8DD9 AE           	xor (hl)
361+  8DDA 77           	ld (hl),a
362+  8DDB 24           	inc h
363+  8DDC 7C               ld a,h
364+  8DDD E6 07            and 7
365+  8DDF 20 0A            jr nz,3F
366+  8DE1 7D               ld a,l
367+  8DE2 C6 20            add a,$20
368+  8DE4 6F               ld l,a
369+  8DE5 38 04            jr c,3F
370+  8DE7 7C               ld a,h
371+  8DE8 D6 08            sub 8
372+  8DEA 67               ld h,a
373+  8DEB 7C           3 ld a,h
374+  8DEC FE 58            cp $58
375+  8DEE 28 03            jr z,4F
376+  8DF0 D1               pop de
377+  8DF1 10 CB            djnz 1B
378+  8DF3 ED 7B C4 85  4 ld sp,(Stack)
379+  8DF7 C9           	ret
380+  8DF8
381+  8DF8              ; ---------------------------------------------------
382+  8DF8
# file closed: Rutinas_de_impresion_sprites.asm
761   8DF8              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8DF8              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8DF8              ;
  3+  8DF8              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8DF8              ;
  5+  8DF8              ; *****************************************************************************************************************************************************************************************
  6+  8DF8              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8DF8
  8+  8DF8 7C           calcula_tercio ld a,h
  9+  8DF9 E6 18        	and $18
 10+  8DFB CB 2F        	sra a
 11+  8DFD CB 2F        	sra a
 12+  8DFF CB 2F        	sra a
 13+  8E01 C9           	ret
 14+  8E02
# file closed: calcula_tercio.asm
762   8E02              	include "Cls.asm"
# file opened: Cls.asm
  1+  8E02              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8E02              ;
  3+  8E02              ;
  4+  8E02              ;	CLS.
  5+  8E02              ;
  6+  8E02              ;	Limpia la pantalla y define sus atributos.
  7+  8E02              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8E02              ;
  9+  8E02              ;	COLORES: 0 ..... NEGRO
 10+  8E02              ;    		 1 ..... AZUL
 11+  8E02              ; 			 2 ..... ROJO
 12+  8E02              ;			 3 ..... MAGENTA
 13+  8E02              ; 			 4 ..... VERDE
 14+  8E02              ; 			 5 ..... CIAN
 15+  8E02              ;			 6 ..... AMARILLO
 16+  8E02              ; 			 7 ..... BLANCO
 17+  8E02              ;
 18+  8E02              ;	INPUT: A contiene los atributos de pantalla.
 19+  8E02              ;
 20+  8E02              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8E02
 22+  8E02
 23+  8E02 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8E05 11 01 40     	LD DE,$4001
 25+  8E08 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8E0B 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8E0D ED B0        	LDIR
 28+  8E0F 01 FF 02     	LD BC,767
 29+  8E12 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8E13 ED B0        	LDIR
 31+  8E15 C9           	ret
 32+  8E16
# file closed: Cls.asm
763   8E16              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8E16              ; ******************************************************************************************************************************************************************************************
  2+  8E16              ;
  3+  8E16              ;   22/01/23
  4+  8E16              ;
  5+  8E16              ;	Mov_down
  6+  8E16              ;
  7+  8E16              ; 	Mueve el Sprite X px hacia abajo.
  8+  8E16              ;
  9+  8E16              ;
 10+  8E16 21 AF 85     Mov_down ld hl,Ctrl_0
 11+  8E19 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8E1B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8E1B              ; 																	; _ en el caso de que no lo haya.
 14+  8E1B 3A 9A 85     	ld a,(Vel_down)
 15+  8E1E 47           	ld b,a
 16+  8E1F 2A 84 85         ld hl,(Posicion_actual)
 17+  8E22 CD F8 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8E25 E6 02        	and 2
 19+  8E27 28 0F        	jr z,1F
 20+  8E29
 21+  8E29              ; Nos encontramos en el último tercio de pantalla.
 22+  8E29              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8E29
 24+  8E29 7C           	ld a,h
 25+  8E2A FE 57        	cp $57
 26+  8E2C 20 0A        	jr nz,1F
 27+  8E2E 7D           	ld a,l
 28+  8E2F C6 20        	add $20
 29+  8E31 30 05        	jr nc,1F
 30+  8E33
 31+  8E33              ; ------------------------------
 32+  8E33 CD 14 91     	call Reaparece_arriba
 33+  8E36              ;	call Reinicio
 34+  8E36              ; ------------------------------
 35+  8E36 18 08        	jr 3F
 36+  8E38 CD 9A 8B     1 call NextScan
 37+  8E3B 22 84 85     	ld (Posicion_actual),hl
 38+  8E3E 10 E2            djnz 2B
 39+  8E40 CD 2A 91     3 call Genera_coordenadas
 40+  8E43 C9           	ret
 41+  8E44
 42+  8E44
 43+  8E44              ; ******************************************************************************************************************************************************************************************
 44+  8E44              ;
 45+  8E44              ;   22/01/23
 46+  8E44              ;
 47+  8E44              ;	Mov_up
 48+  8E44              ;
 49+  8E44              ; 	Mueve el Sprite hacia arriba.
 50+  8E44              ;
 51+  8E44              ;
 52+  8E44 21 AF 85     Mov_up ld hl,Ctrl_0
 53+  8E47 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8E49              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8E49              ; 																		; _ en el caso de que no lo haya.
 56+  8E49 3A 99 85     	ld a,(Vel_up)
 57+  8E4C 47           	ld b,a
 58+  8E4D 2A 84 85     	ld hl,(Posicion_actual)
 59+  8E50 CD F8 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8E53 A7           	and a
 61+  8E54 20 10        	jr nz,1F
 62+  8E56
 63+  8E56              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8E56              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8E56
 66+  8E56 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8E57 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8E59 20 0B            jr nz,1F
 69+  8E5B 7D               ld a,l
 70+  8E5C D6 20            sub $20
 71+  8E5E 30 06            jr nc,1F
 72+  8E60 25               dec h
 73+  8E61
 74+  8E61              ; -----------------------------
 75+  8E61 CD 04 91         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8E64              ;	call Reinicio
 77+  8E64              ; -----------------------------
 78+  8E64
 79+  8E64 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8E66 CD A9 8B     1 call PreviousScan
 81+  8E69 22 84 85     	ld (Posicion_actual),hl
 82+  8E6C 10 E2            djnz 3B
 83+  8E6E CD 2A 91     2 call Genera_coordenadas
 84+  8E71 C9           	ret
 85+  8E72
 86+  8E72              ; ******************************************************************************************************************************************************************************************
 87+  8E72              ;
 88+  8E72              ;	19/10/22
 89+  8E72              ;
 90+  8E72              ;	Mov_right.
 91+  8E72              ;
 92+  8E72              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8E72              ;
 94+  8E72
 95+  8E72 21 AF 85     Mov_right ld hl,Ctrl_0
 96+  8E75 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8E77              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8E77              ; 																	; _ en el caso de que no lo haya.
 99+  8E77 3A AF 85     	ld a,(Ctrl_0)
100+  8E7A CB 77        	bit 6,a
101+  8E7C 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8E7E
103+  8E7E CD B2 90     	call Stop_Amadeus_right
104+  8E81 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8E82 18 4D        	jr 8F
106+  8E84
107+  8E84 3A 88 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8E87 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8E89 20 46        	jr nz,8F
110+  8E8B
111+  8E8B 3A 8A 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8E8E A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8E8F 28 40        	jr z,8F
114+  8E91
115+  8E91              ; ---------- ---------- ----------
116+  8E91              ;
117+  8E91              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8E91
119+  8E91 3A 98 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8E94 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8E96 28 11        	jr z,1F
122+  8E98 38 06        	jr c,6F
123+  8E9A FE 04        	cp 4
124+  8E9C 28 14        	jr z,7F
125+  8E9E 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8EA0
127+  8EA0              ; ---------- ---------- ----------
128+  8EA0              ;
129+  8EA0              ; Perfiles de velocidad
130+  8EA0              ;
131+  8EA0
132+  8EA0 3A 8A 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8EA3 FE FE        	cp $fe
134+  8EA5 20 2A        	jr nz,8F
135+  8EA7 18 10        	jr 3F
136+  8EA9 3A 8A 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8EAC FE FD        	cp $fd
138+  8EAE 20 21        	jr nz,8F
139+  8EB0 18 07        	jr 3F
140+  8EB2 3A 8A 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8EB5 FE FB        	cp $fb
142+  8EB7 20 18        	jr nz,8F
143+  8EB9
144+  8EB9              ; ---------- ---------- ----------
145+  8EB9
146+  8EB9              3
147+  8EB9 CD F2 90     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8EBC              ;	call Reinicio
149+  8EBC
150+  8EBC              ; ---------- ---------- ----------
151+  8EBC              ;
152+  8EBC              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8EBC
154+  8EBC 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8EBE C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8EBF CD D8 8E     	call DESPLZ_DER
157+  8EC2 C1           	pop bc
158+  8EC3 10 F9        	djnz 5B
159+  8EC5 2A 84 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8EC8 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8EC9 22 84 85     	ld (Posicion_actual),hl
162+  8ECC CD 2A 91     	call Genera_coordenadas
163+  8ECF 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8ED1
165+  8ED1              ; ---------- ---------- ----------
166+  8ED1
167+  8ED1 2A 84 85     8 ld hl,(Posicion_actual)
168+  8ED4 CD D8 8E     	call DESPLZ_DER
169+  8ED7 C9           2 ret
170+  8ED8
171+  8ED8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8ED8              ;
173+  8ED8              ;	22/9/22
174+  8ED8              ;
175+  8ED8
176+  8ED8 CD E7 8E     DESPLZ_DER call Desplaza_derecha
177+  8EDB CD 33 8F         call modifica_parametros_1er_DESPLZ_2
178+  8EDE CD 5C 8F         call Ciclo_completo
179+  8EE1 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8EE4 CB FE        	set 7,(hl)
181+  8EE6 C9           	ret
182+  8EE7
183+  8EE7              ; ******************************************************************************************************************************************************************************************
184+  8EE7              ;	15/02/23
185+  8EE7              ;
186+  8EE7
187+  8EE7 3A 98 85     Desplaza_derecha ld a,(Vel_right)
188+  8EEA 47           	ld b,a
189+  8EEB 2A 90 85     	ld hl,(Puntero_DESPLZ_der)
190+  8EEE 23           1 inc hl
191+  8EEF 23           	inc hl
192+  8EF0 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8EF2 22 90 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8EF5 CD 38 87     	call Extrae_address
195+  8EF8 22 86 85     	ld (Puntero_objeto),hl
196+  8EFB
197+  8EFB              ; Modifica (Puntero_DESPLZ_izq).
198+  8EFB
199+  8EFB              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8EFB              ; Cuántos movimientos hemos hecho ??
201+  8EFB              ; DE contiene (Puntero_DESPLZ_der).
202+  8EFB
203+  8EFB 2A 8C 85     7 ld hl,(Indice_Sprite_der)
204+  8EFE EB           	ex de,hl
205+  8EFF A7           	and a
206+  8F00 ED 52        	sbc hl,de
207+  8F02 CB 3D        	srl l
208+  8F04 3E 08        6 ld a,8
209+  8F06 95           	sub l
210+  8F07 30 1E        	jr nc,3F
211+  8F09
212+  8F09              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8F09              ; B="0".
214+  8F09
215+  8F09 04           4 inc b
216+  8F0A 3C           	inc a
217+  8F0B 20 FC        	jr nz,4B
218+  8F0D 78           	ld a,b
219+  8F0E 08           	ex af,af
220+  8F0F 2A 8C 85     	ld hl,(Indice_Sprite_der)
221+  8F12 23           5 inc hl
222+  8F13 23           	inc hl
223+  8F14 10 FC        	djnz 5B
224+  8F16 22 90 85     	ld (Puntero_DESPLZ_der),hl
225+  8F19 CD 38 87     	call Extrae_address
226+  8F1C 22 86 85     	ld (Puntero_objeto),hl
227+  8F1F
228+  8F1F              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8F1F              ; _(Posicion_actual).
230+  8F1F
231+  8F1F 21 84 85     	ld hl,Posicion_actual
232+  8F22 34           	inc (hl)
233+  8F23 08               ex af,af
234+  8F24 6F           	ld l,a
235+  8F25 18 DD        	jr 6B
236+  8F27
237+  8F27              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8F27
239+  8F27 47           3 ld b,a
240+  8F28 2A 8E 85     	ld hl,(Indice_Sprite_izq)
241+  8F2B 23           2 inc hl
242+  8F2C 23           	inc hl
243+  8F2D 10 FC        	djnz 2B
244+  8F2F 22 92 85     	ld (Puntero_DESPLZ_izq),hl
245+  8F32 C9           8 ret
246+  8F33
247+  8F33              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8F33              ;
249+  8F33              ;	24/7/22
250+  8F33              ;
251+  8F33              ;	modifica_parametros_1er_DESPLZ_2
252+  8F33              ;
253+  8F33              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8F33              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8F33              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8F33
257+  8F33 3A 8A 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8F36 A7           	and a
259+  8F37 20 1F        	jr nz,1F
260+  8F39 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8F3B 32 8A 85         ld (CTRL_DESPLZ),a
262+  8F3E
263+  8F3E 21 83 85     	ld hl,Columns
264+  8F41 34           	inc (hl)
265+  8F42 3A 96 85     	ld a,(Cuad_objeto)
266+  8F45 E6 01        	and 1
267+  8F47 28 0F        	jr z,1F
268+  8F49 2A 84 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8F4C 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8F4D 22 84 85     	ld (Posicion_actual),hl
271+  8F50 CD 2A 91     	call Genera_coordenadas
272+  8F53 CD BE 90     	call Inc_CTRL_DESPLZ
273+  8F56 18 03        	jr 2F
274+  8F58 CD BE 90     1 call Inc_CTRL_DESPLZ
275+  8F5B C9           2 ret
276+  8F5C
277+  8F5C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8F5C              ;
279+  8F5C              ;	24/7/22
280+  8F5C              ;
281+  8F5C              ;	Ciclo_completo.
282+  8F5C              ;
283+  8F5C              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8F5C              ;
285+  8F5C              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8F5C              ; 	Decrementamos (Columns).
287+  8F5C              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8F5C              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8F5C
290+  8F5C
291+  8F5C 3A 8A 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8F5F FE FF        	cp $ff
293+  8F61 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8F63 E6 F0        	and $f0
295+  8F65 20 28        	jr nz,3F
296+  8F67
297+  8F67              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8F67
299+  8F67 3A 8A 85     	ld a,(CTRL_DESPLZ)
300+  8F6A 47           	ld b,a
301+  8F6B 3E F8        	ld a,$f8
302+  8F6D 80           	add b
303+  8F6E 32 8A 85     	ld (CTRL_DESPLZ),a
304+  8F71 18 1C        	jr 3F
305+  8F73 21 83 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8F76 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8F77 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8F78 32 8A 85     	ld (CTRL_DESPLZ),a
309+  8F7B 3A 96 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8F7E E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8F80 20 0A        	jr nz,2F
312+  8F82 2A 84 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8F85 23           	inc hl
314+  8F86 22 84 85     	ld (Posicion_actual),hl
315+  8F89 CD 2A 91     	call Genera_coordenadas
316+  8F8C
317+  8F8C              ; Inicia el puntero de Sprite.
318+  8F8C
319+  8F8C CD 4F 87     2 call Inicia_puntero_objeto_der
320+  8F8F C9           3 ret
321+  8F90
322+  8F90              ; ******************************************************************************************************************************************************************************************
323+  8F90              ;
324+  8F90              ;	15/02/23
325+  8F90              ;
326+  8F90              ;	Mov_left.
327+  8F90              ;
328+  8F90              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8F90              ;
330+  8F90              Mov_left
331+  8F90
332+  8F90 21 AF 85     	ld hl,Ctrl_0
333+  8F93 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8F95              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8F95              ; 																	; _ en el caso de que no lo haya.
336+  8F95 3A AF 85     	ld a,(Ctrl_0)
337+  8F98 CB 77        	bit 6,a
338+  8F9A 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8F9C
340+  8F9C CD B8 90     	call Stop_Amadeus_left
341+  8F9F C8           	ret z
342+  8FA0 20 50        	jr nz,8F
343+  8FA2
344+  8FA2 3A 88 85     11 ld a,(Coordenada_X)
345+  8FA5 A7           	and a
346+  8FA6 20 4A        	jr nz,8F
347+  8FA8
348+  8FA8 3A 8A 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8FAB A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8FAC 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8FAE
352+  8FAE              ; ---------- ---------- ----------
353+  8FAE
354+  8FAE 3A 97 85     	ld a,(Vel_left)
355+  8FB1 FE 02        	cp 2
356+  8FB3 28 0F        	jr z,1F
357+  8FB5 38 04        	jr c,6F
358+  8FB7 FE 04        	cp 4
359+  8FB9 28 12        	jr z,7F
360+  8FBB
361+  8FBB              ; ---------- ---------- ----------
362+  8FBB
363+  8FBB 3A 8A 85     6 ld a,(CTRL_DESPLZ)
364+  8FBE FE F9        	cp $f9
365+  8FC0 20 30        	jr nz,8F
366+  8FC2 18 10        	jr 4F
367+  8FC4 3A 8A 85     1 ld a,(CTRL_DESPLZ)
368+  8FC7 FE FA        	cp $fa
369+  8FC9 20 27        	jr nz,8F
370+  8FCB 18 07        	jr 4F
371+  8FCD 3A 8A 85     7 ld a,(CTRL_DESPLZ)
372+  8FD0 FE FC        	cp $fc
373+  8FD2 20 1E        	jr nz,8F
374+  8FD4
375+  8FD4              ; ---------- ---------- ----------
376+  8FD4
377+  8FD4              4
378+  8FD4 CD E0 90     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8FD7              ;	call Reinicio
380+  8FD7
381+  8FD7              ; ---------- ---------- ----------
382+  8FD7
383+  8FD7 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  8FD9 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  8FDA
386+  8FDA 2A 8E 85     	ld hl,(Indice_Sprite_izq)
387+  8FDD 22 92 85     	ld (Puntero_DESPLZ_izq),hl
388+  8FE0
389+  8FE0 CD F9 8F     	call DESPLZ_IZQ
390+  8FE3 C1           	pop bc
391+  8FE4 10 F3        	djnz 5B
392+  8FE6 2A 84 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  8FE9 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  8FEA 22 84 85     	ld (Posicion_actual),hl
395+  8FED CD 2A 91     	call Genera_coordenadas
396+  8FF0 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  8FF2
398+  8FF2              ; ---------- ---------- ----------
399+  8FF2              ; Movemos, no hay recolocación.
400+  8FF2
401+  8FF2 2A 84 85     8 ld hl,(Posicion_actual)
402+  8FF5 CD F9 8F     	call DESPLZ_IZQ
403+  8FF8 C9           2 ret
404+  8FF9
405+  8FF9              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  8FF9              ;
407+  8FF9              ;	22/9/22
408+  8FF9
409+  8FF9              DESPLZ_IZQ
410+  8FF9
411+  8FF9 CD 08 90     	call Desplaza_izquierda
412+  8FFC CD 54 90         call modifica_parametros_1er_DESPLZ
413+  8FFF CD 7C 90     	call Ciclo_completo_2
414+  9002 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  9005 CB BE        	res 7,(hl)
416+  9007 C9           	ret
417+  9008
418+  9008              Desplaza_izquierda
419+  9008
420+  9008 3A 97 85     	ld a,(Vel_left)
421+  900B 47           	ld b,a
422+  900C 2A 92 85     	ld hl,(Puntero_DESPLZ_izq)
423+  900F 23           1 inc hl
424+  9010 23           	inc hl
425+  9011 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  9013 22 92 85     	ld (Puntero_DESPLZ_izq),hl
427+  9016 CD 38 87     	call Extrae_address
428+  9019 22 86 85     	ld (Puntero_objeto),hl
429+  901C
430+  901C              ; Modifica (Puntero_DESPLZ_der).
431+  901C
432+  901C              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  901C              ; Cuántos movimientos hemos hecho ??
434+  901C              ; DE contiene (Puntero_DESPLZ_izq).
435+  901C
436+  901C 2A 8E 85     7 ld hl,(Indice_Sprite_izq)
437+  901F EB           	ex de,hl
438+  9020 A7           	and a
439+  9021 ED 52        	sbc hl,de
440+  9023 CB 3D        	srl l
441+  9025 3E 08        6 ld a,8
442+  9027 95           	sub l
443+  9028 30 1E        	jr nc,3F
444+  902A
445+  902A              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  902A              ; B="0".
447+  902A
448+  902A 04           4 inc b
449+  902B 3C           	inc a
450+  902C 20 FC        	jr nz,4B
451+  902E 78           	ld a,b
452+  902F 08           	ex af,af
453+  9030 2A 8E 85     	ld hl,(Indice_Sprite_izq)
454+  9033 23           5 inc hl
455+  9034 23           	inc hl
456+  9035 10 FC        	djnz 5B
457+  9037 22 92 85     	ld (Puntero_DESPLZ_izq),hl
458+  903A CD 38 87     	call Extrae_address
459+  903D 22 86 85     	ld (Puntero_objeto),hl
460+  9040
461+  9040              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  9040              ; _(Posicion_actual).
463+  9040
464+  9040 21 84 85     	ld hl,Posicion_actual
465+  9043 35           	dec (hl)
466+  9044 08           	ex af,af
467+  9045 6F           	ld l,a
468+  9046 18 DD        	jr 6B
469+  9048
470+  9048              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  9048
472+  9048 47           3 ld b,a
473+  9049 2A 8C 85     	ld hl,(Indice_Sprite_der)
474+  904C 23           2 inc hl
475+  904D 23           	inc hl
476+  904E 10 FC        	djnz 2B
477+  9050 22 90 85     	ld (Puntero_DESPLZ_der),hl
478+  9053 C9           8 ret
479+  9054
480+  9054              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  9054              ;
482+  9054              ;	modifica_parametros_1er_DESPLZ
483+  9054              ;
484+  9054              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  9054              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  9054              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  9054
488+  9054 3A 8A 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  9057 A7           	and a
490+  9058 20 1E        	jr nz,1F
491+  905A 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  905B 32 8A 85         ld (CTRL_DESPLZ),a
493+  905E 21 83 85     	ld hl,Columns
494+  9061 34           	inc (hl)
495+  9062 3A 96 85     	ld a,(Cuad_objeto)
496+  9065 E6 01        	and 1
497+  9067 20 0F        	jr nz,1F
498+  9069 2A 84 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  906C 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  906D 22 84 85     	ld (Posicion_actual),hl
501+  9070 CD 2A 91     	call Genera_coordenadas
502+  9073 CD CF 90     	call Dec_CTRL_DESPLZ
503+  9076 18 03        	jr 2F
504+  9078 CD CF 90     1 call Dec_CTRL_DESPLZ
505+  907B C9           2 ret
506+  907C
507+  907C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  907C
509+  907C 3A 8A 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  907F FE F7        	cp $f7
511+  9081 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  9083 30 2C        	jr nc,3F
513+  9085
514+  9085              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  9085
516+  9085 06 00        	ld b,0
517+  9087 04           4 inc b
518+  9088 3C           	inc a
519+  9089 FE F7        	cp $f7
520+  908B 20 FA        	jr nz,4B
521+  908D 3E FF        	ld a,$ff
522+  908F 90           	sub b
523+  9090 32 8A 85     	ld (CTRL_DESPLZ),a
524+  9093 18 1C        	jr 3F
525+  9095
526+  9095              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  9095
528+  9095 21 83 85     1 ld hl,Columns
529+  9098 35           	dec (hl)
530+  9099 AF           	xor a
531+  909A 32 8A 85     	ld (CTRL_DESPLZ),a
532+  909D 3A 96 85     	ld a,(Cuad_objeto)
533+  90A0 E6 01        	and 1
534+  90A2 28 0A        	jr z,2F
535+  90A4 2A 84 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  90A7 2B           	dec hl
537+  90A8 22 84 85     	ld (Posicion_actual),hl
538+  90AB CD 2A 91     	call Genera_coordenadas
539+  90AE
540+  90AE              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  90AE
542+  90AE CD 62 87     2 call Inicia_puntero_objeto_izq
543+  90B1 C9           3 ret
544+  90B2
545+  90B2              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  90B2              ;
547+  90B2              ;	19/10/22
548+  90B2              ;
549+  90B2              ;	(cp 29) para un Amadeus de 3 Columns.
550+  90B2              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  90B2
552+  90B2 3A 88 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  90B5 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  90B7 C9           	ret
555+  90B8
556+  90B8              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  90B8              ;
558+  90B8              ;	19/10/22
559+  90B8              ;
560+  90B8              ;	(cp 2) para un Amadeus de 3 Columns.
561+  90B8              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  90B8
563+  90B8 3A 88 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  90BB FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  90BD C9           	ret
566+  90BE
567+  90BE              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  90BE              ;
569+  90BE              ;	24/7/22
570+  90BE              ;
571+  90BE              ;	Inc_CTRL_DESPLZ
572+  90BE              ;
573+  90BE              ;
574+  90BE              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  90BE
576+  90BE 21 8A 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  90C1 3A 98 85     	ld a,(Vel_right)
578+  90C4 A7           	and a
579+  90C5 28 06        	jr z,1F
580+  90C7 47           	ld b,a
581+  90C8 34           3 inc (hl)
582+  90C9 10 FD        	djnz 3B
583+  90CB 18 01        	jr 2F
584+  90CD 34           1 inc (hl)
585+  90CE C9           2 ret
586+  90CF
587+  90CF              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  90CF              ;
589+  90CF              ;	5/2/23
590+  90CF              ;
591+  90CF              ;	Dec_CTRL_DESPLZ
592+  90CF              ;
593+  90CF              ;
594+  90CF              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  90CF
596+  90CF 21 8A 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  90D2 3A 97 85     	ld a,(Vel_left)
598+  90D5 A7           	and a
599+  90D6 28 06        	jr z,1F
600+  90D8 47           	ld b,a
601+  90D9 35           3 dec (hl)
602+  90DA 10 FD        	djnz 3B
603+  90DC 18 01        	jr 2F
604+  90DE 35           1 dec (hl)
605+  90DF C9           2 ret
606+  90E0
607+  90E0              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  90E0
609+  90E0 2A 84 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  90E3 01 1F 00     	ld bc,31
611+  90E6 A7           	and a
612+  90E7 ED 4A        	adc hl,bc
613+  90E9 22 84 85     	ld (Posicion_actual),hl
614+  90EC 21 AF 85     	ld hl,Ctrl_0														; $xxx1
615+  90EF CB C6        	set 0,(hl)
616+  90F1 C9           	ret
617+  90F2
618+  90F2              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  90F2
620+  90F2 2A 84 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  90F5 01 1F 00     	ld bc,31
622+  90F8 A7           	and a
623+  90F9 ED 42        	sbc hl,bc
624+  90FB 22 84 85     	ld (Posicion_actual),hl 											; $xx1x
625+  90FE 21 AF 85     	ld hl,Ctrl_0
626+  9101 CB CE        	set 1,(hl)
627+  9103 C9           	ret
628+  9104
629+  9104              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  9104
631+  9104 24           Reaparece_abajo inc h
632+  9105 01 E0 17     	ld bc,$17e0
633+  9108 A7           	and a
634+  9109 ED 4A        	adc hl,bc
635+  910B 22 84 85     	ld (Posicion_actual),hl
636+  910E 21 AF 85     	ld hl,Ctrl_0
637+  9111 CB D6        	set 2,(hl)
638+  9113 C9           	ret
639+  9114
640+  9114              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  9114
642+  9114 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  9117 A7           	and a
644+  9118 ED 42        	sbc hl,bc
645+  911A 22 84 85     	ld (Posicion_actual),hl
646+  911D 21 AF 85     	ld hl,Ctrl_0
647+  9120 CB DE        	set 3,(hl)
648+  9122 C9           	ret
649+  9123
650+  9123              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9123
652+  9123 2A 94 85     Reinicio ld hl,(Posicion_inicio)
653+  9126 22 84 85     	ld (Posicion_actual),hl
654+  9129 C9           	ret
# file closed: Direcciones.asm
764   912A              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  912A              ;	12/12/22
  2+  912A              ;
  3+  912A              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  912A              ;	Fila superior "0", Columna izquierda "0".
  5+  912A              ;
  6+  912A              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  912A              ;
  8+  912A              ;	Modifica: A
  9+  912A
 10+  912A C5           Genera_coordenadas push bc
 11+  912B E5           	push hl
 12+  912C 2A 84 85     	ld hl,(Posicion_actual)
 13+  912F 7D           	ld a,l
 14+  9130 E6 1F        	and $1f
 15+  9132 32 88 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9135 CD F8 8D     	call calcula_tercio
 17+  9138 47           	ld b,a
 18+  9139 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  913A 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  913C 7D           	ld a,l
 21+  913D E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  913F 28 05        	jr z,2F
 23+  9141 0C           1 inc c
 24+  9142 D6 20        	sub 32
 25+  9144 20 FB        	jr nz,1B
 26+  9146 0C           2 inc c
 27+  9147 04           	inc b
 28+  9148 05           	dec b
 29+  9149 28 04        	jr z,3F
 30+  914B 3E E0        	ld a,$e0
 31+  914D 10 F2        	djnz 1B
 32+  914F 79           3 ld a,c
 33+  9150 3D           	dec a
 34+  9151 32 89 85     	ld (Coordenada_y),a
 35+  9154 E1           	pop hl
 36+  9155 C1           	pop bc
 37+  9156 C9           	ret
# file closed: Genera_coordenadas.asm
765   9157              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9157
  2+  9157
  3+  9157              ;   11/8/22
  4+  9157              ;
  5+  9157              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9157              ;
  7+  9157              ;   Mov_obj.asm
  8+  9157              ;
  9+  9157              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9157              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9157              ;
 12+  9157              ;   Codificación:
 13+  9157              ;
 14+  9157              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9157
 16+  9157              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9157
 18+  9157 02 40 00     Arriba db 2,%01000000,0
 19+  915A 02 80 00     Abajo db 2,%10000000,0
 20+  915D 02 20 00     Derecha db 2,%00100000,0
 21+  9160 02 10 00     Izquierda db 2,%00010000,0
 22+  9163 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9167 60 42 60 40
 22+  916B 63
 23+  916C 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9170 22 A3 80 A0
 24+  9174 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9178 84 A0 83 A0
 25+  917C 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9180 80 A3 22 A0
 26+  9184 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  9188 40 60 42 60
 27+  918C 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9190 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  9194 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  9198 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  919C 84
 31+  919D 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  91A1 84 00
 32+  91A3 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  91A7 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  91AB 1F 1F 1F 1F
 34+  91AF 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  91B3 1F 1F 1F 1F
 34+  91B7 1F
 35+  91B8 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  91BC 2F 2F 2F 2F
 35+  91C0 2F 2F
 36+  91C2 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  91C6 2F 2F 00
 37+  91C9
 38+  91C9
 39+  91C9              ; ----- ----- ----- ----- -----
 40+  91C9
 41+  91C9 A7 91        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  91CB A3 91        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  91CD 60 91        Indice_mov_Izquierda defw Izquierda
 44+  91CF 5D 91        Indice_mov_Derecha defw Derecha
 45+  91D1 5A 91        Indice_mov_Abajo defw Abajo
 46+  91D3 57 91        Indice_mov_Arriba defw Arriba
 47+  91D5 94 91        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  91D7 98 91        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  91D9 90 91        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  91DB 9D 91        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  91DD 63 91        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  91DF              ; ----- ----- ----- ----- -----
 53+  91DF
 54+  91DF 3A B5 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  91E2 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  91E3 28 02            jr z,1F
 57+  91E5 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  91E7 3A B6 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  91EA C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  91EC 32 B6 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  91EF              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  91EF 2A B3 85         ld hl,(Puntero_mov)
 63+  91F2 7E               ld a,(hl)
 64+  91F3 32 B5 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  91F6 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  91F7 22 B3 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  91FA
 68+  91FA 3A B7 85     Decoder ld a,(Repetimos_db)
 69+  91FD A7               and a
 70+  91FE 20 0C            jr nz,12F
 71+  9200 2A B3 85         ld hl,(Puntero_mov)
 72+  9203 7E               ld a,(hl)
 73+  9204 A7               and a
 74+  9205 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  9207 E6 0F            and $0f
 76+  9209 32 B7 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  920C              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  920C 2A B3 85     12 ld hl,(Puntero_mov)
 79+  920F CB 7E            bit 7,(hl)
 80+  9211 28 03            jr z,2F
 81+  9213 CD 16 8E         call Mov_down
 82+  9216 2A B3 85     2 ld hl, (Puntero_mov)
 83+  9219 CB 76            bit 6,(hl)
 84+  921B 28 03            jr z,3F
 85+  921D CD 44 8E         call Mov_up
 86+  9220 2A B3 85     3 ld hl, (Puntero_mov)
 87+  9223 CB 6E            bit 5,(hl)
 88+  9225 28 03            jr z,4F
 89+  9227 CD 72 8E         call Mov_right
 90+  922A 2A B3 85     4 ld hl, (Puntero_mov)
 91+  922D CB 66            bit 4,(hl)
 92+  922F 28 03            jr z,5F
 93+  9231 CD 90 8F         call Mov_left
 94+  9234
 95+  9234              ; ---------- --------- --------- ---------- ----------
 96+  9234
 97+  9234 3A B7 85     5 ld a,(Repetimos_db)
 98+  9237 A7               and a
 99+  9238 28 07            jr z,6F
100+  923A 3D               dec a
101+  923B 32 B7 85         ld (Repetimos_db),a
102+  923E 28 01            jr z,6f
103+  9240 C9           11 ret
104+  9241 21 B5 85     6 ld hl,Contador_db_mov
105+  9244 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  9245 2A B3 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9248 23               inc hl
108+  9249 22 B3 85         ld (Puntero_mov),hl
109+  924C 18 F2            jr 11B
110+  924E 2A B1 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  9251 3A B6 85         ld a,(Incrementa_puntero)
112+  9254 47               ld b,a
113+  9255 23           8 inc hl
114+  9256 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9258 5E               ld e,(hl)
116+  9259 23               inc hl
117+  925A 56               ld d,(hl)
118+  925B EB               ex de,hl
119+  925C 22 B3 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  925F 18 DF            jr 11B
121+  9261
122+  9261              ; ---------- --------- --------- ---------- ----------
123+  9261              ;
124+  9261              ;   11/8/22
125+  9261              ;
126+  9261              ;   Prepara_Puntero_mov
127+  9261
128+  9261 E5           Prepara_Puntero_mov push hl
129+  9262 D5               push de
130+  9263 2A B1 85         ld hl,(Puntero_indice_mov)
131+  9266 5E               ld e,(hl)
132+  9267 23               inc hl
133+  9268 56               ld d,(hl)
134+  9269 EB               ex de,hl
135+  926A 22 B3 85         ld (Puntero_mov),hl
136+  926D D1               pop de
137+  926E E1               pop hl
138+  926F C9               ret
139+  9270
140+  9270              ; ---------- --------- --------- ---------- ----------
141+  9270              ;
142+  9270              ;   11/8/22
143+  9270              ;
144+  9270              ;   Reinicia_el_movimiento
145+  9270
146+  9270 CD 61 92     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9273 AF               xor a
148+  9274 32 B5 85         ld (Contador_db_mov),a
149+  9277 32 B6 85         ld (Incrementa_puntero),a
150+  927A
151+  927A              ;    jr $
152+  927A
153+  927A C3 DF 91         jp Movimiento
154+  927D C9               ret
155+  927E              ; ---------- --------- --------- ---------- ----------
156+  927E
157+  927E
158+  927E
159+  927E
160+  927E
161+  927E
162+  927E
163+  927E
164+  927E
165+  927E
166+  927E
167+  927E
168+  927E
169+  927E
170+  927E
171+  927E
172+  927E
173+  927E
# file closed: Patrones_de_mov.asm
766   927E              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  927E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  927E              ;
  3+  927E              ;	3/1/23
  4+  927E              ;
  5+  927E              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  927E
  7+  927E              ;	ADC HL,SP	LD (addr),SP
  8+  927E              ;	ADD HL,SP	LD SP,(addr)
  9+  927E              ;	ADD IX,SP	LD SP,nn
 10+  927E              ; 	ADD IY,SP	LD SP,HL
 11+  927E              ;				LD SP,IX
 12+  927E              ;	DEC SP		LD SP,IY
 13+  927E
 14+  927E              ;	EX (SP),HL
 15+  927E              ;	EX (SP),IX
 16+  927E              ;	EX (SP),IY
 17+  927E
 18+  927E              ;	INC SP
 19+  927E
 20+  927E
 21+  927E                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 C4 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A C8 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 C8 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B C4 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
767   7FC0
768   7FC0              	SAVESNA "Pruebas.sna", START
769   7FC0
770   7FC0
771   7FC0
# file closed: Banco_de_pruebas.asm
