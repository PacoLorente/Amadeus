# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 5D 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 00 84        	defw Entidad_1
  9+  83C2 34 84        	defw Entidad_2
 10+  83C4 68 84        	defw Entidad_3
 11+  83C6 9C 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0	 										; (Posicion_actual).
 23+  83D0 00 00        	defw 0 											; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 28+  83D8 00 00        	defw 0	 										; (Puntero_DESPLZ).
 29+  83DA D0 50        	defw $50d0										; (Posicion_inicio).
 30+  83DC 04           	db 4 											; (Cuad_objeto).
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 33+  83E1
 34+  83E1 00 00        	db 0,0											; Variables_de_borrado
 35+  83E3 00 00        	defw 0											;	" " " " " " "
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00 00     	db 0,0,0										;	" " " " " " "
 38+  83EA
 39+  83EA 00 00        	db 0,0											; Variables_de_pintado
 40+  83EC 00 00        	defw 0											;	" " " " " " "
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00 00     	db 0,0,0										;	" " " " " " "
 43+  83F3
 44+  83F3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 45+  83F5
 46+  83F5 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 47+  83F9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 48+  83FC
 49+  83FC 00           	db 0 											; (Columnas).
 50+  83FD 00 00        	defw 0											; (Limite_horizontal).
 51+  83FF 00           	db 0											; (Limite_vertical).
 52+  8400
 53+  8400              ; ---------- ---------- ---------- ---------- ----------
 54+  8400
 55+  8400 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 56+  8402 00 00        	defw 0											; (Posicion_actual).
 57+  8404 00 00        	defw 0 											; (Puntero_objeto).
 58+  8406 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 59+  8409
 60+  8409 00           	db %00000000 									; (Attr).
 61+  840A 00 00        	defw 0											; (Indice_Sprite).
 62+  840C 00 00        	defw 0											; (Puntero_DESPLZ).
 63+  840E 00 00        	defw 0											; (Posicion_inicio).
 64+  8410 00           	db 0											; (Cuad_objeto).
 65+  8411
 66+  8411 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 67+  8415
 68+  8415 00 00        	db 0,0										    ; Variables_de_borrado
 69+  8417 00 00        	defw 0											;	" " " " " " "
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00 00     	db 0,0,0										;	" " " " " " "
 72+  841E
 73+  841E 00 00        	db 0,0											; Variables_de_pintado
 74+  8420 00 00        	defw 0											;	" " " " " " "
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00 00     	db 0,0,0										;	" " " " " " "
 77+  8427
 78+  8427 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 79+  8429
 80+  8429 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 81+  842D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 82+  8430
 83+  8430 00           	db 0 											; (Columnas).
 84+  8431 00 00        	defw 0											; (Limite_horizontal).
 85+  8433 00           	db 0											; (Limite_vertical).
 86+  8434
 87+  8434              ; ---------- ---------- ---------- ---------- ----------
 88+  8434
 89+  8434 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 90+  8436 00 00        	defw 0                                          ; (Posicion_actual).
 91+  8438 00 00        	defw 0											; (Puntero_objeto).
 92+  843A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 93+  843D
 94+  843D 02           	db %00000010									; (Attr).
 95+  843E 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 96+  8440 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 97+  8442 7E 47        	defw $477e                                      ; (Posicion_inicio).
 98+  8444 02           	db 2											; (Cuad_objeto).
 99+  8445
100+  8445 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
101+  8449
102+  8449 00 00        	db 0,0											; Variables_de_borrado
103+  844B 00 00        	defw 0										 	;	" " " " " " "
104+  844D 00 00        	defw 0											;	" " " " " " "
105+  844F 00 00 00     	db 0,0,0										;	" " " " " " "
106+  8452
107+  8452 00 00        	db 0,0											; Variables_de_pintado
108+  8454 00 00        	defw 0											;	" " " " " " "
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00 00     	db 0,0,0										;	" " " " " " "
111+  845B
112+  845B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
113+  845D
114+  845D D3 8F 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
115+  8461 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
116+  8464
117+  8464 00           	db 0 											; (Columnas).
118+  8465 00 00        	defw 0											; (Limite_horizontal).
119+  8467 00           	db 0											; (Limite_vertical).
120+  8468
121+  8468              ; ---------- ---------- ---------- ---------- ----------
122+  8468
123+  8468 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
124+  846A 00 00        	defw 0                                          ; (Posicion_actual).
125+  846C 00 00        	defw 0											; (Puntero_objeto).
126+  846E 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
127+  8471
128+  8471 04           	db %00000100									; (Attr).
129+  8472 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
130+  8474 00 00        	defw 0                                          ; (Puntero_DESPLZ).
131+  8476 A1 47        	defw $47a1                                      ; (Posicion_inicio).
132+  8478 01           	db 1											; (Cuad_objeto).
133+  8479
134+  8479 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
135+  847D
136+  847D 00 00        	db 0,0											; Variables_de_borrado
137+  847F 00 00        	defw 0										 	;	" " " " " " "
138+  8481 00 00        	defw 0											;	" " " " " " "
139+  8483 00 00 00     	db 0,0,0										;	" " " " " " "
140+  8486
141+  8486 00 00        	db 0,0											; Variables_de_pintado
142+  8488 00 00        	defw 0											;	" " " " " " "
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00 00     	db 0,0,0										;	" " " " " " "
145+  848F
146+  848F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
147+  8491
148+  8491 D5 8F 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
149+  8495 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
150+  8498
151+  8498 00           	db 0 											; (Columnas).
152+  8499 00 00        	defw 0											; (Limite_horizontal).
153+  849B 00           	db 0											; (Limite_vertical).
154+  849C
155+  849C              ; ---------- ---------- ---------- ---------- ----------
156+  849C
157+  849C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
158+  849E 00 00        	defw 0                                          ; (Posicion_actual).
159+  84A0 00 00        	defw 0 											; (Puntero_objeto).
160+  84A2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
161+  84A5
162+  84A5 01           	db %00000001									; (Attr).
163+  84A6 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
164+  84A8 00 00        	defw 0                                          ; (Puntero_DESPLZ).
165+  84AA BE 47        	defw $47be                                      ; (Posicion_inicio).
166+  84AC 00           	db 0											; (Cuad_objeto).
167+  84AD
168+  84AD 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
169+  84B1
170+  84B1 00 00        	db 0,0											; Variables_de_borrado
171+  84B3 00 00        	defw 0										 	;	" " " " " " "
172+  84B5 00 00        	defw 0											;	" " " " " " "
173+  84B7 00 00 00     	db 0,0,0										;	" " " " " " "
174+  84BA
175+  84BA 00 00        	db 0,0											; Variables_de_pintado
176+  84BC 00 00        	defw 0											;	" " " " " " "
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84C3
180+  84C3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
181+  84C5
182+  84C5 C5 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
183+  84C9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
184+  84CC
185+  84CC 00           	db 0 											; (Columnas).
186+  84CD 00 00        	defw 0											; (Limite_horizontal).
187+  84CF 00           	db 0											; (Limite_vertical).
188+  84D0
# file closed: Entidades.asm
 21   84D0
 22   84D0              ; ******************************************************************************************************************************************************************************************
 23   84D0              ; Constantes.
 24   84D0              ; ******************************************************************************************************************************************************************************************
 25   84D0              ;
 26   84D0              ; 8/11/22
 27   84D0              ;
 28   84D0              ; Constantes generales.
 29   84D0              ;
 30   84D0
 31   84D0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D0
 37   84D0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D0
 40   84D0
 41   84D0              ; ******************************************************************************************************************************************************************************************
 42   84D0              ; Variables.
 43   84D0              ; ******************************************************************************************************************************************************************************************
 44   84D0              ;
 45   84D0              ; 10/11/22
 46   84D0              ;
 47   84D0              ; Variables de DRAW. (Motor principal).
 48   84D0              ;
 49   84D0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D0
 51   84D0 02           Filas db 2												; Filas. [DRAW]
 52   84D1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D2 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D9
 62   84D9              ; ---------- ---------- ----------
 63   84D9
 64   84D9
 65   84D9 04           Attr db %00000100										; Atributos de la entidad:
 66   84DA
 67   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DA              ;
 69   84DA              ;	COLORES: 0 ..... NEGRO
 70   84DA              ;    		 1 ..... AZUL
 71   84DA              ; 			 2 ..... ROJO
 72   84DA              ;			 3 ..... MAGENTA
 73   84DA              ; 			 4 ..... VERDE
 74   84DA              ; 			 5 ..... CIAN
 75   84DA              ;			 6 ..... AMARILLO
 76   84DA              ; 			 7 ..... BLANCO
 77   84DA
 78   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DC 00 00        Puntero_DESPLZ defw 0
 80   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E1
 83   84E1              ; Variables de objeto. (Características).
 84   84E1
 85   84E1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E4 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E5
 90   84E5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E9 00 00        	defw 0
 93   84EB 00 00 00     	db 0,0,0
 94   84EE
 95   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F0 00 00        	defw 0
 97   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F4 00 00 00     	db 0,0,0
 99   84F7
100   84F7              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F7
102   84F7 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F8              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F8              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F8              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F8              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F8              ;
108   84F8              ; 														DESCRIPCIÖN:
109   84F8              ;
110   84F8              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F8              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F8              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F8              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F8              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F8              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F8              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F8              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F8              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F8              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F8              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F8              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F8              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F8              ;
124   84F8              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F8              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F8              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F8
128   84F8 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F9
130   84F9              ; Movimiento.
131   84F9
132   84F9 C7 8F        Puntero_indice_mov defw Indice_mov_Derecha
133   84FB 00 00        Puntero_mov defw 0
134   84FD 00           Contador_db_mov db 0
135   84FE 00           Incrementa_puntero db 0
136   84FF 00           Repetimos_db db 0
137   8500
138   8500
139   8500              ; Variables de funcionamiento. [DRAW].
140   8500
141   8500 00           Columnas db 0
142   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8504
146   8504              ; 52 Bytes por entidad.
147   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8504              ;					         		---------;      ;---------
149   8504
150   8504
151   8504              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8504              ; Gestión de ENTIDADES.
153   8504
154   8504 00 00        Puntero_store_entidades defw 0
155   8506 00 00        Puntero_restore_entidades defw 0
156   8508 00 00        Indice_restore defw 0
157   850A 00           Numero_de_entidades db 0								; Nº de objetos en pantalla, (contando con Amadeus).
158   850B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850C              ;														; _ (Numero_de_malotes)="0".
162   850C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850E              ;														; _variable para almacenar lo posición del puntero_
164   850E              ; 														; _de pila, SP.
165   850E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8510              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8510 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8512              ;														; _el snapshot de los registros de la siguiente entidad.
169   8512              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8512
171   8512              ; Gestión de FRAMES.
172   8512
173   8512 00           Switch db 0
174   8513
175   8513              ; Variables de Raster y localización en pantalla.
176   8513
177   8513 00 FF        Temp_Raster defw $ff00
178   8515
179   8515              ; Rutina principal *************************************************************************************************************************************************************************
180   8515              ;
181   8515              ;	14/11/22
182   8515
183   8515 31 FF FF     START ld sp,$ffff
184   8518
185   8518 3E A0        	ld a,$a0
186   851A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851E F3           	DI
189   851F
190   851F 3E 01        	ld a,1
191   8521 D3 FE        	out ($fe),a
192   8523
193   8523 3E 07        	ld a,%00000111
194   8525 CD 77 8C     	call Cls
195   8528
196   8528              ;	call Pinta_FILAS
197   8528
198   8528 CD A9 86     	call Pulsa_ENTER
199   852B
200   852B 21 0A 85     	ld hl,Numero_de_entidades
201   852E 46           	ld b,(hl)
202   852F 04           	inc b
203   8530 05           	dec b
204   8531 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 0A 86     	call Inicia_punteros_de_entidades
211   8536
212   8536 C5           1 push bc  												; Guardo el contador de entidades.
213   8537 CD 39 86      	call Inicia_Puntero_objeto
214   853A CD 00 87     	call Draw
215   853D CD A0 7F     	call Guarda_foto_registros
216   8540 CD 56 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
217   8543 C1           	pop bc
218   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
219   8546
220   8546              ; 	Amadeus.
221   8546
222   8546 CD 97 86     3 call Restore_Amadeus
223   8549 CD 00 87     	call Draw
224   854C 18 FE        	jr $		;! No vamos a ejecutar DRAW con Amadeus, No dispone de recolocación!!!!!!!!!!!!!!
225   854E
226   854E
227   854E              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
228   854E
229   854E CD 0A 86     	call Inicia_punteros_de_entidades
230   8551 CD 85 86     	call Restore_Primera_entidad
231   8554
232   8554 3A 0A 85     	ld a,(Numero_de_entidades)
233   8557 32 0B 85     	ld (Numero_de_malotes),a
234   855A
235   855A FB           2 ei
236   855B 18 FD        	jr 2B
237   855D
238   855D              ; -----------------------------------------------------------------------------------
239   855D
240   855D              Frame
241   855D
242   855D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
243   855D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
244   855D
245   855D 3E 07            ld a,7
246   855F D3 FE            out ($fe),a
247   8561
248   8561 CD 04 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
249   8564
250   8564 3E 01            ld a,1
251   8566 D3 FE            out ($fe),a
252   8568
253   8568              ; ----------------------------------------------------------------------
254   8568
255   8568 21 00 70     	ld hl,Album_de_fotos
256   856B 22 10 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
257   856E              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
258   856E 3A 0A 85         ld a,(Numero_de_entidades)
259   8571 47               ld b,a
260   8572
261   8572 C5           2 push bc
262   8573
263   8573 CD 99 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
264   8576
265   8576 3A F7 84      	ld a,(Ctrl_0)
266   8579 CB 67        	bit 4,a
267   857B 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
268   857D
269   857D CD D1 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
270   8580
271   8580 21 F7 84     	ld hl,Ctrl_0
272   8583 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
273   8585
274   8585 CD 56 86     1 call Store_Restore_entidades
275   8588
276   8588 C1           	pop bc
277   8589 10 E7        	djnz 2B
278   858B
279   858B CD 0A 86     	call Inicia_punteros_de_entidades
280   858E CD 85 86     	call Restore_Primera_entidad
281   8591 CD 20 86     	call Calcula_numero_de_malotes
282   8594
283   8594 3E 00        	ld a,0
284   8596 D3 FE        	out ($fe),a
285   8598
286   8598 C9           	ret
287   8599
288   8599              ; --------------------------------------------------------------------------------------------------------------
289   8599              ;
290   8599              Mov_obj
291   8599
292   8599              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
293   8599
294   8599 AF           	xor a
295   859A 32 F8 84     	ld (Obj_dibujado),a
296   859D CD DB 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
297   85A0              ;														; Obj_dibujado="0".
298   85A0              ; Movemos Amadeus o enemigos...
299   85A0
300   85A0 3A F7 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
301   85A3 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
302   85A5 C4 BD 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
303   85A8
304   85A8 3A F7 84     	ld a,(Ctrl_0)
305   85AB CB 77        	bit 6,a
306   85AD CC D7 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
307   85B0
308   85B0 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
309   85B3 CB 67        	bit 4,a
310   85B5 C8           	ret z
311   85B6
312   85B6              ; ---------
313   85B6
314   85B6 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
315   85B8 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
316   85BB CD DB 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
317   85BE
318   85BE CD F2 85         call Repone_borrar
319   85C1
320   85C1              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
321   85C1
322   85C1 CD DA 89     	call Prepara_draw
323   85C4 CD 14 89     	call calcula_CColumnass
324   85C7 CD 4B 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
325   85CA CD A0 89     	call Define_rutina_de_impresion
326   85CD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
327   85D0
328   85D0 C9           	ret
329   85D1
330   85D1              ; --------------------------------------------------------------------------------------------------------------
331   85D1              ;
332   85D1 CD FE 85     Borra_Pinta_obj call Repone_pintar
333   85D4 CD 00 87     	call Draw
334   85D7 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
335   85DA C9           	ret
336   85DB
337   85DB              ; --------------------------------------------------------------------------------------------------------------
338   85DB
339   85DB 21 D0 84     Prepara_var_pintado_borrado	ld hl,Filas
340   85DE 3A F8 84     	ld a,(Obj_dibujado)
341   85E1 A7           	and a
342   85E2 28 05        	jr z,1F
343   85E4 11 EE 84     	ld de,Variables_de_pintado
344   85E7 18 03        	jr 2F
345   85E9 11 E5 84     1 ld de,Variables_de_borrado
346   85EC 01 09 00     2 ld bc,9
347   85EF ED B0        	ldir
348   85F1 C9           	ret
349   85F2
350   85F2 21 E5 84     Repone_borrar ld hl,Variables_de_borrado
351   85F5 11 D0 84     	ld de,Filas
352   85F8 01 09 00     	ld bc,9
353   85FB ED B0        	ldir
354   85FD C9           	ret
355   85FE
356   85FE 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
357   8601 11 D0 84     	ld de,Filas
358   8604 01 09 00     	ld bc,9
359   8607 ED B0        	ldir
360   8609 C9           	ret
361   860A
362   860A              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
363   860A              ;	ld (Caja_de_BORRADO),hl
364   860A              ;	ret
365   860A
366   860A              ; *************************************************************************************************************************************************************
367   860A              ;
368   860A              ; 8/1/23
369   860A              ;
370   860A              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
371   860A              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
372   860A              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
373   860A
374   860A              ; Destruye HL y DE !!!!!
375   860A
376   860A 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
377   860D CD 33 86         call Extrae_address
378   8610 22 04 85         ld (Puntero_store_entidades),hl
379   8613 21 C2 83     	ld hl,Indice_de_entidades+2
380   8616 22 08 85     	ld (Indice_restore),hl
381   8619 CD 33 86     	call Extrae_address
382   861C 22 06 85     	ld (Puntero_restore_entidades),hl
383   861F C9               ret
384   8620
385   8620              ; -------------------------------------------------------------------------------------------------------------
386   8620              ;
387   8620              ; 7/1/23
388   8620              ;
389   8620
390   8620 2A 10 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
391   8623 AF           	xor a
392   8624 67           	ld h,a
393   8625 7D           	ld a,l
394   8626 D6 06        1 sub 6
395   8628 28 03        	jr z,2F
396   862A 24           	inc h
397   862B 18 F9        	jr 1B
398   862D 24           2 inc h
399   862E 7C           	ld a,h
400   862F 32 0B 85     	ld (Numero_de_malotes),a
401   8632 C9           	ret
402   8633
403   8633              ; *************************************************************************************************************************************************************
404   8633              ;
405   8633              ; 20/10/22
406   8633              ;
407   8633              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
408   8633              ;
409   8633              ; Destruye el puntero y DE !!!!!
410   8633
411   8633 5E           Extrae_address ld e,(hl)
412   8634 23           	inc hl
413   8635 56           	ld d,(hl)
414   8636 2B           	dec hl
415   8637 EB           	ex de,hl
416   8638 C9           	ret
417   8639
418   8639              ; *************************************************************************************************************************************************************
419   8639              ;
420   8639              ;	21/9/22
421   8639              ;
422   8639              ;   Destruye HL y BC !!!!!,
423   8639
424   8639 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
425   863C 22 DC 84     	ld (Puntero_DESPLZ),hl
426   863F CD 33 86     	call Extrae_address
427   8642 22 D4 84     	ld (Puntero_objeto),hl
428   8645
429   8645              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
430   8645
431   8645 21 10 83     	ld hl,Amadeus
432   8648 ED 4B D4 84  	ld bc,(Puntero_objeto)
433   864C B7 ED 42     	sub hl,bc
434   864F C0           	ret nz
435   8650
436   8650 21 F7 84     	ld hl,Ctrl_0
437   8653 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
438   8655
439   8655 C9            	ret 												; _de nuestra nave en los extremos.
440   8656
441   8656              ; *************************************************************************************************************************************************************
442   8656              ;
443   8656              ;	8/1/23
444   8656              ;
445   8656              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
446   8656              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
447   8656
448   8656              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
449   8656              ;	_de la 2ª y 3ª entidad respectivamente.
450   8656
451   8656
452   8656
453   8656              Store_Restore_entidades
454   8656
455   8656 E5           	push hl
456   8657 D5           	push de
457   8658 C5            	push bc
458   8659
459   8659              ;	STORE !!!!!
460   8659              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
461   8659
462   8659 21 D0 84     	ld hl,Filas
463   865C ED 5B 04 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
464   8660 01 34 00     	ld bc,52
465   8663 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
466   8665
467   8665              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
468   8665
469   8665 2A 06 85     	ld hl,(Puntero_restore_entidades)
470   8668 22 04 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
471   866B 11 D0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
472   866E 01 34 00     	ld bc,52
473   8671 ED B0        	ldir
474   8673
475   8673              ;	Incrementa RESTORE !!!!!
476   8673
477   8673 2A 08 85         ld hl,(Indice_restore)
478   8676 23           	inc hl
479   8677 23           	inc hl
480   8678 22 08 85     	ld (Indice_restore),hl
481   867B CD 33 86         call Extrae_address
482   867E 22 06 85         ld (Puntero_restore_entidades),hl
483   8681
484   8681 C1           	pop bc
485   8682 D1           	pop de
486   8683 E1           	pop hl
487   8684
488   8684 C9           	ret
489   8685
490   8685              ; **************************************************************************************************
491   8685              ;
492   8685              ;	29/10/22
493   8685              ;
494   8685              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
495   8685
496   8685 E5           Restore_Primera_entidad push hl
497   8686 D5           	push de
498   8687 C5            	push bc
499   8688 2A 04 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
500   868B 11 D0 84     	ld de,Filas
501   868E 01 34 00     	ld bc,52
502   8691 ED B0        	ldir
503   8693 C1           	pop bc
504   8694 D1           	pop de
505   8695 E1           	pop hl
506   8696 C9           	ret
507   8697
508   8697              ; **************************************************************************************************
509   8697              ;
510   8697              ;	25/01/23
511   8697              ;
512   8697              ;	Restore_Amadeus
513   8697              ;
514   8697              ;	Almacenamos en su base de datos, los parámetros de la entidad contenida en DRAW y cargamos los_
515   8697              ;	_ parámetros de AMADEUS.
516   8697
517   8697 E5           Restore_Amadeus	push hl
518   8698 D5           	push de
519   8699 C5            	push bc
520   869A
521   869A 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
522   869D 11 D0 84     	ld de,Filas
523   86A0 01 34 00     	ld bc,52
524   86A3 ED B0        	ldir
525   86A5
526   86A5 C1           	pop bc
527   86A6 D1           	pop de
528   86A7 E1           	pop hl
529   86A8
530   86A8 C9           	ret
531   86A9
532   86A9              ; *************************************************************************************************************************************************************
533   86A9              ;
534   86A9              ; Teclado.
535   86A9
536   86A9 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
537   86AB DB FE        	in a,($fe)
538   86AD E6 01        	and $01
539   86AF 28 02        	jr z,1f
540   86B1 18 F6        	jr Pulsa_ENTER
541   86B3 C9           1 ret
542   86B4
543   86B4              ; **************************************************************************************************
544   86B4              ;
545   86B4              ; Temporización.
546   86B4
547   86B4              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
548   86B4              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
549   86B4              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
550   86B4              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
551   86B4
552   86B4              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
553   86B4              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
554   86B4              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
555   86B4
556   86B4              ; A partir de $4f61 no hace falta DELAY.
557   86B4
558   86B4              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
559   86B4
560   86B4 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
561   86B7 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
562   86B8 78           	LD A,B
563   86B9 A7           	AND A
564   86BA 20 FB        	JR NZ,wait
565   86BC C9           	RET
566   86BD
567   86BD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
568   86BD              ;
569   86BD              ;	21/4/22
570   86BD
571   86BD              Movimiento_Amadeus
572   86BD
573   86BD 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
574   86BF DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
575   86C1 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
576   86C3 CC DA 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
577   86C6 3E F7        	ld a,$f7
578   86C8 DB FE        	in a,($fe)
579   86CA E6 01        	and $01
580   86CC C8           	ret z
581   86CD 3E F7        	ld a,$f7
582   86CF DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
583   86D1 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
584   86D3 CC E7 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
585   86D6 C9               ret
586   86D7
587   86D7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
588   86D7
589   86D7              ; Pinta indicadores de FILAS. ------------------------------------------------------
590   86D7
591   86D7 21 10 40     Pinta_FILAS ld hl,$4010
592   86DA              ;	ld b,9
593   86DA              ;2 push hl
594   86DA              ;	push bc
595   86DA 06 BF        	ld b,$bf
596   86DC 36 80        1 ld (hl),%10000000
597   86DE CD E6 89     	call NextScan
598   86E1 10 F9        	djnz 1B
599   86E3              ;	pop bc
600   86E3              ;	pop hl
601   86E3              ;	inc l
602   86E3              ;	djnz 2B
603   86E3
604   86E3 06 03        	ld b,3
605   86E5 21 00 47         ld hl,$4700
606   86E8 CD EE 86     3 call Bucle_1
607   86EB 10 FB            djnz 3B
608   86ED C9               ret
609   86EE
610   86EE C5           Bucle_1 push bc
611   86EF E5                   push hl
612   86F0 D1                   pop de
613   86F1 13                   inc de
614   86F2 01 FF 00             ld bc,255
615   86F5 36 FF                ld (hl),255
616   86F7 ED B0                ldir
617   86F9 23                   inc hl
618   86FA 3E 07                ld a,7
619   86FC 84                   add a,h
620   86FD 67                   ld h,a
621   86FE C1                   pop bc
622   86FF C9                   ret
623   8700
624   8700              ; ---------------------------------------------------------------
625   8700
626   8700              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8700              ; ******************************************************************************************************************************************************************************************
  2+  8700              ;
  3+  8700              ; 01/23
  4+  8700              ;
  5+  8700              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8700
  7+  8700 CD DA 89     Draw call Prepara_draw
  8+  8703 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8704 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8705 28 05        	jr z,2F
 11+  8707 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  870A 18 0C        	jr 1F
 13+  870C 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  870F 22 D2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8712 CD A1 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8715              ;													; _la esquina superior izquierda de la pantalla.
 17+  8715 CD 59 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8718 3A F7 84     1 ld a,(Ctrl_0)
 19+  871B CB 6F        	bit 5,a
 20+  871D 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  871F
 22+  871F CD 37 87     	call Comprueba_limite_horizontal
 23+  8722 CD C7 87     	call Comprueba_limite_vertical
 24+  8725
 25+  8725              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8725
 27+  8725 CD 14 89     3 call calcula_CColumnass
 28+  8728 CD 4B 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  872B CD A0 89     	call Define_rutina_de_impresion
 30+  872E
 31+  872E 3A F7 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8731 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8733 32 F7 84     	ld (Ctrl_0),a
 34+  8736
 35+  8736 C9           	ret
 36+  8737
 37+  8737              ; *******************************************************************************************************************************************************************************************
 38+  8737              ;	21/01/23
 39+  8737              ;
 40+  8737              ; 	Comprueba_limite_horizontal.
 41+  8737              ;
 42+  8737              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8737              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8737              ;
 45+  8737              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8737              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8737              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8737              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8737
 50+  8737
 51+  8737
 52+  8737 3A F7 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  873A CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  873C 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  873E E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8740 32 F7 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8743 18 09            jr 6F
 58+  8745 CB 5F        1 bit 3,a
 59+  8747 28 0A            jr z,2F
 60+  8749 E6 F7            and $f7
 61+  874B 32 F7 84         ld (Ctrl_0),a
 62+  874E CD A1 88     6 call Inicializacion
 63+  8751 18 5B            jr 5F
 64+  8753 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  8754
 66+  8754              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8754              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8754
 69+  8754 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8755 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  8758 CD 3F 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  875B 67           	ld h,a
 73+  875C EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  875D CD 3F 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8760 67           	ld h,a
 76+  8761 A7           	and a
 77+  8762 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8764 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8765 3A E0 84     	ld a,(Cuad_objeto)
 80+  8768 FE 02        	cp 2
 81+  876A 38 1E        	jr c,3F
 82+  876C 28 1C        	jr z,3F
 83+  876E 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  876F 28 23            jr z,7F
 85+  8771 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8773 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8775 E1           	pop hl
 88+  8776
 89+  8776              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8776              ; _para indicar con E="2" en caso necesario.
 91+  8776
 92+  8776 E5               push hl
 93+  8777 C5               push bc
 94+  8778 CD 3F 8C     	call calcula_tercio
 95+  877B FE 01        	cp 1
 96+  877D 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  877F CD AF 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8782 28 26            jr z,9F
 99+  8784 38 24            jr c,9F
100+  8786 1E 00        11 ld e,0
101+  8788 18 22            jr 8F
102+  878A 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  878B 28 07        	jr z, 7F
104+  878D 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  878F 1E 00         	ld e,0
106+  8791 E1           	pop hl
107+  8792 18 04        	jr 4F
108+  8794 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  8796 18 15            jr 10F
110+  8798
111+  8798              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  8798              ; _para indicar con E="2" en caso necesario.
113+  8798
114+  8798 E5           4 push hl
115+  8799 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  879A CD 3F 8C     	call calcula_tercio
117+  879D FE 01        	cp 1
118+  879F 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87A1 CD AF 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  87A4 28 04            jr z,9F
121+  87A6 30 02            jr nc,9F
122+  87A8 18 02        	jr 8F
123+  87AA 1E 02        9 ld e,2
124+  87AC C1           8 pop bc
125+  87AD E1           10 pop hl
126+  87AE C9           5 ret
127+  87AF
128+  87AF              ; --------------------
129+  87AF              ;
130+  87AF              ; 25/08/22
131+  87AF
132+  87AF CD 3F 8C     Comprueba_centro call calcula_tercio
133+  87B2 67               ld h,a
134+  87B3 08           	ex af,af
135+  87B4 FE 02        	cp 2
136+  87B6 38 07        	jr c,1F
137+  87B8 28 05        	jr z,1F
138+  87BA 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  87BD 18 03        	jr 2F
140+  87BF 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  87C2 08           2 ex af,af
142+  87C3 A7               and a
143+  87C4 ED 42            sbc hl,bc
144+  87C6 C9               ret
145+  87C7
146+  87C7              ; *********************************************************************************************************************************************************************************************
147+  87C7              ;
148+  87C7              ;   16/8/22
149+  87C7              ;
150+  87C7              ;	Comprueba_limite_vertical
151+  87C7              ;
152+  87C7              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  87C7              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  87C7              ;
155+  87C7
156+  87C7 2A D2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  87CA 7D           	ld a,l
158+  87CB E6 1F        	and $1F
159+  87CD 57           	ld d,a
160+  87CE 3A 03 85     	ld a,(Limite_vertical)
161+  87D1 BA           	cp d 											; Límite - Posición.
162+  87D2 08           	ex af,af 										; Resultado de CP d en F'.
163+  87D3 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  87D6 CB 47        	bit 0,a
165+  87D8 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  87DA
167+  87DA              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  87DA
169+  87DA 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  87DB 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  87DD
172+  87DD              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  87DD              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  87DD
175+  87DD 3A D7 84         ld a,(Coordenada_X)
176+  87E0 16 0F            ld d,Centro_izquierda
177+  87E2 A7               and a
178+  87E3 92               sub d 											 ; Posición - Centro_izquierda.
179+  87E4 28 1E            jr z,3F
180+  87E6 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  87E8              ;                                                    ; _salimos sin modificar nada.
182+  87E8 18 0E            jr 2F
183+  87EA 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  87EB 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  87ED
186+  87ED              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  87ED              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  87ED
189+  87ED 3A D7 84         ld a,(Coordenada_X)
190+  87F0 16 10            ld d,Centro_derecha
191+  87F2 A7               and a
192+  87F3 92               sub d
193+  87F4 28 0E            jr z,3F
194+  87F6 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  87F8              ;                                                    ; _salimos sin modificar nada.
196+  87F8 CB 43        2 bit 0,e
197+  87FA 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  87FC C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  87FD CD 91 88         call Modificaccionne
200+  8800 C1           	pop bc
201+  8801 CD A1 88         call Inicializacion
202+  8804 C9           3 ret 				 								 ; Salimos de la rutina.
203+  8805
204+  8805              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  8805
206+  8805 C5           4 push bc
207+  8806 01 D1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  8809 0A           	ld a,(bc)
209+  880A 3D           	dec a
210+  880B 47           	ld b,a 											 ; Columnas-1 en B.
211+  880C 7D           	ld a,l
212+  880D 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  880E CB 47        	bit 0,a
214+  8810 28 03        	jr z,5F
215+  8812 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8813 18 2E        	jr 7F
217+  8815
218+  8815              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  8815
220+  8815 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  8816 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  8817 3A F7 84     	ld a,(Ctrl_0)
223+  881A CB 4F        	bit 1,a
224+  881C 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  881E F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  881F
227+  881F              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  881F
229+  881F 1C               inc e
230+  8820 1D               dec e
231+  8821 20 07            jr nz,12F
232+  8823 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8824 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8825 22 D2 84     	ld (Posicion_actual),hl
235+  8828 18 44        13 jr 9F
236+  882A CB 43        12 bit 0,e
237+  882C 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  882E              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  882E C1           	pop bc
240+  882F 18 D3        	jr 3B
241+  8831 80           14 add b
242+  8832 6F               ld l,a
243+  8833 22 D2 84     	ld (Posicion_actual),hl
244+  8836 CD 91 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  8839 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  883B E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  883D 32 F7 84         ld (Ctrl_0),a
248+  8840 F1           	pop af
249+  8841 18 2B        	jr 9F
250+  8843
251+  8843              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8843
253+  8843 F5           7 push af
254+  8844 3A F7 84     	ld a,(Ctrl_0)
255+  8847 CB 47        	bit 0,a
256+  8849 20 1D        	jr nz,8F
257+  884B F1           	pop af
258+  884C
259+  884C              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  884C
261+  884C 1C           	inc e
262+  884D 1D               dec e
263+  884E 20 07            jr nz,10F
264+  8850 90           	sub b
265+  8851 6F               ld l,a
266+  8852 22 D2 84     	ld (Posicion_actual),hl
267+  8855 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  8857              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  8857 CB 43        10 bit 0,e
270+  8859 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  885B              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  885B C1           	pop bc
273+  885C 18 A6        	jr 3B
274+  885E 90           16 sub b
275+  885F 6F               ld l,a
276+  8860 22 D2 84     	ld (Posicion_actual),hl
277+  8863 CD 91 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  8866 18 06            jr 9F
279+  8868 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  886A 32 F7 84         ld (Ctrl_0),a
281+  886D F1           	pop af
282+  886E C1           9 pop bc
283+  886F 1E 00        	ld e,0
284+  8871 CD A1 88         call Inicializacion
285+  8874 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8875 08           	ex af,af
287+  8876 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  8877 18 8B            jr 3B
289+  8879
290+  8879              ; --------------------
291+  8879
292+  8879 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  887B CD F5 89     1 call PreviousScan
294+  887E 10 FB            djnz 1B
295+  8880 22 D2 84     	ld (Posicion_actual),hl
296+  8883 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  8884 C9           	ret
298+  8885
299+  8885              ; --------------------
300+  8885
301+  8885 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  8887 CD E6 89     1 call NextScan
303+  888A 10 FB            djnz 1B
304+  888C 22 D2 84     	ld (Posicion_actual),hl
305+  888F AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8890 C9           	ret
307+  8891
308+  8891              ; --------------------
309+  8891              ;
310+  8891              ;	22/01/23
311+  8891              ;
312+  8891              ;	E="1". Hemos cambiado de cuadrante.
313+  8891              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8891              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8891
316+  8891
317+  8891              Modificaccionne
318+  8891
319+  8891 3A E0 84     	ld a,(Cuad_objeto)
320+  8894 FE 02        	cp 2
321+  8896 CC 79 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  8899 DC 79 88         call c,Modifica_Pos_actual
323+  889C C8           	ret z
324+  889D CD 85 88         call Modifica_Pos_actual2
325+  88A0 C9               ret
326+  88A1
327+  88A1              ; *************************************************************************************************************************************************************************************************
328+  88A1              ;
329+  88A1              ;	13/8/22
330+  88A1              ;
331+  88A1              ;	Inicializacion
332+  88A1              ;
333+  88A1              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88A1              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88A1              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88A1              ;
337+  88A1              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88A1              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88A1              ;	_ desaparece/aparece.
340+  88A1
341+  88A1              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88A1              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88A1              ;
344+  88A1              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88A1              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88A1              ; 		   [E] ="0"
347+  88A1
348+  88A1              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88A1
350+  88A1 CD 3F 8C     Inicializacion call calcula_tercio
351+  88A4 28 36        	jr z,primit
352+  88A6 E6 02        	and 2
353+  88A8 20 07        	jr nz,segmit
354+  88AA 7D           	ld a,l
355+  88AB FE 7F        	cp $7f
356+  88AD 38 2D        	jr c,primit
357+  88AF 28 2B        	jr z,primit
358+  88B1 CD 0E 89     segmit call column
359+  88B4 38 13        	jr c,tercuad
360+  88B6 3E 04        cuarcuad ld a,4
361+  88B8 32 E0 84     	ld (Cuad_objeto),a
362+  88BB 21 20 48     	ld hl,$4820
363+  88BE 22 01 85     	ld (Limite_horizontal),hl
364+  88C1 21 03 85     	ld hl,Limite_vertical
365+  88C4 36 0D        	ld (hl),$0d
366+  88C6 08           	ex af,af
367+  88C7 18 3C        	jr 1F
368+  88C9              tercuad
369+  88C9              ;	call Fija_punteros
370+  88C9 3E 03        	ld a,3
371+  88CB 32 E0 84     	ld (Cuad_objeto),a
372+  88CE 21 20 48     	ld hl,$4820
373+  88D1 22 01 85     	ld (Limite_horizontal),hl
374+  88D4 21 03 85     	ld hl,Limite_vertical
375+  88D7 36 12        	ld (hl),$12
376+  88D9 08           	ex af,af
377+  88DA 18 29        	jr 1F
378+  88DC CD 0E 89     primit call column
379+  88DF 38 13        	jr c, primcuad
380+  88E1              segcuad
381+  88E1              ;	call Fija_punteros
382+  88E1 3E 02        	ld a,2
383+  88E3 32 E0 84     	ld (Cuad_objeto),a
384+  88E6 21 C0 4F     	ld hl,$4fc0
385+  88E9 22 01 85     	ld (Limite_horizontal),hl
386+  88EC 21 03 85     	ld hl,Limite_vertical
387+  88EF 36 0D        	ld (hl),$0d
388+  88F1 08           	ex af,af
389+  88F2 18 11        	jr 1F
390+  88F4              primcuad
391+  88F4              ;	call Fija_punteros
392+  88F4 3E 01        	ld a,1
393+  88F6 32 E0 84     	ld (Cuad_objeto),a
394+  88F9 21 C0 4F     	ld hl,$4fc0
395+  88FC 22 01 85     	ld (Limite_horizontal),hl
396+  88FF 21 03 85     	ld hl,Limite_vertical
397+  8902 36 12        	ld (hl),$12
398+  8904 08           	ex af,af
399+  8905 CD 4F 8F     1 call Genera_coordenadas
400+  8908 21 F7 84     	ld hl,Ctrl_0
401+  890B CB EE        	set 5,(hl)
402+  890D C9           	ret
403+  890E
404+  890E              ; ------------------------------------------------------------------------------------------------------------------
405+  890E
406+  890E              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  890E              ;
408+  890E              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  890E
410+  890E 7D           column ld a,l
411+  890F E6 1F        	and $1f
412+  8911 FE 10         	cp $10
413+  8913 C9            	ret
414+  8914
415+  8914              ; --------------------------------------------------------------------------------------------------------------------
416+  8914              ;
417+  8914              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  8914              ;
419+  8914              ; 14/12/22
420+  8914              ;
421+  8914              ;	Modifica: A y BC.
422+  8914
423+  8914 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  8917 E6 01        	and 1
425+  8919 28 17        	jr z,1F
426+  891B
427+  891B              ; Nos encontramos en la parte izquierda de la pantalla
428+  891B
429+  891B 3A D7 84     	ld a,(Coordenada_X)
430+  891E 47           	ld b,a
431+  891F 04           	inc b											; (Coordenada_X)+1 en B.
432+  8920 79           	ld a,c
433+  8921 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8922 38 08        	jr c,2F
435+  8924 47           	ld b,a
436+  8925 79           	ld a,c
437+  8926 90           	sub b
438+  8927 32 00 85     	ld (Columnas),a
439+  892A 18 1B        	jr 4F
440+  892C 79           2 ld a,c
441+  892D 32 00 85     	ld (Columnas),a
442+  8930 18 15        	jr 4F
443+  8932
444+  8932              ; Nos encontramos en la parte derecha de la pantalla.
445+  8932
446+  8932 3A D7 84     1 ld a,(Coordenada_X)
447+  8935 81           	add c
448+  8936 3D           	dec a
449+  8937 D6 1F        	sub $1f
450+  8939 38 08        	jr c,3F
451+  893B 47           	ld b,a
452+  893C 79           	ld a,c
453+  893D 90           	sub b
454+  893E 32 00 85     	ld (Columnas),a
455+  8941 18 04        	jr 4F
456+  8943 79           3 ld a,c
457+  8944 32 00 85     	ld (Columnas),a
458+  8947 D9           4 exx
459+  8948 4F           	ld c,a
460+  8949 D9           	exx
461+  894A C9            ret
462+  894B
463+  894B              ; --------------------------------------------------------------------------------------------------------------------
464+  894B              ;
465+  894B              ; 7/1/23
466+  894B              ;
467+  894B              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  894B              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  894B              ;
470+  894B              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  894B              ;	DESTRUYE: HL,B Y A.
472+  894B
473+  894B 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  894E FE 02        	cp 2
475+  8950 38 18        	jr c,1F
476+  8952 28 16        	jr z,1F
477+  8954 E6 01        	and 1
478+  8956 28 0D        	jr z,3F
479+  8958
480+  8958              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  8958
482+  8958 CD 94 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  895B
484+  895B 7D           9 ld a,l
485+  895C E6 1F        	and $1f
486+  895E 28 2A        	jr z,7F
487+  8960 2B           	dec hl
488+  8961 10 F8        	djnz 9B
489+  8963 18 25        	jr 7F
490+  8965
491+  8965              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8965
493+  8965 2A D2 84     3 ld hl,(Posicion_actual)
494+  8968 18 20        	jr 7F
495+  896A
496+  896A 28 14        1 jr z,2F
497+  896C
498+  896C              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  896C
500+  896C CD 94 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  896F 7D           4 ld a,l
502+  8970 E6 1F        	and $1f
503+  8972 28 03        	jr z,6F
504+  8974 2B           	dec hl
505+  8975 10 F8        	djnz 4B
506+  8977 06 0F        6 ld b,15
507+  8979 CD F5 89     5 call PreviousScan
508+  897C 10 FB        	djnz 5B
509+  897E 18 0A        	jr 7F
510+  8980
511+  8980              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  8980
513+  8980 CD 94 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  8983 06 0F        	ld b,15
515+  8985 CD F5 89     8 call PreviousScan
516+  8988 10 FB        	djnz 8B
517+  898A
518+  898A E5           7 push hl
519+  898B DD E1        	pop ix
520+  898D
521+  898D 2A D4 84     	ld hl,(Puntero_objeto)
522+  8990 E5           	push hl
523+  8991 FD E1        	pop iy
524+  8993
525+  8993 C9           	ret
526+  8994
527+  8994              ; --------------------------------------------------------------------------------------------------------------------
528+  8994              ;
529+  8994              ;	2/1/23
530+  8994              ;
531+  8994              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8994              ;
533+  8994              ;	Tras esta rutina tenemos:
534+  8994              ;
535+  8994              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8994              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8994              ;
538+  8994              ;	DESTRUYE!!!!! HL,B y A.
539+  8994
540+  8994 2A D2 84     Operandos ld hl,(Posicion_actual)
541+  8997 3A 00 85     	ld a,(Columnas)
542+  899A 3D           	dec a
543+  899B 20 01        	jr nz,1F
544+  899D 3C           	inc a
545+  899E 47           1 ld b,a
546+  899F C9           	ret
547+  89A0
548+  89A0              ; --------------------------------------------------------------------------------------------------------------------
549+  89A0              ;
550+  89A0              ;	3/1/23
551+  89A0              ;
552+  89A0              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89A0              ;
554+  89A0              ;	Destruye: A,B,HL y DE.
555+  89A0
556+  89A0              Define_rutina_de_impresion
557+  89A0
558+  89A0 3A D1 84     	ld a,(Columns)
559+  89A3 47           	ld b,a
560+  89A4 3A 00 85     	ld a,(Columnas)
561+  89A7 B8           	cp b
562+  89A8 20 0D        	jr nz,2f
563+  89AA
564+  89AA              ;	La entidad se imprime entera.
565+  89AA
566+  89AA 21 3C 8A     	ld hl, Indice_entidades_completas
567+  89AD E6 01        	and 1
568+  89AF 28 02        	jr z,1F
569+  89B1
570+  89B1 23           	inc hl
571+  89B2 23           	inc hl
572+  89B3
573+  89B3 CD 33 86     1 call Extrae_address
574+  89B6 C9           	ret		;	ret
575+  89B7
576+  89B7              ;	La entidad no se imprime entera en pantalla.
577+  89B7
578+  89B7 3A E0 84     2 ld a,(Cuad_objeto)
579+  89BA E6 01        	and 1
580+  89BC 28 17        	jr z,3F
581+  89BE
582+  89BE              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  89BE
584+  89BE 21 40 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  89C1 3A D1 84     4 ld a,(Columns)
586+  89C4 E6 01        	and 1
587+  89C6 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  89C8
589+  89C8 23           	inc hl
590+  89C9 23           	inc hl
591+  89CA
592+  89CA 3A 00 85     	ld a,(Columnas)
593+  89CD E6 01        	and 1
594+  89CF 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  89D1
596+  89D1 23           	inc hl
597+  89D2 23           	inc hl
598+  89D3
599+  89D3 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  89D5
601+  89D5 21 46 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  89D8 18 E7        	jr 4B
603+  89DA
604+  89DA              ; --------------------------------------------------------------------------------------------------------------------
605+  89DA              ;
606+  89DA              ;	Prepara_draw
607+  89DA              ;
608+  89DA              ;	Es una rutina de carga.
609+  89DA              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  89DA              ;
611+  89DA              ;	FUNCIONAMIENTO:
612+  89DA              ;
613+  89DA              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  89DA              ;	- LD (Posicion_actual) del objeto en [HL].
615+  89DA              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  89DA              ;
617+  89DA              ;	DESTRUYE:
618+  89DA              ;
619+  89DA              ;	Logicamente, BC,HL y E quedan destruidos.
620+  89DA
621+  89DA 21 D0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  89DD 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  89DE 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  89DF 4E           	ld c,(hl)
625+  89E0 2A D2 84     	ld hl,(Posicion_actual)
626+  89E3 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  89E5 C9           	ret
628+  89E6
629+  89E6              ;----------------------------------------------------------------------------------------------------------------
630+  89E6              ;
631+  89E6              ;	5/08/22
632+  89E6              ;
633+  89E6              ;   NextScan.
634+  89E6              ;
635+  89E6              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  89E6              ;
637+  89E6              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  89E6              ;
639+  89E6              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  89E6              ;
641+  89E6              ;       DESTRUIDOS: AF y HL !!!
642+  89E6              ;
643+  89E6              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  89E6              ;
645+  89E6
646+  89E6 24           NextScan inc h          ; Incrementamos el scanline.
647+  89E7 7C               ld a,h
648+  89E8 E6 07            and 7
649+  89EA C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  89EB
651+  89EB 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  89EC C6 20            add a,$20           ; Vamos a comprobarlo...
653+  89EE 6F               ld l,a
654+  89EF D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  89F0
656+  89F0 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  89F1 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  89F3 67               ld h,a
659+  89F4 C9               ret
660+  89F5
661+  89F5              ;----------------------------------------------------------------------------------------------------------------
662+  89F5              ;
663+  89F5              ;	5/08/22
664+  89F5              ;
665+  89F5              ;   PreviousScan.
666+  89F5              ;
667+  89F5              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  89F5              ;
669+  89F5              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  89F5              ;
671+  89F5              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  89F5              ;
673+  89F5              ;       DESTRUIDOS: AF y HL !!!
674+  89F5              ;
675+  89F5              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  89F5              ;
677+  89F5
678+  89F5 7C           PreviousScan ld a,h
679+  89F6 25               dec h               ; Dec H.
680+  89F7 E6 07            and 7
681+  89F9 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  89FA
683+  89FA 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  89FB D6 20            sub $20             ; Vamos a comprobarlo...
685+  89FD 6F               ld l,a
686+  89FE D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  89FF
688+  89FF 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A00 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A02 67               ld h,a
691+  8A03 C9               ret
692+  8A04
693+  8A04              ; -----------------------------------------------------------------------------------
694+  8A04              ;
695+  8A04              ;	15/1/23
696+  8A04
697+  8A04 ED 73 0C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  8A08 31 00 70     	ld sp,Album_de_fotos
699+  8A0B
700+  8A0B FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  8A0D E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  8A0E D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  8A0F
704+  8A0F ED 73 0E 85  	ld (Stack_2),sp
705+  8A13 ED 7B 0C 85  	ld sp,(Stack)
706+  8A17
707+  8A17              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  8A17
709+  8A17 3E CD        	ld a,$cd
710+  8A19 32 21 8A     	ld (Imprime),a
711+  8A1C EB           	ex de,hl
712+  8A1D 22 22 8A     	ld (Imprime+1),hl
713+  8A20 EB           	ex de,hl
714+  8A21
715+  8A21              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A21
717+  8A21 00 00 00     Imprime db 0,0,0
718+  8A24
719+  8A24 ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A28
721+  8A28 3A 0B 85     	ld a,(Numero_de_malotes)
722+  8A2B 3D           	dec a
723+  8A2C 28 09        	jr z,1F
724+  8A2E 32 0B 85      	ld (Numero_de_malotes),a
725+  8A31 ED 7B 0E 85  	ld sp,(Stack_2)
726+  8A35 18 D4        	jr 2B
727+  8A37
728+  8A37 AF           1 xor a
729+  8A38 32 0E 85     	ld (Stack_2),a
730+  8A3B C9           	ret
731+  8A3C
732+  8A3C
# file closed: Draw_XOR.asm
627   8A3C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A3C              ;   índices de Rutinas de impresión.
  2+  8A3C
  3+  8A3C 4C 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A3E 79 8A            defw Pinta_Amadeus_3x2
  5+  8A40
  6+  8A40 CF 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A42 6F 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A44 23 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A46
 10+  8A46 F9 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A48 FD 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A4A B1 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A4C
 14+  8A4C
 15+  8A4C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A4C              ;
 17+  8A4C              ;   12/12/22
 18+  8A4C              ;
 19+  8A4C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A4C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A4C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A4C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A4C              ;
 24+  8A4C              ;   Modifica: DE y HL.
 25+  8A4C
 26+  8A4C ED 73 0C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A50 FD F9        	ld sp,iy
 28+  8A52 06 10            ld b,16
 29+  8A54 D1           1 pop de
 30+  8A55 7B               ld a,e
 31+  8A56 AE               xor (hl)
 32+  8A57 77           	ld (hl),a
 33+  8A58 23           	inc hl
 34+  8A59 7A               ld a,d
 35+  8A5A AE               xor (hl)
 36+  8A5B 77           	ld (hl),a
 37+  8A5C 2B           	dec hl
 38+  8A5D 24           	inc h
 39+  8A5E 7C               ld a,h
 40+  8A5F E6 07            and 7
 41+  8A61 20 0A            jr nz,2F
 42+  8A63 7D               ld a,l
 43+  8A64 C6 20            add a,$20
 44+  8A66 6F               ld l,a
 45+  8A67 38 04            jr c,2F
 46+  8A69 7C               ld a,h
 47+  8A6A D6 08            sub 8
 48+  8A6C 67               ld h,a
 49+  8A6D 7C           2 ld a,h
 50+  8A6E FE 58            cp $58
 51+  8A70 28 02            jr z,3F
 52+  8A72 10 E0            djnz 1B
 53+  8A74 ED 7B 0C 85  3 ld sp,(Stack)
 54+  8A78 C9           	ret
 55+  8A79
 56+  8A79 ED 73 0C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A7D FD F9        	ld sp,iy
 58+  8A7F 06 08            ld b,8
 59+  8A81 D1           1 pop de
 60+  8A82 7B               ld a,e
 61+  8A83 AE               xor (hl)
 62+  8A84 77           	ld (hl),a
 63+  8A85 23           	inc hl
 64+  8A86 7A               ld a,d
 65+  8A87 AE               xor (hl)
 66+  8A88 77           	ld (hl),a
 67+  8A89 23           	inc hl
 68+  8A8A D1           	pop de
 69+  8A8B 7B               ld a,e
 70+  8A8C AE               xor (hl)
 71+  8A8D 77           	ld (hl),a
 72+  8A8E 2B           	dec hl
 73+  8A8F 2B           	dec hl
 74+  8A90 24           	inc h
 75+  8A91 7C               ld a,h
 76+  8A92 E6 07            and 7
 77+  8A94 20 0A            jr nz,2F
 78+  8A96 7D               ld a,l
 79+  8A97 C6 20            add a,$20
 80+  8A99 6F               ld l,a
 81+  8A9A 38 04            jr c,2F
 82+  8A9C 7C               ld a,h
 83+  8A9D D6 08            sub 8
 84+  8A9F 67               ld h,a
 85+  8AA0 7C           2 ld a,h
 86+  8AA1 FE 58            cp $58
 87+  8AA3 28 25            jr z,4F
 88+  8AA5 7A               ld a,d
 89+  8AA6 AE               xor (hl)
 90+  8AA7 77               ld (hl),a
 91+  8AA8 D1           	pop de
 92+  8AA9 23           	inc hl
 93+  8AAA 7B               ld a,e
 94+  8AAB AE               xor (hl)
 95+  8AAC 77           	ld (hl),a
 96+  8AAD 23           	inc hl
 97+  8AAE 7A               ld a,d
 98+  8AAF AE               xor (hl)
 99+  8AB0 77           	ld (hl),a
100+  8AB1 2B           	dec hl
101+  8AB2 2B           	dec hl
102+  8AB3 24           	inc h
103+  8AB4 7C               ld a,h
104+  8AB5 E6 07            and 7
105+  8AB7 20 0A            jr nz,3F
106+  8AB9 7D               ld a,l
107+  8ABA C6 20            add a,$20
108+  8ABC 6F               ld l,a
109+  8ABD 38 04            jr c,3F
110+  8ABF 7C               ld a,h
111+  8AC0 D6 08            sub 8
112+  8AC2 67               ld h,a
113+  8AC3 7C           3 ld a,h
114+  8AC4 FE 58            cp $58
115+  8AC6 28 02            jr z,4F
116+  8AC8 10 B7            djnz 1B
117+  8ACA ED 7B 0C 85  4 ld sp,(Stack)
118+  8ACE C9           	ret
119+  8ACF
120+  8ACF              ; ---------------------------------------------------
121+  8ACF
122+  8ACF ED 73 0C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AD3 FD F9        	ld sp,iy
124+  8AD5 06 10            ld b,16
125+  8AD7 D1           1 pop de
126+  8AD8 7A           	ld a,d
127+  8AD9 AE           	xor (hl)
128+  8ADA 77           	ld (hl),a
129+  8ADB 24           	inc h
130+  8ADC 7C               ld a,h
131+  8ADD E6 07            and 7
132+  8ADF 20 0C            jr nz,2F
133+  8AE1 7D               ld a,l
134+  8AE2 C6 20            add a,$20
135+  8AE4 6F               ld l,a
136+  8AE5 38 06            jr c,2F
137+  8AE7 7C               ld a,h
138+  8AE8 D6 08            sub 8
139+  8AEA 67               ld h,a
140+  8AEB 18 00            jr 2F
141+  8AED 7C           2 ld a,h
142+  8AEE FE 58            cp $58
143+  8AF0 28 02            jr z,3F
144+  8AF2 10 E3            djnz 1B
145+  8AF4 ED 7B 0C 85  3 ld sp,(Stack)
146+  8AF8 C9           	ret
147+  8AF9
148+  8AF9 ED 73 0C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AFD FD F9        	ld sp,iy
150+  8AFF 06 10            ld b,16
151+  8B01 D1           1 pop de
152+  8B02 7B           	ld a,e
153+  8B03 AE           	xor (hl)
154+  8B04 77           	ld (hl),a
155+  8B05 24           	inc h
156+  8B06 7C               ld a,h
157+  8B07 E6 07            and 7
158+  8B09 20 0C            jr nz,2F
159+  8B0B 7D               ld a,l
160+  8B0C C6 20            add a,$20
161+  8B0E 6F               ld l,a
162+  8B0F 38 06            jr c,2F
163+  8B11 7C               ld a,h
164+  8B12 D6 08            sub 8
165+  8B14 67               ld h,a
166+  8B15 18 00            jr 2F
167+  8B17 7C           2 ld a,h
168+  8B18 FE 58            cp $58
169+  8B1A 28 02            jr z,3F
170+  8B1C 10 E3            djnz 1B
171+  8B1E ED 7B 0C 85  3 ld sp,(Stack)
172+  8B22 C9           	ret
173+  8B23
174+  8B23              ; ---------------------------------------------------
175+  8B23
176+  8B23 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B27 FD F9        	ld sp,iy
178+  8B29 06 08            ld b,8
179+  8B2B D1           1 pop de
180+  8B2C 7A           	ld a,d
181+  8B2D AE           	xor (hl)
182+  8B2E 77           	ld (hl),a
183+  8B2F 23           	inc hl
184+  8B30 D1           	pop de
185+  8B31 7B           	ld a,e
186+  8B32 AE           	xor (hl)
187+  8B33 77           	ld (hl),a
188+  8B34 2B           	dec hl
189+  8B35 24            	inc h
190+  8B36 7C               ld a,h
191+  8B37 E6 07            and 7
192+  8B39 20 0A            jr nz,2F
193+  8B3B 7D               ld a,l
194+  8B3C C6 20            add a,$20
195+  8B3E 6F               ld l,a
196+  8B3F 38 04            jr c,2F
197+  8B41 7C               ld a,h
198+  8B42 D6 08            sub 8
199+  8B44 67               ld h,a
200+  8B45 7C           2 ld a,h
201+  8B46 FE 58            cp $58
202+  8B48 28 20            jr z,4F
203+  8B4A D1               pop de
204+  8B4B 7B           	ld a,e
205+  8B4C AE           	xor (hl)
206+  8B4D 77           	ld (hl),a
207+  8B4E 23           	inc hl
208+  8B4F 7A           	ld a,d
209+  8B50 AE           	xor (hl)
210+  8B51 77           	ld (hl),a
211+  8B52 2B           	dec hl
212+  8B53 24           	inc h
213+  8B54 7C               ld a,h
214+  8B55 E6 07            and 7
215+  8B57 20 0A            jr nz,3F
216+  8B59 7D               ld a,l
217+  8B5A C6 20            add a,$20
218+  8B5C 6F               ld l,a
219+  8B5D 38 04            jr c,3F
220+  8B5F 7C               ld a,h
221+  8B60 D6 08            sub 8
222+  8B62 67               ld h,a
223+  8B63 7C           3 ld a,h
224+  8B64 FE 58            cp $58
225+  8B66 28 02            jr z,4F
226+  8B68 10 C1            djnz 1B
227+  8B6A ED 7B 0C 85  4 ld sp,(Stack)
228+  8B6E C9           	ret
229+  8B6F
230+  8B6F ED 73 0C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B73 FD F9        	ld sp,iy
232+  8B75 06 08            ld b,8
233+  8B77 D1           1 pop de
234+  8B78 D1           	pop de
235+  8B79 7B           	ld a,e
236+  8B7A AE           	xor (hl)
237+  8B7B 77           	ld (hl),a
238+  8B7C 24            	inc h
239+  8B7D 7C               ld a,h
240+  8B7E E6 07            and 7
241+  8B80 20 0A            jr nz,2F
242+  8B82 7D               ld a,l
243+  8B83 C6 20            add a,$20
244+  8B85 6F               ld l,a
245+  8B86 38 04            jr c,2F
246+  8B88 7C               ld a,h
247+  8B89 D6 08            sub 8
248+  8B8B 67               ld h,a
249+  8B8C 7C           2 ld a,h
250+  8B8D FE 58            cp $58
251+  8B8F 28 1B            jr z,4F
252+  8B91 D1               pop de
253+  8B92 7A           	ld a,d
254+  8B93 AE           	xor (hl)
255+  8B94 77           	ld (hl),a
256+  8B95 24           	inc h
257+  8B96 7C               ld a,h
258+  8B97 E6 07            and 7
259+  8B99 20 0A            jr nz,3F
260+  8B9B 7D               ld a,l
261+  8B9C C6 20            add a,$20
262+  8B9E 6F               ld l,a
263+  8B9F 38 04            jr c,3F
264+  8BA1 7C               ld a,h
265+  8BA2 D6 08            sub 8
266+  8BA4 67               ld h,a
267+  8BA5 7C           3 ld a,h
268+  8BA6 FE 58            cp $58
269+  8BA8 28 02            jr z,4F
270+  8BAA 10 CB            djnz 1B
271+  8BAC ED 7B 0C 85  4 ld sp,(Stack)
272+  8BB0 C9           	ret
273+  8BB1
274+  8BB1 ED 73 0C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8BB5 FD F9        	ld sp,iy
276+  8BB7 06 08            ld b,8
277+  8BB9 D1           1 pop de
278+  8BBA 7B           	ld a,e
279+  8BBB AE           	xor (hl)
280+  8BBC 77           	ld (hl),a
281+  8BBD 23           	inc hl
282+  8BBE 7A           	ld a,d
283+  8BBF AE           	xor (hl)
284+  8BC0 77           	ld (hl),a
285+  8BC1 2B           	dec hl
286+  8BC2 24             	inc h
287+  8BC3 7C               ld a,h
288+  8BC4 E6 07            and 7
289+  8BC6 20 0A            jr nz,2F
290+  8BC8 7D               ld a,l
291+  8BC9 C6 20            add a,$20
292+  8BCB 6F               ld l,a
293+  8BCC 38 04            jr c,2F
294+  8BCE 7C               ld a,h
295+  8BCF D6 08            sub 8
296+  8BD1 67               ld h,a
297+  8BD2 7C           2 ld a,h
298+  8BD3 FE 58            cp $58
299+  8BD5 28 21            jr z,4F
300+  8BD7 D1               pop de
301+  8BD8 7A           	ld a,d
302+  8BD9 AE           	xor (hl)
303+  8BDA 77           	ld (hl),a
304+  8BDB 23           	inc hl
305+  8BDC D1               pop de
306+  8BDD 7B           	ld a,e
307+  8BDE AE           	xor (hl)
308+  8BDF 77           	ld (hl),a
309+  8BE0 2B           	dec hl
310+  8BE1 24           	inc h
311+  8BE2 7C               ld a,h
312+  8BE3 E6 07            and 7
313+  8BE5 20 0A            jr nz,3F
314+  8BE7 7D               ld a,l
315+  8BE8 C6 20            add a,$20
316+  8BEA 6F               ld l,a
317+  8BEB 38 04            jr c,3F
318+  8BED 7C               ld a,h
319+  8BEE D6 08            sub 8
320+  8BF0 67               ld h,a
321+  8BF1 7C           3 ld a,h
322+  8BF2 FE 58            cp $58
323+  8BF4 28 02            jr z,4F
324+  8BF6 10 C1            djnz 1B
325+  8BF8 ED 7B 0C 85  4 ld sp,(Stack)
326+  8BFC C9           	ret
327+  8BFD
328+  8BFD ED 73 0C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C01 FD F9        	ld sp,iy
330+  8C03 06 08            ld b,8
331+  8C05 D1           1 pop de
332+  8C06 7B           	ld a,e
333+  8C07 AE           	xor (hl)
334+  8C08 77           	ld (hl),a
335+  8C09 24            	inc h
336+  8C0A 7C               ld a,h
337+  8C0B E6 07            and 7
338+  8C0D 20 0A            jr nz,2F
339+  8C0F 7D               ld a,l
340+  8C10 C6 20            add a,$20
341+  8C12 6F               ld l,a
342+  8C13 38 04            jr c,2F
343+  8C15 7C               ld a,h
344+  8C16 D6 08            sub 8
345+  8C18 67               ld h,a
346+  8C19 7C           2 ld a,h
347+  8C1A FE 58            cp $58
348+  8C1C 28 1C            jr z,4F
349+  8C1E D1               pop de
350+  8C1F 7A           	ld a,d
351+  8C20 AE           	xor (hl)
352+  8C21 77           	ld (hl),a
353+  8C22 24           	inc h
354+  8C23 7C               ld a,h
355+  8C24 E6 07            and 7
356+  8C26 20 0A            jr nz,3F
357+  8C28 7D               ld a,l
358+  8C29 C6 20            add a,$20
359+  8C2B 6F               ld l,a
360+  8C2C 38 04            jr c,3F
361+  8C2E 7C               ld a,h
362+  8C2F D6 08            sub 8
363+  8C31 67               ld h,a
364+  8C32 7C           3 ld a,h
365+  8C33 FE 58            cp $58
366+  8C35 28 03            jr z,4F
367+  8C37 D1               pop de
368+  8C38 10 CB            djnz 1B
369+  8C3A ED 7B 0C 85  4 ld sp,(Stack)
370+  8C3E C9           	ret
371+  8C3F
372+  8C3F              ; ---------------------------------------------------
373+  8C3F
# file closed: Rutinas_de_impresion_sprites.asm
628   8C3F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C3F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C3F              ;
  3+  8C3F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C3F              ;
  5+  8C3F              ; *****************************************************************************************************************************************************************************************
  6+  8C3F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C3F
  8+  8C3F 7C           calcula_tercio ld a,h
  9+  8C40 E6 18        	and $18
 10+  8C42 CB 2F        	sra a
 11+  8C44 CB 2F        	sra a
 12+  8C46 CB 2F        	sra a
 13+  8C48 C9           	ret
 14+  8C49
# file closed: calcula_tercio.asm
629   8C49              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C49              ; -----------------------------------------------------------------------------------------
  2+  8C49              ;
  3+  8C49              ;   04/11/22
  4+  8C49              ;
  5+  8C49              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C49              ;
  7+  8C49              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C49              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C49              ;
 10+  8C49              ;   DESTRUYE: HL y A. !!!!!
 11+  8C49
 12+  8C49 CD 3F 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C4C 26 58            ld h,$58
 14+  8C4E 84               add h
 15+  8C4F 67               ld h,a
 16+  8C50 C9               ret
# file closed: Calcula_direccion_atributos.asm
630   8C51              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C51              ; ********** **********
  2+  8C51              ;
  3+  8C51              ;   5/11/22
  4+  8C51              ;
  5+  8C51              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C51              ;
  7+  8C51              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C51              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C51              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C51              ;
 11+  8C51              ;   NO DESTROYERSSSS !!!!!
 12+  8C51
 13+  8C51 E5           Define_atributos push hl
 14+  8C52 C5           	push bc
 15+  8C53 D5           	push de
 16+  8C54
 17+  8C54 CD 49 8C     	call Calcula_direccion_atributos
 18+  8C57
 19+  8C57 D9               exx
 20+  8C58 E5               push hl
 21+  8C59 D9               exx
 22+  8C5A D1               pop de
 23+  8C5B
 24+  8C5B 42               ld b,d
 25+  8C5C 7B               ld a,e 									; (Attr) en A.
 26+  8C5D
 27+  8C5D C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C5E E5            	push hl 								; Guardo dirección de attr.
 29+  8C5F
 30+  8C5F              ; -----
 31+  8C5F
 32+  8C5F 77           2 ld (hl),a
 33+  8C60 0D           	dec c 									; Decremento (Columnas).
 34+  8C61 28 03        	jr z,1F
 35+  8C63 23           	inc hl
 36+  8C64 18 F9        	jr 2B
 37+  8C66
 38+  8C66 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C67 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C68
 41+  8C68 05           	dec b									; Decremento (Filas).
 42+  8C69 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C6B
 44+  8C6B 11 20 00     	ld de,32
 45+  8C6E A7           	and a
 46+  8C6F ED 5A        	adc hl,de
 47+  8C71 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C73
 49+  8C73 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C74 C1           	pop bc
 51+  8C75 E1           	pop hl
 52+  8C76
 53+  8C76 C9           	ret
 54+  8C77
# file closed: Define_atributos.asm
631   8C77              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C77              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C77              ;
  3+  8C77              ;
  4+  8C77              ;	CLS.
  5+  8C77              ;
  6+  8C77              ;	Limpia la pantalla y define sus atributos.
  7+  8C77              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C77              ;
  9+  8C77              ;	COLORES: 0 ..... NEGRO
 10+  8C77              ;    		 1 ..... AZUL
 11+  8C77              ; 			 2 ..... ROJO
 12+  8C77              ;			 3 ..... MAGENTA
 13+  8C77              ; 			 4 ..... VERDE
 14+  8C77              ; 			 5 ..... CIAN
 15+  8C77              ;			 6 ..... AMARILLO
 16+  8C77              ; 			 7 ..... BLANCO
 17+  8C77              ;
 18+  8C77              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C77              ;
 20+  8C77              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C77
 22+  8C77
 23+  8C77 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C7A 11 01 40     	LD DE,$4001
 25+  8C7D 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C80 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C82 ED B0        	LDIR
 28+  8C84 01 FF 02     	LD BC,767
 29+  8C87 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C88 ED B0        	LDIR
 31+  8C8A C9           	ret
 32+  8C8B
# file closed: Cls.asm
632   8C8B              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C8B              ; ******************************************************************************************************************************************************************************************
  2+  8C8B              ;
  3+  8C8B              ;   22/01/23
  4+  8C8B              ;
  5+  8C8B              ;	Mov_down
  6+  8C8B              ;
  7+  8C8B              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C8B              ;
  9+  8C8B              ;
 10+  8C8B 21 F7 84     Mov_down ld hl,Ctrl_0
 11+  8C8E CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C90              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C90              ; 																	; _ en el caso de que no lo haya.
 14+  8C90 3A E4 84     	ld a,(Vel_down)
 15+  8C93 47           	ld b,a
 16+  8C94 2A D2 84         ld hl,(Posicion_actual)
 17+  8C97 CD 3F 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C9A E6 02        	and 2
 19+  8C9C 28 0F        	jr z,1F
 20+  8C9E
 21+  8C9E              ; Nos encontramos en el último tercio de pantalla.
 22+  8C9E              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8C9E
 24+  8C9E 7C           	ld a,h
 25+  8C9F FE 57        	cp $57
 26+  8CA1 20 0A        	jr nz,1F
 27+  8CA3 7D           	ld a,l
 28+  8CA4 C6 20        	add $20
 29+  8CA6 30 05        	jr nc,1F
 30+  8CA8              ; ------------------------------
 31+  8CA8 CD 39 8F     	call Reaparece_arriba
 32+  8CAB              ;	call Reinicio
 33+  8CAB              ; ------------------------------
 34+  8CAB 18 08        	jr 3F
 35+  8CAD CD E6 89     1 call NextScan
 36+  8CB0 22 D2 84     	ld (Posicion_actual),hl
 37+  8CB3 10 E2            djnz 2B
 38+  8CB5 CD 4F 8F     3 call Genera_coordenadas
 39+  8CB8 C9           	ret
 40+  8CB9
 41+  8CB9
 42+  8CB9              ; ******************************************************************************************************************************************************************************************
 43+  8CB9              ;
 44+  8CB9              ;   22/01/23
 45+  8CB9              ;
 46+  8CB9              ;	Mov_up
 47+  8CB9              ;
 48+  8CB9              ; 	Mueve el Sprite hacia arriba.
 49+  8CB9              ;
 50+  8CB9              ;
 51+  8CB9 21 F7 84     Mov_up ld hl,Ctrl_0
 52+  8CBC CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8CBE              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8CBE              ; 																		; _ en el caso de que no lo haya.
 55+  8CBE 3A E3 84     	ld a,(Vel_up)
 56+  8CC1 47           	ld b,a
 57+  8CC2 2A D2 84     	ld hl,(Posicion_actual)
 58+  8CC5 CD 3F 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CC8 A7           	and a
 60+  8CC9 20 10        	jr nz,1F
 61+  8CCB
 62+  8CCB              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CCB              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CCB
 65+  8CCB 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CCC FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CCE 20 0B            jr nz,1F
 68+  8CD0 7D               ld a,l
 69+  8CD1 D6 20            sub $20
 70+  8CD3 30 06            jr nc,1F
 71+  8CD5 25               dec h
 72+  8CD6
 73+  8CD6              ; -----------------------------
 74+  8CD6 CD 29 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CD9              ;	call Reinicio
 76+  8CD9              ; -----------------------------
 77+  8CD9
 78+  8CD9 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CDB CD F5 89     1 call PreviousScan
 80+  8CDE 22 D2 84     	ld (Posicion_actual),hl
 81+  8CE1 10 E2            djnz 3B
 82+  8CE3 CD 4F 8F     2 call Genera_coordenadas
 83+  8CE6 C9           	ret
 84+  8CE7
 85+  8CE7              ; ******************************************************************************************************************************************************************************************
 86+  8CE7              ;
 87+  8CE7              ;	19/10/22
 88+  8CE7              ;
 89+  8CE7              ;	Mov_right.
 90+  8CE7              ;
 91+  8CE7              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8CE7              ;
 93+  8CE7
 94+  8CE7 21 F7 84     Mov_right ld hl,Ctrl_0
 95+  8CEA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8CEC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8CEC              ; 																	; _ en el caso de que no lo haya.
 98+  8CEC 3A D6 84     	ld a,(CTRL_DESPLZ)
 99+  8CEF A7           	and a
100+  8CF0 28 0B        	jr z,9F
101+  8CF2
102+  8CF2 3A F7 84     	ld a,(Ctrl_0)
103+  8CF5 CB 7F        	bit 7,a
104+  8CF7 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8CF9 21 D6 84     	ld hl,CTRL_DESPLZ
106+  8CFC 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8CFD
108+  8CFD 3A F7 84     9 ld a,(Ctrl_0)
109+  8D00 CB 77        	bit 6,a
110+  8D02 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D04
112+  8D04 CD E8 8E     	call Stop_Amadeus_right
113+  8D07 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D08 18 4D        	jr 8F
115+  8D0A
116+  8D0A 3A D7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D0D FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D0F 20 46        	jr nz,8F
119+  8D11
120+  8D11 3A D6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D14 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D15 28 40        	jr z,8F
123+  8D17
124+  8D17              ; ---------- ---------- ----------
125+  8D17              ;
126+  8D17              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D17
128+  8D17 3A E2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D1A FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D1C 28 11        	jr z,1F
131+  8D1E 38 06        	jr c,6F
132+  8D20 FE 04        	cp 4
133+  8D22 28 14        	jr z,7F
134+  8D24 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D26
136+  8D26              ; ---------- ---------- ----------
137+  8D26              ;
138+  8D26              ; Perfiles de velocidad
139+  8D26              ;
140+  8D26 3A D6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D29 FE FE        	cp $fe
142+  8D2B 20 2A        	jr nz,8F
143+  8D2D 18 10        	jr 3F
144+  8D2F 3A D6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D32 FE FD        	cp $fd
146+  8D34 20 21        	jr nz,8F
147+  8D36 18 07        	jr 3F
148+  8D38 3A D6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D3B FE FB        	cp $fb
150+  8D3D 20 18        	jr nz,8F
151+  8D3F
152+  8D3F              ; ---------- ---------- ----------
153+  8D3F
154+  8D3F CD 17 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D42              ;	call Reinicio
156+  8D42
157+  8D42              ; ---------- ---------- ----------
158+  8D42              ;
159+  8D42              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D42
161+  8D42 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D44 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D45 CD 5E 8D     	call DESPLZ_DER
164+  8D48 C1           	pop bc
165+  8D49 10 F9        	djnz 5B
166+  8D4B 2A D2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D4E 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D4F 22 D2 84     	ld (Posicion_actual),hl
169+  8D52 CD 4F 8F     	call Genera_coordenadas
170+  8D55 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D57
172+  8D57              ; ---------- ---------- ----------
173+  8D57
174+  8D57 2A D2 84     8 ld hl,(Posicion_actual)
175+  8D5A CD 5E 8D     	call DESPLZ_DER
176+  8D5D C9           2 ret
177+  8D5E
178+  8D5E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D5E              ;
180+  8D5E              ;	22/9/22
181+  8D5E              ;
182+  8D5E
183+  8D5E CD 6D 8D     DESPLZ_DER call Desplaza_derecha
184+  8D61 CD 82 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D64 CD AB 8D         call Ciclo_completo
186+  8D67 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D6A CB FE        	set 7,(hl)
188+  8D6C C9           	ret
189+  8D6D
190+  8D6D              ; ******************************************************************************************************************************************************************************************
191+  8D6D              ;	14/9/22
192+  8D6D              ;
193+  8D6D
194+  8D6D 3A E2 84     Desplaza_derecha ld a,(Vel_right)
195+  8D70 47           	ld b,a
196+  8D71 2A DC 84     	ld hl,(Puntero_DESPLZ)
197+  8D74 23           1 inc hl
198+  8D75 23           	inc hl
199+  8D76 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D78 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D7B CD 33 86     	call Extrae_address
202+  8D7E 22 D4 84     	ld (Puntero_objeto),hl
203+  8D81 C9           	ret
204+  8D82
205+  8D82              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8D82              ;
207+  8D82              ;	24/7/22
208+  8D82              ;
209+  8D82              ;	modifica_parametros_1er_DESPLZ_2
210+  8D82              ;
211+  8D82              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8D82              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8D82              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8D82
215+  8D82 3A D6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8D85 A7           	and a
217+  8D86 20 1F        	jr nz,1F
218+  8D88 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8D8A 32 D6 84         ld (CTRL_DESPLZ),a
220+  8D8D 21 D1 84     	ld hl,Columns
221+  8D90 34           	inc (hl)
222+  8D91 3A E0 84     	ld a,(Cuad_objeto)
223+  8D94 E6 01        	and 1
224+  8D96 28 0F        	jr z,1F
225+  8D98 2A D2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8D9B 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8D9C 22 D2 84     	ld (Posicion_actual),hl
228+  8D9F CD 4F 8F     	call Genera_coordenadas
229+  8DA2 CD F4 8E     	call Inc_CTRL_DESPLZ
230+  8DA5 18 03        	jr 2F
231+  8DA7 CD F4 8E     1 call Inc_CTRL_DESPLZ
232+  8DAA C9           2 ret
233+  8DAB
234+  8DAB              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8DAB              ;
236+  8DAB              ;	24/7/22
237+  8DAB              ;
238+  8DAB              ;	Ciclo_completo.
239+  8DAB              ;
240+  8DAB              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8DAB              ;
242+  8DAB              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8DAB              ; 	Decrementamos (Columns).
244+  8DAB              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8DAB              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8DAB
247+  8DAB
248+  8DAB 3A D6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8DAE FE FF        	cp $ff
250+  8DB0 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8DB2 18 25        	jr 3f
252+  8DB4 21 D1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8DB7 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8DB8 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8DB9 32 D6 84     	ld (CTRL_DESPLZ),a
256+  8DBC 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8DBF E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DC1 20 0A        	jr nz,2F
259+  8DC3 2A D2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DC6 23           	inc hl
261+  8DC7 22 D2 84     	ld (Posicion_actual),hl
262+  8DCA CD 4F 8F     	call Genera_coordenadas
263+  8DCD
264+  8DCD              ; Inicia el puntero de Sprite.
265+  8DCD
266+  8DCD 2A DA 84     2 ld hl,(Indice_Sprite)
267+  8DD0 22 DC 84     	ld (Puntero_DESPLZ),hl
268+  8DD3 CD 33 86     	call Extrae_address
269+  8DD6 22 D4 84     	ld (Puntero_objeto),hl
270+  8DD9
271+  8DD9 C9           3 ret
272+  8DDA
273+  8DDA              ; ******************************************************************************************************************************************************************************************
274+  8DDA              ;
275+  8DDA              ;	21/01/23
276+  8DDA              ;
277+  8DDA              ;	Mov_left.
278+  8DDA              ;
279+  8DDA              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DDA              ;
281+  8DDA              Mov_left
282+  8DDA
283+  8DDA 21 F7 84     	ld hl,Ctrl_0
284+  8DDD CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DDF              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DDF              ; 																	; _ en el caso de que no lo haya.
287+  8DDF 3A D6 84     	ld a,(CTRL_DESPLZ)
288+  8DE2 A7           	and a
289+  8DE3 20 19        	jr nz,10F
290+  8DE5
291+  8DE5 2A D4 84     	ld hl,(Puntero_objeto)
292+  8DE8 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8DEB
294+  8DEB 3A F7 84     	ld a,(Ctrl_0)
295+  8DEE CB 77        	bit 6,a
296+  8DF0 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8DF2
298+  8DF2 CD EE 8E     	call Stop_Amadeus_left
299+  8DF5 20 62        	jr nz,8F
300+  8DF7
301+  8DF7 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8DFA 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8DFD C9           	ret
304+  8DFE
305+  8DFE 3A F7 84     10 ld a,(Ctrl_0)
306+  8E01 CB 7F        	bit 7,a
307+  8E03 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8E05 21 D6 84     	ld hl,CTRL_DESPLZ
309+  8E08 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8E09
311+  8E09 3A D7 84     11 ld a,(Coordenada_X)
312+  8E0C A7           	and a
313+  8E0D 20 4A        	jr nz,8F
314+  8E0F 3A D6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8E12 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8E13 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8E15
318+  8E15              ; ---------- ---------- ----------
319+  8E15
320+  8E15 3A E1 84     	ld a,(Vel_left)
321+  8E18 FE 02        	cp 2
322+  8E1A 28 0F        	jr z,1F
323+  8E1C 38 04        	jr c,6F
324+  8E1E FE 04        	cp 4
325+  8E20 28 12        	jr z,7F
326+  8E22
327+  8E22              ; ---------- ---------- ----------
328+  8E22
329+  8E22 3A D6 84     6 ld a,(CTRL_DESPLZ)
330+  8E25 FE F9        	cp $f9
331+  8E27 20 30        	jr nz,8F
332+  8E29 18 10        	jr 4F
333+  8E2B 3A D6 84     1 ld a,(CTRL_DESPLZ)
334+  8E2E FE FA        	cp $fa
335+  8E30 20 27        	jr nz,8F
336+  8E32 18 07        	jr 4F
337+  8E34 3A D6 84     7 ld a,(CTRL_DESPLZ)
338+  8E37 FE FC        	cp $fc
339+  8E39 20 1E        	jr nz,8F
340+  8E3B
341+  8E3B              ; ---------- ---------- ----------
342+  8E3B
343+  8E3B              4
344+  8E3B CD 05 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E3E              ;	call Reinicio
346+  8E3E
347+  8E3E              ; ---------- ---------- ----------
348+  8E3E
349+  8E3E 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E40 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E41 2A D4 84     	ld hl,(Puntero_objeto)
352+  8E44 22 DC 84     	ld (Puntero_DESPLZ),hl
353+  8E47 CD 60 8E     	call DESPLZ_IZQ
354+  8E4A C1           	pop bc
355+  8E4B 10 F3        	djnz 5B
356+  8E4D 2A D2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E50 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E51 22 D2 84     	ld (Posicion_actual),hl
359+  8E54 CD 4F 8F     	call Genera_coordenadas
360+  8E57 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E59
362+  8E59              ; ---------- ---------- ----------
363+  8E59
364+  8E59 2A D2 84     8 ld hl,(Posicion_actual)
365+  8E5C CD 60 8E     	call DESPLZ_IZQ
366+  8E5F C9           2 ret
367+  8E60
368+  8E60              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E60              ;
370+  8E60              ;	22/9/22
371+  8E60
372+  8E60              DESPLZ_IZQ
373+  8E60
374+  8E60 CD 6F 8E     	call Desplaza_izquierda
375+  8E63 CD 84 8E         call modifica_parametros_1er_DESPLZ
376+  8E66 CD A8 8E     	call Ciclo_completo_2
377+  8E69 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E6C CB BE        	res 7,(hl)
379+  8E6E C9           	ret
380+  8E6F
381+  8E6F 3A E1 84     Desplaza_izquierda ld a,(Vel_left)
382+  8E72 47           	ld b,a
383+  8E73 2A DC 84     	ld hl,(Puntero_DESPLZ)
384+  8E76 2B           1 dec hl
385+  8E77 2B           	dec hl
386+  8E78 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E7A 22 DC 84     	ld (Puntero_DESPLZ),hl
388+  8E7D CD 33 86     	call Extrae_address
389+  8E80 22 D4 84     	ld (Puntero_objeto),hl
390+  8E83 C9           	ret
391+  8E84
392+  8E84              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E84              ;
394+  8E84              ;	modifica_parametros_1er_DESPLZ
395+  8E84              ;
396+  8E84              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8E84              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8E84              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8E84
400+  8E84 3A D6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8E87 A7           	and a
402+  8E88 20 1A        	jr nz,1F
403+  8E8A 21 D1 84     	ld hl,Columns
404+  8E8D 34           	inc (hl)
405+  8E8E 3A E0 84     	ld a,(Cuad_objeto)
406+  8E91 E6 01        	and 1
407+  8E93 20 0F        	jr nz,1F
408+  8E95 2A D2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8E98 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8E99 22 D2 84     	ld (Posicion_actual),hl
411+  8E9C CD 4F 8F     	call Genera_coordenadas
412+  8E9F CD D7 8E     	call Dec_CTRL_DESPLZ
413+  8EA2 18 03        	jr 2F
414+  8EA4 CD D7 8E     1 call Dec_CTRL_DESPLZ
415+  8EA7 C9           2 ret
416+  8EA8
417+  8EA8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8EA8              ;
419+  8EA8 3A D6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8EAB FE F8        	cp $f8
421+  8EAD 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8EAF 18 25        	jr 3f
423+  8EB1 21 D1 84     1 ld hl,Columns
424+  8EB4 35           	dec (hl)
425+  8EB5 AF           	xor a
426+  8EB6 32 D6 84     	ld (CTRL_DESPLZ),a
427+  8EB9 3A E0 84     	ld a,(Cuad_objeto)
428+  8EBC E6 01        	and 1
429+  8EBE 28 0A        	jr z,2F
430+  8EC0 2A D2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EC3 2B           	dec hl
432+  8EC4 22 D2 84     	ld (Posicion_actual),hl
433+  8EC7 CD 4F 8F     	call Genera_coordenadas
434+  8ECA
435+  8ECA              ; Inicia el puntero de Sprite.
436+  8ECA
437+  8ECA 2A DA 84     2 ld hl,(Indice_Sprite)
438+  8ECD 22 DC 84     	ld (Puntero_DESPLZ),hl
439+  8ED0 CD 33 86     	call Extrae_address
440+  8ED3 22 D4 84     	ld (Puntero_objeto),hl
441+  8ED6 C9           3 ret
442+  8ED7
443+  8ED7              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8ED7              ;
445+  8ED7              ;	Dec_CTRL_DESPLZ
446+  8ED7              ;
447+  8ED7              ;	Subrutina de [modifica_punteros].
448+  8ED7              ;
449+  8ED7              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8ED7
451+  8ED7 21 D6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8EDA 3A E1 84     	ld a,(Vel_left)
453+  8EDD A7           	and a
454+  8EDE 28 06        	jr z,1F
455+  8EE0 47           	ld b,a
456+  8EE1 35           3 dec (hl)
457+  8EE2 10 FD        	djnz 3B
458+  8EE4 18 01        	jr 2F
459+  8EE6 35           1 dec (hl)
460+  8EE7 C9           2 ret
461+  8EE8
462+  8EE8              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8EE8              ;
464+  8EE8              ;	19/10/22
465+  8EE8              ;
466+  8EE8              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8EE8              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8EE8
469+  8EE8 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8EEB FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8EED C9           	ret
472+  8EEE
473+  8EEE              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8EEE              ;
475+  8EEE              ;	19/10/22
476+  8EEE              ;
477+  8EEE              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8EEE              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8EEE
480+  8EEE 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8EF1 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8EF3 C9           	ret
483+  8EF4
484+  8EF4              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8EF4              ;
486+  8EF4              ;	24/7/22
487+  8EF4              ;
488+  8EF4              ;	Inc_CTRL_DESPLZ
489+  8EF4              ;
490+  8EF4              ;	Subrutina de [modifica_punteros].
491+  8EF4              ;
492+  8EF4              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8EF4
494+  8EF4 21 D6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8EF7 3A E2 84     	ld a,(Vel_right)
496+  8EFA A7           	and a
497+  8EFB 28 06        	jr z,1F
498+  8EFD 47           	ld b,a
499+  8EFE 34           3 inc (hl)
500+  8EFF 10 FD        	djnz 3B
501+  8F01 18 01        	jr 2F
502+  8F03 34           1 inc (hl)
503+  8F04 C9           2 ret
504+  8F05
505+  8F05              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8F05
507+  8F05 2A D2 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8F08 01 1F 00     	ld bc,31
509+  8F0B A7           	and a
510+  8F0C ED 4A        	adc hl,bc
511+  8F0E 22 D2 84     	ld (Posicion_actual),hl
512+  8F11 21 F7 84     	ld hl,Ctrl_0														; $xxx1
513+  8F14 CB C6        	set 0,(hl)
514+  8F16 C9           	ret
515+  8F17
516+  8F17              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8F17
518+  8F17 2A D2 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8F1A 01 1F 00     	ld bc,31
520+  8F1D A7           	and a
521+  8F1E ED 42        	sbc hl,bc
522+  8F20 22 D2 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F23 21 F7 84     	ld hl,Ctrl_0
524+  8F26 CB CE        	set 1,(hl)
525+  8F28 C9           	ret
526+  8F29
527+  8F29              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F29
529+  8F29 24           Reaparece_abajo inc h
530+  8F2A 01 E0 17     	ld bc,$17e0
531+  8F2D A7           	and a
532+  8F2E ED 4A        	adc hl,bc
533+  8F30 22 D2 84     	ld (Posicion_actual),hl
534+  8F33 21 F7 84     	ld hl,Ctrl_0
535+  8F36 CB D6        	set 2,(hl)
536+  8F38 C9           	ret
537+  8F39
538+  8F39              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F39
540+  8F39 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F3C A7           	and a
542+  8F3D ED 42        	sbc hl,bc
543+  8F3F 22 D2 84     	ld (Posicion_actual),hl
544+  8F42 21 F7 84     	ld hl,Ctrl_0
545+  8F45 CB DE        	set 3,(hl)
546+  8F47 C9           	ret
547+  8F48
548+  8F48              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F48
550+  8F48 2A DE 84     Reinicio ld hl,(Posicion_inicio)
551+  8F4B 22 D2 84     	ld (Posicion_actual),hl
552+  8F4E C9           	ret
# file closed: Direcciones.asm
633   8F4F              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F4F              ;	12/12/22
  2+  8F4F              ;
  3+  8F4F              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F4F              ;	Fila superior "0", Columna izquierda "0".
  5+  8F4F              ;
  6+  8F4F              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F4F              ;
  8+  8F4F              ;	Modifica: A
  9+  8F4F
 10+  8F4F C5           Genera_coordenadas push bc
 11+  8F50 E5           	push hl
 12+  8F51 2A D2 84     	ld hl,(Posicion_actual)
 13+  8F54 7D           	ld a,l
 14+  8F55 E6 1F        	and $1f
 15+  8F57 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F5A CD 3F 8C     	call calcula_tercio
 17+  8F5D 47           	ld b,a
 18+  8F5E 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F5F 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F61 7D           	ld a,l
 21+  8F62 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F64 28 05        	jr z,2F
 23+  8F66 0C           1 inc c
 24+  8F67 D6 20        	sub 32
 25+  8F69 20 FB        	jr nz,1B
 26+  8F6B 0C           2 inc c
 27+  8F6C 04           	inc b
 28+  8F6D 05           	dec b
 29+  8F6E 28 04        	jr z,3F
 30+  8F70 3E E0        	ld a,$e0
 31+  8F72 10 F2        	djnz 1B
 32+  8F74 79           3 ld a,c
 33+  8F75 3D           	dec a
 34+  8F76 32 D8 84     	ld (Coordenada_y),a
 35+  8F79 E1           	pop hl
 36+  8F7A C1           	pop bc
 37+  8F7B C9           	ret
# file closed: Genera_coordenadas.asm
634   8F7C              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F7C
  2+  8F7C
  3+  8F7C              ;   11/8/22
  4+  8F7C              ;
  5+  8F7C              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F7C              ;
  7+  8F7C              ;   Mov_obj.asm
  8+  8F7C              ;
  9+  8F7C              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F7C              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F7C              ;
 12+  8F7C              ;   Codificación:
 13+  8F7C              ;
 14+  8F7C              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F7C
 16+  8F7C 02 10 00     Izquierda db 2,%00010000,0
 17+  8F7F 02 20 00     Derecha db 2,%00100000,0
 18+  8F82 02 80 00     Abajo db 2,%10000000,0
 19+  8F85 02 40 00     Arriba db 2,%01000000,0
 20+  8F88
 21+  8F88 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8F8C 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8F90 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8F94 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8F98 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8F9C 60 42 60 40
 25+  8FA0 63
 26+  8FA1 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FA5 22 A3 80 A0
 27+  8FA9 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8FAD 84 A0 83 A0
 28+  8FB1 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8FB5 80 A3 22 A0
 29+  8FB9 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8FBD 40 60 42 60
 30+  8FC1 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FC5
 32+  8FC5 7C 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FC7 7F 8F        Indice_mov_Derecha defw Derecha
 34+  8FC9 82 8F        Indice_mov_Abajo defw Abajo
 35+  8FCB 85 8F        Indice_mov_Arriba defw Arriba
 36+  8FCD 8C 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  8FCF 90 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  8FD1 88 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  8FD3 94 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  8FD5 98 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  8FD7
 42+  8FD7 3A FD 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  8FDA A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  8FDB 28 02            jr z,1F
 45+  8FDD 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  8FDF 3A FE 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  8FE2 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  8FE4 32 FE 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  8FE7              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  8FE7 2A FB 84         ld hl,(Puntero_mov)
 51+  8FEA 7E               ld a,(hl)
 52+  8FEB 32 FD 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  8FEE 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  8FEF 22 FB 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  8FF2
 56+  8FF2 3A FF 84     Decoder ld a,(Repetimos_db)
 57+  8FF5 A7               and a
 58+  8FF6 20 0C            jr nz,12F
 59+  8FF8 2A FB 84         ld hl,(Puntero_mov)
 60+  8FFB 7E               ld a,(hl)
 61+  8FFC A7               and a
 62+  8FFD 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  8FFF E6 0F             and $0f
 64+  9001 32 FF 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  9004              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  9004 2A FB 84     12 ld hl,(Puntero_mov)
 67+  9007 CB 7E            bit 7,(hl)
 68+  9009 28 03            jr z,2F
 69+  900B CD 8B 8C         call Mov_down
 70+  900E 2A FB 84     2 ld hl, (Puntero_mov)
 71+  9011 CB 76            bit 6,(hl)
 72+  9013 28 03            jr z,3F
 73+  9015 CD B9 8C         call Mov_up
 74+  9018 2A FB 84     3 ld hl, (Puntero_mov)
 75+  901B CB 6E            bit 5,(hl)
 76+  901D 28 03            jr z,4F
 77+  901F CD E7 8C         call Mov_right
 78+  9022 2A FB 84     4 ld hl, (Puntero_mov)
 79+  9025 CB 66            bit 4,(hl)
 80+  9027 28 03            jr z,5F
 81+  9029 CD DA 8D         call Mov_left
 82+  902C
 83+  902C              ; ---------- --------- --------- ---------- ----------
 84+  902C
 85+  902C 3A FF 84     5 ld a,(Repetimos_db)
 86+  902F A7               and a
 87+  9030 28 07            jr z,6F
 88+  9032 3D               dec a
 89+  9033 32 FF 84         ld (Repetimos_db),a
 90+  9036 28 01            jr z,6f
 91+  9038 C9           11 ret
 92+  9039 21 FD 84     6 ld hl,Contador_db_mov
 93+  903C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  903D 2A FB 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9040 23               inc hl
 96+  9041 22 FB 84         ld (Puntero_mov),hl
 97+  9044 18 F2            jr 11B
 98+  9046 2A F9 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  9049 3A FE 84         ld a,(Incrementa_puntero)
100+  904C 47               ld b,a
101+  904D 23           8 inc hl
102+  904E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  9050 5E               ld e,(hl)
104+  9051 23               inc hl
105+  9052 56               ld d,(hl)
106+  9053 EB               ex de,hl
107+  9054 22 FB 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  9057 18 DF            jr 11B
109+  9059
110+  9059              ; ---------- --------- --------- ---------- ----------
111+  9059              ;
112+  9059              ;   11/8/22
113+  9059              ;
114+  9059              ;   Prepara_Puntero_mov
115+  9059
116+  9059 E5           Prepara_Puntero_mov push hl
117+  905A D5               push de
118+  905B 2A F9 84         ld hl,(Puntero_indice_mov)
119+  905E 5E               ld e,(hl)
120+  905F 23               inc hl
121+  9060 56               ld d,(hl)
122+  9061 EB               ex de,hl
123+  9062 22 FB 84         ld (Puntero_mov),hl
124+  9065 D1               pop de
125+  9066 E1               pop hl
126+  9067 C9               ret
127+  9068
128+  9068              ; ---------- --------- --------- ---------- ----------
129+  9068              ;
130+  9068              ;   11/8/22
131+  9068              ;
132+  9068              ;   Reinicia_el_movimiento
133+  9068
134+  9068 CD 59 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  906B AF               xor a
136+  906C 32 FD 84         ld (Contador_db_mov),a
137+  906F 32 FE 84         ld (Incrementa_puntero),a
138+  9072 C3 D7 8F         jp Movimiento
139+  9075
140+  9075              ; ---------- --------- --------- ---------- ----------
141+  9075
142+  9075
143+  9075
144+  9075
145+  9075
146+  9075
147+  9075
148+  9075
149+  9075
150+  9075
151+  9075
152+  9075
153+  9075
154+  9075
155+  9075
156+  9075
157+  9075
158+  9075
# file closed: Patrones_de_mov.asm
635   9075              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9075              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9075              ;
  3+  9075              ;	3/1/23
  4+  9075              ;
  5+  9075              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9075
  7+  9075              ;	ADC HL,SP	LD (addr),SP
  8+  9075              ;	ADD HL,SP	LD SP,(addr)
  9+  9075              ;	ADD IX,SP	LD SP,nn
 10+  9075              ; 	ADD IY,SP	LD SP,HL
 11+  9075              ;				LD SP,IX
 12+  9075              ;	DEC SP		LD SP,IY
 13+  9075
 14+  9075              ;	EX (SP),HL
 15+  9075              ;	EX (SP),IX
 16+  9075              ;	EX (SP),IY
 17+  9075
 18+  9075              ;	INC SP
 19+  9075
 20+  9075
 21+  9075                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 10 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 10 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
636   7FC0
637   7FC0              	SAVESNA "Pruebas.sna", START
638   7FC0
639   7FC0
640   7FC0
# file closed: Banco_de_pruebas.asm
