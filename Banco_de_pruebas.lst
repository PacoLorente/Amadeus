# file opened: Banco_de_pruebas.asm
   1  0000              ;	25/9/22
   2  0000
   3  0000
   4  0000              	DEVICE ZXSPECTRUM48
   5  0000
   6  0000              	org $a0ff
   7  A0FF
   8  A0FF              ;	Vector de interrupciones.
   9  A0FF
  10  A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
  11  A101
  12  A101              	org $a101
  13  A101
  14  A101 CD 21 85     	call Frame
  15  A104 ED 4D        	reti
  16  A106
  17  A106              ; ----- ----- ----- ----- -----
  18  A106
  19  A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
   1+ A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   2+ A106              ;
   3+ A106              ;	3/12/22
   4+ A106              ;
   5+ A106              ;	Sprites e índices.
   6+ A106
   7+ A106              	org $8000
   8+ 8000
   9+ 8000              ; Badsat_der. 2x2.
  10+ 8000
  11+ 8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
  12+ 8002 30 80        	defw Badsat_izq_f8
  13+ 8004 60 80        	defw Badsat_izq_f9
  14+ 8006 90 80        	defw Badsat_izq_fa
  15+ 8008 C0 80        	defw Badsat_izq_fb
  16+ 800A F0 80        	defw Badsat_izq_fc
  17+ 800C 20 81        	defw Badsat_izq_fd
  18+ 800E 50 81        	defw Badsat_izq_fe
  19+ 8010
  20+ 8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
  20+ 8014 02 2A 02 55
  21+ 8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
  21+ 801C 7F E8 03 60
  22+ 8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
  22+ 8024 2B E8 54 40
  23+ 8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
  23+ 802C 28 00 10 00
  24+ 8030
  25+ 8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
  25+ 8034 0A 00 01 15
  26+ 8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
  26+ 803C 01 55 00 01
  27+ 8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
  27+ 8044 00 01 B0 00
  28+ 8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
  28+ 804C FC 00 15 F4
  29+ 8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
  29+ 8054 55 30 00 2A
  30+ 8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
  30+ 805C 00 08 00 00
  31+ 8060
  32+ 8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
  32+ 8064 85 00 00 8A
  33+ 8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
  33+ 806C 00 AA 80 00
  34+ 8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
  34+ 8074 00 00 D8 00
  35+ 8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
  35+ 807C FE 00 0A FA
  36+ 8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
  36+ 8084 2A 98 00 15
  37+ 8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
  37+ 808C 00 04 00 00
  38+ 8090
  39+ 8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
  39+ 8094 42 80 00 45
  40+ 8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
  40+ 809C 00 55 40 00
  41+ 80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
  41+ 80A4 00 00 6C 00
  42+ 80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
  42+ 80AC FF 00 05 7D
  43+ 80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
  43+ 80B4 15 4C 00 0A
  44+ 80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
  44+ 80BC 00 02 00 00
  45+ 80C0
  46+ 80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
  46+ 80C4 21 40 00 22
  47+ 80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
  47+ 80CC 00 2A A0 00
  48+ 80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
  48+ 80D4 80 00 36 00
  49+ 80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
  49+ 80DC 7F 80 02 BE
  50+ 80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
  50+ 80E4 0A A6 00 05
  51+ 80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
  51+ 80EC 00 01 00 00
  52+ 80F0
  53+ 80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
  53+ 80F4 10 A0 00 11
  54+ 80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
  54+ 80FC 00 15 50 00
  55+ 8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
  55+ 8104 40 00 1B 00
  56+ 8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
  56+ 810C BF C0 01 5F
  57+ 8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
  57+ 8114 05 53 00 02
  58+ 8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
  58+ 811C 00 00 80 00
  59+ 8120
  60+ 8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
  60+ 8124 08 50 00 08
  61+ 8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
  61+ 812C 00 0A A8 00
  62+ 8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
  62+ 8134 A0 00 0D 80
  63+ 8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
  63+ 813C 5F F8 00 AF
  64+ 8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
  64+ 8144 02 A9 00 01
  65+ 8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
  65+ 814C 00 00 40 00
  66+ 8150
  67+ 8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
  67+ 8154 04 28 00 04
  68+ 8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
  68+ 815C 00 05 54 00
  69+ 8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
  69+ 8164 D0 00 06 C0
  70+ 8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
  70+ 816C 2F FC 00 57
  71+ 8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
  71+ 8174 01 54 80 00
  72+ 8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
  72+ 817C 00 00 20 00
  73+ 8180
  74+ 8180              ; ----------------------------------------------------------------------------------------
  75+ 8180
  76+ 8180 90 81        Indice_Badsat_der defw Badsat_derecha
  77+ 8182 B0 81        	defw Badsat_der_f8
  78+ 8184 E0 81        	defw Badsat_der_f9
  79+ 8186 10 82        	defw Badsat_der_fa
  80+ 8188 40 82        	defw Badsat_der_fb
  81+ 818A 70 82        	defw Badsat_der_fc
  82+ 818C A0 82        	defw Badsat_der_fd
  83+ 818E D0 82        	defw Badsat_der_fe
  84+ 8190
  85+ 8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
  85+ 8194 54 40 AA 40
  86+ 8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
  86+ 819C 17 FE 06 C0
  87+ 81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
  87+ 81A4 17 D4 02 2A
  88+ 81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
  88+ 81AC 00 14 00 08
  89+ 81B0
  90+ 81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
  90+ 81B4 20 00 2A 20
  91+ 81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
  91+ 81BC 2A A0 00 15
  92+ 81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
  92+ 81C4 00 03 60 00
  93+ 81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
  93+ 81CC F4 00 0B EA
  94+ 81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
  94+ 81D4 03 2A 80 00
  95+ 81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
  95+ 81DC 00 00 04 00
  96+ 81E0
  97+ 81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
  97+ 81E4 10 00 15 10
  98+ 81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
  98+ 81EC 15 50 00 0A
  99+ 81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
  99+ 81F4 80 01 B0 00
 100+ 81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
 100+ 81FC FA 00 05 F5
 101+ 8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
 101+ 8204 01 95 40 00
 102+ 8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
 102+ 820C 00 00 02 00
 103+ 8210
 104+ 8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
 104+ 8214 08 00 0A 88
 105+ 8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
 105+ 821C 0A A8 00 05
 106+ 8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
 106+ 8224 C0 00 D8 00
 107+ 8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
 107+ 822C FD 00 02 FA
 108+ 8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
 108+ 8234 00 CA A0 00
 109+ 8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
 109+ 823C 80 00 01 00
 110+ 8240
 111+ 8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
 111+ 8244 84 00 05 44
 112+ 8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
 112+ 824C 05 54 00 02
 113+ 8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
 113+ 8254 E0 00 6C 00
 114+ 8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
 114+ 825C FE 80 01 7D
 115+ 8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
 115+ 8264 00 65 50 00
 116+ 8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
 116+ 826C 40 00 00 80
 117+ 8270
 118+ 8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
 118+ 8274 42 00 02 A2
 119+ 8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
 119+ 827C 02 AA 00 01
 120+ 8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
 120+ 8284 F0 00 36 00
 121+ 8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
 121+ 828C FF 40 00 BE
 122+ 8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
 122+ 8294 00 32 A8 00
 123+ 8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
 123+ 829C A0 00 00 40
 124+ 82A0
 125+ 82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
 125+ 82A4 A1 00 01 51
 126+ 82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
 126+ 82AC 01 55 00 00
 127+ 82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
 127+ 82B4 F8 00 1B 00
 128+ 82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
 128+ 82BC FF A0 00 1F
 129+ 82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
 129+ 82C4 00 09 54 00
 130+ 82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
 130+ 82CC 50 00 00 20
 131+ 82D0
 132+ 82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
 132+ 82D4 50 80 00 A8
 133+ 82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
 133+ 82DC 00 AA 80 00
 134+ 82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
 134+ 82E4 FC 00 0D 80
 135+ 82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
 135+ 82EC FF D0 00 0F
 136+ 82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
 136+ 82F4 00 04 AA 00
 137+ 82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
 137+ 82FC 28 00 00 10
 138+ 8300
 139+ 8300              ; Amadeus. 2x2.
 140+ 8300
 141+ 8300 10 83        Indice_Amadeus defw Amadeus
 142+ 8302 00 00        	defw 0
 143+ 8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
 144+ 8306 00 00        	defw 0
 145+ 8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
 146+ 830A 00 00        	defw 0
 147+ 830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
 148+ 830E 00 00        	defw 0	 								; (Fín de índice).
 149+ 8310
 150+ 8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
 150+ 8314 26 64 24 24
 151+ 8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
 151+ 831C 6F F6 67 E6
 152+ 8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
 152+ 8324 F7 EF FF FF
 153+ 8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
 153+ 832C 8B D1 71 8E
 154+ 8330
 155+ 8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
 155+ 8334 F1 00 09 99
 156+ 8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
 156+ 833C 0B 0D 00 1B
 157+ 8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
 157+ 8344 80 19 F9 80
 158+ 8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
 158+ 834C F3 C0 3D FB
 159+ 8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
 159+ 8354 3E F7 C0 3E
 160+ 8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
 160+ 835C 40 1C 63 80
 161+ 8360
 162+ 8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
 162+ 8364 3C 40 02 66
 163+ 8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
 163+ 836C 02 C3 40 06
 164+ 8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
 164+ 8374 60 06 7E 60
 165+ 8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
 165+ 837C 3C F0 0F 7E
 166+ 8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
 166+ 8384 0F BD F0 0F
 167+ 8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
 167+ 838C 10 07 18 E0
 168+ 8390
 169+ 8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
 169+ 8394 8F 10 00 99
 170+ 8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
 170+ 839C 00 B0 D0 01
 171+ 83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
 171+ 83A4 D8 01 9F 98
 172+ 83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
 172+ 83AC CF 3C 03 DF
 173+ 83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
 173+ 83B4 03 EF 7C 03
 174+ 83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
 174+ 83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
  20  83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
   1+ 83C0
   2+ 83C0              ; Base de datos de entidades e Índice.
   3+ 83C0              ;
   4+ 83C0              ; 05/11/22
   5+ 83C0
   6+ 83C0              Indice_de_entidades
   7+ 83C0
   8+ 83C0 FA 83        	defw Badsat
   9+ 83C2              ;	defw Badsat2
  10+ 83C2              ;	defw Badsat3
  11+ 83C2              ;	defw Badsat4
  12+ 83C2 C8 83        	defw Amadeus_db
  13+ 83C4              ;	...
  14+ 83C4              ;	...
  15+ 83C4              ;	+ entidades ...
  16+ 83C4
  17+ 83C4 00 00        	defw 0
  18+ 83C6 00 00        	defw 0
  19+ 83C8
  20+ 83C8              ; ---------- ---------- ---------- ---------- ----------
  21+ 83C8
  22+ 83C8 02 02        Amadeus_db db 2,2
  23+ 83CA 00 00        	defw 0
  24+ 83CC 00           	db 0
  25+ 83CD
  26+ 83CD 05           	db %00000101
  27+ 83CE 00 83        	defw Indice_Amadeus
  28+ 83D0 00 00        	defw 0
  29+ 83D2 CF 50        	defw $50cf
  30+ 83D4 00 00 00     	db 0,0,0
  31+ 83D7
  32+ 83D7 02 02 00 00  	db 2,2,0,0
  33+ 83DB
  34+ 83DB 00 00        	db 0,0
  35+ 83DD 00 00        	defw 0
  36+ 83DF 00           	db 0
  37+ 83E0 00 00        	db 0,0
  38+ 83E2 00 00        	defw 0
  39+ 83E4 00           	db 0
  40+ 83E5
  41+ 83E5 00 00        	db 0,0
  42+ 83E7
  43+ 83E7 00 00 00 00  	defw 0,0
  44+ 83EB 00 00 00     	db 0,0,0
  45+ 83EE
  46+ 83EE 00 00        	defw 0
  47+ 83F0 00 00        	defw 0
  48+ 83F2 00           	db 0
  49+ 83F3 00 00        	defw 0
  50+ 83F5 00           	db 0
  51+ 83F6
  52+ 83F6 00 00 00 00  	defw 0,0
  53+ 83FA
  54+ 83FA              ; ---------- ---------- ---------- ---------- ----------
  55+ 83FA
  56+ 83FA 02 02        Badsat db 2,2
  57+ 83FC 00 00        	defw 0
  58+ 83FE 00           	db 0
  59+ 83FF
  60+ 83FF 06           	db %00000110
  61+ 8400 80 81        	defw Indice_Badsat_der
  62+ 8402 00 00        	defw 0
  63+ 8404 A1 47        	defw $47a1
  64+ 8406 00 00 00     	db 0,0,0
  65+ 8409
  66+ 8409 01 01 01 02  	db 1,1,1,2
  67+ 840D
  68+ 840D 00 00        	db 0,0
  69+ 840F 00 00        	defw 0
  70+ 8411 00           	db 0
  71+ 8412 00 00        	db 0,0
  72+ 8414 00 00        	defw 0
  73+ 8416 00           	db 0
  74+ 8417
  75+ 8417 00 00        	db 0,0
  76+ 8419
  77+ 8419 C2 91 00 00  	defw Indice_mov_Badsat,0
  78+ 841D 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
  79+ 8420
  80+ 8420 00 00        	defw 0
  81+ 8422 00 00        	defw 0
  82+ 8424 00           	db 0
  83+ 8425 00 00        	defw 0
  84+ 8427 00           	db 0
  85+ 8428
  86+ 8428 00 00 00 00  	defw 0,0
  87+ 842C
  88+ 842C              ; ---------- ---------- ---------- ---------- ----------
  89+ 842C
  90+ 842C 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
  91+ 842E 00 00        	defw 0                                            ; Posicion_actual
  92+ 8430 00           	db 0                                              ; CTRL_DESPLZ
  93+ 8431
  94+ 8431 02           	db %00000010
  95+ 8432 00 80        	defw Indice_Badsat_izq	                          ; Indice_Sprite
  96+ 8434 00 00        	defw 0                                            ; Puntero_DESPLZ
  97+ 8436 61 47        	defw $4761                                        ; Posicion_inicio
  98+ 8438 00 00 00     	db 0,0,0
  99+ 843B
 100+ 843B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 101+ 843F
 102+ 843F 00 00        	db 0,0
 103+ 8441 00 00        	defw 0
 104+ 8443 00           	db 0
 105+ 8444 00 00        	db 0,0
 106+ 8446 00 00        	defw 0
 107+ 8448 00           	db 0
 108+ 8449
 109+ 8449 00 00        	db 0,0
 110+ 844B
 111+ 844B C4 91 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
 112+ 844F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 113+ 8452
 114+ 8452 00 00        	defw 0
 115+ 8454 00 00        	defw 0
 116+ 8456 00           	db 0
 117+ 8457 00 00        	defw 0
 118+ 8459 00           	db 0
 119+ 845A
 120+ 845A 00 00 00 00  	defw 0,0
 121+ 845E
 122+ 845E              ; ---------- ---------- ---------- ---------- ----------
 123+ 845E
 124+ 845E 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
 125+ 8460 00 00        	defw 0                                            ; Posicion_actual
 126+ 8462 00           	db 0                                              ; CTRL_DESPLZ
 127+ 8463
 128+ 8463 04           	db %00000100
 129+ 8464 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
 130+ 8466 00 00        	defw 0                                            ; Puntero_DESPLZ
 131+ 8468 7E 47        	defw $477e                                        ; Posicion_inicio
 132+ 846A 00 00 00     	db 0,0,0
 133+ 846D
 134+ 846D 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 135+ 8471
 136+ 8471 00 00        	db 0,0
 137+ 8473 00 00        	defw 0
 138+ 8475 00           	db 0
 139+ 8476 00 00        	db 0,0
 140+ 8478 00 00        	defw 0
 141+ 847A 00           	db 0
 142+ 847B
 143+ 847B 00 00        	db 0,0
 144+ 847D
 145+ 847D C6 91 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
 146+ 8481 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 147+ 8484
 148+ 8484 00 00        	defw 0
 149+ 8486 00 00        	defw 0
 150+ 8488 00           	db 0
 151+ 8489 00 00        	defw 0
 152+ 848B 00           	db 0
 153+ 848C
 154+ 848C 00 00 00 00  	defw 0,0
 155+ 8490
 156+ 8490              ; ---------- ---------- ---------- ---------- ----------
 157+ 8490
 158+ 8490 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
 159+ 8492 00 00        	defw 0                                            ; Posicion_actual
 160+ 8494 00           	db 0                                              ; CTRL_DESPLZ
 161+ 8495
 162+ 8495 01           	db %00000001
 163+ 8496 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
 164+ 8498 00 00        	defw 0                                            ; Puntero_DESPLZ
 165+ 849A BE 47        	defw $47be                                        ; Posicion_inicio
 166+ 849C 00 00 00     	db 0,0,0
 167+ 849F
 168+ 849F 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
 169+ 84A3
 170+ 84A3 00 00        	db 0,0
 171+ 84A5 00 00        	defw 0
 172+ 84A7 00           	db 0
 173+ 84A8 00 00        	db 0,0
 174+ 84AA 00 00        	defw 0
 175+ 84AC 00           	db 0
 176+ 84AD
 177+ 84AD 00 00        	db 0,0
 178+ 84AF
 179+ 84AF C8 91 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
 180+ 84B3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 181+ 84B6
 182+ 84B6 00 00        	defw 0
 183+ 84B8 00 00        	defw 0
 184+ 84BA 00           	db 0
 185+ 84BB 00 00        	defw 0
 186+ 84BD 00           	db 0
 187+ 84BE
 188+ 84BE 00 00 00 00  	defw 0,0
 189+ 84C2
# file closed: Base_de_datos_Sprites.asm
  21  84C2
  22  84C2              ; ******************************************************************************************************************************************************************************************
  23  84C2              ; Constantes.
  24  84C2              ; ******************************************************************************************************************************************************************************************
  25  84C2              ;
  26  84C2              ; 8/11/22
  27  84C2              ;
  28  84C2              ; Constantes generales.
  29  84C2              ;
  30  84C2
  31  84C2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
  32  84C2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
  33  84C2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
  34  84C2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
  35  84C2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
  36  84C2
  37  84C2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
  38  84C2              ;                               				        ; De momento situamos este almacén en $7000.
  39  84C2
  40  84C2
  41  84C2              ; ******************************************************************************************************************************************************************************************
  42  84C2              ; Variables.
  43  84C2              ; ******************************************************************************************************************************************************************************************
  44  84C2              ;
  45  84C2              ; 10/11/22
  46  84C2              ;
  47  84C2              ; Variables de DRAW. (Motor principal).
  48  84C2              ;
  49  84C2
  50  84C2 02           Filas db 2												; Filas. [DRAW]
  51  84C3 02           Columns db 2  											; Columnas. [DRAW]
  52  84C4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
  53  84C6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
  54  84C7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
  55  84C7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
  56  84C7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
  57  84C7 06           Attr db %00000110										; Atributos de la entidad:
  58  84C8
  59  84C8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  60  84C8              ;
  61  84C8              ;	COLORES: 0 ..... NEGRO
  62  84C8              ;    		 1 ..... AZUL
  63  84C8              ; 			 2 ..... ROJO
  64  84C8              ;			 3 ..... MAGENTA
  65  84C8              ; 			 4 ..... VERDE
  66  84C8              ; 			 5 ..... CIAN
  67  84C8              ;			 6 ..... AMARILLO
  68  84C8              ; 			 7 ..... BLANCO
  69  84C8
  70  84C8 00 00        Indice_Sprite defw 0
  71  84CA 00 00        Puntero_DESPLZ defw 0
  72  84CC CB 50        Posicion_inicio defw $50cb								; Dirección de pantalla donde aparece el objeto. [DRAW]
  73  84CE 03           Cuad_objeto db 3			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
  74  84CF 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
  75  84D0 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
  76  84D1
  77  84D1              ; Variables de objeto. (Características).
  78  84D1
  79  84D1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
  80  84D2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
  81  84D3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
  82  84D4 03           Vel_down db 3 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
  83  84D5
  84  84D5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
  85  84D7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
  86  84D9 00           	db 0
  87  84DA 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
  88  84DC 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
  89  84DE 00           	db 0
  90  84DF
  91  84DF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
  92  84DF
  93  84DF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
  94  84E0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
  95  84E0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
  96  84E0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
  97  84E0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
  98  84E0              ;
  99  84E0              ; 														DESCRIPCIÖN:
 100  84E0              ;
 101  84E0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
 102  84E0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
 103  84E0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
 104  84E0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
 105  84E0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
 106  84E0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
 107  84E0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
 108  84E0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
 109  84E0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
 110  84E0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
 111  84E0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
 112  84E0              ;
 113  84E0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
 114  84E0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
 115  84E0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
 116  84E0
 117  84E0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
 118  84E1
 119  84E1              ; Movimiento.
 120  84E1
 121  84E1 00 00        Puntero_indice_mov defw 0
 122  84E3 00 00        Puntero_mov defw 0
 123  84E5 00           Contador_db_mov db 0
 124  84E6 00           Incrementa_puntero db 0
 125  84E7 00           Repetimos_db db 0
 126  84E8
 127  84E8
 128  84E8              ; Variables de funcionamiento. [DRAW].
 129  84E8
 130  84E8 10 83        Puntero_objeto defw Amadeus								; Donde están los datos para pintar el Sprite.
 131  84EA 00 00        Puntero_datas defw 0
 132  84EC 00           Columnas db 0
 133  84ED 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
 134  84EF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
 135  84EF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
 136  84F0
 137  84F0
 138  84F0              ; Cajas. Almacenes.
 139  84F0
 140  84F0 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
 141  84F2 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
 142  84F4
 143  84F4              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
 144  84F4
 145  84F4              ; Gestión de ENTIDADES.
 146  84F4
 147  84F4 00 00        Puntero_store_entidades defw 0
 148  84F6 00 00        Puntero_restore_entidades defw 0
 149  84F8 00 00        Indice_restore defw 0
 150  84FA
 151  84FA              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
 152  84FA
 153  84FA 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
 154  84FB 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
 155  84FC              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
 156  84FC              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
 157  84FC              ;														; _ (Numero_de_malotes)="0".
 158  84FC 00 00        Stack defw 0 											; La rutina de pintado, [Pintorrejeo], utiliza esta_
 159  84FE              ;														; _variable para almacenar lo posición del puntero_
 160  84FE              ; 														; _de pila, SP.
 161  84FE 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
 162  8500              ;														; La utiliza la rutina [Extrae_foto_registros].
 163  8500 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
 164  8502              ;														; _el snapshot de los registros de la siguiente entidad.
 165  8502              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
 166  8502
 167  8502              ; Gestión de FRAMES.
 168  8502
 169  8502 00           Switch db 0
 170  8503
 171  8503              ; Variables de Raster y localización en pantalla.
 172  8503
 173  8503 00 FF        Temp_Raster defw $ff00
 174  8505
 175  8505              ; Rutina principal *************************************************************************************************************************************************************************
 176  8505              ;
 177  8505              ;	14/11/22
 178  8505
 179  8505 31 FF FF     START ld sp,$ffff
 180  8508
 181  8508 3E A0        	ld a,$a0
 182  850A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
 183  850C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
 184  850E F3           	DI
 185  850F
 186  850F              ;	xor a												 ; Borde NEGRO. PAPER CYAN, INK BLACK.
 187  850F              ;	out ($fe),a
 188  850F
 189  850F 3E 01        	ld a,1
 190  8511 D3 FE        	out ($fe),a
 191  8513
 192  8513 3E 07        	ld a,%00000111
 193  8515 CD F8 8D     	call Cls
 194  8518
 195  8518              ;	call Pinta_FILAS
 196  8518
 197  8518 CD 2B 86     	call Pulsa_ENTER
 198  851B
 199  851B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
 200  851B              ;   Inicialmente tengo cargado a Amadeus en el engine.
 201  851B              ;	Pintamos el resto de entidades:
 202  851B
 203  851B              ;	call Inicia_punteros_de_entidades
 204  851B              ;	ld hl,Numero_de_entidades
 205  851B              ;	ld b,(hl)
 206  851B
 207  851B              ;1 push bc  												; Guardo el contador de entidades.
 208  851B              ; 	call Inicia_sprite
 209  851B CD 82 86     	call Draw
 210  851E              ;	call Guarda_foto_registros
 211  851E              ;	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
 212  851E              ;	pop bc
 213  851E              ;	djnz 1B  											; Decremento (CONTANDOR AMADEUS).
 214  851E
 215  851E              ; Volvemos a situar los punteros STORE/RESTORE de entidades en AMADEUS y cargamos los datos de nuestra nave en el engine.
 216  851E
 217  851E              ;    call Inicia_punteros_de_entidades
 218  851E              ;    call Restore_Primera_entidad
 219  851E
 220  851E FB           4 ei
 221  851F 18 FD        	jr 4B
 222  8521
 223  8521              ; -----------------------------------------------------------------------------------
 224  8521
 225  8521              Frame
 226  8521
 227  8521              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
 228  8521              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
 229  8521
 230  8521
 231  8521              ;	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
 232  8521
 233  8521              ;	ld a,7
 234  8521              ;   out ($fe),a
 235  8521              ;	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
 236  8521
 237  8521
 238  8521
 239  8521              ;	ld a,7
 240  8521               ;   out ($fe),a
 241  8521
 242  8521              ;    call DELAY
 243  8521
 244  8521              ;    ld a,7
 245  8521              ;    out ($fe),a
 246  8521
 247  8521
 248  8521              ;    call DELAY
 249  8521
 250  8521
 251  8521 3E 01            ld a,1
 252  8523 D3 FE            out ($fe),a
 253  8525
 254  8525
 255  8525
 256  8525              ;	ld hl,$4000
 257  8525              ;    ld b,8
 258  8525              ;    call Pinta_enemigo_3x2
 259  8525
 260  8525              ;    ld hl,$4041
 261  8525              ;    ld b,8
 262  8525              ;    call Pinta_enemigo_3x2
 263  8525
 264  8525              ;	ld hl,$4082
 265  8525              ;    ld b,8
 266  8525              ;    call Pinta_enemigo_3x2
 267  8525
 268  8525              ;    ld hl,$40c3
 269  8525              ;    ld b,8
 270  8525              ;    call Pinta_enemigo_3x2
 271  8525
 272  8525              ;    ld hl,$4804
 273  8525              ;    ld b,16
 274  8525              ;    call Pinta_enemigo_2x2
 275  8525
 276  8525              ; -----
 277  8525
 278  8525              ;	ld hl,$50df
 279  8525              ;	ld b,8
 280  8525              ;;	call Pinta_enemigo_3x2_derecha_1columna;;
 281  8525
 282  8525              ;    xor a
 283  8525              ;    out ($fe),a
 284  8525
 285  8525
 286  8525              ; ----------------------------------------------------------------------
 287  8525
 288  8525              ;;	ld a,1
 289  8525              ;;	out ($fe),a
 290  8525
 291  8525              ;;	ld hl,Album_de_fotos
 292  8525              ;;    ld (Stack_snapshot),hl								; Nos situamos al principio del álbum de fotos.
 293  8525              ;;    ld a,(Numero_de_entidades)
 294  8525              ;;    ld b,a
 295  8525
 296  8525              ;;2 push bc
 297  8525
 298  8525              ;;	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
 299  8525
 300  8525              ;; 	ld a,(Ctrl_0)
 301  8525              ;;	bit 4,a
 302  8525              ;;	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
 303  8525              ; ---------
 304  8525
 305  8525              ;    call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
 306  8525
 307  8525              ;	ld hl,Ctrl_0
 308  8525              ;    res 4,(hl)
 309  8525
 310  8525              ;1 call Store_Restore_entidades
 311  8525
 312  8525              ;	pop bc
 313  8525              ;	djnz 2B
 314  8525
 315  8525              ;	call Inicia_punteros_de_entidades
 316  8525              ;	call Restore_Primera_entidad
 317  8525
 318  8525              ;	ld a,0
 319  8525              ;	out ($fe),a
 320  8525
 321  8525              ;	jr $
 322  8525
 323  8525 C9           	ret
 324  8526
 325  8526              ; --------------------------------------------------------------------------------------------------------------
 326  8526              ;
 327  8526              Mov_obj
 328  8526
 329  8526 CD 97 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
 330  8529 CD 68 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´.
 331  852C
 332  852C 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla. En este caso, (Mod_puntero_datas) sitúa_
 333  852E 32 E0 84     	ld (Obj_dibujado),a 								; (Puntero_datas) en la Caja_de_BORRADO.
 334  8531
 335  8531              ; Movemos Amadeus o enemigos...
 336  8531
 337  8531 3A DF 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
 338  8534 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
 339  8536 C4 3F 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
 340  8539
 341  8539 3A DF 84     	ld a,(Ctrl_0)
 342  853C CB 77        	bit 6,a
 343  853E CC CA 91     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
 344  8541
 345  8541 3A DF 84     	ld a,(Ctrl_0) 										; Salimos de la rutina si no ha habido movimiento.
 346  8544 CB 67        	bit 4,a
 347  8546 C8           	ret z
 348  8547              ; ---------
 349  8547
 350  8547 CD 68 85         call Prepara_var_pintado_borrado	                ; Almaceno las `VARIABLES DE PINTADO´.
 351  854A CD 7F 85         call Repone_borrar
 352  854D CD 7C 90     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
 353  8550 CD 82 86     	call Draw											; Preparamos las variables para borrar.
 354  8553 CD A0 7F     	call Guarda_foto_registros
 355  8556
 356  8556 C9           	ret
 357  8557
 358  8557              ; --------------------------------------------------------------------------------------------------------------
 359  8557              ;
 360  8557 AF           Borra_Pinta_obj xor a
 361  8558 32 E0 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
 362  855B CD 8B 85     	call Repone_pintar
 363  855E CD 7C 90     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
 364  8561 CD 82 86     	call Draw
 365  8564 CD A0 7F     	call Guarda_foto_registros
 366  8567 C9           	ret
 367  8568
 368  8568              ; --------------------------------------------------------------------------------------------------------------
 369  8568
 370  8568 21 C2 84     Prepara_var_pintado_borrado	ld hl,Filas
 371  856B 3A E0 84     	ld a,(Obj_dibujado)
 372  856E A7           	and a
 373  856F 28 05        	jr z,1F
 374  8571 11 DA 84     	ld de,Variables_de_pintado
 375  8574 18 03        	jr 2F
 376  8576 11 D5 84     1 ld de,Variables_de_borrado
 377  8579 01 05 00     2 ld bc,5
 378  857C ED B0        	ldir
 379  857E C9           	ret
 380  857F
 381  857F 21 D5 84     Repone_borrar ld hl,Variables_de_borrado
 382  8582 11 C2 84     	ld de,Filas
 383  8585 01 05 00     	ld bc,5
 384  8588 ED B0        	ldir
 385  858A C9           	ret
 386  858B
 387  858B 21 DA 84     Repone_pintar ld hl,Variables_de_pintado
 388  858E 11 C2 84     	ld de,Filas
 389  8591 01 05 00     	ld bc,5
 390  8594 ED B0        	ldir
 391  8596 C9           	ret
 392  8597
 393  8597 2A F0 84     Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
 394  859A 22 F2 84     	ld (Caja_de_BORRADO),hl
 395  859D C9           	ret
 396  859E
 397  859E              ; *************************************************************************************************************************************************************
 398  859E              ;
 399  859E              ; 21/10/22
 400  859E              ;
 401  859E              ; Sitúa el puntero (Puntero_store_entidades) en la 1ª entidad del índice.
 402  859E              ; Sitúa el puntero (Puntero_restore_entidades) en el 1er `enemigo', (2º entidad del índice).
 403  859E              ; Destruye HL y DE !!!!!
 404  859E
 405  859E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
 406  85A1 CD C7 85         call Extrae_address
 407  85A4 22 F4 84         ld (Puntero_store_entidades),hl
 408  85A7
 409  85A7 21 C2 83     	ld hl,Indice_de_entidades+2
 410  85AA 22 F8 84     	ld (Indice_restore),hl
 411  85AD CD C7 85     	call Extrae_address
 412  85B0 22 F6 84     	ld (Puntero_restore_entidades),hl
 413  85B3
 414  85B3 C9               ret
 415  85B4
 416  85B4              ; -------------------------------------------------------------------------------------------------------------
 417  85B4              ;
 418  85B4              ; 16/11/22
 419  85B4
 420  85B4 2A 00 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
 421  85B7 AF           	xor a
 422  85B8 67           	ld h,a
 423  85B9 7D           	ld a,l
 424  85BA D6 0E        1 sub 14
 425  85BC 28 03        	jr z,2F
 426  85BE 24           	inc h
 427  85BF 18 F9        	jr 1B
 428  85C1 24           2 inc h
 429  85C2 7C           	ld a,h
 430  85C3 32 FB 84     	ld (Numero_de_malotes),a
 431  85C6 C9           	ret
 432  85C7
 433  85C7              ; *************************************************************************************************************************************************************
 434  85C7              ;
 435  85C7              ; 20/10/22
 436  85C7              ;
 437  85C7              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
 438  85C7              ;
 439  85C7              ; Destruye el puntero y DE !!!!!
 440  85C7
 441  85C7 5E           Extrae_address ld e,(hl)
 442  85C8 23           	inc hl
 443  85C9 56           	ld d,(hl)
 444  85CA 2B           	dec hl
 445  85CB EB           	ex de,hl
 446  85CC C9           	ret
 447  85CD
 448  85CD              ; *************************************************************************************************************************************************************
 449  85CD              ;
 450  85CD              ;	21/9/22
 451  85CD              ;
 452  85CD              ;   Destruye HL !!!!!,
 453  85CD
 454  85CD 2A C8 84     Inicia_sprite ld hl,(Indice_Sprite)
 455  85D0 22 CA 84     	ld (Puntero_DESPLZ),hl
 456  85D3 CD C7 85     	call Extrae_address
 457  85D6 22 E8 84     	ld (Puntero_objeto),hl
 458  85D9
 459  85D9              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
 460  85D9
 461  85D9 21 10 83     	ld hl,Amadeus
 462  85DC ED 4B E8 84  	ld bc,(Puntero_objeto)
 463  85E0 B7 ED 42     	sub hl,bc
 464  85E3 C0           	ret nz
 465  85E4
 466  85E4 21 DF 84     	ld hl,Ctrl_0
 467  85E7 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
 468  85E9
 469  85E9 C9            	ret 												; _de nuestra nave en los extremos.
 470  85EA
 471  85EA              ; *************************************************************************************************************************************************************
 472  85EA              ;
 473  85EA              ;	22/10/22
 474  85EA              ;
 475  85EA              ;	Almacena los datos del Sprite que tenemos cargado en DRAW, en su respectiva BASE DE DATOS.
 476  85EA
 477  85EA              Store_Restore_entidades
 478  85EA
 479  85EA E5           	push hl
 480  85EB D5           	push de
 481  85EC C5            	push bc
 482  85ED
 483  85ED              ;	STORE !!!!!
 484  85ED
 485  85ED 21 C2 84     	ld hl,Filas
 486  85F0 ED 5B F4 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
 487  85F4 01 32 00     	ld bc,50
 488  85F7 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
 489  85F9
 490  85F9              ;	Incrementa STORE y ejecuta RESTORE !!!!!
 491  85F9
 492  85F9 2A F6 84     	ld hl,(Puntero_restore_entidades)
 493  85FC 22 F4 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
 494  85FF 11 C2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
 495  8602 01 32 00     	ld bc,50
 496  8605 ED B0        	ldir
 497  8607
 498  8607              ;	Incrementa RESTORE !!!!!
 499  8607
 500  8607 2A F8 84         ld hl,(Indice_restore)
 501  860A 23           	inc hl
 502  860B 23           	inc hl
 503  860C 22 F8 84     	ld (Indice_restore),hl
 504  860F CD C7 85         call Extrae_address
 505  8612 22 F6 84         ld (Puntero_restore_entidades),hl
 506  8615
 507  8615 C1           	pop bc
 508  8616 D1           	pop de
 509  8617 E1           	pop hl
 510  8618
 511  8618 C9           	ret
 512  8619
 513  8619              ; **************************************************************************************************
 514  8619              ;
 515  8619              ;	29/10/22
 516  8619              ;
 517  8619              ;	Cargamos los datos de la 1º entidad en el `engine'.
 518  8619
 519  8619 E5           Restore_Primera_entidad push hl
 520  861A D5           	push de
 521  861B C5            	push bc
 522  861C
 523  861C 2A F4 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de Amadeus.
 524  861F 11 C2 84     	ld de,Filas
 525  8622 01 32 00     	ld bc,50
 526  8625 ED B0        	ldir
 527  8627
 528  8627 C1           	pop bc
 529  8628 D1           	pop de
 530  8629 E1           	pop hl
 531  862A
 532  862A C9           	ret
 533  862B
 534  862B              ; *************************************************************************************************************************************************************
 535  862B              ;
 536  862B              ; Teclado.
 537  862B
 538  862B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
 539  862D DB FE        	in a,($fe)
 540  862F E6 01        	and $01
 541  8631 28 02        	jr z,1f
 542  8633 18 F6        	jr Pulsa_ENTER
 543  8635 C9           1 ret
 544  8636
 545  8636              ; **************************************************************************************************
 546  8636              ;
 547  8636              ; Temporización.
 548  8636
 549  8636              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
 550  8636              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
 551  8636              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
 552  8636              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
 553  8636
 554  8636              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
 555  8636              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
 556  8636              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
 557  8636
 558  8636              ; A partir de $4f61 no hace falta DELAY.
 559  8636
 560  8636              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
 561  8636
 562  8636 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
 563  8639 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
 564  863A 78           	LD A,B
 565  863B A7           	AND A
 566  863C 20 FB        	JR NZ,wait
 567  863E C9           	RET
 568  863F
 569  863F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 570  863F              ;
 571  863F              ;	21/4/22
 572  863F
 573  863F              Movimiento_Amadeus
 574  863F
 575  863F 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
 576  8641 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
 577  8643 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
 578  8645 CC 71 8F         call z,Mov_left											;			"			"			"			"			"			"			"			"
 579  8648 3E F7        	ld a,$f7
 580  864A DB FE        	in a,($fe)
 581  864C E6 01        	and $01
 582  864E C8           	ret z
 583  864F 3E F7        	ld a,$f7
 584  8651 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
 585  8653 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
 586  8655 CC 62 8E     	call z,Mov_right										;			"			"			"			"			"			"			"			"
 587  8658 C9               ret
 588  8659
 589  8659              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 590  8659
 591  8659              ; Pinta indicadores de FILAS. ------------------------------------------------------
 592  8659
 593  8659 21 10 40     Pinta_FILAS ld hl,$4010
 594  865C              ;	ld b,9
 595  865C              ;2 push hl
 596  865C              ;	push bc
 597  865C 06 BF        	ld b,$bf
 598  865E 36 80        1 ld (hl),%10000000
 599  8660 CD 67 8A     	call NextScan
 600  8663 10 F9        	djnz 1B
 601  8665              ;	pop bc
 602  8665              ;	pop hl
 603  8665              ;	inc l
 604  8665              ;	djnz 2B
 605  8665
 606  8665 06 03        	ld b,3
 607  8667 21 00 47         ld hl,$4700
 608  866A CD 70 86     3 call Bucle_1
 609  866D 10 FB            djnz 3B
 610  866F C9               ret
 611  8670
 612  8670 C5           Bucle_1 push bc
 613  8671 E5                   push hl
 614  8672 D1                   pop de
 615  8673 13                   inc de
 616  8674 01 FF 00             ld bc,255
 617  8677 36 FF                ld (hl),255
 618  8679 ED B0                ldir
 619  867B 23                   inc hl
 620  867C 3E 07                ld a,7
 621  867E 84                   add a,h
 622  867F 67                   ld h,a
 623  8680 C1                   pop bc
 624  8681 C9                   ret
 625  8682
 626  8682              ; ---------------------------------------------------------------
 627  8682
 628  8682              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
   1+ 8682              ; ******************************************************************************************************************************************************************************************
   2+ 8682              ;
   3+ 8682              ; 17/08/22
   4+ 8682              ;
   5+ 8682              ; DRAW. ************************************************************************************************************************************************************************************
   6+ 8682              ;
   7+ 8682              ; Rutina para pintar objetos en pantalla.
   8+ 8682              ;
   9+ 8682              ; Está diseñada para PINTAR un objeto de ( X Filas x Y Columnas) en pantalla, ej.: (2x2), (3x3), (5x5), etc.
  10+ 8682              ; El tamaño del objeto a imprimir lo definen las variables de programa: (Filas) y (Columns). Ambas son variables de 1 byte y representan caracteres completos de pantalla,_
  11+ 8682              ; _ ejemplo.: 2 (filas de alto) x 4 (columnas de ancho).
  12+ 8682              ;
  13+ 8682              ; La rutina PINTA pinta el objeto o sprite, en la dirección de mem. de pantalla que contiene la variable de programa (Posicion_actual).
  14+ 8682              ; Esta dirección indica, donde se va a imprimir `la 1ª línea del 1er char´ que compone el objeto.
  15+ 8682              ; La rutina divide la pantalla en cuatro cuadrantes e imprime de manera distinta en función del cuadrante de pantalla en el que nos encontremos.
  16+ 8682              ; Esto se hace así con la finalidad de poder "esconder" objetos en cualquier borde de la pantalla y tener un control total de la misma.
  17+ 8682              ;
  18+ 8682              ; El `paso´ de un cuadrante a otro de la pantalla es detectado automáticamente por la rutina, modificando el puntero (Posición_actual).
  19+ 8682              ; La dirección de mem. donde se encuentran los gráficos del objeto a imprimir se encuentra almacenada en la variable de programa, (Puntero_objeto).
  20+ 8682              ;
  21+ 8682              ;
  22+ 8682              ;		1. Función XOR cuando queremos que el objeto `pase´ por `delante´ del escenario. En ese caso, la variable de programa (Obj_atras)="0".
  23+ 8682              ;		2. Función OR cuando queremos que el objeto `pase´ por `detrás´ del fondo. En ese caso, la variable de programa (Obj_atras)="1".
  24+ 8682              ;
  25+ 8682              ;
  26+ 8682              ; INPUT:  AF --
  27+ 8682              ;		  DE --
  28+ 8682              ; 		  IX --
  29+ 8682              ; 		  IY --
  30+ 8682              ;		  HL apunta a la dirección de memoria de pantalla donde se va a pintar el objeto.
  31+ 8682              ; 		  BC contiene: Filas/Columnas del objeto. Ejempl.: 5x5, 3x3, 2x3, 4x2, etc.
  32+ 8682              ; 		  El registro E="0".
  33+ 8682
  34+ 8682              ; OUTPUT: DESTRUYE AF,BC,DE y HL.
  35+ 8682              ;
  36+ 8682              ;
  37+ 8682 CD 86 89     Draw call Prepara_draw
  38+ 8685 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  39+ 8686 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
  40+ 8687 28 05        	jr z,2F
  41+ 8689 3A CE 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
  42+ 868C 18 0C        	jr 1F
  43+ 868E 2A CC 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
  44+ 8691 22 C4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
  45+ 8694 CD 1F 88     	call Inicializacion
  46+ 8697 CD 4C 92     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
  47+ 869A
  48+ 869A              1
  49+ 869A 18 FE        	jr $ ; VprA 12/12/22
  50+ 869C CD AD 86     	call Comprueba_limite_horizontal
  51+ 869F CD 40 87     	call Comprueba_limite_vertical
  52+ 86A2
  53+ 86A2 C5           3 push bc 											; Guardo el nº de filas y columnas del objeto en BC´.
  54+ 86A3 D9           	exx
  55+ 86A4 C1           	pop bc
  56+ 86A5 D9           	exx
  57+ 86A6
  58+ 86A6 CD 62 89     	call calcolumn
  59+ 86A9 CD 92 89         call Converter
  60+ 86AC C9           	ret
  61+ 86AD
  62+ 86AD              ; *******************************************************************************************************************************************************************************************
  63+ 86AD              ;	23/8/22
  64+ 86AD              ;
  65+ 86AD              ; 	Comprueba_limite_horizontal.
  66+ 86AD              ;
  67+ 86AD
  68+ 86AD 3A E0 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
  69+ 86B0 A7           	and a
  70+ 86B1 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
  71+ 86B2
  72+ 86B2 3A DF 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
  73+ 86B5 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
  74+ 86B7 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
  75+ 86B9 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
  76+ 86BB 32 DF 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
  77+ 86BE 18 09            jr 6F
  78+ 86C0 CB 5F        1 bit 3,a
  79+ 86C2 28 0D            jr z,2F
  80+ 86C4 E6 F7            and $f7
  81+ 86C6 32 DF 84         ld (Ctrl_0),a
  82+ 86C9 CD 1F 88     6 call Inicializacion
  83+ 86CC F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
  84+ 86CD 08           	ex af,af
  85+ 86CE F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
  86+ 86CF 18 56            jr 5F
  87+ 86D1 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
  88+ 86D2
  89+ 86D2              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  90+ 86D2              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
  91+ 86D2
  92+ 86D2 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
  93+ 86D3 2A ED 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
  94+ 86D6 CD C0 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
  95+ 86D9 67           	ld h,a
  96+ 86DA EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
  97+ 86DB CD C0 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
  98+ 86DE 67           	ld h,a
  99+ 86DF A7           	and a
 100+ 86E0 ED 52        	sbc hl,de 										; Posicíon - Límite.
 101+ 86E2
 102+ 86E2 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 103+ 86E3 FE 02        	cp 2
 104+ 86E5 38 1C        	jr c,3F
 105+ 86E7 28 1A        	jr z,3F
 106+ 86E9
 107+ 86E9 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 108+ 86EA 28 21            jr z,7F
 109+ 86EC 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 110+ 86EE              ;	ld e,0
 111+ 86EE E1           	pop hl
 112+ 86EF
 113+ 86EF              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 114+ 86EF              ; _para indicar con E="2" en caso necesario.
 115+ 86EF
 116+ 86EF E5               push hl
 117+ 86F0 C5               push bc
 118+ 86F1
 119+ 86F1 CD C0 8D     	call calcula_tercio
 120+ 86F4 FE 01        	cp 1
 121+ 86F6 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 122+ 86F8
 123+ 86F8 CD 28 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 124+ 86FB 28 26            jr z,9F
 125+ 86FD 38 24            jr c,9F
 126+ 86FF 1E 00        11 ld e,0
 127+ 8701 18 22            jr 8F
 128+ 8703
 129+ 8703 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 130+ 8704 28 07        	jr z, 7F
 131+ 8706 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
 132+ 8708 1E 00         	ld e,0
 133+ 870A E1           	pop hl
 134+ 870B 18 04        	jr 4F
 135+ 870D 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
 136+ 870F 18 15            jr 10F
 137+ 8711
 138+ 8711              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 139+ 8711              ; _para indicar con E="2" en caso necesario.
 140+ 8711
 141+ 8711 E5           4 push hl
 142+ 8712 C5               push bc
 143+ 8713
 144+ 8713 CD C0 8D     	call calcula_tercio
 145+ 8716 FE 01        	cp 1
 146+ 8718 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 147+ 871A
 148+ 871A CD 28 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
 149+ 871D 28 04            jr z,9F
 150+ 871F 30 02            jr nc,9F
 151+ 8721 18 02        	jr 8F
 152+ 8723 1E 02        9 ld e,2
 153+ 8725 C1           8 pop bc
 154+ 8726 E1           10 pop hl
 155+ 8727 C9           5 ret
 156+ 8728
 157+ 8728              ; --------------------
 158+ 8728              ;
 159+ 8728              ; 25/08/22
 160+ 8728
 161+ 8728 CD C0 8D     Comprueba_centro call calcula_tercio
 162+ 872B 67               ld h,a
 163+ 872C 08           	ex af,af
 164+ 872D FE 02        	cp 2
 165+ 872F 38 07        	jr c,1F
 166+ 8731 28 05        	jr z,1F
 167+ 8733 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
 168+ 8736 18 03        	jr 2F
 169+ 8738 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
 170+ 873B 08           2 ex af,af
 171+ 873C A7               and a
 172+ 873D ED 42            sbc hl,bc
 173+ 873F C9               ret
 174+ 8740
 175+ 8740              ; *********************************************************************************************************************************************************************************************
 176+ 8740              ;
 177+ 8740              ;   16/8/22
 178+ 8740              ;
 179+ 8740              ;	Comprueba_limite_vertical
 180+ 8740              ;
 181+ 8740              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
 182+ 8740              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
 183+ 8740              ;
 184+ 8740
 185+ 8740 3A E0 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
 186+ 8743 A7           	and a
 187+ 8744 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 188+ 8745
 189+ 8745 7D           	ld a,l
 190+ 8746 E6 1F        	and $1F
 191+ 8748 57           	ld d,a
 192+ 8749 3A EF 84     	ld a,(Limite_vertical)
 193+ 874C BA           	cp d 											; Límite - Posición.
 194+ 874D
 195+ 874D 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
 196+ 874E CB 47        	bit 0,a
 197+ 8750 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
 198+ 8752
 199+ 8752              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
 200+ 8752
 201+ 8752 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
 202+ 8753 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
 203+ 8755
 204+ 8755               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
 205+ 8755              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
 206+ 8755
 207+ 8755 3A CF 84         ld a,(Coordenada_X)
 208+ 8758 16 0F            ld d,Centro_izquierda
 209+ 875A A7               and a
 210+ 875B 92               sub d 											 ; Posición - Centro_izquierda.
 211+ 875C
 212+ 875C 28 21            jr z,3F
 213+ 875E 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
 214+ 8760              ;                                                    ; _salimos sin modificar nada.
 215+ 8760 18 0E            jr 2F
 216+ 8762
 217+ 8762 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
 218+ 8763 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
 219+ 8765
 220+ 8765              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
 221+ 8765              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
 222+ 8765
 223+ 8765 3A CF 84         ld a,(Coordenada_X)
 224+ 8768 16 10            ld d,Centro_derecha
 225+ 876A A7               and a
 226+ 876B 92               sub d
 227+ 876C
 228+ 876C 28 11            jr z,3F
 229+ 876E 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
 230+ 8770              ;                                                    ; _salimos sin modificar nada.
 231+ 8770 CB 43        2 bit 0,e
 232+ 8772 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
 233+ 8774 C5           	push bc
 234+ 8775 CD 0E 88         call Modificaccionne
 235+ 8778 C1           	pop bc
 236+ 8779 CD 1F 88         call Inicializacion
 237+ 877C F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 238+ 877D 08           	ex af,af
 239+ 877E F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
 240+ 877F C9           3 ret 				 								 ; Salimos de la rutina.
 241+ 8780
 242+ 8780              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
 243+ 8780
 244+ 8780 C5           4 push bc
 245+ 8781 01 C3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
 246+ 8784 0A           	ld a,(bc)
 247+ 8785 3D           	dec a
 248+ 8786 47           	ld b,a 											 ; Columnas-1 en B.
 249+ 8787 7D           	ld a,l
 250+ 8788 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
 251+ 8789 CB 47        	bit 0,a
 252+ 878B 28 03        	jr z,5F
 253+ 878D 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
 254+ 878E 18 2E        	jr 7F
 255+ 8790
 256+ 8790              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
 257+ 8790
 258+ 8790 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
 259+ 8791 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
 260+ 8792 3A DF 84     	ld a,(Ctrl_0)
 261+ 8795 CB 4F        	bit 1,a
 262+ 8797 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
 263+ 8799 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
 264+ 879A
 265+ 879A              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
 266+ 879A
 267+ 879A 1C               inc e
 268+ 879B 1D               dec e
 269+ 879C 20 07            jr nz,12F
 270+ 879E 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
 271+ 879F 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
 272+ 87A0 22 C4 84     	ld (Posicion_actual),hl
 273+ 87A3 18 44        13 jr 9F
 274+ 87A5
 275+ 87A5 CB 43        12 bit 0,e
 276+ 87A7 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
 277+ 87A9              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
 278+ 87A9 C1           	pop bc
 279+ 87AA 18 D3        	jr 3B
 280+ 87AC
 281+ 87AC 80           14 add b
 282+ 87AD 6F               ld l,a
 283+ 87AE 22 C4 84     	ld (Posicion_actual),hl
 284+ 87B1 CD 0E 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
 285+ 87B4 18 33            jr 9F 											 ; _inicializamos y salimos.
 286+ 87B6
 287+ 87B6 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
 288+ 87B8 32 DF 84         ld (Ctrl_0),a
 289+ 87BB F1           	pop af
 290+ 87BC 18 2B        	jr 9F
 291+ 87BE
 292+ 87BE              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
 293+ 87BE
 294+ 87BE F5           7 push af
 295+ 87BF 3A DF 84     	ld a,(Ctrl_0)
 296+ 87C2 CB 47        	bit 0,a
 297+ 87C4 20 1D        	jr nz,8F
 298+ 87C6 F1           	pop af
 299+ 87C7
 300+ 87C7              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
 301+ 87C7
 302+ 87C7 1C           	inc e
 303+ 87C8 1D               dec e
 304+ 87C9 20 07            jr nz,10F
 305+ 87CB
 306+ 87CB 90           	sub b
 307+ 87CC 6F               ld l,a
 308+ 87CD 22 C4 84     	ld (Posicion_actual),hl
 309+ 87D0 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
 310+ 87D2              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
 311+ 87D2 CB 43        10 bit 0,e
 312+ 87D4 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
 313+ 87D6              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
 314+ 87D6 C1           	pop bc
 315+ 87D7 18 A6        	jr 3B
 316+ 87D9
 317+ 87D9 90           16 sub b
 318+ 87DA 6F               ld l,a
 319+ 87DB 22 C4 84     	ld (Posicion_actual),hl
 320+ 87DE CD 0E 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
 321+ 87E1 18 06            jr 9F
 322+ 87E3
 323+ 87E3 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
 324+ 87E5 32 DF 84         ld (Ctrl_0),a
 325+ 87E8 F1           	pop af
 326+ 87E9
 327+ 87E9 C1           9 pop bc
 328+ 87EA              ;	ld e,0
 329+ 87EA CD 1F 88         call Inicializacion
 330+ 87ED F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 331+ 87EE 08           	ex af,af
 332+ 87EF F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 333+ 87F0 18 8D            jr 3B
 334+ 87F2
 335+ 87F2              ; --------------------
 336+ 87F2
 337+ 87F2 CD 37 91     Modifica_Pos_actual call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
 338+ 87F5 05               dec B                                           ; Scanlines-1 en B.
 339+ 87F6 CD 79 8A     1 call PreviousScan
 340+ 87F9 10 FB            djnz 1B
 341+ 87FB 22 C4 84     	ld (Posicion_actual),hl
 342+ 87FE AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
 343+ 87FF C9           	ret
 344+ 8800
 345+ 8800              ; --------------------
 346+ 8800
 347+ 8800 CD 37 91     Modifica_Pos_actual2 call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
 348+ 8803 05               dec B                                           ; Scanlines-1 en B.
 349+ 8804 CD 67 8A     1 call NextScan
 350+ 8807 10 FB            djnz 1B
 351+ 8809 22 C4 84     	ld (Posicion_actual),hl
 352+ 880C AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
 353+ 880D C9           	ret
 354+ 880E
 355+ 880E              ; --------------------
 356+ 880E
 357+ 880E              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
 358+ 880E              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
 359+ 880E
 360+ 880E 08           Modificaccionne ex af,af
 361+ 880F FE 02            cp 2
 362+ 8811 F5               push af                                         ; Guardo el resultado de la comparación.
 363+ 8812 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
 364+ 8813 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
 365+ 8814 CC F2 87         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
 366+ 8817 DC F2 87         call c,Modifica_Pos_actual
 367+ 881A C8           	ret z
 368+ 881B CD 00 88         call Modifica_Pos_actual2
 369+ 881E C9               ret
 370+ 881F
 371+ 881F              ; *************************************************************************************************************************************************************************************************
 372+ 881F              ;
 373+ 881F              ;	13/8/22
 374+ 881F              ;
 375+ 881F              ;	Inicializacion
 376+ 881F              ;
 377+ 881F              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
 378+ 881F              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
 379+ 881F              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
 380+ 881F              ;
 381+ 881F              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
 382+ 881F              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
 383+ 881F              ;	_ desaparece/aparece.
 384+ 881F
 385+ 881F              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
 386+ 881F              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
 387+ 881F              ;
 388+ 881F              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
 389+ 881F              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
 390+ 881F              ; 		   [E] ="0"
 391+ 881F
 392+ 881F              ; 	OUTPUT: DESTRUYE [AF] y [D].
 393+ 881F
 394+ 881F
 395+ 881F CD C0 8D     Inicializacion call calcula_tercio
 396+ 8822 28 39        	jr z,primit
 397+ 8824 E6 02        	and 2
 398+ 8826 20 07        	jr nz,segmit
 399+ 8828 7D           	ld a,l
 400+ 8829 FE 7F        	cp $7f
 401+ 882B 38 30        	jr c,primit
 402+ 882D 28 2E        	jr z,primit
 403+ 882F CD 5C 89     segmit call column
 404+ 8832 38 13        	jr c,tercuad
 405+ 8834 3E 04        cuarcuad ld a,4
 406+ 8836 32 CE 84     	ld (Cuad_objeto),a
 407+ 8839 21 20 48     	ld hl,$4820
 408+ 883C 22 ED 84     	ld (Limite_horizontal),hl
 409+ 883F 21 EF 84     	ld hl,Limite_vertical
 410+ 8842 36 0D        	ld (hl),$0d
 411+ 8844 08           	ex af,af
 412+ 8845 18 45        	jr 1F
 413+ 8847 CD CD 88     tercuad	call Fija_punteros
 414+ 884A 3E 03        	ld a,3
 415+ 884C 32 CE 84     	ld (Cuad_objeto),a
 416+ 884F 21 20 48     	ld hl,$4820
 417+ 8852 22 ED 84     	ld (Limite_horizontal),hl
 418+ 8855 21 EF 84     	ld hl,Limite_vertical
 419+ 8858 36 12        	ld (hl),$12
 420+ 885A 08           	ex af,af
 421+ 885B 18 2F        	jr 1F
 422+ 885D CD 5C 89     primit call column
 423+ 8860 38 16        	jr c, primcuad
 424+ 8862 CD CD 88     segcuad call Fija_punteros
 425+ 8865 3E 02        	ld a,2
 426+ 8867 32 CE 84     	ld (Cuad_objeto),a
 427+ 886A 21 C0 4F     	ld hl,$4fc0
 428+ 886D 22 ED 84     	ld (Limite_horizontal),hl
 429+ 8870 21 EF 84     	ld hl,Limite_vertical
 430+ 8873 36 0D        	ld (hl),$0d
 431+ 8875 08           	ex af,af
 432+ 8876 18 14        	jr 1F
 433+ 8878 CD CD 88     primcuad call Fija_punteros
 434+ 887B 3E 01        	ld a,1
 435+ 887D 32 CE 84     	ld (Cuad_objeto),a
 436+ 8880 21 C0 4F     	ld hl,$4fc0
 437+ 8883 22 ED 84     	ld (Limite_horizontal),hl
 438+ 8886 21 EF 84     	ld hl,Limite_vertical
 439+ 8889 36 12        	ld (hl),$12
 440+ 888B 08           	ex af,af
 441+ 888C CD 52 91     1 call Genera_coordenadas
 442+ 888F C9           	ret
 443+ 8890
 444+ 8890              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 445+ 8890              ;
 446+ 8890              ;	16/7/22
 447+ 8890              ;
 448+ 8890              ;	Calcula_dbs_totales .......... (Subrutina de [Inicializacion]).
 449+ 8890              ;
 450+ 8890              ;	En función del valor de BC, (Filas/Columns) de un objeto, la rutina entrga dos cantidades:
 451+ 8890              ;
 452+ 8890              ;	INPUTS:
 453+ 8890              ;
 454+ 8890              ;	(Filas)/(Columns) de una entidad en BC.
 455+ 8890              ;
 456+ 8890              ;
 457+ 8890              ;	OUTPUTS:
 458+ 8890              ;
 459+ 8890              ;	[(Filas)*(Columns)]*8 en BC´.
 460+ 8890              ;	[(Filas)*(Columns)] en DE´.
 461+ 8890              ;
 462+ 8890              ;	DESTRUYE:
 463+ 8890              ;
 464+ 8890              ;	AF,BC´ y DE´
 465+ 8890
 466+ 8890
 467+ 8890 C5           Calcula_dbs_totales push bc		   									; Guardo Filas/Columnas en la pila.
 468+ 8891 79           	ld a,c															; Compruebo si (Columns) es "1", en ese caso,_
 469+ 8892 3D           	dec a 															; _cargo el nº de filas en A y multiplico *8. (JR 3F).
 470+ 8893 20 03        	jr nz,2F
 471+ 8895 78           	ld a,b
 472+ 8896 18 06        	jr 3F
 473+ 8898 0D           2 dec c 															; (Columns-1) en C.
 474+ 8899 78           	ld a,b
 475+ 889A 80           1 add b 															; El loop dl, multiplica Filas*Columnas.
 476+ 889B 0D           	dec c
 477+ 889C 20 FC        	jr nz,1B
 478+ 889E F5           3 push af 															; Guardo Filas * Columnas en la pila.
 479+ 889F CB 27        	sla a
 480+ 88A1 CB 27        	sla a
 481+ 88A3 CB 27        	sla a 															; Ahora tengo en A: (Filas*Columnas)*8
 482+ 88A5 D9           	exx
 483+ 88A6 4F           	ld c,a 															; Finalmente:
 484+ 88A7 F1           	pop af
 485+ 88A8 5F           	ld e,a 															; (Filas*Columnas)*8 en BC.
 486+ 88A9 AF           	xor a
 487+ 88AA 47           	ld b,a 															; Filas*Columnas en DE.
 488+ 88AB 50           	ld d,b
 489+ 88AC D9           	exx
 490+ 88AD C1           	pop bc
 491+ 88AE C9           	ret
 492+ 88AF
 493+ 88AF              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 494+ 88AF              ;
 495+ 88AF              ;	17/7/22
 496+ 88AF              ;
 497+ 88AF              ;	Puntero_primcuad .......... (Subrutina de [Inicializacion]).
 498+ 88AF              ;
 499+ 88AF              ;	Estamos en el 1er cuadrante de pantalla. La rutina fija (Puntero_datas) al final de los .db de .....
 500+ 88AF              ;
 501+ 88AF              ;		(Puntero_objeto) cuando el objeto no está desplazado. (CTRL_DESPLZ)="0".
 502+ 88AF              ;		Caja_de_DESPLZ cuando el objeto está desplazado y estamos pintando, (Obj_dibujado)="0".
 503+ 88AF              ;		Caja_de_BORRADO cuando el objeto está desplazado y estamos borrando, (Obj_dibujado)="1".
 504+ 88AF
 505+ 88AF E5           puntero_primcuad push hl
 506+ 88B0 D9           	exx
 507+ 88B1 CD CD 88     	call Fija_punteros
 508+ 88B4 2A EA 84     	ld hl,(Puntero_datas)
 509+ 88B7 CD C0 88     	call suma
 510+ 88BA 22 EA 84     	ld (Puntero_datas),hl
 511+ 88BD D9           	exx
 512+ 88BE E1           	pop hl
 513+ 88BF C9           	ret
 514+ 88C0 A7           suma and a
 515+ 88C1 ED 4A        	adc hl,bc 														; [(Puntero_objeto)+(Filas*Columnas)*8]-1 en HL.
 516+ 88C3 2B           	dec hl
 517+ 88C4 C9           	ret
 518+ 88C5
 519+ 88C5              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 520+ 88C5              ;
 521+ 88C5              ;	Puntero_cuarcuad .......... (Subrutina de [Inicializacion]).
 522+ 88C5              ;
 523+ 88C5              ;	Asigna una dirección a cada una de las tres variables que podemos necesitar a la hora de `pintar´ el Sprite en pantalla cuando nos encontramos en el 4º cuadrante de pantalla.
 524+ 88C5              ; 	Antes de llamar a esta rutina hay que ejecutar la rutina: [Calcula_dbs_totales].
 525+ 88C5
 526+ 88C5 E5           puntero_cuarcuad push hl
 527+ 88C6 D9           	exx
 528+ 88C7 CD CD 88     	call Fija_punteros
 529+ 88CA D9            	exx
 530+ 88CB E1            	pop hl
 531+ 88CC C9            	ret
 532+ 88CD
 533+ 88CD              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 534+ 88CD              ;
 535+ 88CD              ;	14/9/22
 536+ 88CD              ;
 537+ 88CD              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
 538+ 88CD              ;
 539+ 88CD              ;	La rutina fija el puntero de dibujado/borrado.
 540+ 88CD              ;
 541+ 88CD              ;	Función:
 542+ 88CD              ;
 543+ 88CD              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
 544+ 88CD
 545+ 88CD C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
 546+ 88CE D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
 547+ 88CF
 548+ 88CF 3A E0 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
 549+ 88D2 A7           	and a
 550+ 88D3 28 0E        	jr z,1F
 551+ 88D5
 552+ 88D5 3A C6 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
 553+ 88D8 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
 554+ 88D9 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
 555+ 88DB 2A F2 84     	ld hl,(Caja_de_BORRADO) 											; _(Puntero_datas)=Caja_de_BORRADO.
 556+ 88DE 22 EA 84     	ld (Puntero_datas),hl
 557+ 88E1 18 14        	jr 3F
 558+ 88E3
 559+ 88E3 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
 560+ 88E6 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
 561+ 88E7 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
 562+ 88E9 2A F0 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
 563+ 88EC 22 EA 84     	ld (Puntero_datas),hl
 564+ 88EF 18 06        	jr 3F
 565+ 88F1
 566+ 88F1 2A E8 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
 567+ 88F4 22 EA 84     	ld (Puntero_datas),hl	 										; Fijamos el puntero de atributos y salimos.
 568+ 88F7
 569+ 88F7 D1           3 pop de
 570+ 88F8 C1           	pop bc
 571+ 88F9 C9           	ret
 572+ 88FA
 573+ 88FA              ; *********************************************************************************************************************************************************************************************
 574+ 88FA              ; 14/8/22
 575+ 88FA
 576+ 88FA              ; Limite y Limite3.
 577+ 88FA              ;
 578+ 88FA              ;
 579+ 88FA              ; Calculan, (a partir del centro de la pantalla y del nº de filas que tiene el Sprite), el (Limite_horizontal).
 580+ 88FA              ;
 581+ 88FA              ; Limite se aplica en el 1er y 2º cuadrante.
 582+ 88FA              ; Limite3 se aplica en el 3er y 4º cuadrante.
 583+ 88FA              ;
 584+ 88FA              ; NOTA: No destruyen ningún registro!!!.
 585+ 88FA
 586+ 88FA E5           Limite push hl 														; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
 587+ 88FB C5           	push bc
 588+ 88FC 21 A0 48     	ld hl,$48a0														; Esta es la línea que fijamos como referencia para calcular (Limite_horizontal) cuando nos_
 589+ 88FF 01 20 00     	ld bc,32 														; _encontramos en el 1er o 2º tercio de pantalla.
 590+ 8902 3A C2 84      	ld a,(Filas)
 591+ 8905 3D           	dec a
 592+ 8906 57           	ld d,a 		 													; (Filas)-1 en D.
 593+ 8907 A7           	and a 															; Carry off.
 594+ 8908 ED 4A        1 adc hl,bc 														; El límite se sitúa en: ($4880)+[$20*(Filas-1)]
 595+ 890A 15           	dec d 															; Si H es igual a $49 es que ha habido cambio de tercio. En ese caso, situamos H en $57.
 596+ 890B 20 FB        	jr nz,1B 														; Si no hay cambio de tercio, H=$4f.
 597+ 890D 7C           	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
 598+ 890E E6 01        	and 1 															; Recuperamos HL y BC y salimos.
 599+ 8910 28 04        	jr z,2F
 600+ 8912 26 57        	ld h,$57
 601+ 8914 18 02        	jr 3F
 602+ 8916 26 4F        2 ld h,$4f
 603+ 8918 22 ED 84     3 ld (Limite_horizontal),hl
 604+ 891B C1           	pop bc
 605+ 891C E1           	pop hl
 606+ 891D C9           	ret
 607+ 891E
 608+ 891E E5           Limite3 push HL		 	 											; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
 609+ 891F C5           	push bc
 610+ 8920 21 40 48     	ld hl,$4840														; Esta es la línea que fijamos como referencia para calcular (Limite_horizontal) cuando nos_
 611+ 8923 01 20 00     	ld bc,32 														; _encontramos en el 3er o 4º tercio de pantalla.
 612+ 8926 3A C2 84      	ld a,(Filas)
 613+ 8929 3D           	dec a
 614+ 892A 57           	ld d,a 															; (Filas-1) en D.
 615+ 892B A7           	and a 															; Carry off.
 616+ 892C ED 42        1 sbc hl,bc 														; El límite se sitúa en: ($4840)-[$20*(Filas-1)]
 617+ 892E 15           	dec d 															; Si H es igual a $4e es que ha habido cambio de tercio. En ese caso, situamos H en $40.
 618+ 892F 20 FB        	jr nz,1B														; Si no hay cambio de tercio, H=$48.
 619+ 8931 7C           	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
 620+ 8932 E6 01        	and 1 															; Recuperamos HL y BC y salimos.
 621+ 8934 20 04        	jr nz,2F
 622+ 8936 26 48        	ld h,$48
 623+ 8938 18 02        	jr 3F
 624+ 893A 26 40        2 ld h,$40
 625+ 893C 22 ED 84     3 ld (Limite_horizontal),hl
 626+ 893F C1           	pop bc
 627+ 8940 E1           	pop hl
 628+ 8941 C9           	ret
 629+ 8942
 630+ 8942              ; *********************************************************************************************************************************************************************************************
 631+ 8942              ; 13/8/22
 632+ 8942              ;
 633+ 8942              ; Limite2
 634+ 8942              ;
 635+ 8942              ; Calcula, (a partir del centro de la pantalla y del nº de columnas que tiene el Sprite), el (Limite_vertical).
 636+ 8942              ;
 637+ 8942              ; Esta subrutina se aplica en todos los cuadrantes.
 638+ 8942              ;
 639+ 8942              ; NOTA: No destruye ningún registro!!!.
 640+ 8942
 641+ 8942 E5           Limite2 push hl 													; Guardamos la posición del objeto en pantalla, (HL).
 642+ 8943 21 C3 84     	ld hl,Columns
 643+ 8946 56            	ld d,(hl)
 644+ 8947 08            	ex af,af
 645+ 8948 CB 47         	bit 0,a
 646+ 894A 28 06         	jr z,1F
 647+ 894C 08            	ex af,af
 648+ 894D 3E 10         	ld a,16 														; $10 + (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 1º y 3º).
 649+ 894F 82            	add d 															; $0f - (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 2º y 4º).
 650+ 8950 18 04         	jr 2F
 651+ 8952 08           1 ex af,af
 652+ 8953 3E 0F        	ld a,15
 653+ 8955 92           	sub d
 654+ 8956 32 EF 84     2 ld (Limite_vertical),a
 655+ 8959 E1            	pop hl
 656+ 895A 08            	ex af,af 														; Entrega [Cuad_cuadrante] en A.
 657+ 895B C9            	ret
 658+ 895C
 659+ 895C              ; ***********************************************************************************************************************************************************************
 660+ 895C              ;
 661+ 895C              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
 662+ 895C              ;
 663+ 895C              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
 664+ 895C              ;
 665+ 895C              ; ***********************************************************************************************************************************************************************
 666+ 895C
 667+ 895C 7D           column ld a,l
 668+ 895D E6 1F        	and $1f
 669+ 895F FE 10         	cp $10
 670+ 8961 C9            	ret
 671+ 8962
 672+ 8962              ; ********************************************************************** calcolumn / calcolumn2 *************************************************************************
 673+ 8962              ;
 674+ 8962              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
 675+ 8962
 676+ 8962 D9           calcolumn exx                                        	; Calcula (Columnas) en cuadrantes 1º y 3º.
 677+ 8963 C5           	push bc
 678+ 8964 D9           	exx
 679+ 8965 D1           	pop de 												; Situamos en D el contenido de (Filas_objeto) y en E el nº de columnas.
 680+ 8966 7D           	ld a,l
 681+ 8967 E6 1F        	and $1f  											; Posición absoluta de L, (0 a 31).
 682+ 8969 08           	ex af,af 											; Consultamos A´, (Cuad_objeto). Si estamos en un cuadrante impar, (1º o 3º): Posición abs. de (L+1) - Columnas que tiene el objeto.
 683+ 896A CB 47        	bit 0,a 											; Si estamos en un cuadrante par: ($20 - Posición abs. de (L+1)) - Columnas que tiene el objeto.
 684+ 896C 20 07        	jr nz,1F
 685+ 896E 08           	ex af,af
 686+ 896F 47           	ld b,a
 687+ 8970 3E 20        	ld a,32
 688+ 8972 90           	sub b
 689+ 8973 18 02        	jr 2F
 690+ 8975 08           1 ex af,af
 691+ 8976 3C           	inc a
 692+ 8977 47           2 ld b,a   												; Columnas que tenemos disponibles.
 693+ 8978 93           	sub e 												; Restamos el nº de columnas que tiene el objeto.
 694+ 8979 38 06        	jr c,3F 											; Si el resultado es "0" o no existe acarreo, la variable (Columnas) tendrá el mismo valor que las columnas que tiene el Sprite en su _
 695+ 897B 7B           	ld a,e 												; _ base de datos.
 696+ 897C 32 EC 84     	ld (Columnas),a 									; Si se produce acarreo, (Columnas) será igual a el resultado de restar: Posición abs. de (L+1) - Columnas que tiene el objeto.
 697+ 897F 18 04        	jr 4F 												; Este valor siempre será inferior a las columnas que tiene el Sprite en su base de datos.
 698+ 8981 78           3 ld a,b
 699+ 8982 32 EC 84     	ld (Columnas),a
 700+ 8985 C9           4 ret
 701+ 8986
 702+ 8986              ; ******************************************************************************************************************************************************************************************
 703+ 8986              ;
 704+ 8986              ;	Prepara_draw
 705+ 8986              ;
 706+ 8986              ;	Es una rutina de carga.
 707+ 8986              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
 708+ 8986              ;
 709+ 8986              ;	FUNCIONAMIENTO:
 710+ 8986              ;
 711+ 8986              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
 712+ 8986              ;	- LD (Posicion_actual) del objeto en [HL].
 713+ 8986              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
 714+ 8986              ;
 715+ 8986              ;	DESTRUYE:
 716+ 8986              ;
 717+ 8986              ;	Logicamente, BC,HL y E quedan destruidos.
 718+ 8986
 719+ 8986 21 C2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
 720+ 8989 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
 721+ 898A 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
 722+ 898B 4E           	ld c,(hl)
 723+ 898C 2A C4 84     	ld hl,(Posicion_actual)
 724+ 898F 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
 725+ 8991 C9           	ret
 726+ 8992
 727+ 8992              ; ***********************************************************************************************************************************************************************
 728+ 8992              ;
 729+ 8992              ;	05/11/22
 730+ 8992              ;
 731+ 8992              ;	La rutina ha de proporcionar los datos necesarios para que la rutina de pintado imprima un objeto en pantalla:
 732+ 8992              ;
 733+ 8992              ;   Necesitamos:	- El nº de scanlines que podemos imprimir del objeto en B.
 734+ 8992              ;             		- La dirección de pantalla del puntero de impresión en HL.
 735+ 8992              ;			  		- La nueva ubicacion de (Puntero_datas) en DE.
 736+ 8992              ;					- También necesitamos saber el nº de columnas que `podemos´ imprimir el objeto.
 737+ 8992              ;	 					Este valor es el resultado de la diferencia entre (Columns)-(Columnas).
 738+ 8992              ;						En función de este valor desplazaremos el puntero SP por los .db de la entidad_
 739+ 8992              ; 	 					_incrementando su posición en "1" o "2" unidades.
 740+ 8992              ;
 741+ 8992 CD 86 89     Converter call Prepara_draw					;	Necesito (Filas)/(Columns) en BC para llamar a [Calcula_dbs_totales].
 742+ 8995 C5           	push bc									;	También necesito disponer de la variable (Filas), que colocaré en H´ y (Attr),_
 743+ 8996 D9           	exx 									;	_que alojaré en L´.
 744+ 8997 E1           	pop hl 									;	El objetivo de esta rutina es de proveer de todos los datos necesarios a la rutina_
 745+ 8998
 746+ 8998 3A C7 84     	ld a,(Attr) 							;	_[Pintorrejeo] para que no tenga que acceder a memoria a por ninguno.
 747+ 899B 6F           	ld l,a									;	Todos los datos necesarios para que [Pintorrejeo] se ejecute correctamente han de estar contenidos en los registros!!!!!
 748+ 899C D9           	exx
 749+ 899D
 750+ 899D CD 90 88     	call Calcula_dbs_totales
 751+ 89A0
 752+ 89A0 21 EC 84     	ld hl,Columnas
 753+ 89A3 4E           	ld c,(hl)
 754+ 89A4
 755+ 89A4 D9           	exx
 756+ 89A5 C5           	push bc
 757+ 89A6 D9           	exx
 758+ 89A7 D1           	pop de									;	Tenemos:
 759+ 89A8              ; 											;	(Filas)/(Columnas) en BC.
 760+ 89A8              ;											;	[(Filas)*(Columns)]*8 en BC´y DE.
 761+ 89A8              ;											;	[(Filas)*(Columns)] en DE´.
 762+ 89A8 3A CE 84         ld a,(Cuad_objeto)
 763+ 89AB FE 02            cp 2
 764+ 89AD DC 2A 8A         call c,Cuad_one
 765+ 89B0 CC FD 89         call z,Cuad_two
 766+ 89B3 F8               ret m
 767+ 89B4 E6 01            and 1
 768+ 89B6 C4 D4 89         call nz,Cuad_three 						; 	Salimos de la rutina si hemos ejecutado antes, alguna de las_
 769+ 89B9 F8               ret m 									;	_anteriores, [Cuad_one], [Cuad_two] o [Cuad_three].
 770+ 89BA CD BE 89         call Cuad_four
 771+ 89BD C9           	ret
 772+ 89BE
 773+ 89BE ED 5B EA 84  Cuad_four ld de,(Puntero_datas)
 774+ 89C2 D5           	push de
 775+ 89C3 DD E1        	pop ix 									;	New Puntero_datas en DE e IX.
 776+ 89C5 3A C3 84     	ld a,(Columns)
 777+ 89C8 91           	sub c
 778+ 89C9 D9           	exx
 779+ 89CA 47           	ld b,a
 780+ 89CB D9           	exx
 781+ 89CC 08           	ex af,af 								;	(Columns)-(Columnas) en B´ y A´.
 782+ 89CD CD 8B 8A     	call Filas_por_ocho
 783+ 89D0 2A C4 84     	ld hl,(Posicion_actual)
 784+ 89D3 C9           	ret
 785+ 89D4
 786+ 89D4 C5           Cuad_three push bc							;	(Filas)/(Columnas) en la pila.
 787+ 89D5 2A EA 84     	ld hl,(Puntero_datas)
 788+ 89D8 41           	ld b,c
 789+ 89D9 05           	dec b 									;	(Columnas)-1 en B.
 790+ 89DA 28 03        	jr z,1F
 791+ 89DC 2B           2 dec hl
 792+ 89DD 10 FD        	djnz 2B
 793+ 89DF EB           1 ex de,hl
 794+ 89E0 D5           	push de
 795+ 89E1 DD E1        	pop ix 									;	New Puntero_datas en DE e IX.
 796+ 89E3 2A C4 84     	ld hl,(Posicion_actual)
 797+ 89E6 41           	ld b,c
 798+ 89E7 05           	dec b
 799+ 89E8 28 03        	jr z,3F
 800+ 89EA 2B           4 dec hl 									; 	Puntero de impresión en HL.
 801+ 89EB 10 FD        	djnz 4B
 802+ 89ED C1           3 pop bc 									;	Recupero (Filas)/(Columnas) en BC.
 803+ 89EE CD 8B 8A     	call Filas_por_ocho						;	Scanlines que componen la entidad en B.
 804+ 89F1 3A C3 84     	ld a,(Columns)
 805+ 89F4 91           	sub c
 806+ 89F5 D9           	exx
 807+ 89F6 47           	ld b,a
 808+ 89F7 D9           	exx
 809+ 89F8 08           	ex af,af 								;	(Columns)-(Columnas) en B´ y A´.
 810+ 89F9 AF           	xor a
 811+ 89FA 3D           	dec a
 812+ 89FB A7           	and a
 813+ 89FC C9           	ret
 814+ 89FD
 815+ 89FD C5           Cuad_two push bc
 816+ 89FE 21 C3 84         ld hl,Columns
 817+ 8A01 46               ld b,(hl)
 818+ 8A02 2A EA 84         ld hl,(Puntero_datas)
 819+ 8A05 23           1 inc hl
 820+ 8A06 10 FD            djnz 1B 								;	Ahora (Puntero_datas) en el último .db.
 821+ 8A08 A7               and a
 822+ 8A09 ED 52        	sbc hl,de
 823+ 8A0B EB               ex de,hl
 824+ 8A0C D5               push de
 825+ 8A0D DD E1            pop ix                                  ;	New (Puntero_datas) en DE e IX.
 826+ 8A0F C1               pop bc                                  ;   (Filas)/(Columnas) en BC.
 827+ 8A10 CD 8B 8A         call Filas_por_ocho
 828+ 8A13 C5           	push bc 								;	Guardo Scanlines/Columns en la pila.
 829+ 8A14 05           	dec b 									;	Scanlines-1.
 830+ 8A15 2A C4 84      	ld hl,(Posicion_actual)
 831+ 8A18 CD 79 8A     2 call PreviousScan
 832+ 8A1B 10 FB        	djnz 2B 								;	Ahora Puntero de impresión en HL.
 833+ 8A1D 3A C3 84      	ld a,(Columns)
 834+ 8A20 91           	sub c
 835+ 8A21 D9           	exx
 836+ 8A22 47           	ld b,a
 837+ 8A23 D9           	exx
 838+ 8A24 08           	ex af,af 								; 	(Columns)-(Columnas) en B´ y A´.
 839+ 8A25 C1           	pop bc
 840+ 8A26 AF           	xor a 									;	A tiene un valor negativo antes de salir de la rutina.
 841+ 8A27 3D           	dec a
 842+ 8A28 A7           	and a
 843+ 8A29 C9           	ret
 844+ 8A2A
 845+ 8A2A 2A EA 84     Cuad_one ld hl,(Puntero_datas) 				;	En el 1er cuadrante, (Puntero_datas) apuntará al último .db del objeto. Para situarlo_
 846+ 8A2D A7           	and a 									;	_en el 1er .db, restaremos el nº total de .db a hl y sumaremos 1.
 847+ 8A2E ED 52        	sbc hl,de
 848+ 8A30 23           	inc hl
 849+ 8A31 EB           	ex de,hl 								;	New (Puntero_datas) en DE.
 850+ 8A32 CD 8B 8A     	call Filas_por_ocho
 851+ 8A35 05           	dec b									;	[(Filas)*8]-1 en [B].
 852+ 8A36 C5           	push bc
 853+ 8A37 2A C4 84     	ld hl,(Posicion_actual)
 854+ 8A3A CD 79 8A     1 call PreviousScan
 855+ 8A3D 10 FB        	djnz 1B
 856+ 8A3F 41           	ld b,c									;	(Columnas) en B.
 857+ 8A40 05           	dec b
 858+ 8A41 20 02        	jr nz,2F
 859+ 8A43 18 03        	jr 3F
 860+ 8A45 2D           2 dec l
 861+ 8A46 10 FD        	djnz 2B	 								;	Ahora tenemos el puntero de impresión, (donde vamos a empezar a pintar el 1er .db)_
 862+ 8A48 C1           3 pop bc 									;	_ en HL. (Arriba-izquierda).
 863+ 8A49 04           	inc b 									;	Scanlines totales a imprimir en B y (Columnas) en C.
 864+ 8A4A C5               push bc
 865+ 8A4B D9           	exx
 866+ 8A4C C1           	pop bc 									;	Scanlines/(Columnas) en BC´.
 867+ 8A4D 3A C3 84     	ld a,(Columns)
 868+ 8A50 91           	sub c
 869+ 8A51 47           	ld b,a 									; 	B´ contiene (Columns)-(Columnas).
 870+ 8A52 28 0A        	jr z,4F 								; 	Si el objeto se imprime completo, (Columns)-(Columnas)="0" saltamos a 4F y salimos.
 871+ 8A54 D9           	exx 									;	El objeto no se imprime completo. Hay que situar, New (Puntero_datas) en el .db_
 872+ 8A55 F5           	push af 								;	_correspondiente. Sumaemos la diferencia entre (Columns) y (Columnas) al puntero.
 873+ 8A56 08           	ex af,af 								;	El objeto está apareciendo.
 874+ 8A57 F1           	pop af
 875+ 8A58 13           5 inc de
 876+ 8A59 3D           	dec a
 877+ 8A5A 20 FC        	jr nz,5B
 878+ 8A5C 18 02        	jr 6F
 879+ 8A5E D9           4 exx
 880+ 8A5F 08           	ex af,af								; 	BC contiene Scanlines/(Columns).
 881+ 8A60 D5           6 push de 									;	HL contiene el Puntero de impresión.
 882+ 8A61 DD E1        	pop ix 									;	DE e IX contienen el New Puntero_datas.
 883+ 8A63              ;											;	A´y B´contienen (Columns)-(Columnas).
 884+ 8A63              ;											;	H´ (Filas)
 885+ 8A63              ;											;	L´ (Attr)
 886+ 8A63 AF           	xor a
 887+ 8A64 3D           	dec a
 888+ 8A65 A7           	and a 									;	A es negativo antes de salir de la rutina.
 889+ 8A66 C9               ret
 890+ 8A67
 891+ 8A67              ;----------------------------------------------------------------------------------------------------------------
 892+ 8A67              ;
 893+ 8A67              ;	5/08/22
 894+ 8A67              ;
 895+ 8A67              ;   NextScan.
 896+ 8A67              ;
 897+ 8A67              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
 898+ 8A67              ;
 899+ 8A67              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
 900+ 8A67              ;
 901+ 8A67              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
 902+ 8A67              ;
 903+ 8A67              ;       DESTRUIDOS: AF y HL !!!
 904+ 8A67              ;
 905+ 8A67              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
 906+ 8A67              ;
 907+ 8A67
 908+ 8A67 24           NextScan inc h          ; Incrementamos el scanline.
 909+ 8A68 7C               ld a,h
 910+ 8A69 E6 07            and 7
 911+ 8A6B C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 912+ 8A6C
 913+ 8A6C CD 52 91     	call Genera_coordenadas
 914+ 8A6F
 915+ 8A6F 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
 916+ 8A70 C6 20            add a,$20           ; Vamos a comprobarlo...
 917+ 8A72 6F               ld l,a
 918+ 8A73 D8               ret c               ; Salimos si se produce el cambio de tercio.
 919+ 8A74
 920+ 8A74 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
 921+ 8A75 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
 922+ 8A77 67               ld h,a
 923+ 8A78 C9               ret
 924+ 8A79
 925+ 8A79              ;----------------------------------------------------------------------------------------------------------------
 926+ 8A79              ;
 927+ 8A79              ;	5/08/22
 928+ 8A79              ;
 929+ 8A79              ;   PreviousScan.
 930+ 8A79              ;
 931+ 8A79              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
 932+ 8A79              ;
 933+ 8A79              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
 934+ 8A79              ;
 935+ 8A79              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
 936+ 8A79              ;
 937+ 8A79              ;       DESTRUIDOS: AF y HL !!!
 938+ 8A79              ;
 939+ 8A79              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
 940+ 8A79              ;
 941+ 8A79
 942+ 8A79 7C           PreviousScan ld a,h
 943+ 8A7A 25               dec h               ; Dec H.
 944+ 8A7B E6 07            and 7
 945+ 8A7D C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
 946+ 8A7E
 947+ 8A7E CD 52 91     	call Genera_coordenadas
 948+ 8A81
 949+ 8A81 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
 950+ 8A82 D6 20            sub $20             ; Vamos a comprobarlo...
 951+ 8A84 6F               ld l,a
 952+ 8A85 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
 953+ 8A86
 954+ 8A86 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
 955+ 8A87 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
 956+ 8A89 67               ld h,a
 957+ 8A8A C9               ret
 958+ 8A8B
 959+ 8A8B              ; ----------------------------------------------------------
 960+ 8A8B              ;
 961+ 8A8B              ;	17/10/22
 962+ 8A8B              ;
 963+ 8A8B              ;	(Macro). Esta operación es utilizada en las cuatro subrutinas de Converter.
 964+ 8A8B              ;
 965+ 8A8B              ;	Multiplica la cantidad contenida en B por 8. (B)*8.
 966+ 8A8B
 967+ 8A8B CB 20        Filas_por_ocho sla b
 968+ 8A8D CB 20        	sla b
 969+ 8A8F CB 20        	sla b
 970+ 8A91 C9           	ret
 971+ 8A92
 972+ 8A92              ; -----------------------------------------------------------------------------------
 973+ 8A92              ;
 974+ 8A92              ;	14/11/22
 975+ 8A92
 976+ 8A92 ED 73 FC 84  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
 977+ 8A96 31 00 70     	ld sp,Album_de_fotos
 978+ 8A99
 979+ 8A99 D9           2 exx																		; Extraemos de Album_de_fotos los valores de los registros.
 980+ 8A9A E1           	pop hl
 981+ 8A9B C1           	pop bc
 982+ 8A9C D9           	exx
 983+ 8A9D
 984+ 8A9D 08           	ex af,af
 985+ 8A9E F1           	pop af
 986+ 8A9F 08           	ex af,af
 987+ 8AA0
 988+ 8AA0 DD E1        	pop ix
 989+ 8AA2 D1           	pop de
 990+ 8AA3 C1           	pop bc
 991+ 8AA4 E1           	pop hl
 992+ 8AA5
 993+ 8AA5 ED 73 FE 84  	ld (Stack_2),sp
 994+ 8AA9 ED 7B FC 84  	ld sp,(Stack)
 995+ 8AAD
 996+ 8AAD CD C8 8A     	call Pintorrejeo														; call Pintorrejeo. Hemos pintado la entidad.
 997+ 8AB0              ;																			; Esta dirección ha de ser correcta. Cada vez que modifique
 998+ 8AB0 ED 73 FC 84  	ld (Stack),sp
 999+ 8AB4 3A FB 84     	ld a,(Numero_de_malotes)
1000+ 8AB7 3D           	dec a
1001+ 8AB8 28 09        	jr z,1F
1002+ 8ABA 32 FB 84      	ld (Numero_de_malotes),a
1003+ 8ABD ED 7B FE 84  	ld sp,(Stack_2)
1004+ 8AC1 18 D6        	jr 2B
1005+ 8AC3
1006+ 8AC3 ED 7B FC 84  1 ld sp,(Stack)
1007+ 8AC7
1008+ 8AC7 C9           	ret
1009+ 8AC8
1010+ 8AC8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1011+ 8AC8              ;
1012+ 8AC8              ;	17/10/22
1013+ 8AC8              ;
1014+ 8AC8              ;	Instrucciones donde interviene el Stack Pointer, (SP).
1015+ 8AC8
1016+ 8AC8              ;	ADC HL,SP	LD (addr),SP
1017+ 8AC8              ;	ADD HL,SP	LD SP,(addr)
1018+ 8AC8              ;	ADD IX,SP	LD SP,nn
1019+ 8AC8              ; 	ADD IY,SP	LD SP,HL
1020+ 8AC8              ;				LD SP,IX
1021+ 8AC8              ;	DEC SP		LD SP,IY
1022+ 8AC8
1023+ 8AC8              ;	EX (SP),HL
1024+ 8AC8              ;	EX (SP),IX
1025+ 8AC8              ;	EX (SP),IY
1026+ 8AC8
1027+ 8AC8              ;	INC SP
1028+ 8AC8
1029+ 8AC8              Pintorrejeo
1030+ 8AC8
1031+ 8AC8              ;	INPUTS:
1032+ 8AC8              ;
1033+ 8AC8              ;   Estos parámetros los proporciona la subrutina Converter.
1034+ 8AC8
1035+ 8AC8              ; 	BC contiene los Scanlines/(Columnas) a imprimir.
1036+ 8AC8              ;	HL contiene el Puntero de impresión, dirección de pantalla, (arriba-izquierda) del sprite.
1037+ 8AC8              ;	DE e IX contienen el New Puntero_datas.
1038+ 8AC8              ;	A´y B´contienen (Columns)-(Columnas).
1039+ 8AC8              ;	H´ (Filas)
1040+ 8AC8              ;	L´ (Attr)
1041+ 8AC8
1042+ 8AC8              ;	call Define_atributos
1043+ 8AC8
1044+ 8AC8 D9           	exx
1045+ 8AC9 11 02 00     	ld de,$0002 								;	El registro D' nos indicará, (si está a "1"), que vamos a imprimir_
1046+ 8ACC D9           	exx											;	_una entidad de 4 Columnas. Utilizaremos la subrutina (Columnas2) para hacerlo.
1047+ 8ACD              ; 												;	Inicializamos D'.
1048+ 8ACD 79               ld a,c
1049+ 8ACE FE 02            cp 2
1050+ 8AD0 28 4D            jr z,Columnas2
1051+ 8AD2 DA 7B 8B         jp c,Columnas1
1052+ 8AD5 E6 01        	and 1
1053+ 8AD7 20 05            jr nz,Columnas3
1054+ 8AD9
1055+ 8AD9 D9           	exx
1056+ 8ADA 14           	inc d
1057+ 8ADB D9           	exx
1058+ 8ADC 18 41        	jr Columnas2
1059+ 8ADE
1060+ 8ADE              ; -----------------------------------------------------------------------------------------
1061+ 8ADE
1062+ 8ADE C5           Columnas3 push bc
1063+ 8ADF
1064+ 8ADF ED 73 FC 84  	ld (Stack),sp						; Guardo SP.
1065+ 8AE3 DD F9        	ld sp,ix							; Sitúo el SP en el 1er .db de la entidad.
1066+ 8AE5
1067+ 8AE5 D1           1 pop de
1068+ 8AE6
1069+ 8AE6 7B               ld a,e								; Funcion_xor de la FILA.
1070+ 8AE7 AE           	xor (hl)
1071+ 8AE8 5F               ld e,a
1072+ 8AE9 23           	inc hl
1073+ 8AEA 7A           	ld a,d
1074+ 8AEB AE           	xor (hl)
1075+ 8AEC 57           	ld d,a
1076+ 8AED 2B               dec hl
1077+ 8AEE
1078+ 8AEE 73               ld (hl),e
1079+ 8AEF 23           	inc hl
1080+ 8AF0 72           	ld (hl),d
1081+ 8AF1 23           	inc hl
1082+ 8AF2
1083+ 8AF2 D1               pop de
1084+ 8AF3 7B               ld a,e
1085+ 8AF4 AE               xor (hl)
1086+ 8AF5 5F               ld e,a
1087+ 8AF6
1088+ 8AF6 73               ld (hl),e
1089+ 8AF7 3B               dec sp
1090+ 8AF8 2D               dec l
1091+ 8AF9 2D               dec l
1092+ 8AFA 18 08            jr 2F
1093+ 8AFC
1094+ 8AFC 10 E7        4 djnz 1B
1095+ 8AFE
1096+ 8AFE ED 7B FC 84  6 ld sp,(Stack)
1097+ 8B02 C1           	pop bc
1098+ 8B03 C9               ret
1099+ 8B04
1100+ 8B04 24           2 inc h       						; Incrementamos el scanline.
1101+ 8B05 7C               ld a,h
1102+ 8B06 E6 07            and 7
1103+ 8B08 20 13            jr nz,3F              			; Salimos de la rutina si el scanline se encuentra entre (1-7).
1104+ 8B0A 7D           	ld a,l             				; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1105+ 8B0B C6 20            add a,$20           			; Vamos a comprobarlo...
1106+ 8B0D 6F               ld l,a
1107+ 8B0E 30 09            jr nc,5F               			; Salimos si se produce el cambio de tercio.
1108+ 8B10
1109+ 8B10              ; Si se produce cambio de tercio:
1110+ 8B10
1111+ 8B10 7C           	ld a,h 							; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1112+ 8B11 D6 58        	sub $58
1113+ 8B13 28 E9        	jr z,6B
1114+ 8B15 30 E7        	jr nc,6B
1115+ 8B17 18 04        	jr 3F
1116+ 8B19
1117+ 8B19 7C           5 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1118+ 8B1A D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1119+ 8B1C 67               ld h,a
1120+ 8B1D
1121+ 8B1D 18 DD        3 jr 4B
1122+ 8B1F
1123+ 8B1F              ; -----------------------------------------------------------------------------------------
1124+ 8B1F
1125+ 8B1F ED 73 FC 84  Columnas2 ld (Stack),sp					; Guardo SP.
1126+ 8B23 DD F9        	ld sp,ix						; Sitúo el SP en el 1er .db de Coracao.
1127+ 8B25 D1           2 pop de 							; 2º .db y 1er .db en DE respectivamente. Esto decrementa en 2 pos. el puntero SP.
1128+ 8B26 18 19        	jr 4F
1129+ 8B28
1130+ 8B28 73           1 ld (hl),e							; Imprimo el scanline con la función XOR implementada.
1131+ 8B29 23           	inc hl
1132+ 8B2A 72           	ld (hl),d
1133+ 8B2B 2B           	dec hl
1134+ 8B2C 18 1D        	jr 5F 							; Vamos a preparar el puntero de impresión HL, en el scanline siguiente.
1135+ 8B2E
1136+ 8B2E D9           3 exx 								; Consulto (Columns)-(Columnas), (Corrección del puntero SP).
1137+ 8B2F 04           	inc b
1138+ 8B30 05           	dec b
1139+ 8B31 28 06        	jr z,8F 						; Si (Columns)=(Columnas) no hago corrección de SP.
1140+ 8B33
1141+ 8B33 33           7 inc sp							; Hago la corrección de SP y repongo (Columns)-(Columnas) en B´.
1142+ 8B34 10 FD        	djnz 7B
1143+ 8B36
1144+ 8B36 08           	ex af,af
1145+ 8B37 47           	ld b,a
1146+ 8B38 08           	ex af,af
1147+ 8B39
1148+ 8B39 D9           8 exx
1149+ 8B3A 10 E9         	djnz 2B
1150+ 8B3C ED 7B FC 84  9 ld sp,(Stack)
1151+ 8B40
1152+ 8B40 C9           	ret
1153+ 8B41
1154+ 8B41              ; --------------------------
1155+ 8B41
1156+ 8B41 7B           4 ld a,e						; Funcion_xor de la FILA. .db XOR (HL). El resultado sigue en DE.
1157+ 8B42 AE           	xor (hl)
1158+ 8B43 5F           	ld e,a
1159+ 8B44 23           	inc hl
1160+ 8B45 7A           	ld a,d
1161+ 8B46 AE           	xor (hl)
1162+ 8B47 57           	ld d,a
1163+ 8B48 2B           	dec hl
1164+ 8B49 18 DD        	jr 1B
1165+ 8B4B
1166+ 8B4B              ; Nota: No utilizo la rutina Next Scan / Previous Scan porque estoy utilizando la pila para pintar.
1167+ 8B4B
1168+ 8B4B D9           5 exx
1169+ 8B4C 14           	inc d
1170+ 8B4D 15           	dec d
1171+ 8B4E 28 0F        	jr z,11F 					; Imprimimos 2 o 4 Columnas???
1172+ 8B50
1173+ 8B50 1D           	dec e 						; Vamos a imprimir 4 Columnas. Decrementamos el contador E'.
1174+ 8B51 28 05        	jr z,12F
1175+ 8B53
1176+ 8B53 D9           	exx
1177+ 8B54 2C           	inc l
1178+ 8B55 2C           	inc l
1179+ 8B56 18 CD        	jr 2B
1180+ 8B58
1181+ 8B58 1C           12 inc e
1182+ 8B59 1C           	inc e
1183+ 8B5A D9           	exx
1184+ 8B5B 2D           	dec l
1185+ 8B5C 2D           	dec l 						; Inicializamos E' y HL a su posición inicial para imprimir el siguiente scanline.
1186+ 8B5D 18 01        	jr 13F
1187+ 8B5F
1188+ 8B5F D9           11 exx
1189+ 8B60 24           13 inc h       				; Incrementamos el scanline.
1190+ 8B61 7C           	ld a,h
1191+ 8B62 E6 07        	and 7
1192+ 8B64 20 13            jr nz,6F              		; Salimos de la rutina si el scanline se encuentra entre (1-7).
1193+ 8B66 7D           	ld a,l             			; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1194+ 8B67 C6 20            add a,$20           		; Vamos a comprobarlo...
1195+ 8B69 6F               ld l,a
1196+ 8B6A 30 09            jr nc,10F               	; Salimos si no se produce el cambio de tercio.
1197+ 8B6C
1198+ 8B6C              ; Si se produce cambio de tercio:
1199+ 8B6C
1200+ 8B6C 7C           	ld a,h 						; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1201+ 8B6D D6 58        	sub $58
1202+ 8B6F 28 CB        	jr z,9B
1203+ 8B71 30 C9        	jr nc,9B
1204+ 8B73 18 04        	jr 6F
1205+ 8B75
1206+ 8B75 7C           10 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1207+ 8B76 D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1208+ 8B78 67               ld h,a
1209+ 8B79 18 B3        6 jr 3B
1210+ 8B7B
1211+ 8B7B              ; -----------------------------------------------------------------------------------------
1212+ 8B7B
1213+ 8B7B 1A           Columnas1 ld a,(de)
1214+ 8B7C AE           	xor (hl)
1215+ 8B7D 77           	ld (hl),a
1216+ 8B7E 18 03            jr 2F
1217+ 8B80 10 F9        5 djnz Columnas1                    ; Quedan scanlines que imprimir ???. REPETIMOS.
1218+ 8B82 C9               ret
1219+ 8B83 24           2 inc h       						; Incrementamos el scanline.
1220+ 8B84 7C               ld a,h
1221+ 8B85 E6 07            and 7
1222+ 8B87 20 11            jr nz,3F              			; Salimos de la rutina si el scanline se encuentra entre (1-7).
1223+ 8B89 7D           	ld a,l             				; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
1224+ 8B8A C6 20            add a,$20           			; Vamos a comprobarlo...
1225+ 8B8C 6F               ld l,a
1226+ 8B8D 30 07            jr nc,8F               			; Salimos si se produce el cambio de tercio.
1227+ 8B8F
1228+ 8B8F              ; Si se produce cambio de tercio:
1229+ 8B8F
1230+ 8B8F 7C           	ld a,h 							; Salimos de la rutina si estamos en el último tercio de la pantalla y se produce cambio de cuadrante.
1231+ 8B90 D6 58        	sub $58
1232+ 8B92 C8           	ret z
1233+ 8B93 D0           	ret nc
1234+ 8B94 18 04        	jr 3F 							; Se produce el cambio de tercio pero no estamos en el 3er tercio.
1235+ 8B96 7C           8 ld a,h              				; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
1236+ 8B97 D6 08            sub 8               			; _unidad a los bits que definen el tercio TT, (sub $08).
1237+ 8B99 67               ld h,a
1238+ 8B9A D9           3 exx 								; Comprobamos si estamos imprimiendo un sprite compuesto por 1 sóla (Columns), o se trata_
1239+ 8B9B 04           	inc B                           ; _de imprimir parte de un Sprite, (imprimimos 1 Columna de un sprite compuesto por más).
1240+ 8B9C 05           	dec b
1241+ 8B9D 28 0D        	jr z,6F
1242+ 8B9F D9           	exx
1243+ 8BA0 08           	ex af,af 						; A contiene ahora (Columns)-(Columnas).
1244+ 8BA1 13           7 inc de 							; El sprite consta de más de una columna, debemos desplazar el puntero DE hasta el siguiente_
1245+ 8BA2 3D           	dec a  							; _.DB, este valor de desplazamiento lo proporciona: [(Columns)-(Columnas)]+1.
1246+ 8BA3 20 FC        	jr nz,7B
1247+ 8BA5 13           	inc de 							; Corrección de DE. Es necesaria para situar el puntero DE en el .db correspondiente.
1248+ 8BA6 D9           	exx 							; Restauramos A´ con la variable (Columns)-(Columnas) para volverla a utilizar en el siguiente_
1249+ 8BA7 78           	ld a,b 							; _scanline.
1250+ 8BA8 D9           	exx
1251+ 8BA9 08           	ex af,af
1252+ 8BAA 18 D4        	jr 5B
1253+ 8BAC D9           6 exx
1254+ 8BAD 13               inc de
1255+ 8BAE 18 D0            jr 5B
1256+ 8BB0
# file closed: Draw_XOR.asm
 629  8BB0              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
   1+ 8BB0              ;   Conjunto de rutinas de impresión de Sprites.
   2+ 8BB0              ;
   3+ 8BB0              ;   12/12/22
   4+ 8BB0              ;
   5+ 8BB0              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
   6+ 8BB0              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
   7+ 8BB0              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
   8+ 8BB0              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
   9+ 8BB0              ;
  10+ 8BB0              ;   Modifica: DE y HL.
  11+ 8BB0
  12+ 8BB0 ED 73 FC 84  Pinta_Amadeus_2x2 ld (Stack),sp
  13+ 8BB4 31 10 83     	ld sp,Amadeus
  14+ 8BB7 D1           1 pop de
  15+ 8BB8 73           	ld (hl),e
  16+ 8BB9 23           	inc hl
  17+ 8BBA 72           	ld (hl),d
  18+ 8BBB 2B           	dec hl
  19+ 8BBC 24           	inc h
  20+ 8BBD 7C               ld a,h
  21+ 8BBE E6 07            and 7
  22+ 8BC0 20 0C            jr nz,2F
  23+ 8BC2 7D               ld a,l
  24+ 8BC3 C6 20            add a,$20
  25+ 8BC5 6F               ld l,a
  26+ 8BC6 38 06            jr c,2F
  27+ 8BC8 7C               ld a,h
  28+ 8BC9 D6 08            sub 8
  29+ 8BCB 67               ld h,a
  30+ 8BCC 18 00            jr 2F
  31+ 8BCE 10 E7        2 djnz 1B
  32+ 8BD0 ED 7B FC 84  	ld sp,(Stack)
  33+ 8BD4 C9           	ret
  34+ 8BD5
  35+ 8BD5 ED 73 FC 84  Pinta_Amadeus_3x2 ld (Stack),sp
  36+ 8BD9 31 30 83     	ld sp,Amadeus_F9
  37+ 8BDC D1           1 pop de
  38+ 8BDD 73           	ld (hl),e
  39+ 8BDE 23           	inc hl
  40+ 8BDF 72           	ld (hl),d
  41+ 8BE0 23           	inc hl
  42+ 8BE1 D1           	pop de
  43+ 8BE2 73           	ld (hl),e
  44+ 8BE3 2B           	dec hl
  45+ 8BE4 2B           	dec hl
  46+ 8BE5 24           	inc h
  47+ 8BE6 7C               ld a,h
  48+ 8BE7 E6 07            and 7
  49+ 8BE9 20 0A            jr nz,2F
  50+ 8BEB 7D               ld a,l
  51+ 8BEC C6 20            add a,$20
  52+ 8BEE 6F               ld l,a
  53+ 8BEF 38 04            jr c,2F
  54+ 8BF1 7C               ld a,h
  55+ 8BF2 D6 08            sub 8
  56+ 8BF4 67               ld h,a
  57+ 8BF5 72           2 ld (hl),d
  58+ 8BF6 D1           	pop de
  59+ 8BF7 23           	inc hl
  60+ 8BF8 73           	ld (hl),e
  61+ 8BF9 23           	inc hl
  62+ 8BFA 72           	ld (hl),d
  63+ 8BFB 2B           	dec hl
  64+ 8BFC 2B           	dec hl
  65+ 8BFD 24           	inc h
  66+ 8BFE 7C               ld a,h
  67+ 8BFF E6 07            and 7
  68+ 8C01 20 0A            jr nz,3F
  69+ 8C03 7D               ld a,l
  70+ 8C04 C6 20            add a,$20
  71+ 8C06 6F               ld l,a
  72+ 8C07 38 04            jr c,3F
  73+ 8C09 7C               ld a,h
  74+ 8C0A D6 08            sub 8
  75+ 8C0C 67               ld h,a
  76+ 8C0D 10 CD        3 djnz 1B
  77+ 8C0F ED 7B FC 84  	ld sp,(Stack)
  78+ 8C13 C9           	ret
  79+ 8C14
  80+ 8C14              ; ---------------------------------------------------
  81+ 8C14
  82+ 8C14 ED 73 FC 84  Pinta_enemigo_2x2_izquierda ld (Stack),sp
  83+ 8C18 31 90 81     	ld sp,Badsat_derecha
  84+ 8C1B D1           1 pop de
  85+ 8C1C 7A           	ld a,d
  86+ 8C1D AE           	xor (hl)
  87+ 8C1E 77           	ld (hl),a
  88+ 8C1F 24           	inc h
  89+ 8C20 7C               ld a,h
  90+ 8C21 E6 07            and 7
  91+ 8C23 20 0C            jr nz,2F
  92+ 8C25 7D               ld a,l
  93+ 8C26 C6 20            add a,$20
  94+ 8C28 6F               ld l,a
  95+ 8C29 38 06            jr c,2F
  96+ 8C2B 7C               ld a,h
  97+ 8C2C D6 08            sub 8
  98+ 8C2E 67               ld h,a
  99+ 8C2F 18 00            jr 2F
 100+ 8C31 10 E8        2 djnz 1B
 101+ 8C33 ED 7B FC 84  	ld sp,(Stack)
 102+ 8C37 C9           	ret
 103+ 8C38
 104+ 8C38 ED 73 FC 84  Pinta_enemigo_2x2_derecha ld (Stack),sp
 105+ 8C3C 31 90 81     	ld sp,Badsat_derecha
 106+ 8C3F D1           1 pop de
 107+ 8C40 7B           	ld a,e
 108+ 8C41 AE           	xor (hl)
 109+ 8C42 77           	ld (hl),a
 110+ 8C43 24           	inc h
 111+ 8C44 7C               ld a,h
 112+ 8C45 E6 07            and 7
 113+ 8C47 20 0C            jr nz,2F
 114+ 8C49 7D               ld a,l
 115+ 8C4A C6 20            add a,$20
 116+ 8C4C 6F               ld l,a
 117+ 8C4D 38 06            jr c,2F
 118+ 8C4F 7C               ld a,h
 119+ 8C50 D6 08            sub 8
 120+ 8C52 67               ld h,a
 121+ 8C53 18 00            jr 2F
 122+ 8C55 10 E8        2 djnz 1B
 123+ 8C57 ED 7B FC 84  	ld sp,(Stack)
 124+ 8C5B C9           	ret
 125+ 8C5C
 126+ 8C5C              ; ---------------------------------------------------
 127+ 8C5C
 128+ 8C5C ED 73 FC 84  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
 129+ 8C60 31 B0 81     	ld sp,Badsat_der_f8
 130+ 8C63 D1           1 pop de
 131+ 8C64 7A           	ld a,d
 132+ 8C65 AE           	xor (hl)
 133+ 8C66 77           	ld (hl),a
 134+ 8C67 23           	inc hl
 135+ 8C68 D1           	pop de
 136+ 8C69 7B           	ld a,e
 137+ 8C6A AE           	xor (hl)
 138+ 8C6B 77           	ld (hl),a
 139+ 8C6C 2B           	dec hl
 140+ 8C6D 24            	inc h
 141+ 8C6E 7C               ld a,h
 142+ 8C6F E6 07            and 7
 143+ 8C71 20 0A            jr nz,2F
 144+ 8C73 7D               ld a,l
 145+ 8C74 C6 20            add a,$20
 146+ 8C76 6F               ld l,a
 147+ 8C77 38 04            jr c,2F
 148+ 8C79 7C               ld a,h
 149+ 8C7A D6 08            sub 8
 150+ 8C7C 67               ld h,a
 151+ 8C7D D1           2 pop de
 152+ 8C7E 7B           	ld a,e
 153+ 8C7F AE           	xor (hl)
 154+ 8C80 77           	ld (hl),a
 155+ 8C81 23           	inc hl
 156+ 8C82 7A           	ld a,d
 157+ 8C83 AE           	xor (hl)
 158+ 8C84 77           	ld (hl),a
 159+ 8C85 2B           	dec hl
 160+ 8C86 24           	inc h
 161+ 8C87 7C               ld a,h
 162+ 8C88 E6 07            and 7
 163+ 8C8A 20 0A            jr nz,3F
 164+ 8C8C 7D               ld a,l
 165+ 8C8D C6 20            add a,$20
 166+ 8C8F 6F               ld l,a
 167+ 8C90 38 04            jr c,3F
 168+ 8C92 7C               ld a,h
 169+ 8C93 D6 08            sub 8
 170+ 8C95 67               ld h,a
 171+ 8C96 10 CB        3 djnz 1B
 172+ 8C98 ED 7B FC 84  	ld sp,(Stack)
 173+ 8C9C C9           	ret
 174+ 8C9D
 175+ 8C9D ED 73 FC 84  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
 176+ 8CA1 31 30 83     	ld sp,Amadeus_F9
 177+ 8CA4 D1           1 pop de
 178+ 8CA5 D1           	pop de
 179+ 8CA6 7B           	ld a,e
 180+ 8CA7 AE           	xor (hl)
 181+ 8CA8 77           	ld (hl),a
 182+ 8CA9 24            	inc h
 183+ 8CAA 7C               ld a,h
 184+ 8CAB E6 07            and 7
 185+ 8CAD 20 0A            jr nz,2F
 186+ 8CAF 7D               ld a,l
 187+ 8CB0 C6 20            add a,$20
 188+ 8CB2 6F               ld l,a
 189+ 8CB3 38 04            jr c,2F
 190+ 8CB5 7C               ld a,h
 191+ 8CB6 D6 08            sub 8
 192+ 8CB8 67               ld h,a
 193+ 8CB9 D1           2 pop de
 194+ 8CBA 7A           	ld a,d
 195+ 8CBB AE           	xor (hl)
 196+ 8CBC 77           	ld (hl),a
 197+ 8CBD 24           	inc h
 198+ 8CBE 7C               ld a,h
 199+ 8CBF E6 07            and 7
 200+ 8CC1 20 0A            jr nz,3F
 201+ 8CC3 7D               ld a,l
 202+ 8CC4 C6 20            add a,$20
 203+ 8CC6 6F               ld l,a
 204+ 8CC7 38 04            jr c,3F
 205+ 8CC9 7C               ld a,h
 206+ 8CCA D6 08            sub 8
 207+ 8CCC 67               ld h,a
 208+ 8CCD 10 D5        3 djnz 1B
 209+ 8CCF ED 7B FC 84  	ld sp,(Stack)
 210+ 8CD3 C9           	ret
 211+ 8CD4
 212+ 8CD4 ED 73 FC 84  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
 213+ 8CD8 31 30 83     	ld sp,Amadeus_F9
 214+ 8CDB D1           1 pop de
 215+ 8CDC 7B           	ld a,e
 216+ 8CDD AE           	xor (hl)
 217+ 8CDE 77           	ld (hl),a
 218+ 8CDF 23           	inc hl
 219+ 8CE0 7A           	ld a,d
 220+ 8CE1 AE           	xor (hl)
 221+ 8CE2 77           	ld (hl),a
 222+ 8CE3 2B           	dec hl
 223+ 8CE4 24             	inc h
 224+ 8CE5 7C               ld a,h
 225+ 8CE6 E6 07            and 7
 226+ 8CE8 20 0A            jr nz,2F
 227+ 8CEA 7D               ld a,l
 228+ 8CEB C6 20            add a,$20
 229+ 8CED 6F               ld l,a
 230+ 8CEE 38 04            jr c,2F
 231+ 8CF0 7C               ld a,h
 232+ 8CF1 D6 08            sub 8
 233+ 8CF3 67               ld h,a
 234+ 8CF4 D1           2 pop de
 235+ 8CF5 7A           	ld a,d
 236+ 8CF6 AE           	xor (hl)
 237+ 8CF7 77           	ld (hl),a
 238+ 8CF8 23           	inc hl
 239+ 8CF9 D1               pop de
 240+ 8CFA 7B           	ld a,e
 241+ 8CFB AE           	xor (hl)
 242+ 8CFC 77           	ld (hl),a
 243+ 8CFD 2B           	dec hl
 244+ 8CFE 24           	inc h
 245+ 8CFF 7C               ld a,h
 246+ 8D00 E6 07            and 7
 247+ 8D02 20 0A            jr nz,3F
 248+ 8D04 7D               ld a,l
 249+ 8D05 C6 20            add a,$20
 250+ 8D07 6F               ld l,a
 251+ 8D08 38 04            jr c,3F
 252+ 8D0A 7C               ld a,h
 253+ 8D0B D6 08            sub 8
 254+ 8D0D 67               ld h,a
 255+ 8D0E 10 CB        3 djnz 1B
 256+ 8D10 ED 7B FC 84  	ld sp,(Stack)
 257+ 8D14 C9           	ret
 258+ 8D15
 259+ 8D15 ED 73 FC 84  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
 260+ 8D19 31 30 83     	ld sp,Amadeus_F9
 261+ 8D1C D1           1 pop de
 262+ 8D1D 7B           	ld a,e
 263+ 8D1E AE           	xor (hl)
 264+ 8D1F 77           	ld (hl),a
 265+ 8D20 24            	inc h
 266+ 8D21 7C               ld a,h
 267+ 8D22 E6 07            and 7
 268+ 8D24 20 0A            jr nz,2F
 269+ 8D26 7D               ld a,l
 270+ 8D27 C6 20            add a,$20
 271+ 8D29 6F               ld l,a
 272+ 8D2A 38 04            jr c,2F
 273+ 8D2C 7C               ld a,h
 274+ 8D2D D6 08            sub 8
 275+ 8D2F 67               ld h,a
 276+ 8D30 D1           2 pop de
 277+ 8D31 7A           	ld a,d
 278+ 8D32 AE           	xor (hl)
 279+ 8D33 77           	ld (hl),a
 280+ 8D34 24           	inc h
 281+ 8D35 7C               ld a,h
 282+ 8D36 E6 07            and 7
 283+ 8D38 20 0A            jr nz,3F
 284+ 8D3A 7D               ld a,l
 285+ 8D3B C6 20            add a,$20
 286+ 8D3D 6F               ld l,a
 287+ 8D3E 38 04            jr c,3F
 288+ 8D40 7C               ld a,h
 289+ 8D41 D6 08            sub 8
 290+ 8D43 67               ld h,a
 291+ 8D44 D1           3 pop de
 292+ 8D45 10 D5            djnz 1B
 293+ 8D47 ED 7B FC 84  	ld sp,(Stack)
 294+ 8D4B C9           	ret
 295+ 8D4C
 296+ 8D4C              ; ---------------------------------------------------
 297+ 8D4C
 298+ 8D4C ED 73 FC 84  Pinta_enemigo_2x2 ld (Stack),sp
 299+ 8D50 31 90 81     	ld sp,Badsat_derecha
 300+ 8D53 D1           1 pop de
 301+ 8D54 7B           	ld a,e
 302+ 8D55 AE           	xor (hl)
 303+ 8D56 77           	ld (hl),a
 304+ 8D57 23           	inc hl
 305+ 8D58 7A           	ld a,d
 306+ 8D59 AE           	xor (hl)
 307+ 8D5A 77           	ld (hl),a
 308+ 8D5B 2B           	dec hl
 309+ 8D5C 24           	inc h
 310+ 8D5D 7C               ld a,h
 311+ 8D5E E6 07            and 7
 312+ 8D60 20 0C            jr nz,2F
 313+ 8D62 7D               ld a,l
 314+ 8D63 C6 20            add a,$20
 315+ 8D65 6F               ld l,a
 316+ 8D66 38 06            jr c,2F
 317+ 8D68 7C               ld a,h
 318+ 8D69 D6 08            sub 8
 319+ 8D6B 67               ld h,a
 320+ 8D6C 18 00            jr 2F
 321+ 8D6E 10 E3        2 djnz 1B
 322+ 8D70 ED 7B FC 84  	ld sp,(Stack)
 323+ 8D74 C9           	ret
 324+ 8D75
 325+ 8D75              ; ---------------------------------------------------
 326+ 8D75
 327+ 8D75 ED 73 FC 84  Pinta_enemigo_3x2 ld (Stack),sp
 328+ 8D79 31 B0 81     	ld sp,Badsat_der_f8
 329+ 8D7C D1           1 pop de
 330+ 8D7D 7B           	ld a,e
 331+ 8D7E AE           	xor (hl)
 332+ 8D7F 77           	ld (hl),a
 333+ 8D80 23           	inc hl
 334+ 8D81 7A           	ld a,d
 335+ 8D82 AE           	xor (hl)
 336+ 8D83 77           	ld (hl),a
 337+ 8D84 23           	inc hl
 338+ 8D85 D1           	pop de
 339+ 8D86 7B           	ld a,e
 340+ 8D87 AE           	xor (hl)
 341+ 8D88 77           	ld (hl),a
 342+ 8D89 2B           	dec hl
 343+ 8D8A 2B           	dec hl
 344+ 8D8B 24           	inc h
 345+ 8D8C 7C               ld a,h
 346+ 8D8D E6 07            and 7
 347+ 8D8F 20 0A            jr nz,2F
 348+ 8D91 7D               ld a,l
 349+ 8D92 C6 20            add a,$20
 350+ 8D94 6F               ld l,a
 351+ 8D95 38 04            jr c,2F
 352+ 8D97 7C               ld a,h
 353+ 8D98 D6 08            sub 8
 354+ 8D9A 67               ld h,a
 355+ 8D9B 7A           2 ld a,d
 356+ 8D9C AE           	xor (hl)
 357+ 8D9D 77           	ld (hl),a
 358+ 8D9E D1           	pop de
 359+ 8D9F 23           	inc hl
 360+ 8DA0 7B           	ld a,e
 361+ 8DA1 AE           	xor (hl)
 362+ 8DA2 77           	ld (hl),a
 363+ 8DA3 23           	inc hl
 364+ 8DA4 7A           	ld a,d
 365+ 8DA5 AE           	xor (hl)
 366+ 8DA6 77           	ld (hl),a
 367+ 8DA7 2B           	dec hl
 368+ 8DA8 2B           	dec hl
 369+ 8DA9 24           	inc h
 370+ 8DAA 7C               ld a,h
 371+ 8DAB E6 07            and 7
 372+ 8DAD 20 0A            jr nz,3F
 373+ 8DAF 7D               ld a,l
 374+ 8DB0 C6 20            add a,$20
 375+ 8DB2 6F               ld l,a
 376+ 8DB3 38 04            jr c,3F
 377+ 8DB5 7C               ld a,h
 378+ 8DB6 D6 08            sub 8
 379+ 8DB8 67               ld h,a
 380+ 8DB9 10 C1        3 djnz 1B
 381+ 8DBB ED 7B FC 84  	ld sp,(Stack)
 382+ 8DBF C9           	ret
# file closed: Rutinas_de_impresion_sprites.asm
 630  8DC0              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
   1+ 8DC0              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
   2+ 8DC0              ;
   3+ 8DC0              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
   4+ 8DC0              ;
   5+ 8DC0              ; *****************************************************************************************************************************************************************************************
   6+ 8DC0              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
   7+ 8DC0
   8+ 8DC0 7C           calcula_tercio ld a,h
   9+ 8DC1 E6 18        	and $18
  10+ 8DC3 CB 2F        	sra a
  11+ 8DC5 CB 2F        	sra a
  12+ 8DC7 CB 2F        	sra a
  13+ 8DC9 C9           	ret
  14+ 8DCA
# file closed: calcula_tercio.asm
 631  8DCA              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
   1+ 8DCA              ; -----------------------------------------------------------------------------------------
   2+ 8DCA              ;
   3+ 8DCA              ;   04/11/22
   4+ 8DCA              ;
   5+ 8DCA              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
   6+ 8DCA              ;
   7+ 8DCA              ;   INPUT: HL contiene la dirección de memoria de pantalla.
   8+ 8DCA              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
   9+ 8DCA              ;
  10+ 8DCA              ;   DESTRUYE: HL y A. !!!!!
  11+ 8DCA
  12+ 8DCA CD C0 8D     Calcula_direccion_atributos call calcula_tercio
  13+ 8DCD 26 58            ld h,$58
  14+ 8DCF 84               add h
  15+ 8DD0 67               ld h,a
  16+ 8DD1 C9               ret
# file closed: Calcula_direccion_atributos.asm
 632  8DD2              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
   1+ 8DD2              ; ********** **********
   2+ 8DD2              ;
   3+ 8DD2              ;   5/11/22
   4+ 8DD2              ;
   5+ 8DD2              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
   6+ 8DD2              ;
   7+ 8DD2              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
   8+ 8DD2              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
   9+ 8DD2              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
  10+ 8DD2              ;
  11+ 8DD2              ;   NO DESTROYERSSSS !!!!!
  12+ 8DD2
  13+ 8DD2 E5           Define_atributos push hl
  14+ 8DD3 C5           	push bc
  15+ 8DD4 D5           	push de
  16+ 8DD5
  17+ 8DD5 CD CA 8D     	call Calcula_direccion_atributos
  18+ 8DD8
  19+ 8DD8 D9               exx
  20+ 8DD9 E5               push hl
  21+ 8DDA D9               exx
  22+ 8DDB D1               pop de
  23+ 8DDC
  24+ 8DDC 42               ld b,d
  25+ 8DDD 7B               ld a,e 									; (Attr) en A.
  26+ 8DDE
  27+ 8DDE C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
  28+ 8DDF E5            	push hl 								; Guardo dirección de attr.
  29+ 8DE0
  30+ 8DE0              ; -----
  31+ 8DE0
  32+ 8DE0 77           2 ld (hl),a
  33+ 8DE1 0D           	dec c 									; Decremento (Columnas).
  34+ 8DE2 28 03        	jr z,1F
  35+ 8DE4 23           	inc hl
  36+ 8DE5 18 F9        	jr 2B
  37+ 8DE7
  38+ 8DE7 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
  39+ 8DE8 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
  40+ 8DE9
  41+ 8DE9 05           	dec b									; Decremento (Filas).
  42+ 8DEA 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
  43+ 8DEC
  44+ 8DEC 11 20 00     	ld de,32
  45+ 8DEF A7           	and a
  46+ 8DF0 ED 5A        	adc hl,de
  47+ 8DF2 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
  48+ 8DF4
  49+ 8DF4 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
  50+ 8DF5 C1           	pop bc
  51+ 8DF6 E1           	pop hl
  52+ 8DF7
  53+ 8DF7 C9           	ret
  54+ 8DF8
# file closed: Define_atributos.asm
 633  8DF8              	include "Cls.asm"
# file opened: Cls.asm
   1+ 8DF8              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
   2+ 8DF8              ;
   3+ 8DF8              ;
   4+ 8DF8              ;	CLS.
   5+ 8DF8              ;
   6+ 8DF8              ;	Limpia la pantalla y define sus atributos.
   7+ 8DF8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
   8+ 8DF8              ;
   9+ 8DF8              ;	COLORES: 0 ..... NEGRO
  10+ 8DF8              ;    		 1 ..... AZUL
  11+ 8DF8              ; 			 2 ..... ROJO
  12+ 8DF8              ;			 3 ..... MAGENTA
  13+ 8DF8              ; 			 4 ..... VERDE
  14+ 8DF8              ; 			 5 ..... CIAN
  15+ 8DF8              ;			 6 ..... AMARILLO
  16+ 8DF8              ; 			 7 ..... BLANCO
  17+ 8DF8              ;
  18+ 8DF8              ;	INPUT: A contiene los atributos de pantalla.
  19+ 8DF8              ;
  20+ 8DF8              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
  21+ 8DF8
  22+ 8DF8
  23+ 8DF8 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
  24+ 8DFB 11 01 40     	LD DE,$4001
  25+ 8DFE 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
  26+ 8E01 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
  27+ 8E03 ED B0        	LDIR
  28+ 8E05 01 FF 02     	LD BC,767
  29+ 8E08 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
  30+ 8E09 ED B0        	LDIR
  31+ 8E0B C9           	ret
  32+ 8E0C
# file closed: Cls.asm
 634  8E0C              	include "Direcciones.asm"
# file opened: Direcciones.asm
   1+ 8E0C              ; ******************************************************************************************************************************************************************************************
   2+ 8E0C              ;
   3+ 8E0C              ;   19/10/22
   4+ 8E0C              ;
   5+ 8E0C              ;	Mov_down
   6+ 8E0C              ;
   7+ 8E0C              ; 	Mueve el Sprite X px hacia abajo.
   8+ 8E0C              ;
   9+ 8E0C              ;
  10+ 8E0C 21 DF 84     Mov_down ld hl,Ctrl_0
  11+ 8E0F CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  12+ 8E11              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
  13+ 8E11              ; 																	; _ en el caso de que no lo haya.
  14+ 8E11 3A D4 84     	ld a,(Vel_down)
  15+ 8E14 47           	ld b,a
  16+ 8E15 2A C4 84         ld hl,(Posicion_actual)
  17+ 8E18 CD C0 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
  18+ 8E1B E6 02        	and 2
  19+ 8E1D 28 0F        	jr z,1F
  20+ 8E1F 7C           	ld a,h
  21+ 8E20 FE 57        	cp $57
  22+ 8E22 20 0A        	jr nz,1F
  23+ 8E24 7D           	ld a,l
  24+ 8E25 C6 20        	add $20
  25+ 8E27 30 05        	jr nc,1F
  26+ 8E29
  27+ 8E29              ; ------------------------------
  28+ 8E29 CD 28 91     	call Reaparece_arriba
  29+ 8E2C              ;	call Reinicio
  30+ 8E2C              ; ------------------------------
  31+ 8E2C
  32+ 8E2C 18 08        	jr 3F
  33+ 8E2E CD 67 8A     1 call NextScan
  34+ 8E31 22 C4 84     	ld (Posicion_actual),hl
  35+ 8E34 10 E2            djnz 2B
  36+ 8E36 C9           3 ret
  37+ 8E37
  38+ 8E37
  39+ 8E37              ; ******************************************************************************************************************************************************************************************
  40+ 8E37              ;
  41+ 8E37              ;   19/10/22
  42+ 8E37              ;
  43+ 8E37              ;	Mov_up
  44+ 8E37              ;
  45+ 8E37              ; 	Mueve el Sprite hacia arriba.
  46+ 8E37              ;
  47+ 8E37              ;
  48+ 8E37 21 DF 84     Mov_up ld hl,Ctrl_0
  49+ 8E3A CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  50+ 8E3C              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
  51+ 8E3C              ; 																		; _ en el caso de que no lo haya.
  52+ 8E3C 3A D3 84     	ld a,(Vel_up)
  53+ 8E3F 47           	ld b,a
  54+ 8E40 2A C4 84     	ld hl,(Posicion_actual)
  55+ 8E43 CD C0 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
  56+ 8E46 A7           	and a
  57+ 8E47 20 10        	jr nz,1F
  58+ 8E49 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
  59+ 8E4A FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
  60+ 8E4C 20 0B            jr nz,1F
  61+ 8E4E 7D               ld a,l
  62+ 8E4F D6 20            sub $20
  63+ 8E51 30 06            jr nc,1F
  64+ 8E53 25               dec h
  65+ 8E54
  66+ 8E54              ; -----------------------------
  67+ 8E54 CD 18 91         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
  68+ 8E57              ;	call Reinicio
  69+ 8E57              ; -----------------------------
  70+ 8E57
  71+ 8E57 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
  72+ 8E59 CD 79 8A     1 call PreviousScan
  73+ 8E5C 22 C4 84     	ld (Posicion_actual),hl
  74+ 8E5F 10 E2            djnz 3B
  75+ 8E61 C9           2   ret
  76+ 8E62
  77+ 8E62              ; ******************************************************************************************************************************************************************************************
  78+ 8E62              ;
  79+ 8E62              ;	19/10/22
  80+ 8E62              ;
  81+ 8E62              ;	Mov_right.
  82+ 8E62              ;
  83+ 8E62              ; 	Desplaza el Sprite (x)Pixels a la derecha.
  84+ 8E62              ;
  85+ 8E62
  86+ 8E62 21 DF 84     Mov_right ld hl,Ctrl_0
  87+ 8E65 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
  88+ 8E67              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
  89+ 8E67              ; 																	; _ en el caso de que no lo haya.
  90+ 8E67 3A C6 84     	ld a,(CTRL_DESPLZ)
  91+ 8E6A A7           	and a
  92+ 8E6B 28 0B        	jr z,10F
  93+ 8E6D
  94+ 8E6D 3A DF 84     	ld a,(Ctrl_0)
  95+ 8E70 CB 7F        	bit 7,a
  96+ 8E72 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
  97+ 8E74 21 C6 84     	ld hl,CTRL_DESPLZ
  98+ 8E77 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
  99+ 8E78
 100+ 8E78 3A DF 84     10 ld a,(Ctrl_0)
 101+ 8E7B CB 77        	bit 6,a
 102+ 8E7D 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
 103+ 8E7F
 104+ 8E7F CD D7 90     	call Stop_Amadeus_right
 105+ 8E82 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
 106+ 8E83 18 4A        	jr 3F
 107+ 8E85
 108+ 8E85 3A CF 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
 109+ 8E88 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
 110+ 8E8A 20 43        	jr nz,3F
 111+ 8E8C
 112+ 8E8C 3A C6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
 113+ 8E8F A7           	and a 															; _[3] para continuar con el DESPLZ.
 114+ 8E90 28 3D        	jr z,3F
 115+ 8E92
 116+ 8E92              ; ---------- ---------- ----------
 117+ 8E92
 118+ 8E92 3A D2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
 119+ 8E95 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
 120+ 8E97 28 11        	jr z,1F
 121+ 8E99 38 06        	jr c,6F
 122+ 8E9B FE 04        	cp 4
 123+ 8E9D 28 14        	jr z,7F
 124+ 8E9F 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
 125+ 8EA1
 126+ 8EA1              ; ---------- ---------- ----------
 127+ 8EA1              ;
 128+ 8EA1              ; Perfiles de velocidad
 129+ 8EA1              ;
 130+ 8EA1 3A C6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
 131+ 8EA4 FE FE        	cp $fe
 132+ 8EA6 20 27        	jr nz,3F
 133+ 8EA8 18 10        	jr 4F
 134+ 8EAA 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
 135+ 8EAD FE FD        	cp $fd
 136+ 8EAF 20 1E        	jr nz,3F
 137+ 8EB1 18 07        	jr 4F
 138+ 8EB3 3A C6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
 139+ 8EB6 FE FB        	cp $fb
 140+ 8EB8 20 15        	jr nz,3F
 141+ 8EBA
 142+ 8EBA              ; ---------- ---------- ----------
 143+ 8EBA
 144+ 8EBA CD 06 91     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
 145+ 8EBD              ;	call Reinicio
 146+ 8EBD
 147+ 8EBD              ; ---------- ---------- ----------
 148+ 8EBD
 149+ 8EBD 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
 150+ 8EBF C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
 151+ 8EC0 CD F8 8E     	call DESPLZ_DER
 152+ 8EC3 C1           	pop bc
 153+ 8EC4 10 F9        	djnz 5B
 154+ 8EC6 2A C4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
 155+ 8EC9 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
 156+ 8ECA 22 C4 84     	ld (Posicion_actual),hl
 157+ 8ECD 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
 158+ 8ECF
 159+ 8ECF              ; ---------- ---------- ----------
 160+ 8ECF
 161+ 8ECF 3A D2 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
 162+ 8ED2 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
 163+ 8ED4 20 1B        	jr nz,8F
 164+ 8ED6 2A C4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
 165+ 8ED9 7D           	ld a,l
 166+ 8EDA E6 1F        	and $1f
 167+ 8EDC FE 1F        	cp 31
 168+ 8EDE 20 05        	jr nz,9F
 169+ 8EE0
 170+ 8EE0              ; ---------- ---------- ----------
 171+ 8EE0
 172+ 8EE0 CD 06 91     	call Reaparece_izquierda
 173+ 8EE3
 174+ 8EE3              ; ---------- ---------- ----------
 175+ 8EE3
 176+ 8EE3 18 12        	jr 2F
 177+ 8EE5 2A C4 84     9 ld hl,(Posicion_actual)
 178+ 8EE8 23           	inc hl
 179+ 8EE9 22 C4 84     	ld (Posicion_actual),hl
 180+ 8EEC CD 52 91     	call Genera_coordenadas
 181+ 8EEF 18 06        	jr 2F
 182+ 8EF1 2A C4 84     8 ld hl,(Posicion_actual)
 183+ 8EF4 CD F8 8E     	call DESPLZ_DER
 184+ 8EF7 C9           2 ret
 185+ 8EF8
 186+ 8EF8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 187+ 8EF8              ;
 188+ 8EF8              ;	22/9/22
 189+ 8EF8              ;
 190+ 8EF8
 191+ 8EF8 CD 07 8F     DESPLZ_DER call Desplaza_derecha
 192+ 8EFB CD 1C 8F         call modifica_parametros_1er_DESPLZ_2
 193+ 8EFE CD 42 8F         call Ciclo_completo
 194+ 8F01 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
 195+ 8F04 CB FE        	set 7,(hl)
 196+ 8F06 C9           	ret
 197+ 8F07
 198+ 8F07              ; ******************************************************************************************************************************************************************************************
 199+ 8F07              ;	14/9/22
 200+ 8F07              ;
 201+ 8F07
 202+ 8F07 3A D2 84     Desplaza_derecha ld a,(Vel_right)
 203+ 8F0A 47           	ld b,a
 204+ 8F0B 2A CA 84     	ld hl,(Puntero_DESPLZ)
 205+ 8F0E 23           1 inc hl
 206+ 8F0F 23           	inc hl
 207+ 8F10 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
 208+ 8F12 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
 209+ 8F15 CD C7 85     	call Extrae_address
 210+ 8F18 22 F0 84     	ld (Caja_de_DESPLZ),hl
 211+ 8F1B C9           	ret
 212+ 8F1C
 213+ 8F1C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 214+ 8F1C              ;
 215+ 8F1C              ;	24/7/22
 216+ 8F1C              ;
 217+ 8F1C              ;	modifica_parametros_1er_DESPLZ_2
 218+ 8F1C              ;
 219+ 8F1C              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
 220+ 8F1C              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
 221+ 8F1C              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
 222+ 8F1C
 223+ 8F1C 3A C6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
 224+ 8F1F A7           	and a
 225+ 8F20 20 1C        	jr nz,1F
 226+ 8F22 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
 227+ 8F24 32 C6 84         ld (CTRL_DESPLZ),a
 228+ 8F27 21 C3 84     	ld hl,Columns
 229+ 8F2A 34           	inc (hl)
 230+ 8F2B 3A CE 84     	ld a,(Cuad_objeto)
 231+ 8F2E E6 01        	and 1
 232+ 8F30 28 0C        	jr z,1F
 233+ 8F32 2A C4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
 234+ 8F35 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
 235+ 8F36 22 C4 84     	ld (Posicion_actual),hl
 236+ 8F39 CD E3 90     	call Inc_CTRL_DESPLZ
 237+ 8F3C 18 03        	jr 2F
 238+ 8F3E CD E3 90     1 call Inc_CTRL_DESPLZ
 239+ 8F41 C9           2 ret
 240+ 8F42
 241+ 8F42              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 242+ 8F42              ;
 243+ 8F42              ;	24/7/22
 244+ 8F42              ;
 245+ 8F42              ;	Ciclo_completo.
 246+ 8F42              ;
 247+ 8F42              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
 248+ 8F42              ;
 249+ 8F42              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
 250+ 8F42              ; 	Decrementamos (Columns).
 251+ 8F42              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
 252+ 8F42              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
 253+ 8F42
 254+ 8F42
 255+ 8F42 3A C6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
 256+ 8F45 FE FF        	cp $ff
 257+ 8F47 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
 258+ 8F49 18 25        	jr 3f
 259+ 8F4B 21 C3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
 260+ 8F4E 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
 261+ 8F4F AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
 262+ 8F50 32 C6 84     	ld (CTRL_DESPLZ),a
 263+ 8F53 3A CE 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
 264+ 8F56 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
 265+ 8F58 20 07        	jr nz,2F
 266+ 8F5A 2A C4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
 267+ 8F5D 23           	inc hl
 268+ 8F5E 22 C4 84     	ld (Posicion_actual),hl
 269+ 8F61 2A C8 84     2 ld hl,(Indice_Sprite)
 270+ 8F64 22 CA 84     	ld (Puntero_DESPLZ),hl
 271+ 8F67 21 00 00     	ld hl,0
 272+ 8F6A 22 F0 84     	ld (Caja_de_DESPLZ),hl
 273+ 8F6D CD 52 91     	call Genera_coordenadas
 274+ 8F70 C9           3 ret
 275+ 8F71
 276+ 8F71              ; ******************************************************************************************************************************************************************************************
 277+ 8F71              ;
 278+ 8F71              ;	19/10/22
 279+ 8F71              ;
 280+ 8F71              ;	Mov_left.
 281+ 8F71              ;
 282+ 8F71              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
 283+ 8F71              ;
 284+ 8F71              Mov_left
 285+ 8F71
 286+ 8F71 21 DF 84     	ld hl,Ctrl_0
 287+ 8F74 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 288+ 8F76              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 289+ 8F76              ; 																	; _ en el caso de que no lo haya.
 290+ 8F76 3A C6 84     	ld a,(CTRL_DESPLZ)
 291+ 8F79 A7           	and a
 292+ 8F7A 20 19        	jr nz,10F
 293+ 8F7C
 294+ 8F7C 2A E8 84     	ld hl,(Puntero_objeto)
 295+ 8F7F 22 CA 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
 296+ 8F82
 297+ 8F82 3A DF 84     	ld a,(Ctrl_0)
 298+ 8F85 CB 77        	bit 6,a
 299+ 8F87 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
 300+ 8F89
 301+ 8F89 CD DD 90     	call Stop_Amadeus_left
 302+ 8F8C 20 5F        	jr nz,3F
 303+ 8F8E
 304+ 8F8E 2A C8 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
 305+ 8F91 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
 306+ 8F94 C9           	ret
 307+ 8F95
 308+ 8F95 3A DF 84     10 	ld a,(Ctrl_0)
 309+ 8F98 CB 7F        	bit 7,a
 310+ 8F9A 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
 311+ 8F9C 21 C6 84     	ld hl,CTRL_DESPLZ
 312+ 8F9F 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 313+ 8FA0
 314+ 8FA0 3A CF 84     11 ld a,(Coordenada_X)
 315+ 8FA3 A7           	and a
 316+ 8FA4 20 47        	jr nz,3F
 317+ 8FA6 3A C6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
 318+ 8FA9 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
 319+ 8FAA 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
 320+ 8FAC
 321+ 8FAC              ; ---------- ---------- ----------
 322+ 8FAC
 323+ 8FAC 3A D1 84     	ld a,(Vel_left)
 324+ 8FAF FE 02        	cp 2
 325+ 8FB1 28 0F        	jr z,1F
 326+ 8FB3 38 04        	jr c,6F
 327+ 8FB5 FE 04        	cp 4
 328+ 8FB7 28 12        	jr z,7F
 329+ 8FB9
 330+ 8FB9              ; ---------- ---------- ----------
 331+ 8FB9
 332+ 8FB9 3A C6 84     6 ld a,(CTRL_DESPLZ)
 333+ 8FBC FE F9        	cp $f9
 334+ 8FBE 20 2D        	jr nz,3F
 335+ 8FC0 18 10        	jr 4F
 336+ 8FC2 3A C6 84     1 ld a,(CTRL_DESPLZ)
 337+ 8FC5 FE FA        	cp $fa
 338+ 8FC7 20 24        	jr nz,3F
 339+ 8FC9 18 07        	jr 4F
 340+ 8FCB 3A C6 84     7 ld a,(CTRL_DESPLZ)
 341+ 8FCE FE FC        	cp $fc
 342+ 8FD0 20 1B        	jr nz,3F
 343+ 8FD2
 344+ 8FD2              ; ---------- ---------- ----------
 345+ 8FD2
 346+ 8FD2 CD F4 90     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
 347+ 8FD5              ;	call Reinicio
 348+ 8FD5
 349+ 8FD5              ; ---------- ---------- ----------
 350+ 8FD5
 351+ 8FD5 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
 352+ 8FD7 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
 353+ 8FD8 2A E8 84     	ld hl,(Puntero_objeto)
 354+ 8FDB 22 CA 84     	ld (Puntero_DESPLZ),hl
 355+ 8FDE CD 14 90     	call DESPLZ_IZQ
 356+ 8FE1 C1           	pop bc
 357+ 8FE2 10 F3        	djnz 5B
 358+ 8FE4 2A C4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
 359+ 8FE7 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
 360+ 8FE8 22 C4 84     	ld (Posicion_actual),hl
 361+ 8FEB 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
 362+ 8FED
 363+ 8FED              ; ---------- ---------- ----------
 364+ 8FED
 365+ 8FED 3A D1 84     3 ld a,(Vel_left)
 366+ 8FF0 FE 08        	cp 8
 367+ 8FF2 20 19        	jr nz,8F
 368+ 8FF4 2A C4 84     	ld hl,(Posicion_actual)
 369+ 8FF7 7D           	ld a,l
 370+ 8FF8 E6 1F        	and $1f
 371+ 8FFA 20 05        	jr nz,9F
 372+ 8FFC
 373+ 8FFC              ; ---------- ---------- ----------
 374+ 8FFC
 375+ 8FFC CD F4 90     	call Reaparece_derecha
 376+ 8FFF
 377+ 8FFF              ; ---------- ---------- ----------
 378+ 8FFF
 379+ 8FFF 18 12        	jr 2F
 380+ 9001 2A C4 84     9 ld hl,(Posicion_actual)
 381+ 9004 2B           	dec hl
 382+ 9005 22 C4 84     	ld (Posicion_actual),hl
 383+ 9008 CD 52 91     	call Genera_coordenadas
 384+ 900B 18 06        	jr 2F
 385+ 900D 2A C4 84     8 ld hl,(Posicion_actual)
 386+ 9010 CD 14 90     	call DESPLZ_IZQ
 387+ 9013 C9           2 ret
 388+ 9014
 389+ 9014              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 390+ 9014              ;
 391+ 9014              ;	22/9/22
 392+ 9014
 393+ 9014 CD 23 90     DESPLZ_IZQ call Desplaza_izquierda
 394+ 9017 CD 38 90         call modifica_parametros_1er_DESPLZ
 395+ 901A CD 59 90     	call Ciclo_completo_2
 396+ 901D 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
 397+ 9020 CB BE        	res 7,(hl)
 398+ 9022 C9           	ret
 399+ 9023
 400+ 9023 3A D1 84     Desplaza_izquierda ld a,(Vel_left)
 401+ 9026 47           	ld b,a
 402+ 9027 2A CA 84     	ld hl,(Puntero_DESPLZ)
 403+ 902A 2B           1 dec hl
 404+ 902B 2B           	dec hl
 405+ 902C 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
 406+ 902E 22 CA 84     	ld (Puntero_DESPLZ),hl
 407+ 9031 CD C7 85     	call Extrae_address
 408+ 9034 22 F0 84     	ld (Caja_de_DESPLZ),hl
 409+ 9037 C9           	ret
 410+ 9038
 411+ 9038              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 412+ 9038              ;
 413+ 9038              ;	modifica_parametros_1er_DESPLZ
 414+ 9038              ;
 415+ 9038              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
 416+ 9038              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
 417+ 9038              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
 418+ 9038
 419+ 9038 3A C6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
 420+ 903B A7           	and a
 421+ 903C 20 17        	jr nz,1F
 422+ 903E 21 C3 84     	ld hl,Columns
 423+ 9041 34           	inc (hl)
 424+ 9042 3A CE 84     	ld a,(Cuad_objeto)
 425+ 9045 E6 01        	and 1
 426+ 9047 20 0C        	jr nz,1F
 427+ 9049 2A C4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
 428+ 904C 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
 429+ 904D 22 C4 84     	ld (Posicion_actual),hl
 430+ 9050 CD C6 90     	call Dec_CTRL_DESPLZ
 431+ 9053 18 03        	jr 2F
 432+ 9055 CD C6 90     1 call Dec_CTRL_DESPLZ
 433+ 9058 C9           2 ret
 434+ 9059
 435+ 9059              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 436+ 9059              ;
 437+ 9059 3A C6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
 438+ 905C FE F8        	cp $f8
 439+ 905E 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
 440+ 9060 18 19        	jr 3f
 441+ 9062 21 C3 84     1 ld hl,Columns
 442+ 9065 35           	dec (hl)
 443+ 9066 AF           	xor a
 444+ 9067 32 C6 84     	ld (CTRL_DESPLZ),a
 445+ 906A 3A CE 84     	ld a,(Cuad_objeto)
 446+ 906D E6 01        	and 1
 447+ 906F 28 07        	jr z,2F
 448+ 9071 2A C4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
 449+ 9074 2B           	dec hl
 450+ 9075 22 C4 84     	ld (Posicion_actual),hl
 451+ 9078 CD 52 91     2 call Genera_coordenadas
 452+ 907B C9           3 ret
 453+ 907C
 454+ 907C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 907C
 456+ 907C CD 86 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
 457+ 907F CD 90 88     	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
 458+ 9082              ;																	; Filas * Columnas en DE´.
 459+ 9082 3A CE 84     	ld a,(Cuad_objeto)
 460+ 9085 FE 02        	cp 2
 461+ 9087 38 20        	jr c,2F
 462+ 9089 28 1E        	jr z,2F
 463+ 908B E6 01        	and 1
 464+ 908D 28 15        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
 465+ 908F              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
 466+ 908F CD C5 88     	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
 467+ 9092 C5           	push bc
 468+ 9093 E5           	push hl
 469+ 9094 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 470+ 9096 0D           	dec c
 471+ 9097 2A EA 84     	ld hl,(Puntero_datas)
 472+ 909A A7           	and a
 473+ 909B ED 4A        	adc hl,bc
 474+ 909D 22 EA 84     	ld (Puntero_datas),hl
 475+ 90A0 E1           	pop hl
 476+ 90A1 C1           	pop bc
 477+ 90A2 18 21        	jr 4F
 478+ 90A4 CD C5 88     1 	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
 479+ 90A7 18 1C        	jr 4F
 480+ 90A9 E6 01        2 and 1
 481+ 90AB 28 05        	jr z,3F
 482+ 90AD CD AF 88     	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
 483+ 90B0 18 13        	jr 4F
 484+ 90B2 CD AF 88     3 call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
 485+ 90B5 C5           	push bc
 486+ 90B6 E5           	push hl
 487+ 90B7 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
 488+ 90B9 0D           	dec c
 489+ 90BA 2A EA 84     	ld hl,(Puntero_datas)
 490+ 90BD A7           	and a
 491+ 90BE ED 42        	sbc hl,bc
 492+ 90C0 22 EA 84     	ld (Puntero_datas),hl
 493+ 90C3 E1           	pop hl
 494+ 90C4 C1           	pop bc
 495+ 90C5 C9           4 ret
 496+ 90C6
 497+ 90C6              ; ---------- ---------- ---------- ---------- ---------- ----------
 498+ 90C6              ;
 499+ 90C6              ;	Dec_CTRL_DESPLZ
 500+ 90C6              ;
 501+ 90C6              ;	Subrutina de [modifica_punteros].
 502+ 90C6              ;
 503+ 90C6              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
 504+ 90C6
 505+ 90C6 21 C6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
 506+ 90C9 3A D1 84     	ld a,(Vel_left)
 507+ 90CC A7           	and a
 508+ 90CD 28 06        	jr z,1F
 509+ 90CF 47           	ld b,a
 510+ 90D0 35           3 dec (hl)
 511+ 90D1 10 FD        	djnz 3B
 512+ 90D3 18 01        	jr 2F
 513+ 90D5 35           1 dec (hl)
 514+ 90D6 C9           2 ret
 515+ 90D7
 516+ 90D7              ; ---------- ---------- ---------- ---------- ---------- ----------
 517+ 90D7              ;
 518+ 90D7              ;	19/10/22
 519+ 90D7              ;
 520+ 90D7              ;	(cp 29) para un Amadeus de 3 Columns.
 521+ 90D7              ;	(cp 30)   ""  ""    ""     2 Columns.
 522+ 90D7
 523+ 90D7 3A CF 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
 524+ 90DA FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
 525+ 90DC C9           	ret
 526+ 90DD
 527+ 90DD              ; ---------- ---------- ---------- ---------- ---------- ----------
 528+ 90DD              ;
 529+ 90DD              ;	19/10/22
 530+ 90DD              ;
 531+ 90DD              ;	(cp 2) para un Amadeus de 3 Columns.
 532+ 90DD              ;	(cp 1)   ""  ""    ""     2 Columns.
 533+ 90DD
 534+ 90DD 3A CF 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
 535+ 90E0 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
 536+ 90E2 C9           	ret
 537+ 90E3
 538+ 90E3              ; ---------- ---------- ---------- ---------- ---------- ----------
 539+ 90E3              ;
 540+ 90E3              ;	24/7/22
 541+ 90E3              ;
 542+ 90E3              ;	Inc_CTRL_DESPLZ
 543+ 90E3              ;
 544+ 90E3              ;	Subrutina de [modifica_punteros].
 545+ 90E3              ;
 546+ 90E3              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
 547+ 90E3
 548+ 90E3 21 C6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
 549+ 90E6 3A D2 84     	ld a,(Vel_right)
 550+ 90E9 A7           	and a
 551+ 90EA 28 06        	jr z,1F
 552+ 90EC 47           	ld b,a
 553+ 90ED 34           3 inc (hl)
 554+ 90EE 10 FD        	djnz 3B
 555+ 90F0 18 01        	jr 2F
 556+ 90F2 34           1 inc (hl)
 557+ 90F3 C9           2 ret
 558+ 90F4
 559+ 90F4              ; ---------- ---------- ---------- ---------- ---------- ----------
 560+ 90F4
 561+ 90F4 2A C4 84     Reaparece_derecha ld hl,(Posicion_actual)
 562+ 90F7 01 1F 00     	ld bc,31
 563+ 90FA A7           	and a
 564+ 90FB ED 4A        	adc hl,bc
 565+ 90FD 22 C4 84     	ld (Posicion_actual),hl
 566+ 9100 21 DF 84     	ld hl,Ctrl_0														; $xxx1
 567+ 9103 CB C6        	set 0,(hl)
 568+ 9105 C9           	ret
 569+ 9106
 570+ 9106              ; ---------- ---------- ---------- ---------- ---------- ----------
 571+ 9106
 572+ 9106 2A C4 84     Reaparece_izquierda ld hl,(Posicion_actual)
 573+ 9109 01 1F 00     	ld bc,31
 574+ 910C A7           	and a
 575+ 910D ED 42        	sbc hl,bc
 576+ 910F 22 C4 84     	ld (Posicion_actual),hl 											; $xx1x
 577+ 9112 21 DF 84     	ld hl,Ctrl_0
 578+ 9115 CB CE        	set 1,(hl)
 579+ 9117 C9           	ret
 580+ 9118
 581+ 9118              ; ---------- ---------- ---------- ---------- ---------- ----------
 582+ 9118
 583+ 9118 24           Reaparece_abajo inc h
 584+ 9119 01 E0 17     	ld bc,$17e0
 585+ 911C A7           	and a
 586+ 911D ED 4A        	adc hl,bc
 587+ 911F 22 C4 84     	ld (Posicion_actual),hl
 588+ 9122 21 DF 84     	ld hl,Ctrl_0
 589+ 9125 CB D6        	set 2,(hl)
 590+ 9127 C9           	ret
 591+ 9128
 592+ 9128              ; ---------- ---------- ---------- ---------- ---------- ----------
 593+ 9128
 594+ 9128 01 E0 17     Reaparece_arriba ld bc,$17e0
 595+ 912B A7           	and a
 596+ 912C ED 42        	sbc hl,bc
 597+ 912E 22 C4 84     	ld (Posicion_actual),hl
 598+ 9131 21 DF 84     	ld hl,Ctrl_0
 599+ 9134 CB DE        	set 3,(hl)
 600+ 9136 C9           	ret
 601+ 9137
 602+ 9137              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 603+ 9137              ;   24/07/22
 604+ 9137              ;
 605+ 9137              ;	INPUT:
 606+ 9137              ;
 607+ 9137              ;	B contiene el nº de filas del objeto.
 608+ 9137              ;
 609+ 9137              ;	OUTPUT:
 610+ 9137              ;
 611+ 9137              ;	B, DE y DE´ ..... Contendrán el nº de scanlines del objeto. (Filas*8).
 612+ 9137              ;	C ..... Contendrá la variable (Columns).
 613+ 9137              ;
 614+ 9137              ;	DESTRUYE !!!!! BC, DE y DE´.
 615+ 9137
 616+ 9137 CD 86 89     Calcula_scanlines_totales call Prepara_draw                         ; [Prepara_draw] proporciona (Filas) y (Columns) del objeto.
 617+ 913A CB 20         	sla b
 618+ 913C CB 20        	sla b
 619+ 913E CB 20        	sla b 															; Ahora tengo en A: (Filas*Columnas)*8
 620+ 9140 58               ld e,b
 621+ 9141 16 00            ld d,0                                                          ; (Filas)*8 en E.
 622+ 9143 D5               push de
 623+ 9144 D9           	exx
 624+ 9145 D1               pop de                                                          ; (Filas)*8 en DE y DE´.
 625+ 9146 D9           	exx
 626+ 9147 C9           	ret
 627+ 9148
 628+ 9148              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 629+ 9148
 630+ 9148 2A CC 84     Reinicio ld hl,(Posicion_inicio)
 631+ 914B
 632+ 914B              ;	ld (Posicion_actual),hl
 633+ 914B 21 00 00     	ld hl,0
 634+ 914E 22 C4 84     	ld (Posicion_actual),hl
 635+ 9151
 636+ 9151
 637+ 9151 C9           	ret
# file closed: Direcciones.asm
 635  9152              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
   1+ 9152              ;	12/12/22
   2+ 9152              ;
   3+ 9152              ;	Proporciona las coordenadas del objeto a imprimir.
   4+ 9152              ;	Fila superior "0", Columna izquierda "0".
   5+ 9152              ;
   6+ 9152              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
   7+ 9152              ;
   8+ 9152              ;	Modifica: A
   9+ 9152
  10+ 9152 C5           Genera_coordenadas push bc
  11+ 9153 E5           	push hl
  12+ 9154 2A C4 84     	ld hl,(Posicion_actual)
  13+ 9157 7D           	ld a,l
  14+ 9158 E6 1F        	and $1f
  15+ 915A 32 CF 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
  16+ 915D CD C0 8D     	call calcula_tercio
  17+ 9160 47           	ld b,a
  18+ 9161 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
  19+ 9162 0E 00        	ld c,0 												; Contador de filas a "0".
  20+ 9164 7D           	ld a,l
  21+ 9165 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
  22+ 9167 28 05        	jr z,2F
  23+ 9169 0C           1 inc c
  24+ 916A D6 20        	sub 32
  25+ 916C 20 FB        	jr nz,1B
  26+ 916E 0C           2 inc c
  27+ 916F 04           	inc b
  28+ 9170 05           	dec b
  29+ 9171 28 04        	jr z,3F
  30+ 9173 3E E0        	ld a,$e0
  31+ 9175 10 F2        	djnz 1B
  32+ 9177 79           3 ld a,c
  33+ 9178 3D           	dec a
  34+ 9179 32 D0 84     	ld (Coordenada_y),a
  35+ 917C E1           	pop hl
  36+ 917D C1           	pop bc
  37+ 917E C9           	ret
# file closed: Genera_coordenadas.asm
 636  917F              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
   1+ 917F
   2+ 917F
   3+ 917F              ;   11/8/22
   4+ 917F              ;
   5+ 917F              ;   Base de datos. PATRONES DE MOVIMIENTO.
   6+ 917F              ;
   7+ 917F              ;   Mov_obj.asm
   8+ 917F              ;
   9+ 917F              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
  10+ 917F              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
  11+ 917F              ;
  12+ 917F              ;   Codificación:
  13+ 917F              ;
  14+ 917F              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
  15+ 917F              ;
  16+ 917F
  17+ 917F 02 10 00     Izquierda db 2,%00010000,0
  18+ 9182 02 20 00     Derecha db 2,%00100000,0
  19+ 9185 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
  20+ 9189 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
  21+ 918D 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
  22+ 9191 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
  23+ 9195 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
  23+ 9199 60 42 60 40
  23+ 919D 63
  24+ 919E 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
  24+ 91A2 22 A3 80 A0
  25+ 91A6 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
  25+ 91AA 84 A0 83 A0
  26+ 91AE 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
  26+ 91B2 80 A3 22 A0
  27+ 91B6 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
  27+ 91BA 40 60 42 60
  28+ 91BE 42 60 44 00      db %01000010,%01100000,%01000100,0
  29+ 91C2
  30+ 91C2 82 91        Indice_mov_Badsat defw Derecha
  31+ 91C4 89 91        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
  32+ 91C6 91 91        Indice_mov_Badsat3 defw Escaloncitos_izquierda
  33+ 91C8 85 91        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
  34+ 91CA
  35+ 91CA              Movimiento
  36+ 91CA
  37+ 91CA 3A E5 84         ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
  38+ 91CD A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
  39+ 91CE 28 02            jr z,1F
  40+ 91D0 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
  41+ 91D2
  42+ 91D2 3A E6 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
  43+ 91D5 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
  44+ 91D7 32 E6 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
  45+ 91DA              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
  46+ 91DA 2A E3 84         ld hl,(Puntero_mov)
  47+ 91DD 7E               ld a,(hl)
  48+ 91DE 32 E5 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
  49+ 91E1 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
  50+ 91E2 22 E3 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
  51+ 91E5
  52+ 91E5 3A E7 84     Decoder ld a,(Repetimos_db)
  53+ 91E8 A7               and a
  54+ 91E9 20 0C            jr nz,12F
  55+ 91EB 2A E3 84         ld hl,(Puntero_mov)
  56+ 91EE 7E               ld a,(hl)
  57+ 91EF A7               and a
  58+ 91F0 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
  59+ 91F2
  60+ 91F2 E6 0F            and $0f
  61+ 91F4 32 E7 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
  62+ 91F7              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
  63+ 91F7 2A E3 84     12 ld hl,(Puntero_mov)
  64+ 91FA CB 7E            bit 7,(hl)
  65+ 91FC 28 03            jr z,2F
  66+ 91FE CD 0C 8E         call Mov_down
  67+ 9201 2A E3 84     2 ld hl, (Puntero_mov)
  68+ 9204 CB 76            bit 6,(hl)
  69+ 9206 28 03            jr z,3F
  70+ 9208 CD 37 8E         call Mov_up
  71+ 920B 2A E3 84     3 ld hl, (Puntero_mov)
  72+ 920E CB 6E            bit 5,(hl)
  73+ 9210 28 03            jr z,4F
  74+ 9212 CD 62 8E         call Mov_right
  75+ 9215 2A E3 84     4 ld hl, (Puntero_mov)
  76+ 9218 CB 66            bit 4,(hl)
  77+ 921A 28 03            jr z,5F
  78+ 921C CD 71 8F         call Mov_left
  79+ 921F
  80+ 921F              ; ---------- --------- --------- ---------- ----------
  81+ 921F
  82+ 921F 3A E7 84     5 ld a,(Repetimos_db)
  83+ 9222 A7               and a
  84+ 9223 28 07            jr z,6F
  85+ 9225 3D               dec a
  86+ 9226 32 E7 84         ld (Repetimos_db),a
  87+ 9229 28 01            jr z,6f
  88+ 922B C9           11 ret
  89+ 922C 21 E5 84     6 ld hl,Contador_db_mov
  90+ 922F 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
  91+ 9230 2A E3 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
  92+ 9233 23               inc hl
  93+ 9234 22 E3 84         ld (Puntero_mov),hl
  94+ 9237 18 F2            jr 11B
  95+ 9239 2A E1 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
  96+ 923C 3A E6 84         ld a,(Incrementa_puntero)
  97+ 923F 47               ld b,a
  98+ 9240 23           8 inc hl
  99+ 9241 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 100+ 9243 5E               ld e,(hl)
 101+ 9244 23               inc hl
 102+ 9245 56               ld d,(hl)
 103+ 9246 EB               ex de,hl
 104+ 9247 22 E3 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
 105+ 924A 18 DF            jr 11B
 106+ 924C
 107+ 924C              ; ---------- --------- --------- ---------- ----------
 108+ 924C              ;
 109+ 924C              ;   11/8/22
 110+ 924C              ;
 111+ 924C              ;   Prepara_Puntero_mov
 112+ 924C
 113+ 924C E5           Prepara_Puntero_mov push hl
 114+ 924D D5               push de
 115+ 924E 2A E1 84         ld hl,(Puntero_indice_mov)
 116+ 9251 5E               ld e,(hl)
 117+ 9252 23               inc hl
 118+ 9253 56               ld d,(hl)
 119+ 9254 EB               ex de,hl
 120+ 9255 22 E3 84         ld (Puntero_mov),hl
 121+ 9258 D1               pop de
 122+ 9259 E1               pop hl
 123+ 925A C9               ret
 124+ 925B
 125+ 925B              ; ---------- --------- --------- ---------- ----------
 126+ 925B              ;
 127+ 925B              ;   11/8/22
 128+ 925B              ;
 129+ 925B              ;   Reinicia_el_movimiento
 130+ 925B
 131+ 925B CD 4C 92     Reinicia_el_movimiento call Prepara_Puntero_mov
 132+ 925E AF               xor a
 133+ 925F 32 E5 84         ld (Contador_db_mov),a
 134+ 9262 32 E6 84         ld (Incrementa_puntero),a
 135+ 9265 C3 CA 91         jp Movimiento
 136+ 9268
 137+ 9268              ; ---------- --------- --------- ---------- ----------
 138+ 9268
 139+ 9268
 140+ 9268
 141+ 9268
 142+ 9268
 143+ 9268
 144+ 9268
 145+ 9268
 146+ 9268
 147+ 9268
 148+ 9268
 149+ 9268
 150+ 9268
 151+ 9268
 152+ 9268
 153+ 9268
 154+ 9268
 155+ 9268
# file closed: Patrones_de_mov.asm
 637  9268              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
   1+ 9268              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   2+ 9268              ;
   3+ 9268              ;	8/11/22
   4+ 9268              ;
   5+ 9268              ;	Instrucciones donde interviene el Stack Pointer, (SP).
   6+ 9268
   7+ 9268              ;	ADC HL,SP	LD (addr),SP
   8+ 9268              ;	ADD HL,SP	LD SP,(addr)
   9+ 9268              ;	ADD IX,SP	LD SP,nn
  10+ 9268              ; 	ADD IY,SP	LD SP,HL
  11+ 9268              ;				LD SP,IX
  12+ 9268              ;	DEC SP		LD SP,IY
  13+ 9268
  14+ 9268              ;	EX (SP),HL
  15+ 9268              ;	EX (SP),IX
  16+ 9268              ;	EX (SP),IY
  17+ 9268
  18+ 9268              ;	INC SP
  19+ 9268
  20+ 9268
  21+ 9268                  org $7fa0
  22+ 7FA0
  23+ 7FA0 ED 73 FC 84  Guarda_foto_registros ld (Stack),sp			                      ; Guardo SP en (Stack).
  24+ 7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
  25+ 7FA7
  26+ 7FA7 E5               push hl
  27+ 7FA8 C5               push bc
  28+ 7FA9 D5               push de
  29+ 7FAA DD E5            push ix
  30+ 7FAC
  31+ 7FAC 08               ex af,af
  32+ 7FAD F5               push af
  33+ 7FAE 08               ex af,af
  34+ 7FAF
  35+ 7FAF D9               exx
  36+ 7FB0 C5               push bc
  37+ 7FB1 E5               push hl                                        ; Hacemos un SNAPSHOT de los registros.
  38+ 7FB2 D9               exx
  39+ 7FB3
  40+ 7FB3 2A 00 85         ld hl,(Stack_snapshot)                         ; Album_de_fotos contiene la imagen de los registros implicados en el_
  41+ 7FB6 06 07            ld b,7                                         ; _correcto funcionamiento de [Pintorrejeo].
  42+ 7FB8
  43+ 7FB8 D1           1 pop de
  44+ 7FB9 73               ld (hl),e
  45+ 7FBA 23               inc hl
  46+ 7FBB 72               ld (hl),d
  47+ 7FBC 23               inc hl                                         ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
  48+ 7FBD 10 F9            djnz 1B
  49+ 7FBF
  50+ 7FBF 22 00 85         ld (Stack_snapshot),hl
  51+ 7FC2 ED 7B FC 84      ld sp,(Stack)
  52+ 7FC6
  53+ 7FC6 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
  54+ 7FC7
  55+ 7FC7
# file closed: Guarda_foto_registros.asm
 638  7FC7
 639  7FC7              	SAVESNA "Pruebas.sna", START
 640  7FC7
 641  7FC7
 642  7FC7
# file closed: Banco_de_pruebas.asm
