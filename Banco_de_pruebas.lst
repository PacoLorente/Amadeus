# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 41 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 00 84        	defw Badsat
  9+  83C2 32 84        	defw Badsat2
 10+  83C4 64 84        	defw Badsat3
 11+  83C6 96 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00           	db 0
 25+  83D3
 26+  83D3 05           	db %00000101
 27+  83D4 00 83        	defw Indice_Amadeus
 28+  83D6 00 00        	defw 0
 29+  83D8 CF 50        	defw $50cf
 30+  83DA 00 00 00     	db 0,0,0
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0
 33+  83E1
 34+  83E1 00 00        	db 0,0
 35+  83E3 00 00        	defw 0
 36+  83E5 00           	db 0
 37+  83E6 00 00        	db 0,0
 38+  83E8 00 00        	defw 0
 39+  83EA 00           	db 0
 40+  83EB
 41+  83EB 00 00        	db 0,0
 42+  83ED
 43+  83ED 00 00 00 00  	defw 0,0
 44+  83F1 00 00 00     	db 0,0,0
 45+  83F4
 46+  83F4 00 00        	defw 0
 47+  83F6 00 00        	defw 0
 48+  83F8 00           	db 0
 49+  83F9 00 00        	defw 0
 50+  83FB 00           	db 0
 51+  83FC
 52+  83FC 00 00 00 00  	defw 0,0
 53+  8400
 54+  8400              ; ---------- ---------- ---------- ---------- ----------
 55+  8400
 56+  8400 02 02        Badsat db 2,2
 57+  8402 00 00        	defw 0
 58+  8404 00           	db 0
 59+  8405
 60+  8405 06           	db %00000110
 61+  8406 80 81        	defw Indice_Badsat_der
 62+  8408 00 00        	defw 0
 63+  840A A1 47        	defw $47a1
 64+  840C 00 00 00     	db 0,0,0
 65+  840F
 66+  840F 01 01 01 02  	db 1,1,1,2
 67+  8413
 68+  8413 00 00        	db 0,0
 69+  8415 00 00        	defw 0
 70+  8417 00           	db 0
 71+  8418 00 00        	db 0,0
 72+  841A 00 00        	defw 0
 73+  841C 00           	db 0
 74+  841D
 75+  841D 00 00        	db 0,0
 76+  841F
 77+  841F 26 90 00 00  	defw Indice_mov_Badsat,0
 78+  8423 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 79+  8426
 80+  8426 00 00        	defw 0
 81+  8428 00 00        	defw 0
 82+  842A 00           	db 0
 83+  842B 00 00        	defw 0
 84+  842D 00           	db 0
 85+  842E
 86+  842E 00 00 00 00  	defw 0,0
 87+  8432
 88+  8432              ; ---------- ---------- ---------- ---------- ----------
 89+  8432
 90+  8432 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 91+  8434 00 00        	defw 0                                            ; Posicion_actual
 92+  8436 00           	db 0                                              ; CTRL_DESPLZ
 93+  8437
 94+  8437 02           	db %00000010
 95+  8438 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 96+  843A 00 00        	defw 0                                            ; Puntero_DESPLZ
 97+  843C 61 47        	defw $4761                                        ; Posicion_inicio
 98+  843E 00 00 00     	db 0,0,0
 99+  8441
100+  8441 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
101+  8445
102+  8445 00 00        	db 0,0
103+  8447 00 00        	defw 0
104+  8449 00           	db 0
105+  844A 00 00        	db 0,0
106+  844C 00 00        	defw 0
107+  844E 00           	db 0
108+  844F
109+  844F 00 00        	db 0,0
110+  8451
111+  8451 28 90 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
112+  8455 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
113+  8458
114+  8458 00 00        	defw 0
115+  845A 00 00        	defw 0
116+  845C 00           	db 0
117+  845D 00 00        	defw 0
118+  845F 00           	db 0
119+  8460
120+  8460 00 00 00 00  	defw 0,0
121+  8464
122+  8464              ; ---------- ---------- ---------- ---------- ----------
123+  8464
124+  8464 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
125+  8466 00 00        	defw 0                                            ; Posicion_actual
126+  8468 00           	db 0                                              ; CTRL_DESPLZ
127+  8469
128+  8469 04           	db %00000100
129+  846A 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
130+  846C 00 00        	defw 0                                            ; Puntero_DESPLZ
131+  846E 7E 47        	defw $477e                                        ; Posicion_inicio
132+  8470 00 00 00     	db 0,0,0
133+  8473
134+  8473 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
135+  8477
136+  8477 00 00        	db 0,0
137+  8479 00 00        	defw 0
138+  847B 00           	db 0
139+  847C 00 00        	db 0,0
140+  847E 00 00        	defw 0
141+  8480 00           	db 0
142+  8481
143+  8481 00 00        	db 0,0
144+  8483
145+  8483 2A 90 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
146+  8487 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
147+  848A
148+  848A 00 00        	defw 0
149+  848C 00 00        	defw 0
150+  848E 00           	db 0
151+  848F 00 00        	defw 0
152+  8491 00           	db 0
153+  8492
154+  8492 00 00 00 00  	defw 0,0
155+  8496
156+  8496              ; ---------- ---------- ---------- ---------- ----------
157+  8496
158+  8496 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
159+  8498 00 00        	defw 0                                            ; Posicion_actual
160+  849A 00           	db 0                                              ; CTRL_DESPLZ
161+  849B
162+  849B 01           	db %00000001
163+  849C 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
164+  849E 00 00        	defw 0                                            ; Puntero_DESPLZ
165+  84A0 BE 47        	defw $47be                                        ; Posicion_inicio
166+  84A2 00 00 00     	db 0,0,0
167+  84A5
168+  84A5 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
169+  84A9
170+  84A9 00 00        	db 0,0
171+  84AB 00 00        	defw 0
172+  84AD 00           	db 0
173+  84AE 00 00        	db 0,0
174+  84B0 00 00        	defw 0
175+  84B2 00           	db 0
176+  84B3
177+  84B3 00 00        	db 0,0
178+  84B5
179+  84B5 2C 90 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
180+  84B9 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
181+  84BC
182+  84BC 00 00        	defw 0
183+  84BE 00 00        	defw 0
184+  84C0 00           	db 0
185+  84C1 00 00        	defw 0
186+  84C3 00           	db 0
187+  84C4
188+  84C4 00 00 00 00  	defw 0,0
189+  84C8
# file closed: Base_de_datos_Sprites.asm
 21   84C8
 22   84C8              ; ******************************************************************************************************************************************************************************************
 23   84C8              ; Constantes.
 24   84C8              ; ******************************************************************************************************************************************************************************************
 25   84C8              ;
 26   84C8              ; 8/11/22
 27   84C8              ;
 28   84C8              ; Constantes generales.
 29   84C8              ;
 30   84C8
 31   84C8              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84C8              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84C8              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84C8              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84C8              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84C8
 37   84C8              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84C8              ;                               				        ; De momento situamos este almacén en $7000.
 39   84C8
 40   84C8
 41   84C8              ; ******************************************************************************************************************************************************************************************
 42   84C8              ; Variables.
 43   84C8              ; ******************************************************************************************************************************************************************************************
 44   84C8              ;
 45   84C8              ; 10/11/22
 46   84C8              ;
 47   84C8              ; Variables de DRAW. (Motor principal).
 48   84C8              ;
 49   84C8
 50   84C8 02           Filas db 2												; Filas. [DRAW]
 51   84C9 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84CA 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84CC 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 54   84CD              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 55   84CD              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 56   84CD              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 57   84CD 06           Attr db %00000110										; Atributos de la entidad:
 58   84CE
 59   84CE              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 60   84CE              ;
 61   84CE              ;	COLORES: 0 ..... NEGRO
 62   84CE              ;    		 1 ..... AZUL
 63   84CE              ; 			 2 ..... ROJO
 64   84CE              ;			 3 ..... MAGENTA
 65   84CE              ; 			 4 ..... VERDE
 66   84CE              ; 			 5 ..... CIAN
 67   84CE              ;			 6 ..... AMARILLO
 68   84CE              ; 			 7 ..... BLANCO
 69   84CE
 70   84CE 80 81        Indice_Sprite defw Indice_Badsat_der
 71   84D0 00 00        Puntero_DESPLZ defw 0
 72   84D2 A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 73   84D4 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 74   84D5 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 75   84D6 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 76   84D7
 77   84D7              ; Variables de objeto. (Características).
 78   84D7
 79   84D7 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 80   84D8 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 81   84D9 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 82   84DA 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 83   84DB
 84   84DB 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 85   84DD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 86   84DF 00           	db 0
 87   84E0 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 88   84E2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 89   84E4 00           	db 0
 90   84E5
 91   84E5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 92   84E5
 93   84E5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 94   84E6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 95   84E6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 96   84E6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
 97   84E6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
 98   84E6              ;
 99   84E6              ; 														DESCRIPCIÖN:
100   84E6              ;
101   84E6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
102   84E6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
103   84E6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
104   84E6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
105   84E6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
106   84E6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
107   84E6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
108   84E6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
109   84E6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
110   84E6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
111   84E6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
112   84E6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
113   84E6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
114   84E6              ;
115   84E6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
116   84E6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
117   84E6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
118   84E6
119   84E6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
120   84E7
121   84E7              ; Movimiento.
122   84E7
123   84E7 26 90        Puntero_indice_mov defw Indice_mov_Badsat
124   84E9 00 00        Puntero_mov defw 0
125   84EB 00           Contador_db_mov db 0
126   84EC 00           Incrementa_puntero db 0
127   84ED 00           Repetimos_db db 0
128   84EE
129   84EE
130   84EE              ; Variables de funcionamiento. [DRAW].
131   84EE
132   84EE 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
133   84F0 00 00        Puntero_datas defw 0
134   84F2 00           Columnas db 0
135   84F3 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
136   84F5              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
137   84F5 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
138   84F6
139   84F6
140   84F6              ; Cajas. Almacenes.
141   84F6
142   84F6 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
143   84F8 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
144   84FA
145   84FA              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
146   84FA
147   84FA              ; Gestión de ENTIDADES.
148   84FA
149   84FA 00 00        Puntero_store_entidades defw 0
150   84FC 00 00        Puntero_restore_entidades defw 0
151   84FE 00 00        Indice_restore defw 0
152   8500
153   8500              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
154   8500
155   8500 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
156   8501 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
157   8502              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
158   8502              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
159   8502              ;														; _ (Numero_de_malotes)="0".
160   8502 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
161   8504              ;														; _variable para almacenar lo posición del puntero_
162   8504              ; 														; _de pila, SP.
163   8504 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
164   8506              ;														; La utiliza la rutina [Extrae_foto_registros].
165   8506 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
166   8508              ;														; _el snapshot de los registros de la siguiente entidad.
167   8508              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
168   8508
169   8508              ; Gestión de FRAMES.
170   8508
171   8508 00           Switch db 0
172   8509
173   8509              ; Variables de Raster y localización en pantalla.
174   8509
175   8509 00 FF        Temp_Raster defw $ff00
176   850B
177   850B              ; Rutina principal *************************************************************************************************************************************************************************
178   850B              ;
179   850B              ;	14/11/22
180   850B
181   850B 31 FF FF     START ld sp,$ffff
182   850E
183   850E 3E A0        	ld a,$a0
184   8510 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
185   8512 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
186   8514 F3           	DI
187   8515
188   8515 3E 01        	ld a,1
189   8517 D3 FE        	out ($fe),a
190   8519
191   8519 3E 07        	ld a,%00000111
192   851B CD 7C 8C     	call Cls
193   851E
194   851E              ;	call Pinta_FILAS
195   851E
196   851E CD 84 86     	call Pulsa_ENTER
197   8521
198   8521              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
199   8521              ;   Inicialmente tengo cargado a Amadeus en el engine.
200   8521              ;	Pintamos el resto de entidades:
201   8521
202   8521 CD F7 85     	call Inicia_punteros_de_entidades
203   8524 21 00 85     	ld hl,Numero_de_entidades
204   8527 46           	ld b,(hl)
205   8528
206   8528 C5           1 push bc  												; Guardo el contador de entidades.
207   8529 CD 26 86      	call Inicia_Puntero_objeto
208   852C CD DB 86     	call Draw
209   852F CD A0 7F     	call Guarda_foto_registros
210   8532 CD 43 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
211   8535 C1           	pop bc
212   8536 10 F0        	djnz 1B  											; Decremento el contador de entidades.
213   8538
214   8538              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
215   8538
216   8538 CD F7 85     	call Inicia_punteros_de_entidades
217   853B CD 72 86     	call Restore_Primera_entidad
218   853E
219   853E FB           4 ei
220   853F 18 FD        	jr 4B
221   8541
222   8541              ; -----------------------------------------------------------------------------------
223   8541
224   8541              Frame
225   8541
226   8541              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
227   8541              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
228   8541
229   8541 3E 07            ld a,7
230   8543 D3 FE            out ($fe),a
231   8545
232   8545 CD 0D 86     	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
233   8548 CD 1D 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
234   854B
235   854B 3E 01            ld a,1
236   854D D3 FE            out ($fe),a
237   854F
238   854F              ; ----------------------------------------------------------------------
239   854F
240   854F 21 00 70     	ld hl,Album_de_fotos
241   8552 22 06 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
242   8555              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
243   8555 3A 00 85         ld a,(Numero_de_entidades)
244   8558 47               ld b,a
245   8559
246   8559 C5           2 push bc
247   855A
248   855A CD 7D 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
249   855D
250   855D 3A E5 84      	ld a,(Ctrl_0)
251   8560 CB 67        	bit 4,a
252   8562 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
253   8564
254   8564              ; ---------
255   8564
256   8564 CD B0 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
257   8567
258   8567 21 E5 84     	ld hl,Ctrl_0
259   856A CB A6            res 4,(hl)
260   856C
261   856C CD 43 86     1 call Store_Restore_entidades
262   856F
263   856F C1           	pop bc
264   8570 10 E7        	djnz 2B
265   8572
266   8572 CD F7 85     	call Inicia_punteros_de_entidades
267   8575 CD 72 86     	call Restore_Primera_entidad
268   8578
269   8578 3E 00        	ld a,0
270   857A D3 FE        	out ($fe),a
271   857C
272   857C C9           	ret
273   857D
274   857D              ; --------------------------------------------------------------------------------------------------------------
275   857D              ;
276   857D              Mov_obj
277   857D
278   857D              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
279   857D
280   857D CD F0 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
281   8580 CD C1 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
282   8583
283   8583 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
284   8585 32 E6 84     	ld (Obj_dibujado),a
285   8588
286   8588              ; Movemos Amadeus o enemigos...
287   8588
288   8588 3A E5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
289   858B CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
290   858D C4 98 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
291   8590
292   8590 3A E5 84     	ld a,(Ctrl_0)
293   8593 CB 77        	bit 6,a
294   8595 CC 2E 90     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
295   8598
296   8598 3A E5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
297   859B CB 67        	bit 4,a
298   859D C8           	ret z
299   859E
300   859E              ; ---------
301   859E
302   859E CD C1 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
303   85A1
304   85A1 18 FE        	jr $
305   85A3
306   85A3 CD D8 85         call Repone_borrar
307   85A6 CD 00 8F     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
308   85A9 CD DB 86     	call Draw											; Preparamos las variables para borrar.
309   85AC CD A0 7F     	call Guarda_foto_registros
310   85AF C9           	ret
311   85B0
312   85B0              ; --------------------------------------------------------------------------------------------------------------
313   85B0              ;
314   85B0 AF           Borra_Pinta_obj xor a
315   85B1 32 E6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
316   85B4 CD E4 85     	call Repone_pintar
317   85B7 CD 00 8F     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
318   85BA CD DB 86     	call Draw
319   85BD CD A0 7F     	call Guarda_foto_registros
320   85C0 C9           	ret
321   85C1
322   85C1              ; --------------------------------------------------------------------------------------------------------------
323   85C1
324   85C1 21 C8 84     Prepara_var_pintado_borrado	ld hl,Filas
325   85C4 3A E6 84     	ld a,(Obj_dibujado)
326   85C7 A7           	and a
327   85C8 28 05        	jr z,1F
328   85CA 11 E0 84     	ld de,Variables_de_pintado
329   85CD 18 03        	jr 2F
330   85CF 11 DB 84     1 ld de,Variables_de_borrado
331   85D2 01 05 00     2 ld bc,5
332   85D5 ED B0        	ldir
333   85D7 C9           	ret
334   85D8
335   85D8 21 DB 84     Repone_borrar ld hl,Variables_de_borrado
336   85DB 11 C8 84     	ld de,Filas
337   85DE 01 05 00     	ld bc,5
338   85E1 ED B0        	ldir
339   85E3 C9           	ret
340   85E4
341   85E4 21 E0 84     Repone_pintar ld hl,Variables_de_pintado
342   85E7 11 C8 84     	ld de,Filas
343   85EA 01 05 00     	ld bc,5
344   85ED ED B0        	ldir
345   85EF C9           	ret
346   85F0
347   85F0              Prepara_caja_de_borrado
348   85F0
349   85F0 2A F6 84     	ld hl,(Caja_de_DESPLZ)
350   85F3 22 F8 84     	ld (Caja_de_BORRADO),hl
351   85F6 C9           	ret
352   85F7
353   85F7              ; *************************************************************************************************************************************************************
354   85F7              ;
355   85F7              ; 8/1/23
356   85F7              ;
357   85F7              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
358   85F7              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
359   85F7              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
360   85F7
361   85F7              ; Destruye HL y DE !!!!!
362   85F7
363   85F7 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
364   85FA CD 20 86         call Extrae_address
365   85FD 22 FA 84         ld (Puntero_store_entidades),hl
366   8600 21 C2 83     	ld hl,Indice_de_entidades+2
367   8603 22 FE 84     	ld (Indice_restore),hl
368   8606 CD 20 86     	call Extrae_address
369   8609 22 FC 84     	ld (Puntero_restore_entidades),hl
370   860C C9               ret
371   860D
372   860D              ; -------------------------------------------------------------------------------------------------------------
373   860D              ;
374   860D              ; 7/1/23
375   860D              ;
376   860D
377   860D 2A 06 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
378   8610 AF           	xor a
379   8611 67           	ld h,a
380   8612 7D           	ld a,l
381   8613 D6 06        1 sub 6
382   8615 28 03        	jr z,2F
383   8617 24           	inc h
384   8618 18 F9        	jr 1B
385   861A 24           2 inc h
386   861B 7C           	ld a,h
387   861C 32 01 85     	ld (Numero_de_malotes),a
388   861F C9           	ret
389   8620
390   8620              ; *************************************************************************************************************************************************************
391   8620              ;
392   8620              ; 20/10/22
393   8620              ;
394   8620              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
395   8620              ;
396   8620              ; Destruye el puntero y DE !!!!!
397   8620
398   8620 5E           Extrae_address ld e,(hl)
399   8621 23           	inc hl
400   8622 56           	ld d,(hl)
401   8623 2B           	dec hl
402   8624 EB           	ex de,hl
403   8625 C9           	ret
404   8626
405   8626              ; *************************************************************************************************************************************************************
406   8626              ;
407   8626              ;	21/9/22
408   8626              ;
409   8626              ;   Destruye HL y BC !!!!!,
410   8626
411   8626 2A CE 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
412   8629 22 D0 84     	ld (Puntero_DESPLZ),hl
413   862C CD 20 86     	call Extrae_address
414   862F 22 EE 84     	ld (Puntero_objeto),hl
415   8632
416   8632              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
417   8632
418   8632 21 10 83     	ld hl,Amadeus
419   8635 ED 4B EE 84  	ld bc,(Puntero_objeto)
420   8639 B7 ED 42     	sub hl,bc
421   863C C0           	ret nz
422   863D
423   863D 21 E5 84     	ld hl,Ctrl_0
424   8640 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
425   8642
426   8642 C9            	ret 												; _de nuestra nave en los extremos.
427   8643
428   8643              ; *************************************************************************************************************************************************************
429   8643              ;
430   8643              ;	8/1/23
431   8643              ;
432   8643              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
433   8643              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
434   8643
435   8643              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
436   8643              ;	_de la 2ª y 3ª entidad respectivamente.
437   8643
438   8643
439   8643
440   8643              Store_Restore_entidades
441   8643
442   8643 E5           	push hl
443   8644 D5           	push de
444   8645 C5            	push bc
445   8646
446   8646              ;	STORE !!!!!
447   8646
448   8646 21 C8 84     	ld hl,Filas
449   8649 ED 5B FA 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
450   864D 01 32 00     	ld bc,50
451   8650 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
452   8652
453   8652              ;	Incrementa STORE y ejecuta RESTORE !!!!!
454   8652
455   8652 2A FC 84     	ld hl,(Puntero_restore_entidades)
456   8655 22 FA 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
457   8658 11 C8 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
458   865B 01 32 00     	ld bc,50
459   865E ED B0        	ldir
460   8660
461   8660              ;	Incrementa RESTORE !!!!!
462   8660
463   8660 2A FE 84         ld hl,(Indice_restore)
464   8663 23           	inc hl
465   8664 23           	inc hl
466   8665 22 FE 84     	ld (Indice_restore),hl
467   8668 CD 20 86         call Extrae_address
468   866B 22 FC 84         ld (Puntero_restore_entidades),hl
469   866E
470   866E C1           	pop bc
471   866F D1           	pop de
472   8670 E1           	pop hl
473   8671
474   8671 C9           	ret
475   8672
476   8672              ; **************************************************************************************************
477   8672              ;
478   8672              ;	29/10/22
479   8672              ;
480   8672              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
481   8672
482   8672 E5           Restore_Primera_entidad push hl
483   8673 D5           	push de
484   8674 C5            	push bc
485   8675 2A FA 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
486   8678 11 C8 84     	ld de,Filas
487   867B 01 32 00     	ld bc,50
488   867E ED B0        	ldir
489   8680 C1           	pop bc
490   8681 D1           	pop de
491   8682 E1           	pop hl
492   8683 C9           	ret
493   8684
494   8684              ; *************************************************************************************************************************************************************
495   8684              ;
496   8684              ; Teclado.
497   8684
498   8684 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
499   8686 DB FE        	in a,($fe)
500   8688 E6 01        	and $01
501   868A 28 02        	jr z,1f
502   868C 18 F6        	jr Pulsa_ENTER
503   868E C9           1 ret
504   868F
505   868F              ; **************************************************************************************************
506   868F              ;
507   868F              ; Temporización.
508   868F
509   868F              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
510   868F              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
511   868F              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
512   868F              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
513   868F
514   868F              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
515   868F              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
516   868F              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
517   868F
518   868F              ; A partir de $4f61 no hace falta DELAY.
519   868F
520   868F              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
521   868F
522   868F 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
523   8692 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
524   8693 78           	LD A,B
525   8694 A7           	AND A
526   8695 20 FB        	JR NZ,wait
527   8697 C9           	RET
528   8698
529   8698              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
530   8698              ;
531   8698              ;	21/4/22
532   8698
533   8698              Movimiento_Amadeus
534   8698
535   8698 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
536   869A DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
537   869C E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
538   869E CC F5 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
539   86A1 3E F7        	ld a,$f7
540   86A3 DB FE        	in a,($fe)
541   86A5 E6 01        	and $01
542   86A7 C8           	ret z
543   86A8 3E F7        	ld a,$f7
544   86AA DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
545   86AC E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
546   86AE CC E6 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
547   86B1 C9               ret
548   86B2
549   86B2              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
550   86B2
551   86B2              ; Pinta indicadores de FILAS. ------------------------------------------------------
552   86B2
553   86B2 21 10 40     Pinta_FILAS ld hl,$4010
554   86B5              ;	ld b,9
555   86B5              ;2 push hl
556   86B5              ;	push bc
557   86B5 06 BF        	ld b,$bf
558   86B7 36 80        1 ld (hl),%10000000
559   86B9 CD F9 89     	call NextScan
560   86BC 10 F9        	djnz 1B
561   86BE              ;	pop bc
562   86BE              ;	pop hl
563   86BE              ;	inc l
564   86BE              ;	djnz 2B
565   86BE
566   86BE 06 03        	ld b,3
567   86C0 21 00 47         ld hl,$4700
568   86C3 CD C9 86     3 call Bucle_1
569   86C6 10 FB            djnz 3B
570   86C8 C9               ret
571   86C9
572   86C9 C5           Bucle_1 push bc
573   86CA E5                   push hl
574   86CB D1                   pop de
575   86CC 13                   inc de
576   86CD 01 FF 00             ld bc,255
577   86D0 36 FF                ld (hl),255
578   86D2 ED B0                ldir
579   86D4 23                   inc hl
580   86D5 3E 07                ld a,7
581   86D7 84                   add a,h
582   86D8 67                   ld h,a
583   86D9 C1                   pop bc
584   86DA C9                   ret
585   86DB
586   86DB              ; ---------------------------------------------------------------
587   86DB
588   86DB              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86DB              ; ******************************************************************************************************************************************************************************************
  2+  86DB              ;
  3+  86DB              ; 17/08/22
  4+  86DB              ;
  5+  86DB              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86DB
  7+  86DB CD ED 89     Draw call Prepara_draw
  8+  86DE 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86DF A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86E0 28 05        	jr z,2F
 11+  86E2 3A D4 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86E5 18 0C        	jr 1F
 13+  86E7 2A D2 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86EA 22 CA 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86ED CD 7E 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86F0              ;													; _la esquina superior izquierda de la pantalla.
 17+  86F0 CD B0 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86F3 3A E5 84     1 ld a,(Ctrl_0)
 19+  86F6 CB 6F        	bit 5,a
 20+  86F8 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  86FA
 22+  86FA CD 12 87     	call Comprueba_limite_horizontal
 23+  86FD CD A5 87     	call Comprueba_limite_vertical
 24+  8700
 25+  8700              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8700
 27+  8700 CD 27 89     3 call calcula_CColumnass
 28+  8703 CD 5E 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8706 CD B3 89     	call Define_rutina_de_impresion
 30+  8709
 31+  8709 3A E5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  870C CB AF        	res 5,a											; _a ser de utilidad.
 33+  870E 32 E5 84     	ld (Ctrl_0),a
 34+  8711
 35+  8711 C9           	ret
 36+  8712
 37+  8712              ; *******************************************************************************************************************************************************************************************
 38+  8712              ;	23/8/22
 39+  8712              ;
 40+  8712              ; 	Comprueba_limite_horizontal.
 41+  8712              ;
 42+  8712
 43+  8712 3A E6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  8715 A7           	and a
 45+  8716 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  8717
 47+  8717 3A E5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  871A CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  871C 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  871E
 51+  871E E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  8720 32 E5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  8723 18 09            jr 6F
 54+  8725 CB 5F        1 bit 3,a
 55+  8727 28 0D            jr z,2F
 56+  8729 E6 F7            and $f7
 57+  872B 32 E5 84         ld (Ctrl_0),a
 58+  872E CD 7E 88     6 call Inicializacion
 59+  8731 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  8732 08           	ex af,af
 61+  8733 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  8734 18 56            jr 5F
 63+  8736 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  8737
 65+  8737              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  8737              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  8737
 68+  8737 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8738 2A F3 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  873B CD 44 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  873E 67           	ld h,a
 72+  873F EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  8740 CD 44 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  8743 67           	ld h,a
 75+  8744 A7           	and a
 76+  8745 ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  8747
 78+  8747 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8748 FE 02        	cp 2
 80+  874A 38 1C        	jr c,3F
 81+  874C 28 1A        	jr z,3F
 82+  874E
 83+  874E 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  874F 28 21            jr z,7F
 85+  8751 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  8753              ;	ld e,0
 87+  8753 E1           	pop hl
 88+  8754
 89+  8754              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8754              ; _para indicar con E="2" en caso necesario.
 91+  8754
 92+  8754 E5               push hl
 93+  8755 C5               push bc
 94+  8756
 95+  8756 CD 44 8C     	call calcula_tercio
 96+  8759 FE 01        	cp 1
 97+  875B 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  875D
 99+  875D CD 8D 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  8760 28 26            jr z,9F
101+  8762 38 24            jr c,9F
102+  8764 1E 00        11 ld e,0
103+  8766 18 22            jr 8F
104+  8768
105+  8768 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8769 28 07        	jr z, 7F
107+  876B 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  876D 1E 00         	ld e,0
109+  876F E1           	pop hl
110+  8770 18 04        	jr 4F
111+  8772 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  8774 18 15            jr 10F
113+  8776
114+  8776              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  8776              ; _para indicar con E="2" en caso necesario.
116+  8776
117+  8776 E5           4 push hl
118+  8777 C5               push bc
119+  8778
120+  8778 CD 44 8C     	call calcula_tercio
121+  877B FE 01        	cp 1
122+  877D 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  877F
124+  877F CD 8D 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  8782 28 04            jr z,9F
126+  8784 30 02            jr nc,9F
127+  8786 18 02        	jr 8F
128+  8788 1E 02        9 ld e,2
129+  878A C1           8 pop bc
130+  878B E1           10 pop hl
131+  878C C9           5 ret
132+  878D
133+  878D              ; --------------------
134+  878D              ;
135+  878D              ; 25/08/22
136+  878D
137+  878D CD 44 8C     Comprueba_centro call calcula_tercio
138+  8790 67               ld h,a
139+  8791 08           	ex af,af
140+  8792 FE 02        	cp 2
141+  8794 38 07        	jr c,1F
142+  8796 28 05        	jr z,1F
143+  8798 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  879B 18 03        	jr 2F
145+  879D 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87A0 08           2 ex af,af
147+  87A1 A7               and a
148+  87A2 ED 42            sbc hl,bc
149+  87A4 C9               ret
150+  87A5
151+  87A5              ; *********************************************************************************************************************************************************************************************
152+  87A5              ;
153+  87A5              ;   16/8/22
154+  87A5              ;
155+  87A5              ;	Comprueba_limite_vertical
156+  87A5              ;
157+  87A5              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87A5              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87A5              ;
160+  87A5
161+  87A5 3A E6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87A8 A7           	and a
163+  87A9 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87AA
165+  87AA 7D           	ld a,l
166+  87AB E6 1F        	and $1F
167+  87AD 57           	ld d,a
168+  87AE 3A F5 84     	ld a,(Limite_vertical)
169+  87B1 BA           	cp d 											; Límite - Posición.
170+  87B2
171+  87B2 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87B3 CB 47        	bit 0,a
173+  87B5 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87B7
175+  87B7              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87B7
177+  87B7 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87B8 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87BA
180+  87BA               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87BA              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87BA
183+  87BA 3A D5 84         ld a,(Coordenada_X)
184+  87BD 16 0F            ld d,Centro_izquierda
185+  87BF A7               and a
186+  87C0 92               sub d 											 ; Posición - Centro_izquierda.
187+  87C1
188+  87C1 28 21            jr z,3F
189+  87C3 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87C5              ;                                                    ; _salimos sin modificar nada.
191+  87C5 18 0E            jr 2F
192+  87C7
193+  87C7 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87C8 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87CA
196+  87CA              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87CA              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87CA
199+  87CA 3A D5 84         ld a,(Coordenada_X)
200+  87CD 16 10            ld d,Centro_derecha
201+  87CF A7               and a
202+  87D0 92               sub d
203+  87D1
204+  87D1 28 11            jr z,3F
205+  87D3 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87D5              ;                                                    ; _salimos sin modificar nada.
207+  87D5 CB 43        2 bit 0,e
208+  87D7 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87D9 C5           	push bc
210+  87DA CD 6D 88         call Modificaccionne
211+  87DD C1           	pop bc
212+  87DE CD 7E 88         call Inicializacion
213+  87E1 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87E2 08           	ex af,af
215+  87E3 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87E4 C9           3 ret 				 								 ; Salimos de la rutina.
217+  87E5
218+  87E5              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87E5
220+  87E5 C5           4 push bc
221+  87E6 01 C9 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87E9 0A           	ld a,(bc)
223+  87EA 3D           	dec a
224+  87EB 47           	ld b,a 											 ; Columnas-1 en B.
225+  87EC 7D           	ld a,l
226+  87ED 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87EE CB 47        	bit 0,a
228+  87F0 28 03        	jr z,5F
229+  87F2 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87F3 18 2E        	jr 7F
231+  87F5
232+  87F5              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87F5
234+  87F5 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87F6 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87F7 3A E5 84     	ld a,(Ctrl_0)
237+  87FA CB 4F        	bit 1,a
238+  87FC 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  87FE F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  87FF
241+  87FF              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  87FF
243+  87FF 1C               inc e
244+  8800 1D               dec e
245+  8801 20 07            jr nz,12F
246+  8803 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  8804 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  8805 22 CA 84     	ld (Posicion_actual),hl
249+  8808 18 44        13 jr 9F
250+  880A
251+  880A CB 43        12 bit 0,e
252+  880C 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  880E              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  880E C1           	pop bc
255+  880F 18 D3        	jr 3B
256+  8811
257+  8811 80           14 add b
258+  8812 6F               ld l,a
259+  8813 22 CA 84     	ld (Posicion_actual),hl
260+  8816 CD 6D 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8819 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  881B
263+  881B E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  881D 32 E5 84         ld (Ctrl_0),a
265+  8820 F1           	pop af
266+  8821 18 2B        	jr 9F
267+  8823
268+  8823              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  8823
270+  8823 F5           7 push af
271+  8824 3A E5 84     	ld a,(Ctrl_0)
272+  8827 CB 47        	bit 0,a
273+  8829 20 1D        	jr nz,8F
274+  882B F1           	pop af
275+  882C
276+  882C              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  882C
278+  882C 1C           	inc e
279+  882D 1D               dec e
280+  882E 20 07            jr nz,10F
281+  8830
282+  8830 90           	sub b
283+  8831 6F               ld l,a
284+  8832 22 CA 84     	ld (Posicion_actual),hl
285+  8835 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  8837              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  8837 CB 43        10 bit 0,e
288+  8839 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  883B              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  883B C1           	pop bc
291+  883C 18 A6        	jr 3B
292+  883E
293+  883E 90           16 sub b
294+  883F 6F               ld l,a
295+  8840 22 CA 84     	ld (Posicion_actual),hl
296+  8843 CD 6D 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  8846 18 06            jr 9F
298+  8848
299+  8848 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  884A 32 E5 84         ld (Ctrl_0),a
301+  884D F1           	pop af
302+  884E
303+  884E C1           9 pop bc
304+  884F              ;	ld e,0
305+  884F CD 7E 88         call Inicializacion
306+  8852 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  8853 08           	ex af,af
308+  8854 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  8855 18 8D            jr 3B
310+  8857
311+  8857              ; --------------------
312+  8857
313+  8857              Modifica_Pos_actual
314+  8857
315+  8857              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  8857 05               dec B                                           ; Scanlines-1 en B.
317+  8858 CD 0B 8A     1 call PreviousScan
318+  885B 10 FB            djnz 1B
319+  885D 22 CA 84     	ld (Posicion_actual),hl
320+  8860 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  8861 C9           	ret
322+  8862
323+  8862              ; --------------------
324+  8862
325+  8862              Modifica_Pos_actual2
326+  8862
327+  8862              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  8862 05               dec B                                           ; Scanlines-1 en B.
329+  8863 CD F9 89     1 call NextScan
330+  8866 10 FB            djnz 1B
331+  8868 22 CA 84     	ld (Posicion_actual),hl
332+  886B AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  886C C9           	ret
334+  886D
335+  886D              ; --------------------
336+  886D
337+  886D              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  886D              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  886D
340+  886D 08           Modificaccionne ex af,af
341+  886E FE 02            cp 2
342+  8870 F5               push af                                         ; Guardo el resultado de la comparación.
343+  8871 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  8872 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  8873 CC 57 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  8876 DC 57 88         call c,Modifica_Pos_actual
347+  8879 C8           	ret z
348+  887A CD 62 88         call Modifica_Pos_actual2
349+  887D C9               ret
350+  887E
351+  887E              ; *************************************************************************************************************************************************************************************************
352+  887E              ;
353+  887E              ;	13/8/22
354+  887E              ;
355+  887E              ;	Inicializacion
356+  887E              ;
357+  887E              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  887E              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  887E              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  887E              ;
361+  887E              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  887E              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  887E              ;	_ desaparece/aparece.
364+  887E
365+  887E              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  887E              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  887E              ;
368+  887E              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  887E              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  887E              ; 		   [E] ="0"
371+  887E
372+  887E              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  887E
374+  887E CD 44 8C     Inicializacion call calcula_tercio
375+  8881 28 39        	jr z,primit
376+  8883 E6 02        	and 2
377+  8885 20 07        	jr nz,segmit
378+  8887 7D           	ld a,l
379+  8888 FE 7F        	cp $7f
380+  888A 38 30        	jr c,primit
381+  888C 28 2E        	jr z,primit
382+  888E CD 21 89     segmit call column
383+  8891 38 13        	jr c,tercuad
384+  8893 3E 04        cuarcuad ld a,4
385+  8895 32 D4 84     	ld (Cuad_objeto),a
386+  8898 21 20 48     	ld hl,$4820
387+  889B 22 F3 84     	ld (Limite_horizontal),hl
388+  889E 21 F5 84     	ld hl,Limite_vertical
389+  88A1 36 0D        	ld (hl),$0d
390+  88A3 08           	ex af,af
391+  88A4 18 45        	jr 1F
392+  88A6 CD F4 88     tercuad	call Fija_punteros
393+  88A9 3E 03        	ld a,3
394+  88AB 32 D4 84     	ld (Cuad_objeto),a
395+  88AE 21 20 48     	ld hl,$4820
396+  88B1 22 F3 84     	ld (Limite_horizontal),hl
397+  88B4 21 F5 84     	ld hl,Limite_vertical
398+  88B7 36 12        	ld (hl),$12
399+  88B9 08           	ex af,af
400+  88BA 18 2F        	jr 1F
401+  88BC CD 21 89     primit call column
402+  88BF 38 16        	jr c, primcuad
403+  88C1 CD F4 88     segcuad call Fija_punteros
404+  88C4 3E 02        	ld a,2
405+  88C6 32 D4 84     	ld (Cuad_objeto),a
406+  88C9 21 C0 4F     	ld hl,$4fc0
407+  88CC 22 F3 84     	ld (Limite_horizontal),hl
408+  88CF 21 F5 84     	ld hl,Limite_vertical
409+  88D2 36 0D        	ld (hl),$0d
410+  88D4 08           	ex af,af
411+  88D5 18 14        	jr 1F
412+  88D7 CD F4 88     primcuad call Fija_punteros
413+  88DA 3E 01        	ld a,1
414+  88DC 32 D4 84     	ld (Cuad_objeto),a
415+  88DF 21 C0 4F     	ld hl,$4fc0
416+  88E2 22 F3 84     	ld (Limite_horizontal),hl
417+  88E5 21 F5 84     	ld hl,Limite_vertical
418+  88E8 36 12        	ld (hl),$12
419+  88EA 08           	ex af,af
420+  88EB CD B6 8F     1 call Genera_coordenadas
421+  88EE 21 E5 84     	ld hl,Ctrl_0
422+  88F1 CB EE        	set 5,(hl)
423+  88F3 C9           	ret
424+  88F4
425+  88F4              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
426+  88F4              ;
427+  88F4              ;	14/9/22
428+  88F4              ;
429+  88F4              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
430+  88F4              ;
431+  88F4              ;	La rutina fija el puntero de dibujado/borrado.
432+  88F4              ;
433+  88F4              ;	Función:
434+  88F4              ;
435+  88F4              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
436+  88F4
437+  88F4 C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
438+  88F5 D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
439+  88F6 3A E6 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
440+  88F9 A7           	and a
441+  88FA 28 0E        	jr z,1F
442+  88FC 3A CC 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
443+  88FF A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
444+  8900 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
445+  8902 2A F8 84     	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
446+  8905 22 EE 84     	ld (Puntero_objeto),hl
447+  8908 18 14        	jr 3F
448+  890A 3A CC 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
449+  890D A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
450+  890E 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
451+  8910 2A F6 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
452+  8913 22 EE 84     	ld (Puntero_objeto),hl
453+  8916 18 06        	jr 3F
454+  8918 2A EE 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
455+  891B 22 EE 84     	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
456+  891E D1           3 pop de
457+  891F C1           	pop bc
458+  8920 C9           	ret
459+  8921
460+  8921              ; ------------------------------------------------------------------------------------------------------------------
461+  8921
462+  8921              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
463+  8921              ;
464+  8921              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
465+  8921
466+  8921 7D           column ld a,l
467+  8922 E6 1F        	and $1f
468+  8924 FE 10         	cp $10
469+  8926 C9            	ret
470+  8927
471+  8927              ; --------------------------------------------------------------------------------------------------------------------
472+  8927              ;
473+  8927              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
474+  8927              ;
475+  8927              ; 14/12/22
476+  8927              ;
477+  8927              ;	Modifica: A y BC.
478+  8927
479+  8927 3A D4 84     calcula_CColumnass ld a,(Cuad_objeto)
480+  892A E6 01        	and 1
481+  892C 28 17        	jr z,1F
482+  892E
483+  892E              ; Nos encontramos en la parte izquierda de la pantalla
484+  892E
485+  892E 3A D5 84     	ld a,(Coordenada_X)
486+  8931 47           	ld b,a
487+  8932 04           	inc b											; (Coordenada_X)+1 en B.
488+  8933 79           	ld a,c
489+  8934 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
490+  8935 38 08        	jr c,2F
491+  8937 47           	ld b,a
492+  8938 79           	ld a,c
493+  8939 90           	sub b
494+  893A 32 F2 84     	ld (Columnas),a
495+  893D 18 1B        	jr 4F
496+  893F 79           2 ld a,c
497+  8940 32 F2 84     	ld (Columnas),a
498+  8943 18 15        	jr 4F
499+  8945
500+  8945              ; Nos encontramos en la parte derecha de la pantalla.
501+  8945
502+  8945 3A D5 84     1 ld a,(Coordenada_X)
503+  8948 81           	add c
504+  8949 3D           	dec a
505+  894A D6 1F        	sub $1f
506+  894C 38 08        	jr c,3F
507+  894E 47           	ld b,a
508+  894F 79           	ld a,c
509+  8950 90           	sub b
510+  8951 32 F2 84     	ld (Columnas),a
511+  8954 18 04        	jr 4F
512+  8956 79           3 ld a,c
513+  8957 32 F2 84     	ld (Columnas),a
514+  895A D9           4 exx
515+  895B 4F           	ld c,a
516+  895C D9           	exx
517+  895D C9            ret
518+  895E
519+  895E              ; --------------------------------------------------------------------------------------------------------------------
520+  895E              ;
521+  895E              ; 7/1/23
522+  895E              ;
523+  895E              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
524+  895E              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
525+  895E              ;
526+  895E              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
527+  895E              ;	DESTRUYE: HL,B Y A.
528+  895E
529+  895E 3A D4 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
530+  8961 FE 02        	cp 2
531+  8963 38 18        	jr c,1F
532+  8965 28 16        	jr z,1F
533+  8967 E6 01        	and 1
534+  8969 28 0D        	jr z,3F
535+  896B
536+  896B              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
537+  896B
538+  896B CD A7 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
539+  896E
540+  896E 7D           9 ld a,l
541+  896F E6 1F        	and $1f
542+  8971 28 2A        	jr z,7F
543+  8973 2B           	dec hl
544+  8974 10 F8        	djnz 9B
545+  8976 18 25        	jr 7F
546+  8978
547+  8978              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
548+  8978
549+  8978 2A CA 84     3 ld hl,(Posicion_actual)
550+  897B 18 20        	jr 7F
551+  897D
552+  897D 28 14        1 jr z,2F
553+  897F
554+  897F              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
555+  897F
556+  897F CD A7 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
557+  8982 7D           4 ld a,l
558+  8983 E6 1F        	and $1f
559+  8985 28 03        	jr z,6F
560+  8987 2B           	dec hl
561+  8988 10 F8        	djnz 4B
562+  898A 06 0F        6 ld b,15
563+  898C CD 0B 8A     5 call PreviousScan
564+  898F 10 FB        	djnz 5B
565+  8991 18 0A        	jr 7F
566+  8993
567+  8993              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
568+  8993
569+  8993 CD A7 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
570+  8996 06 0F        	ld b,15
571+  8998 CD 0B 8A     8 call PreviousScan
572+  899B 10 FB        	djnz 8B
573+  899D
574+  899D E5           7 push hl
575+  899E DD E1        	pop ix
576+  89A0
577+  89A0 2A EE 84     	ld hl,(Puntero_objeto)
578+  89A3 E5           	push hl
579+  89A4 FD E1        	pop iy
580+  89A6
581+  89A6 C9           	ret
582+  89A7
583+  89A7              ; --------------------------------------------------------------------------------------------------------------------
584+  89A7              ;
585+  89A7              ;	2/1/23
586+  89A7              ;
587+  89A7              ;	Sub-rutina de [Calcula_puntero_de_impresion].
588+  89A7              ;
589+  89A7              ;	Tras esta rutina tenemos:
590+  89A7              ;
591+  89A7              ;	OUTPUT: HL contiene (Posicion_actual).
592+  89A7              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
593+  89A7              ;
594+  89A7              ;	DESTRUYE!!!!! HL,B y A.
595+  89A7
596+  89A7 2A CA 84     Operandos ld hl,(Posicion_actual)
597+  89AA 3A F2 84     	ld a,(Columnas)
598+  89AD 3D           	dec a
599+  89AE 20 01        	jr nz,1F
600+  89B0 3C           	inc a
601+  89B1 47           1 ld b,a
602+  89B2 C9           	ret
603+  89B3
604+  89B3              ; --------------------------------------------------------------------------------------------------------------------
605+  89B3              ;
606+  89B3              ;	3/1/23
607+  89B3              ;
608+  89B3              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
609+  89B3              ;
610+  89B3              ;	Destruye: A,B,HL y DE.
611+  89B3
612+  89B3              Define_rutina_de_impresion
613+  89B3
614+  89B3 3A C9 84     	ld a,(Columns)
615+  89B6 47           	ld b,a
616+  89B7 3A F2 84     	ld a,(Columnas)
617+  89BA B8           	cp b
618+  89BB 20 0D        	jr nz,2f
619+  89BD
620+  89BD              ;	La entidad se imprime entera.
621+  89BD
622+  89BD 21 51 8A     	ld hl, Indice_entidades_completas
623+  89C0 E6 01        	and 1
624+  89C2 28 02        	jr z,1F
625+  89C4
626+  89C4 23           	inc hl
627+  89C5 23           	inc hl
628+  89C6
629+  89C6 CD 20 86     1 call Extrae_address
630+  89C9 C9           	ret		;	ret
631+  89CA
632+  89CA              ;	La entidad no se imprime entera en pantalla.
633+  89CA
634+  89CA 3A D4 84     2 ld a,(Cuad_objeto)
635+  89CD E6 01        	and 1
636+  89CF 28 17        	jr z,3F
637+  89D1
638+  89D1              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
639+  89D1
640+  89D1 21 55 8A     	ld hl, Indice_entidades_incompletas_izquierda
641+  89D4 3A C9 84     4 ld a,(Columns)
642+  89D7 E6 01        	and 1
643+  89D9 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
644+  89DB
645+  89DB 23           	inc hl
646+  89DC 23           	inc hl
647+  89DD
648+  89DD 3A F2 84     	ld a,(Columnas)
649+  89E0 E6 01        	and 1
650+  89E2 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
651+  89E4
652+  89E4 23           	inc hl
653+  89E5 23           	inc hl
654+  89E6
655+  89E6 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
656+  89E8
657+  89E8 21 5B 8A     3 ld hl, Indice_entidades_incompletas_derecha
658+  89EB 18 E7        	jr 4B
659+  89ED
660+  89ED              ; --------------------------------------------------------------------------------------------------------------------
661+  89ED              ;
662+  89ED              ;	Prepara_draw
663+  89ED              ;
664+  89ED              ;	Es una rutina de carga.
665+  89ED              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
666+  89ED              ;
667+  89ED              ;	FUNCIONAMIENTO:
668+  89ED              ;
669+  89ED              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
670+  89ED              ;	- LD (Posicion_actual) del objeto en [HL].
671+  89ED              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
672+  89ED              ;
673+  89ED              ;	DESTRUYE:
674+  89ED              ;
675+  89ED              ;	Logicamente, BC,HL y E quedan destruidos.
676+  89ED
677+  89ED 21 C8 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
678+  89F0 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
679+  89F1 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
680+  89F2 4E           	ld c,(hl)
681+  89F3 2A CA 84     	ld hl,(Posicion_actual)
682+  89F6 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
683+  89F8 C9           	ret
684+  89F9
685+  89F9              ;----------------------------------------------------------------------------------------------------------------
686+  89F9              ;
687+  89F9              ;	5/08/22
688+  89F9              ;
689+  89F9              ;   NextScan.
690+  89F9              ;
691+  89F9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
692+  89F9              ;
693+  89F9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
694+  89F9              ;
695+  89F9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
696+  89F9              ;
697+  89F9              ;       DESTRUIDOS: AF y HL !!!
698+  89F9              ;
699+  89F9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
700+  89F9              ;
701+  89F9
702+  89F9 24           NextScan inc h          ; Incrementamos el scanline.
703+  89FA 7C               ld a,h
704+  89FB E6 07            and 7
705+  89FD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
706+  89FE
707+  89FE CD B6 8F     	call Genera_coordenadas
708+  8A01
709+  8A01 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
710+  8A02 C6 20            add a,$20           ; Vamos a comprobarlo...
711+  8A04 6F               ld l,a
712+  8A05 D8               ret c               ; Salimos si se produce el cambio de tercio.
713+  8A06
714+  8A06 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
715+  8A07 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
716+  8A09 67               ld h,a
717+  8A0A C9               ret
718+  8A0B
719+  8A0B              ;----------------------------------------------------------------------------------------------------------------
720+  8A0B              ;
721+  8A0B              ;	5/08/22
722+  8A0B              ;
723+  8A0B              ;   PreviousScan.
724+  8A0B              ;
725+  8A0B              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
726+  8A0B              ;
727+  8A0B              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
728+  8A0B              ;
729+  8A0B              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
730+  8A0B              ;
731+  8A0B              ;       DESTRUIDOS: AF y HL !!!
732+  8A0B              ;
733+  8A0B              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
734+  8A0B              ;
735+  8A0B
736+  8A0B 7C           PreviousScan ld a,h
737+  8A0C 25               dec h               ; Dec H.
738+  8A0D E6 07            and 7
739+  8A0F C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
740+  8A10
741+  8A10 CD B6 8F     	call Genera_coordenadas
742+  8A13
743+  8A13 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
744+  8A14 D6 20            sub $20             ; Vamos a comprobarlo...
745+  8A16 6F               ld l,a
746+  8A17 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
747+  8A18
748+  8A18 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
749+  8A19 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
750+  8A1B 67               ld h,a
751+  8A1C C9               ret
752+  8A1D
753+  8A1D              ; -----------------------------------------------------------------------------------
754+  8A1D              ;
755+  8A1D              ;	07/01/23
756+  8A1D
757+  8A1D ED 73 02 85  Extrae_foto_registros ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
758+  8A21 31 00 70     	ld sp,Album_de_fotos
759+  8A24 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
760+  8A26 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
761+  8A27 D1           	pop de																	; Dirección de la rutina de impresión en DE.
762+  8A28
763+  8A28 ED 73 04 85  	ld (Stack_2),sp
764+  8A2C ED 7B 02 85  	ld sp,(Stack)
765+  8A30 3E CD        	ld a,$cd
766+  8A32 32 3A 8A     	ld (Imprime),a
767+  8A35 EB           	ex de,hl
768+  8A36 22 3B 8A     	ld (Imprime+1),hl
769+  8A39 EB           	ex de,hl
770+  8A3A
771+  8A3A 00 00 00     Imprime db 0,0,0
772+  8A3D ED 73 02 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
773+  8A41 3A 01 85     	ld a,(Numero_de_malotes)
774+  8A44 3D           	dec a
775+  8A45 28 09        	jr z,1F
776+  8A47 32 01 85      	ld (Numero_de_malotes),a
777+  8A4A ED 7B 04 85  	ld sp,(Stack_2)
778+  8A4E 18 D4        	jr 2B
779+  8A50 C9           1 ret
780+  8A51
781+  8A51
# file closed: Draw_XOR.asm
589   8A51              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A51              ;   índices de Rutinas de impresión.
  2+  8A51
  3+  8A51 61 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A53 8A 8A            defw Pinta_Amadeus_3x2
  5+  8A55
  6+  8A55 D4 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A57 74 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A59 28 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A5B
 10+  8A5B FE 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A5D 02 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A5F B6 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A61
 14+  8A61
 15+  8A61              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A61              ;
 17+  8A61              ;   12/12/22
 18+  8A61              ;
 19+  8A61              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A61              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A61              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A61              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A61              ;
 24+  8A61              ;   Modifica: DE y HL.
 25+  8A61
 26+  8A61 ED 73 02 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A65 FD F9        	ld sp,iy
 28+  8A67 06 10            ld b,16
 29+  8A69 D1           1 pop de
 30+  8A6A 73           	ld (hl),e
 31+  8A6B 23           	inc hl
 32+  8A6C 72           	ld (hl),d
 33+  8A6D 2B           	dec hl
 34+  8A6E
 35+  8A6E 24           	inc h
 36+  8A6F 7C               ld a,h
 37+  8A70 E6 07            and 7
 38+  8A72 20 0A            jr nz,2F
 39+  8A74
 40+  8A74 7D               ld a,l
 41+  8A75 C6 20            add a,$20
 42+  8A77 6F               ld l,a
 43+  8A78 38 04            jr c,2F
 44+  8A7A
 45+  8A7A 7C               ld a,h
 46+  8A7B D6 08            sub 8
 47+  8A7D 67               ld h,a
 48+  8A7E
 49+  8A7E 7C           2 ld a,h
 50+  8A7F FE 58            cp $58
 51+  8A81 28 02            jr z,3F
 52+  8A83 10 E4            djnz 1B
 53+  8A85 ED 7B 02 85  3 ld sp,(Stack)
 54+  8A89 C9           	ret
 55+  8A8A
 56+  8A8A ED 73 02 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A8E FD F9        	ld sp,iy
 58+  8A90 06 08            ld b,8
 59+  8A92 D1           1 pop de
 60+  8A93 73           	ld (hl),e
 61+  8A94 23           	inc hl
 62+  8A95 72           	ld (hl),d
 63+  8A96 23           	inc hl
 64+  8A97 D1           	pop de
 65+  8A98 73           	ld (hl),e
 66+  8A99 2B           	dec hl
 67+  8A9A 2B           	dec hl
 68+  8A9B 24           	inc h
 69+  8A9C 7C               ld a,h
 70+  8A9D E6 07            and 7
 71+  8A9F 20 0A            jr nz,2F
 72+  8AA1 7D               ld a,l
 73+  8AA2 C6 20            add a,$20
 74+  8AA4 6F               ld l,a
 75+  8AA5 38 04            jr c,2F
 76+  8AA7 7C               ld a,h
 77+  8AA8 D6 08            sub 8
 78+  8AAA 67               ld h,a
 79+  8AAB 7C           2 ld a,h
 80+  8AAC FE 58            cp $58
 81+  8AAE 28 1F            jr z,4F
 82+  8AB0 72               ld (hl),d
 83+  8AB1 D1           	pop de
 84+  8AB2 23           	inc hl
 85+  8AB3 73           	ld (hl),e
 86+  8AB4 23           	inc hl
 87+  8AB5 72           	ld (hl),d
 88+  8AB6 2B           	dec hl
 89+  8AB7 2B           	dec hl
 90+  8AB8 24           	inc h
 91+  8AB9 7C               ld a,h
 92+  8ABA E6 07            and 7
 93+  8ABC 20 0A            jr nz,3F
 94+  8ABE 7D               ld a,l
 95+  8ABF C6 20            add a,$20
 96+  8AC1 6F               ld l,a
 97+  8AC2 38 04            jr c,3F
 98+  8AC4 7C               ld a,h
 99+  8AC5 D6 08            sub 8
100+  8AC7 67               ld h,a
101+  8AC8 7C           3 ld a,h
102+  8AC9 FE 58            cp $58
103+  8ACB 28 02            jr z,4F
104+  8ACD 10 C3            djnz 1B
105+  8ACF ED 7B 02 85  4 ld sp,(Stack)
106+  8AD3 C9           	ret
107+  8AD4
108+  8AD4              ; ---------------------------------------------------
109+  8AD4
110+  8AD4 ED 73 02 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AD8 FD F9        	ld sp,iy
112+  8ADA 06 10            ld b,16
113+  8ADC D1           1 pop de
114+  8ADD 7A           	ld a,d
115+  8ADE AE           	xor (hl)
116+  8ADF 77           	ld (hl),a
117+  8AE0 24           	inc h
118+  8AE1 7C               ld a,h
119+  8AE2 E6 07            and 7
120+  8AE4 20 0C            jr nz,2F
121+  8AE6 7D               ld a,l
122+  8AE7 C6 20            add a,$20
123+  8AE9 6F               ld l,a
124+  8AEA 38 06            jr c,2F
125+  8AEC 7C               ld a,h
126+  8AED D6 08            sub 8
127+  8AEF 67               ld h,a
128+  8AF0 18 00            jr 2F
129+  8AF2 7C           2 ld a,h
130+  8AF3 FE 58            cp $58
131+  8AF5 28 02            jr z,3F
132+  8AF7 10 E3            djnz 1B
133+  8AF9 ED 7B 02 85  3 ld sp,(Stack)
134+  8AFD C9           	ret
135+  8AFE
136+  8AFE ED 73 02 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8B02 FD F9        	ld sp,iy
138+  8B04 06 10            ld b,16
139+  8B06 D1           1 pop de
140+  8B07 7B           	ld a,e
141+  8B08 AE           	xor (hl)
142+  8B09 77           	ld (hl),a
143+  8B0A 24           	inc h
144+  8B0B 7C               ld a,h
145+  8B0C E6 07            and 7
146+  8B0E 20 0C            jr nz,2F
147+  8B10 7D               ld a,l
148+  8B11 C6 20            add a,$20
149+  8B13 6F               ld l,a
150+  8B14 38 06            jr c,2F
151+  8B16 7C               ld a,h
152+  8B17 D6 08            sub 8
153+  8B19 67               ld h,a
154+  8B1A 18 00            jr 2F
155+  8B1C 7C           2 ld a,h
156+  8B1D FE 58            cp $58
157+  8B1F 28 02            jr z,3F
158+  8B21 10 E3            djnz 1B
159+  8B23 ED 7B 02 85  3 ld sp,(Stack)
160+  8B27 C9           	ret
161+  8B28
162+  8B28              ; ---------------------------------------------------
163+  8B28
164+  8B28 ED 73 02 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8B2C FD F9        	ld sp,iy
166+  8B2E 06 08            ld b,8
167+  8B30 D1           1 pop de
168+  8B31 7A           	ld a,d
169+  8B32 AE           	xor (hl)
170+  8B33 77           	ld (hl),a
171+  8B34 23           	inc hl
172+  8B35 D1           	pop de
173+  8B36 7B           	ld a,e
174+  8B37 AE           	xor (hl)
175+  8B38 77           	ld (hl),a
176+  8B39 2B           	dec hl
177+  8B3A 24            	inc h
178+  8B3B 7C               ld a,h
179+  8B3C E6 07            and 7
180+  8B3E 20 0A            jr nz,2F
181+  8B40 7D               ld a,l
182+  8B41 C6 20            add a,$20
183+  8B43 6F               ld l,a
184+  8B44 38 04            jr c,2F
185+  8B46 7C               ld a,h
186+  8B47 D6 08            sub 8
187+  8B49 67               ld h,a
188+  8B4A 7C           2 ld a,h
189+  8B4B FE 58            cp $58
190+  8B4D 28 20            jr z,4F
191+  8B4F D1               pop de
192+  8B50 7B           	ld a,e
193+  8B51 AE           	xor (hl)
194+  8B52 77           	ld (hl),a
195+  8B53 23           	inc hl
196+  8B54 7A           	ld a,d
197+  8B55 AE           	xor (hl)
198+  8B56 77           	ld (hl),a
199+  8B57 2B           	dec hl
200+  8B58 24           	inc h
201+  8B59 7C               ld a,h
202+  8B5A E6 07            and 7
203+  8B5C 20 0A            jr nz,3F
204+  8B5E 7D               ld a,l
205+  8B5F C6 20            add a,$20
206+  8B61 6F               ld l,a
207+  8B62 38 04            jr c,3F
208+  8B64 7C               ld a,h
209+  8B65 D6 08            sub 8
210+  8B67 67               ld h,a
211+  8B68 7C           3 ld a,h
212+  8B69 FE 58            cp $58
213+  8B6B 28 02            jr z,4F
214+  8B6D 10 C1            djnz 1B
215+  8B6F ED 7B 02 85  4 ld sp,(Stack)
216+  8B73 C9           	ret
217+  8B74
218+  8B74 ED 73 02 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B78 FD F9        	ld sp,iy
220+  8B7A 06 08            ld b,8
221+  8B7C D1           1 pop de
222+  8B7D D1           	pop de
223+  8B7E 7B           	ld a,e
224+  8B7F AE           	xor (hl)
225+  8B80 77           	ld (hl),a
226+  8B81 24            	inc h
227+  8B82 7C               ld a,h
228+  8B83 E6 07            and 7
229+  8B85 20 0A            jr nz,2F
230+  8B87 7D               ld a,l
231+  8B88 C6 20            add a,$20
232+  8B8A 6F               ld l,a
233+  8B8B 38 04            jr c,2F
234+  8B8D 7C               ld a,h
235+  8B8E D6 08            sub 8
236+  8B90 67               ld h,a
237+  8B91 7C           2 ld a,h
238+  8B92 FE 58            cp $58
239+  8B94 28 1B            jr z,4F
240+  8B96 D1               pop de
241+  8B97 7A           	ld a,d
242+  8B98 AE           	xor (hl)
243+  8B99 77           	ld (hl),a
244+  8B9A 24           	inc h
245+  8B9B 7C               ld a,h
246+  8B9C E6 07            and 7
247+  8B9E 20 0A            jr nz,3F
248+  8BA0 7D               ld a,l
249+  8BA1 C6 20            add a,$20
250+  8BA3 6F               ld l,a
251+  8BA4 38 04            jr c,3F
252+  8BA6 7C               ld a,h
253+  8BA7 D6 08            sub 8
254+  8BA9 67               ld h,a
255+  8BAA 7C           3 ld a,h
256+  8BAB FE 58            cp $58
257+  8BAD 28 02            jr z,4F
258+  8BAF 10 CB            djnz 1B
259+  8BB1 ED 7B 02 85  4 ld sp,(Stack)
260+  8BB5 C9           	ret
261+  8BB6
262+  8BB6 ED 73 02 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8BBA FD F9        	ld sp,iy
264+  8BBC 06 08            ld b,8
265+  8BBE D1           1 pop de
266+  8BBF 7B           	ld a,e
267+  8BC0 AE           	xor (hl)
268+  8BC1 77           	ld (hl),a
269+  8BC2 23           	inc hl
270+  8BC3 7A           	ld a,d
271+  8BC4 AE           	xor (hl)
272+  8BC5 77           	ld (hl),a
273+  8BC6 2B           	dec hl
274+  8BC7 24             	inc h
275+  8BC8 7C               ld a,h
276+  8BC9 E6 07            and 7
277+  8BCB 20 0A            jr nz,2F
278+  8BCD 7D               ld a,l
279+  8BCE C6 20            add a,$20
280+  8BD0 6F               ld l,a
281+  8BD1 38 04            jr c,2F
282+  8BD3 7C               ld a,h
283+  8BD4 D6 08            sub 8
284+  8BD6 67               ld h,a
285+  8BD7 7C           2 ld a,h
286+  8BD8 FE 58            cp $58
287+  8BDA 28 21            jr z,4F
288+  8BDC D1               pop de
289+  8BDD 7A           	ld a,d
290+  8BDE AE           	xor (hl)
291+  8BDF 77           	ld (hl),a
292+  8BE0 23           	inc hl
293+  8BE1 D1               pop de
294+  8BE2 7B           	ld a,e
295+  8BE3 AE           	xor (hl)
296+  8BE4 77           	ld (hl),a
297+  8BE5 2B           	dec hl
298+  8BE6 24           	inc h
299+  8BE7 7C               ld a,h
300+  8BE8 E6 07            and 7
301+  8BEA 20 0A            jr nz,3F
302+  8BEC 7D               ld a,l
303+  8BED C6 20            add a,$20
304+  8BEF 6F               ld l,a
305+  8BF0 38 04            jr c,3F
306+  8BF2 7C               ld a,h
307+  8BF3 D6 08            sub 8
308+  8BF5 67               ld h,a
309+  8BF6 7C           3 ld a,h
310+  8BF7 FE 58            cp $58
311+  8BF9 28 02            jr z,4F
312+  8BFB 10 C1            djnz 1B
313+  8BFD ED 7B 02 85  4 ld sp,(Stack)
314+  8C01 C9           	ret
315+  8C02
316+  8C02 ED 73 02 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8C06 FD F9        	ld sp,iy
318+  8C08 06 08            ld b,8
319+  8C0A D1           1 pop de
320+  8C0B 7B           	ld a,e
321+  8C0C AE           	xor (hl)
322+  8C0D 77           	ld (hl),a
323+  8C0E 24            	inc h
324+  8C0F 7C               ld a,h
325+  8C10 E6 07            and 7
326+  8C12 20 0A            jr nz,2F
327+  8C14 7D               ld a,l
328+  8C15 C6 20            add a,$20
329+  8C17 6F               ld l,a
330+  8C18 38 04            jr c,2F
331+  8C1A 7C               ld a,h
332+  8C1B D6 08            sub 8
333+  8C1D 67               ld h,a
334+  8C1E 7C           2 ld a,h
335+  8C1F FE 58            cp $58
336+  8C21 28 1C            jr z,4F
337+  8C23 D1               pop de
338+  8C24 7A           	ld a,d
339+  8C25 AE           	xor (hl)
340+  8C26 77           	ld (hl),a
341+  8C27 24           	inc h
342+  8C28 7C               ld a,h
343+  8C29 E6 07            and 7
344+  8C2B 20 0A            jr nz,3F
345+  8C2D 7D               ld a,l
346+  8C2E C6 20            add a,$20
347+  8C30 6F               ld l,a
348+  8C31 38 04            jr c,3F
349+  8C33 7C               ld a,h
350+  8C34 D6 08            sub 8
351+  8C36 67               ld h,a
352+  8C37 7C           3 ld a,h
353+  8C38 FE 58            cp $58
354+  8C3A 28 03            jr z,4F
355+  8C3C D1               pop de
356+  8C3D 10 CB            djnz 1B
357+  8C3F ED 7B 02 85  4 ld sp,(Stack)
358+  8C43 C9           	ret
359+  8C44
360+  8C44              ; ---------------------------------------------------
361+  8C44
# file closed: Rutinas_de_impresion_sprites.asm
590   8C44              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C44              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C44              ;
  3+  8C44              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C44              ;
  5+  8C44              ; *****************************************************************************************************************************************************************************************
  6+  8C44              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C44
  8+  8C44 7C           calcula_tercio ld a,h
  9+  8C45 E6 18        	and $18
 10+  8C47 CB 2F        	sra a
 11+  8C49 CB 2F        	sra a
 12+  8C4B CB 2F        	sra a
 13+  8C4D C9           	ret
 14+  8C4E
# file closed: calcula_tercio.asm
591   8C4E              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C4E              ; -----------------------------------------------------------------------------------------
  2+  8C4E              ;
  3+  8C4E              ;   04/11/22
  4+  8C4E              ;
  5+  8C4E              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C4E              ;
  7+  8C4E              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C4E              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C4E              ;
 10+  8C4E              ;   DESTRUYE: HL y A. !!!!!
 11+  8C4E
 12+  8C4E CD 44 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C51 26 58            ld h,$58
 14+  8C53 84               add h
 15+  8C54 67               ld h,a
 16+  8C55 C9               ret
# file closed: Calcula_direccion_atributos.asm
592   8C56              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C56              ; ********** **********
  2+  8C56              ;
  3+  8C56              ;   5/11/22
  4+  8C56              ;
  5+  8C56              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C56              ;
  7+  8C56              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C56              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C56              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C56              ;
 11+  8C56              ;   NO DESTROYERSSSS !!!!!
 12+  8C56
 13+  8C56 E5           Define_atributos push hl
 14+  8C57 C5           	push bc
 15+  8C58 D5           	push de
 16+  8C59
 17+  8C59 CD 4E 8C     	call Calcula_direccion_atributos
 18+  8C5C
 19+  8C5C D9               exx
 20+  8C5D E5               push hl
 21+  8C5E D9               exx
 22+  8C5F D1               pop de
 23+  8C60
 24+  8C60 42               ld b,d
 25+  8C61 7B               ld a,e 									; (Attr) en A.
 26+  8C62
 27+  8C62 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C63 E5            	push hl 								; Guardo dirección de attr.
 29+  8C64
 30+  8C64              ; -----
 31+  8C64
 32+  8C64 77           2 ld (hl),a
 33+  8C65 0D           	dec c 									; Decremento (Columnas).
 34+  8C66 28 03        	jr z,1F
 35+  8C68 23           	inc hl
 36+  8C69 18 F9        	jr 2B
 37+  8C6B
 38+  8C6B E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C6C C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C6D
 41+  8C6D 05           	dec b									; Decremento (Filas).
 42+  8C6E 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C70
 44+  8C70 11 20 00     	ld de,32
 45+  8C73 A7           	and a
 46+  8C74 ED 5A        	adc hl,de
 47+  8C76 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C78
 49+  8C78 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C79 C1           	pop bc
 51+  8C7A E1           	pop hl
 52+  8C7B
 53+  8C7B C9           	ret
 54+  8C7C
# file closed: Define_atributos.asm
593   8C7C              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C7C              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C7C              ;
  3+  8C7C              ;
  4+  8C7C              ;	CLS.
  5+  8C7C              ;
  6+  8C7C              ;	Limpia la pantalla y define sus atributos.
  7+  8C7C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C7C              ;
  9+  8C7C              ;	COLORES: 0 ..... NEGRO
 10+  8C7C              ;    		 1 ..... AZUL
 11+  8C7C              ; 			 2 ..... ROJO
 12+  8C7C              ;			 3 ..... MAGENTA
 13+  8C7C              ; 			 4 ..... VERDE
 14+  8C7C              ; 			 5 ..... CIAN
 15+  8C7C              ;			 6 ..... AMARILLO
 16+  8C7C              ; 			 7 ..... BLANCO
 17+  8C7C              ;
 18+  8C7C              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C7C              ;
 20+  8C7C              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C7C
 22+  8C7C
 23+  8C7C 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C7F 11 01 40     	LD DE,$4001
 25+  8C82 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C85 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C87 ED B0        	LDIR
 28+  8C89 01 FF 02     	LD BC,767
 29+  8C8C 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C8D ED B0        	LDIR
 31+  8C8F C9           	ret
 32+  8C90
# file closed: Cls.asm
594   8C90              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C90              ; ******************************************************************************************************************************************************************************************
  2+  8C90              ;
  3+  8C90              ;   19/10/22
  4+  8C90              ;
  5+  8C90              ;	Mov_down
  6+  8C90              ;
  7+  8C90              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C90              ;
  9+  8C90              ;
 10+  8C90 21 E5 84     Mov_down ld hl,Ctrl_0
 11+  8C93 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C95              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C95              ; 																	; _ en el caso de que no lo haya.
 14+  8C95 3A DA 84     	ld a,(Vel_down)
 15+  8C98 47           	ld b,a
 16+  8C99 2A CA 84         ld hl,(Posicion_actual)
 17+  8C9C CD 44 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C9F E6 02        	and 2
 19+  8CA1 28 0F        	jr z,1F
 20+  8CA3 7C           	ld a,h
 21+  8CA4 FE 57        	cp $57
 22+  8CA6 20 0A        	jr nz,1F
 23+  8CA8 7D           	ld a,l
 24+  8CA9 C6 20        	add $20
 25+  8CAB 30 05        	jr nc,1F
 26+  8CAD
 27+  8CAD              ; ------------------------------
 28+  8CAD CD 9D 8F     	call Reaparece_arriba
 29+  8CB0              ;	call Reinicio
 30+  8CB0              ; ------------------------------
 31+  8CB0
 32+  8CB0 18 08        	jr 3F
 33+  8CB2 CD F9 89     1 call NextScan
 34+  8CB5 22 CA 84     	ld (Posicion_actual),hl
 35+  8CB8 10 E2            djnz 2B
 36+  8CBA C9           3 ret
 37+  8CBB
 38+  8CBB
 39+  8CBB              ; ******************************************************************************************************************************************************************************************
 40+  8CBB              ;
 41+  8CBB              ;   19/10/22
 42+  8CBB              ;
 43+  8CBB              ;	Mov_up
 44+  8CBB              ;
 45+  8CBB              ; 	Mueve el Sprite hacia arriba.
 46+  8CBB              ;
 47+  8CBB              ;
 48+  8CBB 21 E5 84     Mov_up ld hl,Ctrl_0
 49+  8CBE CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 50+  8CC0              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 51+  8CC0              ; 																		; _ en el caso de que no lo haya.
 52+  8CC0 3A D9 84     	ld a,(Vel_up)
 53+  8CC3 47           	ld b,a
 54+  8CC4 2A CA 84     	ld hl,(Posicion_actual)
 55+  8CC7 CD 44 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 56+  8CCA A7           	and a
 57+  8CCB 20 10        	jr nz,1F
 58+  8CCD 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 59+  8CCE FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 60+  8CD0 20 0B            jr nz,1F
 61+  8CD2 7D               ld a,l
 62+  8CD3 D6 20            sub $20
 63+  8CD5 30 06            jr nc,1F
 64+  8CD7 25               dec h
 65+  8CD8
 66+  8CD8              ; -----------------------------
 67+  8CD8 CD 8D 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 68+  8CDB              ;	call Reinicio
 69+  8CDB              ; -----------------------------
 70+  8CDB
 71+  8CDB 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 72+  8CDD CD 0B 8A     1 call PreviousScan
 73+  8CE0 22 CA 84     	ld (Posicion_actual),hl
 74+  8CE3 10 E2            djnz 3B
 75+  8CE5 C9           2   ret
 76+  8CE6
 77+  8CE6              ; ******************************************************************************************************************************************************************************************
 78+  8CE6              ;
 79+  8CE6              ;	19/10/22
 80+  8CE6              ;
 81+  8CE6              ;	Mov_right.
 82+  8CE6              ;
 83+  8CE6              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 84+  8CE6              ;
 85+  8CE6
 86+  8CE6 21 E5 84     Mov_right ld hl,Ctrl_0
 87+  8CE9 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 88+  8CEB              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 89+  8CEB              ; 																	; _ en el caso de que no lo haya.
 90+  8CEB 3A CC 84     	ld a,(CTRL_DESPLZ)
 91+  8CEE A7           	and a
 92+  8CEF 28 0B        	jr z,10F
 93+  8CF1
 94+  8CF1 3A E5 84     	ld a,(Ctrl_0)
 95+  8CF4 CB 7F        	bit 7,a
 96+  8CF6 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 97+  8CF8 21 CC 84     	ld hl,CTRL_DESPLZ
 98+  8CFB 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 99+  8CFC
100+  8CFC 3A E5 84     10 ld a,(Ctrl_0)
101+  8CFF CB 77        	bit 6,a
102+  8D01 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
103+  8D03
104+  8D03 CD 4C 8F     	call Stop_Amadeus_right
105+  8D06 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
106+  8D07 18 4A        	jr 3F
107+  8D09
108+  8D09 3A D5 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
109+  8D0C FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
110+  8D0E 20 43        	jr nz,3F
111+  8D10
112+  8D10 3A CC 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
113+  8D13 A7           	and a 															; _[3] para continuar con el DESPLZ.
114+  8D14 28 3D        	jr z,3F
115+  8D16
116+  8D16              ; ---------- ---------- ----------
117+  8D16
118+  8D16 3A D8 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8D19 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8D1B 28 11        	jr z,1F
121+  8D1D 38 06        	jr c,6F
122+  8D1F FE 04        	cp 4
123+  8D21 28 14        	jr z,7F
124+  8D23 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8D25
126+  8D25              ; ---------- ---------- ----------
127+  8D25              ;
128+  8D25              ; Perfiles de velocidad
129+  8D25              ;
130+  8D25 3A CC 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
131+  8D28 FE FE        	cp $fe
132+  8D2A 20 27        	jr nz,3F
133+  8D2C 18 10        	jr 4F
134+  8D2E 3A CC 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
135+  8D31 FE FD        	cp $fd
136+  8D33 20 1E        	jr nz,3F
137+  8D35 18 07        	jr 4F
138+  8D37 3A CC 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
139+  8D3A FE FB        	cp $fb
140+  8D3C 20 15        	jr nz,3F
141+  8D3E
142+  8D3E              ; ---------- ---------- ----------
143+  8D3E
144+  8D3E CD 7B 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
145+  8D41              ;	call Reinicio
146+  8D41
147+  8D41              ; ---------- ---------- ----------
148+  8D41
149+  8D41 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
150+  8D43 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
151+  8D44 CD 7C 8D     	call DESPLZ_DER
152+  8D47 C1           	pop bc
153+  8D48 10 F9        	djnz 5B
154+  8D4A 2A CA 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
155+  8D4D 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
156+  8D4E 22 CA 84     	ld (Posicion_actual),hl
157+  8D51 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
158+  8D53
159+  8D53              ; ---------- ---------- ----------
160+  8D53
161+  8D53 3A D8 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
162+  8D56 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
163+  8D58 20 1B        	jr nz,8F
164+  8D5A 2A CA 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
165+  8D5D 7D           	ld a,l
166+  8D5E E6 1F        	and $1f
167+  8D60 FE 1F        	cp 31
168+  8D62 20 05        	jr nz,9F
169+  8D64
170+  8D64              ; ---------- ---------- ----------
171+  8D64
172+  8D64 CD 7B 8F     	call Reaparece_izquierda
173+  8D67
174+  8D67              ; ---------- ---------- ----------
175+  8D67
176+  8D67 18 12        	jr 2F
177+  8D69 2A CA 84     9 ld hl,(Posicion_actual)
178+  8D6C 23           	inc hl
179+  8D6D 22 CA 84     	ld (Posicion_actual),hl
180+  8D70 CD B6 8F     	call Genera_coordenadas
181+  8D73 18 06        	jr 2F
182+  8D75 2A CA 84     8 ld hl,(Posicion_actual)
183+  8D78 CD 7C 8D     	call DESPLZ_DER
184+  8D7B C9           2 ret
185+  8D7C
186+  8D7C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
187+  8D7C              ;
188+  8D7C              ;	22/9/22
189+  8D7C              ;
190+  8D7C
191+  8D7C CD 8B 8D     DESPLZ_DER call Desplaza_derecha
192+  8D7F CD A0 8D         call modifica_parametros_1er_DESPLZ_2
193+  8D82 CD C6 8D         call Ciclo_completo
194+  8D85 21 E5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
195+  8D88 CB FE        	set 7,(hl)
196+  8D8A C9           	ret
197+  8D8B
198+  8D8B              ; ******************************************************************************************************************************************************************************************
199+  8D8B              ;	14/9/22
200+  8D8B              ;
201+  8D8B
202+  8D8B 3A D8 84     Desplaza_derecha ld a,(Vel_right)
203+  8D8E 47           	ld b,a
204+  8D8F 2A D0 84     	ld hl,(Puntero_DESPLZ)
205+  8D92 23           1 inc hl
206+  8D93 23           	inc hl
207+  8D94 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
208+  8D96 22 D0 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
209+  8D99 CD 20 86     	call Extrae_address
210+  8D9C 22 F6 84     	ld (Caja_de_DESPLZ),hl
211+  8D9F C9           	ret
212+  8DA0
213+  8DA0              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
214+  8DA0              ;
215+  8DA0              ;	24/7/22
216+  8DA0              ;
217+  8DA0              ;	modifica_parametros_1er_DESPLZ_2
218+  8DA0              ;
219+  8DA0              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
220+  8DA0              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
221+  8DA0              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
222+  8DA0
223+  8DA0 3A CC 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
224+  8DA3 A7           	and a
225+  8DA4 20 1C        	jr nz,1F
226+  8DA6 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
227+  8DA8 32 CC 84         ld (CTRL_DESPLZ),a
228+  8DAB 21 C9 84     	ld hl,Columns
229+  8DAE 34           	inc (hl)
230+  8DAF 3A D4 84     	ld a,(Cuad_objeto)
231+  8DB2 E6 01        	and 1
232+  8DB4 28 0C        	jr z,1F
233+  8DB6 2A CA 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
234+  8DB9 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
235+  8DBA 22 CA 84     	ld (Posicion_actual),hl
236+  8DBD CD 58 8F     	call Inc_CTRL_DESPLZ
237+  8DC0 18 03        	jr 2F
238+  8DC2 CD 58 8F     1 call Inc_CTRL_DESPLZ
239+  8DC5 C9           2 ret
240+  8DC6
241+  8DC6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
242+  8DC6              ;
243+  8DC6              ;	24/7/22
244+  8DC6              ;
245+  8DC6              ;	Ciclo_completo.
246+  8DC6              ;
247+  8DC6              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
248+  8DC6              ;
249+  8DC6              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
250+  8DC6              ; 	Decrementamos (Columns).
251+  8DC6              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
252+  8DC6              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
253+  8DC6
254+  8DC6
255+  8DC6 3A CC 84     Ciclo_completo ld a,(CTRL_DESPLZ)
256+  8DC9 FE FF        	cp $ff
257+  8DCB 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
258+  8DCD 18 25        	jr 3f
259+  8DCF 21 C9 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
260+  8DD2 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
261+  8DD3 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
262+  8DD4 32 CC 84     	ld (CTRL_DESPLZ),a
263+  8DD7 3A D4 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
264+  8DDA E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
265+  8DDC 20 07        	jr nz,2F
266+  8DDE 2A CA 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
267+  8DE1 23           	inc hl
268+  8DE2 22 CA 84     	ld (Posicion_actual),hl
269+  8DE5 2A CE 84     2 ld hl,(Indice_Sprite)
270+  8DE8 22 D0 84     	ld (Puntero_DESPLZ),hl
271+  8DEB 21 00 00     	ld hl,0
272+  8DEE 22 F6 84     	ld (Caja_de_DESPLZ),hl
273+  8DF1 CD B6 8F     	call Genera_coordenadas
274+  8DF4 C9           3 ret
275+  8DF5
276+  8DF5              ; ******************************************************************************************************************************************************************************************
277+  8DF5              ;
278+  8DF5              ;	19/10/22
279+  8DF5              ;
280+  8DF5              ;	Mov_left.
281+  8DF5              ;
282+  8DF5              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
283+  8DF5              ;
284+  8DF5              Mov_left
285+  8DF5
286+  8DF5 21 E5 84     	ld hl,Ctrl_0
287+  8DF8 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
288+  8DFA              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
289+  8DFA              ; 																	; _ en el caso de que no lo haya.
290+  8DFA 3A CC 84     	ld a,(CTRL_DESPLZ)
291+  8DFD A7           	and a
292+  8DFE 20 19        	jr nz,10F
293+  8E00
294+  8E00 2A EE 84     	ld hl,(Puntero_objeto)
295+  8E03 22 D0 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
296+  8E06
297+  8E06 3A E5 84     	ld a,(Ctrl_0)
298+  8E09 CB 77        	bit 6,a
299+  8E0B 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
300+  8E0D
301+  8E0D CD 52 8F     	call Stop_Amadeus_left
302+  8E10 20 5F        	jr nz,3F
303+  8E12
304+  8E12 2A CE 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
305+  8E15 22 D0 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
306+  8E18 C9           	ret
307+  8E19
308+  8E19 3A E5 84     10 	ld a,(Ctrl_0)
309+  8E1C CB 7F        	bit 7,a
310+  8E1E 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
311+  8E20 21 CC 84     	ld hl,CTRL_DESPLZ
312+  8E23 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
313+  8E24
314+  8E24 3A D5 84     11 ld a,(Coordenada_X)
315+  8E27 A7           	and a
316+  8E28 20 47        	jr nz,3F
317+  8E2A 3A CC 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
318+  8E2D A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
319+  8E2E 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
320+  8E30
321+  8E30              ; ---------- ---------- ----------
322+  8E30
323+  8E30 3A D7 84     	ld a,(Vel_left)
324+  8E33 FE 02        	cp 2
325+  8E35 28 0F        	jr z,1F
326+  8E37 38 04        	jr c,6F
327+  8E39 FE 04        	cp 4
328+  8E3B 28 12        	jr z,7F
329+  8E3D
330+  8E3D              ; ---------- ---------- ----------
331+  8E3D
332+  8E3D 3A CC 84     6 ld a,(CTRL_DESPLZ)
333+  8E40 FE F9        	cp $f9
334+  8E42 20 2D        	jr nz,3F
335+  8E44 18 10        	jr 4F
336+  8E46 3A CC 84     1 ld a,(CTRL_DESPLZ)
337+  8E49 FE FA        	cp $fa
338+  8E4B 20 24        	jr nz,3F
339+  8E4D 18 07        	jr 4F
340+  8E4F 3A CC 84     7 ld a,(CTRL_DESPLZ)
341+  8E52 FE FC        	cp $fc
342+  8E54 20 1B        	jr nz,3F
343+  8E56
344+  8E56              ; ---------- ---------- ----------
345+  8E56
346+  8E56 CD 69 8F     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
347+  8E59              ;	call Reinicio
348+  8E59
349+  8E59              ; ---------- ---------- ----------
350+  8E59
351+  8E59 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
352+  8E5B C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
353+  8E5C 2A EE 84     	ld hl,(Puntero_objeto)
354+  8E5F 22 D0 84     	ld (Puntero_DESPLZ),hl
355+  8E62 CD 98 8E     	call DESPLZ_IZQ
356+  8E65 C1           	pop bc
357+  8E66 10 F3        	djnz 5B
358+  8E68 2A CA 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
359+  8E6B 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
360+  8E6C 22 CA 84     	ld (Posicion_actual),hl
361+  8E6F 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8E71
363+  8E71              ; ---------- ---------- ----------
364+  8E71
365+  8E71 3A D7 84     3 ld a,(Vel_left)
366+  8E74 FE 08        	cp 8
367+  8E76 20 19        	jr nz,8F
368+  8E78 2A CA 84     	ld hl,(Posicion_actual)
369+  8E7B 7D           	ld a,l
370+  8E7C E6 1F        	and $1f
371+  8E7E 20 05        	jr nz,9F
372+  8E80
373+  8E80              ; ---------- ---------- ----------
374+  8E80
375+  8E80 CD 69 8F     	call Reaparece_derecha
376+  8E83
377+  8E83              ; ---------- ---------- ----------
378+  8E83
379+  8E83 18 12        	jr 2F
380+  8E85 2A CA 84     9 ld hl,(Posicion_actual)
381+  8E88 2B           	dec hl
382+  8E89 22 CA 84     	ld (Posicion_actual),hl
383+  8E8C CD B6 8F     	call Genera_coordenadas
384+  8E8F 18 06        	jr 2F
385+  8E91 2A CA 84     8 ld hl,(Posicion_actual)
386+  8E94 CD 98 8E     	call DESPLZ_IZQ
387+  8E97 C9           2 ret
388+  8E98
389+  8E98              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
390+  8E98              ;
391+  8E98              ;	22/9/22
392+  8E98
393+  8E98 CD A7 8E     DESPLZ_IZQ call Desplaza_izquierda
394+  8E9B CD BC 8E         call modifica_parametros_1er_DESPLZ
395+  8E9E CD DD 8E     	call Ciclo_completo_2
396+  8EA1 21 E5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
397+  8EA4 CB BE        	res 7,(hl)
398+  8EA6 C9           	ret
399+  8EA7
400+  8EA7 3A D7 84     Desplaza_izquierda ld a,(Vel_left)
401+  8EAA 47           	ld b,a
402+  8EAB 2A D0 84     	ld hl,(Puntero_DESPLZ)
403+  8EAE 2B           1 dec hl
404+  8EAF 2B           	dec hl
405+  8EB0 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
406+  8EB2 22 D0 84     	ld (Puntero_DESPLZ),hl
407+  8EB5 CD 20 86     	call Extrae_address
408+  8EB8 22 F6 84     	ld (Caja_de_DESPLZ),hl
409+  8EBB C9           	ret
410+  8EBC
411+  8EBC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
412+  8EBC              ;
413+  8EBC              ;	modifica_parametros_1er_DESPLZ
414+  8EBC              ;
415+  8EBC              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
416+  8EBC              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
417+  8EBC              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
418+  8EBC
419+  8EBC 3A CC 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
420+  8EBF A7           	and a
421+  8EC0 20 17        	jr nz,1F
422+  8EC2 21 C9 84     	ld hl,Columns
423+  8EC5 34           	inc (hl)
424+  8EC6 3A D4 84     	ld a,(Cuad_objeto)
425+  8EC9 E6 01        	and 1
426+  8ECB 20 0C        	jr nz,1F
427+  8ECD 2A CA 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
428+  8ED0 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
429+  8ED1 22 CA 84     	ld (Posicion_actual),hl
430+  8ED4 CD 3B 8F     	call Dec_CTRL_DESPLZ
431+  8ED7 18 03        	jr 2F
432+  8ED9 CD 3B 8F     1 call Dec_CTRL_DESPLZ
433+  8EDC C9           2 ret
434+  8EDD
435+  8EDD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
436+  8EDD              ;
437+  8EDD 3A CC 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
438+  8EE0 FE F8        	cp $f8
439+  8EE2 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
440+  8EE4 18 19        	jr 3f
441+  8EE6 21 C9 84     1 ld hl,Columns
442+  8EE9 35           	dec (hl)
443+  8EEA AF           	xor a
444+  8EEB 32 CC 84     	ld (CTRL_DESPLZ),a
445+  8EEE 3A D4 84     	ld a,(Cuad_objeto)
446+  8EF1 E6 01        	and 1
447+  8EF3 28 07        	jr z,2F
448+  8EF5 2A CA 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
449+  8EF8 2B           	dec hl
450+  8EF9 22 CA 84     	ld (Posicion_actual),hl
451+  8EFC CD B6 8F     2 call Genera_coordenadas
452+  8EFF C9           3 ret
453+  8F00
454+  8F00              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
455+  8F00
456+  8F00 CD ED 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
457+  8F03              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
458+  8F03              ;																	; Filas * Columnas en DE´.
459+  8F03 3A D4 84     	ld a,(Cuad_objeto)
460+  8F06 FE 02        	cp 2
461+  8F08 38 1A        	jr c,2F
462+  8F0A 28 18        	jr z,2F
463+  8F0C E6 01        	and 1
464+  8F0E 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
465+  8F10              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
466+  8F10              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
467+  8F10 C5           	push bc
468+  8F11 E5           	push hl
469+  8F12 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
470+  8F14 0D           	dec c
471+  8F15 2A F0 84     	ld hl,(Puntero_datas)
472+  8F18 A7           	and a
473+  8F19 ED 4A        	adc hl,bc
474+  8F1B 22 F0 84     	ld (Puntero_datas),hl
475+  8F1E E1           	pop hl
476+  8F1F C1           	pop bc
477+  8F20 18 18        	jr 4F
478+  8F22              1
479+  8F22              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
480+  8F22 18 16        	jr 4F
481+  8F24 E6 01        2 and 1
482+  8F26 28 02        	jr z,3F
483+  8F28              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
484+  8F28 18 10        	jr 4F
485+  8F2A              3
486+  8F2A              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
487+  8F2A C5           	push bc
488+  8F2B E5           	push hl
489+  8F2C 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
490+  8F2E 0D           	dec c
491+  8F2F 2A F0 84     	ld hl,(Puntero_datas)
492+  8F32 A7           	and a
493+  8F33 ED 42        	sbc hl,bc
494+  8F35 22 F0 84     	ld (Puntero_datas),hl
495+  8F38 E1           	pop hl
496+  8F39 C1           	pop bc
497+  8F3A C9           4 ret
498+  8F3B
499+  8F3B              ; ---------- ---------- ---------- ---------- ---------- ----------
500+  8F3B              ;
501+  8F3B              ;	Dec_CTRL_DESPLZ
502+  8F3B              ;
503+  8F3B              ;	Subrutina de [modifica_punteros].
504+  8F3B              ;
505+  8F3B              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
506+  8F3B
507+  8F3B 21 CC 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
508+  8F3E 3A D7 84     	ld a,(Vel_left)
509+  8F41 A7           	and a
510+  8F42 28 06        	jr z,1F
511+  8F44 47           	ld b,a
512+  8F45 35           3 dec (hl)
513+  8F46 10 FD        	djnz 3B
514+  8F48 18 01        	jr 2F
515+  8F4A 35           1 dec (hl)
516+  8F4B C9           2 ret
517+  8F4C
518+  8F4C              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8F4C              ;
520+  8F4C              ;	19/10/22
521+  8F4C              ;
522+  8F4C              ;	(cp 29) para un Amadeus de 3 Columns.
523+  8F4C              ;	(cp 30)   ""  ""    ""     2 Columns.
524+  8F4C
525+  8F4C 3A D5 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
526+  8F4F FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
527+  8F51 C9           	ret
528+  8F52
529+  8F52              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F52              ;
531+  8F52              ;	19/10/22
532+  8F52              ;
533+  8F52              ;	(cp 2) para un Amadeus de 3 Columns.
534+  8F52              ;	(cp 1)   ""  ""    ""     2 Columns.
535+  8F52
536+  8F52 3A D5 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
537+  8F55 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
538+  8F57 C9           	ret
539+  8F58
540+  8F58              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F58              ;
542+  8F58              ;	24/7/22
543+  8F58              ;
544+  8F58              ;	Inc_CTRL_DESPLZ
545+  8F58              ;
546+  8F58              ;	Subrutina de [modifica_punteros].
547+  8F58              ;
548+  8F58              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
549+  8F58
550+  8F58 21 CC 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
551+  8F5B 3A D8 84     	ld a,(Vel_right)
552+  8F5E A7           	and a
553+  8F5F 28 06        	jr z,1F
554+  8F61 47           	ld b,a
555+  8F62 34           3 inc (hl)
556+  8F63 10 FD        	djnz 3B
557+  8F65 18 01        	jr 2F
558+  8F67 34           1 inc (hl)
559+  8F68 C9           2 ret
560+  8F69
561+  8F69              ; ---------- ---------- ---------- ---------- ---------- ----------
562+  8F69
563+  8F69 2A CA 84     Reaparece_derecha ld hl,(Posicion_actual)
564+  8F6C 01 1F 00     	ld bc,31
565+  8F6F A7           	and a
566+  8F70 ED 4A        	adc hl,bc
567+  8F72 22 CA 84     	ld (Posicion_actual),hl
568+  8F75 21 E5 84     	ld hl,Ctrl_0														; $xxx1
569+  8F78 CB C6        	set 0,(hl)
570+  8F7A C9           	ret
571+  8F7B
572+  8F7B              ; ---------- ---------- ---------- ---------- ---------- ----------
573+  8F7B
574+  8F7B 2A CA 84     Reaparece_izquierda ld hl,(Posicion_actual)
575+  8F7E 01 1F 00     	ld bc,31
576+  8F81 A7           	and a
577+  8F82 ED 42        	sbc hl,bc
578+  8F84 22 CA 84     	ld (Posicion_actual),hl 											; $xx1x
579+  8F87 21 E5 84     	ld hl,Ctrl_0
580+  8F8A CB CE        	set 1,(hl)
581+  8F8C C9           	ret
582+  8F8D
583+  8F8D              ; ---------- ---------- ---------- ---------- ---------- ----------
584+  8F8D
585+  8F8D 24           Reaparece_abajo inc h
586+  8F8E 01 E0 17     	ld bc,$17e0
587+  8F91 A7           	and a
588+  8F92 ED 4A        	adc hl,bc
589+  8F94 22 CA 84     	ld (Posicion_actual),hl
590+  8F97 21 E5 84     	ld hl,Ctrl_0
591+  8F9A CB D6        	set 2,(hl)
592+  8F9C C9           	ret
593+  8F9D
594+  8F9D              ; ---------- ---------- ---------- ---------- ---------- ----------
595+  8F9D
596+  8F9D 01 E0 17     Reaparece_arriba ld bc,$17e0
597+  8FA0 A7           	and a
598+  8FA1 ED 42        	sbc hl,bc
599+  8FA3 22 CA 84     	ld (Posicion_actual),hl
600+  8FA6 21 E5 84     	ld hl,Ctrl_0
601+  8FA9 CB DE        	set 3,(hl)
602+  8FAB C9           	ret
603+  8FAC
604+  8FAC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
605+  8FAC
606+  8FAC 2A D2 84     Reinicio ld hl,(Posicion_inicio)
607+  8FAF
608+  8FAF              ;	ld (Posicion_actual),hl
609+  8FAF 21 00 00     	ld hl,0
610+  8FB2 22 CA 84     	ld (Posicion_actual),hl
611+  8FB5
612+  8FB5
613+  8FB5 C9           	ret
# file closed: Direcciones.asm
595   8FB6              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FB6              ;	12/12/22
  2+  8FB6              ;
  3+  8FB6              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FB6              ;	Fila superior "0", Columna izquierda "0".
  5+  8FB6              ;
  6+  8FB6              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FB6              ;
  8+  8FB6              ;	Modifica: A
  9+  8FB6
 10+  8FB6 C5           Genera_coordenadas push bc
 11+  8FB7 E5           	push hl
 12+  8FB8 2A CA 84     	ld hl,(Posicion_actual)
 13+  8FBB 7D           	ld a,l
 14+  8FBC E6 1F        	and $1f
 15+  8FBE 32 D5 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FC1 CD 44 8C     	call calcula_tercio
 17+  8FC4 47           	ld b,a
 18+  8FC5 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FC6 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FC8 7D           	ld a,l
 21+  8FC9 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FCB 28 05        	jr z,2F
 23+  8FCD 0C           1 inc c
 24+  8FCE D6 20        	sub 32
 25+  8FD0 20 FB        	jr nz,1B
 26+  8FD2 0C           2 inc c
 27+  8FD3 04           	inc b
 28+  8FD4 05           	dec b
 29+  8FD5 28 04        	jr z,3F
 30+  8FD7 3E E0        	ld a,$e0
 31+  8FD9 10 F2        	djnz 1B
 32+  8FDB 79           3 ld a,c
 33+  8FDC 3D           	dec a
 34+  8FDD 32 D6 84     	ld (Coordenada_y),a
 35+  8FE0 E1           	pop hl
 36+  8FE1 C1           	pop bc
 37+  8FE2 C9           	ret
# file closed: Genera_coordenadas.asm
596   8FE3              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FE3
  2+  8FE3
  3+  8FE3              ;   11/8/22
  4+  8FE3              ;
  5+  8FE3              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FE3              ;
  7+  8FE3              ;   Mov_obj.asm
  8+  8FE3              ;
  9+  8FE3              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FE3              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FE3              ;
 12+  8FE3              ;   Codificación:
 13+  8FE3              ;
 14+  8FE3              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FE3              ;
 16+  8FE3
 17+  8FE3 02 10 00     Izquierda db 2,%00010000,0
 18+  8FE6 02 20 00     Derecha db 2,%00100000,0
 19+  8FE9 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FED 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FF1 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FF5 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FF9 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FFD 60 42 60 40
 23+  9001 63
 24+  9002 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  9006 22 A3 80 A0
 25+  900A 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  900E 84 A0 83 A0
 26+  9012 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  9016 80 A3 22 A0
 27+  901A 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  901E 40 60 42 60
 28+  9022 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  9026
 30+  9026 E6 8F        Indice_mov_Badsat defw Derecha
 31+  9028 ED 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  902A F5 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  902C E9 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  902E
 35+  902E 3A EB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  9031 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  9032 28 02            jr z,1F
 38+  9034 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  9036
 40+  9036 3A EC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  9039 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  903B 32 EC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  903E              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  903E 2A E9 84         ld hl,(Puntero_mov)
 45+  9041 7E               ld a,(hl)
 46+  9042 32 EB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  9045 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  9046 22 E9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  9049
 50+  9049 3A ED 84     Decoder ld a,(Repetimos_db)
 51+  904C A7               and a
 52+  904D 20 0C            jr nz,12F
 53+  904F 2A E9 84         ld hl,(Puntero_mov)
 54+  9052 7E               ld a,(hl)
 55+  9053 A7               and a
 56+  9054 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  9056
 58+  9056 E6 0F            and $0f
 59+  9058 32 ED 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  905B              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  905B 2A E9 84     12 ld hl,(Puntero_mov)
 62+  905E CB 7E            bit 7,(hl)
 63+  9060 28 03            jr z,2F
 64+  9062 CD 90 8C         call Mov_down
 65+  9065 2A E9 84     2 ld hl, (Puntero_mov)
 66+  9068 CB 76            bit 6,(hl)
 67+  906A 28 03            jr z,3F
 68+  906C CD BB 8C         call Mov_up
 69+  906F 2A E9 84     3 ld hl, (Puntero_mov)
 70+  9072 CB 6E            bit 5,(hl)
 71+  9074 28 03            jr z,4F
 72+  9076 CD E6 8C         call Mov_right
 73+  9079 2A E9 84     4 ld hl, (Puntero_mov)
 74+  907C CB 66            bit 4,(hl)
 75+  907E 28 03            jr z,5F
 76+  9080 CD F5 8D         call Mov_left
 77+  9083
 78+  9083              ; ---------- --------- --------- ---------- ----------
 79+  9083
 80+  9083 3A ED 84     5 ld a,(Repetimos_db)
 81+  9086 A7               and a
 82+  9087 28 07            jr z,6F
 83+  9089 3D               dec a
 84+  908A 32 ED 84         ld (Repetimos_db),a
 85+  908D 28 01            jr z,6f
 86+  908F C9           11 ret
 87+  9090 21 EB 84     6 ld hl,Contador_db_mov
 88+  9093 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9094 2A E9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9097 23               inc hl
 91+  9098 22 E9 84         ld (Puntero_mov),hl
 92+  909B 18 F2            jr 11B
 93+  909D 2A E7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  90A0 3A EC 84         ld a,(Incrementa_puntero)
 95+  90A3 47               ld b,a
 96+  90A4 23           8 inc hl
 97+  90A5 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  90A7 5E               ld e,(hl)
 99+  90A8 23               inc hl
100+  90A9 56               ld d,(hl)
101+  90AA EB               ex de,hl
102+  90AB 22 E9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  90AE 18 DF            jr 11B
104+  90B0
105+  90B0              ; ---------- --------- --------- ---------- ----------
106+  90B0              ;
107+  90B0              ;   11/8/22
108+  90B0              ;
109+  90B0              ;   Prepara_Puntero_mov
110+  90B0
111+  90B0 E5           Prepara_Puntero_mov push hl
112+  90B1 D5               push de
113+  90B2 2A E7 84         ld hl,(Puntero_indice_mov)
114+  90B5 5E               ld e,(hl)
115+  90B6 23               inc hl
116+  90B7 56               ld d,(hl)
117+  90B8 EB               ex de,hl
118+  90B9 22 E9 84         ld (Puntero_mov),hl
119+  90BC D1               pop de
120+  90BD E1               pop hl
121+  90BE C9               ret
122+  90BF
123+  90BF              ; ---------- --------- --------- ---------- ----------
124+  90BF              ;
125+  90BF              ;   11/8/22
126+  90BF              ;
127+  90BF              ;   Reinicia_el_movimiento
128+  90BF
129+  90BF CD B0 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  90C2 AF               xor a
131+  90C3 32 EB 84         ld (Contador_db_mov),a
132+  90C6 32 EC 84         ld (Incrementa_puntero),a
133+  90C9 C3 2E 90         jp Movimiento
134+  90CC
135+  90CC              ; ---------- --------- --------- ---------- ----------
136+  90CC
137+  90CC
138+  90CC
139+  90CC
140+  90CC
141+  90CC
142+  90CC
143+  90CC
144+  90CC
145+  90CC
146+  90CC
147+  90CC
148+  90CC
149+  90CC
150+  90CC
151+  90CC
152+  90CC
153+  90CC
# file closed: Patrones_de_mov.asm
597   90CC              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  90CC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  90CC              ;
  3+  90CC              ;	3/1/23
  4+  90CC              ;
  5+  90CC              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  90CC
  7+  90CC              ;	ADC HL,SP	LD (addr),SP
  8+  90CC              ;	ADD HL,SP	LD SP,(addr)
  9+  90CC              ;	ADD IX,SP	LD SP,nn
 10+  90CC              ; 	ADD IY,SP	LD SP,HL
 11+  90CC              ;				LD SP,IX
 12+  90CC              ;	DEC SP		LD SP,IY
 13+  90CC
 14+  90CC              ;	EX (SP),HL
 15+  90CC              ;	EX (SP),IX
 16+  90CC              ;	EX (SP),IY
 17+  90CC
 18+  90CC              ;	INC SP
 19+  90CC
 20+  90CC
 21+  90CC                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 02 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 06 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 06 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 02 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
598   7FC0
599   7FC0              	SAVESNA "Pruebas.sna", START
600   7FC0
601   7FC0
602   7FC0
# file closed: Banco_de_pruebas.asm
