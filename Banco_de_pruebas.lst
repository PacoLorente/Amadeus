# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 C6 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 C8 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B CA 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF CC 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 C6 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 51 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 97 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 0A 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 39 86      	call Inicia_Puntero_objeto
210   853A CD EE 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 56 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 0A 86     	call Inicia_punteros_de_entidades
219   8549 CD 85 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD EE 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ; ----------------------------------------------------------------------
243   8560
244   8560 21 00 70     	ld hl,Album_de_fotos
245   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8566 3A 0E 85         ld a,(Numero_de_entidades)
248   8569 47               ld b,a
249   856A
250   856A C5           2 push bc
251   856B
252   856B CD 99 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   856E 3A F5 84      	ld a,(Ctrl_0)
254   8571 CB 67        	bit 4,a
255   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
256   8575
257   8575              ; ---------
258   8575
259   8575 CD CD 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
260   8578 21 F5 84     	ld hl,Ctrl_0
261   857B CB A6            res 4,(hl)
262   857D
263   857D CD 56 86     1 call Store_Restore_entidades
264   8580
265   8580 C1           	pop bc
266   8581 10 E7        	djnz 2B
267   8583
268   8583 CD 0A 86     	call Inicia_punteros_de_entidades
269   8586 CD 85 86     	call Restore_Primera_entidad
270   8589
271   8589 CD 20 86     	call Calcula_numero_de_malotes
272   858C
273   858C 18 FE        	jr $
274   858E
275   858E 21 00 70     	ld hl,Album_de_fotos
276   8591 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
277   8594              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
278   8594 3E 00        	ld a,0
279   8596 D3 FE        	out ($fe),a
280   8598
281   8598 C9           	ret
282   8599
283   8599              ; --------------------------------------------------------------------------------------------------------------
284   8599              ;
285   8599              Mov_obj
286   8599
287   8599              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
288   8599
289   8599              ; 	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
290   8599 CD DB 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
291   859C
292   859C 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
293   859E 32 F6 84     	ld (Obj_dibujado),a
294   85A1
295   85A1              ; Movemos Amadeus o enemigos...
296   85A1
297   85A1 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
298   85A4 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
299   85A6 C4 AB 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
300   85A9
301   85A9 3A F5 84     	ld a,(Ctrl_0)
302   85AC CB 77        	bit 6,a
303   85AE CC CE 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
304   85B1
305   85B1 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
306   85B4 CB 67        	bit 4,a
307   85B6 C8           	ret z
308   85B7
309   85B7              ; ---------
310   85B7
311   85B7 CD DB 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
312   85BA CD F2 85         call Repone_borrar
313   85BD              ;	call Draw											; Preparamos las variables para borrar.
314   85BD
315   85BD CD C4 89     	call Prepara_draw
316   85C0 CD FE 88     	call calcula_CColumnass
317   85C3 CD 35 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
318   85C6 CD 8A 89     	call Define_rutina_de_impresion
319   85C9 CD A0 7F     	call Guarda_foto_registros
320   85CC C9           	ret
321   85CD
322   85CD              ; --------------------------------------------------------------------------------------------------------------
323   85CD              ;
324   85CD              Borra_Pinta_obj
325   85CD
326   85CD AF           	xor a
327   85CE 32 F6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
328   85D1 CD FE 85     	call Repone_pintar
329   85D4 CD EE 86     	call Draw
330   85D7 CD A0 7F     	call Guarda_foto_registros
331   85DA C9           	ret
332   85DB
333   85DB              ; --------------------------------------------------------------------------------------------------------------
334   85DB
335   85DB 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
336   85DE 3A F6 84     	ld a,(Obj_dibujado)
337   85E1 A7           	and a
338   85E2 28 05        	jr z,1F
339   85E4 11 EE 84     	ld de,Variables_de_pintado
340   85E7 18 03        	jr 2F
341   85E9 11 E7 84     1 ld de,Variables_de_borrado
342   85EC 01 07 00     2 ld bc,7
343   85EF ED B0        	ldir
344   85F1 C9           	ret
345   85F2
346   85F2 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
347   85F5 11 D2 84     	ld de,Filas
348   85F8 01 07 00     	ld bc,7
349   85FB ED B0        	ldir
350   85FD C9           	ret
351   85FE
352   85FE 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
353   8601 11 D2 84     	ld de,Filas
354   8604 01 07 00     	ld bc,7
355   8607 ED B0        	ldir
356   8609 C9           	ret
357   860A
358   860A              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
359   860A              ;	ld (Caja_de_BORRADO),hl
360   860A              ;	ret
361   860A
362   860A              ; *************************************************************************************************************************************************************
363   860A              ;
364   860A              ; 8/1/23
365   860A              ;
366   860A              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
367   860A              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
368   860A              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
369   860A
370   860A              ; Destruye HL y DE !!!!!
371   860A
372   860A 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
373   860D CD 33 86         call Extrae_address
374   8610 22 08 85         ld (Puntero_store_entidades),hl
375   8613 21 C2 83     	ld hl,Indice_de_entidades+2
376   8616 22 0C 85     	ld (Indice_restore),hl
377   8619 CD 33 86     	call Extrae_address
378   861C 22 0A 85     	ld (Puntero_restore_entidades),hl
379   861F C9               ret
380   8620
381   8620              ; -------------------------------------------------------------------------------------------------------------
382   8620              ;
383   8620              ; 7/1/23
384   8620              ;
385   8620
386   8620 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
387   8623 AF           	xor a
388   8624 67           	ld h,a
389   8625 7D           	ld a,l
390   8626 D6 06        1 sub 6
391   8628 28 03        	jr z,2F
392   862A 24           	inc h
393   862B 18 F9        	jr 1B
394   862D 24           2 inc h
395   862E 7C           	ld a,h
396   862F 32 0F 85     	ld (Numero_de_malotes),a
397   8632 C9           	ret
398   8633
399   8633              ; *************************************************************************************************************************************************************
400   8633              ;
401   8633              ; 20/10/22
402   8633              ;
403   8633              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
404   8633              ;
405   8633              ; Destruye el puntero y DE !!!!!
406   8633
407   8633 5E           Extrae_address ld e,(hl)
408   8634 23           	inc hl
409   8635 56           	ld d,(hl)
410   8636 2B           	dec hl
411   8637 EB           	ex de,hl
412   8638 C9           	ret
413   8639
414   8639              ; *************************************************************************************************************************************************************
415   8639              ;
416   8639              ;	21/9/22
417   8639              ;
418   8639              ;   Destruye HL y BC !!!!!,
419   8639
420   8639 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
421   863C 22 DC 84     	ld (Puntero_DESPLZ),hl
422   863F CD 33 86     	call Extrae_address
423   8642 22 D6 84     	ld (Puntero_objeto),hl
424   8645
425   8645              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
426   8645
427   8645 21 10 83     	ld hl,Amadeus
428   8648 ED 4B D6 84  	ld bc,(Puntero_objeto)
429   864C B7 ED 42     	sub hl,bc
430   864F C0           	ret nz
431   8650
432   8650 21 F5 84     	ld hl,Ctrl_0
433   8653 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
434   8655
435   8655 C9            	ret 												; _de nuestra nave en los extremos.
436   8656
437   8656              ; *************************************************************************************************************************************************************
438   8656              ;
439   8656              ;	8/1/23
440   8656              ;
441   8656              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
442   8656              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
443   8656
444   8656              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
445   8656              ;	_de la 2ª y 3ª entidad respectivamente.
446   8656
447   8656
448   8656
449   8656              Store_Restore_entidades
450   8656
451   8656 E5           	push hl
452   8657 D5           	push de
453   8658 C5            	push bc
454   8659
455   8659              ;	STORE !!!!!
456   8659
457   8659 21 D2 84     	ld hl,Filas
458   865C ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
459   8660 01 36 00     	ld bc,54
460   8663 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
461   8665
462   8665              ;	Incrementa STORE y ejecuta RESTORE !!!!!
463   8665
464   8665 2A 0A 85     	ld hl,(Puntero_restore_entidades)
465   8668 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
466   866B 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
467   866E 01 36 00     	ld bc,54
468   8671 ED B0        	ldir
469   8673
470   8673              ;	Incrementa RESTORE !!!!!
471   8673
472   8673 2A 0C 85         ld hl,(Indice_restore)
473   8676 23           	inc hl
474   8677 23           	inc hl
475   8678 22 0C 85     	ld (Indice_restore),hl
476   867B CD 33 86         call Extrae_address
477   867E 22 0A 85         ld (Puntero_restore_entidades),hl
478   8681
479   8681 C1           	pop bc
480   8682 D1           	pop de
481   8683 E1           	pop hl
482   8684
483   8684 C9           	ret
484   8685
485   8685              ; **************************************************************************************************
486   8685              ;
487   8685              ;	29/10/22
488   8685              ;
489   8685              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
490   8685
491   8685 E5           Restore_Primera_entidad push hl
492   8686 D5           	push de
493   8687 C5            	push bc
494   8688 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
495   868B 11 D2 84     	ld de,Filas
496   868E 01 36 00     	ld bc,54
497   8691 ED B0        	ldir
498   8693 C1           	pop bc
499   8694 D1           	pop de
500   8695 E1           	pop hl
501   8696 C9           	ret
502   8697
503   8697              ; *************************************************************************************************************************************************************
504   8697              ;
505   8697              ; Teclado.
506   8697
507   8697 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
508   8699 DB FE        	in a,($fe)
509   869B E6 01        	and $01
510   869D 28 02        	jr z,1f
511   869F 18 F6        	jr Pulsa_ENTER
512   86A1 C9           1 ret
513   86A2
514   86A2              ; **************************************************************************************************
515   86A2              ;
516   86A2              ; Temporización.
517   86A2
518   86A2              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
519   86A2              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
520   86A2              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
521   86A2              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
522   86A2
523   86A2              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
524   86A2              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
525   86A2              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
526   86A2
527   86A2              ; A partir de $4f61 no hace falta DELAY.
528   86A2
529   86A2              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
530   86A2
531   86A2 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
532   86A5 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
533   86A6 78           	LD A,B
534   86A7 A7           	AND A
535   86A8 20 FB        	JR NZ,wait
536   86AA C9           	RET
537   86AB
538   86AB              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
539   86AB              ;
540   86AB              ;	21/4/22
541   86AB
542   86AB              Movimiento_Amadeus
543   86AB
544   86AB 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
545   86AD DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
546   86AF E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
547   86B1 CC D0 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
548   86B4 3E F7        	ld a,$f7
549   86B6 DB FE        	in a,($fe)
550   86B8 E6 01        	and $01
551   86BA C8           	ret z
552   86BB 3E F7        	ld a,$f7
553   86BD DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
554   86BF E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
555   86C1 CC C1 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
556   86C4 C9               ret
557   86C5
558   86C5              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
559   86C5
560   86C5              ; Pinta indicadores de FILAS. ------------------------------------------------------
561   86C5
562   86C5 21 10 40     Pinta_FILAS ld hl,$4010
563   86C8              ;	ld b,9
564   86C8              ;2 push hl
565   86C8              ;	push bc
566   86C8 06 BF        	ld b,$bf
567   86CA 36 80        1 ld (hl),%10000000
568   86CC CD D0 89     	call NextScan
569   86CF 10 F9        	djnz 1B
570   86D1              ;	pop bc
571   86D1              ;	pop hl
572   86D1              ;	inc l
573   86D1              ;	djnz 2B
574   86D1
575   86D1 06 03        	ld b,3
576   86D3 21 00 47         ld hl,$4700
577   86D6 CD DC 86     3 call Bucle_1
578   86D9 10 FB            djnz 3B
579   86DB C9               ret
580   86DC
581   86DC C5           Bucle_1 push bc
582   86DD E5                   push hl
583   86DE D1                   pop de
584   86DF 13                   inc de
585   86E0 01 FF 00             ld bc,255
586   86E3 36 FF                ld (hl),255
587   86E5 ED B0                ldir
588   86E7 23                   inc hl
589   86E8 3E 07                ld a,7
590   86EA 84                   add a,h
591   86EB 67                   ld h,a
592   86EC C1                   pop bc
593   86ED C9                   ret
594   86EE
595   86EE              ; ---------------------------------------------------------------
596   86EE
597   86EE              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86EE              ; ******************************************************************************************************************************************************************************************
  2+  86EE              ;
  3+  86EE              ; 17/08/22
  4+  86EE              ;
  5+  86EE              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86EE
  7+  86EE CD C4 89     Draw call Prepara_draw
  8+  86F1 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86F2 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86F3 28 05        	jr z,2F
 11+  86F5 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F8 18 0C        	jr 1F
 13+  86FA 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86FD 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8700 CD 8B 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8703              ;													; _la esquina superior izquierda de la pantalla.
 17+  8703 CD 50 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8706 3A F5 84     1 ld a,(Ctrl_0)
 19+  8709 CB 6F        	bit 5,a
 20+  870B 20 00        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  870D
 22+  870D              ;	call Comprueba_limite_horizontal
 23+  870D              ;	call Comprueba_limite_vertical
 24+  870D
 25+  870D              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  870D
 27+  870D CD FE 88     3 call calcula_CColumnass
 28+  8710 CD 35 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8713 CD 8A 89     	call Define_rutina_de_impresion
 30+  8716
 31+  8716 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8719 CB AF        	res 5,a											; _a ser de utilidad.
 33+  871B 32 F5 84     	ld (Ctrl_0),a
 34+  871E
 35+  871E C9           	ret
 36+  871F
 37+  871F              ; *******************************************************************************************************************************************************************************************
 38+  871F              ;	23/8/22
 39+  871F              ;
 40+  871F              ; 	Comprueba_limite_horizontal.
 41+  871F              ;
 42+  871F
 43+  871F 3A F6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  8722 A7           	and a
 45+  8723 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  8724
 47+  8724 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8727 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8729 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  872B
 51+  872B E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  872D 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  8730 18 09            jr 6F
 54+  8732 CB 5F        1 bit 3,a
 55+  8734 28 0D            jr z,2F
 56+  8736 E6 F7            and $f7
 57+  8738 32 F5 84         ld (Ctrl_0),a
 58+  873B CD 8B 88     6 call Inicializacion
 59+  873E F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  873F 08           	ex af,af
 61+  8740 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  8741 18 56            jr 5F
 63+  8743 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  8744
 65+  8744              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  8744              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  8744
 68+  8744 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8745 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8748 CD 19 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  874B 67           	ld h,a
 72+  874C EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  874D CD 19 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  8750 67           	ld h,a
 75+  8751 A7           	and a
 76+  8752 ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  8754
 78+  8754 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8755 FE 02        	cp 2
 80+  8757 38 1C        	jr c,3F
 81+  8759 28 1A        	jr z,3F
 82+  875B
 83+  875B 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  875C 28 21            jr z,7F
 85+  875E 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  8760              ;	ld e,0
 87+  8760 E1           	pop hl
 88+  8761
 89+  8761              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8761              ; _para indicar con E="2" en caso necesario.
 91+  8761
 92+  8761 E5               push hl
 93+  8762 C5               push bc
 94+  8763
 95+  8763 CD 19 8C     	call calcula_tercio
 96+  8766 FE 01        	cp 1
 97+  8768 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  876A
 99+  876A CD 9A 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  876D 28 26            jr z,9F
101+  876F 38 24            jr c,9F
102+  8771 1E 00        11 ld e,0
103+  8773 18 22            jr 8F
104+  8775
105+  8775 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8776 28 07        	jr z, 7F
107+  8778 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  877A 1E 00         	ld e,0
109+  877C E1           	pop hl
110+  877D 18 04        	jr 4F
111+  877F 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  8781 18 15            jr 10F
113+  8783
114+  8783              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  8783              ; _para indicar con E="2" en caso necesario.
116+  8783
117+  8783 E5           4 push hl
118+  8784 C5               push bc
119+  8785
120+  8785 CD 19 8C     	call calcula_tercio
121+  8788 FE 01        	cp 1
122+  878A 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  878C
124+  878C CD 9A 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  878F 28 04            jr z,9F
126+  8791 30 02            jr nc,9F
127+  8793 18 02        	jr 8F
128+  8795 1E 02        9 ld e,2
129+  8797 C1           8 pop bc
130+  8798 E1           10 pop hl
131+  8799 C9           5 ret
132+  879A
133+  879A              ; --------------------
134+  879A              ;
135+  879A              ; 25/08/22
136+  879A
137+  879A CD 19 8C     Comprueba_centro call calcula_tercio
138+  879D 67               ld h,a
139+  879E 08           	ex af,af
140+  879F FE 02        	cp 2
141+  87A1 38 07        	jr c,1F
142+  87A3 28 05        	jr z,1F
143+  87A5 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  87A8 18 03        	jr 2F
145+  87AA 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87AD 08           2 ex af,af
147+  87AE A7               and a
148+  87AF ED 42            sbc hl,bc
149+  87B1 C9               ret
150+  87B2
151+  87B2              ; *********************************************************************************************************************************************************************************************
152+  87B2              ;
153+  87B2              ;   16/8/22
154+  87B2              ;
155+  87B2              ;	Comprueba_limite_vertical
156+  87B2              ;
157+  87B2              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87B2              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87B2              ;
160+  87B2
161+  87B2 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87B5 A7           	and a
163+  87B6 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87B7
165+  87B7 7D           	ld a,l
166+  87B8 E6 1F        	and $1F
167+  87BA 57           	ld d,a
168+  87BB 3A 03 85     	ld a,(Limite_vertical)
169+  87BE BA           	cp d 											; Límite - Posición.
170+  87BF
171+  87BF 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87C0 CB 47        	bit 0,a
173+  87C2 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87C4
175+  87C4              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87C4
177+  87C4 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87C5 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87C7
180+  87C7               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87C7              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87C7
183+  87C7 3A E1 84         ld a,(Coordenada_X)
184+  87CA 16 0F            ld d,Centro_izquierda
185+  87CC A7               and a
186+  87CD 92               sub d 											 ; Posición - Centro_izquierda.
187+  87CE
188+  87CE 28 21            jr z,3F
189+  87D0 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87D2              ;                                                    ; _salimos sin modificar nada.
191+  87D2 18 0E            jr 2F
192+  87D4
193+  87D4 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87D5 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87D7
196+  87D7              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87D7              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87D7
199+  87D7 3A E1 84         ld a,(Coordenada_X)
200+  87DA 16 10            ld d,Centro_derecha
201+  87DC A7               and a
202+  87DD 92               sub d
203+  87DE
204+  87DE 28 11            jr z,3F
205+  87E0 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87E2              ;                                                    ; _salimos sin modificar nada.
207+  87E2 CB 43        2 bit 0,e
208+  87E4 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87E6 C5           	push bc
210+  87E7 CD 7A 88         call Modificaccionne
211+  87EA C1           	pop bc
212+  87EB CD 8B 88         call Inicializacion
213+  87EE F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87EF 08           	ex af,af
215+  87F0 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87F1 C9           3 ret 				 								 ; Salimos de la rutina.
217+  87F2
218+  87F2              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87F2
220+  87F2 C5           4 push bc
221+  87F3 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87F6 0A           	ld a,(bc)
223+  87F7 3D           	dec a
224+  87F8 47           	ld b,a 											 ; Columnas-1 en B.
225+  87F9 7D           	ld a,l
226+  87FA 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87FB CB 47        	bit 0,a
228+  87FD 28 03        	jr z,5F
229+  87FF 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  8800 18 2E        	jr 7F
231+  8802
232+  8802              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  8802
234+  8802 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  8803 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  8804 3A F5 84     	ld a,(Ctrl_0)
237+  8807 CB 4F        	bit 1,a
238+  8809 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  880B F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  880C
241+  880C              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  880C
243+  880C 1C               inc e
244+  880D 1D               dec e
245+  880E 20 07            jr nz,12F
246+  8810 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  8811 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  8812 22 D4 84     	ld (Posicion_actual),hl
249+  8815 18 44        13 jr 9F
250+  8817
251+  8817 CB 43        12 bit 0,e
252+  8819 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  881B              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  881B C1           	pop bc
255+  881C 18 D3        	jr 3B
256+  881E
257+  881E 80           14 add b
258+  881F 6F               ld l,a
259+  8820 22 D4 84     	ld (Posicion_actual),hl
260+  8823 CD 7A 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8826 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8828
263+  8828 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  882A 32 F5 84         ld (Ctrl_0),a
265+  882D F1           	pop af
266+  882E 18 2B        	jr 9F
267+  8830
268+  8830              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  8830
270+  8830 F5           7 push af
271+  8831 3A F5 84     	ld a,(Ctrl_0)
272+  8834 CB 47        	bit 0,a
273+  8836 20 1D        	jr nz,8F
274+  8838 F1           	pop af
275+  8839
276+  8839              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8839
278+  8839 1C           	inc e
279+  883A 1D               dec e
280+  883B 20 07            jr nz,10F
281+  883D
282+  883D 90           	sub b
283+  883E 6F               ld l,a
284+  883F 22 D4 84     	ld (Posicion_actual),hl
285+  8842 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  8844              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  8844 CB 43        10 bit 0,e
288+  8846 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8848              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8848 C1           	pop bc
291+  8849 18 A6        	jr 3B
292+  884B
293+  884B 90           16 sub b
294+  884C 6F               ld l,a
295+  884D 22 D4 84     	ld (Posicion_actual),hl
296+  8850 CD 7A 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  8853 18 06            jr 9F
298+  8855
299+  8855 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8857 32 F5 84         ld (Ctrl_0),a
301+  885A F1           	pop af
302+  885B
303+  885B C1           9 pop bc
304+  885C              ;	ld e,0
305+  885C CD 8B 88         call Inicializacion
306+  885F F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  8860 08           	ex af,af
308+  8861 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  8862 18 8D            jr 3B
310+  8864
311+  8864              ; --------------------
312+  8864
313+  8864              Modifica_Pos_actual
314+  8864
315+  8864              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  8864 05               dec B                                           ; Scanlines-1 en B.
317+  8865 CD DF 89     1 call PreviousScan
318+  8868 10 FB            djnz 1B
319+  886A 22 D4 84     	ld (Posicion_actual),hl
320+  886D AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  886E C9           	ret
322+  886F
323+  886F              ; --------------------
324+  886F
325+  886F              Modifica_Pos_actual2
326+  886F
327+  886F              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  886F 05               dec B                                           ; Scanlines-1 en B.
329+  8870 CD D0 89     1 call NextScan
330+  8873 10 FB            djnz 1B
331+  8875 22 D4 84     	ld (Posicion_actual),hl
332+  8878 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8879 C9           	ret
334+  887A
335+  887A              ; --------------------
336+  887A
337+  887A              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  887A              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  887A
340+  887A 08           Modificaccionne ex af,af
341+  887B FE 02            cp 2
342+  887D F5               push af                                         ; Guardo el resultado de la comparación.
343+  887E 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  887F F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  8880 CC 64 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  8883 DC 64 88         call c,Modifica_Pos_actual
347+  8886 C8           	ret z
348+  8887 CD 6F 88         call Modifica_Pos_actual2
349+  888A C9               ret
350+  888B
351+  888B              ; *************************************************************************************************************************************************************************************************
352+  888B              ;
353+  888B              ;	13/8/22
354+  888B              ;
355+  888B              ;	Inicializacion
356+  888B              ;
357+  888B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  888B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  888B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  888B              ;
361+  888B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  888B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  888B              ;	_ desaparece/aparece.
364+  888B
365+  888B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  888B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  888B              ;
368+  888B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  888B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  888B              ; 		   [E] ="0"
371+  888B
372+  888B              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  888B
374+  888B CD 19 8C     Inicializacion call calcula_tercio
375+  888E 28 36        	jr z,primit
376+  8890 E6 02        	and 2
377+  8892 20 07        	jr nz,segmit
378+  8894 7D           	ld a,l
379+  8895 FE 7F        	cp $7f
380+  8897 38 2D        	jr c,primit
381+  8899 28 2B        	jr z,primit
382+  889B CD F8 88     segmit call column
383+  889E 38 13        	jr c,tercuad
384+  88A0 3E 04        cuarcuad ld a,4
385+  88A2 32 E0 84     	ld (Cuad_objeto),a
386+  88A5 21 20 48     	ld hl,$4820
387+  88A8 22 01 85     	ld (Limite_horizontal),hl
388+  88AB 21 03 85     	ld hl,Limite_vertical
389+  88AE 36 0D        	ld (hl),$0d
390+  88B0 08           	ex af,af
391+  88B1 18 3C        	jr 1F
392+  88B3              tercuad
393+  88B3              ;	call Fija_punteros
394+  88B3 3E 03        	ld a,3
395+  88B5 32 E0 84     	ld (Cuad_objeto),a
396+  88B8 21 20 48     	ld hl,$4820
397+  88BB 22 01 85     	ld (Limite_horizontal),hl
398+  88BE 21 03 85     	ld hl,Limite_vertical
399+  88C1 36 12        	ld (hl),$12
400+  88C3 08           	ex af,af
401+  88C4 18 29        	jr 1F
402+  88C6 CD F8 88     primit call column
403+  88C9 38 13        	jr c, primcuad
404+  88CB              segcuad
405+  88CB              ;	call Fija_punteros
406+  88CB 3E 02        	ld a,2
407+  88CD 32 E0 84     	ld (Cuad_objeto),a
408+  88D0 21 C0 4F     	ld hl,$4fc0
409+  88D3 22 01 85     	ld (Limite_horizontal),hl
410+  88D6 21 03 85     	ld hl,Limite_vertical
411+  88D9 36 0D        	ld (hl),$0d
412+  88DB 08           	ex af,af
413+  88DC 18 11        	jr 1F
414+  88DE              primcuad
415+  88DE              ;	call Fija_punteros
416+  88DE 3E 01        	ld a,1
417+  88E0 32 E0 84     	ld (Cuad_objeto),a
418+  88E3 21 C0 4F     	ld hl,$4fc0
419+  88E6 22 01 85     	ld (Limite_horizontal),hl
420+  88E9 21 03 85     	ld hl,Limite_vertical
421+  88EC 36 12        	ld (hl),$12
422+  88EE 08           	ex af,af
423+  88EF CD 56 8F     1 call Genera_coordenadas
424+  88F2 21 F5 84     	ld hl,Ctrl_0
425+  88F5 CB EE        	set 5,(hl)
426+  88F7 C9           	ret
427+  88F8
428+  88F8              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88F8              ;
430+  88F8              ;	14/9/22
431+  88F8              ;
432+  88F8              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88F8              ;
434+  88F8              ;	La rutina fija el puntero de dibujado/borrado.
435+  88F8              ;
436+  88F8              ;	Función:
437+  88F8              ;
438+  88F8              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88F8
440+  88F8              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88F8              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88F8              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88F8              ;	and a
444+  88F8              ;	jr z,1F
445+  88F8              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88F8              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88F8              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88F8              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88F8              ;	ld (Puntero_objeto),hl
450+  88F8              ;	jr 3F
451+  88F8              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88F8              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88F8              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88F8              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88F8              ;	ld (Puntero_objeto),hl
456+  88F8              ;	jr 3F
457+  88F8              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88F8              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88F8              ;3 pop de
460+  88F8              ;	pop bc
461+  88F8              ;	ret
462+  88F8
463+  88F8              ; ------------------------------------------------------------------------------------------------------------------
464+  88F8
465+  88F8              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88F8              ;
467+  88F8              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88F8
469+  88F8 7D           column ld a,l
470+  88F9 E6 1F        	and $1f
471+  88FB FE 10         	cp $10
472+  88FD C9            	ret
473+  88FE
474+  88FE              ; --------------------------------------------------------------------------------------------------------------------
475+  88FE              ;
476+  88FE              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88FE              ;
478+  88FE              ; 14/12/22
479+  88FE              ;
480+  88FE              ;	Modifica: A y BC.
481+  88FE
482+  88FE 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  8901 E6 01        	and 1
484+  8903 28 17        	jr z,1F
485+  8905
486+  8905              ; Nos encontramos en la parte izquierda de la pantalla
487+  8905
488+  8905 3A E1 84     	ld a,(Coordenada_X)
489+  8908 47           	ld b,a
490+  8909 04           	inc b											; (Coordenada_X)+1 en B.
491+  890A 79           	ld a,c
492+  890B 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  890C 38 08        	jr c,2F
494+  890E 47           	ld b,a
495+  890F 79           	ld a,c
496+  8910 90           	sub b
497+  8911 32 00 85     	ld (Columnas),a
498+  8914 18 1B        	jr 4F
499+  8916 79           2 ld a,c
500+  8917 32 00 85     	ld (Columnas),a
501+  891A 18 15        	jr 4F
502+  891C
503+  891C              ; Nos encontramos en la parte derecha de la pantalla.
504+  891C
505+  891C 3A E1 84     1 ld a,(Coordenada_X)
506+  891F 81           	add c
507+  8920 3D           	dec a
508+  8921 D6 1F        	sub $1f
509+  8923 38 08        	jr c,3F
510+  8925 47           	ld b,a
511+  8926 79           	ld a,c
512+  8927 90           	sub b
513+  8928 32 00 85     	ld (Columnas),a
514+  892B 18 04        	jr 4F
515+  892D 79           3 ld a,c
516+  892E 32 00 85     	ld (Columnas),a
517+  8931 D9           4 exx
518+  8932 4F           	ld c,a
519+  8933 D9           	exx
520+  8934 C9            ret
521+  8935
522+  8935              ; --------------------------------------------------------------------------------------------------------------------
523+  8935              ;
524+  8935              ; 7/1/23
525+  8935              ;
526+  8935              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  8935              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  8935              ;
529+  8935              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  8935              ;	DESTRUYE: HL,B Y A.
531+  8935
532+  8935 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  8938 FE 02        	cp 2
534+  893A 38 18        	jr c,1F
535+  893C 28 16        	jr z,1F
536+  893E E6 01        	and 1
537+  8940 28 0D        	jr z,3F
538+  8942
539+  8942              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  8942
541+  8942 CD 7E 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8945
543+  8945 7D           9 ld a,l
544+  8946 E6 1F        	and $1f
545+  8948 28 2A        	jr z,7F
546+  894A 2B           	dec hl
547+  894B 10 F8        	djnz 9B
548+  894D 18 25        	jr 7F
549+  894F
550+  894F              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  894F
552+  894F 2A D4 84     3 ld hl,(Posicion_actual)
553+  8952 18 20        	jr 7F
554+  8954
555+  8954 28 14        1 jr z,2F
556+  8956
557+  8956              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  8956
559+  8956 CD 7E 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  8959 7D           4 ld a,l
561+  895A E6 1F        	and $1f
562+  895C 28 03        	jr z,6F
563+  895E 2B           	dec hl
564+  895F 10 F8        	djnz 4B
565+  8961 06 0F        6 ld b,15
566+  8963 CD DF 89     5 call PreviousScan
567+  8966 10 FB        	djnz 5B
568+  8968 18 0A        	jr 7F
569+  896A
570+  896A              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  896A
572+  896A CD 7E 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  896D 06 0F        	ld b,15
574+  896F CD DF 89     8 call PreviousScan
575+  8972 10 FB        	djnz 8B
576+  8974
577+  8974 E5           7 push hl
578+  8975 DD E1        	pop ix
579+  8977
580+  8977 2A D6 84     	ld hl,(Puntero_objeto)
581+  897A E5           	push hl
582+  897B FD E1        	pop iy
583+  897D
584+  897D C9           	ret
585+  897E
586+  897E              ; --------------------------------------------------------------------------------------------------------------------
587+  897E              ;
588+  897E              ;	2/1/23
589+  897E              ;
590+  897E              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  897E              ;
592+  897E              ;	Tras esta rutina tenemos:
593+  897E              ;
594+  897E              ;	OUTPUT: HL contiene (Posicion_actual).
595+  897E              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  897E              ;
597+  897E              ;	DESTRUYE!!!!! HL,B y A.
598+  897E
599+  897E 2A D4 84     Operandos ld hl,(Posicion_actual)
600+  8981 3A 00 85     	ld a,(Columnas)
601+  8984 3D           	dec a
602+  8985 20 01        	jr nz,1F
603+  8987 3C           	inc a
604+  8988 47           1 ld b,a
605+  8989 C9           	ret
606+  898A
607+  898A              ; --------------------------------------------------------------------------------------------------------------------
608+  898A              ;
609+  898A              ;	3/1/23
610+  898A              ;
611+  898A              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  898A              ;
613+  898A              ;	Destruye: A,B,HL y DE.
614+  898A
615+  898A              Define_rutina_de_impresion
616+  898A
617+  898A 3A D3 84     	ld a,(Columns)
618+  898D 47           	ld b,a
619+  898E 3A 00 85     	ld a,(Columnas)
620+  8991 B8           	cp b
621+  8992 20 0D        	jr nz,2f
622+  8994
623+  8994              ;	La entidad se imprime entera.
624+  8994
625+  8994 21 26 8A     	ld hl, Indice_entidades_completas
626+  8997 E6 01        	and 1
627+  8999 28 02        	jr z,1F
628+  899B
629+  899B 23           	inc hl
630+  899C 23           	inc hl
631+  899D
632+  899D CD 33 86     1 call Extrae_address
633+  89A0 C9           	ret		;	ret
634+  89A1
635+  89A1              ;	La entidad no se imprime entera en pantalla.
636+  89A1
637+  89A1 3A E0 84     2 ld a,(Cuad_objeto)
638+  89A4 E6 01        	and 1
639+  89A6 28 17        	jr z,3F
640+  89A8
641+  89A8              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  89A8
643+  89A8 21 2A 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  89AB 3A D3 84     4 ld a,(Columns)
645+  89AE E6 01        	and 1
646+  89B0 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89B2
648+  89B2 23           	inc hl
649+  89B3 23           	inc hl
650+  89B4
651+  89B4 3A 00 85     	ld a,(Columnas)
652+  89B7 E6 01        	and 1
653+  89B9 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89BB
655+  89BB 23           	inc hl
656+  89BC 23           	inc hl
657+  89BD
658+  89BD 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89BF
660+  89BF 21 30 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89C2 18 E7        	jr 4B
662+  89C4
663+  89C4              ; --------------------------------------------------------------------------------------------------------------------
664+  89C4              ;
665+  89C4              ;	Prepara_draw
666+  89C4              ;
667+  89C4              ;	Es una rutina de carga.
668+  89C4              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89C4              ;
670+  89C4              ;	FUNCIONAMIENTO:
671+  89C4              ;
672+  89C4              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89C4              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89C4              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89C4              ;
676+  89C4              ;	DESTRUYE:
677+  89C4              ;
678+  89C4              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89C4
680+  89C4 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89C7 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89C8 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89C9 4E           	ld c,(hl)
684+  89CA 2A D4 84     	ld hl,(Posicion_actual)
685+  89CD 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89CF C9           	ret
687+  89D0
688+  89D0              ;----------------------------------------------------------------------------------------------------------------
689+  89D0              ;
690+  89D0              ;	5/08/22
691+  89D0              ;
692+  89D0              ;   NextScan.
693+  89D0              ;
694+  89D0              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89D0              ;
696+  89D0              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89D0              ;
698+  89D0              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89D0              ;
700+  89D0              ;       DESTRUIDOS: AF y HL !!!
701+  89D0              ;
702+  89D0              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89D0              ;
704+  89D0
705+  89D0 24           NextScan inc h          ; Incrementamos el scanline.
706+  89D1 7C               ld a,h
707+  89D2 E6 07            and 7
708+  89D4 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89D5
710+  89D5 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
711+  89D6 C6 20            add a,$20           ; Vamos a comprobarlo...
712+  89D8 6F               ld l,a
713+  89D9 D8               ret c               ; Salimos si se produce el cambio de tercio.
714+  89DA
715+  89DA 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
716+  89DB D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
717+  89DD 67               ld h,a
718+  89DE C9               ret
719+  89DF
720+  89DF              ;----------------------------------------------------------------------------------------------------------------
721+  89DF              ;
722+  89DF              ;	5/08/22
723+  89DF              ;
724+  89DF              ;   PreviousScan.
725+  89DF              ;
726+  89DF              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
727+  89DF              ;
728+  89DF              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
729+  89DF              ;
730+  89DF              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
731+  89DF              ;
732+  89DF              ;       DESTRUIDOS: AF y HL !!!
733+  89DF              ;
734+  89DF              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
735+  89DF              ;
736+  89DF
737+  89DF 7C           PreviousScan ld a,h
738+  89E0 25               dec h               ; Dec H.
739+  89E1 E6 07            and 7
740+  89E3 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
741+  89E4
742+  89E4 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
743+  89E5 D6 20            sub $20             ; Vamos a comprobarlo...
744+  89E7 6F               ld l,a
745+  89E8 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
746+  89E9
747+  89E9 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
748+  89EA C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
749+  89EC 67               ld h,a
750+  89ED C9               ret
751+  89EE
752+  89EE              ; -----------------------------------------------------------------------------------
753+  89EE              ;
754+  89EE              ;	07/01/23
755+  89EE
756+  89EE              Extrae_foto_registros
757+  89EE
758+  89EE ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
759+  89F2 31 00 70     	ld sp,Album_de_fotos
760+  89F5 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
761+  89F7 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
762+  89F8 D1           	pop de																	; Dirección de la rutina de impresión en DE.
763+  89F9
764+  89F9 ED 73 12 85  	ld (Stack_2),sp
765+  89FD ED 7B 10 85  	ld sp,(Stack)
766+  8A01 3E CD        	ld a,$cd
767+  8A03 32 0B 8A     	ld (Imprime),a
768+  8A06 EB           	ex de,hl
769+  8A07 22 0C 8A     	ld (Imprime+1),hl
770+  8A0A EB           	ex de,hl
771+  8A0B
772+  8A0B 00 00 00     Imprime db 0,0,0
773+  8A0E
774+  8A0E ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
775+  8A12
776+  8A12 3A 0F 85     	ld a,(Numero_de_malotes)
777+  8A15 3D           	dec a
778+  8A16 28 09        	jr z,1F
779+  8A18 32 0F 85      	ld (Numero_de_malotes),a
780+  8A1B ED 7B 12 85  	ld sp,(Stack_2)
781+  8A1F 18 D4        	jr 2B
782+  8A21
783+  8A21 AF           1 xor a
784+  8A22 32 12 85     	ld (Stack_2),a
785+  8A25 C9           	ret
786+  8A26
787+  8A26
# file closed: Draw_XOR.asm
598   8A26              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A26              ;   índices de Rutinas de impresión.
  2+  8A26
  3+  8A26 36 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A28 5F 8A            defw Pinta_Amadeus_3x2
  5+  8A2A
  6+  8A2A A9 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A2C 49 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A2E FD 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A30
 10+  8A30 D3 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A32 D7 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A34 8B 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A36
 14+  8A36
 15+  8A36              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A36              ;
 17+  8A36              ;   12/12/22
 18+  8A36              ;
 19+  8A36              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A36              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A36              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A36              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A36              ;
 24+  8A36              ;   Modifica: DE y HL.
 25+  8A36
 26+  8A36 ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A3A FD F9        	ld sp,iy
 28+  8A3C 06 10            ld b,16
 29+  8A3E D1           1 pop de
 30+  8A3F 73           	ld (hl),e
 31+  8A40 23           	inc hl
 32+  8A41 72           	ld (hl),d
 33+  8A42 2B           	dec hl
 34+  8A43
 35+  8A43 24           	inc h
 36+  8A44 7C               ld a,h
 37+  8A45 E6 07            and 7
 38+  8A47 20 0A            jr nz,2F
 39+  8A49
 40+  8A49 7D               ld a,l
 41+  8A4A C6 20            add a,$20
 42+  8A4C 6F               ld l,a
 43+  8A4D 38 04            jr c,2F
 44+  8A4F
 45+  8A4F 7C               ld a,h
 46+  8A50 D6 08            sub 8
 47+  8A52 67               ld h,a
 48+  8A53
 49+  8A53 7C           2 ld a,h
 50+  8A54 FE 58            cp $58
 51+  8A56 28 02            jr z,3F
 52+  8A58 10 E4            djnz 1B
 53+  8A5A ED 7B 10 85  3 ld sp,(Stack)
 54+  8A5E C9           	ret
 55+  8A5F
 56+  8A5F ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A63 FD F9        	ld sp,iy
 58+  8A65 06 08            ld b,8
 59+  8A67 D1           1 pop de
 60+  8A68 73           	ld (hl),e
 61+  8A69 23           	inc hl
 62+  8A6A 72           	ld (hl),d
 63+  8A6B 23           	inc hl
 64+  8A6C D1           	pop de
 65+  8A6D 73           	ld (hl),e
 66+  8A6E 2B           	dec hl
 67+  8A6F 2B           	dec hl
 68+  8A70 24           	inc h
 69+  8A71 7C               ld a,h
 70+  8A72 E6 07            and 7
 71+  8A74 20 0A            jr nz,2F
 72+  8A76 7D               ld a,l
 73+  8A77 C6 20            add a,$20
 74+  8A79 6F               ld l,a
 75+  8A7A 38 04            jr c,2F
 76+  8A7C 7C               ld a,h
 77+  8A7D D6 08            sub 8
 78+  8A7F 67               ld h,a
 79+  8A80 7C           2 ld a,h
 80+  8A81 FE 58            cp $58
 81+  8A83 28 1F            jr z,4F
 82+  8A85 72               ld (hl),d
 83+  8A86 D1           	pop de
 84+  8A87 23           	inc hl
 85+  8A88 73           	ld (hl),e
 86+  8A89 23           	inc hl
 87+  8A8A 72           	ld (hl),d
 88+  8A8B 2B           	dec hl
 89+  8A8C 2B           	dec hl
 90+  8A8D 24           	inc h
 91+  8A8E 7C               ld a,h
 92+  8A8F E6 07            and 7
 93+  8A91 20 0A            jr nz,3F
 94+  8A93 7D               ld a,l
 95+  8A94 C6 20            add a,$20
 96+  8A96 6F               ld l,a
 97+  8A97 38 04            jr c,3F
 98+  8A99 7C               ld a,h
 99+  8A9A D6 08            sub 8
100+  8A9C 67               ld h,a
101+  8A9D 7C           3 ld a,h
102+  8A9E FE 58            cp $58
103+  8AA0 28 02            jr z,4F
104+  8AA2 10 C3            djnz 1B
105+  8AA4 ED 7B 10 85  4 ld sp,(Stack)
106+  8AA8 C9           	ret
107+  8AA9
108+  8AA9              ; ---------------------------------------------------
109+  8AA9
110+  8AA9 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AAD FD F9        	ld sp,iy
112+  8AAF 06 10            ld b,16
113+  8AB1 D1           1 pop de
114+  8AB2 7A           	ld a,d
115+  8AB3 AE           	xor (hl)
116+  8AB4 77           	ld (hl),a
117+  8AB5 24           	inc h
118+  8AB6 7C               ld a,h
119+  8AB7 E6 07            and 7
120+  8AB9 20 0C            jr nz,2F
121+  8ABB 7D               ld a,l
122+  8ABC C6 20            add a,$20
123+  8ABE 6F               ld l,a
124+  8ABF 38 06            jr c,2F
125+  8AC1 7C               ld a,h
126+  8AC2 D6 08            sub 8
127+  8AC4 67               ld h,a
128+  8AC5 18 00            jr 2F
129+  8AC7 7C           2 ld a,h
130+  8AC8 FE 58            cp $58
131+  8ACA 28 02            jr z,3F
132+  8ACC 10 E3            djnz 1B
133+  8ACE ED 7B 10 85  3 ld sp,(Stack)
134+  8AD2 C9           	ret
135+  8AD3
136+  8AD3 ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8AD7 FD F9        	ld sp,iy
138+  8AD9 06 10            ld b,16
139+  8ADB D1           1 pop de
140+  8ADC 7B           	ld a,e
141+  8ADD AE           	xor (hl)
142+  8ADE 77           	ld (hl),a
143+  8ADF 24           	inc h
144+  8AE0 7C               ld a,h
145+  8AE1 E6 07            and 7
146+  8AE3 20 0C            jr nz,2F
147+  8AE5 7D               ld a,l
148+  8AE6 C6 20            add a,$20
149+  8AE8 6F               ld l,a
150+  8AE9 38 06            jr c,2F
151+  8AEB 7C               ld a,h
152+  8AEC D6 08            sub 8
153+  8AEE 67               ld h,a
154+  8AEF 18 00            jr 2F
155+  8AF1 7C           2 ld a,h
156+  8AF2 FE 58            cp $58
157+  8AF4 28 02            jr z,3F
158+  8AF6 10 E3            djnz 1B
159+  8AF8 ED 7B 10 85  3 ld sp,(Stack)
160+  8AFC C9           	ret
161+  8AFD
162+  8AFD              ; ---------------------------------------------------
163+  8AFD
164+  8AFD ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8B01 FD F9        	ld sp,iy
166+  8B03 06 08            ld b,8
167+  8B05 D1           1 pop de
168+  8B06 7A           	ld a,d
169+  8B07 AE           	xor (hl)
170+  8B08 77           	ld (hl),a
171+  8B09 23           	inc hl
172+  8B0A D1           	pop de
173+  8B0B 7B           	ld a,e
174+  8B0C AE           	xor (hl)
175+  8B0D 77           	ld (hl),a
176+  8B0E 2B           	dec hl
177+  8B0F 24            	inc h
178+  8B10 7C               ld a,h
179+  8B11 E6 07            and 7
180+  8B13 20 0A            jr nz,2F
181+  8B15 7D               ld a,l
182+  8B16 C6 20            add a,$20
183+  8B18 6F               ld l,a
184+  8B19 38 04            jr c,2F
185+  8B1B 7C               ld a,h
186+  8B1C D6 08            sub 8
187+  8B1E 67               ld h,a
188+  8B1F 7C           2 ld a,h
189+  8B20 FE 58            cp $58
190+  8B22 28 20            jr z,4F
191+  8B24 D1               pop de
192+  8B25 7B           	ld a,e
193+  8B26 AE           	xor (hl)
194+  8B27 77           	ld (hl),a
195+  8B28 23           	inc hl
196+  8B29 7A           	ld a,d
197+  8B2A AE           	xor (hl)
198+  8B2B 77           	ld (hl),a
199+  8B2C 2B           	dec hl
200+  8B2D 24           	inc h
201+  8B2E 7C               ld a,h
202+  8B2F E6 07            and 7
203+  8B31 20 0A            jr nz,3F
204+  8B33 7D               ld a,l
205+  8B34 C6 20            add a,$20
206+  8B36 6F               ld l,a
207+  8B37 38 04            jr c,3F
208+  8B39 7C               ld a,h
209+  8B3A D6 08            sub 8
210+  8B3C 67               ld h,a
211+  8B3D 7C           3 ld a,h
212+  8B3E FE 58            cp $58
213+  8B40 28 02            jr z,4F
214+  8B42 10 C1            djnz 1B
215+  8B44 ED 7B 10 85  4 ld sp,(Stack)
216+  8B48 C9           	ret
217+  8B49
218+  8B49 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B4D FD F9        	ld sp,iy
220+  8B4F 06 08            ld b,8
221+  8B51 D1           1 pop de
222+  8B52 D1           	pop de
223+  8B53 7B           	ld a,e
224+  8B54 AE           	xor (hl)
225+  8B55 77           	ld (hl),a
226+  8B56 24            	inc h
227+  8B57 7C               ld a,h
228+  8B58 E6 07            and 7
229+  8B5A 20 0A            jr nz,2F
230+  8B5C 7D               ld a,l
231+  8B5D C6 20            add a,$20
232+  8B5F 6F               ld l,a
233+  8B60 38 04            jr c,2F
234+  8B62 7C               ld a,h
235+  8B63 D6 08            sub 8
236+  8B65 67               ld h,a
237+  8B66 7C           2 ld a,h
238+  8B67 FE 58            cp $58
239+  8B69 28 1B            jr z,4F
240+  8B6B D1               pop de
241+  8B6C 7A           	ld a,d
242+  8B6D AE           	xor (hl)
243+  8B6E 77           	ld (hl),a
244+  8B6F 24           	inc h
245+  8B70 7C               ld a,h
246+  8B71 E6 07            and 7
247+  8B73 20 0A            jr nz,3F
248+  8B75 7D               ld a,l
249+  8B76 C6 20            add a,$20
250+  8B78 6F               ld l,a
251+  8B79 38 04            jr c,3F
252+  8B7B 7C               ld a,h
253+  8B7C D6 08            sub 8
254+  8B7E 67               ld h,a
255+  8B7F 7C           3 ld a,h
256+  8B80 FE 58            cp $58
257+  8B82 28 02            jr z,4F
258+  8B84 10 CB            djnz 1B
259+  8B86 ED 7B 10 85  4 ld sp,(Stack)
260+  8B8A C9           	ret
261+  8B8B
262+  8B8B ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8B8F FD F9        	ld sp,iy
264+  8B91 06 08            ld b,8
265+  8B93 D1           1 pop de
266+  8B94 7B           	ld a,e
267+  8B95 AE           	xor (hl)
268+  8B96 77           	ld (hl),a
269+  8B97 23           	inc hl
270+  8B98 7A           	ld a,d
271+  8B99 AE           	xor (hl)
272+  8B9A 77           	ld (hl),a
273+  8B9B 2B           	dec hl
274+  8B9C 24             	inc h
275+  8B9D 7C               ld a,h
276+  8B9E E6 07            and 7
277+  8BA0 20 0A            jr nz,2F
278+  8BA2 7D               ld a,l
279+  8BA3 C6 20            add a,$20
280+  8BA5 6F               ld l,a
281+  8BA6 38 04            jr c,2F
282+  8BA8 7C               ld a,h
283+  8BA9 D6 08            sub 8
284+  8BAB 67               ld h,a
285+  8BAC 7C           2 ld a,h
286+  8BAD FE 58            cp $58
287+  8BAF 28 21            jr z,4F
288+  8BB1 D1               pop de
289+  8BB2 7A           	ld a,d
290+  8BB3 AE           	xor (hl)
291+  8BB4 77           	ld (hl),a
292+  8BB5 23           	inc hl
293+  8BB6 D1               pop de
294+  8BB7 7B           	ld a,e
295+  8BB8 AE           	xor (hl)
296+  8BB9 77           	ld (hl),a
297+  8BBA 2B           	dec hl
298+  8BBB 24           	inc h
299+  8BBC 7C               ld a,h
300+  8BBD E6 07            and 7
301+  8BBF 20 0A            jr nz,3F
302+  8BC1 7D               ld a,l
303+  8BC2 C6 20            add a,$20
304+  8BC4 6F               ld l,a
305+  8BC5 38 04            jr c,3F
306+  8BC7 7C               ld a,h
307+  8BC8 D6 08            sub 8
308+  8BCA 67               ld h,a
309+  8BCB 7C           3 ld a,h
310+  8BCC FE 58            cp $58
311+  8BCE 28 02            jr z,4F
312+  8BD0 10 C1            djnz 1B
313+  8BD2 ED 7B 10 85  4 ld sp,(Stack)
314+  8BD6 C9           	ret
315+  8BD7
316+  8BD7 ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8BDB FD F9        	ld sp,iy
318+  8BDD 06 08            ld b,8
319+  8BDF D1           1 pop de
320+  8BE0 7B           	ld a,e
321+  8BE1 AE           	xor (hl)
322+  8BE2 77           	ld (hl),a
323+  8BE3 24            	inc h
324+  8BE4 7C               ld a,h
325+  8BE5 E6 07            and 7
326+  8BE7 20 0A            jr nz,2F
327+  8BE9 7D               ld a,l
328+  8BEA C6 20            add a,$20
329+  8BEC 6F               ld l,a
330+  8BED 38 04            jr c,2F
331+  8BEF 7C               ld a,h
332+  8BF0 D6 08            sub 8
333+  8BF2 67               ld h,a
334+  8BF3 7C           2 ld a,h
335+  8BF4 FE 58            cp $58
336+  8BF6 28 1C            jr z,4F
337+  8BF8 D1               pop de
338+  8BF9 7A           	ld a,d
339+  8BFA AE           	xor (hl)
340+  8BFB 77           	ld (hl),a
341+  8BFC 24           	inc h
342+  8BFD 7C               ld a,h
343+  8BFE E6 07            and 7
344+  8C00 20 0A            jr nz,3F
345+  8C02 7D               ld a,l
346+  8C03 C6 20            add a,$20
347+  8C05 6F               ld l,a
348+  8C06 38 04            jr c,3F
349+  8C08 7C               ld a,h
350+  8C09 D6 08            sub 8
351+  8C0B 67               ld h,a
352+  8C0C 7C           3 ld a,h
353+  8C0D FE 58            cp $58
354+  8C0F 28 03            jr z,4F
355+  8C11 D1               pop de
356+  8C12 10 CB            djnz 1B
357+  8C14 ED 7B 10 85  4 ld sp,(Stack)
358+  8C18 C9           	ret
359+  8C19
360+  8C19              ; ---------------------------------------------------
361+  8C19
# file closed: Rutinas_de_impresion_sprites.asm
599   8C19              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C19              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C19              ;
  3+  8C19              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C19              ;
  5+  8C19              ; *****************************************************************************************************************************************************************************************
  6+  8C19              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C19
  8+  8C19 7C           calcula_tercio ld a,h
  9+  8C1A E6 18        	and $18
 10+  8C1C CB 2F        	sra a
 11+  8C1E CB 2F        	sra a
 12+  8C20 CB 2F        	sra a
 13+  8C22 C9           	ret
 14+  8C23
# file closed: calcula_tercio.asm
600   8C23              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C23              ; -----------------------------------------------------------------------------------------
  2+  8C23              ;
  3+  8C23              ;   04/11/22
  4+  8C23              ;
  5+  8C23              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C23              ;
  7+  8C23              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C23              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C23              ;
 10+  8C23              ;   DESTRUYE: HL y A. !!!!!
 11+  8C23
 12+  8C23 CD 19 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C26 26 58            ld h,$58
 14+  8C28 84               add h
 15+  8C29 67               ld h,a
 16+  8C2A C9               ret
# file closed: Calcula_direccion_atributos.asm
601   8C2B              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C2B              ; ********** **********
  2+  8C2B              ;
  3+  8C2B              ;   5/11/22
  4+  8C2B              ;
  5+  8C2B              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C2B              ;
  7+  8C2B              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C2B              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C2B              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C2B              ;
 11+  8C2B              ;   NO DESTROYERSSSS !!!!!
 12+  8C2B
 13+  8C2B E5           Define_atributos push hl
 14+  8C2C C5           	push bc
 15+  8C2D D5           	push de
 16+  8C2E
 17+  8C2E CD 23 8C     	call Calcula_direccion_atributos
 18+  8C31
 19+  8C31 D9               exx
 20+  8C32 E5               push hl
 21+  8C33 D9               exx
 22+  8C34 D1               pop de
 23+  8C35
 24+  8C35 42               ld b,d
 25+  8C36 7B               ld a,e 									; (Attr) en A.
 26+  8C37
 27+  8C37 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C38 E5            	push hl 								; Guardo dirección de attr.
 29+  8C39
 30+  8C39              ; -----
 31+  8C39
 32+  8C39 77           2 ld (hl),a
 33+  8C3A 0D           	dec c 									; Decremento (Columnas).
 34+  8C3B 28 03        	jr z,1F
 35+  8C3D 23           	inc hl
 36+  8C3E 18 F9        	jr 2B
 37+  8C40
 38+  8C40 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C41 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C42
 41+  8C42 05           	dec b									; Decremento (Filas).
 42+  8C43 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C45
 44+  8C45 11 20 00     	ld de,32
 45+  8C48 A7           	and a
 46+  8C49 ED 5A        	adc hl,de
 47+  8C4B 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C4D
 49+  8C4D D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C4E C1           	pop bc
 51+  8C4F E1           	pop hl
 52+  8C50
 53+  8C50 C9           	ret
 54+  8C51
# file closed: Define_atributos.asm
602   8C51              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C51              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C51              ;
  3+  8C51              ;
  4+  8C51              ;	CLS.
  5+  8C51              ;
  6+  8C51              ;	Limpia la pantalla y define sus atributos.
  7+  8C51              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C51              ;
  9+  8C51              ;	COLORES: 0 ..... NEGRO
 10+  8C51              ;    		 1 ..... AZUL
 11+  8C51              ; 			 2 ..... ROJO
 12+  8C51              ;			 3 ..... MAGENTA
 13+  8C51              ; 			 4 ..... VERDE
 14+  8C51              ; 			 5 ..... CIAN
 15+  8C51              ;			 6 ..... AMARILLO
 16+  8C51              ; 			 7 ..... BLANCO
 17+  8C51              ;
 18+  8C51              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C51              ;
 20+  8C51              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C51
 22+  8C51
 23+  8C51 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C54 11 01 40     	LD DE,$4001
 25+  8C57 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C5A 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C5C ED B0        	LDIR
 28+  8C5E 01 FF 02     	LD BC,767
 29+  8C61 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C62 ED B0        	LDIR
 31+  8C64 C9           	ret
 32+  8C65
# file closed: Cls.asm
603   8C65              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C65              ; ******************************************************************************************************************************************************************************************
  2+  8C65              ;
  3+  8C65              ;   19/10/22
  4+  8C65              ;
  5+  8C65              ;	Mov_down
  6+  8C65              ;
  7+  8C65              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C65              ;
  9+  8C65              ;
 10+  8C65 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C68 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C6A              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C6A              ; 																	; _ en el caso de que no lo haya.
 14+  8C6A 3A E6 84     	ld a,(Vel_down)
 15+  8C6D 47           	ld b,a
 16+  8C6E 2A D4 84         ld hl,(Posicion_actual)
 17+  8C71 CD 19 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C74 E6 02        	and 2
 19+  8C76 28 0F        	jr z,1F
 20+  8C78 7C           	ld a,h
 21+  8C79 FE 57        	cp $57
 22+  8C7B 20 0A        	jr nz,1F
 23+  8C7D 7D           	ld a,l
 24+  8C7E C6 20        	add $20
 25+  8C80 30 05        	jr nc,1F
 26+  8C82
 27+  8C82              ; ------------------------------
 28+  8C82 CD 3D 8F     	call Reaparece_arriba
 29+  8C85              ;	call Reinicio
 30+  8C85              ; ------------------------------
 31+  8C85
 32+  8C85 18 08        	jr 3F
 33+  8C87 CD D0 89     1 call NextScan
 34+  8C8A 22 D4 84     	ld (Posicion_actual),hl
 35+  8C8D 10 E2            djnz 2B
 36+  8C8F CD 56 8F     3 call Genera_coordenadas
 37+  8C92 C9           	ret
 38+  8C93
 39+  8C93
 40+  8C93              ; ******************************************************************************************************************************************************************************************
 41+  8C93              ;
 42+  8C93              ;   19/10/22
 43+  8C93              ;
 44+  8C93              ;	Mov_up
 45+  8C93              ;
 46+  8C93              ; 	Mueve el Sprite hacia arriba.
 47+  8C93              ;
 48+  8C93              ;
 49+  8C93 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C96 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C98              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C98              ; 																		; _ en el caso de que no lo haya.
 53+  8C98 3A E5 84     	ld a,(Vel_up)
 54+  8C9B 47           	ld b,a
 55+  8C9C 2A D4 84     	ld hl,(Posicion_actual)
 56+  8C9F CD 19 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CA2 A7           	and a
 58+  8CA3 20 10        	jr nz,1F
 59+  8CA5 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CA6 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CA8 20 0B            jr nz,1F
 62+  8CAA 7D               ld a,l
 63+  8CAB D6 20            sub $20
 64+  8CAD 30 06            jr nc,1F
 65+  8CAF 25               dec h
 66+  8CB0
 67+  8CB0              ; -----------------------------
 68+  8CB0 CD 2D 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CB3              ;	call Reinicio
 70+  8CB3              ; -----------------------------
 71+  8CB3
 72+  8CB3 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CB5 CD DF 89     1 call PreviousScan
 74+  8CB8 22 D4 84     	ld (Posicion_actual),hl
 75+  8CBB 10 E2            djnz 3B
 76+  8CBD CD 56 8F     2 call Genera_coordenadas
 77+  8CC0 C9           	ret
 78+  8CC1
 79+  8CC1              ; ******************************************************************************************************************************************************************************************
 80+  8CC1              ;
 81+  8CC1              ;	19/10/22
 82+  8CC1              ;
 83+  8CC1              ;	Mov_right.
 84+  8CC1              ;
 85+  8CC1              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CC1              ;
 87+  8CC1
 88+  8CC1 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CC4 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CC6              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CC6              ; 																	; _ en el caso de que no lo haya.
 92+  8CC6 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CC9 A7           	and a
 94+  8CCA 28 0B        	jr z,10F
 95+  8CCC
 96+  8CCC 3A F5 84     	ld a,(Ctrl_0)
 97+  8CCF CB 7F        	bit 7,a
 98+  8CD1 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CD3 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CD6 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CD7
102+  8CD7 3A F5 84     10 ld a,(Ctrl_0)
103+  8CDA CB 77        	bit 6,a
104+  8CDC 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CDE
106+  8CDE CD EC 8E     	call Stop_Amadeus_right
107+  8CE1 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CE2 18 4A        	jr 3F
109+  8CE4
110+  8CE4 3A E1 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CE7 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CE9 20 43        	jr nz,3F
113+  8CEB
114+  8CEB 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CEE A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CEF 28 3D        	jr z,3F
117+  8CF1
118+  8CF1              ; ---------- ---------- ----------
119+  8CF1
120+  8CF1 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
121+  8CF4 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
122+  8CF6 28 11        	jr z,1F
123+  8CF8 38 06        	jr c,6F
124+  8CFA FE 04        	cp 4
125+  8CFC 28 14        	jr z,7F
126+  8CFE 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
127+  8D00
128+  8D00              ; ---------- ---------- ----------
129+  8D00              ;
130+  8D00              ; Perfiles de velocidad
131+  8D00              ;
132+  8D00 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
133+  8D03 FE FE        	cp $fe
134+  8D05 20 27        	jr nz,3F
135+  8D07 18 10        	jr 4F
136+  8D09 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
137+  8D0C FE FD        	cp $fd
138+  8D0E 20 1E        	jr nz,3F
139+  8D10 18 07        	jr 4F
140+  8D12 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
141+  8D15 FE FB        	cp $fb
142+  8D17 20 15        	jr nz,3F
143+  8D19
144+  8D19              ; ---------- ---------- ----------
145+  8D19
146+  8D19 CD 1B 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
147+  8D1C              ;	call Reinicio
148+  8D1C
149+  8D1C              ; ---------- ---------- ----------
150+  8D1C
151+  8D1C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
152+  8D1E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
153+  8D1F CD 57 8D     	call DESPLZ_DER
154+  8D22 C1           	pop bc
155+  8D23 10 F9        	djnz 5B
156+  8D25 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
157+  8D28 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
158+  8D29 22 D4 84     	ld (Posicion_actual),hl
159+  8D2C 18 25        	jr 2F 															; Salimos para pintar la nueva posición.
160+  8D2E
161+  8D2E              ; ---------- ---------- ----------
162+  8D2E
163+  8D2E 3A E4 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
164+  8D31 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
165+  8D33 20 18        	jr nz,8F
166+  8D35 2A D4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
167+  8D38 7D           	ld a,l
168+  8D39 E6 1F        	and $1f
169+  8D3B FE 1F        	cp 31
170+  8D3D 20 05        	jr nz,9F
171+  8D3F
172+  8D3F              ; ---------- ---------- ----------
173+  8D3F
174+  8D3F CD 1B 8F     	call Reaparece_izquierda
175+  8D42
176+  8D42              ; ---------- ---------- ----------
177+  8D42
178+  8D42 18 0F        	jr 2F
179+  8D44 2A D4 84     9 ld hl,(Posicion_actual)
180+  8D47 23           	inc hl
181+  8D48 22 D4 84     	ld (Posicion_actual),hl
182+  8D4B 18 06        	jr 2F
183+  8D4D 2A D4 84     8 ld hl,(Posicion_actual)
184+  8D50 CD 57 8D     	call DESPLZ_DER
185+  8D53 CD 56 8F     2 call Genera_coordenadas
186+  8D56 C9           	ret
187+  8D57
188+  8D57              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
189+  8D57              ;
190+  8D57              ;	22/9/22
191+  8D57              ;
192+  8D57
193+  8D57 CD 66 8D     DESPLZ_DER call Desplaza_derecha
194+  8D5A CD 7B 8D         call modifica_parametros_1er_DESPLZ_2
195+  8D5D CD A1 8D         call Ciclo_completo
196+  8D60 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
197+  8D63 CB FE        	set 7,(hl)
198+  8D65 C9           	ret
199+  8D66
200+  8D66              ; ******************************************************************************************************************************************************************************************
201+  8D66              ;	14/9/22
202+  8D66              ;
203+  8D66
204+  8D66 3A E4 84     Desplaza_derecha ld a,(Vel_right)
205+  8D69 47           	ld b,a
206+  8D6A 2A DC 84     	ld hl,(Puntero_DESPLZ)
207+  8D6D 23           1 inc hl
208+  8D6E 23           	inc hl
209+  8D6F 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
210+  8D71 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
211+  8D74 CD 33 86     	call Extrae_address
212+  8D77
213+  8D77              ;	ld (Caja_de_DESPLZ),hl
214+  8D77 22 D6 84     	ld (Puntero_objeto),hl
215+  8D7A
216+  8D7A C9           	ret
217+  8D7B
218+  8D7B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8D7B              ;
220+  8D7B              ;	24/7/22
221+  8D7B              ;
222+  8D7B              ;	modifica_parametros_1er_DESPLZ_2
223+  8D7B              ;
224+  8D7B              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8D7B              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8D7B              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8D7B
228+  8D7B 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8D7E A7           	and a
230+  8D7F 20 1C        	jr nz,1F
231+  8D81 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8D83 32 D8 84         ld (CTRL_DESPLZ),a
233+  8D86
234+  8D86 21 D3 84     	ld hl,Columns
235+  8D89 34           	inc (hl)
236+  8D8A
237+  8D8A 3A E0 84     	ld a,(Cuad_objeto)
238+  8D8D E6 01        	and 1
239+  8D8F 28 0C        	jr z,1F
240+  8D91 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
241+  8D94 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
242+  8D95 22 D4 84     	ld (Posicion_actual),hl
243+  8D98 CD F8 8E     	call Inc_CTRL_DESPLZ
244+  8D9B 18 03        	jr 2F
245+  8D9D CD F8 8E     1 call Inc_CTRL_DESPLZ
246+  8DA0 C9           2 ret
247+  8DA1
248+  8DA1              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
249+  8DA1              ;
250+  8DA1              ;	24/7/22
251+  8DA1              ;
252+  8DA1              ;	Ciclo_completo.
253+  8DA1              ;
254+  8DA1              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
255+  8DA1              ;
256+  8DA1              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
257+  8DA1              ; 	Decrementamos (Columns).
258+  8DA1              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
259+  8DA1              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
260+  8DA1
261+  8DA1
262+  8DA1 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
263+  8DA4 FE FF        	cp $ff
264+  8DA6 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
265+  8DA8 18 25        	jr 3f
266+  8DAA 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
267+  8DAD 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
268+  8DAE AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
269+  8DAF 32 D8 84     	ld (CTRL_DESPLZ),a
270+  8DB2 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
271+  8DB5 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
272+  8DB7 20 0A        	jr nz,2F
273+  8DB9 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
274+  8DBC 23           	inc hl
275+  8DBD 22 D4 84     	ld (Posicion_actual),hl
276+  8DC0 CD 56 8F     	call Genera_coordenadas
277+  8DC3
278+  8DC3              ; Inicia el puntero de Sprite.
279+  8DC3
280+  8DC3 2A DA 84     2 ld hl,(Indice_Sprite)
281+  8DC6 22 DC 84     	ld (Puntero_DESPLZ),hl
282+  8DC9 CD 33 86     	call Extrae_address
283+  8DCC 22 D6 84     	ld (Puntero_objeto),hl
284+  8DCF
285+  8DCF              ;	jr $
286+  8DCF
287+  8DCF C9           3 ret
288+  8DD0
289+  8DD0              ; ******************************************************************************************************************************************************************************************
290+  8DD0              ;
291+  8DD0              ;	19/10/22
292+  8DD0              ;
293+  8DD0              ;	Mov_left.
294+  8DD0              ;
295+  8DD0              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
296+  8DD0              ;
297+  8DD0              Mov_left
298+  8DD0
299+  8DD0 21 F5 84     	ld hl,Ctrl_0
300+  8DD3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
301+  8DD5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
302+  8DD5              ; 																	; _ en el caso de que no lo haya.
303+  8DD5 3A D8 84     	ld a,(CTRL_DESPLZ)
304+  8DD8 A7           	and a
305+  8DD9 20 19        	jr nz,10F
306+  8DDB
307+  8DDB 2A D6 84     	ld hl,(Puntero_objeto)
308+  8DDE 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
309+  8DE1
310+  8DE1 3A F5 84     	ld a,(Ctrl_0)
311+  8DE4 CB 77        	bit 6,a
312+  8DE6 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
313+  8DE8
314+  8DE8 CD F2 8E     	call Stop_Amadeus_left
315+  8DEB 20 5F        	jr nz,3F
316+  8DED
317+  8DED 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
318+  8DF0 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
319+  8DF3 C9           	ret
320+  8DF4
321+  8DF4 3A F5 84     10 ld a,(Ctrl_0)
322+  8DF7 CB 7F        	bit 7,a
323+  8DF9 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
324+  8DFB 21 D8 84     	ld hl,CTRL_DESPLZ
325+  8DFE 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
326+  8DFF
327+  8DFF 3A E1 84     11 ld a,(Coordenada_X)
328+  8E02 A7           	and a
329+  8E03 20 47        	jr nz,3F
330+  8E05 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
331+  8E08 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
332+  8E09 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
333+  8E0B
334+  8E0B              ; ---------- ---------- ----------
335+  8E0B
336+  8E0B 3A E3 84     	ld a,(Vel_left)
337+  8E0E FE 02        	cp 2
338+  8E10 28 0F        	jr z,1F
339+  8E12 38 04        	jr c,6F
340+  8E14 FE 04        	cp 4
341+  8E16 28 12        	jr z,7F
342+  8E18
343+  8E18              ; ---------- ---------- ----------
344+  8E18
345+  8E18 3A D8 84     6 ld a,(CTRL_DESPLZ)
346+  8E1B FE F9        	cp $f9
347+  8E1D 20 2D        	jr nz,3F
348+  8E1F 18 10        	jr 4F
349+  8E21 3A D8 84     1 ld a,(CTRL_DESPLZ)
350+  8E24 FE FA        	cp $fa
351+  8E26 20 24        	jr nz,3F
352+  8E28 18 07        	jr 4F
353+  8E2A 3A D8 84     7 ld a,(CTRL_DESPLZ)
354+  8E2D FE FC        	cp $fc
355+  8E2F 20 1B        	jr nz,3F
356+  8E31
357+  8E31              ; ---------- ---------- ----------
358+  8E31
359+  8E31 CD 09 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
360+  8E34              ;	call Reinicio
361+  8E34
362+  8E34              ; ---------- ---------- ----------
363+  8E34
364+  8E34 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
365+  8E36 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
366+  8E37 2A D6 84     	ld hl,(Puntero_objeto)
367+  8E3A 22 DC 84     	ld (Puntero_DESPLZ),hl
368+  8E3D CD 73 8E     	call DESPLZ_IZQ
369+  8E40 C1           	pop bc
370+  8E41 10 F3        	djnz 5B
371+  8E43 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
372+  8E46 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
373+  8E47 22 D4 84     	ld (Posicion_actual),hl
374+  8E4A 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
375+  8E4C
376+  8E4C              ; ---------- ---------- ----------
377+  8E4C
378+  8E4C 3A E3 84     3 ld a,(Vel_left)
379+  8E4F FE 08        	cp 8
380+  8E51 20 16        	jr nz,8F
381+  8E53 2A D4 84     	ld hl,(Posicion_actual)
382+  8E56 7D           	ld a,l
383+  8E57 E6 1F        	and $1f
384+  8E59 20 05        	jr nz,9F
385+  8E5B
386+  8E5B              ; ---------- ---------- ----------
387+  8E5B
388+  8E5B CD 09 8F     	call Reaparece_derecha
389+  8E5E
390+  8E5E              ; ---------- ---------- ----------
391+  8E5E
392+  8E5E 18 0F        	jr 2F
393+  8E60 2A D4 84     9 ld hl,(Posicion_actual)
394+  8E63 2B           	dec hl
395+  8E64 22 D4 84     	ld (Posicion_actual),hl
396+  8E67 18 06        	jr 2F
397+  8E69 2A D4 84     8 ld hl,(Posicion_actual)
398+  8E6C CD 73 8E     	call DESPLZ_IZQ
399+  8E6F CD 56 8F     2 call Genera_coordenadas
400+  8E72 C9           	ret
401+  8E73
402+  8E73              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
403+  8E73              ;
404+  8E73              ;	22/9/22
405+  8E73
406+  8E73 CD 82 8E     DESPLZ_IZQ call Desplaza_izquierda
407+  8E76 CD 97 8E         call modifica_parametros_1er_DESPLZ
408+  8E79 CD B8 8E     	call Ciclo_completo_2
409+  8E7C 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
410+  8E7F CB BE        	res 7,(hl)
411+  8E81 C9           	ret
412+  8E82
413+  8E82 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
414+  8E85 47           	ld b,a
415+  8E86 2A DC 84     	ld hl,(Puntero_DESPLZ)
416+  8E89 2B           1 dec hl
417+  8E8A 2B           	dec hl
418+  8E8B 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
419+  8E8D 22 DC 84     	ld (Puntero_DESPLZ),hl
420+  8E90 CD 33 86     	call Extrae_address
421+  8E93 22 04 85     	ld (Caja_de_DESPLZ),hl
422+  8E96 C9           	ret
423+  8E97
424+  8E97              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
425+  8E97              ;
426+  8E97              ;	modifica_parametros_1er_DESPLZ
427+  8E97              ;
428+  8E97              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
429+  8E97              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
430+  8E97              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
431+  8E97
432+  8E97 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
433+  8E9A A7           	and a
434+  8E9B 20 17        	jr nz,1F
435+  8E9D 21 D3 84     	ld hl,Columns
436+  8EA0 34           	inc (hl)
437+  8EA1 3A E0 84     	ld a,(Cuad_objeto)
438+  8EA4 E6 01        	and 1
439+  8EA6 20 0C        	jr nz,1F
440+  8EA8 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
441+  8EAB 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
442+  8EAC 22 D4 84     	ld (Posicion_actual),hl
443+  8EAF CD DB 8E     	call Dec_CTRL_DESPLZ
444+  8EB2 18 03        	jr 2F
445+  8EB4 CD DB 8E     1 call Dec_CTRL_DESPLZ
446+  8EB7 C9           2 ret
447+  8EB8
448+  8EB8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
449+  8EB8              ;
450+  8EB8 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
451+  8EBB FE F8        	cp $f8
452+  8EBD 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
453+  8EBF 18 19        	jr 3f
454+  8EC1 21 D3 84     1 ld hl,Columns
455+  8EC4 35           	dec (hl)
456+  8EC5 AF           	xor a
457+  8EC6 32 D8 84     	ld (CTRL_DESPLZ),a
458+  8EC9 3A E0 84     	ld a,(Cuad_objeto)
459+  8ECC E6 01        	and 1
460+  8ECE 28 07        	jr z,2F
461+  8ED0 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
462+  8ED3 2B           	dec hl
463+  8ED4 22 D4 84     	ld (Posicion_actual),hl
464+  8ED7 CD 56 8F     2 call Genera_coordenadas
465+  8EDA C9           3 ret
466+  8EDB
467+  8EDB              ; ---------- ---------- ---------- ---------- ---------- ----------
468+  8EDB              ;
469+  8EDB              ;	Dec_CTRL_DESPLZ
470+  8EDB              ;
471+  8EDB              ;	Subrutina de [modifica_punteros].
472+  8EDB              ;
473+  8EDB              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
474+  8EDB
475+  8EDB 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
476+  8EDE 3A E3 84     	ld a,(Vel_left)
477+  8EE1 A7           	and a
478+  8EE2 28 06        	jr z,1F
479+  8EE4 47           	ld b,a
480+  8EE5 35           3 dec (hl)
481+  8EE6 10 FD        	djnz 3B
482+  8EE8 18 01        	jr 2F
483+  8EEA 35           1 dec (hl)
484+  8EEB C9           2 ret
485+  8EEC
486+  8EEC              ; ---------- ---------- ---------- ---------- ---------- ----------
487+  8EEC              ;
488+  8EEC              ;	19/10/22
489+  8EEC              ;
490+  8EEC              ;	(cp 29) para un Amadeus de 3 Columns.
491+  8EEC              ;	(cp 30)   ""  ""    ""     2 Columns.
492+  8EEC
493+  8EEC 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
494+  8EEF FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
495+  8EF1 C9           	ret
496+  8EF2
497+  8EF2              ; ---------- ---------- ---------- ---------- ---------- ----------
498+  8EF2              ;
499+  8EF2              ;	19/10/22
500+  8EF2              ;
501+  8EF2              ;	(cp 2) para un Amadeus de 3 Columns.
502+  8EF2              ;	(cp 1)   ""  ""    ""     2 Columns.
503+  8EF2
504+  8EF2 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
505+  8EF5 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
506+  8EF7 C9           	ret
507+  8EF8
508+  8EF8              ; ---------- ---------- ---------- ---------- ---------- ----------
509+  8EF8              ;
510+  8EF8              ;	24/7/22
511+  8EF8              ;
512+  8EF8              ;	Inc_CTRL_DESPLZ
513+  8EF8              ;
514+  8EF8              ;	Subrutina de [modifica_punteros].
515+  8EF8              ;
516+  8EF8              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
517+  8EF8
518+  8EF8 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
519+  8EFB 3A E4 84     	ld a,(Vel_right)
520+  8EFE A7           	and a
521+  8EFF 28 06        	jr z,1F
522+  8F01 47           	ld b,a
523+  8F02 34           3 inc (hl)
524+  8F03 10 FD        	djnz 3B
525+  8F05 18 01        	jr 2F
526+  8F07 34           1 inc (hl)
527+  8F08 C9           2 ret
528+  8F09
529+  8F09              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F09
531+  8F09 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
532+  8F0C 01 1F 00     	ld bc,31
533+  8F0F A7           	and a
534+  8F10 ED 4A        	adc hl,bc
535+  8F12 22 D4 84     	ld (Posicion_actual),hl
536+  8F15 21 F5 84     	ld hl,Ctrl_0														; $xxx1
537+  8F18 CB C6        	set 0,(hl)
538+  8F1A C9           	ret
539+  8F1B
540+  8F1B              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F1B
542+  8F1B 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
543+  8F1E 01 1F 00     	ld bc,31
544+  8F21 A7           	and a
545+  8F22 ED 42        	sbc hl,bc
546+  8F24 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
547+  8F27 21 F5 84     	ld hl,Ctrl_0
548+  8F2A CB CE        	set 1,(hl)
549+  8F2C C9           	ret
550+  8F2D
551+  8F2D              ; ---------- ---------- ---------- ---------- ---------- ----------
552+  8F2D
553+  8F2D 24           Reaparece_abajo inc h
554+  8F2E 01 E0 17     	ld bc,$17e0
555+  8F31 A7           	and a
556+  8F32 ED 4A        	adc hl,bc
557+  8F34 22 D4 84     	ld (Posicion_actual),hl
558+  8F37 21 F5 84     	ld hl,Ctrl_0
559+  8F3A CB D6        	set 2,(hl)
560+  8F3C C9           	ret
561+  8F3D
562+  8F3D              ; ---------- ---------- ---------- ---------- ---------- ----------
563+  8F3D
564+  8F3D 01 E0 17     Reaparece_arriba ld bc,$17e0
565+  8F40 A7           	and a
566+  8F41 ED 42        	sbc hl,bc
567+  8F43 22 D4 84     	ld (Posicion_actual),hl
568+  8F46 21 F5 84     	ld hl,Ctrl_0
569+  8F49 CB DE        	set 3,(hl)
570+  8F4B C9           	ret
571+  8F4C
572+  8F4C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
573+  8F4C
574+  8F4C 2A DE 84     Reinicio ld hl,(Posicion_inicio)
575+  8F4F
576+  8F4F              ;	ld (Posicion_actual),hl
577+  8F4F 21 00 00     	ld hl,0
578+  8F52 22 D4 84     	ld (Posicion_actual),hl
579+  8F55
580+  8F55
581+  8F55 C9           	ret
# file closed: Direcciones.asm
604   8F56              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F56              ;	12/12/22
  2+  8F56              ;
  3+  8F56              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F56              ;	Fila superior "0", Columna izquierda "0".
  5+  8F56              ;
  6+  8F56              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F56              ;
  8+  8F56              ;	Modifica: A
  9+  8F56
 10+  8F56 C5           Genera_coordenadas push bc
 11+  8F57 E5           	push hl
 12+  8F58 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F5B 7D           	ld a,l
 14+  8F5C E6 1F        	and $1f
 15+  8F5E 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F61 CD 19 8C     	call calcula_tercio
 17+  8F64 47           	ld b,a
 18+  8F65 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F66 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F68 7D           	ld a,l
 21+  8F69 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F6B 28 05        	jr z,2F
 23+  8F6D 0C           1 inc c
 24+  8F6E D6 20        	sub 32
 25+  8F70 20 FB        	jr nz,1B
 26+  8F72 0C           2 inc c
 27+  8F73 04           	inc b
 28+  8F74 05           	dec b
 29+  8F75 28 04        	jr z,3F
 30+  8F77 3E E0        	ld a,$e0
 31+  8F79 10 F2        	djnz 1B
 32+  8F7B 79           3 ld a,c
 33+  8F7C 3D           	dec a
 34+  8F7D 32 E2 84     	ld (Coordenada_y),a
 35+  8F80 E1           	pop hl
 36+  8F81 C1           	pop bc
 37+  8F82 C9           	ret
# file closed: Genera_coordenadas.asm
605   8F83              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F83
  2+  8F83
  3+  8F83              ;   11/8/22
  4+  8F83              ;
  5+  8F83              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F83              ;
  7+  8F83              ;   Mov_obj.asm
  8+  8F83              ;
  9+  8F83              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F83              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F83              ;
 12+  8F83              ;   Codificación:
 13+  8F83              ;
 14+  8F83              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F83              ;
 16+  8F83
 17+  8F83 02 10 00     Izquierda db 2,%00010000,0
 18+  8F86 02 20 00     Derecha db 2,%00100000,0
 19+  8F89 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F8D 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F91 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F95 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F99 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F9D 60 42 60 40
 23+  8FA1 63
 24+  8FA2 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FA6 22 A3 80 A0
 25+  8FAA 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FAE 84 A0 83 A0
 26+  8FB2 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FB6 80 A3 22 A0
 27+  8FBA 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FBE 40 60 42 60
 28+  8FC2 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FC6
 30+  8FC6 86 8F        Indice_mov_Badsat defw Derecha
 31+  8FC8 8D 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FCA 95 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FCC 89 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FCE
 35+  8FCE 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FD1 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FD2 28 02            jr z,1F
 38+  8FD4 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FD6
 40+  8FD6 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FD9 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FDB 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FDE              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FDE 2A F9 84         ld hl,(Puntero_mov)
 45+  8FE1 7E               ld a,(hl)
 46+  8FE2 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FE5 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FE6 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FE9
 50+  8FE9 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  8FEC A7               and a
 52+  8FED 20 0C            jr nz,12F
 53+  8FEF 2A F9 84         ld hl,(Puntero_mov)
 54+  8FF2 7E               ld a,(hl)
 55+  8FF3 A7               and a
 56+  8FF4 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FF6
 58+  8FF6 E6 0F            and $0f
 59+  8FF8 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  8FFB              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  8FFB 2A F9 84     12 ld hl,(Puntero_mov)
 62+  8FFE CB 7E            bit 7,(hl)
 63+  9000 28 03            jr z,2F
 64+  9002 CD 65 8C         call Mov_down
 65+  9005 2A F9 84     2 ld hl, (Puntero_mov)
 66+  9008 CB 76            bit 6,(hl)
 67+  900A 28 03            jr z,3F
 68+  900C CD 93 8C         call Mov_up
 69+  900F 2A F9 84     3 ld hl, (Puntero_mov)
 70+  9012 CB 6E            bit 5,(hl)
 71+  9014 28 03            jr z,4F
 72+  9016 CD C1 8C         call Mov_right
 73+  9019 2A F9 84     4 ld hl, (Puntero_mov)
 74+  901C CB 66            bit 4,(hl)
 75+  901E 28 03            jr z,5F
 76+  9020 CD D0 8D         call Mov_left
 77+  9023
 78+  9023              ; ---------- --------- --------- ---------- ----------
 79+  9023
 80+  9023 3A FD 84     5 ld a,(Repetimos_db)
 81+  9026 A7               and a
 82+  9027 28 07            jr z,6F
 83+  9029 3D               dec a
 84+  902A 32 FD 84         ld (Repetimos_db),a
 85+  902D 28 01            jr z,6f
 86+  902F C9           11 ret
 87+  9030 21 FB 84     6 ld hl,Contador_db_mov
 88+  9033 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9034 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9037 23               inc hl
 91+  9038 22 F9 84         ld (Puntero_mov),hl
 92+  903B 18 F2            jr 11B
 93+  903D 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9040 3A FC 84         ld a,(Incrementa_puntero)
 95+  9043 47               ld b,a
 96+  9044 23           8 inc hl
 97+  9045 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9047 5E               ld e,(hl)
 99+  9048 23               inc hl
100+  9049 56               ld d,(hl)
101+  904A EB               ex de,hl
102+  904B 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  904E 18 DF            jr 11B
104+  9050
105+  9050              ; ---------- --------- --------- ---------- ----------
106+  9050              ;
107+  9050              ;   11/8/22
108+  9050              ;
109+  9050              ;   Prepara_Puntero_mov
110+  9050
111+  9050 E5           Prepara_Puntero_mov push hl
112+  9051 D5               push de
113+  9052 2A F7 84         ld hl,(Puntero_indice_mov)
114+  9055 5E               ld e,(hl)
115+  9056 23               inc hl
116+  9057 56               ld d,(hl)
117+  9058 EB               ex de,hl
118+  9059 22 F9 84         ld (Puntero_mov),hl
119+  905C D1               pop de
120+  905D E1               pop hl
121+  905E C9               ret
122+  905F
123+  905F              ; ---------- --------- --------- ---------- ----------
124+  905F              ;
125+  905F              ;   11/8/22
126+  905F              ;
127+  905F              ;   Reinicia_el_movimiento
128+  905F
129+  905F CD 50 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  9062 AF               xor a
131+  9063 32 FB 84         ld (Contador_db_mov),a
132+  9066 32 FC 84         ld (Incrementa_puntero),a
133+  9069 C3 CE 8F         jp Movimiento
134+  906C
135+  906C              ; ---------- --------- --------- ---------- ----------
136+  906C
137+  906C
138+  906C
139+  906C
140+  906C
141+  906C
142+  906C
143+  906C
144+  906C
145+  906C
146+  906C
147+  906C
148+  906C
149+  906C
150+  906C
151+  906C
152+  906C
153+  906C
# file closed: Patrones_de_mov.asm
606   906C              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  906C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  906C              ;
  3+  906C              ;	3/1/23
  4+  906C              ;
  5+  906C              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  906C
  7+  906C              ;	ADC HL,SP	LD (addr),SP
  8+  906C              ;	ADD HL,SP	LD SP,(addr)
  9+  906C              ;	ADD IX,SP	LD SP,nn
 10+  906C              ; 	ADD IY,SP	LD SP,HL
 11+  906C              ;				LD SP,IX
 12+  906C              ;	DEC SP		LD SP,IY
 13+  906C
 14+  906C              ;	EX (SP),HL
 15+  906C              ;	EX (SP),IX
 16+  906C              ;	EX (SP),IY
 17+  906C
 18+  906C              ;	INC SP
 19+  906C
 20+  906C
 21+  906C                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
607   7FC0
608   7FC0              	SAVESNA "Pruebas.sna", START
609   7FC0
610   7FC0
611   7FC0
# file closed: Banco_de_pruebas.asm
