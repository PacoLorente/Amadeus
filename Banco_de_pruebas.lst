# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 59 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00 00 00     	db 0,0,0
 26+  83D7
 27+  83D7 05           	db %00000101
 28+  83D8 00 83        	defw Indice_Amadeus
 29+  83DA 00 00        	defw 0
 30+  83DC CF 50        	defw $50cf
 31+  83DE 00           	db 0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00 00 00     	db 0,0,0
 61+  840B
 62+  840B 06           	db %00000110
 63+  840C 80 81        	defw Indice_Badsat_der
 64+  840E 00 00        	defw 0
 65+  8410 A1 47        	defw $47a1
 66+  8412 00           	db 0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 B2 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00 00 00     	db 0,0,0                                          ; CTRL_DESPLZ
 96+  843F
 97+  843F 02           	db %00000010
 98+  8440 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8442 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8444 61 47        	defw $4761                                        ; Posicion_inicio
101+  8446 00           	db 0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 B4 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00 00 00     	db 0,0,0                                          ; CTRL_DESPLZ
131+  8473
132+  8473 04           	db %00000100
133+  8474 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8476 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8478 7E 47        	defw $477e                                        ; Posicion_inicio
136+  847A 00           	db 0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B B6 8F 00 00  	defw Indice_mov_Badsat3,0                         ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00 00 00     	db 0,0,0                                          ; CTRL_DESPLZ
166+  84A7
167+  84A7 01           	db %00000001
168+  84A8 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84AA 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AC BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AE 00           	db 0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF B8 8F 00 00  	defw Indice_mov_Badsat4,0                         ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D2
 51   84D2 02           Filas db 2												; Filas. [DRAW]
 52   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 54   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D9 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84DA 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84DB
 62   84DB              ; ---------- ---------- ----------
 63   84DB
 64   84DB
 65   84DB 06           Attr db %00000110										; Atributos de la entidad:
 66   84DC
 67   84DC              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DC              ;
 69   84DC              ;	COLORES: 0 ..... NEGRO
 70   84DC              ;    		 1 ..... AZUL
 71   84DC              ; 			 2 ..... ROJO
 72   84DC              ;			 3 ..... MAGENTA
 73   84DC              ; 			 4 ..... VERDE
 74   84DC              ; 			 5 ..... CIAN
 75   84DC              ;			 6 ..... AMARILLO
 76   84DC              ; 			 7 ..... BLANCO
 77   84DC
 78   84DC 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DE 00 00        Puntero_DESPLZ defw 0
 80   84E0 29 47        Posicion_inicio defw $4729								; Dirección de pantalla donde aparece el objeto. [DRAW]
 81   84E2 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E3
 83   84E3              ; Variables de objeto. (Características).
 84   84E3
 85   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E7
 90   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84EB 00 00        	defw 0
 93   84ED 00 00 00     	db 0,0,0
 94   84F0
 95   84F0 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F2 00 00        	defw 0
 97   84F4 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F6 00 00 00     	db 0,0,0
 99   84F9
100   84F9              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F9
102   84F9 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84FA              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84FA              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84FA              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84FA              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84FA              ;
108   84FA              ; 														DESCRIPCIÖN:
109   84FA              ;
110   84FA              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84FA              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84FA              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84FA              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84FA              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84FA              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84FA              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84FA              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84FA              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84FA              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84FA              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84FA              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84FA              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84FA              ;
124   84FA              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84FA              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84FA              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84FA
128   84FA 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84FB
130   84FB              ; Movimiento.
131   84FB
132   84FB B2 8F        Puntero_indice_mov defw Indice_mov_Badsat
133   84FD 00 00        Puntero_mov defw 0
134   84FF 00           Contador_db_mov db 0
135   8500 00           Incrementa_puntero db 0
136   8501 00           Repetimos_db db 0
137   8502
138   8502
139   8502              ; Variables de funcionamiento. [DRAW].
140   8502
141   8502 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
142   8504 00           Columnas db 0
143   8505 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
144   8507              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8507 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   8508
147   8508
148   8508              ; Cajas. Almacenes.
149   8508
150   8508 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
151   850A 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
152   850C
153   850C              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   850C
155   850C              ; Gestión de ENTIDADES.
156   850C
157   850C 00 00        Puntero_store_entidades defw 0
158   850E 00 00        Puntero_restore_entidades defw 0
159   8510 00 00        Indice_restore defw 0
160   8512
161   8512              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
162   8512
163   8512 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
164   8513 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
165   8514              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
166   8514              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
167   8514              ;														; _ (Numero_de_malotes)="0".
168   8514 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
169   8516              ;														; _variable para almacenar lo posición del puntero_
170   8516              ; 														; _de pila, SP.
171   8516 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
172   8518              ;														; La utiliza la rutina [Extrae_foto_registros].
173   8518 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
174   851A              ;														; _el snapshot de los registros de la siguiente entidad.
175   851A              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
176   851A
177   851A              ; Gestión de FRAMES.
178   851A
179   851A 00           Switch db 0
180   851B
181   851B              ; Variables de Raster y localización en pantalla.
182   851B
183   851B 00 FF        Temp_Raster defw $ff00
184   851D
185   851D              ; Rutina principal *************************************************************************************************************************************************************************
186   851D              ;
187   851D              ;	14/11/22
188   851D
189   851D 31 FF FF     START ld sp,$ffff
190   8520
191   8520 3E A0        	ld a,$a0
192   8522 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
193   8524 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
194   8526 F3           	DI
195   8527
196   8527 3E 01        	ld a,1
197   8529 D3 FE        	out ($fe),a
198   852B
199   852B 3E 07        	ld a,%00000111
200   852D CD 5C 8C     	call Cls
201   8530
202   8530              ;	call Pinta_FILAS
203   8530
204   8530 CD 93 86     	call Pulsa_ENTER
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 06 86     	call Inicia_punteros_de_entidades
211   8536 21 12 85     	ld hl,Numero_de_entidades
212   8539 46           	ld b,(hl)
213   853A
214   853A C5           1 push bc  												; Guardo el contador de entidades.
215   853B CD 35 86      	call Inicia_Puntero_objeto
216   853E CD EA 86     	call Draw
217   8541 CD A0 7F     	call Guarda_foto_registros
218   8544 CD 52 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8547 C1           	pop bc
220   8548 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   854A
222   854A              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
223   854A
224   854A CD 06 86     	call Inicia_punteros_de_entidades
225   854D CD 81 86     	call Restore_Primera_entidad
226   8550
227   8550 3A 12 85     	ld a,(Numero_de_entidades)
228   8553 32 13 85     	ld (Numero_de_malotes),a
229   8556
230   8556 FB           2 ei
231   8557 18 FD        	jr 2B
232   8559
233   8559              ; -----------------------------------------------------------------------------------
234   8559
235   8559              Frame
236   8559
237   8559              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
238   8559              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
239   8559
240   8559 3E 07            ld a,7
241   855B D3 FE            out ($fe),a
242   855D
243   855D CD E9 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
244   8560
245   8560 3E 01            ld a,1
246   8562 D3 FE            out ($fe),a
247   8564
248   8564              ; ----------------------------------------------------------------------
249   8564
250   8564 21 00 70     	ld hl,Album_de_fotos
251   8567 22 18 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
252   856A              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
253   856A 3A 12 85         ld a,(Numero_de_entidades)
254   856D 47               ld b,a
255   856E
256   856E C5           2 push bc
257   856F
258   856F CD 95 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
259   8572
260   8572 3A F9 84      	ld a,(Ctrl_0)
261   8575 CB 67        	bit 4,a
262   8577 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
263   8579
264   8579 CD CD 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
265   857C
266   857C 21 F9 84     	ld hl,Ctrl_0
267   857F CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
268   8581
269   8581 CD 52 86     1 call Store_Restore_entidades
270   8584
271   8584 C1           	pop bc
272   8585 10 E7        	djnz 2B
273   8587
274   8587 CD 06 86     	call Inicia_punteros_de_entidades
275   858A CD 81 86     	call Restore_Primera_entidad
276   858D CD 1C 86     	call Calcula_numero_de_malotes
277   8590
278   8590 3E 00        	ld a,0
279   8592 D3 FE        	out ($fe),a
280   8594
281   8594 C9           	ret
282   8595
283   8595              ; --------------------------------------------------------------------------------------------------------------
284   8595              ;
285   8595              Mov_obj
286   8595
287   8595              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
288   8595
289   8595 AF           	xor a
290   8596 32 FA 84     	ld (Obj_dibujado),a
291   8599 CD D7 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
292   859C              ;														; Obj_dibujado="0".
293   859C              ; Movemos Amadeus o enemigos...
294   859C
295   859C 3A F9 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
296   859F CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
297   85A1 C4 A7 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
298   85A4
299   85A4 3A F9 84     	ld a,(Ctrl_0)
300   85A7 CB 77        	bit 6,a
301   85A9 CC BA 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
302   85AC
303   85AC 3A F9 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
304   85AF CB 67        	bit 4,a
305   85B1 C8           	ret z
306   85B2
307   85B2              ; ---------
308   85B2
309   85B2 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
310   85B4 32 FA 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
311   85B7 CD D7 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
312   85BA
313   85BA CD EE 85         call Repone_borrar
314   85BD
315   85BD              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
316   85BD
317   85BD CD BF 89     	call Prepara_draw
318   85C0 CD F9 88     	call calcula_CColumnass
319   85C3 CD 30 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
320   85C6 CD 85 89     	call Define_rutina_de_impresion
321   85C9 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
322   85CC
323   85CC C9           	ret
324   85CD
325   85CD              ; --------------------------------------------------------------------------------------------------------------
326   85CD              ;
327   85CD CD FA 85     Borra_Pinta_obj call Repone_pintar
328   85D0 CD EA 86     	call Draw
329   85D3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
330   85D6 C9           	ret
331   85D7
332   85D7              ; --------------------------------------------------------------------------------------------------------------
333   85D7
334   85D7 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
335   85DA 3A FA 84     	ld a,(Obj_dibujado)
336   85DD A7           	and a
337   85DE 28 05        	jr z,1F
338   85E0 11 F0 84     	ld de,Variables_de_pintado
339   85E3 18 03        	jr 2F
340   85E5 11 E7 84     1 ld de,Variables_de_borrado
341   85E8 01 09 00     2 ld bc,9
342   85EB ED B0        	ldir
343   85ED C9           	ret
344   85EE
345   85EE 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
346   85F1 11 D2 84     	ld de,Filas
347   85F4 01 09 00     	ld bc,9
348   85F7 ED B0        	ldir
349   85F9 C9           	ret
350   85FA
351   85FA 21 F0 84     Repone_pintar ld hl,Variables_de_pintado
352   85FD 11 D2 84     	ld de,Filas
353   8600 01 09 00     	ld bc,9
354   8603 ED B0        	ldir
355   8605 C9           	ret
356   8606
357   8606              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
358   8606              ;	ld (Caja_de_BORRADO),hl
359   8606              ;	ret
360   8606
361   8606              ; *************************************************************************************************************************************************************
362   8606              ;
363   8606              ; 8/1/23
364   8606              ;
365   8606              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
366   8606              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
367   8606              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
368   8606
369   8606              ; Destruye HL y DE !!!!!
370   8606
371   8606 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
372   8609 CD 2F 86         call Extrae_address
373   860C 22 0C 85         ld (Puntero_store_entidades),hl
374   860F 21 C2 83     	ld hl,Indice_de_entidades+2
375   8612 22 10 85     	ld (Indice_restore),hl
376   8615 CD 2F 86     	call Extrae_address
377   8618 22 0E 85     	ld (Puntero_restore_entidades),hl
378   861B C9               ret
379   861C
380   861C              ; -------------------------------------------------------------------------------------------------------------
381   861C              ;
382   861C              ; 7/1/23
383   861C              ;
384   861C
385   861C 2A 18 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
386   861F AF           	xor a
387   8620 67           	ld h,a
388   8621 7D           	ld a,l
389   8622 D6 06        1 sub 6
390   8624 28 03        	jr z,2F
391   8626 24           	inc h
392   8627 18 F9        	jr 1B
393   8629 24           2 inc h
394   862A 7C           	ld a,h
395   862B 32 13 85     	ld (Numero_de_malotes),a
396   862E C9           	ret
397   862F
398   862F              ; *************************************************************************************************************************************************************
399   862F              ;
400   862F              ; 20/10/22
401   862F              ;
402   862F              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
403   862F              ;
404   862F              ; Destruye el puntero y DE !!!!!
405   862F
406   862F 5E           Extrae_address ld e,(hl)
407   8630 23           	inc hl
408   8631 56           	ld d,(hl)
409   8632 2B           	dec hl
410   8633 EB           	ex de,hl
411   8634 C9           	ret
412   8635
413   8635              ; *************************************************************************************************************************************************************
414   8635              ;
415   8635              ;	21/9/22
416   8635              ;
417   8635              ;   Destruye HL y BC !!!!!,
418   8635
419   8635 2A DC 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
420   8638 22 DE 84     	ld (Puntero_DESPLZ),hl
421   863B CD 2F 86     	call Extrae_address
422   863E 22 D6 84     	ld (Puntero_objeto),hl
423   8641
424   8641              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
425   8641
426   8641 21 10 83     	ld hl,Amadeus
427   8644 ED 4B D6 84  	ld bc,(Puntero_objeto)
428   8648 B7 ED 42     	sub hl,bc
429   864B C0           	ret nz
430   864C
431   864C 21 F9 84     	ld hl,Ctrl_0
432   864F CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
433   8651
434   8651 C9            	ret 												; _de nuestra nave en los extremos.
435   8652
436   8652              ; *************************************************************************************************************************************************************
437   8652              ;
438   8652              ;	8/1/23
439   8652              ;
440   8652              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
441   8652              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
442   8652
443   8652              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
444   8652              ;	_de la 2ª y 3ª entidad respectivamente.
445   8652
446   8652
447   8652
448   8652              Store_Restore_entidades
449   8652
450   8652 E5           	push hl
451   8653 D5           	push de
452   8654 C5            	push bc
453   8655
454   8655              ;	STORE !!!!!
455   8655
456   8655 21 D2 84     	ld hl,Filas
457   8658 ED 5B 0C 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
458   865C 01 36 00     	ld bc,54
459   865F ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
460   8661
461   8661              ;	Incrementa STORE y ejecuta RESTORE !!!!!
462   8661
463   8661 2A 0E 85     	ld hl,(Puntero_restore_entidades)
464   8664 22 0C 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
465   8667 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
466   866A 01 36 00     	ld bc,54
467   866D ED B0        	ldir
468   866F
469   866F              ;	Incrementa RESTORE !!!!!
470   866F
471   866F 2A 10 85         ld hl,(Indice_restore)
472   8672 23           	inc hl
473   8673 23           	inc hl
474   8674 22 10 85     	ld (Indice_restore),hl
475   8677 CD 2F 86         call Extrae_address
476   867A 22 0E 85         ld (Puntero_restore_entidades),hl
477   867D
478   867D C1           	pop bc
479   867E D1           	pop de
480   867F E1           	pop hl
481   8680
482   8680 C9           	ret
483   8681
484   8681              ; **************************************************************************************************
485   8681              ;
486   8681              ;	29/10/22
487   8681              ;
488   8681              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
489   8681
490   8681 E5           Restore_Primera_entidad push hl
491   8682 D5           	push de
492   8683 C5            	push bc
493   8684 2A 0C 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
494   8687 11 D2 84     	ld de,Filas
495   868A 01 36 00     	ld bc,54
496   868D ED B0        	ldir
497   868F C1           	pop bc
498   8690 D1           	pop de
499   8691 E1           	pop hl
500   8692 C9           	ret
501   8693
502   8693              ; *************************************************************************************************************************************************************
503   8693              ;
504   8693              ; Teclado.
505   8693
506   8693 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
507   8695 DB FE        	in a,($fe)
508   8697 E6 01        	and $01
509   8699 28 02        	jr z,1f
510   869B 18 F6        	jr Pulsa_ENTER
511   869D C9           1 ret
512   869E
513   869E              ; **************************************************************************************************
514   869E              ;
515   869E              ; Temporización.
516   869E
517   869E              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
518   869E              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
519   869E              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
520   869E              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
521   869E
522   869E              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
523   869E              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
524   869E              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
525   869E
526   869E              ; A partir de $4f61 no hace falta DELAY.
527   869E
528   869E              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
529   869E
530   869E 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
531   86A1 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
532   86A2 78           	LD A,B
533   86A3 A7           	AND A
534   86A4 20 FB        	JR NZ,wait
535   86A6 C9           	RET
536   86A7
537   86A7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
538   86A7              ;
539   86A7              ;	21/4/22
540   86A7
541   86A7              Movimiento_Amadeus
542   86A7
543   86A7 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
544   86A9 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
545   86AB E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
546   86AD CC BF 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
547   86B0 3E F7        	ld a,$f7
548   86B2 DB FE        	in a,($fe)
549   86B4 E6 01        	and $01
550   86B6 C8           	ret z
551   86B7 3E F7        	ld a,$f7
552   86B9 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
553   86BB E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
554   86BD CC CC 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
555   86C0 C9               ret
556   86C1
557   86C1              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
558   86C1
559   86C1              ; Pinta indicadores de FILAS. ------------------------------------------------------
560   86C1
561   86C1 21 10 40     Pinta_FILAS ld hl,$4010
562   86C4              ;	ld b,9
563   86C4              ;2 push hl
564   86C4              ;	push bc
565   86C4 06 BF        	ld b,$bf
566   86C6 36 80        1 ld (hl),%10000000
567   86C8 CD CB 89     	call NextScan
568   86CB 10 F9        	djnz 1B
569   86CD              ;	pop bc
570   86CD              ;	pop hl
571   86CD              ;	inc l
572   86CD              ;	djnz 2B
573   86CD
574   86CD 06 03        	ld b,3
575   86CF 21 00 47         ld hl,$4700
576   86D2 CD D8 86     3 call Bucle_1
577   86D5 10 FB            djnz 3B
578   86D7 C9               ret
579   86D8
580   86D8 C5           Bucle_1 push bc
581   86D9 E5                   push hl
582   86DA D1                   pop de
583   86DB 13                   inc de
584   86DC 01 FF 00             ld bc,255
585   86DF 36 FF                ld (hl),255
586   86E1 ED B0                ldir
587   86E3 23                   inc hl
588   86E4 3E 07                ld a,7
589   86E6 84                   add a,h
590   86E7 67                   ld h,a
591   86E8 C1                   pop bc
592   86E9 C9                   ret
593   86EA
594   86EA              ; ---------------------------------------------------------------
595   86EA
596   86EA              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86EA              ; ******************************************************************************************************************************************************************************************
  2+  86EA              ;
  3+  86EA              ; 01/23
  4+  86EA              ;
  5+  86EA              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86EA
  7+  86EA CD BF 89     Draw call Prepara_draw
  8+  86ED 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86EE A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86EF 28 05        	jr z,2F
 11+  86F1 3A E2 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F4 18 0C        	jr 1F
 13+  86F6 2A E0 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F9 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86FC CD 86 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86FF              ;													; _la esquina superior izquierda de la pantalla.
 17+  86FF CD 3C 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8702 3A F9 84     1 ld a,(Ctrl_0)
 19+  8705 CB 6F        	bit 5,a
 20+  8707 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8709
 22+  8709 CD 21 87     	call Comprueba_limite_horizontal
 23+  870C CD AF 87     	call Comprueba_limite_vertical
 24+  870F
 25+  870F              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  870F
 27+  870F CD F9 88     3 call calcula_CColumnass
 28+  8712 CD 30 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  8715 CD 85 89     	call Define_rutina_de_impresion
 30+  8718
 31+  8718 3A F9 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  871B CB AF        	res 5,a											; _a ser de utilidad.
 33+  871D 32 F9 84     	ld (Ctrl_0),a
 34+  8720
 35+  8720 C9           	ret
 36+  8721
 37+  8721              ; *******************************************************************************************************************************************************************************************
 38+  8721              ;	17/1/23
 39+  8721              ;
 40+  8721              ; 	Comprueba_limite_horizontal.
 41+  8721              ;
 42+  8721
 43+  8721              Comprueba_limite_horizontal
 44+  8721
 45+  8721 3A F9 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^1F^ para comprobar_
 46+  8724 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 47+  8726 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 48+  8728
 49+  8728 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 50+  872A 32 F9 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 51+  872D 18 09            jr 6F
 52+  872F CB 5F        1 bit 3,a
 53+  8731 28 0A            jr z,2F
 54+  8733 E6 F7            and $f7
 55+  8735 32 F9 84         ld (Ctrl_0),a
 56+  8738
 57+  8738 CD 86 88     6 call Inicializacion
 58+  873B
 59+  873B 18 59            jr 5F
 60+  873D E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 61+  873E
 62+  873E              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 63+  873E              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 64+  873E
 65+  873E EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 66+  873F 2A 05 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 67+  8742 CD 24 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 68+  8745 67           	ld h,a
 69+  8746 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 70+  8747 CD 24 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 71+  874A 67           	ld h,a
 72+  874B A7           	and a
 73+  874C ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 74+  874E 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 75+  874F
 76+  874F 3A E2 84     	ld a,(Cuad_objeto)
 77+  8752 FE 02        	cp 2
 78+  8754 38 1C        	jr c,3F
 79+  8756 28 1A        	jr z,3F
 80+  8758
 81+  8758 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 82+  8759 28 21            jr z,7F
 83+  875B 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 84+  875D              ;	ld e,0
 85+  875D E1           	pop hl
 86+  875E
 87+  875E              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 88+  875E              ; _para indicar con E="2" en caso necesario.
 89+  875E
 90+  875E E5               push hl
 91+  875F C5               push bc
 92+  8760
 93+  8760 CD 24 8C     	call calcula_tercio
 94+  8763 FE 01        	cp 1
 95+  8765 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 96+  8767
 97+  8767 CD 97 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  876A 28 26            jr z,9F
 99+  876C 38 24            jr c,9F
100+  876E 1E 00        11 ld e,0
101+  8770 18 22            jr 8F
102+  8772
103+  8772 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8773 28 07        	jr z, 7F
105+  8775 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8777 1E 00         	ld e,0
107+  8779 E1           	pop hl
108+  877A 18 04        	jr 4F
109+  877C 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  877E 18 15            jr 10F
111+  8780
112+  8780              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8780              ; _para indicar con E="2" en caso necesario.
114+  8780
115+  8780 E5           4 push hl
116+  8781 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8782
118+  8782 CD 24 8C     	call calcula_tercio
119+  8785 FE 01        	cp 1
120+  8787 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
121+  8789 CD 97 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
122+  878C 28 04            jr z,9F
123+  878E 30 02            jr nc,9F
124+  8790 18 02        	jr 8F
125+  8792 1E 02        9 ld e,2
126+  8794 C1           8 pop bc
127+  8795 E1           10 pop hl
128+  8796 C9           5 ret
129+  8797
130+  8797              ; --------------------
131+  8797              ;
132+  8797              ; 25/08/22
133+  8797
134+  8797 CD 24 8C     Comprueba_centro call calcula_tercio
135+  879A 67               ld h,a
136+  879B 08           	ex af,af
137+  879C FE 02        	cp 2
138+  879E 38 07        	jr c,1F
139+  87A0 28 05        	jr z,1F
140+  87A2 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
141+  87A5 18 03        	jr 2F
142+  87A7 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
143+  87AA 08           2 ex af,af
144+  87AB A7               and a
145+  87AC ED 42            sbc hl,bc
146+  87AE C9               ret
147+  87AF
148+  87AF              ; *********************************************************************************************************************************************************************************************
149+  87AF              ;
150+  87AF              ;   16/8/22
151+  87AF              ;
152+  87AF              ;	Comprueba_limite_vertical
153+  87AF              ;
154+  87AF              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
155+  87AF              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
156+  87AF              ;
157+  87AF
158+  87AF              Comprueba_limite_vertical
159+  87AF
160+  87AF              ;	ld a,(Obj_dibujado)
161+  87AF              ;	and a
162+  87AF              ;	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
163+  87AF
164+  87AF              ;	jr $
165+  87AF
166+  87AF 7D           	ld a,l
167+  87B0 E6 1F        	and $1F
168+  87B2 57           	ld d,a
169+  87B3 3A 07 85     	ld a,(Limite_vertical)
170+  87B6 BA           	cp d 											; Límite - Posición.
171+  87B7 08           	ex af,af 										; Resultado de CP d en F'.
172+  87B8
173+  87B8 3A E2 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
174+  87BB CB 47        	bit 0,a
175+  87BD 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
176+  87BF
177+  87BF              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
178+  87BF
179+  87BF 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
180+  87C0 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
181+  87C2
182+  87C2               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
183+  87C2              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
184+  87C2
185+  87C2 3A D9 84         ld a,(Coordenada_X)
186+  87C5 16 0F            ld d,Centro_izquierda
187+  87C7 A7               and a
188+  87C8 92               sub d 											 ; Posición - Centro_izquierda.
189+  87C9
190+  87C9 28 21            jr z,3F
191+  87CB 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
192+  87CD              ;                                                    ; _salimos sin modificar nada.
193+  87CD 18 0E            jr 2F
194+  87CF
195+  87CF 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
196+  87D0 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
197+  87D2
198+  87D2              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
199+  87D2              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
200+  87D2
201+  87D2 3A D9 84         ld a,(Coordenada_X)
202+  87D5 16 10            ld d,Centro_derecha
203+  87D7 A7               and a
204+  87D8 92               sub d
205+  87D9
206+  87D9 28 11            jr z,3F
207+  87DB 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
208+  87DD              ;                                                    ; _salimos sin modificar nada.
209+  87DD CB 43        2 bit 0,e
210+  87DF 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
211+  87E1 C5           	push bc
212+  87E2 CD 75 88         call Modificaccionne
213+  87E5 C1           	pop bc
214+  87E6 CD 86 88         call Inicializacion
215+  87E9 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
216+  87EA 08           	ex af,af
217+  87EB F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
218+  87EC C9           3 ret 				 								 ; Salimos de la rutina.
219+  87ED
220+  87ED              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
221+  87ED
222+  87ED C5           4 push bc
223+  87EE 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
224+  87F1 0A           	ld a,(bc)
225+  87F2 3D           	dec a
226+  87F3 47           	ld b,a 											 ; Columnas-1 en B.
227+  87F4 7D           	ld a,l
228+  87F5 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
229+  87F6 CB 47        	bit 0,a
230+  87F8 28 03        	jr z,5F
231+  87FA 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
232+  87FB 18 2E        	jr 7F
233+  87FD
234+  87FD              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
235+  87FD
236+  87FD 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
237+  87FE F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
238+  87FF 3A F9 84     	ld a,(Ctrl_0)
239+  8802 CB 4F        	bit 1,a
240+  8804 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
241+  8806 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
242+  8807
243+  8807              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
244+  8807
245+  8807 1C               inc e
246+  8808 1D               dec e
247+  8809 20 07            jr nz,12F
248+  880B 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
249+  880C 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
250+  880D 22 D4 84     	ld (Posicion_actual),hl
251+  8810 18 44        13 jr 9F
252+  8812
253+  8812 CB 43        12 bit 0,e
254+  8814 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
255+  8816              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
256+  8816 C1           	pop bc
257+  8817 18 D3        	jr 3B
258+  8819
259+  8819 80           14 add b
260+  881A 6F               ld l,a
261+  881B 22 D4 84     	ld (Posicion_actual),hl
262+  881E CD 75 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
263+  8821 18 33            jr 9F 											 ; _inicializamos y salimos.
264+  8823
265+  8823 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
266+  8825 32 F9 84         ld (Ctrl_0),a
267+  8828 F1           	pop af
268+  8829 18 2B        	jr 9F
269+  882B
270+  882B              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
271+  882B
272+  882B F5           7 push af
273+  882C 3A F9 84     	ld a,(Ctrl_0)
274+  882F CB 47        	bit 0,a
275+  8831 20 1D        	jr nz,8F
276+  8833 F1           	pop af
277+  8834
278+  8834              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
279+  8834
280+  8834 1C           	inc e
281+  8835 1D               dec e
282+  8836 20 07            jr nz,10F
283+  8838
284+  8838 90           	sub b
285+  8839 6F               ld l,a
286+  883A 22 D4 84     	ld (Posicion_actual),hl
287+  883D 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
288+  883F              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
289+  883F CB 43        10 bit 0,e
290+  8841 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
291+  8843              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
292+  8843 C1           	pop bc
293+  8844 18 A6        	jr 3B
294+  8846
295+  8846 90           16 sub b
296+  8847 6F               ld l,a
297+  8848 22 D4 84     	ld (Posicion_actual),hl
298+  884B CD 75 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
299+  884E 18 06            jr 9F
300+  8850
301+  8850 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
302+  8852 32 F9 84         ld (Ctrl_0),a
303+  8855 F1           	pop af
304+  8856
305+  8856 C1           9 pop bc
306+  8857              ;	ld e,0
307+  8857 CD 86 88         call Inicializacion
308+  885A F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
309+  885B 08           	ex af,af
310+  885C F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
311+  885D 18 8D            jr 3B
312+  885F
313+  885F              ; --------------------
314+  885F
315+  885F              Modifica_Pos_actual
316+  885F
317+  885F              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
318+  885F
319+  885F 05               dec B                                           ; Scanlines-1 en B.
320+  8860 CD DA 89     1 call PreviousScan
321+  8863 10 FB            djnz 1B
322+  8865 22 D4 84     	ld (Posicion_actual),hl
323+  8868 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
324+  8869 C9           	ret
325+  886A
326+  886A              ; --------------------
327+  886A
328+  886A              Modifica_Pos_actual2
329+  886A
330+  886A              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
331+  886A
332+  886A 05               dec B                                           ; Scanlines-1 en B.
333+  886B CD CB 89     1 call NextScan
334+  886E 10 FB            djnz 1B
335+  8870 22 D4 84     	ld (Posicion_actual),hl
336+  8873 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
337+  8874 C9           	ret
338+  8875
339+  8875              ; --------------------
340+  8875
341+  8875              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
342+  8875              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
343+  8875
344+  8875 08           Modificaccionne ex af,af
345+  8876 FE 02            cp 2
346+  8878 F5               push af                                         ; Guardo el resultado de la comparación.
347+  8879 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
348+  887A F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
349+  887B CC 5F 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
350+  887E DC 5F 88         call c,Modifica_Pos_actual
351+  8881 C8           	ret z
352+  8882 CD 6A 88         call Modifica_Pos_actual2
353+  8885 C9               ret
354+  8886
355+  8886              ; *************************************************************************************************************************************************************************************************
356+  8886              ;
357+  8886              ;	13/8/22
358+  8886              ;
359+  8886              ;	Inicializacion
360+  8886              ;
361+  8886              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
362+  8886              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
363+  8886              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
364+  8886              ;
365+  8886              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
366+  8886              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
367+  8886              ;	_ desaparece/aparece.
368+  8886
369+  8886              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
370+  8886              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
371+  8886              ;
372+  8886              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
373+  8886              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
374+  8886              ; 		   [E] ="0"
375+  8886
376+  8886              ; 	OUTPUT: DESTRUYE [AF] y [D].
377+  8886
378+  8886 CD 24 8C     Inicializacion call calcula_tercio
379+  8889 28 36        	jr z,primit
380+  888B E6 02        	and 2
381+  888D 20 07        	jr nz,segmit
382+  888F 7D           	ld a,l
383+  8890 FE 7F        	cp $7f
384+  8892 38 2D        	jr c,primit
385+  8894 28 2B        	jr z,primit
386+  8896 CD F3 88     segmit call column
387+  8899 38 13        	jr c,tercuad
388+  889B 3E 04        cuarcuad ld a,4
389+  889D 32 E2 84     	ld (Cuad_objeto),a
390+  88A0 21 20 48     	ld hl,$4820
391+  88A3 22 05 85     	ld (Limite_horizontal),hl
392+  88A6 21 07 85     	ld hl,Limite_vertical
393+  88A9 36 0D        	ld (hl),$0d
394+  88AB 08           	ex af,af
395+  88AC 18 3C        	jr 1F
396+  88AE              tercuad
397+  88AE              ;	call Fija_punteros
398+  88AE 3E 03        	ld a,3
399+  88B0 32 E2 84     	ld (Cuad_objeto),a
400+  88B3 21 20 48     	ld hl,$4820
401+  88B6 22 05 85     	ld (Limite_horizontal),hl
402+  88B9 21 07 85     	ld hl,Limite_vertical
403+  88BC 36 12        	ld (hl),$12
404+  88BE 08           	ex af,af
405+  88BF 18 29        	jr 1F
406+  88C1 CD F3 88     primit call column
407+  88C4 38 13        	jr c, primcuad
408+  88C6              segcuad
409+  88C6              ;	call Fija_punteros
410+  88C6 3E 02        	ld a,2
411+  88C8 32 E2 84     	ld (Cuad_objeto),a
412+  88CB 21 C0 4F     	ld hl,$4fc0
413+  88CE 22 05 85     	ld (Limite_horizontal),hl
414+  88D1 21 07 85     	ld hl,Limite_vertical
415+  88D4 36 0D        	ld (hl),$0d
416+  88D6 08           	ex af,af
417+  88D7 18 11        	jr 1F
418+  88D9              primcuad
419+  88D9              ;	call Fija_punteros
420+  88D9 3E 01        	ld a,1
421+  88DB 32 E2 84     	ld (Cuad_objeto),a
422+  88DE 21 C0 4F     	ld hl,$4fc0
423+  88E1 22 05 85     	ld (Limite_horizontal),hl
424+  88E4 21 07 85     	ld hl,Limite_vertical
425+  88E7 36 12        	ld (hl),$12
426+  88E9 08           	ex af,af
427+  88EA CD 42 8F     1 call Genera_coordenadas
428+  88ED 21 F9 84     	ld hl,Ctrl_0
429+  88F0 CB EE        	set 5,(hl)
430+  88F2 C9           	ret
431+  88F3
432+  88F3              ; ------------------------------------------------------------------------------------------------------------------
433+  88F3
434+  88F3              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
435+  88F3              ;
436+  88F3              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
437+  88F3
438+  88F3 7D           column ld a,l
439+  88F4 E6 1F        	and $1f
440+  88F6 FE 10         	cp $10
441+  88F8 C9            	ret
442+  88F9
443+  88F9              ; --------------------------------------------------------------------------------------------------------------------
444+  88F9              ;
445+  88F9              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
446+  88F9              ;
447+  88F9              ; 14/12/22
448+  88F9              ;
449+  88F9              ;	Modifica: A y BC.
450+  88F9
451+  88F9 3A E2 84     calcula_CColumnass ld a,(Cuad_objeto)
452+  88FC E6 01        	and 1
453+  88FE 28 17        	jr z,1F
454+  8900
455+  8900              ; Nos encontramos en la parte izquierda de la pantalla
456+  8900
457+  8900 3A D9 84     	ld a,(Coordenada_X)
458+  8903 47           	ld b,a
459+  8904 04           	inc b											; (Coordenada_X)+1 en B.
460+  8905 79           	ld a,c
461+  8906 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
462+  8907 38 08        	jr c,2F
463+  8909 47           	ld b,a
464+  890A 79           	ld a,c
465+  890B 90           	sub b
466+  890C 32 04 85     	ld (Columnas),a
467+  890F 18 1B        	jr 4F
468+  8911 79           2 ld a,c
469+  8912 32 04 85     	ld (Columnas),a
470+  8915 18 15        	jr 4F
471+  8917
472+  8917              ; Nos encontramos en la parte derecha de la pantalla.
473+  8917
474+  8917 3A D9 84     1 ld a,(Coordenada_X)
475+  891A 81           	add c
476+  891B 3D           	dec a
477+  891C D6 1F        	sub $1f
478+  891E 38 08        	jr c,3F
479+  8920 47           	ld b,a
480+  8921 79           	ld a,c
481+  8922 90           	sub b
482+  8923 32 04 85     	ld (Columnas),a
483+  8926 18 04        	jr 4F
484+  8928 79           3 ld a,c
485+  8929 32 04 85     	ld (Columnas),a
486+  892C D9           4 exx
487+  892D 4F           	ld c,a
488+  892E D9           	exx
489+  892F C9            ret
490+  8930
491+  8930              ; --------------------------------------------------------------------------------------------------------------------
492+  8930              ;
493+  8930              ; 7/1/23
494+  8930              ;
495+  8930              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
496+  8930              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
497+  8930              ;
498+  8930              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
499+  8930              ;	DESTRUYE: HL,B Y A.
500+  8930
501+  8930 3A E2 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
502+  8933 FE 02        	cp 2
503+  8935 38 18        	jr c,1F
504+  8937 28 16        	jr z,1F
505+  8939 E6 01        	and 1
506+  893B 28 0D        	jr z,3F
507+  893D
508+  893D              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
509+  893D
510+  893D CD 79 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
511+  8940
512+  8940 7D           9 ld a,l
513+  8941 E6 1F        	and $1f
514+  8943 28 2A        	jr z,7F
515+  8945 2B           	dec hl
516+  8946 10 F8        	djnz 9B
517+  8948 18 25        	jr 7F
518+  894A
519+  894A              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
520+  894A
521+  894A 2A D4 84     3 ld hl,(Posicion_actual)
522+  894D 18 20        	jr 7F
523+  894F
524+  894F 28 14        1 jr z,2F
525+  8951
526+  8951              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
527+  8951
528+  8951 CD 79 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
529+  8954 7D           4 ld a,l
530+  8955 E6 1F        	and $1f
531+  8957 28 03        	jr z,6F
532+  8959 2B           	dec hl
533+  895A 10 F8        	djnz 4B
534+  895C 06 0F        6 ld b,15
535+  895E CD DA 89     5 call PreviousScan
536+  8961 10 FB        	djnz 5B
537+  8963 18 0A        	jr 7F
538+  8965
539+  8965              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
540+  8965
541+  8965 CD 79 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8968 06 0F        	ld b,15
543+  896A CD DA 89     8 call PreviousScan
544+  896D 10 FB        	djnz 8B
545+  896F
546+  896F E5           7 push hl
547+  8970 DD E1        	pop ix
548+  8972
549+  8972 2A D6 84     	ld hl,(Puntero_objeto)
550+  8975 E5           	push hl
551+  8976 FD E1        	pop iy
552+  8978
553+  8978 C9           	ret
554+  8979
555+  8979              ; --------------------------------------------------------------------------------------------------------------------
556+  8979              ;
557+  8979              ;	2/1/23
558+  8979              ;
559+  8979              ;	Sub-rutina de [Calcula_puntero_de_impresion].
560+  8979              ;
561+  8979              ;	Tras esta rutina tenemos:
562+  8979              ;
563+  8979              ;	OUTPUT: HL contiene (Posicion_actual).
564+  8979              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
565+  8979              ;
566+  8979              ;	DESTRUYE!!!!! HL,B y A.
567+  8979
568+  8979 2A D4 84     Operandos ld hl,(Posicion_actual)
569+  897C 3A 04 85     	ld a,(Columnas)
570+  897F 3D           	dec a
571+  8980 20 01        	jr nz,1F
572+  8982 3C           	inc a
573+  8983 47           1 ld b,a
574+  8984 C9           	ret
575+  8985
576+  8985              ; --------------------------------------------------------------------------------------------------------------------
577+  8985              ;
578+  8985              ;	3/1/23
579+  8985              ;
580+  8985              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
581+  8985              ;
582+  8985              ;	Destruye: A,B,HL y DE.
583+  8985
584+  8985              Define_rutina_de_impresion
585+  8985
586+  8985 3A D3 84     	ld a,(Columns)
587+  8988 47           	ld b,a
588+  8989 3A 04 85     	ld a,(Columnas)
589+  898C B8           	cp b
590+  898D 20 0D        	jr nz,2f
591+  898F
592+  898F              ;	La entidad se imprime entera.
593+  898F
594+  898F 21 21 8A     	ld hl, Indice_entidades_completas
595+  8992 E6 01        	and 1
596+  8994 28 02        	jr z,1F
597+  8996
598+  8996 23           	inc hl
599+  8997 23           	inc hl
600+  8998
601+  8998 CD 2F 86     1 call Extrae_address
602+  899B C9           	ret		;	ret
603+  899C
604+  899C              ;	La entidad no se imprime entera en pantalla.
605+  899C
606+  899C 3A E2 84     2 ld a,(Cuad_objeto)
607+  899F E6 01        	and 1
608+  89A1 28 17        	jr z,3F
609+  89A3
610+  89A3              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
611+  89A3
612+  89A3 21 25 8A     	ld hl, Indice_entidades_incompletas_izquierda
613+  89A6 3A D3 84     4 ld a,(Columns)
614+  89A9 E6 01        	and 1
615+  89AB 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
616+  89AD
617+  89AD 23           	inc hl
618+  89AE 23           	inc hl
619+  89AF
620+  89AF 3A 04 85     	ld a,(Columnas)
621+  89B2 E6 01        	and 1
622+  89B4 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
623+  89B6
624+  89B6 23           	inc hl
625+  89B7 23           	inc hl
626+  89B8
627+  89B8 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
628+  89BA
629+  89BA 21 2B 8A     3 ld hl, Indice_entidades_incompletas_derecha
630+  89BD 18 E7        	jr 4B
631+  89BF
632+  89BF              ; --------------------------------------------------------------------------------------------------------------------
633+  89BF              ;
634+  89BF              ;	Prepara_draw
635+  89BF              ;
636+  89BF              ;	Es una rutina de carga.
637+  89BF              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
638+  89BF              ;
639+  89BF              ;	FUNCIONAMIENTO:
640+  89BF              ;
641+  89BF              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
642+  89BF              ;	- LD (Posicion_actual) del objeto en [HL].
643+  89BF              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
644+  89BF              ;
645+  89BF              ;	DESTRUYE:
646+  89BF              ;
647+  89BF              ;	Logicamente, BC,HL y E quedan destruidos.
648+  89BF
649+  89BF 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
650+  89C2 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
651+  89C3 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
652+  89C4 4E           	ld c,(hl)
653+  89C5 2A D4 84     	ld hl,(Posicion_actual)
654+  89C8 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
655+  89CA C9           	ret
656+  89CB
657+  89CB              ;----------------------------------------------------------------------------------------------------------------
658+  89CB              ;
659+  89CB              ;	5/08/22
660+  89CB              ;
661+  89CB              ;   NextScan.
662+  89CB              ;
663+  89CB              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
664+  89CB              ;
665+  89CB              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
666+  89CB              ;
667+  89CB              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
668+  89CB              ;
669+  89CB              ;       DESTRUIDOS: AF y HL !!!
670+  89CB              ;
671+  89CB              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
672+  89CB              ;
673+  89CB
674+  89CB 24           NextScan inc h          ; Incrementamos el scanline.
675+  89CC 7C               ld a,h
676+  89CD E6 07            and 7
677+  89CF C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
678+  89D0
679+  89D0 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
680+  89D1 C6 20            add a,$20           ; Vamos a comprobarlo...
681+  89D3 6F               ld l,a
682+  89D4 D8               ret c               ; Salimos si se produce el cambio de tercio.
683+  89D5
684+  89D5 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
685+  89D6 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
686+  89D8 67               ld h,a
687+  89D9 C9               ret
688+  89DA
689+  89DA              ;----------------------------------------------------------------------------------------------------------------
690+  89DA              ;
691+  89DA              ;	5/08/22
692+  89DA              ;
693+  89DA              ;   PreviousScan.
694+  89DA              ;
695+  89DA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
696+  89DA              ;
697+  89DA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
698+  89DA              ;
699+  89DA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
700+  89DA              ;
701+  89DA              ;       DESTRUIDOS: AF y HL !!!
702+  89DA              ;
703+  89DA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
704+  89DA              ;
705+  89DA
706+  89DA 7C           PreviousScan ld a,h
707+  89DB 25               dec h               ; Dec H.
708+  89DC E6 07            and 7
709+  89DE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
710+  89DF
711+  89DF 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
712+  89E0 D6 20            sub $20             ; Vamos a comprobarlo...
713+  89E2 6F               ld l,a
714+  89E3 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
715+  89E4
716+  89E4 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
717+  89E5 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
718+  89E7 67               ld h,a
719+  89E8 C9               ret
720+  89E9
721+  89E9              ; -----------------------------------------------------------------------------------
722+  89E9              ;
723+  89E9              ;	15/1/23
724+  89E9
725+  89E9 ED 73 14 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
726+  89ED 31 00 70     	ld sp,Album_de_fotos
727+  89F0
728+  89F0 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
729+  89F2 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
730+  89F3 D1           	pop de																	; Dirección de la rutina de impresión en DE.
731+  89F4
732+  89F4 ED 73 16 85  	ld (Stack_2),sp
733+  89F8 ED 7B 14 85  	ld sp,(Stack)
734+  89FC
735+  89FC              ; Fabrica la llamada a la correspondiente rutina de impresión.
736+  89FC
737+  89FC 3E CD        	ld a,$cd
738+  89FE 32 06 8A     	ld (Imprime),a
739+  8A01 EB           	ex de,hl
740+  8A02 22 07 8A     	ld (Imprime+1),hl
741+  8A05 EB           	ex de,hl
742+  8A06
743+  8A06              ; Ejecuta la llamada:	CALL $xx,xx
744+  8A06
745+  8A06 00 00 00     Imprime db 0,0,0
746+  8A09
747+  8A09 ED 73 14 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
748+  8A0D
749+  8A0D 3A 13 85     	ld a,(Numero_de_malotes)
750+  8A10 3D           	dec a
751+  8A11 28 09        	jr z,1F
752+  8A13 32 13 85      	ld (Numero_de_malotes),a
753+  8A16 ED 7B 16 85  	ld sp,(Stack_2)
754+  8A1A 18 D4        	jr 2B
755+  8A1C
756+  8A1C AF           1 xor a
757+  8A1D 32 16 85     	ld (Stack_2),a
758+  8A20 C9           	ret
759+  8A21
760+  8A21
# file closed: Draw_XOR.asm
597   8A21              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A21              ;   índices de Rutinas de impresión.
  2+  8A21
  3+  8A21 31 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A23 5E 8A            defw Pinta_Amadeus_3x2
  5+  8A25
  6+  8A25 B4 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A27 54 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A29 08 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A2B
 10+  8A2B DE 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A2D E2 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2F 96 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A31
 14+  8A31
 15+  8A31              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A31              ;
 17+  8A31              ;   12/12/22
 18+  8A31              ;
 19+  8A31              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A31              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A31              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A31              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A31              ;
 24+  8A31              ;   Modifica: DE y HL.
 25+  8A31
 26+  8A31 ED 73 14 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A35 FD F9        	ld sp,iy
 28+  8A37 06 10            ld b,16
 29+  8A39 D1           1 pop de
 30+  8A3A 7B               ld a,e
 31+  8A3B AE               xor (hl)
 32+  8A3C 77           	ld (hl),a
 33+  8A3D 23           	inc hl
 34+  8A3E 7A               ld a,d
 35+  8A3F AE               xor (hl)
 36+  8A40 77           	ld (hl),a
 37+  8A41 2B           	dec hl
 38+  8A42 24           	inc h
 39+  8A43 7C               ld a,h
 40+  8A44 E6 07            and 7
 41+  8A46 20 0A            jr nz,2F
 42+  8A48 7D               ld a,l
 43+  8A49 C6 20            add a,$20
 44+  8A4B 6F               ld l,a
 45+  8A4C 38 04            jr c,2F
 46+  8A4E 7C               ld a,h
 47+  8A4F D6 08            sub 8
 48+  8A51 67               ld h,a
 49+  8A52 7C           2 ld a,h
 50+  8A53 FE 58            cp $58
 51+  8A55 28 02            jr z,3F
 52+  8A57 10 E0            djnz 1B
 53+  8A59 ED 7B 14 85  3 ld sp,(Stack)
 54+  8A5D C9           	ret
 55+  8A5E
 56+  8A5E ED 73 14 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A62 FD F9        	ld sp,iy
 58+  8A64 06 08            ld b,8
 59+  8A66 D1           1 pop de
 60+  8A67 7B               ld a,e
 61+  8A68 AE               xor (hl)
 62+  8A69 77           	ld (hl),a
 63+  8A6A 23           	inc hl
 64+  8A6B 7A               ld a,d
 65+  8A6C AE               xor (hl)
 66+  8A6D 77           	ld (hl),a
 67+  8A6E 23           	inc hl
 68+  8A6F D1           	pop de
 69+  8A70 7B               ld a,e
 70+  8A71 AE               xor (hl)
 71+  8A72 77           	ld (hl),a
 72+  8A73 2B           	dec hl
 73+  8A74 2B           	dec hl
 74+  8A75 24           	inc h
 75+  8A76 7C               ld a,h
 76+  8A77 E6 07            and 7
 77+  8A79 20 0A            jr nz,2F
 78+  8A7B 7D               ld a,l
 79+  8A7C C6 20            add a,$20
 80+  8A7E 6F               ld l,a
 81+  8A7F 38 04            jr c,2F
 82+  8A81 7C               ld a,h
 83+  8A82 D6 08            sub 8
 84+  8A84 67               ld h,a
 85+  8A85 7C           2 ld a,h
 86+  8A86 FE 58            cp $58
 87+  8A88 28 25            jr z,4F
 88+  8A8A 7A               ld a,d
 89+  8A8B AE               xor (hl)
 90+  8A8C 77               ld (hl),a
 91+  8A8D D1           	pop de
 92+  8A8E 23           	inc hl
 93+  8A8F 7B               ld a,e
 94+  8A90 AE               xor (hl)
 95+  8A91 77           	ld (hl),a
 96+  8A92 23           	inc hl
 97+  8A93 7A               ld a,d
 98+  8A94 AE               xor (hl)
 99+  8A95 77           	ld (hl),a
100+  8A96 2B           	dec hl
101+  8A97 2B           	dec hl
102+  8A98 24           	inc h
103+  8A99 7C               ld a,h
104+  8A9A E6 07            and 7
105+  8A9C 20 0A            jr nz,3F
106+  8A9E 7D               ld a,l
107+  8A9F C6 20            add a,$20
108+  8AA1 6F               ld l,a
109+  8AA2 38 04            jr c,3F
110+  8AA4 7C               ld a,h
111+  8AA5 D6 08            sub 8
112+  8AA7 67               ld h,a
113+  8AA8 7C           3 ld a,h
114+  8AA9 FE 58            cp $58
115+  8AAB 28 02            jr z,4F
116+  8AAD 10 B7            djnz 1B
117+  8AAF ED 7B 14 85  4 ld sp,(Stack)
118+  8AB3 C9           	ret
119+  8AB4
120+  8AB4              ; ---------------------------------------------------
121+  8AB4
122+  8AB4 ED 73 14 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AB8 FD F9        	ld sp,iy
124+  8ABA 06 10            ld b,16
125+  8ABC D1           1 pop de
126+  8ABD 7A           	ld a,d
127+  8ABE AE           	xor (hl)
128+  8ABF 77           	ld (hl),a
129+  8AC0 24           	inc h
130+  8AC1 7C               ld a,h
131+  8AC2 E6 07            and 7
132+  8AC4 20 0C            jr nz,2F
133+  8AC6 7D               ld a,l
134+  8AC7 C6 20            add a,$20
135+  8AC9 6F               ld l,a
136+  8ACA 38 06            jr c,2F
137+  8ACC 7C               ld a,h
138+  8ACD D6 08            sub 8
139+  8ACF 67               ld h,a
140+  8AD0 18 00            jr 2F
141+  8AD2 7C           2 ld a,h
142+  8AD3 FE 58            cp $58
143+  8AD5 28 02            jr z,3F
144+  8AD7 10 E3            djnz 1B
145+  8AD9 ED 7B 14 85  3 ld sp,(Stack)
146+  8ADD C9           	ret
147+  8ADE
148+  8ADE ED 73 14 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AE2 FD F9        	ld sp,iy
150+  8AE4 06 10            ld b,16
151+  8AE6 D1           1 pop de
152+  8AE7 7B           	ld a,e
153+  8AE8 AE           	xor (hl)
154+  8AE9 77           	ld (hl),a
155+  8AEA 24           	inc h
156+  8AEB 7C               ld a,h
157+  8AEC E6 07            and 7
158+  8AEE 20 0C            jr nz,2F
159+  8AF0 7D               ld a,l
160+  8AF1 C6 20            add a,$20
161+  8AF3 6F               ld l,a
162+  8AF4 38 06            jr c,2F
163+  8AF6 7C               ld a,h
164+  8AF7 D6 08            sub 8
165+  8AF9 67               ld h,a
166+  8AFA 18 00            jr 2F
167+  8AFC 7C           2 ld a,h
168+  8AFD FE 58            cp $58
169+  8AFF 28 02            jr z,3F
170+  8B01 10 E3            djnz 1B
171+  8B03 ED 7B 14 85  3 ld sp,(Stack)
172+  8B07 C9           	ret
173+  8B08
174+  8B08              ; ---------------------------------------------------
175+  8B08
176+  8B08 ED 73 14 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B0C FD F9        	ld sp,iy
178+  8B0E 06 08            ld b,8
179+  8B10 D1           1 pop de
180+  8B11 7A           	ld a,d
181+  8B12 AE           	xor (hl)
182+  8B13 77           	ld (hl),a
183+  8B14 23           	inc hl
184+  8B15 D1           	pop de
185+  8B16 7B           	ld a,e
186+  8B17 AE           	xor (hl)
187+  8B18 77           	ld (hl),a
188+  8B19 2B           	dec hl
189+  8B1A 24            	inc h
190+  8B1B 7C               ld a,h
191+  8B1C E6 07            and 7
192+  8B1E 20 0A            jr nz,2F
193+  8B20 7D               ld a,l
194+  8B21 C6 20            add a,$20
195+  8B23 6F               ld l,a
196+  8B24 38 04            jr c,2F
197+  8B26 7C               ld a,h
198+  8B27 D6 08            sub 8
199+  8B29 67               ld h,a
200+  8B2A 7C           2 ld a,h
201+  8B2B FE 58            cp $58
202+  8B2D 28 20            jr z,4F
203+  8B2F D1               pop de
204+  8B30 7B           	ld a,e
205+  8B31 AE           	xor (hl)
206+  8B32 77           	ld (hl),a
207+  8B33 23           	inc hl
208+  8B34 7A           	ld a,d
209+  8B35 AE           	xor (hl)
210+  8B36 77           	ld (hl),a
211+  8B37 2B           	dec hl
212+  8B38 24           	inc h
213+  8B39 7C               ld a,h
214+  8B3A E6 07            and 7
215+  8B3C 20 0A            jr nz,3F
216+  8B3E 7D               ld a,l
217+  8B3F C6 20            add a,$20
218+  8B41 6F               ld l,a
219+  8B42 38 04            jr c,3F
220+  8B44 7C               ld a,h
221+  8B45 D6 08            sub 8
222+  8B47 67               ld h,a
223+  8B48 7C           3 ld a,h
224+  8B49 FE 58            cp $58
225+  8B4B 28 02            jr z,4F
226+  8B4D 10 C1            djnz 1B
227+  8B4F ED 7B 14 85  4 ld sp,(Stack)
228+  8B53 C9           	ret
229+  8B54
230+  8B54 ED 73 14 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B58 FD F9        	ld sp,iy
232+  8B5A 06 08            ld b,8
233+  8B5C D1           1 pop de
234+  8B5D D1           	pop de
235+  8B5E 7B           	ld a,e
236+  8B5F AE           	xor (hl)
237+  8B60 77           	ld (hl),a
238+  8B61 24            	inc h
239+  8B62 7C               ld a,h
240+  8B63 E6 07            and 7
241+  8B65 20 0A            jr nz,2F
242+  8B67 7D               ld a,l
243+  8B68 C6 20            add a,$20
244+  8B6A 6F               ld l,a
245+  8B6B 38 04            jr c,2F
246+  8B6D 7C               ld a,h
247+  8B6E D6 08            sub 8
248+  8B70 67               ld h,a
249+  8B71 7C           2 ld a,h
250+  8B72 FE 58            cp $58
251+  8B74 28 1B            jr z,4F
252+  8B76 D1               pop de
253+  8B77 7A           	ld a,d
254+  8B78 AE           	xor (hl)
255+  8B79 77           	ld (hl),a
256+  8B7A 24           	inc h
257+  8B7B 7C               ld a,h
258+  8B7C E6 07            and 7
259+  8B7E 20 0A            jr nz,3F
260+  8B80 7D               ld a,l
261+  8B81 C6 20            add a,$20
262+  8B83 6F               ld l,a
263+  8B84 38 04            jr c,3F
264+  8B86 7C               ld a,h
265+  8B87 D6 08            sub 8
266+  8B89 67               ld h,a
267+  8B8A 7C           3 ld a,h
268+  8B8B FE 58            cp $58
269+  8B8D 28 02            jr z,4F
270+  8B8F 10 CB            djnz 1B
271+  8B91 ED 7B 14 85  4 ld sp,(Stack)
272+  8B95 C9           	ret
273+  8B96
274+  8B96 ED 73 14 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B9A FD F9        	ld sp,iy
276+  8B9C 06 08            ld b,8
277+  8B9E D1           1 pop de
278+  8B9F 7B           	ld a,e
279+  8BA0 AE           	xor (hl)
280+  8BA1 77           	ld (hl),a
281+  8BA2 23           	inc hl
282+  8BA3 7A           	ld a,d
283+  8BA4 AE           	xor (hl)
284+  8BA5 77           	ld (hl),a
285+  8BA6 2B           	dec hl
286+  8BA7 24             	inc h
287+  8BA8 7C               ld a,h
288+  8BA9 E6 07            and 7
289+  8BAB 20 0A            jr nz,2F
290+  8BAD 7D               ld a,l
291+  8BAE C6 20            add a,$20
292+  8BB0 6F               ld l,a
293+  8BB1 38 04            jr c,2F
294+  8BB3 7C               ld a,h
295+  8BB4 D6 08            sub 8
296+  8BB6 67               ld h,a
297+  8BB7 7C           2 ld a,h
298+  8BB8 FE 58            cp $58
299+  8BBA 28 21            jr z,4F
300+  8BBC D1               pop de
301+  8BBD 7A           	ld a,d
302+  8BBE AE           	xor (hl)
303+  8BBF 77           	ld (hl),a
304+  8BC0 23           	inc hl
305+  8BC1 D1               pop de
306+  8BC2 7B           	ld a,e
307+  8BC3 AE           	xor (hl)
308+  8BC4 77           	ld (hl),a
309+  8BC5 2B           	dec hl
310+  8BC6 24           	inc h
311+  8BC7 7C               ld a,h
312+  8BC8 E6 07            and 7
313+  8BCA 20 0A            jr nz,3F
314+  8BCC 7D               ld a,l
315+  8BCD C6 20            add a,$20
316+  8BCF 6F               ld l,a
317+  8BD0 38 04            jr c,3F
318+  8BD2 7C               ld a,h
319+  8BD3 D6 08            sub 8
320+  8BD5 67               ld h,a
321+  8BD6 7C           3 ld a,h
322+  8BD7 FE 58            cp $58
323+  8BD9 28 02            jr z,4F
324+  8BDB 10 C1            djnz 1B
325+  8BDD ED 7B 14 85  4 ld sp,(Stack)
326+  8BE1 C9           	ret
327+  8BE2
328+  8BE2 ED 73 14 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BE6 FD F9        	ld sp,iy
330+  8BE8 06 08            ld b,8
331+  8BEA D1           1 pop de
332+  8BEB 7B           	ld a,e
333+  8BEC AE           	xor (hl)
334+  8BED 77           	ld (hl),a
335+  8BEE 24            	inc h
336+  8BEF 7C               ld a,h
337+  8BF0 E6 07            and 7
338+  8BF2 20 0A            jr nz,2F
339+  8BF4 7D               ld a,l
340+  8BF5 C6 20            add a,$20
341+  8BF7 6F               ld l,a
342+  8BF8 38 04            jr c,2F
343+  8BFA 7C               ld a,h
344+  8BFB D6 08            sub 8
345+  8BFD 67               ld h,a
346+  8BFE 7C           2 ld a,h
347+  8BFF FE 58            cp $58
348+  8C01 28 1C            jr z,4F
349+  8C03 D1               pop de
350+  8C04 7A           	ld a,d
351+  8C05 AE           	xor (hl)
352+  8C06 77           	ld (hl),a
353+  8C07 24           	inc h
354+  8C08 7C               ld a,h
355+  8C09 E6 07            and 7
356+  8C0B 20 0A            jr nz,3F
357+  8C0D 7D               ld a,l
358+  8C0E C6 20            add a,$20
359+  8C10 6F               ld l,a
360+  8C11 38 04            jr c,3F
361+  8C13 7C               ld a,h
362+  8C14 D6 08            sub 8
363+  8C16 67               ld h,a
364+  8C17 7C           3 ld a,h
365+  8C18 FE 58            cp $58
366+  8C1A 28 03            jr z,4F
367+  8C1C D1               pop de
368+  8C1D 10 CB            djnz 1B
369+  8C1F ED 7B 14 85  4 ld sp,(Stack)
370+  8C23 C9           	ret
371+  8C24
372+  8C24              ; ---------------------------------------------------
373+  8C24
# file closed: Rutinas_de_impresion_sprites.asm
598   8C24              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C24              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C24              ;
  3+  8C24              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C24              ;
  5+  8C24              ; *****************************************************************************************************************************************************************************************
  6+  8C24              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C24
  8+  8C24 7C           calcula_tercio ld a,h
  9+  8C25 E6 18        	and $18
 10+  8C27 CB 2F        	sra a
 11+  8C29 CB 2F        	sra a
 12+  8C2B CB 2F        	sra a
 13+  8C2D C9           	ret
 14+  8C2E
# file closed: calcula_tercio.asm
599   8C2E              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C2E              ; -----------------------------------------------------------------------------------------
  2+  8C2E              ;
  3+  8C2E              ;   04/11/22
  4+  8C2E              ;
  5+  8C2E              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C2E              ;
  7+  8C2E              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C2E              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C2E              ;
 10+  8C2E              ;   DESTRUYE: HL y A. !!!!!
 11+  8C2E
 12+  8C2E CD 24 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C31 26 58            ld h,$58
 14+  8C33 84               add h
 15+  8C34 67               ld h,a
 16+  8C35 C9               ret
# file closed: Calcula_direccion_atributos.asm
600   8C36              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C36              ; ********** **********
  2+  8C36              ;
  3+  8C36              ;   5/11/22
  4+  8C36              ;
  5+  8C36              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C36              ;
  7+  8C36              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C36              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C36              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C36              ;
 11+  8C36              ;   NO DESTROYERSSSS !!!!!
 12+  8C36
 13+  8C36 E5           Define_atributos push hl
 14+  8C37 C5           	push bc
 15+  8C38 D5           	push de
 16+  8C39
 17+  8C39 CD 2E 8C     	call Calcula_direccion_atributos
 18+  8C3C
 19+  8C3C D9               exx
 20+  8C3D E5               push hl
 21+  8C3E D9               exx
 22+  8C3F D1               pop de
 23+  8C40
 24+  8C40 42               ld b,d
 25+  8C41 7B               ld a,e 									; (Attr) en A.
 26+  8C42
 27+  8C42 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C43 E5            	push hl 								; Guardo dirección de attr.
 29+  8C44
 30+  8C44              ; -----
 31+  8C44
 32+  8C44 77           2 ld (hl),a
 33+  8C45 0D           	dec c 									; Decremento (Columnas).
 34+  8C46 28 03        	jr z,1F
 35+  8C48 23           	inc hl
 36+  8C49 18 F9        	jr 2B
 37+  8C4B
 38+  8C4B E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C4C C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C4D
 41+  8C4D 05           	dec b									; Decremento (Filas).
 42+  8C4E 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C50
 44+  8C50 11 20 00     	ld de,32
 45+  8C53 A7           	and a
 46+  8C54 ED 5A        	adc hl,de
 47+  8C56 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C58
 49+  8C58 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C59 C1           	pop bc
 51+  8C5A E1           	pop hl
 52+  8C5B
 53+  8C5B C9           	ret
 54+  8C5C
# file closed: Define_atributos.asm
601   8C5C              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C5C              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C5C              ;
  3+  8C5C              ;
  4+  8C5C              ;	CLS.
  5+  8C5C              ;
  6+  8C5C              ;	Limpia la pantalla y define sus atributos.
  7+  8C5C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C5C              ;
  9+  8C5C              ;	COLORES: 0 ..... NEGRO
 10+  8C5C              ;    		 1 ..... AZUL
 11+  8C5C              ; 			 2 ..... ROJO
 12+  8C5C              ;			 3 ..... MAGENTA
 13+  8C5C              ; 			 4 ..... VERDE
 14+  8C5C              ; 			 5 ..... CIAN
 15+  8C5C              ;			 6 ..... AMARILLO
 16+  8C5C              ; 			 7 ..... BLANCO
 17+  8C5C              ;
 18+  8C5C              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C5C              ;
 20+  8C5C              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C5C
 22+  8C5C
 23+  8C5C 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C5F 11 01 40     	LD DE,$4001
 25+  8C62 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C65 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C67 ED B0        	LDIR
 28+  8C69 01 FF 02     	LD BC,767
 29+  8C6C 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C6D ED B0        	LDIR
 31+  8C6F C9           	ret
 32+  8C70
# file closed: Cls.asm
602   8C70              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C70              ; ******************************************************************************************************************************************************************************************
  2+  8C70              ;
  3+  8C70              ;   19/10/22
  4+  8C70              ;
  5+  8C70              ;	Mov_down
  6+  8C70              ;
  7+  8C70              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C70              ;
  9+  8C70              ;
 10+  8C70 21 F9 84     Mov_down ld hl,Ctrl_0
 11+  8C73 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C75              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C75              ; 																	; _ en el caso de que no lo haya.
 14+  8C75 3A E6 84     	ld a,(Vel_down)
 15+  8C78 47           	ld b,a
 16+  8C79 2A D4 84         ld hl,(Posicion_actual)
 17+  8C7C CD 24 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C7F E6 02        	and 2
 19+  8C81 28 0F        	jr z,1F
 20+  8C83 7C           	ld a,h
 21+  8C84 FE 57        	cp $57
 22+  8C86 20 0A        	jr nz,1F
 23+  8C88 7D           	ld a,l
 24+  8C89 C6 20        	add $20
 25+  8C8B 30 05        	jr nc,1F
 26+  8C8D
 27+  8C8D              ; ------------------------------
 28+  8C8D CD 2C 8F     	call Reaparece_arriba
 29+  8C90              ;	call Reinicio
 30+  8C90              ; ------------------------------
 31+  8C90
 32+  8C90 18 08        	jr 3F
 33+  8C92 CD CB 89     1 call NextScan
 34+  8C95 22 D4 84     	ld (Posicion_actual),hl
 35+  8C98 10 E2            djnz 2B
 36+  8C9A CD 42 8F     3 call Genera_coordenadas
 37+  8C9D C9           	ret
 38+  8C9E
 39+  8C9E
 40+  8C9E              ; ******************************************************************************************************************************************************************************************
 41+  8C9E              ;
 42+  8C9E              ;   19/10/22
 43+  8C9E              ;
 44+  8C9E              ;	Mov_up
 45+  8C9E              ;
 46+  8C9E              ; 	Mueve el Sprite hacia arriba.
 47+  8C9E              ;
 48+  8C9E              ;
 49+  8C9E 21 F9 84     Mov_up ld hl,Ctrl_0
 50+  8CA1 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8CA3              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8CA3              ; 																		; _ en el caso de que no lo haya.
 53+  8CA3 3A E5 84     	ld a,(Vel_up)
 54+  8CA6 47           	ld b,a
 55+  8CA7 2A D4 84     	ld hl,(Posicion_actual)
 56+  8CAA CD 24 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CAD A7           	and a
 58+  8CAE 20 10        	jr nz,1F
 59+  8CB0 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CB1 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CB3 20 0B            jr nz,1F
 62+  8CB5 7D               ld a,l
 63+  8CB6 D6 20            sub $20
 64+  8CB8 30 06            jr nc,1F
 65+  8CBA 25               dec h
 66+  8CBB
 67+  8CBB              ; -----------------------------
 68+  8CBB CD 1C 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CBE              ;	call Reinicio
 70+  8CBE              ; -----------------------------
 71+  8CBE
 72+  8CBE 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CC0 CD DA 89     1 call PreviousScan
 74+  8CC3 22 D4 84     	ld (Posicion_actual),hl
 75+  8CC6 10 E2            djnz 3B
 76+  8CC8 CD 42 8F     2 call Genera_coordenadas
 77+  8CCB C9           	ret
 78+  8CCC
 79+  8CCC              ; ******************************************************************************************************************************************************************************************
 80+  8CCC              ;
 81+  8CCC              ;	19/10/22
 82+  8CCC              ;
 83+  8CCC              ;	Mov_right.
 84+  8CCC              ;
 85+  8CCC              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CCC              ;
 87+  8CCC
 88+  8CCC 21 F9 84     Mov_right ld hl,Ctrl_0
 89+  8CCF CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CD1              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CD1              ; 																	; _ en el caso de que no lo haya.
 92+  8CD1 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CD4 A7           	and a
 94+  8CD5 28 0B        	jr z,9F
 95+  8CD7
 96+  8CD7 3A F9 84     	ld a,(Ctrl_0)
 97+  8CDA CB 7F        	bit 7,a
 98+  8CDC 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CDE 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CE1 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CE2
102+  8CE2 3A F9 84     9 ld a,(Ctrl_0)
103+  8CE5 CB 77        	bit 6,a
104+  8CE7 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CE9
106+  8CE9 CD DB 8E     	call Stop_Amadeus_right
107+  8CEC C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CED 18 4D        	jr 8F
109+  8CEF
110+  8CEF 3A D9 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CF2 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CF4 20 46        	jr nz,8F
113+  8CF6
114+  8CF6 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CF9 A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CFA 28 40        	jr z,8F
117+  8CFC
118+  8CFC              ; ---------- ---------- ----------
119+  8CFC              ;
120+  8CFC              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
121+  8CFC
122+  8CFC 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
123+  8CFF FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
124+  8D01 28 11        	jr z,1F
125+  8D03 38 06        	jr c,6F
126+  8D05 FE 04        	cp 4
127+  8D07 28 14        	jr z,7F
128+  8D09 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
129+  8D0B
130+  8D0B              ; ---------- ---------- ----------
131+  8D0B              ;
132+  8D0B              ; Perfiles de velocidad
133+  8D0B              ;
134+  8D0B 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
135+  8D0E FE FE        	cp $fe
136+  8D10 20 2A        	jr nz,8F
137+  8D12 18 10        	jr 3F
138+  8D14 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
139+  8D17 FE FD        	cp $fd
140+  8D19 20 21        	jr nz,8F
141+  8D1B 18 07        	jr 3F
142+  8D1D 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
143+  8D20 FE FB        	cp $fb
144+  8D22 20 18        	jr nz,8F
145+  8D24
146+  8D24              ; ---------- ---------- ----------
147+  8D24
148+  8D24 CD 0A 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
149+  8D27              ;	call Reinicio
150+  8D27
151+  8D27              ; ---------- ---------- ----------
152+  8D27              ;
153+  8D27              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
154+  8D27
155+  8D27 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
156+  8D29 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
157+  8D2A CD 43 8D     	call DESPLZ_DER
158+  8D2D C1           	pop bc
159+  8D2E 10 F9        	djnz 5B
160+  8D30 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
161+  8D33 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
162+  8D34 22 D4 84     	ld (Posicion_actual),hl
163+  8D37 CD 42 8F     	call Genera_coordenadas
164+  8D3A 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
165+  8D3C
166+  8D3C              ; ---------- ---------- ----------
167+  8D3C
168+  8D3C 2A D4 84     8 ld hl,(Posicion_actual)
169+  8D3F CD 43 8D     	call DESPLZ_DER
170+  8D42 C9           2 ret
171+  8D43
172+  8D43              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
173+  8D43              ;
174+  8D43              ;	22/9/22
175+  8D43              ;
176+  8D43
177+  8D43 CD 52 8D     DESPLZ_DER call Desplaza_derecha
178+  8D46 CD 67 8D         call modifica_parametros_1er_DESPLZ_2
179+  8D49 CD 90 8D         call Ciclo_completo
180+  8D4C 21 F9 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
181+  8D4F CB FE        	set 7,(hl)
182+  8D51 C9           	ret
183+  8D52
184+  8D52              ; ******************************************************************************************************************************************************************************************
185+  8D52              ;	14/9/22
186+  8D52              ;
187+  8D52
188+  8D52 3A E4 84     Desplaza_derecha ld a,(Vel_right)
189+  8D55 47           	ld b,a
190+  8D56 2A DE 84     	ld hl,(Puntero_DESPLZ)
191+  8D59 23           1 inc hl
192+  8D5A 23           	inc hl
193+  8D5B 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
194+  8D5D 22 DE 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
195+  8D60 CD 2F 86     	call Extrae_address
196+  8D63 22 D6 84     	ld (Puntero_objeto),hl
197+  8D66 C9           	ret
198+  8D67
199+  8D67              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
200+  8D67              ;
201+  8D67              ;	24/7/22
202+  8D67              ;
203+  8D67              ;	modifica_parametros_1er_DESPLZ_2
204+  8D67              ;
205+  8D67              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
206+  8D67              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
207+  8D67              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
208+  8D67
209+  8D67 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
210+  8D6A A7           	and a
211+  8D6B 20 1F        	jr nz,1F
212+  8D6D D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
213+  8D6F 32 D8 84         ld (CTRL_DESPLZ),a
214+  8D72 21 D3 84     	ld hl,Columns
215+  8D75 34           	inc (hl)
216+  8D76 3A E2 84     	ld a,(Cuad_objeto)
217+  8D79 E6 01        	and 1
218+  8D7B 28 0F        	jr z,1F
219+  8D7D 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
220+  8D80 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
221+  8D81 22 D4 84     	ld (Posicion_actual),hl
222+  8D84 CD 42 8F     	call Genera_coordenadas
223+  8D87 CD E7 8E     	call Inc_CTRL_DESPLZ
224+  8D8A 18 03        	jr 2F
225+  8D8C CD E7 8E     1 call Inc_CTRL_DESPLZ
226+  8D8F C9           2 ret
227+  8D90
228+  8D90              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
229+  8D90              ;
230+  8D90              ;	24/7/22
231+  8D90              ;
232+  8D90              ;	Ciclo_completo.
233+  8D90              ;
234+  8D90              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
235+  8D90              ;
236+  8D90              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
237+  8D90              ; 	Decrementamos (Columns).
238+  8D90              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
239+  8D90              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
240+  8D90
241+  8D90
242+  8D90 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
243+  8D93 FE FF        	cp $ff
244+  8D95 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
245+  8D97 18 25        	jr 3f
246+  8D99 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
247+  8D9C 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
248+  8D9D AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
249+  8D9E 32 D8 84     	ld (CTRL_DESPLZ),a
250+  8DA1 3A E2 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
251+  8DA4 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
252+  8DA6 20 0A        	jr nz,2F
253+  8DA8 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
254+  8DAB 23           	inc hl
255+  8DAC 22 D4 84     	ld (Posicion_actual),hl
256+  8DAF CD 42 8F     	call Genera_coordenadas
257+  8DB2
258+  8DB2              ; Inicia el puntero de Sprite.
259+  8DB2
260+  8DB2 2A DC 84     2 ld hl,(Indice_Sprite)
261+  8DB5 22 DE 84     	ld (Puntero_DESPLZ),hl
262+  8DB8 CD 2F 86     	call Extrae_address
263+  8DBB 22 D6 84     	ld (Puntero_objeto),hl
264+  8DBE
265+  8DBE C9           3 ret
266+  8DBF
267+  8DBF              ; ******************************************************************************************************************************************************************************************
268+  8DBF              ;
269+  8DBF              ;	19/10/22
270+  8DBF              ;
271+  8DBF              ;	Mov_left.
272+  8DBF              ;
273+  8DBF              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
274+  8DBF              ;
275+  8DBF              Mov_left
276+  8DBF
277+  8DBF 21 F9 84     	ld hl,Ctrl_0
278+  8DC2 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
279+  8DC4              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
280+  8DC4              ; 																	; _ en el caso de que no lo haya.
281+  8DC4 3A D8 84     	ld a,(CTRL_DESPLZ)
282+  8DC7 A7           	and a
283+  8DC8 20 19        	jr nz,10F
284+  8DCA
285+  8DCA 2A D6 84     	ld hl,(Puntero_objeto)
286+  8DCD 22 DE 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
287+  8DD0
288+  8DD0 3A F9 84     	ld a,(Ctrl_0)
289+  8DD3 CB 77        	bit 6,a
290+  8DD5 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
291+  8DD7
292+  8DD7 CD E1 8E     	call Stop_Amadeus_left
293+  8DDA 20 5F        	jr nz,3F
294+  8DDC
295+  8DDC 2A DC 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
296+  8DDF 22 DE 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
297+  8DE2 C9           	ret
298+  8DE3
299+  8DE3 3A F9 84     10 ld a,(Ctrl_0)
300+  8DE6 CB 7F        	bit 7,a
301+  8DE8 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
302+  8DEA 21 D8 84     	ld hl,CTRL_DESPLZ
303+  8DED 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
304+  8DEE
305+  8DEE 3A D9 84     11 ld a,(Coordenada_X)
306+  8DF1 A7           	and a
307+  8DF2 20 47        	jr nz,3F
308+  8DF4 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
309+  8DF7 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
310+  8DF8 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
311+  8DFA
312+  8DFA              ; ---------- ---------- ----------
313+  8DFA
314+  8DFA 3A E3 84     	ld a,(Vel_left)
315+  8DFD FE 02        	cp 2
316+  8DFF 28 0F        	jr z,1F
317+  8E01 38 04        	jr c,6F
318+  8E03 FE 04        	cp 4
319+  8E05 28 12        	jr z,7F
320+  8E07
321+  8E07              ; ---------- ---------- ----------
322+  8E07
323+  8E07 3A D8 84     6 ld a,(CTRL_DESPLZ)
324+  8E0A FE F9        	cp $f9
325+  8E0C 20 2D        	jr nz,3F
326+  8E0E 18 10        	jr 4F
327+  8E10 3A D8 84     1 ld a,(CTRL_DESPLZ)
328+  8E13 FE FA        	cp $fa
329+  8E15 20 24        	jr nz,3F
330+  8E17 18 07        	jr 4F
331+  8E19 3A D8 84     7 ld a,(CTRL_DESPLZ)
332+  8E1C FE FC        	cp $fc
333+  8E1E 20 1B        	jr nz,3F
334+  8E20
335+  8E20              ; ---------- ---------- ----------
336+  8E20
337+  8E20 CD F8 8E     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
338+  8E23              ;	call Reinicio
339+  8E23
340+  8E23              ; ---------- ---------- ----------
341+  8E23
342+  8E23 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
343+  8E25 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
344+  8E26 2A D6 84     	ld hl,(Puntero_objeto)
345+  8E29 22 DE 84     	ld (Puntero_DESPLZ),hl
346+  8E2C CD 62 8E     	call DESPLZ_IZQ
347+  8E2F C1           	pop bc
348+  8E30 10 F3        	djnz 5B
349+  8E32 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
350+  8E35 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
351+  8E36 22 D4 84     	ld (Posicion_actual),hl
352+  8E39 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
353+  8E3B
354+  8E3B              ; ---------- ---------- ----------
355+  8E3B
356+  8E3B 3A E3 84     3 ld a,(Vel_left)
357+  8E3E FE 08        	cp 8
358+  8E40 20 16        	jr nz,8F
359+  8E42 2A D4 84     	ld hl,(Posicion_actual)
360+  8E45 7D           	ld a,l
361+  8E46 E6 1F        	and $1f
362+  8E48 20 05        	jr nz,9F
363+  8E4A
364+  8E4A              ; ---------- ---------- ----------
365+  8E4A
366+  8E4A CD F8 8E     	call Reaparece_derecha
367+  8E4D
368+  8E4D              ; ---------- ---------- ----------
369+  8E4D
370+  8E4D 18 0F        	jr 2F
371+  8E4F 2A D4 84     9 ld hl,(Posicion_actual)
372+  8E52 2B           	dec hl
373+  8E53 22 D4 84     	ld (Posicion_actual),hl
374+  8E56 18 06        	jr 2F
375+  8E58 2A D4 84     8 ld hl,(Posicion_actual)
376+  8E5B CD 62 8E     	call DESPLZ_IZQ
377+  8E5E CD 42 8F     2 call Genera_coordenadas
378+  8E61 C9           	ret
379+  8E62
380+  8E62              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
381+  8E62              ;
382+  8E62              ;	22/9/22
383+  8E62
384+  8E62 CD 71 8E     DESPLZ_IZQ call Desplaza_izquierda
385+  8E65 CD 86 8E         call modifica_parametros_1er_DESPLZ
386+  8E68 CD A7 8E     	call Ciclo_completo_2
387+  8E6B 21 F9 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
388+  8E6E CB BE        	res 7,(hl)
389+  8E70 C9           	ret
390+  8E71
391+  8E71 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
392+  8E74 47           	ld b,a
393+  8E75 2A DE 84     	ld hl,(Puntero_DESPLZ)
394+  8E78 2B           1 dec hl
395+  8E79 2B           	dec hl
396+  8E7A 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
397+  8E7C 22 DE 84     	ld (Puntero_DESPLZ),hl
398+  8E7F CD 2F 86     	call Extrae_address
399+  8E82 22 08 85     	ld (Caja_de_DESPLZ),hl
400+  8E85 C9           	ret
401+  8E86
402+  8E86              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
403+  8E86              ;
404+  8E86              ;	modifica_parametros_1er_DESPLZ
405+  8E86              ;
406+  8E86              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
407+  8E86              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
408+  8E86              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
409+  8E86
410+  8E86 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
411+  8E89 A7           	and a
412+  8E8A 20 17        	jr nz,1F
413+  8E8C 21 D3 84     	ld hl,Columns
414+  8E8F 34           	inc (hl)
415+  8E90 3A E2 84     	ld a,(Cuad_objeto)
416+  8E93 E6 01        	and 1
417+  8E95 20 0C        	jr nz,1F
418+  8E97 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
419+  8E9A 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
420+  8E9B 22 D4 84     	ld (Posicion_actual),hl
421+  8E9E CD CA 8E     	call Dec_CTRL_DESPLZ
422+  8EA1 18 03        	jr 2F
423+  8EA3 CD CA 8E     1 call Dec_CTRL_DESPLZ
424+  8EA6 C9           2 ret
425+  8EA7
426+  8EA7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
427+  8EA7              ;
428+  8EA7 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
429+  8EAA FE F8        	cp $f8
430+  8EAC 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
431+  8EAE 18 19        	jr 3f
432+  8EB0 21 D3 84     1 ld hl,Columns
433+  8EB3 35           	dec (hl)
434+  8EB4 AF           	xor a
435+  8EB5 32 D8 84     	ld (CTRL_DESPLZ),a
436+  8EB8 3A E2 84     	ld a,(Cuad_objeto)
437+  8EBB E6 01        	and 1
438+  8EBD 28 07        	jr z,2F
439+  8EBF 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
440+  8EC2 2B           	dec hl
441+  8EC3 22 D4 84     	ld (Posicion_actual),hl
442+  8EC6 CD 42 8F     2 call Genera_coordenadas
443+  8EC9 C9           3 ret
444+  8ECA
445+  8ECA              ; ---------- ---------- ---------- ---------- ---------- ----------
446+  8ECA              ;
447+  8ECA              ;	Dec_CTRL_DESPLZ
448+  8ECA              ;
449+  8ECA              ;	Subrutina de [modifica_punteros].
450+  8ECA              ;
451+  8ECA              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
452+  8ECA
453+  8ECA 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
454+  8ECD 3A E3 84     	ld a,(Vel_left)
455+  8ED0 A7           	and a
456+  8ED1 28 06        	jr z,1F
457+  8ED3 47           	ld b,a
458+  8ED4 35           3 dec (hl)
459+  8ED5 10 FD        	djnz 3B
460+  8ED7 18 01        	jr 2F
461+  8ED9 35           1 dec (hl)
462+  8EDA C9           2 ret
463+  8EDB
464+  8EDB              ; ---------- ---------- ---------- ---------- ---------- ----------
465+  8EDB              ;
466+  8EDB              ;	19/10/22
467+  8EDB              ;
468+  8EDB              ;	(cp 29) para un Amadeus de 3 Columns.
469+  8EDB              ;	(cp 30)   ""  ""    ""     2 Columns.
470+  8EDB
471+  8EDB 3A D9 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
472+  8EDE FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
473+  8EE0 C9           	ret
474+  8EE1
475+  8EE1              ; ---------- ---------- ---------- ---------- ---------- ----------
476+  8EE1              ;
477+  8EE1              ;	19/10/22
478+  8EE1              ;
479+  8EE1              ;	(cp 2) para un Amadeus de 3 Columns.
480+  8EE1              ;	(cp 1)   ""  ""    ""     2 Columns.
481+  8EE1
482+  8EE1 3A D9 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
483+  8EE4 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
484+  8EE6 C9           	ret
485+  8EE7
486+  8EE7              ; ---------- ---------- ---------- ---------- ---------- ----------
487+  8EE7              ;
488+  8EE7              ;	24/7/22
489+  8EE7              ;
490+  8EE7              ;	Inc_CTRL_DESPLZ
491+  8EE7              ;
492+  8EE7              ;	Subrutina de [modifica_punteros].
493+  8EE7              ;
494+  8EE7              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
495+  8EE7
496+  8EE7 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
497+  8EEA 3A E4 84     	ld a,(Vel_right)
498+  8EED A7           	and a
499+  8EEE 28 06        	jr z,1F
500+  8EF0 47           	ld b,a
501+  8EF1 34           3 inc (hl)
502+  8EF2 10 FD        	djnz 3B
503+  8EF4 18 01        	jr 2F
504+  8EF6 34           1 inc (hl)
505+  8EF7 C9           2 ret
506+  8EF8
507+  8EF8              ; ---------- ---------- ---------- ---------- ---------- ----------
508+  8EF8
509+  8EF8 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
510+  8EFB 01 1F 00     	ld bc,31
511+  8EFE A7           	and a
512+  8EFF ED 4A        	adc hl,bc
513+  8F01 22 D4 84     	ld (Posicion_actual),hl
514+  8F04 21 F9 84     	ld hl,Ctrl_0														; $xxx1
515+  8F07 CB C6        	set 0,(hl)
516+  8F09 C9           	ret
517+  8F0A
518+  8F0A              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8F0A
520+  8F0A 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
521+  8F0D 01 1F 00     	ld bc,31
522+  8F10 A7           	and a
523+  8F11 ED 42        	sbc hl,bc
524+  8F13 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
525+  8F16 21 F9 84     	ld hl,Ctrl_0
526+  8F19 CB CE        	set 1,(hl)
527+  8F1B C9           	ret
528+  8F1C
529+  8F1C              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8F1C
531+  8F1C 24           Reaparece_abajo inc h
532+  8F1D 01 E0 17     	ld bc,$17e0
533+  8F20 A7           	and a
534+  8F21 ED 4A        	adc hl,bc
535+  8F23 22 D4 84     	ld (Posicion_actual),hl
536+  8F26 21 F9 84     	ld hl,Ctrl_0
537+  8F29 CB D6        	set 2,(hl)
538+  8F2B C9           	ret
539+  8F2C
540+  8F2C              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8F2C
542+  8F2C 01 E0 17     Reaparece_arriba ld bc,$17e0
543+  8F2F A7           	and a
544+  8F30 ED 42        	sbc hl,bc
545+  8F32 22 D4 84     	ld (Posicion_actual),hl
546+  8F35 21 F9 84     	ld hl,Ctrl_0
547+  8F38 CB DE        	set 3,(hl)
548+  8F3A C9           	ret
549+  8F3B
550+  8F3B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
551+  8F3B
552+  8F3B              Reinicio
553+  8F3B
554+  8F3B 2A E0 84     	ld hl,(Posicion_inicio)
555+  8F3E 22 D4 84     	ld (Posicion_actual),hl
556+  8F41 C9           	ret
# file closed: Direcciones.asm
603   8F42              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F42              ;	12/12/22
  2+  8F42              ;
  3+  8F42              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F42              ;	Fila superior "0", Columna izquierda "0".
  5+  8F42              ;
  6+  8F42              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F42              ;
  8+  8F42              ;	Modifica: A
  9+  8F42
 10+  8F42 C5           Genera_coordenadas push bc
 11+  8F43 E5           	push hl
 12+  8F44 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F47 7D           	ld a,l
 14+  8F48 E6 1F        	and $1f
 15+  8F4A 32 D9 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F4D CD 24 8C     	call calcula_tercio
 17+  8F50 47           	ld b,a
 18+  8F51 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F52 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F54 7D           	ld a,l
 21+  8F55 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F57 28 05        	jr z,2F
 23+  8F59 0C           1 inc c
 24+  8F5A D6 20        	sub 32
 25+  8F5C 20 FB        	jr nz,1B
 26+  8F5E 0C           2 inc c
 27+  8F5F 04           	inc b
 28+  8F60 05           	dec b
 29+  8F61 28 04        	jr z,3F
 30+  8F63 3E E0        	ld a,$e0
 31+  8F65 10 F2        	djnz 1B
 32+  8F67 79           3 ld a,c
 33+  8F68 3D           	dec a
 34+  8F69 32 DA 84     	ld (Coordenada_y),a
 35+  8F6C E1           	pop hl
 36+  8F6D C1           	pop bc
 37+  8F6E C9           	ret
# file closed: Genera_coordenadas.asm
604   8F6F              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F6F
  2+  8F6F
  3+  8F6F              ;   11/8/22
  4+  8F6F              ;
  5+  8F6F              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F6F              ;
  7+  8F6F              ;   Mov_obj.asm
  8+  8F6F              ;
  9+  8F6F              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F6F              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F6F              ;
 12+  8F6F              ;   Codificación:
 13+  8F6F              ;
 14+  8F6F              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F6F              ;
 16+  8F6F
 17+  8F6F 02 10 00     Izquierda db 2,%00010000,0
 18+  8F72 02 20 00     Derecha db 2,%00100000,0
 19+  8F75 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F79 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F7D 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F81 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F85 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F89 60 42 60 40
 23+  8F8D 63
 24+  8F8E 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8F92 22 A3 80 A0
 25+  8F96 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8F9A 84 A0 83 A0
 26+  8F9E 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FA2 80 A3 22 A0
 27+  8FA6 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FAA 40 60 42 60
 28+  8FAE 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FB2
 30+  8FB2 72 8F        Indice_mov_Badsat defw Derecha
 31+  8FB4 79 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FB6 81 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FB8 75 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FBA
 35+  8FBA 3A FF 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FBD A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FBE 28 02            jr z,1F
 38+  8FC0 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FC2
 40+  8FC2 3A 00 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FC5 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FC7 32 00 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FCA              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FCA 2A FD 84         ld hl,(Puntero_mov)
 45+  8FCD 7E               ld a,(hl)
 46+  8FCE 32 FF 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FD1 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FD2 22 FD 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FD5
 50+  8FD5 3A 01 85     Decoder ld a,(Repetimos_db)
 51+  8FD8 A7               and a
 52+  8FD9 20 0C            jr nz,12F
 53+  8FDB 2A FD 84         ld hl,(Puntero_mov)
 54+  8FDE 7E               ld a,(hl)
 55+  8FDF A7               and a
 56+  8FE0 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FE2
 58+  8FE2 E6 0F            and $0f
 59+  8FE4 32 01 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  8FE7              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  8FE7 2A FD 84     12 ld hl,(Puntero_mov)
 62+  8FEA CB 7E            bit 7,(hl)
 63+  8FEC 28 03            jr z,2F
 64+  8FEE CD 70 8C         call Mov_down
 65+  8FF1 2A FD 84     2 ld hl, (Puntero_mov)
 66+  8FF4 CB 76            bit 6,(hl)
 67+  8FF6 28 03            jr z,3F
 68+  8FF8 CD 9E 8C         call Mov_up
 69+  8FFB 2A FD 84     3 ld hl, (Puntero_mov)
 70+  8FFE CB 6E            bit 5,(hl)
 71+  9000 28 03            jr z,4F
 72+  9002 CD CC 8C         call Mov_right
 73+  9005 2A FD 84     4 ld hl, (Puntero_mov)
 74+  9008 CB 66            bit 4,(hl)
 75+  900A 28 03            jr z,5F
 76+  900C CD BF 8D         call Mov_left
 77+  900F
 78+  900F              ; ---------- --------- --------- ---------- ----------
 79+  900F
 80+  900F 3A 01 85     5 ld a,(Repetimos_db)
 81+  9012 A7               and a
 82+  9013 28 07            jr z,6F
 83+  9015 3D               dec a
 84+  9016 32 01 85         ld (Repetimos_db),a
 85+  9019 28 01            jr z,6f
 86+  901B C9           11 ret
 87+  901C 21 FF 84     6 ld hl,Contador_db_mov
 88+  901F 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9020 2A FD 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9023 23               inc hl
 91+  9024 22 FD 84         ld (Puntero_mov),hl
 92+  9027 18 F2            jr 11B
 93+  9029 2A FB 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  902C 3A 00 85         ld a,(Incrementa_puntero)
 95+  902F 47               ld b,a
 96+  9030 23           8 inc hl
 97+  9031 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9033 5E               ld e,(hl)
 99+  9034 23               inc hl
100+  9035 56               ld d,(hl)
101+  9036 EB               ex de,hl
102+  9037 22 FD 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  903A 18 DF            jr 11B
104+  903C
105+  903C              ; ---------- --------- --------- ---------- ----------
106+  903C              ;
107+  903C              ;   11/8/22
108+  903C              ;
109+  903C              ;   Prepara_Puntero_mov
110+  903C
111+  903C E5           Prepara_Puntero_mov push hl
112+  903D D5               push de
113+  903E 2A FB 84         ld hl,(Puntero_indice_mov)
114+  9041 5E               ld e,(hl)
115+  9042 23               inc hl
116+  9043 56               ld d,(hl)
117+  9044 EB               ex de,hl
118+  9045 22 FD 84         ld (Puntero_mov),hl
119+  9048 D1               pop de
120+  9049 E1               pop hl
121+  904A C9               ret
122+  904B
123+  904B              ; ---------- --------- --------- ---------- ----------
124+  904B              ;
125+  904B              ;   11/8/22
126+  904B              ;
127+  904B              ;   Reinicia_el_movimiento
128+  904B
129+  904B CD 3C 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  904E AF               xor a
131+  904F 32 FF 84         ld (Contador_db_mov),a
132+  9052 32 00 85         ld (Incrementa_puntero),a
133+  9055 C3 BA 8F         jp Movimiento
134+  9058
135+  9058              ; ---------- --------- --------- ---------- ----------
136+  9058
137+  9058
138+  9058
139+  9058
140+  9058
141+  9058
142+  9058
143+  9058
144+  9058
145+  9058
146+  9058
147+  9058
148+  9058
149+  9058
150+  9058
151+  9058
152+  9058
153+  9058
# file closed: Patrones_de_mov.asm
605   9058              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9058              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9058              ;
  3+  9058              ;	3/1/23
  4+  9058              ;
  5+  9058              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9058
  7+  9058              ;	ADC HL,SP	LD (addr),SP
  8+  9058              ;	ADD HL,SP	LD SP,(addr)
  9+  9058              ;	ADD IX,SP	LD SP,nn
 10+  9058              ; 	ADD IY,SP	LD SP,HL
 11+  9058              ;				LD SP,IX
 12+  9058              ;	DEC SP		LD SP,IY
 13+  9058
 14+  9058              ;	EX (SP),HL
 15+  9058              ;	EX (SP),IX
 16+  9058              ;	EX (SP),IY
 17+  9058
 18+  9058              ;	INC SP
 19+  9058
 20+  9058
 21+  9058                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 14 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 18 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 18 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 14 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
606   7FC0
607   7FC0              	SAVESNA "Pruebas.sna", START
608   7FC0
609   7FC0
610   7FC0
# file closed: Banco_de_pruebas.asm
