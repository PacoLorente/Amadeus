# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 3F 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000
 11+  8000 08 80        Indice_disparo defw Disparo_0
 12+  8002 0C 80        	defw Disparo_f9
 13+  8004 10 80        	defw Disparo_fb
 14+  8006 14 80        	defw Disparo_fd
 15+  8008
 16+  8008              ; Disparo (CTRL_DESPLZ)="0".
 17+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 18+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 19+  800C 00 60 00 60  Disparo_f9 DEFB $00,$60,$00,$60
 20+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 21+  8010 18 00 18 00  Disparo_fb DEFB $18,$00,$18,$00
 22+  8014              ; Disparo (CTRL_DESPLZ)="fd"
 23+  8014 06 00 06 00  Disparo_fd DEFB $06,$00,$06,$00
 24+  8018
 25+  8018              ; ----------------------------------------------------------------------------------------
 26+  8018
 27+  8018              ; Badsat_izq. 2x2.
 28+  8018
 29+  8018 28 80        Indice_Badsat_izq defw Badsat_izquierda
 30+  801A 68 81        	defw Badsat_izq_fe
 31+  801C 38 81        	defw Badsat_izq_fd
 32+  801E 08 81        	defw Badsat_izq_fc
 33+  8020 D8 80        	defw Badsat_izq_fb
 34+  8022 A8 80        	defw Badsat_izq_fa
 35+  8024 78 80        	defw Badsat_izq_f9
 36+  8026 48 80        	defw Badsat_izq_f8
 37+  8028
 38+  8028 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 38+  802C 02 2A 02 55
 39+  8030 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 39+  8034 7F E8 03 60
 40+  8038 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 40+  803C 2B E8 54 40
 41+  8040 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 41+  8044 28 00 10 00
 42+  8048
 43+  8048 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 43+  804C 0A 00 01 15
 44+  8050 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 44+  8054 01 55 00 01
 45+  8058 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 45+  805C 00 01 B0 00
 46+  8060 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 46+  8064 FC 00 15 F4
 47+  8068 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 47+  806C 55 30 00 2A
 48+  8070 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 48+  8074 00 08 00 00
 49+  8078
 50+  8078 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 50+  807C 85 00 00 8A
 51+  8080 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 51+  8084 00 AA 80 00
 52+  8088 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 52+  808C 00 00 D8 00
 53+  8090 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 53+  8094 FE 00 0A FA
 54+  8098 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 54+  809C 2A 98 00 15
 55+  80A0 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 55+  80A4 00 04 00 00
 56+  80A8
 57+  80A8 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 57+  80AC 42 80 00 45
 58+  80B0 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 58+  80B4 00 55 40 00
 59+  80B8 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 59+  80BC 00 00 6C 00
 60+  80C0 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 60+  80C4 FF 00 05 7D
 61+  80C8 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 61+  80CC 15 4C 00 0A
 62+  80D0 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 62+  80D4 00 02 00 00
 63+  80D8
 64+  80D8 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 64+  80DC 21 40 00 22
 65+  80E0 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 65+  80E4 00 2A A0 00
 66+  80E8 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 66+  80EC 80 00 36 00
 67+  80F0 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 67+  80F4 7F 80 02 BE
 68+  80F8 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 68+  80FC 0A A6 00 05
 69+  8100 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 69+  8104 00 01 00 00
 70+  8108
 71+  8108 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 71+  810C 10 A0 00 11
 72+  8110 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 72+  8114 00 15 50 00
 73+  8118 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 73+  811C 40 00 1B 00
 74+  8120 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 74+  8124 BF C0 01 5F
 75+  8128 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 75+  812C 05 53 00 02
 76+  8130 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 76+  8134 00 00 80 00
 77+  8138
 78+  8138 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 78+  813C 08 50 00 08
 79+  8140 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 79+  8144 00 0A A8 00
 80+  8148 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 80+  814C A0 00 0D 80
 81+  8150 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 81+  8154 5F F8 00 AF
 82+  8158 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 82+  815C 02 A9 00 01
 83+  8160 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 83+  8164 00 00 40 00
 84+  8168
 85+  8168 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 85+  816C 04 28 00 04
 86+  8170 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 86+  8174 00 05 54 00
 87+  8178 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 87+  817C D0 00 06 C0
 88+  8180 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 88+  8184 2F FC 00 57
 89+  8188 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 89+  818C 01 54 80 00
 90+  8190 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 90+  8194 00 00 20 00
 91+  8198
 92+  8198
 93+  8198 A8 81        Indice_Badsat_der defw Badsat_derecha
 94+  819A C8 81        	defw Badsat_der_f8
 95+  819C F8 81        	defw Badsat_der_f9
 96+  819E 28 82        	defw Badsat_der_fa
 97+  81A0 58 82        	defw Badsat_der_fb
 98+  81A2 88 82        	defw Badsat_der_fc
 99+  81A4 B8 82        	defw Badsat_der_fd
100+  81A6 E8 82        	defw Badsat_der_fe
101+  81A8
102+  81A8 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
102+  81AC 54 40 AA 40
103+  81B0 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
103+  81B4 17 FE 06 C0
104+  81B8 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
104+  81BC 17 D4 02 2A
105+  81C0 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
105+  81C4 00 14 00 08
106+  81C8
107+  81C8 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
107+  81CC 20 00 2A 20
108+  81D0 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
108+  81D4 2A A0 00 15
109+  81D8 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
109+  81DC 00 03 60 00
110+  81E0 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
110+  81E4 F4 00 0B EA
111+  81E8 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
111+  81EC 03 2A 80 00
112+  81F0 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
112+  81F4 00 00 04 00
113+  81F8
114+  81F8 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
114+  81FC 10 00 15 10
115+  8200 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
115+  8204 15 50 00 0A
116+  8208 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
116+  820C 80 01 B0 00
117+  8210 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
117+  8214 FA 00 05 F5
118+  8218 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
118+  821C 01 95 40 00
119+  8220 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
119+  8224 00 00 02 00
120+  8228
121+  8228 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
121+  822C 08 00 0A 88
122+  8230 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
122+  8234 0A A8 00 05
123+  8238 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
123+  823C C0 00 D8 00
124+  8240 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
124+  8244 FD 00 02 FA
125+  8248 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
125+  824C 00 CA A0 00
126+  8250 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
126+  8254 80 00 01 00
127+  8258
128+  8258 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
128+  825C 84 00 05 44
129+  8260 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
129+  8264 05 54 00 02
130+  8268 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
130+  826C E0 00 6C 00
131+  8270 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
131+  8274 FE 80 01 7D
132+  8278 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
132+  827C 00 65 50 00
133+  8280 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
133+  8284 40 00 00 80
134+  8288
135+  8288 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
135+  828C 42 00 02 A2
136+  8290 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
136+  8294 02 AA 00 01
137+  8298 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
137+  829C F0 00 36 00
138+  82A0 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
138+  82A4 FF 40 00 BE
139+  82A8 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
139+  82AC 00 32 A8 00
140+  82B0 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
140+  82B4 A0 00 00 40
141+  82B8
142+  82B8 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
142+  82BC A1 00 01 51
143+  82C0 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
143+  82C4 01 55 00 00
144+  82C8 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
144+  82CC F8 00 1B 00
145+  82D0 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
145+  82D4 FF A0 00 1F
146+  82D8 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
146+  82DC 00 09 54 00
147+  82E0 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
147+  82E4 50 00 00 20
148+  82E8
149+  82E8 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
149+  82EC 50 80 00 A8
150+  82F0 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
150+  82F4 00 AA 80 00
151+  82F8 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
151+  82FC FC 00 0D 80
152+  8300 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
152+  8304 FF D0 00 0F
153+  8308 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
153+  830C 00 04 AA 00
154+  8310 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
154+  8314 28 00 00 10
155+  8318
156+  8318              ; ----------------------------------------------------------------------------------------
157+  8318
158+  8318              ; Amadeus. 2x2.
159+  8318
160+  8318 38 83        Indice_Amadeus_der defw Amadeus
161+  831A 00 00        	defw 0
162+  831C 58 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
163+  831E 00 00        	defw 0
164+  8320 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
165+  8322 00 00        	defw 0
166+  8324 B8 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
167+  8326 00 00        	defw 0	 								; (Fín de índice).
168+  8328
169+  8328 38 83        Indice_Amadeus_izq defw Amadeus
170+  832A 00 00        	defw 0
171+  832C B8 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
172+  832E 00 00        	defw 0
173+  8330 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
174+  8332 00 00        	defw 0
175+  8334 58 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
176+  8336 00 00        	defw 0	 								; (Fín de índice).
177+  8338
178+  8338 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
178+  833C 26 64 24 24
179+  8340 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
179+  8344 6F F6 67 E6
180+  8348 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
180+  834C F7 EF FF FF
181+  8350 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
181+  8354 8B D1 71 8E
182+  8358
183+  8358 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
183+  835C F1 00 09 99
184+  8360 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
184+  8364 0B 0D 00 1B
185+  8368 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
185+  836C 80 19 F9 80
186+  8370 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
186+  8374 F3 C0 3D FB
187+  8378 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
187+  837C 3E F7 C0 3E
188+  8380 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
188+  8384 40 1C 63 80
189+  8388
190+  8388 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
190+  838C 3C 40 02 66
191+  8390 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
191+  8394 02 C3 40 06
192+  8398 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
192+  839C 60 06 7E 60
193+  83A0 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
193+  83A4 3C F0 0F 7E
194+  83A8 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
194+  83AC 0F BD F0 0F
195+  83B0 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
195+  83B4 10 07 18 E0
196+  83B8
197+  83B8 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
197+  83BC 8F 10 00 99
198+  83C0 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
198+  83C4 00 B0 D0 01
199+  83C8 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
199+  83CC D8 01 9F 98
200+  83D0 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
200+  83D4 CF 3C 03 DF
201+  83D8 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
201+  83DC 03 EF 7C 03
202+  83E0 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
202+  83E4 44 01 C6 38
203+  83E8
204+  83E8              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83E8              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83E8
  2+  83E8              ; Base de datos de entidades e Índice.
  3+  83E8              ;
  4+  83E8              ; 17/02/23
  5+  83E8
  6+  83E8              ; Control. %00000001 00000001
  7+  83E8              ;
  8+  83E8              ;     [Bit0] ..... Impacto. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
  9+  83E8              ;                  _ hacen las entidades hacia abajo.
 10+  83E8              ;
 11+  83E8              ;     [Bit8] ..... Dirección. "1" Cuando se produce colisión al generar un disparo.
 12+  83E8
 13+  83E8 EE 83        Indice_de_disparos_Amadeus defw Disparo_1A
 14+  83EA F6 83        	defw Disparo_2A
 15+  83EC FE 83        	defw Disparo_3A
 16+  83EE
 17+  83EE 00 00        Disparo_1A defw 0									; Control.
 18+  83F0 00 00        	defw 0											; Puntero objeto.
 19+  83F2 00 00        	defw 0											; Puntero de impresión.
 20+  83F4 00 00        	defw 0											; Rutina de impresión.
 21+  83F6
 22+  83F6 00 00        Disparo_2A defw 0									; Control.
 23+  83F8 00 00        	defw 0											; Puntero objeto.
 24+  83FA 00 00        	defw 0											; Puntero de impresión.
 25+  83FC 00 00        	defw 0											; Rutina de impresión.
 26+  83FE
 27+  83FE 00 00        Disparo_3A defw 0
 28+  8400
 29+  8400 16 84        Indice_de_disparos_entidades defw Disparo_1
 30+  8402 1E 84        	defw Disparo_2
 31+  8404 26 84        	defw Disparo_3
 32+  8406 2E 84        	defw Disparo_4
 33+  8408 36 84        	defw Disparo_5
 34+  840A 3E 84        	defw Disparo_6
 35+  840C 46 84        	defw Disparo_7
 36+  840E 4E 84        	defw Disparo_8
 37+  8410 56 84        	defw Disparo_9
 38+  8412 5E 84        	defw Disparo_10
 39+  8414 66 84        	defw Disparo_11
 40+  8416
 41+  8416 00 00        Disparo_1 defw 0									; Control.
 42+  8418 00 00        	defw 0											; Puntero objeto.
 43+  841A 00 00        	defw 0											; Puntero de impresión.
 44+  841C 00 00        	defw 0											; Rutina de impresión.
 45+  841E
 46+  841E 00 00        Disparo_2 defw 0									; Control.
 47+  8420 00 00        	defw 0											; Puntero objeto.
 48+  8422 00 00        	defw 0											; Puntero de impresión.
 49+  8424 00 00        	defw 0											; Rutina de impresión.
 50+  8426
 51+  8426 00 00        Disparo_3 defw 0									; Control.
 52+  8428 00 00        	defw 0											; Puntero objeto.
 53+  842A 00 00        	defw 0											; Puntero de impresión.
 54+  842C 00 00        	defw 0											; Rutina de impresión.
 55+  842E
 56+  842E 00 00        Disparo_4 defw 0									; Control.
 57+  8430 00 00        	defw 0											; Puntero objeto.
 58+  8432 00 00        	defw 0											; Puntero de impresión.
 59+  8434 00 00        	defw 0											; Rutina de impresión.
 60+  8436
 61+  8436 00 00        Disparo_5 defw 0									; Control.
 62+  8438 00 00        	defw 0											; Puntero objeto.
 63+  843A 00 00        	defw 0											; Puntero de impresión.
 64+  843C 00 00        	defw 0											; Rutina de impresión.
 65+  843E
 66+  843E 00 00        Disparo_6 defw 0									; Control.
 67+  8440 00 00        	defw 0											; Puntero objeto.
 68+  8442 00 00        	defw 0											; Puntero de impresión.
 69+  8444 00 00        	defw 0											; Rutina de impresión.
 70+  8446
 71+  8446 00 00        Disparo_7 defw 0									; Control.
 72+  8448 00 00        	defw 0											; Puntero objeto.
 73+  844A 00 00        	defw 0											; Puntero de impresión.
 74+  844C 00 00        	defw 0											; Rutina de impresión.
 75+  844E
 76+  844E 00 00        Disparo_8 defw 0									; Control.
 77+  8450 00 00        	defw 0											; Puntero objeto.
 78+  8452 00 00        	defw 0											; Puntero de impresión.
 79+  8454 00 00        	defw 0											; Rutina de impresión.
 80+  8456
 81+  8456 00 00        Disparo_9 defw 0									; Control.
 82+  8458 00 00        	defw 0											; Puntero objeto.
 83+  845A 00 00        	defw 0											; Puntero de impresión.
 84+  845C 00 00        	defw 0											; Rutina de impresión.
 85+  845E
 86+  845E 00 00        Disparo_10 defw 0									; Control.
 87+  8460 00 00        	defw 0											; Puntero objeto.
 88+  8462 00 00        	defw 0											; Puntero de impresión.
 89+  8464 00 00        	defw 0											; Rutina de impresión.
 90+  8466
 91+  8466 00 00        Disparo_11 defw 0
 92+  8468
 93+  8468              ; -------------------------------------------------------------------------------------
 94+  8468
 95+  8468              Indice_de_entidades									; 58 Bytes por entidad.
 96+  8468
 97+  8468 AE 84        	defw Entidad_1
 98+  846A E8 84        	defw Entidad_2
 99+  846C 22 85        	defw Entidad_3
100+  846E 5C 85        	defw Entidad_4
101+  8470              ;	...
102+  8470              ;	...
103+  8470              ;	+ entidades ...
104+  8470
105+  8470 00 00        	defw 0
106+  8472 00 00        	defw 0
107+  8474
108+  8474              ; ---------- ---------- ---------- ---------- ----------
109+  8474
110+  8474 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
111+  8476 00 00        	defw 0		 									; (Posicion_actual).
112+  8478 00 00        	defw 0	 										; (Puntero_objeto).
113+  847A 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
114+  847D
115+  847D 05           	db %00000101									; (Attr).
116+  847E
117+  847E 18 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
118+  8480 28 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
119+  8482 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
120+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
121+  8486
122+  8486 D0 50        	defw $50d0										; (Posicion_inicio).
123+  8488 04           	db 4 											; (Cuad_objeto).
124+  8489
125+  8489 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
126+  848D
127+  848D 00 00        	db 0,0											; Variables_de_borrado
128+  848F 00 00        	defw 0											;	" " " " " " "
129+  8491 00 00        	defw 0											;	" " " " " " "
130+  8493 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
131+  8497
132+  8497 00 00        	db 0,0											; Variables_de_pintado
133+  8499 00 00        	defw 0											;	" " " " " " "
134+  849B 00 00        	defw 0											;	" " " " " " "
135+  849D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
136+  84A1
137+  84A1 40 00        	db $40,0										; (Ctrl_0) / (Obj_dibujado).
138+  84A3
139+  84A3 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
140+  84A7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
141+  84AA
142+  84AA 00           	db 0 											; (Columnas).
143+  84AB 00 00        	defw 0											; (Limite_horizontal).
144+  84AD 00           	db 0											; (Limite_vertical).
145+  84AE
146+  84AE              ; ---------- ---------- ---------- ---------- ----------
147+  84AE
148+  84AE 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
149+  84B0 00 00        	defw 0											; (Posicion_actual).
150+  84B2 00 00        	defw 0 											; (Puntero_objeto).
151+  84B4 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
152+  84B7
153+  84B7 00           	db %00000000 									; (Attr).
154+  84B8
155+  84B8 00 00        	defw 0											; (Indice_Sprite_der).
156+  84BA 00 00        	defw 0											; (Indice_Sprite_izq).
157+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_der).
158+  84BE 00 00        	defw 0											; (Puntero_DESPLZ_izq).
159+  84C0
160+  84C0 00 00        	defw 0											; (Posicion_inicio).
161+  84C2 00           	db 0											; (Cuad_objeto).
162+  84C3
163+  84C3 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
164+  84C7
165+  84C7 00 00        	db 0,0										    ; Variables_de_borrado
166+  84C9 00 00        	defw 0											;	" " " " " " "
167+  84CB 00 00        	defw 0											;	" " " " " " "
168+  84CD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
169+  84D1
170+  84D1 00 00        	db 0,0											; Variables_de_pintado
171+  84D3 00 00        	defw 0											;	" " " " " " "
172+  84D5 00 00        	defw 0											;	" " " " " " "
173+  84D7 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
174+  84DB
175+  84DB 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
176+  84DD
177+  84DD 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
178+  84E1 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
179+  84E4
180+  84E4 00           	db 0 											; (Columnas).
181+  84E5 00 00        	defw 0											; (Limite_horizontal).
182+  84E7 00           	db 0											; (Limite_vertical).
183+  84E8
184+  84E8              ; ---------- ---------- ---------- ---------- ----------
185+  84E8
186+  84E8 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
187+  84EA 00 00        	defw 0                                          ; (Posicion_actual).
188+  84EC 00 00        	defw 0											; (Puntero_objeto).
189+  84EE 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
190+  84F1
191+  84F1 02           	db %00000010									; (Attr).
192+  84F2
193+  84F2 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
194+  84F4 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
195+  84F6 00 00        	defw 0											; (Puntero_DESPLZ_der).
196+  84F8 00 00        	defw 0											; (Puntero_DESPLZ_izq).
197+  84FA
198+  84FA 7E 47        	defw $477e                                      ; (Posicion_inicio).
199+  84FC 02           	db 2											; (Cuad_objeto).
200+  84FD
201+  84FD 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
202+  8501
203+  8501 00 00        	db 0,0											; Variables_de_borrado
204+  8503 00 00        	defw 0										 	;	" " " " " " "
205+  8505 00 00        	defw 0											;	" " " " " " "
206+  8507 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
207+  850B
208+  850B 00 00        	db 0,0											; Variables_de_pintado
209+  850D 00 00        	defw 0											;	" " " " " " "
210+  850F 00 00        	defw 0											;	" " " " " " "
211+  8511 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
212+  8515
213+  8515 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
214+  8517
215+  8517 F3 93 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
216+  851B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
217+  851E
218+  851E 00           	db 0 											; (Columnas).
219+  851F 00 00        	defw 0											; (Limite_horizontal).
220+  8521 00           	db 0											; (Limite_vertical).
221+  8522
222+  8522              ; ---------- ---------- ---------- ---------- ----------
223+  8522
224+  8522 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
225+  8524 00 00        	defw 0                                          ; (Posicion_actual).
226+  8526 00 00        	defw 0											; (Puntero_objeto).
227+  8528 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
228+  852B
229+  852B 04           	db %00000100									; (Attr).
230+  852C
231+  852C 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
232+  852E 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
233+  8530
234+  8530 00 00        	defw 0											; (Puntero_DESPLZ_der).
235+  8532 00 00        	defw 0											; (Puntero_DESPLZ_izq).
236+  8534
237+  8534 A1 47        	defw $47a1                                      ; (Posicion_inicio).
238+  8536 01           	db 1											; (Cuad_objeto).
239+  8537
240+  8537 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
241+  853B
242+  853B 00 00        	db 0,0											; Variables_de_borrado
243+  853D 00 00        	defw 0										 	;	" " " " " " "
244+  853F 00 00        	defw 0											;	" " " " " " "
245+  8541 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
246+  8545
247+  8545 00 00        	db 0,0											; Variables_de_pintado
248+  8547 00 00        	defw 0											;	" " " " " " "
249+  8549 00 00        	defw 0											;	" " " " " " "
250+  854B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
251+  854F
252+  854F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
253+  8551
254+  8551 F5 93 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
255+  8555 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
256+  8558
257+  8558 00           	db 0 											; (Columnas).
258+  8559 00 00        	defw 0											; (Limite_horizontal).
259+  855B 00           	db 0											; (Limite_vertical).
260+  855C
261+  855C              ; ---------- ---------- ---------- ---------- ----------
262+  855C
263+  855C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
264+  855E 00 00        	defw 0                                          ; (Posicion_actual).
265+  8560 00 00        	defw 0 											; (Puntero_objeto).
266+  8562 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
267+  8565
268+  8565 01           	db %00000001									; (Attr).
269+  8566
270+  8566 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
271+  8568 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
272+  856A
273+  856A 00 00        	defw 0											; (Puntero_DESPLZ_der).
274+  856C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
275+  856E
276+  856E BE 47        	defw $47be                                      ; (Posicion_inicio).
277+  8570 00           	db 0											; (Cuad_objeto).
278+  8571
279+  8571 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
280+  8575
281+  8575 00 00        	db 0,0											; Variables_de_borrado
282+  8577 00 00        	defw 0										 	;	" " " " " " "
283+  8579 00 00        	defw 0											;	" " " " " " "
284+  857B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
285+  857F
286+  857F 00 00        	db 0,0											; Variables_de_pintado
287+  8581 00 00        	defw 0											;	" " " " " " "
288+  8583 00 00        	defw 0											;	" " " " " " "
289+  8585 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
290+  8589
291+  8589 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
292+  858B
293+  858B E5 93 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
294+  858F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
295+  8592
296+  8592 00           	db 0 											; (Columnas).
297+  8593 00 00        	defw 0											; (Limite_horizontal).
298+  8595 00           	db 0											; (Limite_vertical).
299+  8596
# file closed: Entidades_y_disparos.asm
 21   8596
 22   8596              ; ******************************************************************************************************************************************************************************************
 23   8596              ; Constantes.
 24   8596              ; ******************************************************************************************************************************************************************************************
 25   8596              ;
 26   8596              ; 8/11/22
 27   8596              ;
 28   8596              ; Constantes generales.
 29   8596              ;
 30   8596
 31   8596              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8596              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8596              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8596              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8596
 36   8596              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 37   8596              ;                                   				    ; _de los registros y las llamadas a las rutinas de impresión.
 38   8596              ;                               				        ; De momento situamos este almacén en $7000.
 39   8596              Album_de_fotos_disparos equ $7060						; En (Album_de_fotos_disparos) vamos a ir almacenando los valores_
 40   8596              ;                                   				    ; _de los registros y llamadas a las distintas rutinas de impresión para poder pintar `disparos´.
 41   8596              ;                               				        ; De momento situamos este almacén en $7060.
 42   8596
 43   8596              ; ******************************************************************************************************************************************************************************************
 44   8596              ; Variables.
 45   8596              ; ******************************************************************************************************************************************************************************************
 46   8596              ;
 47   8596              ; 10/11/22
 48   8596              ;
 49   8596              ; Variables de DRAW. (Motor principal).
 50   8596              ;
 51   8596              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 52   8596
 53   8596 02           Filas db 2												; Filas. [DRAW]
 54   8597 02           Columns db 2  											; Nº de columnas. [DRAW]
 55   8598 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 56   859A 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 57   859C 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 58   859D 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 59   859E
 60   859E              ; ---------- ---------- ---------- ---------;      ;---------
 61   859E
 62   859E 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 63   859F              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 64   859F              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 65   859F 04           Attr db %00000100										; Atributos de la entidad:
 66   85A0
 67   85A0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   85A0              ;
 69   85A0              ;	COLORES: 0 ..... NEGRO
 70   85A0              ;    		 1 ..... AZUL
 71   85A0              ; 			 2 ..... ROJO
 72   85A0              ;			 3 ..... MAGENTA
 73   85A0              ; 			 4 ..... VERDE
 74   85A0              ; 			 5 ..... CIAN
 75   85A0              ;			 6 ..... AMARILLO
 76   85A0              ; 			 7 ..... BLANCO
 77   85A0
 78   85A0 98 81        Indice_Sprite_der defw Indice_Badsat_der
 79   85A2 18 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   85A4 00 00        Puntero_DESPLZ_der defw 0
 81   85A6 00 00        Puntero_DESPLZ_izq defw 0
 82   85A8
 83   85A8 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   85AA 02           Cuad_objeto db 2										; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   85AB
 86   85AB              ; Variables de objeto. (Características).
 87   85AB
 88   85AB 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   85AC 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   85AD 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   85AE 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   85AF
 93   85AF 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   85B1 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   85B3 00 00        	defw 0
 96   85B5 00 00 00 00  	db 0,0,0,0
 97   85B9
 98   85B9 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   85BB 00 00        	defw 0
100   85BD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   85BF 00 00 00 00  	db 0,0,0,0
102   85C3
103   85C3              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   85C3
105   85C3 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   85C4              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   85C4              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   85C4              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   85C4              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   85C4              ;
111   85C4              ; 														DESCRIPCIÖN:
112   85C4              ;
113   85C4              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   85C4              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   85C4              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   85C4              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   85C4              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   85C4              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   85C4              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   85C4              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   85C4              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   85C4              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   85C4              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   85C4              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   85C4              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   85C4              ;
127   85C4              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   85C4              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   85C4              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   85C4
131   85C4 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   85C5
133   85C5              ; Movimiento.
134   85C5
135   85C5 E1 93        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
136   85C7 00 00        Puntero_mov defw 0
137   85C9 00           Contador_db_mov db 0
138   85CA 00           Incrementa_puntero db 0
139   85CB 00           Repetimos_db db 0
140   85CC
141   85CC              ; Variables de funcionamiento. [DRAW].
142   85CC
143   85CC 00           Columnas db 0
144   85CD 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
145   85CF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   85CF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   85D0
148   85D0              ; 59 Bytes por entidad.
149   85D0              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
150   85D0              ;					         		---------;      ;---------
151   85D0
152   85D0
153   85D0              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   85D0
155   85D0 00           Ctrl_1 db 0 											; 2º Byte de control de propósito general.
156   85D1
157   85D1              ;														DESCRIPCIÓN:
158   85D1              ;
159   85D1              ;														BIT 0, La rutina de generación de disparos, [Genera_disparo], pone este bit a "1" para indicar a la_
160   85D1              ;															_ rutina [Guarda_foto_registros] que los datos a guardar pertenecen a un disparo y no a una entidad,_
161   85D1              ;															_ por lo tanto hemos de almacenarlos en `Album_de_fotos_disparos´ en lugar de `Album_de_fotos´.
162   85D1              ; Gestión de ENTIDADES.
163   85D1
164   85D1 00 00        Puntero_store_entidades defw 0
165   85D3 00 00        Puntero_restore_entidades defw 0
166   85D5 00 00        Indice_restore defw 0
167   85D7 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
168   85D8 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
169   85D9              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
170   85D9              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
171   85D9              ;														; _ (Numero_de_malotes)="0".
172   85D9 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
173   85DB              ;														; _variable para almacenar lo posición del puntero_
174   85DB              ; 														; _de pila, SP.
175   85DB 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
176   85DD              ;														; La utiliza la rutina [Extrae_foto_registros].
177   85DD 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
178   85DF              ;														; _el snapshot de los registros de la siguiente entidad.
179   85DF              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
180   85DF 60 70        Stack_snapshot_disparos defw Album_de_fotos_disparos	; Puntero que indica la posición de memoria donde vamos a guardar_
181   85E1              ;														; _el snapshot de los registros del siguiente disparo.
182   85E1              ;														; Inicialmente está situado en la posición $7060, Album_de_fotos_disparos.
183   85E1
184   85E1              ; Gestión de Disparos.
185   85E1
186   85E1              ;Puntero_extraccion_disparo_Amadeus defw 0
187   85E1              ;Puntero_extraccion_disparo_entidades defw 0
188   85E1 00           Numero_de_disparotes db 0
189   85E2 00 00        Puntero_DESPLZ_DISPARO_ENTIDADES defw 0
190   85E4 00 00        Puntero_DESPLZ_DISPARO_AMADEUS defw 0
191   85E6
192   85E6              ; Gestión de FRAMES.
193   85E6
194   85E6 00           Switch db 0
195   85E7
196   85E7              ; Variables de Raster y localización en pantalla.
197   85E7
198   85E7 00 FF        Temp_Raster defw $ff00
199   85E9
200   85E9              ; Rutina principal *************************************************************************************************************************************************************************
201   85E9              ;
202   85E9              ;	14/11/22
203   85E9
204   85E9 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
205   85EC
206   85EC 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
207   85EE ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
208   85F0 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
209   85F2 F3           	DI
210   85F3
211   85F3 3E 01        	ld a,1
212   85F5 D3 FE        	out ($fe),a
213   85F7
214   85F7 3E 07        	ld a,%00000111
215   85F9 CD 1A 90     	call Cls
216   85FC
217   85FC              ;	call Pinta_FILAS
218   85FC
219   85FC CD 3B 88     	call Pulsa_ENTER
220   85FF
221   85FF 21 D7 85     	ld hl,Numero_de_entidades
222   8602 46           	ld b,(hl)
223   8603 04           	inc b
224   8604 05           	dec b
225   8605 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
226   8607
227   8607              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
228   8607              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
229   8607              ;	Pintamos el resto de entidades:
230   8607
231   8607 CD 34 87     	call Inicia_punteros_de_entidades
232   860A
233   860A              ;	INICIA ENTIDADES!!!!!
234   860A
235   860A C5           1 push bc  												; Guardo el contador de entidades.
236   860B CD 8E 87      	call Inicia_Puntero_objeto
237   860E CD 6A 8A     	call Draw
238   8611 CD A0 7F     	call Guarda_foto_registros
239   8614 CD D6 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
240   8617 C1           	pop bc
241   8618 10 F0        	djnz 1B  											; Decremento el contador de entidades.
242   861A
243   861A              ; 	INICIA AMADEUS!!!!!
244   861A
245   861A CD 17 88     3 call Restore_Amadeus
246   861D CD 8E 87     	call Inicia_Puntero_objeto
247   8620 CD 6A 8A     	call Draw
248   8623 CD A0 7F     	call Guarda_foto_registros
249   8626 CD 29 88     	call Store_Amadeus
250   8629
251   8629              ; Iniciamos los punteros de los índices de las dos bases de datos de disparo, (Amadeus/Entidades).
252   8629
253   8629 CD 4A 87     	call Inicia_Puntero_Disparo_Entidades
254   862C CD 51 87     	call Inicia_Puntero_Disparo_Amadeus
255   862F
256   862F              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
257   862F
258   862F CD 34 87     	call Inicia_punteros_de_entidades
259   8632 CD 05 88     	call Restore_Primera_entidad
260   8635
261   8635 3A D7 85     	ld a,(Numero_de_entidades)
262   8638 3C           	inc a
263   8639 32 D8 85     	ld (Numero_de_malotes),a
264   863C
265   863C FB           2 ei
266   863D 18 FD        	jr 2B
267   863F
268   863F              ; -----------------------------------------------------------------------------------
269   863F
270   863F              Frame
271   863F
272   863F              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
273   863F              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
274   863F
275   863F 3E 02            ld a,2
276   8641 D3 FE            out ($fe),a
277   8643 CD 6E 8D     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
278   8646 CD A7 8D     	call Extrae_foto_disparos
279   8649 3E 01            ld a,1
280   864B D3 FE            out ($fe),a
281   864D
282   864D              ; ----------------------------------------------------------------------
283   864D
284   864D CD 01 8A     	call Limpia_album_disparos 							; Después de borrar/pintar los disparos, limpiamos el album.
285   8650 CD 1F 8A     	call Motor_de_disparos								; Borra/mueve/pinta cada uno de los disparos.
286   8653
287   8653 21 00 70     	ld hl,Album_de_fotos
288   8656 22 DD 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
289   8659              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
290   8659 3A D7 85         ld a,(Numero_de_entidades)
291   865C 47               ld b,a
292   865D A7           	and a
293   865E 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
294   8660
295   8660 C5           2 push bc
296   8661 CD AD 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
297   8664 3A C3 85     	ld a,(Ctrl_0)
298   8667 CB 67        	bit 4,a
299   8669 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
300   866B
301   866B              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
302   866B              ; Las entidades sólo generan disparo cuando se mueven.
303   866B              ; 16/02/23.
304   866B              ; [[[
305   866B CD 72 88     	call Detecta_disparo_entidad
306   866E              ; ]]]
307   866E CD FB 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
308   8671
309   8671 21 C3 85     1 ld hl,Ctrl_0
310   8674 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
311   8676 AF           	xor a
312   8677 32 C4 85     	ld (Obj_dibujado),a
313   867A CD D6 87     	call Store_Restore_entidades
314   867D C1           	pop bc
315   867E 10 E0        	djnz 2B
316   8680
317   8680              ; Tras la gestión de las entidades, ... AMADEUS.
318   8680
319   8680 CD 17 88     4 call Restore_Amadeus
320   8683 CD CC 86     	call Mov_Amadeus
321   8686 3A C3 85     	ld a,(Ctrl_0)
322   8689 CB 67        	bit 4,a
323   868B 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
324   868D CD FB 86     	call Guarda_foto_entidad_a_pintar
325   8690
326   8690 21 C3 85     3 ld hl,Ctrl_0
327   8693 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
328   8695 AF           	xor a
329   8696 32 C4 85     	ld (Obj_dibujado),a
330   8699 CD 29 88     	call Store_Amadeus
331   869C
332   869C              ; -----
333   869C
334   869C CD 34 87     	call Inicia_punteros_de_entidades
335   869F CD 05 88     	call Restore_Primera_entidad
336   86A2
337   86A2              ; Calculamos el nº de malotes y de disparotes para pintarlos nada más comenzar el siguiente FRAME.
338   86A2
339   86A2 CD 58 87     	call Calcula_numero_de_malotes
340   86A5 CD 70 87     	call Calcula_numero_de_disparotes
341   86A8
342   86A8 3E 04        	ld a,4
343   86AA D3 FE        	out ($fe),a
344   86AC C9           	ret
345   86AD
346   86AD              ; --------------------------------------------------------------------------------------------------------------
347   86AD              ;
348   86AD              ;	29/1/23
349   86AD
350   86AD              Mov_obj
351   86AD
352   86AD              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
353   86AD
354   86AD AF           	xor a
355   86AE 32 C4 85     	ld (Obj_dibujado),a
356   86B1 CD 05 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
357   86B4              ;														; Obj_dibujado="0".
358   86B4              ; Movemos Entidades malignas.
359   86B4
360   86B4 CD F7 93     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
361   86B7 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
362   86BA CB 67        	bit 4,a
363   86BC C8           	ret z
364   86BD
365   86BD              ; ---------
366   86BD
367   86BD 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
368   86BF 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
369   86C2 CD 05 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
370   86C5 CD 1C 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
371   86C8 CD EB 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
372   86CB C9           	ret													; _de la misma.
373   86CC
374   86CC              ; --------------------------------------------------------------------------------------------------------------
375   86CC              ;
376   86CC              ;	29/1/23
377   86CC
378   86CC              Mov_Amadeus
379   86CC
380   86CC AF           	xor a
381   86CD 32 C4 85     	ld (Obj_dibujado),a
382   86D0 CD 05 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
383   86D3              ;														; Obj_dibujado="0".
384   86D3              ; Movemos Amadeus.
385   86D3
386   86D3 CD 4F 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
387   86D6 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
388   86D9 CB 67        	bit 4,a
389   86DB C8           	ret z
390   86DC
391   86DC              ; ---------
392   86DC
393   86DC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
394   86DE 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
395   86E1 CD 05 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
396   86E4 CD 1C 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
397   86E7 CD EB 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
398   86EA C9           	ret													; _de la nave.
399   86EB
400   86EB              ; --------------------------------------------------------------------------------------------------------------
401   86EB              ;
402   86EB              ;	31/01/23
403   86EB              ;
404   86EB              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
405   86EB
406   86EB              Guarda_foto_entidad_a_borrar
407   86EB
408   86EB CD 44 8D     	call Prepara_draw
409   86EE CD 7E 8C     	call calcula_CColumnass
410   86F1 CD B5 8C     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
411   86F4 CD 0A 8D     	call Define_rutina_de_impresion
412   86F7 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
413   86FA C9           	ret
414   86FB
415   86FB              ; --------------------------------------------------------------------------------------------------------------
416   86FB              ;
417   86FB              ;	31/01/23
418   86FB              ;
419   86FB              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
420   86FB              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
421   86FB
422   86FB              Guarda_foto_entidad_a_pintar
423   86FB
424   86FB CD 28 87     	call Repone_pintar
425   86FE CD 6A 8A     	call Draw
426   8701 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
427   8704 C9           	ret
428   8705
429   8705              ; --------------------------------------------------------------------------------------------------------------
430   8705              ;
431   8705              ;
432   8705
433   8705 21 96 85     Prepara_var_pintado_borrado	ld hl,Filas
434   8708 3A C4 85     	ld a,(Obj_dibujado)
435   870B A7           	and a
436   870C 28 05        	jr z,1F
437   870E 11 B9 85     	ld de,Variables_de_pintado
438   8711 18 03        	jr 2F
439   8713 11 AF 85     1 ld de,Variables_de_borrado
440   8716 01 08 00     2 ld bc,8
441   8719 ED B0        	ldir
442   871B C9           	ret
443   871C
444   871C              ; --------------------------------------------------------------------------------------------------------------
445   871C
446   871C 21 AF 85     Repone_borrar ld hl,Variables_de_borrado
447   871F 11 96 85     	ld de,Filas
448   8722 01 08 00     	ld bc,8
449   8725 ED B0        	ldir
450   8727 C9           	ret
451   8728
452   8728 21 B9 85     Repone_pintar ld hl,Variables_de_pintado
453   872B 11 96 85     	ld de,Filas
454   872E 01 08 00     	ld bc,8
455   8731 ED B0        	ldir
456   8733 C9           	ret
457   8734
458   8734              ; *************************************************************************************************************************************************************
459   8734              ;
460   8734              ; 8/1/23
461   8734              ;
462   8734              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
463   8734              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
464   8734              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
465   8734
466   8734              ; Destruye HL y DE !!!!!
467   8734
468   8734              Inicia_punteros_de_entidades
469   8734
470   8734 21 68 84     	ld hl,Indice_de_entidades
471   8737 CD 88 87         call Extrae_address
472   873A 22 D1 85         ld (Puntero_store_entidades),hl
473   873D 21 6A 84     	ld hl,Indice_de_entidades+2
474   8740 22 D5 85     	ld (Indice_restore),hl
475   8743 CD 88 87     	call Extrae_address
476   8746 22 D3 85     	ld (Puntero_restore_entidades),hl
477   8749 C9               ret
478   874A
479   874A              ; *************************************************************************************************************************************************************
480   874A              ;
481   874A              ; 8/1/23
482   874A              ;
483   874A              ;	Inicializamos los punteros de selección de los 2 índices de disparo, Amadeus y Entidades.
484   874A
485   874A 21 00 84     Inicia_Puntero_Disparo_Entidades ld hl,Indice_de_disparos_entidades
486   874D 22 E2 85     	ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
487   8750 C9           	ret
488   8751 21 E8 83     Inicia_Puntero_Disparo_Amadeus ld hl,Indice_de_disparos_Amadeus
489   8754 22 E4 85     	ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
490   8757 C9           	ret
491   8758
492   8758              ; -------------------------------------------------------------------------------------------------------------
493   8758              ;
494   8758              ; 28/2/23
495   8758              ;
496   8758
497   8758              Calcula_numero_de_malotes
498   8758
499   8758 21 00 70     	ld hl,Album_de_fotos
500   875B EB           	ex de,hl
501   875C 2A DD 85     	ld hl,(Stack_snapshot)
502   875F
503   875F 06 00        	ld b,0
504   8761 7D           	ld a,l
505   8762 93           	sub e
506   8763 28 07        	jr z,1F
507   8765
508   8765              ; Nº de malotes no es "0".
509   8765
510   8765 D6 06        2 sub 6
511   8767 04           	inc b
512   8768 A7           	and a
513   8769 20 FA        	jr nz,2B
514   876B 78           	ld a,b
515   876C
516   876C 32 D8 85     1 ld (Numero_de_malotes),a
517   876F C9           	ret
518   8770
519   8770              ; -------------------------------------------------------------------------------------------------------------
520   8770              ;
521   8770              ; 28/2/23
522   8770              ;
523   8770
524   8770              Calcula_numero_de_disparotes
525   8770
526   8770 21 60 70     	ld hl,Album_de_fotos_disparos
527   8773 EB           	ex de,hl
528   8774 2A DF 85     	ld hl,(Stack_snapshot_disparos)
529   8777
530   8777 06 00        	ld b,0
531   8779 7D           	ld a,l
532   877A 93           	sub e
533   877B 28 07        	jr z,1F
534   877D
535   877D              ; Nº de malotes no es "0".
536   877D
537   877D D6 06        2 sub 6
538   877F 04           	inc b
539   8780 A7           	and a
540   8781 20 FA        	jr nz,2B
541   8783 78           	ld a,b
542   8784
543   8784 32 E1 85     1 ld (Numero_de_disparotes),a
544   8787 C9           	ret
545   8788              ; *************************************************************************************************************************************************************
546   8788              ;
547   8788              ; 20/10/22
548   8788              ;
549   8788              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
550   8788              ;
551   8788              ; Destruye el puntero y DE !!!!!
552   8788
553   8788 5E           Extrae_address ld e,(hl)
554   8789 23           	inc hl
555   878A 56           	ld d,(hl)
556   878B 2B           	dec hl
557   878C EB           	ex de,hl
558   878D C9           	ret
559   878E
560   878E              ; *************************************************************************************************************************************************************
561   878E              ;
562   878E              ;	7/2/23
563   878E              ;
564   878E              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
565   878E              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
566   878E              ;
567   878E              ;   Destruye HL y BC !!!!!,
568   878E              ;
569   878E              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
570   878E              ;					"0" ..... Izquierda.
571   878E
572   878E              Inicia_Puntero_objeto
573   878E
574   878E 3A AA 85     	ld a,(Cuad_objeto)
575   8791 E6 01        	and 1
576   8793 F5           	push af
577   8794 CC B2 87     	call z,Inicia_puntero_objeto_izq
578   8797 F1           	pop af
579   8798 28 2B        	jr z,1F
580   879A CD 9F 87     	call Inicia_puntero_objeto_der
581   879D 18 26        	jr 1F
582   879F
583   879F              ; Arrancamos desde la parte izquierda de la pantalla.
584   879F              ; Iniciamos (Indice_Sprite_der).
585   879F
586   879F 2A A0 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
587   87A2 22 A4 85     	ld (Puntero_DESPLZ_der),hl
588   87A5 CD 88 87     	call Extrae_address
589   87A8 22 9A 85     	ld (Puntero_objeto),hl
590   87AB
591   87AB 2A A2 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
592   87AE              ;	call Extrae_address
593   87AE 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
594   87B1 C9           	ret
595   87B2
596   87B2              ; Arrancamos desde la parte derecha de la pantalla.
597   87B2              ; Iniciamos (Indice_Sprite_izq).
598   87B2
599   87B2 2A A2 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
600   87B5 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
601   87B8 CD 88 87     	call Extrae_address
602   87BB 22 9A 85     	ld (Puntero_objeto),hl
603   87BE
604   87BE 2A A0 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
605   87C1              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
606   87C1 22 A4 85     	ld (Puntero_DESPLZ_der),hl
607   87C4 C9           	ret
608   87C5
609   87C5              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
610   87C5
611   87C5 21 38 83     1 ld hl,Amadeus
612   87C8 ED 4B 9A 85  	ld bc,(Puntero_objeto)
613   87CC B7 ED 42     	sub hl,bc
614   87CF C0           	ret nz
615   87D0 21 C3 85     	ld hl,Ctrl_0
616   87D3 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
617   87D5 C9           	ret 												; _de nuestra nave en los extremos.
618   87D6
619   87D6              ; *************************************************************************************************************************************************************
620   87D6              ;
621   87D6              ;	8/1/23
622   87D6              ;
623   87D6              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
624   87D6              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
625   87D6
626   87D6              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
627   87D6              ;	_de la 2ª y 3ª entidad respectivamente.
628   87D6
629   87D6              Store_Restore_entidades
630   87D6
631   87D6 E5           	push hl
632   87D7 D5           	push de
633   87D8 C5            	push bc
634   87D9
635   87D9              ;	STORE !!!!!
636   87D9              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
637   87D9
638   87D9 21 96 85     	ld hl,Filas
639   87DC ED 5B D1 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
640   87E0 01 3A 00     	ld bc,58
641   87E3 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
642   87E5
643   87E5              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
644   87E5
645   87E5 2A D3 85     	ld hl,(Puntero_restore_entidades)
646   87E8 22 D1 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
647   87EB 11 96 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
648   87EE 01 3A 00     	ld bc,58
649   87F1 ED B0        	ldir
650   87F3
651   87F3              ;	Incrementa RESTORE !!!!!
652   87F3
653   87F3 2A D5 85         ld hl,(Indice_restore)
654   87F6 23           	inc hl
655   87F7 23           	inc hl
656   87F8 22 D5 85     	ld (Indice_restore),hl
657   87FB CD 88 87         call Extrae_address
658   87FE 22 D3 85         ld (Puntero_restore_entidades),hl
659   8801 C1           	pop bc
660   8802 D1           	pop de
661   8803 E1           	pop hl
662   8804 C9           	ret
663   8805
664   8805              ; **************************************************************************************************
665   8805              ;
666   8805              ;	29/10/22
667   8805              ;
668   8805              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
669   8805
670   8805 E5           Restore_Primera_entidad push hl
671   8806 D5           	push de
672   8807 C5            	push bc
673   8808 2A D1 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
674   880B 11 96 85     	ld de,Filas
675   880E 01 3A 00     	ld bc,58
676   8811 ED B0        	ldir
677   8813 C1           	pop bc
678   8814 D1           	pop de
679   8815 E1           	pop hl
680   8816 C9           	ret
681   8817
682   8817              ; **************************************************************************************************
683   8817              ;
684   8817              ;	25/01/23
685   8817              ;
686   8817              ;	Restore_Amadeus
687   8817              ;
688   8817              ;	Cargamos en DRAW los parámetros de Amadeus.
689   8817              ;
690   8817
691   8817 E5           Restore_Amadeus	push hl
692   8818 D5           	push de
693   8819 C5            	push bc
694   881A 21 74 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
695   881D 11 96 85     	ld de,Filas
696   8820 01 3A 00     	ld bc,58
697   8823 ED B0        	ldir
698   8825 C1           	pop bc
699   8826 D1           	pop de
700   8827 E1           	pop hl
701   8828 C9           	ret
702   8829
703   8829              ; *************************************************************************************************************************************************************
704   8829              ;
705   8829              ;	29/01/23
706   8829              ;
707   8829              ;	Store_Amadeus
708   8829              ;
709   8829              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
710   8829              ;
711   8829
712   8829 E5           Store_Amadeus push hl
713   882A D5           	push de
714   882B C5            	push bc
715   882C 21 96 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
716   882F 11 74 84     	ld de,Amadeus_db
717   8832 01 3A 00     	ld bc,58
718   8835 ED B0        	ldir
719   8837 C1           	pop bc
720   8838 D1           	pop de
721   8839 E1           	pop hl
722   883A C9           	ret
723   883B
724   883B              ; **************************************************************************************************
725   883B
726   883B              ; Teclado.
727   883B
728   883B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
729   883D DB FE        	in a,($fe)
730   883F E6 01        	and $01
731   8841 28 02        	jr z,1f
732   8843 18 F6        	jr Pulsa_ENTER
733   8845 C9           1 ret
734   8846
735   8846              ; **************************************************************************************************
736   8846              ;
737   8846              ; Temporización.
738   8846
739   8846              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
740   8846              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
741   8846              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
742   8846              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
743   8846
744   8846              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
745   8846              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
746   8846              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
747   8846
748   8846              ; A partir de $4f61 no hace falta DELAY.
749   8846
750   8846              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
751   8846
752   8846 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
753   8849 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
754   884A 78           	LD A,B
755   884B A7           	AND A
756   884C 20 FB        	JR NZ,wait
757   884E C9           	RET
758   884F
759   884F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
760   884F              ;
761   884F              ;	5/3/23
762   884F              ;
763   884F              ;	En 1er lugar detectamos disparo (5), seguido de los movimientos a izq. / derecha.
764   884F
765   884F              Movimiento_Amadeus
766   884F
767   884F              ; Disparo.
768   884F
769   884F 3E F7        	ld a,$f7												; "5" para disparar.
770   8851 DB FE        	in a,($fe)
771   8853 E6 10        	and $10
772   8855 CC A6 88     	call z,Genera_disparo
773   8858
774   8858 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
775   885A DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
776   885C E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
777   885E CC A8 91         call z,Mov_left											;			"			"			"			"			"			"			"			"
778   8861 3E F7        	ld a,$f7
779   8863 DB FE        	in a,($fe)
780   8865 E6 01        	and $01
781   8867 C8           	ret z
782   8868
783   8868 3E F7        	ld a,$f7
784   886A DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
785   886C E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
786   886E CC 8A 90     	call z,Mov_right										;			"			"			"			"			"			"			"			"
787   8871 C9           	ret
788   8872
789   8872              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
790   8872              ;
791   8872              ;	Rutina provisional para que los malotes cagen balas.
792   8872
793   8872 3E 7F        Detecta_disparo_entidad ld a,$7f
794   8874 DB FE        	in a,($fe)
795   8876 E6 01        	and 1
796   8878 C0           	ret nz
797   8879 CD A6 88     	call Genera_disparo
798   887C C9           	ret
799   887D
800   887D              ; Pinta indicadores de FILAS. ------------------------------------------------------
801   887D
802   887D 21 10 40     Pinta_FILAS ld hl,$4010
803   8880              ;	ld b,9
804   8880              ;2 push hl
805   8880              ;	push bc
806   8880 06 BF        	ld b,$bf
807   8882 36 80        1 ld (hl),%10000000
808   8884 CD 50 8D     	call NextScan
809   8887 10 F9        	djnz 1B
810   8889              ;	pop bc
811   8889              ;	pop hl
812   8889              ;	inc l
813   8889              ;	djnz 2B
814   8889 06 03        	ld b,3
815   888B 21 00 47         ld hl,$4700
816   888E CD 94 88     3 call Bucle_1
817   8891 10 FB            djnz 3B
818   8893 C9               ret
819   8894
820   8894 C5           Bucle_1 push bc
821   8895 E5                   push hl
822   8896 D1                   pop de
823   8897 13                   inc de
824   8898 01 FF 00             ld bc,255
825   889B 36 FF                ld (hl),255
826   889D ED B0                ldir
827   889F 23                   inc hl
828   88A0 3E 07                ld a,7
829   88A2 84                   add a,h
830   88A3 67                   ld h,a
831   88A4 C1                   pop bc
832   88A5 C9                   ret
833   88A6
834   88A6              ; ---------------------------------------------------------------
835   88A6
836   88A6              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  88A6              ; ******************************************************************************************************************************************************************************************
  2+  88A6              ;
  3+  88A6              ;   19/02/23
  4+  88A6              ;
  5+  88A6              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  88A6              ;   En el caso de generar disparo la rutina proporciona 4 variables:
  7+  88A6              ;
  8+  88A6              ;
  9+  88A6              ;       -1 .defw ..... Control. %00000001 00000001
 10+  88A6              ;
 11+  88A6              ;           [Bit0] ..... Dirección. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
 12+  88A6              ;               _ hacen las entidades hacia abajo.
 13+  88A6              ;
 14+  88A6              ;           [Bit8] ..... Impacto. "1" Cuando se produce colisión al generar un disparo.
 15+  88A6              ;
 16+  88A6              ;       - 2 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 17+  88A6              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 18+  88A6              ;
 19+  88A6              ;       - 3 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 20+  88A6              ;           _ la bala.
 21+  88A6              ;
 22+  88A6              ;       - 4 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 23+  88A6              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 24+  88A6              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 25+  88A6              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 26+  88A6              ;           _ en el momento de generarse la bala)).
 27+  88A6
 28+  88A6              Genera_disparo
 29+  88A6
 30+  88A6              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 31+  88A6              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 32+  88A6              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 33+  88A6              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 34+  88A6              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 35+  88A6              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga estos valores, $00, $f9, $fb y $fd.
 36+  88A6              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 37+  88A6
 38+  88A6 3A CC 85         ld a,(Columnas)
 39+  88A9 47               ld b,a
 40+  88AA 3A 97 85         ld a,(Columns)
 41+  88AD B8               cp b
 42+  88AE C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 43+  88AF
 44+  88AF              ; ----- ----- -----
 45+  88AF
 46+  88AF 21 00 80         ld hl,Indice_disparo
 47+  88B2 3A 9E 85         ld a,(CTRL_DESPLZ)
 48+  88B5 4F               ld c,a
 49+  88B6 06 00            ld b,0	                            ; B será 0,1,2 o 3 en función del valor de (CTRL_DESPLZ).
 50+  88B8              ;                                           Cuando (CTRL_DESPLZ)="0", B="0"
 51+  88B8              ;                                            ""        ""       "f9", B="1"
 52+  88B8              ;                                            ""        ""       "fb", B="2"
 53+  88B8              ;                                            ""        ""       "fb", B="3"
 54+  88B8 A7               and a
 55+  88B9 28 10            jr z,1F
 56+  88BB E6 01            and 1
 57+  88BD C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 58+  88BE
 59+  88BE 79               ld a,c
 60+  88BF 16 F9            ld d,$f9
 61+  88C1 23           2 inc hl
 62+  88C2 23               inc hl
 63+  88C3 04               inc b
 64+  88C4 BA               cp d
 65+  88C5 28 04            jr z,1F
 66+  88C7 14               inc d
 67+  88C8 14               inc d
 68+  88C9 18 F6            jr 2B
 69+  88CB
 70+  88CB CD 88 87     1 call Extrae_address
 71+  88CE E5               push hl
 72+  88CF FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 73+  88D1 DD 21 E3 8F  	ld ix, Pinta_Disparo        		; Rutinas_de_impresion en IX.
 74+  88D5
 75+  88D5              ;	Se cumplen las condiciones necesarias para generar un disparo.
 76+  88D5              ;   Las variables de disparo varían en función del cuadrante en el que se encuentre la entidad/Amadeus.
 77+  88D5
 78+  88D5 3A AA 85     	ld a,(Cuad_objeto)
 79+  88D8 FE 02            cp 2
 80+  88DA 38 60            jr c,3F
 81+  88DC 28 5E            jr z,3F
 82+  88DE
 83+  88DE              ; 	Nos encontramos en la mitad inferior de la pantalla, (3er y 4º cuadrante).
 84+  88DE
 85+  88DE E6 01            and 1
 86+  88E0 28 2D            jr z,4F
 87+  88E2
 88+  88E2              ; 	Estamos en el 3er cuadrante de pantalla.
 89+  88E2              ; 	3er CUAD. ----- ----- ----- ----- -----
 90+  88E2              ;
 91+  88E2              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 92+  88E2              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 93+  88E2              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 94+  88E2
 95+  88E2 2A 98 85     	ld hl,(Posicion_actual)
 96+  88E5
 97+  88E5              ;   Amadeus o entidad ???.
 98+  88E5
 99+  88E5 3A C3 85         ld a,(Ctrl_0)
100+  88E8 CB 77            bit 6,a
101+  88EA 28 0D            jr z,8F
102+  88EC
103+  88EC              ; 	Dispara Amadeus.
104+  88EC
105+  88EC 0E 81            ld c,$81	                                    ; Dirección "$81", hacia arriba.
106+  88EE CD 5F 8D         call PreviousScan
107+  88F1 CD 5F 8D         call PreviousScan
108+  88F4
109+  88F4              ;	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
110+  88F4              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
111+  88F4              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
112+  88F4              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
113+  88F4
114+  88F4 CD 66 89         call Ajusta_disparo_parte_izquierda
115+  88F7 18 0E            jr 10F
116+  88F9
117+  88F9              ; 	Dispara Entidad.
118+  88F9
119+  88F9 0E 80        8 ld c,$80	                                        ; Dirección "$80", hacia abajo.
120+  88FB
121+  88FB              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
122+  88FB              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
123+  88FB
124+  88FB C5               push bc
125+  88FC 06 10            ld b,16
126+  88FE CD 50 8D     9 call NextScan
127+  8901 10 FB            djnz 9B
128+  8903 C1               pop bc
129+  8904
130+  8904              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
131+  8904              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
132+  8904              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
133+  8904              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
134+  8904
135+  8904 CD 66 89         call Ajusta_disparo_parte_izquierda
136+  8907
137+  8907 CD DB 89     10 call Comprueba_Colision                          ; Retorna "$81" o "$80" en B indicando si se produce Colisión
138+  890A              ;                                                   ; _al generar el disparo.
139+  890A
140+  890A              ; 	LLegados a este punto tendremos:
141+  890A              ;
142+  890A              ;       Puntero_objeto_disparo en IY.
143+  890A              ;       Rutinas_de_impresion en IX.
144+  890A              ;       Puntero_de_impresion en HL.
145+  890A              ;       Impacto/Dirección en BC.
146+  890A
147+  890A CD 6E 89         call Almacena_disparo
148+  890D 18 4F            jr 6F                                           ; RET.
149+  890F
150+  890F
151+  890F              ; 	Estamos en el 4º cuadrante de pantalla.
152+  890F              ; 	4º CUAD. ----- ----- ----- ----- -----
153+  890F              ;
154+  890F              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
155+  890F              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
156+  890F              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
157+  890F
158+  890F 2A 98 85     4 ld hl,(Posicion_actual)
159+  8912
160+  8912              ;   Amadeus o entidad ???.
161+  8912
162+  8912 3A C3 85         ld a,(Ctrl_0)
163+  8915 CB 77            bit 6,a
164+  8917 28 0D            jr z,11F
165+  8919
166+  8919              ; 	Dispara Amadeus.
167+  8919
168+  8919 0E 81            ld c,$81                                          ; Dirección "$81", hacia arriba.
169+  891B CD 5F 8D         call PreviousScan
170+  891E CD 5F 8D         call PreviousScan
171+  8921
172+  8921              ; 	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
173+  8921              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
174+  8921              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
175+  8921              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
176+  8921
177+  8921 CD 5F 89         call Ajusta_disparo_parte_derecha
178+  8924 18 0E            jr 13F
179+  8926
180+  8926              ; 	Dispara Entidad.
181+  8926
182+  8926 0E 80        11 ld c,$80                                        	  ; Dirección "$80", hacia abajo.
183+  8928
184+  8928              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
185+  8928              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
186+  8928
187+  8928 C5               push bc
188+  8929
189+  8929 06 10            ld b,16
190+  892B CD 50 8D     12 call NextScan
191+  892E 10 FB            djnz 12B
192+  8930
193+  8930 C1               pop bc
194+  8931
195+  8931              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
196+  8931              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
197+  8931              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
198+  8931              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
199+  8931
200+  8931 CD 5F 89         call Ajusta_disparo_parte_derecha
201+  8934
202+  8934 CD DB 89     13 call Comprueba_Colision                            ; Retorna "$81" o "$80" en B indicando si se produce Colisión
203+  8937              ;                                                     ; _al generar el disparo.
204+  8937
205+  8937              ; LLegados a este punto tendremos:
206+  8937              ;
207+  8937              ;       Puntero_objeto_disparo en IY.
208+  8937              ;       Rutinas_de_impresion en IX.
209+  8937              ;       Puntero_de_impresion en HL.
210+  8937              ;       Impacto/Dirección en BC.
211+  8937
212+  8937 CD 6E 89         call Almacena_disparo
213+  893A 18 22            jr 6F                                           ; RET.
214+  893C
215+  893C              ; 	La entidad que dispara se encuentra en la mitad superior de pantalla, (cuadrantes 1º y 2º).
216+  893C
217+  893C 28 11        3 jr z,5F
218+  893E
219+  893E              ; 	1er CUAD. ----- ----- ----- ----- -----
220+  893E              ;
221+  893E              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
222+  893E              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
223+  893E              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
224+  893E              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
225+  893E
226+  893E              ; 	Cuando (CTRL_DESPLZ)="0", B="0"
227+  893E              ;	   ""        ""       "f9", B="1"
228+  893E              ;	   ""        ""       "fb", B="2"
229+  893E              ; 	   ""        ""       "fb", B="3"
230+  893E
231+  893E 2A 98 85     	ld hl,(Posicion_actual)
232+  8941 CD 50 8D     	call NextScan
233+  8944
234+  8944              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
235+  8944              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
236+  8944              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
237+  8944              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
238+  8944
239+  8944 CD 66 89         call Ajusta_disparo_parte_izquierda
240+  8947
241+  8947              ; 	No se produce impacto. B="$80"
242+  8947              ; 	Dirección del proyectil hacia abajo. C="$80"
243+  8947
244+  8947 01 80 80         ld bc,$8080
245+  894A
246+  894A              ; 	LLegados a este punto tendremos:
247+  894A              ;
248+  894A              ;       Puntero_objeto_disparo en IY.
249+  894A              ;       Rutinas_de_impresion en IX.
250+  894A              ;       Puntero_de_impresion en HL.
251+  894A              ;       Impacto/Dirección en BC.
252+  894A
253+  894A CD 6E 89         call Almacena_disparo
254+  894D 18 0F            jr 6F                                           ; RET.
255+  894F
256+  894F              ; 	Estamos en el 2º cuadrante de pantalla.
257+  894F              ; 	2º CUAD. ----- ----- ----- ----- -----
258+  894F              ;
259+  894F              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
260+  894F              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
261+  894F              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
262+  894F              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
263+  894F
264+  894F 2A 98 85     5 ld hl,(Posicion_actual)
265+  8952 CD 50 8D     	call NextScan
266+  8955
267+  8955              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
268+  8955              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
269+  8955              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
270+  8955              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
271+  8955
272+  8955 CD 5F 89         call Ajusta_disparo_parte_derecha
273+  8958
274+  8958              ; 	No se produce impacto. B="$80"
275+  8958              ; 	Dirección del proyectil hacia abajo. C="80"
276+  8958
277+  8958 01 80 80     15 ld bc,$8080
278+  895B
279+  895B              ; 	LLegados a este punto tendremos:
280+  895B              ;
281+  895B              ;       Puntero_objeto_disparo en IY.
282+  895B              ;       Rutinas_de_impresion en IX.
283+  895B              ;       Puntero_de_impresion en HL.
284+  895B              ;       Impacto/Dirección en BC.
285+  895B
286+  895B CD 6E 89         call Almacena_disparo
287+  895E
288+  895E C9           6 ret
289+  895F
290+  895F              ; ----------------------------------------------------------------
291+  895F              ;
292+  895F              ;	Estas dos subrutinas se encargan de `corregir´, el puntero de impresión del proyectil_
293+  895F              ;	_ en función del valor de la variable (CTRL_DESPLZ) y de la situación en pantalla,_
294+  895F              ;	_ (lado izq. o derecho), de la entidad que lo genera.
295+  895F
296+  895F 78           Ajusta_disparo_parte_derecha ld a,b
297+  8960 FE 02            cp 2
298+  8962 38 01            jr c,1F
299+  8964 23               inc hl
300+  8965 C9           1 ret
301+  8966
302+  8966 78           Ajusta_disparo_parte_izquierda ld a,b
303+  8967 FE 01        	cp 1
304+  8969 20 01        	jr nz,1F
305+  896B 2B           	dec hl
306+  896C 2B           1 dec hl
307+  896D C9               ret
308+  896E
309+  896E              ; ----------------------------------------------------------------
310+  896E              ;
311+  896E              ;   25/02/23
312+  896E              ;
313+  896E              ;   La Rutina va almacenando disparos en sus respectiva bases de datos.
314+  896E              ;   Amadeus dispone de 2 disparos mientras que las entidades disponen de un máximo de 10.
315+  896E
316+  896E              Almacena_disparo
317+  896E
318+  896E E5               push hl  										; HL contiene el puntero de impresión.
319+  896F F1               pop af
320+  8970 08               ex af,af                                        ; Puntero_de_impresion en AF'.
321+  8971
322+  8971 79           3 ld a,c 											; C contiene la "dirección" del proyectil.
323+  8972 E6 01            and 1
324+  8974 28 1A            jr z,1F                                         ; Según la `Dirección' del proyectil sabemos si_
325+  8976              ;                                                   ; _ es Amadeus o una entidad la que dispara.
326+  8976              ; 	Dispara AMADEUS.
327+  8976
328+  8976              ;	Comprobamos que a Amadeus aún le quedan disparos.
329+  8976              ;	Si es así, nos situamos en la siguiente dirección del índice de disparos de Amadeus.
330+  8976              ;	Si por el contrario, estamos al final de índice, (no disponemos de más disparos),_
331+  8976              ;	_ iniciamos (Puntero_DESPLZ_DISPARO_AMADEUS) situándolo al comienzo del índice y salimos.
332+  8976
333+  8976 C5               push bc
334+  8977 01 EC 83         ld bc,Indice_de_disparos_Amadeus+4              ; Disparo_3A
335+  897A 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
336+  897D A7               and a
337+  897E ED 42            sbc hl,bc
338+  8980 CC 51 87         call z,Inicia_Puntero_Disparo_Amadeus
339+  8983 C1               pop bc
340+  8984 28 54            jr z,4F
341+  8986
342+  8986 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
343+  8989 23               inc hl
344+  898A 23               inc hl
345+  898B 22 E4 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl          ; (Puntero_DESPLZ_DISPARO_AMADEUS) ya apunta al siguiente_
346+  898E              ;                                                   ; _ Disparo_(+1).
347+  898E 18 18            jr 2F
348+  8990
349+  8990              ; Dispara una entidad.
350+  8990
351+  8990 C5           1 push bc
352+  8991 01 14 84         ld bc,Indice_de_disparos_entidades+20           ; Disparo_11
353+  8994 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
354+  8997 A7               and a
355+  8998 ED 42            sbc hl,bc
356+  899A CC 4A 87         call z,Inicia_Puntero_Disparo_Entidades
357+  899D C1               pop bc
358+  899E 28 3A            jr z,4F
359+  89A0
360+  89A0 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
361+  89A3 23               inc hl
362+  89A4 23               inc hl
363+  89A5 22 E2 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl        ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
364+  89A8              ;                                                   ; _ Disparo_(+1).
365+  89A8 CD 88 87     2 call Extrae_address                               ; HL contiene la dirección donde vamos a almacenar_
366+  89AB              ;                                                   ; _ los 8 bytes que definen el disparo:
367+  89AB              ;
368+  89AB              ;                                                     Puntero_objeto_disparo en IY.
369+  89AB              ;                                                     Rutinas_de_impresion en IX.
370+  89AB              ;                                                     Puntero_de_impresion en HL.
371+  89AB              ;                                                     Impacto/Dirección en BC.
372+  89AB
373+  89AB 2B               dec hl                                          ; Esta parte de la rutina comprueba si este_
374+  89AC 7E               ld a,(hl)                                       ; _ almacén de disparo está vacio. Si no es así, saltamos_
375+  89AD 23               inc hl                                          ; _ al siguiente.
376+  89AE A7               and a
377+  89AF 20 C0            jr nz,3B
378+  89B1
379+  89B1 08               ex af,af
380+  89B2 ED 73 D9 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
381+  89B6 F9               ld sp,hl
382+  89B7
383+  89B7 DD E5            push ix                                         ; Rutina de impresión.
384+  89B9 F5               push af                                         ; Puntero de impresión.
385+  89BA FD E5            push iy                                         ; Puntero objeto.
386+  89BC C5               push bc                                         ; Control.
387+  89BD
388+  89BD ED 7B D9 85      ld sp,(Stack)
389+  89C1
390+  89C1              ; Guardamos en Album_de_fotos_disparos los proyectiles generados.
391+  89C1
392+  89C1 21 D0 85     	ld hl,Ctrl_1
393+  89C4 CB C6        	set 0,(hl)
394+  89C6
395+  89C6 DD E5        	push ix
396+  89C8 E1               pop hl
397+  89C9 F5               push af
398+  89CA DD E1            pop ix
399+  89CC
400+  89CC CD A0 7F     	call Guarda_foto_registros
401+  89CF
402+  89CF 21 D0 85     	ld hl,Ctrl_1									; Restauramos el indicador de disparo antes de salir.
403+  89D2 CB 86        	res 0,(hl)
404+  89D4
405+  89D4              ;   Inicializamos los punteros de disparos antes de salir. Pretendemos que los campos vacíos del índice siempre estén
406+  89D4              ;   _ al final. Los disparos nuevos que se generen se guardarán en el primer cajón vacío del índice.
407+  89D4
408+  89D4 CD 51 87         call Inicia_Puntero_Disparo_Amadeus
409+  89D7 CD 4A 87         call Inicia_Puntero_Disparo_Entidades
410+  89DA
411+  89DA C9           4 ret
412+  89DB
413+  89DB              ; ----------------------------------------------------------------
414+  89DB              ;
415+  89DB              ;   4/3/23
416+  89DB              ;
417+  89DB              ;   Entrega el siguiente dato en el registro B en función de si se produce colisión, o no,_
418+  89DB              ;   _ al generarse el disparo.
419+  89DB              ;       "$80" ..... No se produce colisión.
420+  89DB              ;       "$81" ..... Se produce colisión.
421+  89DB
422+  89DB E5           Comprueba_Colision push hl
423+  89DC 1E 80            ld e,$80                                       ; E,(Impacto)="0".
424+  89DE CD F3 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
425+  89E1
426+  89E1 7B               ld a,e
427+  89E2 E6 01            and 1
428+  89E4 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
429+  89E6
430+  89E6              ; Hay impacto.
431+  89E6
432+  89E6 43           2 ld b,e
433+  89E7 E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
434+  89E8 C9           3 ret
435+  89E9
436+  89E9 E1           1 pop hl
437+  89EA E5               push hl
438+  89EB CD 50 8D         call NextScan
439+  89EE CD F3 89         call Bucle_2
440+  89F1 18 F3            jr 2B
441+  89F3
442+  89F3              ; ---------- ----------
443+  89F3
444+  89F3 06 02        Bucle_2 ld b,2
445+  89F5 7E           2 ld a,(hl)
446+  89F6 A7               and a
447+  89F7 20 04            jr nz,1F
448+  89F9 23               inc hl
449+  89FA 10 F9            djnz 2B
450+  89FC C9           3 ret
451+  89FD 1E 81        1 ld e,$81
452+  89FF 18 FB            jr 3B
453+  8A01
454+  8A01              ; -------------------------------------------------------------------------------------------------------------
455+  8A01              ;
456+  8A01              ;   13/03/23
457+  8A01              ;
458+  8A01              ;   Limpia el album de fotos de disparos después de cada borra/pinta. 50fps.
459+  8A01              ;
460+  8A01              ;   DESTRUYE: HL,BC,DE y A.
461+  8A01
462+  8A01 21 60 70     Limpia_album_disparos ld hl,Album_de_fotos_disparos
463+  8A04 7E               ld a,(hl)
464+  8A05 A7               and a
465+  8A06 C8               ret z                                               ; Salimos de la rutina si no hay ningún disparo en pantalla.
466+  8A07
467+  8A07 44               ld b,h
468+  8A08 4D               ld c,l
469+  8A09 2A DF 85         ld hl,(Stack_snapshot_disparos)
470+  8A0C E5               push hl
471+  8A0D A7               and a
472+  8A0E ED 42            sbc hl,bc
473+  8A10 E5               push hl
474+  8A11 C1               pop bc                                              ; BC contiene el nº de bytes a limpiar.
475+  8A12
476+  8A12 E1               pop hl
477+  8A13 54               ld d,h
478+  8A14 5D               ld e,l
479+  8A15 1B               dec de
480+  8A16 ED B8            lddr                                                ; Limpiamos.
481+  8A18
482+  8A18 21 60 70         ld hl,Album_de_fotos_disparos
483+  8A1B 22 DF 85         ld (Stack_snapshot_disparos),hl
484+  8A1E
485+  8A1E C9               ret
486+  8A1F
487+  8A1F              ; -------------------------------------------------------------------------------------------------------------
488+  8A1F              ;
489+  8A1F              ;   14/03/23
490+  8A1F              ;
491+  8A1F
492+  8A1F 01 FE 83     Motor_de_disparos ld bc,Disparo_3A
493+  8A22 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)               ; Avanza disparo.
494+  8A25
495+  8A25 CD 88 87     2 call Extrae_address
496+  8A28 7E               ld a,(hl)
497+  8A29 A7               and a
498+  8A2A 28 07            jr z,1F                                              ; Disparo vacio, saltamos al siguiente.
499+  8A2C
500+  8A2C              ; ----- ----- ----- ----- ----- -----
501+  8A2C              ; Actúa el motor.
502+  8A2C
503+  8A2C ED 73 D9 85      ld (Stack),sp
504+  8A30 F9               ld sp,hl
505+  8A31 18 FE            jr $
506+  8A33              ; ----- ----- ----- ----- ----- -----
507+  8A33
508+  8A33 ED 42        1 sbc hl,bc
509+  8A35 28 0A            jr z,3F                                              ; Hemos llegado al final del índice de disparos de Amadeus??
510+  8A37
511+  8A37 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)               ; Avanza disparo.
512+  8A3A 23               inc hl
513+  8A3B 23               inc hl
514+  8A3C 22 E4 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
515+  8A3F 18 E4            jr 2B
516+  8A41
517+  8A41 CD 51 87     3 call Inicia_Puntero_Disparo_Amadeus
518+  8A44
519+  8A44 01 66 84         ld bc,Disparo_11
520+  8A47 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
521+  8A4A
522+  8A4A CD 88 87     5 call Extrae_address
523+  8A4D 7E               ld a,(hl)
524+  8A4E A7               and a
525+  8A4F 28 07            jr z,4F                                              ; Disparo vacio, saltamos al siguiente.
526+  8A51
527+  8A51              ; ----- ----- ----- ----- ----- -----
528+  8A51              ; Actúa el motor.
529+  8A51
530+  8A51 ED 73 D9 85      ld (Stack),sp
531+  8A55 F9               ld sp,hl
532+  8A56 18 FE            jr $
533+  8A58
534+  8A58
535+  8A58
536+  8A58              ; ----- ----- ----- ----- ----- -----
537+  8A58
538+  8A58 ED 42        4 sbc hl,bc
539+  8A5A 28 0A            jr z,6F
540+  8A5C
541+  8A5C 2A E2 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
542+  8A5F 23               inc hl
543+  8A60 23               inc hl
544+  8A61 22 E2 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
545+  8A64 18 E4            jr 5B
546+  8A66
547+  8A66 CD 4A 87     6 call Inicia_Puntero_Disparo_Entidades
548+  8A69 C9               ret
# file closed: Disparo.asm
837   8A6A              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8A6A              ; ******************************************************************************************************************************************************************************************
  2+  8A6A              ;
  3+  8A6A              ; 01/23
  4+  8A6A              ;
  5+  8A6A              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8A6A
  7+  8A6A CD 44 8D     Draw call Prepara_draw
  8+  8A6D 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8A6E A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8A6F 28 05        	jr z,2F
 11+  8A71
 12+  8A71 3A AA 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  8A74 18 0C        	jr 1F
 14+  8A76 2A A8 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8A79 22 98 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8A7C CD 0B 8C     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8A7F              ;													; _la esquina superior izquierda de la pantalla.
 18+  8A7F CD 79 94     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  8A82 3A C3 85     1 ld a,(Ctrl_0)
 20+  8A85 CB 6F        	bit 5,a
 21+  8A87 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8A89
 23+  8A89 CD A1 8A     	call Comprueba_limite_horizontal
 24+  8A8C CD 31 8B     	call Comprueba_limite_vertical
 25+  8A8F
 26+  8A8F              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8A8F
 28+  8A8F CD 7E 8C     3 call calcula_CColumnass
 29+  8A92 CD B5 8C     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8A95 CD 0A 8D     	call Define_rutina_de_impresion
 31+  8A98
 32+  8A98 3A C3 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8A9B CB AF        	res 5,a											; _a ser de utilidad.
 34+  8A9D 32 C3 85     	ld (Ctrl_0),a
 35+  8AA0
 36+  8AA0 C9           	ret
 37+  8AA1
 38+  8AA1              ; *******************************************************************************************************************************************************************************************
 39+  8AA1              ;	21/01/23
 40+  8AA1              ;
 41+  8AA1              ; 	Comprueba_limite_horizontal.
 42+  8AA1              ;
 43+  8AA1              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8AA1              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8AA1              ;
 46+  8AA1              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8AA1              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8AA1              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8AA1              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8AA1
 51+  8AA1
 52+  8AA1
 53+  8AA1 3A C3 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8AA4 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8AA6 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8AA8 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8AAA 32 C3 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8AAD 18 09            jr 6F
 59+  8AAF CB 5F        1 bit 3,a
 60+  8AB1 28 0A            jr z,2F
 61+  8AB3 E6 F7            and $f7
 62+  8AB5 32 C3 85         ld (Ctrl_0),a
 63+  8AB8 CD 0B 8C     6 call Inicializacion
 64+  8ABB 18 5B            jr 5F
 65+  8ABD E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8ABE
 67+  8ABE              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8ABE              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8ABE
 70+  8ABE EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8ABF 2A CD 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8AC2 CD 10 90     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8AC5 67           	ld h,a
 74+  8AC6 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8AC7 CD 10 90     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8ACA 67           	ld h,a
 77+  8ACB A7           	and a
 78+  8ACC ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8ACE 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8ACF 3A AA 85     	ld a,(Cuad_objeto)
 81+  8AD2 FE 02        	cp 2
 82+  8AD4 38 1E        	jr c,3F
 83+  8AD6 28 1C        	jr z,3F
 84+  8AD8 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8AD9 28 23            jr z,7F
 86+  8ADB 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8ADD 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8ADF E1           	pop hl
 89+  8AE0
 90+  8AE0              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8AE0              ; _para indicar con E="2" en caso necesario.
 92+  8AE0
 93+  8AE0 E5               push hl
 94+  8AE1 C5               push bc
 95+  8AE2 CD 10 90     	call calcula_tercio
 96+  8AE5 FE 01        	cp 1
 97+  8AE7 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8AE9 CD 19 8B         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8AEC 28 26            jr z,9F
100+  8AEE 38 24            jr c,9F
101+  8AF0 1E 00        11 ld e,0
102+  8AF2 18 22            jr 8F
103+  8AF4 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8AF5 28 07        	jr z, 7F
105+  8AF7 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8AF9 1E 00         	ld e,0
107+  8AFB E1           	pop hl
108+  8AFC 18 04        	jr 4F
109+  8AFE 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8B00 18 15            jr 10F
111+  8B02
112+  8B02              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8B02              ; _para indicar con E="2" en caso necesario.
114+  8B02
115+  8B02 E5           4 push hl
116+  8B03 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8B04 CD 10 90     	call calcula_tercio
118+  8B07 FE 01        	cp 1
119+  8B09 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8B0B CD 19 8B         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8B0E 28 04            jr z,9F
122+  8B10 30 02            jr nc,9F
123+  8B12 18 02        	jr 8F
124+  8B14 1E 02        9 ld e,2
125+  8B16 C1           8 pop bc
126+  8B17 E1           10 pop hl
127+  8B18 C9           5 ret
128+  8B19
129+  8B19              ; --------------------
130+  8B19              ;
131+  8B19              ; 25/08/22
132+  8B19
133+  8B19 CD 10 90     Comprueba_centro call calcula_tercio
134+  8B1C 67               ld h,a
135+  8B1D 08           	ex af,af
136+  8B1E FE 02        	cp 2
137+  8B20 38 07        	jr c,1F
138+  8B22 28 05        	jr z,1F
139+  8B24 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8B27 18 03        	jr 2F
141+  8B29 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8B2C 08           2 ex af,af
143+  8B2D A7               and a
144+  8B2E ED 42            sbc hl,bc
145+  8B30 C9               ret
146+  8B31
147+  8B31              ; *********************************************************************************************************************************************************************************************
148+  8B31              ;
149+  8B31              ;   16/8/22
150+  8B31              ;
151+  8B31              ;	Comprueba_limite_vertical
152+  8B31              ;
153+  8B31              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8B31              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8B31              ;
156+  8B31
157+  8B31 2A 98 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8B34 7D           	ld a,l
159+  8B35 E6 1F        	and $1F
160+  8B37 57           	ld d,a
161+  8B38 3A CF 85     	ld a,(Limite_vertical)
162+  8B3B BA           	cp d 											; Límite - Posición.
163+  8B3C 08           	ex af,af 										; Resultado de CP d en F'.
164+  8B3D 3A AA 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8B40 CB 47        	bit 0,a
166+  8B42 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8B44
168+  8B44              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8B44
170+  8B44 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8B45 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8B47
173+  8B47              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8B47              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8B47
176+  8B47 3A 9C 85         ld a,(Coordenada_X)
177+  8B4A 16 0F            ld d,Centro_izquierda
178+  8B4C A7               and a
179+  8B4D 92               sub d 											 ; Posición - Centro_izquierda.
180+  8B4E 28 1E            jr z,3F
181+  8B50 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8B52              ;                                                    ; _salimos sin modificar nada.
183+  8B52 18 0E            jr 2F
184+  8B54 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8B55 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8B57
187+  8B57              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8B57              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8B57
190+  8B57 3A 9C 85         ld a,(Coordenada_X)
191+  8B5A 16 10            ld d,Centro_derecha
192+  8B5C A7               and a
193+  8B5D 92               sub d
194+  8B5E 28 0E            jr z,3F
195+  8B60 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8B62              ;                                                    ; _salimos sin modificar nada.
197+  8B62 CB 43        2 bit 0,e
198+  8B64 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8B66 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8B67 CD FB 8B         call Modificaccionne
201+  8B6A C1           	pop bc
202+  8B6B CD 0B 8C         call Inicializacion
203+  8B6E C9           3 ret 				 								 ; Salimos de la rutina.
204+  8B6F
205+  8B6F              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8B6F
207+  8B6F C5           4 push bc
208+  8B70 01 97 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8B73 0A           	ld a,(bc)
210+  8B74 3D           	dec a
211+  8B75 47           	ld b,a 											 ; Columnas-1 en B.
212+  8B76 7D           	ld a,l
213+  8B77 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8B78 CB 47        	bit 0,a
215+  8B7A 28 03        	jr z,5F
216+  8B7C 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8B7D 18 2E        	jr 7F
218+  8B7F
219+  8B7F              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8B7F
221+  8B7F 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8B80 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8B81 3A C3 85     	ld a,(Ctrl_0)
224+  8B84 CB 4F        	bit 1,a
225+  8B86 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8B88 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8B89
228+  8B89              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8B89
230+  8B89 1C               inc e
231+  8B8A 1D               dec e
232+  8B8B 20 07            jr nz,12F
233+  8B8D 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8B8E 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8B8F 22 98 85     	ld (Posicion_actual),hl
236+  8B92 18 44        13 jr 9F
237+  8B94 CB 43        12 bit 0,e
238+  8B96 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8B98              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8B98 C1           	pop bc
241+  8B99 18 D3        	jr 3B
242+  8B9B 80           14 add b
243+  8B9C 6F               ld l,a
244+  8B9D 22 98 85     	ld (Posicion_actual),hl
245+  8BA0 CD FB 8B         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8BA3 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8BA5 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8BA7 32 C3 85         ld (Ctrl_0),a
249+  8BAA F1           	pop af
250+  8BAB 18 2B        	jr 9F
251+  8BAD
252+  8BAD              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8BAD
254+  8BAD F5           7 push af
255+  8BAE 3A C3 85     	ld a,(Ctrl_0)
256+  8BB1 CB 47        	bit 0,a
257+  8BB3 20 1D        	jr nz,8F
258+  8BB5 F1           	pop af
259+  8BB6
260+  8BB6              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8BB6
262+  8BB6 1C           	inc e
263+  8BB7 1D               dec e
264+  8BB8 20 07            jr nz,10F
265+  8BBA 90           	sub b
266+  8BBB 6F               ld l,a
267+  8BBC 22 98 85     	ld (Posicion_actual),hl
268+  8BBF 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8BC1              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8BC1 CB 43        10 bit 0,e
271+  8BC3 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8BC5              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8BC5 C1           	pop bc
274+  8BC6 18 A6        	jr 3B
275+  8BC8 90           16 sub b
276+  8BC9 6F               ld l,a
277+  8BCA 22 98 85     	ld (Posicion_actual),hl
278+  8BCD CD FB 8B         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8BD0 18 06            jr 9F
280+  8BD2 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8BD4 32 C3 85         ld (Ctrl_0),a
282+  8BD7 F1           	pop af
283+  8BD8 C1           9 pop bc
284+  8BD9 1E 00        	ld e,0
285+  8BDB CD 0B 8C         call Inicializacion
286+  8BDE F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8BDF 08           	ex af,af
288+  8BE0 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8BE1 18 8B            jr 3B
290+  8BE3
291+  8BE3              ; --------------------
292+  8BE3
293+  8BE3 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8BE5 CD 5F 8D     1 call PreviousScan
295+  8BE8 10 FB            djnz 1B
296+  8BEA 22 98 85     	ld (Posicion_actual),hl
297+  8BED AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8BEE C9           	ret
299+  8BEF
300+  8BEF              ; --------------------
301+  8BEF
302+  8BEF 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8BF1 CD 50 8D     1 call NextScan
304+  8BF4 10 FB            djnz 1B
305+  8BF6 22 98 85     	ld (Posicion_actual),hl
306+  8BF9 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8BFA C9           	ret
308+  8BFB
309+  8BFB              ; --------------------
310+  8BFB              ;
311+  8BFB              ;	22/01/23
312+  8BFB              ;
313+  8BFB              ;	E="1". Hemos cambiado de cuadrante.
314+  8BFB              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8BFB              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8BFB
317+  8BFB
318+  8BFB              Modificaccionne
319+  8BFB
320+  8BFB 3A AA 85     	ld a,(Cuad_objeto)
321+  8BFE FE 02        	cp 2
322+  8C00 CC E3 8B         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8C03 DC E3 8B         call c,Modifica_Pos_actual
324+  8C06 C8           	ret z
325+  8C07 CD EF 8B         call Modifica_Pos_actual2
326+  8C0A C9               ret
327+  8C0B
328+  8C0B              ; *************************************************************************************************************************************************************************************************
329+  8C0B              ;
330+  8C0B              ;	13/8/22
331+  8C0B              ;
332+  8C0B              ;	Inicializacion
333+  8C0B              ;
334+  8C0B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8C0B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8C0B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8C0B              ;
338+  8C0B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8C0B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8C0B              ;	_ desaparece/aparece.
341+  8C0B
342+  8C0B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8C0B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8C0B              ;
345+  8C0B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8C0B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8C0B              ; 		   [E] ="0"
348+  8C0B
349+  8C0B              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8C0B
351+  8C0B CD 10 90     Inicializacion call calcula_tercio
352+  8C0E 28 36        	jr z,primit
353+  8C10 E6 02        	and 2
354+  8C12 20 07        	jr nz,segmit
355+  8C14 7D           	ld a,l
356+  8C15 FE 7F        	cp $7f
357+  8C17 38 2D        	jr c,primit
358+  8C19 28 2B        	jr z,primit
359+  8C1B CD 78 8C     segmit call column
360+  8C1E 38 13        	jr c,tercuad
361+  8C20 3E 04        cuarcuad ld a,4
362+  8C22 32 AA 85     	ld (Cuad_objeto),a
363+  8C25 21 20 48     	ld hl,$4820
364+  8C28 22 CD 85     	ld (Limite_horizontal),hl
365+  8C2B 21 CF 85     	ld hl,Limite_vertical
366+  8C2E 36 0D        	ld (hl),$0d
367+  8C30 08           	ex af,af
368+  8C31 18 3C        	jr 1F
369+  8C33              tercuad
370+  8C33 3E 03        	ld a,3
371+  8C35 32 AA 85     	ld (Cuad_objeto),a
372+  8C38 21 20 48     	ld hl,$4820
373+  8C3B 22 CD 85     	ld (Limite_horizontal),hl
374+  8C3E 21 CF 85     	ld hl,Limite_vertical
375+  8C41 36 12        	ld (hl),$12
376+  8C43 08           	ex af,af
377+  8C44 18 29        	jr 1F
378+  8C46 CD 78 8C     primit call column
379+  8C49 38 13        	jr c, primcuad
380+  8C4B              segcuad
381+  8C4B 3E 02        	ld a,2
382+  8C4D 32 AA 85     	ld (Cuad_objeto),a
383+  8C50 21 C0 4F     	ld hl,$4fc0
384+  8C53 22 CD 85     	ld (Limite_horizontal),hl
385+  8C56 21 CF 85     	ld hl,Limite_vertical
386+  8C59 36 0D        	ld (hl),$0d
387+  8C5B 08           	ex af,af
388+  8C5C 18 11        	jr 1F
389+  8C5E              primcuad
390+  8C5E 3E 01        	ld a,1
391+  8C60 32 AA 85     	ld (Cuad_objeto),a
392+  8C63 21 C0 4F     	ld hl,$4fc0
393+  8C66 22 CD 85     	ld (Limite_horizontal),hl
394+  8C69 21 CF 85     	ld hl,Limite_vertical
395+  8C6C 36 12        	ld (hl),$12
396+  8C6E 08           	ex af,af
397+  8C6F CD 42 93     1 call Genera_coordenadas
398+  8C72 21 C3 85     	ld hl,Ctrl_0
399+  8C75 CB EE        	set 5,(hl)
400+  8C77 C9           	ret
401+  8C78
402+  8C78              ; ------------------------------------------------------------------------------------------------------------------
403+  8C78
404+  8C78              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8C78              ;
406+  8C78              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8C78
408+  8C78 7D           column ld a,l
409+  8C79 E6 1F        	and $1f
410+  8C7B FE 10         	cp $10
411+  8C7D C9            	ret
412+  8C7E
413+  8C7E              ; --------------------------------------------------------------------------------------------------------------------
414+  8C7E              ;
415+  8C7E              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8C7E              ;
417+  8C7E              ; 14/12/22
418+  8C7E              ;
419+  8C7E              ;	Modifica: A y BC.
420+  8C7E
421+  8C7E 3A AA 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8C81 E6 01        	and 1
423+  8C83 28 17        	jr z,1F
424+  8C85
425+  8C85              ; Nos encontramos en la parte izquierda de la pantalla
426+  8C85
427+  8C85 3A 9C 85     	ld a,(Coordenada_X)
428+  8C88 47           	ld b,a
429+  8C89 04           	inc b											; (Coordenada_X)+1 en B.
430+  8C8A 79           	ld a,c
431+  8C8B 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8C8C 38 08        	jr c,2F
433+  8C8E 47           	ld b,a
434+  8C8F 79           	ld a,c
435+  8C90 90           	sub b
436+  8C91 32 CC 85     	ld (Columnas),a
437+  8C94 18 1B        	jr 4F
438+  8C96 79           2 ld a,c
439+  8C97 32 CC 85     	ld (Columnas),a
440+  8C9A 18 15        	jr 4F
441+  8C9C
442+  8C9C              ; Nos encontramos en la parte derecha de la pantalla.
443+  8C9C
444+  8C9C 3A 9C 85     1 ld a,(Coordenada_X)
445+  8C9F 81           	add c
446+  8CA0 3D           	dec a
447+  8CA1 D6 1F        	sub $1f
448+  8CA3 38 08        	jr c,3F
449+  8CA5 47           	ld b,a
450+  8CA6 79           	ld a,c
451+  8CA7 90           	sub b
452+  8CA8 32 CC 85     	ld (Columnas),a
453+  8CAB 18 04        	jr 4F
454+  8CAD 79           3 ld a,c
455+  8CAE 32 CC 85     	ld (Columnas),a
456+  8CB1 D9           4 exx
457+  8CB2 4F           	ld c,a
458+  8CB3 D9           	exx
459+  8CB4 C9            ret
460+  8CB5
461+  8CB5              ; --------------------------------------------------------------------------------------------------------------------
462+  8CB5              ;
463+  8CB5              ; 7/1/23
464+  8CB5              ;
465+  8CB5              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8CB5              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8CB5              ;
468+  8CB5              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8CB5              ;	DESTRUYE: HL,B Y A.
470+  8CB5
471+  8CB5 3A AA 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8CB8 FE 02        	cp 2
473+  8CBA 38 18        	jr c,1F
474+  8CBC 28 16        	jr z,1F
475+  8CBE E6 01        	and 1
476+  8CC0 28 0D        	jr z,3F
477+  8CC2
478+  8CC2              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8CC2
480+  8CC2 CD FE 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8CC5
482+  8CC5 7D           9 ld a,l
483+  8CC6 E6 1F        	and $1f
484+  8CC8 28 2A        	jr z,7F
485+  8CCA 2B           	dec hl
486+  8CCB 10 F8        	djnz 9B
487+  8CCD 18 25        	jr 7F
488+  8CCF
489+  8CCF              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8CCF
491+  8CCF 2A 98 85     3 ld hl,(Posicion_actual)
492+  8CD2 18 20        	jr 7F
493+  8CD4
494+  8CD4 28 14        1 jr z,2F
495+  8CD6
496+  8CD6              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8CD6
498+  8CD6 CD FE 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8CD9 7D           4 ld a,l
500+  8CDA E6 1F        	and $1f
501+  8CDC 28 03        	jr z,6F
502+  8CDE 2B           	dec hl
503+  8CDF 10 F8        	djnz 4B
504+  8CE1 06 0F        6 ld b,15
505+  8CE3 CD 5F 8D     5 call PreviousScan
506+  8CE6 10 FB        	djnz 5B
507+  8CE8 18 0A        	jr 7F
508+  8CEA
509+  8CEA              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8CEA
511+  8CEA CD FE 8C     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8CED 06 0F        	ld b,15
513+  8CEF CD 5F 8D     8 call PreviousScan
514+  8CF2 10 FB        	djnz 8B
515+  8CF4
516+  8CF4 E5           7 push hl
517+  8CF5 DD E1        	pop ix
518+  8CF7
519+  8CF7 2A 9A 85     	ld hl,(Puntero_objeto)
520+  8CFA E5           	push hl
521+  8CFB FD E1        	pop iy
522+  8CFD
523+  8CFD C9           	ret
524+  8CFE
525+  8CFE              ; --------------------------------------------------------------------------------------------------------------------
526+  8CFE              ;
527+  8CFE              ;	2/1/23
528+  8CFE              ;
529+  8CFE              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8CFE              ;
531+  8CFE              ;	Tras esta rutina tenemos:
532+  8CFE              ;
533+  8CFE              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8CFE              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8CFE              ;
536+  8CFE              ;	DESTRUYE!!!!! HL,B y A.
537+  8CFE
538+  8CFE 2A 98 85     Operandos ld hl,(Posicion_actual)
539+  8D01 3A CC 85     	ld a,(Columnas)
540+  8D04 3D           	dec a
541+  8D05 20 01        	jr nz,1F
542+  8D07 3C           	inc a
543+  8D08 47           1 ld b,a
544+  8D09 C9           	ret
545+  8D0A
546+  8D0A              ; --------------------------------------------------------------------------------------------------------------------
547+  8D0A              ;
548+  8D0A              ;	3/1/23
549+  8D0A              ;
550+  8D0A              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8D0A              ;
552+  8D0A              ;	Destruye: A,B,HL y DE.
553+  8D0A
554+  8D0A              Define_rutina_de_impresion
555+  8D0A
556+  8D0A 3A 97 85     	ld a,(Columns)
557+  8D0D 47           	ld b,a
558+  8D0E 3A CC 85     	ld a,(Columnas)
559+  8D11 B8           	cp b
560+  8D12 20 0D        	jr nz,2f
561+  8D14
562+  8D14              ;	La entidad se imprime entera.
563+  8D14
564+  8D14 21 E0 8D     	ld hl, Indice_entidades_completas
565+  8D17 E6 01        	and 1
566+  8D19 28 02        	jr z,1F
567+  8D1B
568+  8D1B 23           	inc hl
569+  8D1C 23           	inc hl
570+  8D1D
571+  8D1D CD 88 87     1 call Extrae_address
572+  8D20 C9           	ret		;	ret
573+  8D21
574+  8D21              ;	La entidad no se imprime entera en pantalla.
575+  8D21
576+  8D21 3A AA 85     2 ld a,(Cuad_objeto)
577+  8D24 E6 01        	and 1
578+  8D26 28 17        	jr z,3F
579+  8D28
580+  8D28              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8D28
582+  8D28 21 E4 8D     	ld hl, Indice_entidades_incompletas_izquierda
583+  8D2B 3A 97 85     4 ld a,(Columns)
584+  8D2E E6 01        	and 1
585+  8D30 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8D32
587+  8D32 23           	inc hl
588+  8D33 23           	inc hl
589+  8D34
590+  8D34 3A CC 85     	ld a,(Columnas)
591+  8D37 E6 01        	and 1
592+  8D39 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8D3B
594+  8D3B 23           	inc hl
595+  8D3C 23           	inc hl
596+  8D3D
597+  8D3D 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8D3F
599+  8D3F 21 EA 8D     3 ld hl, Indice_entidades_incompletas_derecha
600+  8D42 18 E7        	jr 4B
601+  8D44
602+  8D44              ; --------------------------------------------------------------------------------------------------------------------
603+  8D44              ;
604+  8D44              ;	Prepara_draw
605+  8D44              ;
606+  8D44              ;	Es una rutina de carga.
607+  8D44              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8D44              ;
609+  8D44              ;	FUNCIONAMIENTO:
610+  8D44              ;
611+  8D44              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8D44              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8D44              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8D44              ;
615+  8D44              ;	DESTRUYE:
616+  8D44              ;
617+  8D44              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8D44
619+  8D44 21 96 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8D47 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8D48 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8D49 4E           	ld c,(hl)
623+  8D4A 2A 98 85     	ld hl,(Posicion_actual)
624+  8D4D 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8D4F C9           	ret
626+  8D50
627+  8D50              ;----------------------------------------------------------------------------------------------------------------
628+  8D50              ;
629+  8D50              ;	5/08/22
630+  8D50              ;
631+  8D50              ;   NextScan.
632+  8D50              ;
633+  8D50              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8D50              ;
635+  8D50              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8D50              ;
637+  8D50              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8D50              ;
639+  8D50              ;       DESTRUIDOS: AF y HL !!!
640+  8D50              ;
641+  8D50              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8D50              ;
643+  8D50
644+  8D50 24           NextScan inc h          ; Incrementamos el scanline.
645+  8D51 7C               ld a,h
646+  8D52 E6 07            and 7
647+  8D54 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8D55
649+  8D55 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8D56 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8D58 6F               ld l,a
652+  8D59 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8D5A
654+  8D5A 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8D5B D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8D5D 67               ld h,a
657+  8D5E C9               ret
658+  8D5F
659+  8D5F              ;----------------------------------------------------------------------------------------------------------------
660+  8D5F              ;
661+  8D5F              ;	5/08/22
662+  8D5F              ;
663+  8D5F              ;   PreviousScan.
664+  8D5F              ;
665+  8D5F              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8D5F              ;
667+  8D5F              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8D5F              ;
669+  8D5F              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8D5F              ;
671+  8D5F              ;       DESTRUIDOS: AF y HL !!!
672+  8D5F              ;
673+  8D5F              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8D5F              ;
675+  8D5F
676+  8D5F 7C           PreviousScan ld a,h
677+  8D60 25               dec h               ; Dec H.
678+  8D61 E6 07            and 7
679+  8D63 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8D64
681+  8D64 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8D65 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8D67 6F               ld l,a
684+  8D68 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8D69
686+  8D69 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8D6A C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8D6C 67               ld h,a
689+  8D6D C9               ret
690+  8D6E
691+  8D6E              ; -----------------------------------------------------------------------------------
692+  8D6E              ;
693+  8D6E              ;	28/2/23
694+  8D6E              ;
695+  8D6E              ;	Rutina principal de pintado de entidades/Amadeus.
696+  8D6E              ;	Extrae fotos de Album_de_fotos.
697+  8D6E
698+  8D6E 3A D8 85     Extrae_foto_registros ld a,(Numero_de_malotes)
699+  8D71 A7           	and a
700+  8D72 C8           	ret z
701+  8D73 ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
702+  8D77 31 00 70     	ld sp,Album_de_fotos
703+  8D7A
704+  8D7A FD E1        2 pop iy																	; (Puntero_objeto) en IY.
705+  8D7C E1           	pop hl																	; Puntero de impresión de pantalla en HL.
706+  8D7D D1           	pop de																	; Dirección de la rutina de impresión en DE.
707+  8D7E
708+  8D7E ED 73 DB 85  	ld (Stack_2),sp
709+  8D82 ED 7B D9 85  	ld sp,(Stack)
710+  8D86
711+  8D86              ; Fabrica la llamada a la correspondiente rutina de impresión.
712+  8D86
713+  8D86 3E CD        	ld a,$cd
714+  8D88 32 90 8D     	ld (Imprime),a
715+  8D8B EB           	ex de,hl
716+  8D8C 22 91 8D     	ld (Imprime+1),hl
717+  8D8F EB           	ex de,hl
718+  8D90
719+  8D90              ; Ejecuta la llamada:	CALL $xx,xx
720+  8D90
721+  8D90 00 00 00     Imprime db 0,0,0
722+  8D93
723+  8D93 3A D8 85     	ld a,(Numero_de_malotes)
724+  8D96 3D           	dec a
725+  8D97 28 09        	jr z,1F
726+  8D99 32 D8 85      	ld (Numero_de_malotes),a
727+  8D9C
728+  8D9C ED 7B DB 85   	ld sp,(Stack_2)
729+  8DA0 18 D8        	jr 2B
730+  8DA2
731+  8DA2 AF           1 xor a
732+  8DA3 32 DB 85     	ld (Stack_2),a
733+  8DA6 C9           	ret
734+  8DA7
735+  8DA7              ; -----------------------------------------------------------------------------------
736+  8DA7              ;
737+  8DA7              ;	28/2/23
738+  8DA7              ;
739+  8DA7              ;	Pinta los disparos generados.
740+  8DA7
741+  8DA7              Extrae_foto_disparos
742+  8DA7
743+  8DA7 3A E1 85     	ld a,(Numero_de_disparotes)
744+  8DAA A7           	and a
745+  8DAB C8           	ret z
746+  8DAC ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
747+  8DB0 31 60 70     	ld sp,Album_de_fotos_disparos
748+  8DB3
749+  8DB3 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
750+  8DB5 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
751+  8DB6 D1           	pop de																	; Dirección de la rutina de impresión en DE.
752+  8DB7
753+  8DB7 ED 73 DB 85  	ld (Stack_2),sp
754+  8DBB ED 7B D9 85  	ld sp,(Stack)
755+  8DBF
756+  8DBF              ; Fabrica la llamada a la correspondiente rutina de impresión.
757+  8DBF
758+  8DBF 3E CD        	ld a,$cd
759+  8DC1 32 C9 8D     	ld (Imprime2),a
760+  8DC4 EB           	ex de,hl
761+  8DC5 22 CA 8D     	ld (Imprime2+1),hl
762+  8DC8 EB           	ex de,hl
763+  8DC9
764+  8DC9              ; Ejecuta la llamada:	CALL $xx,xx
765+  8DC9
766+  8DC9 00 00 00     Imprime2 db 0,0,0
767+  8DCC
768+  8DCC 3A E1 85     	ld a,(Numero_de_disparotes)
769+  8DCF 3D           	dec a
770+  8DD0 28 09        	jr z,1F
771+  8DD2 32 E1 85      	ld (Numero_de_disparotes),a
772+  8DD5
773+  8DD5 ED 7B DB 85  	ld sp,(Stack_2)
774+  8DD9 18 D8        	jr 2B
775+  8DDB
776+  8DDB AF           1 xor a
777+  8DDC 32 DB 85     	ld (Stack_2),a
778+  8DDF C9           	ret
779+  8DE0
# file closed: Draw_XOR.asm
838   8DE0              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8DE0              ;   índices de Rutinas de impresión.
  2+  8DE0
  3+  8DE0 F0 8D        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8DE2 1D 8E            defw Pinta_Amadeus_3x2
  5+  8DE4
  6+  8DE4 73 8E        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8DE6 13 8F            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8DE8 C7 8E            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8DEA
 10+  8DEA 9D 8E        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8DEC A1 8F            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8DEE 55 8F            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8DF0
 14+  8DF0
 15+  8DF0              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8DF0              ;
 17+  8DF0              ;   12/12/22
 18+  8DF0              ;
 19+  8DF0              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8DF0              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8DF0              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8DF0              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8DF0              ;
 24+  8DF0              ;   Modifica: DE y HL.
 25+  8DF0
 26+  8DF0 ED 73 D9 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8DF4 FD F9        	ld sp,iy
 28+  8DF6 06 10            ld b,16
 29+  8DF8 D1           1 pop de
 30+  8DF9 7B               ld a,e
 31+  8DFA AE               xor (hl)
 32+  8DFB 77           	ld (hl),a
 33+  8DFC 23           	inc hl
 34+  8DFD 7A               ld a,d
 35+  8DFE AE               xor (hl)
 36+  8DFF 77           	ld (hl),a
 37+  8E00 2B           	dec hl
 38+  8E01 24           	inc h
 39+  8E02 7C               ld a,h
 40+  8E03 E6 07            and 7
 41+  8E05 20 0A            jr nz,2F
 42+  8E07 7D               ld a,l
 43+  8E08 C6 20            add a,$20
 44+  8E0A 6F               ld l,a
 45+  8E0B 38 04            jr c,2F
 46+  8E0D 7C               ld a,h
 47+  8E0E D6 08            sub 8
 48+  8E10 67               ld h,a
 49+  8E11 7C           2 ld a,h
 50+  8E12 FE 58            cp $58
 51+  8E14 28 02            jr z,3F
 52+  8E16 10 E0            djnz 1B
 53+  8E18 ED 7B D9 85  3 ld sp,(Stack)
 54+  8E1C C9           	ret
 55+  8E1D
 56+  8E1D ED 73 D9 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8E21 FD F9        	ld sp,iy
 58+  8E23 06 08            ld b,8
 59+  8E25 D1           1 pop de
 60+  8E26 7B               ld a,e
 61+  8E27 AE               xor (hl)
 62+  8E28 77           	ld (hl),a
 63+  8E29 23           	inc hl
 64+  8E2A 7A               ld a,d
 65+  8E2B AE               xor (hl)
 66+  8E2C 77           	ld (hl),a
 67+  8E2D 23           	inc hl
 68+  8E2E D1           	pop de
 69+  8E2F 7B               ld a,e
 70+  8E30 AE               xor (hl)
 71+  8E31 77           	ld (hl),a
 72+  8E32 2B           	dec hl
 73+  8E33 2B           	dec hl
 74+  8E34 24           	inc h
 75+  8E35 7C               ld a,h
 76+  8E36 E6 07            and 7
 77+  8E38 20 0A            jr nz,2F
 78+  8E3A 7D               ld a,l
 79+  8E3B C6 20            add a,$20
 80+  8E3D 6F               ld l,a
 81+  8E3E 38 04            jr c,2F
 82+  8E40 7C               ld a,h
 83+  8E41 D6 08            sub 8
 84+  8E43 67               ld h,a
 85+  8E44 7C           2 ld a,h
 86+  8E45 FE 58            cp $58
 87+  8E47 28 25            jr z,4F
 88+  8E49 7A               ld a,d
 89+  8E4A AE               xor (hl)
 90+  8E4B 77               ld (hl),a
 91+  8E4C D1           	pop de
 92+  8E4D 23           	inc hl
 93+  8E4E 7B               ld a,e
 94+  8E4F AE               xor (hl)
 95+  8E50 77           	ld (hl),a
 96+  8E51 23           	inc hl
 97+  8E52 7A               ld a,d
 98+  8E53 AE               xor (hl)
 99+  8E54 77           	ld (hl),a
100+  8E55 2B           	dec hl
101+  8E56 2B           	dec hl
102+  8E57 24           	inc h
103+  8E58 7C               ld a,h
104+  8E59 E6 07            and 7
105+  8E5B 20 0A            jr nz,3F
106+  8E5D 7D               ld a,l
107+  8E5E C6 20            add a,$20
108+  8E60 6F               ld l,a
109+  8E61 38 04            jr c,3F
110+  8E63 7C               ld a,h
111+  8E64 D6 08            sub 8
112+  8E66 67               ld h,a
113+  8E67 7C           3 ld a,h
114+  8E68 FE 58            cp $58
115+  8E6A 28 02            jr z,4F
116+  8E6C 10 B7            djnz 1B
117+  8E6E ED 7B D9 85  4 ld sp,(Stack)
118+  8E72 C9           	ret
119+  8E73
120+  8E73              ; ---------------------------------------------------
121+  8E73
122+  8E73 ED 73 D9 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8E77 FD F9        	ld sp,iy
124+  8E79
125+  8E79              ; >>>
126+  8E79
127+  8E79 06 10            ld b,16
128+  8E7B D1           1 pop de
129+  8E7C 7A           	ld a,d
130+  8E7D AE           	xor (hl)
131+  8E7E 77           	ld (hl),a
132+  8E7F 24           	inc h
133+  8E80 7C               ld a,h
134+  8E81 E6 07            and 7
135+  8E83 20 0C            jr nz,2F
136+  8E85 7D               ld a,l
137+  8E86 C6 20            add a,$20
138+  8E88 6F               ld l,a
139+  8E89 38 06            jr c,2F
140+  8E8B 7C               ld a,h
141+  8E8C D6 08            sub 8
142+  8E8E 67               ld h,a
143+  8E8F 18 00            jr 2F
144+  8E91 7C           2 ld a,h
145+  8E92 FE 58            cp $58
146+  8E94 28 02            jr z,3F
147+  8E96 10 E3            djnz 1B
148+  8E98 ED 7B D9 85  3 ld sp,(Stack)
149+  8E9C C9           	ret
150+  8E9D
151+  8E9D ED 73 D9 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
152+  8EA1 FD F9        	ld sp,iy
153+  8EA3
154+  8EA3              ; >>>
155+  8EA3
156+  8EA3 06 10            ld b,16
157+  8EA5 D1           1 pop de
158+  8EA6 7B           	ld a,e
159+  8EA7 AE           	xor (hl)
160+  8EA8 77           	ld (hl),a
161+  8EA9 24           	inc h
162+  8EAA 7C               ld a,h
163+  8EAB E6 07            and 7
164+  8EAD 20 0C            jr nz,2F
165+  8EAF 7D               ld a,l
166+  8EB0 C6 20            add a,$20
167+  8EB2 6F               ld l,a
168+  8EB3 38 06            jr c,2F
169+  8EB5 7C               ld a,h
170+  8EB6 D6 08            sub 8
171+  8EB8 67               ld h,a
172+  8EB9 18 00            jr 2F
173+  8EBB 7C           2 ld a,h
174+  8EBC FE 58            cp $58
175+  8EBE 28 02            jr z,3F
176+  8EC0 10 E3            djnz 1B
177+  8EC2 ED 7B D9 85  3 ld sp,(Stack)
178+  8EC6 C9           	ret
179+  8EC7
180+  8EC7              ; ---------------------------------------------------
181+  8EC7
182+  8EC7 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
183+  8ECB FD F9        	ld sp,iy
184+  8ECD 06 08            ld b,8
185+  8ECF D1           1 pop de
186+  8ED0 7A           	ld a,d
187+  8ED1 AE           	xor (hl)
188+  8ED2 77           	ld (hl),a
189+  8ED3 23           	inc hl
190+  8ED4 D1           	pop de
191+  8ED5 7B           	ld a,e
192+  8ED6 AE           	xor (hl)
193+  8ED7 77           	ld (hl),a
194+  8ED8 2B           	dec hl
195+  8ED9 24            	inc h
196+  8EDA 7C               ld a,h
197+  8EDB E6 07            and 7
198+  8EDD 20 0A            jr nz,2F
199+  8EDF 7D               ld a,l
200+  8EE0 C6 20            add a,$20
201+  8EE2 6F               ld l,a
202+  8EE3 38 04            jr c,2F
203+  8EE5 7C               ld a,h
204+  8EE6 D6 08            sub 8
205+  8EE8 67               ld h,a
206+  8EE9 7C           2 ld a,h
207+  8EEA FE 58            cp $58
208+  8EEC 28 20            jr z,4F
209+  8EEE D1               pop de
210+  8EEF 7B           	ld a,e
211+  8EF0 AE           	xor (hl)
212+  8EF1 77           	ld (hl),a
213+  8EF2 23           	inc hl
214+  8EF3 7A           	ld a,d
215+  8EF4 AE           	xor (hl)
216+  8EF5 77           	ld (hl),a
217+  8EF6 2B           	dec hl
218+  8EF7 24           	inc h
219+  8EF8 7C               ld a,h
220+  8EF9 E6 07            and 7
221+  8EFB 20 0A            jr nz,3F
222+  8EFD 7D               ld a,l
223+  8EFE C6 20            add a,$20
224+  8F00 6F               ld l,a
225+  8F01 38 04            jr c,3F
226+  8F03 7C               ld a,h
227+  8F04 D6 08            sub 8
228+  8F06 67               ld h,a
229+  8F07 7C           3 ld a,h
230+  8F08 FE 58            cp $58
231+  8F0A 28 02            jr z,4F
232+  8F0C 10 C1            djnz 1B
233+  8F0E ED 7B D9 85  4 ld sp,(Stack)
234+  8F12 C9           	ret
235+  8F13
236+  8F13 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
237+  8F17 FD F9        	ld sp,iy
238+  8F19 06 08            ld b,8
239+  8F1B D1           1 pop de
240+  8F1C D1           	pop de
241+  8F1D 7B           	ld a,e
242+  8F1E AE           	xor (hl)
243+  8F1F 77           	ld (hl),a
244+  8F20 24            	inc h
245+  8F21 7C               ld a,h
246+  8F22 E6 07            and 7
247+  8F24 20 0A            jr nz,2F
248+  8F26 7D               ld a,l
249+  8F27 C6 20            add a,$20
250+  8F29 6F               ld l,a
251+  8F2A 38 04            jr c,2F
252+  8F2C 7C               ld a,h
253+  8F2D D6 08            sub 8
254+  8F2F 67               ld h,a
255+  8F30 7C           2 ld a,h
256+  8F31 FE 58            cp $58
257+  8F33 28 1B            jr z,4F
258+  8F35 D1               pop de
259+  8F36 7A           	ld a,d
260+  8F37 AE           	xor (hl)
261+  8F38 77           	ld (hl),a
262+  8F39 24           	inc h
263+  8F3A 7C               ld a,h
264+  8F3B E6 07            and 7
265+  8F3D 20 0A            jr nz,3F
266+  8F3F 7D               ld a,l
267+  8F40 C6 20            add a,$20
268+  8F42 6F               ld l,a
269+  8F43 38 04            jr c,3F
270+  8F45 7C               ld a,h
271+  8F46 D6 08            sub 8
272+  8F48 67               ld h,a
273+  8F49 7C           3 ld a,h
274+  8F4A FE 58            cp $58
275+  8F4C 28 02            jr z,4F
276+  8F4E 10 CB            djnz 1B
277+  8F50 ED 7B D9 85  4 ld sp,(Stack)
278+  8F54 C9           	ret
279+  8F55
280+  8F55 ED 73 D9 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
281+  8F59 FD F9        	ld sp,iy
282+  8F5B 06 08            ld b,8
283+  8F5D D1           1 pop de
284+  8F5E 7B           	ld a,e
285+  8F5F AE           	xor (hl)
286+  8F60 77           	ld (hl),a
287+  8F61 23           	inc hl
288+  8F62 7A           	ld a,d
289+  8F63 AE           	xor (hl)
290+  8F64 77           	ld (hl),a
291+  8F65 2B           	dec hl
292+  8F66 24             	inc h
293+  8F67 7C               ld a,h
294+  8F68 E6 07            and 7
295+  8F6A 20 0A            jr nz,2F
296+  8F6C 7D               ld a,l
297+  8F6D C6 20            add a,$20
298+  8F6F 6F               ld l,a
299+  8F70 38 04            jr c,2F
300+  8F72 7C               ld a,h
301+  8F73 D6 08            sub 8
302+  8F75 67               ld h,a
303+  8F76 7C           2 ld a,h
304+  8F77 FE 58            cp $58
305+  8F79 28 21            jr z,4F
306+  8F7B D1               pop de
307+  8F7C 7A           	ld a,d
308+  8F7D AE           	xor (hl)
309+  8F7E 77           	ld (hl),a
310+  8F7F 23           	inc hl
311+  8F80 D1               pop de
312+  8F81 7B           	ld a,e
313+  8F82 AE           	xor (hl)
314+  8F83 77           	ld (hl),a
315+  8F84 2B           	dec hl
316+  8F85 24           	inc h
317+  8F86 7C               ld a,h
318+  8F87 E6 07            and 7
319+  8F89 20 0A            jr nz,3F
320+  8F8B 7D               ld a,l
321+  8F8C C6 20            add a,$20
322+  8F8E 6F               ld l,a
323+  8F8F 38 04            jr c,3F
324+  8F91 7C               ld a,h
325+  8F92 D6 08            sub 8
326+  8F94 67               ld h,a
327+  8F95 7C           3 ld a,h
328+  8F96 FE 58            cp $58
329+  8F98 28 02            jr z,4F
330+  8F9A 10 C1            djnz 1B
331+  8F9C ED 7B D9 85  4 ld sp,(Stack)
332+  8FA0 C9           	ret
333+  8FA1
334+  8FA1 ED 73 D9 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
335+  8FA5 FD F9        	ld sp,iy
336+  8FA7 06 08            ld b,8
337+  8FA9 D1           1 pop de
338+  8FAA 7B           	ld a,e
339+  8FAB AE           	xor (hl)
340+  8FAC 77           	ld (hl),a
341+  8FAD 24            	inc h
342+  8FAE 7C               ld a,h
343+  8FAF E6 07            and 7
344+  8FB1 20 0A            jr nz,2F
345+  8FB3 7D               ld a,l
346+  8FB4 C6 20            add a,$20
347+  8FB6 6F               ld l,a
348+  8FB7 38 04            jr c,2F
349+  8FB9 7C               ld a,h
350+  8FBA D6 08            sub 8
351+  8FBC 67               ld h,a
352+  8FBD 7C           2 ld a,h
353+  8FBE FE 58            cp $58
354+  8FC0 28 1C            jr z,4F
355+  8FC2 D1               pop de
356+  8FC3 7A           	ld a,d
357+  8FC4 AE           	xor (hl)
358+  8FC5 77           	ld (hl),a
359+  8FC6 24           	inc h
360+  8FC7 7C               ld a,h
361+  8FC8 E6 07            and 7
362+  8FCA 20 0A            jr nz,3F
363+  8FCC 7D               ld a,l
364+  8FCD C6 20            add a,$20
365+  8FCF 6F               ld l,a
366+  8FD0 38 04            jr c,3F
367+  8FD2 7C               ld a,h
368+  8FD3 D6 08            sub 8
369+  8FD5 67               ld h,a
370+  8FD6 7C           3 ld a,h
371+  8FD7 FE 58            cp $58
372+  8FD9 28 03            jr z,4F
373+  8FDB D1               pop de
374+  8FDC 10 CB            djnz 1B
375+  8FDE ED 7B D9 85  4 ld sp,(Stack)
376+  8FE2 C9           	ret
377+  8FE3
378+  8FE3              ; ---------------------------------------------------
379+  8FE3              ;
380+  8FE3              ;   27/02/23
381+  8FE3              ;
382+  8FE3              ;   Rutina idéntica a Pinta_Amadeus_2x2, sólo difiere de esta en el nº de scanlines_
383+  8FE3              ;   _ que imprime. No utilizamos [Pinta_Amadeus_2x2] porque cuando el programa está_
384+  8FE3              ;   _ imprimiendo elementos, no discrimina el tipo de Sprite que está pintando.
385+  8FE3
386+  8FE3 ED 73 D9 85  Pinta_Disparo ld (Stack),sp
387+  8FE7 FD F9            ld sp,iy
388+  8FE9 06 02            ld b,2
389+  8FEB D1           1 pop de
390+  8FEC 7B               ld a,e
391+  8FED AE               xor (hl)
392+  8FEE 77               ld (hl),a
393+  8FEF 23               inc hl
394+  8FF0 7A               ld a,d
395+  8FF1 AE               xor (hl)
396+  8FF2 77               ld (hl),a
397+  8FF3 2B               dec hl
398+  8FF4 24               inc h
399+  8FF5 7C               ld a,h
400+  8FF6 E6 07            and 7
401+  8FF8 20 0A            jr nz,2F
402+  8FFA 7D               ld a,l
403+  8FFB C6 20            add a,$20
404+  8FFD 6F               ld l,a
405+  8FFE 38 04            jr c,2F
406+  9000 7C               ld a,h
407+  9001 D6 08            sub 8
408+  9003 67               ld h,a
409+  9004 7C           2 ld a,h
410+  9005 FE 58            cp $58
411+  9007 28 02            jr z,3F
412+  9009 10 E0            djnz 1B
413+  900B ED 7B D9 85  3 ld sp,(Stack)
414+  900F C9               ret
415+  9010
# file closed: Rutinas_de_impresion_sprites.asm
839   9010              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  9010              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  9010              ;
  3+  9010              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  9010              ;
  5+  9010              ; *****************************************************************************************************************************************************************************************
  6+  9010              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  9010
  8+  9010 7C           calcula_tercio ld a,h
  9+  9011 E6 18        	and $18
 10+  9013 CB 2F        	sra a
 11+  9015 CB 2F        	sra a
 12+  9017 CB 2F        	sra a
 13+  9019 C9           	ret
 14+  901A
# file closed: calcula_tercio.asm
840   901A              	include "Cls.asm"
# file opened: Cls.asm
  1+  901A              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  901A              ;
  3+  901A              ;
  4+  901A              ;	CLS.
  5+  901A              ;
  6+  901A              ;	Limpia la pantalla y define sus atributos.
  7+  901A              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  901A              ;
  9+  901A              ;	COLORES: 0 ..... NEGRO
 10+  901A              ;    		 1 ..... AZUL
 11+  901A              ; 			 2 ..... ROJO
 12+  901A              ;			 3 ..... MAGENTA
 13+  901A              ; 			 4 ..... VERDE
 14+  901A              ; 			 5 ..... CIAN
 15+  901A              ;			 6 ..... AMARILLO
 16+  901A              ; 			 7 ..... BLANCO
 17+  901A              ;
 18+  901A              ;	INPUT: A contiene los atributos de pantalla.
 19+  901A              ;
 20+  901A              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  901A
 22+  901A
 23+  901A 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  901D 11 01 40     	LD DE,$4001
 25+  9020 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  9023 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  9025 ED B0        	LDIR
 28+  9027 01 FF 02     	LD BC,767
 29+  902A 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  902B ED B0        	LDIR
 31+  902D C9           	ret
 32+  902E
# file closed: Cls.asm
841   902E              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  902E              ; ******************************************************************************************************************************************************************************************
  2+  902E              ;
  3+  902E              ;   22/01/23
  4+  902E              ;
  5+  902E              ;	Mov_down
  6+  902E              ;
  7+  902E              ; 	Mueve el Sprite X px hacia abajo.
  8+  902E              ;
  9+  902E              ;
 10+  902E 21 C3 85     Mov_down ld hl,Ctrl_0
 11+  9031 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  9033              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  9033              ; 																	; _ en el caso de que no lo haya.
 14+  9033 3A AE 85     	ld a,(Vel_down)
 15+  9036 47           	ld b,a
 16+  9037 2A 98 85         ld hl,(Posicion_actual)
 17+  903A CD 10 90     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  903D E6 02        	and 2
 19+  903F 28 0F        	jr z,1F
 20+  9041
 21+  9041              ; Nos encontramos en el último tercio de pantalla.
 22+  9041              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  9041
 24+  9041 7C           	ld a,h
 25+  9042 FE 57        	cp $57
 26+  9044 20 0A        	jr nz,1F
 27+  9046 7D           	ld a,l
 28+  9047 C6 20        	add $20
 29+  9049 30 05        	jr nc,1F
 30+  904B
 31+  904B              ; ------------------------------
 32+  904B CD 2C 93     	call Reaparece_arriba
 33+  904E              ;	call Reinicio
 34+  904E              ; ------------------------------
 35+  904E 18 08        	jr 3F
 36+  9050 CD 50 8D     1 call NextScan
 37+  9053 22 98 85     	ld (Posicion_actual),hl
 38+  9056 10 E2            djnz 2B
 39+  9058 CD 42 93     3 call Genera_coordenadas
 40+  905B C9           	ret
 41+  905C
 42+  905C
 43+  905C              ; ******************************************************************************************************************************************************************************************
 44+  905C              ;
 45+  905C              ;   22/01/23
 46+  905C              ;
 47+  905C              ;	Mov_up
 48+  905C              ;
 49+  905C              ; 	Mueve el Sprite hacia arriba.
 50+  905C              ;
 51+  905C              ;
 52+  905C 21 C3 85     Mov_up ld hl,Ctrl_0
 53+  905F CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  9061              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  9061              ; 																		; _ en el caso de que no lo haya.
 56+  9061 3A AD 85     	ld a,(Vel_up)
 57+  9064 47           	ld b,a
 58+  9065 2A 98 85     	ld hl,(Posicion_actual)
 59+  9068 CD 10 90     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  906B A7           	and a
 61+  906C 20 10        	jr nz,1F
 62+  906E
 63+  906E              ; Nos encontramos en el 1er tercio de pantalla.
 64+  906E              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  906E
 66+  906E 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  906F FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  9071 20 0B            jr nz,1F
 69+  9073 7D               ld a,l
 70+  9074 D6 20            sub $20
 71+  9076 30 06            jr nc,1F
 72+  9078 25               dec h
 73+  9079
 74+  9079              ; -----------------------------
 75+  9079 CD 1C 93         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  907C              ;	call Reinicio
 77+  907C              ; -----------------------------
 78+  907C
 79+  907C 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  907E CD 5F 8D     1 call PreviousScan
 81+  9081 22 98 85     	ld (Posicion_actual),hl
 82+  9084 10 E2            djnz 3B
 83+  9086 CD 42 93     2 call Genera_coordenadas
 84+  9089 C9           	ret
 85+  908A
 86+  908A              ; ******************************************************************************************************************************************************************************************
 87+  908A              ;
 88+  908A              ;	19/10/22
 89+  908A              ;
 90+  908A              ;	Mov_right.
 91+  908A              ;
 92+  908A              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  908A              ;
 94+  908A
 95+  908A 21 C3 85     Mov_right ld hl,Ctrl_0
 96+  908D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  908F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  908F              ; 																	; _ en el caso de que no lo haya.
 99+  908F 3A C3 85     	ld a,(Ctrl_0)
100+  9092 CB 77        	bit 6,a
101+  9094 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  9096
103+  9096 CD CA 92     	call Stop_Amadeus_right
104+  9099 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  909A 18 4D        	jr 8F
106+  909C
107+  909C 3A 9C 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  909F FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  90A1 20 46        	jr nz,8F
110+  90A3
111+  90A3 3A 9E 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  90A6 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  90A7 28 40        	jr z,8F
114+  90A9
115+  90A9              ; ---------- ---------- ----------
116+  90A9              ;
117+  90A9              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  90A9
119+  90A9 3A AC 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  90AC FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  90AE 28 11        	jr z,1F
122+  90B0 38 06        	jr c,6F
123+  90B2 FE 04        	cp 4
124+  90B4 28 14        	jr z,7F
125+  90B6 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  90B8
127+  90B8              ; ---------- ---------- ----------
128+  90B8              ;
129+  90B8              ; Perfiles de velocidad
130+  90B8              ;
131+  90B8
132+  90B8 3A 9E 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  90BB FE FE        	cp $fe
134+  90BD 20 2A        	jr nz,8F
135+  90BF 18 10        	jr 3F
136+  90C1 3A 9E 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  90C4 FE FD        	cp $fd
138+  90C6 20 21        	jr nz,8F
139+  90C8 18 07        	jr 3F
140+  90CA 3A 9E 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  90CD FE FB        	cp $fb
142+  90CF 20 18        	jr nz,8F
143+  90D1
144+  90D1              ; ---------- ---------- ----------
145+  90D1
146+  90D1              3
147+  90D1 CD 0A 93     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  90D4              ;	call Reinicio
149+  90D4
150+  90D4              ; ---------- ---------- ----------
151+  90D4              ;
152+  90D4              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  90D4
154+  90D4 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  90D6 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  90D7 CD F0 90     	call DESPLZ_DER
157+  90DA C1           	pop bc
158+  90DB 10 F9        	djnz 5B
159+  90DD 2A 98 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  90E0 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  90E1 22 98 85     	ld (Posicion_actual),hl
162+  90E4 CD 42 93     	call Genera_coordenadas
163+  90E7 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  90E9
165+  90E9              ; ---------- ---------- ----------
166+  90E9
167+  90E9 2A 98 85     8 ld hl,(Posicion_actual)
168+  90EC CD F0 90     	call DESPLZ_DER
169+  90EF C9           2 ret
170+  90F0
171+  90F0              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  90F0              ;
173+  90F0              ;	22/9/22
174+  90F0              ;
175+  90F0
176+  90F0 CD FF 90     DESPLZ_DER call Desplaza_derecha
177+  90F3 CD 4B 91         call modifica_parametros_1er_DESPLZ_2
178+  90F6 CD 74 91         call Ciclo_completo
179+  90F9 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  90FC CB FE        	set 7,(hl)
181+  90FE C9           	ret
182+  90FF
183+  90FF              ; ******************************************************************************************************************************************************************************************
184+  90FF              ;	15/02/23
185+  90FF              ;
186+  90FF
187+  90FF 3A AC 85     Desplaza_derecha ld a,(Vel_right)
188+  9102 47           	ld b,a
189+  9103 2A A4 85     	ld hl,(Puntero_DESPLZ_der)
190+  9106 23           1 inc hl
191+  9107 23           	inc hl
192+  9108 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  910A 22 A4 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  910D CD 88 87     	call Extrae_address
195+  9110 22 9A 85     	ld (Puntero_objeto),hl
196+  9113
197+  9113              ; Modifica (Puntero_DESPLZ_izq).
198+  9113
199+  9113              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  9113              ; Cuántos movimientos hemos hecho ??
201+  9113              ; DE contiene (Puntero_DESPLZ_der).
202+  9113
203+  9113 2A A0 85     7 ld hl,(Indice_Sprite_der)
204+  9116 EB           	ex de,hl
205+  9117 A7           	and a
206+  9118 ED 52        	sbc hl,de
207+  911A CB 3D        	srl l
208+  911C 3E 08        6 ld a,8
209+  911E 95           	sub l
210+  911F 30 1E        	jr nc,3F
211+  9121
212+  9121              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  9121              ; B="0".
214+  9121
215+  9121 04           4 inc b
216+  9122 3C           	inc a
217+  9123 20 FC        	jr nz,4B
218+  9125 78           	ld a,b
219+  9126 08           	ex af,af
220+  9127 2A A0 85     	ld hl,(Indice_Sprite_der)
221+  912A 23           5 inc hl
222+  912B 23           	inc hl
223+  912C 10 FC        	djnz 5B
224+  912E 22 A4 85     	ld (Puntero_DESPLZ_der),hl
225+  9131 CD 88 87     	call Extrae_address
226+  9134 22 9A 85     	ld (Puntero_objeto),hl
227+  9137
228+  9137              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  9137              ; _(Posicion_actual).
230+  9137
231+  9137 21 98 85     	ld hl,Posicion_actual
232+  913A 34           	inc (hl)
233+  913B 08               ex af,af
234+  913C 6F           	ld l,a
235+  913D 18 DD        	jr 6B
236+  913F
237+  913F              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  913F
239+  913F 47           3 ld b,a
240+  9140 2A A2 85     	ld hl,(Indice_Sprite_izq)
241+  9143 23           2 inc hl
242+  9144 23           	inc hl
243+  9145 10 FC        	djnz 2B
244+  9147 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
245+  914A C9           8 ret
246+  914B
247+  914B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  914B              ;
249+  914B              ;	24/7/22
250+  914B              ;
251+  914B              ;	modifica_parametros_1er_DESPLZ_2
252+  914B              ;
253+  914B              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  914B              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  914B              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  914B
257+  914B 3A 9E 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  914E A7           	and a
259+  914F 20 1F        	jr nz,1F
260+  9151 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  9153 32 9E 85         ld (CTRL_DESPLZ),a
262+  9156
263+  9156 21 97 85     	ld hl,Columns
264+  9159 34           	inc (hl)
265+  915A 3A AA 85     	ld a,(Cuad_objeto)
266+  915D E6 01        	and 1
267+  915F 28 0F        	jr z,1F
268+  9161 2A 98 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  9164 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  9165 22 98 85     	ld (Posicion_actual),hl
271+  9168 CD 42 93     	call Genera_coordenadas
272+  916B CD D6 92     	call Inc_CTRL_DESPLZ
273+  916E 18 03        	jr 2F
274+  9170 CD D6 92     1 call Inc_CTRL_DESPLZ
275+  9173 C9           2 ret
276+  9174
277+  9174              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  9174              ;
279+  9174              ;	24/7/22
280+  9174              ;
281+  9174              ;	Ciclo_completo.
282+  9174              ;
283+  9174              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  9174              ;
285+  9174              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  9174              ; 	Decrementamos (Columns).
287+  9174              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  9174              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  9174
290+  9174
291+  9174 3A 9E 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  9177 FE FF        	cp $ff
293+  9179 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  917B E6 F0        	and $f0
295+  917D 20 28        	jr nz,3F
296+  917F
297+  917F              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  917F
299+  917F 3A 9E 85     	ld a,(CTRL_DESPLZ)
300+  9182 47           	ld b,a
301+  9183 3E F8        	ld a,$f8
302+  9185 80           	add b
303+  9186 32 9E 85     	ld (CTRL_DESPLZ),a
304+  9189 18 1C        	jr 3F
305+  918B 21 97 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  918E 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  918F AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  9190 32 9E 85     	ld (CTRL_DESPLZ),a
309+  9193 3A AA 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  9196 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  9198 20 0A        	jr nz,2F
312+  919A 2A 98 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  919D 23           	inc hl
314+  919E 22 98 85     	ld (Posicion_actual),hl
315+  91A1 CD 42 93     	call Genera_coordenadas
316+  91A4
317+  91A4              ; Inicia el puntero de Sprite.
318+  91A4
319+  91A4 CD 9F 87     2 call Inicia_puntero_objeto_der
320+  91A7 C9           3 ret
321+  91A8
322+  91A8              ; ******************************************************************************************************************************************************************************************
323+  91A8              ;
324+  91A8              ;	15/02/23
325+  91A8              ;
326+  91A8              ;	Mov_left.
327+  91A8              ;
328+  91A8              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  91A8              ;
330+  91A8              Mov_left
331+  91A8
332+  91A8 21 C3 85     	ld hl,Ctrl_0
333+  91AB CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  91AD              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  91AD              ; 																	; _ en el caso de que no lo haya.
336+  91AD 3A C3 85     	ld a,(Ctrl_0)
337+  91B0 CB 77        	bit 6,a
338+  91B2 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  91B4
340+  91B4 CD D0 92     	call Stop_Amadeus_left
341+  91B7 C8           	ret z
342+  91B8 20 50        	jr nz,8F
343+  91BA
344+  91BA 3A 9C 85     11 ld a,(Coordenada_X)
345+  91BD A7           	and a
346+  91BE 20 4A        	jr nz,8F
347+  91C0
348+  91C0 3A 9E 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  91C3 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  91C4 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  91C6
352+  91C6              ; ---------- ---------- ----------
353+  91C6
354+  91C6 3A AB 85     	ld a,(Vel_left)
355+  91C9 FE 02        	cp 2
356+  91CB 28 0F        	jr z,1F
357+  91CD 38 04        	jr c,6F
358+  91CF FE 04        	cp 4
359+  91D1 28 12        	jr z,7F
360+  91D3
361+  91D3              ; ---------- ---------- ----------
362+  91D3
363+  91D3 3A 9E 85     6 ld a,(CTRL_DESPLZ)
364+  91D6 FE F9        	cp $f9
365+  91D8 20 30        	jr nz,8F
366+  91DA 18 10        	jr 4F
367+  91DC 3A 9E 85     1 ld a,(CTRL_DESPLZ)
368+  91DF FE FA        	cp $fa
369+  91E1 20 27        	jr nz,8F
370+  91E3 18 07        	jr 4F
371+  91E5 3A 9E 85     7 ld a,(CTRL_DESPLZ)
372+  91E8 FE FC        	cp $fc
373+  91EA 20 1E        	jr nz,8F
374+  91EC
375+  91EC              ; ---------- ---------- ----------
376+  91EC
377+  91EC              4
378+  91EC CD F8 92     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  91EF              ;	call Reinicio
380+  91EF
381+  91EF              ; ---------- ---------- ----------
382+  91EF
383+  91EF 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  91F1 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  91F2
386+  91F2 2A A2 85     	ld hl,(Indice_Sprite_izq)
387+  91F5 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
388+  91F8
389+  91F8 CD 11 92     	call DESPLZ_IZQ
390+  91FB C1           	pop bc
391+  91FC 10 F3        	djnz 5B
392+  91FE 2A 98 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  9201 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  9202 22 98 85     	ld (Posicion_actual),hl
395+  9205 CD 42 93     	call Genera_coordenadas
396+  9208 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  920A
398+  920A              ; ---------- ---------- ----------
399+  920A              ; Movemos, no hay recolocación.
400+  920A
401+  920A 2A 98 85     8 ld hl,(Posicion_actual)
402+  920D CD 11 92     	call DESPLZ_IZQ
403+  9210 C9           2 ret
404+  9211
405+  9211              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  9211              ;
407+  9211              ;	22/9/22
408+  9211
409+  9211              DESPLZ_IZQ
410+  9211
411+  9211 CD 20 92     	call Desplaza_izquierda
412+  9214 CD 6C 92         call modifica_parametros_1er_DESPLZ
413+  9217 CD 94 92     	call Ciclo_completo_2
414+  921A 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  921D CB BE        	res 7,(hl)
416+  921F C9           	ret
417+  9220
418+  9220              Desplaza_izquierda
419+  9220
420+  9220 3A AB 85     	ld a,(Vel_left)
421+  9223 47           	ld b,a
422+  9224 2A A6 85     	ld hl,(Puntero_DESPLZ_izq)
423+  9227 23           1 inc hl
424+  9228 23           	inc hl
425+  9229 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  922B 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
427+  922E CD 88 87     	call Extrae_address
428+  9231 22 9A 85     	ld (Puntero_objeto),hl
429+  9234
430+  9234              ; Modifica (Puntero_DESPLZ_der).
431+  9234
432+  9234              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  9234              ; Cuántos movimientos hemos hecho ??
434+  9234              ; DE contiene (Puntero_DESPLZ_izq).
435+  9234
436+  9234 2A A2 85     7 ld hl,(Indice_Sprite_izq)
437+  9237 EB           	ex de,hl
438+  9238 A7           	and a
439+  9239 ED 52        	sbc hl,de
440+  923B CB 3D        	srl l
441+  923D 3E 08        6 ld a,8
442+  923F 95           	sub l
443+  9240 30 1E        	jr nc,3F
444+  9242
445+  9242              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  9242              ; B="0".
447+  9242
448+  9242 04           4 inc b
449+  9243 3C           	inc a
450+  9244 20 FC        	jr nz,4B
451+  9246 78           	ld a,b
452+  9247 08           	ex af,af
453+  9248 2A A2 85     	ld hl,(Indice_Sprite_izq)
454+  924B 23           5 inc hl
455+  924C 23           	inc hl
456+  924D 10 FC        	djnz 5B
457+  924F 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
458+  9252 CD 88 87     	call Extrae_address
459+  9255 22 9A 85     	ld (Puntero_objeto),hl
460+  9258
461+  9258              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  9258              ; _(Posicion_actual).
463+  9258
464+  9258 21 98 85     	ld hl,Posicion_actual
465+  925B 35           	dec (hl)
466+  925C 08           	ex af,af
467+  925D 6F           	ld l,a
468+  925E 18 DD        	jr 6B
469+  9260
470+  9260              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  9260
472+  9260 47           3 ld b,a
473+  9261 2A A0 85     	ld hl,(Indice_Sprite_der)
474+  9264 23           2 inc hl
475+  9265 23           	inc hl
476+  9266 10 FC        	djnz 2B
477+  9268 22 A4 85     	ld (Puntero_DESPLZ_der),hl
478+  926B C9           8 ret
479+  926C
480+  926C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  926C              ;
482+  926C              ;	modifica_parametros_1er_DESPLZ
483+  926C              ;
484+  926C              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  926C              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  926C              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  926C
488+  926C 3A 9E 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  926F A7           	and a
490+  9270 20 1E        	jr nz,1F
491+  9272 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  9273 32 9E 85         ld (CTRL_DESPLZ),a
493+  9276 21 97 85     	ld hl,Columns
494+  9279 34           	inc (hl)
495+  927A 3A AA 85     	ld a,(Cuad_objeto)
496+  927D E6 01        	and 1
497+  927F 20 0F        	jr nz,1F
498+  9281 2A 98 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  9284 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  9285 22 98 85     	ld (Posicion_actual),hl
501+  9288 CD 42 93     	call Genera_coordenadas
502+  928B CD E7 92     	call Dec_CTRL_DESPLZ
503+  928E 18 03        	jr 2F
504+  9290 CD E7 92     1 call Dec_CTRL_DESPLZ
505+  9293 C9           2 ret
506+  9294
507+  9294              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  9294
509+  9294 3A 9E 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  9297 FE F7        	cp $f7
511+  9299 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  929B 30 2C        	jr nc,3F
513+  929D
514+  929D              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  929D
516+  929D 06 00        	ld b,0
517+  929F 04           4 inc b
518+  92A0 3C           	inc a
519+  92A1 FE F7        	cp $f7
520+  92A3 20 FA        	jr nz,4B
521+  92A5 3E FF        	ld a,$ff
522+  92A7 90           	sub b
523+  92A8 32 9E 85     	ld (CTRL_DESPLZ),a
524+  92AB 18 1C        	jr 3F
525+  92AD
526+  92AD              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  92AD
528+  92AD 21 97 85     1 ld hl,Columns
529+  92B0 35           	dec (hl)
530+  92B1 AF           	xor a
531+  92B2 32 9E 85     	ld (CTRL_DESPLZ),a
532+  92B5 3A AA 85     	ld a,(Cuad_objeto)
533+  92B8 E6 01        	and 1
534+  92BA 28 0A        	jr z,2F
535+  92BC 2A 98 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  92BF 2B           	dec hl
537+  92C0 22 98 85     	ld (Posicion_actual),hl
538+  92C3 CD 42 93     	call Genera_coordenadas
539+  92C6
540+  92C6              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  92C6
542+  92C6 CD B2 87     2 call Inicia_puntero_objeto_izq
543+  92C9 C9           3 ret
544+  92CA
545+  92CA              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  92CA              ;
547+  92CA              ;	19/10/22
548+  92CA              ;
549+  92CA              ;	(cp 29) para un Amadeus de 3 Columns.
550+  92CA              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  92CA
552+  92CA 3A 9C 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  92CD FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  92CF C9           	ret
555+  92D0
556+  92D0              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  92D0              ;
558+  92D0              ;	19/10/22
559+  92D0              ;
560+  92D0              ;	(cp 2) para un Amadeus de 3 Columns.
561+  92D0              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  92D0
563+  92D0 3A 9C 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  92D3 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  92D5 C9           	ret
566+  92D6
567+  92D6              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  92D6              ;
569+  92D6              ;	24/7/22
570+  92D6              ;
571+  92D6              ;	Inc_CTRL_DESPLZ
572+  92D6              ;
573+  92D6              ;
574+  92D6              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  92D6
576+  92D6 21 9E 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  92D9 3A AC 85     	ld a,(Vel_right)
578+  92DC A7           	and a
579+  92DD 28 06        	jr z,1F
580+  92DF 47           	ld b,a
581+  92E0 34           3 inc (hl)
582+  92E1 10 FD        	djnz 3B
583+  92E3 18 01        	jr 2F
584+  92E5 34           1 inc (hl)
585+  92E6 C9           2 ret
586+  92E7
587+  92E7              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  92E7              ;
589+  92E7              ;	5/2/23
590+  92E7              ;
591+  92E7              ;	Dec_CTRL_DESPLZ
592+  92E7              ;
593+  92E7              ;
594+  92E7              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  92E7
596+  92E7 21 9E 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  92EA 3A AB 85     	ld a,(Vel_left)
598+  92ED A7           	and a
599+  92EE 28 06        	jr z,1F
600+  92F0 47           	ld b,a
601+  92F1 35           3 dec (hl)
602+  92F2 10 FD        	djnz 3B
603+  92F4 18 01        	jr 2F
604+  92F6 35           1 dec (hl)
605+  92F7 C9           2 ret
606+  92F8
607+  92F8              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  92F8
609+  92F8 2A 98 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  92FB 01 1F 00     	ld bc,31
611+  92FE A7           	and a
612+  92FF ED 4A        	adc hl,bc
613+  9301 22 98 85     	ld (Posicion_actual),hl
614+  9304 21 C3 85     	ld hl,Ctrl_0														; $xxx1
615+  9307 CB C6        	set 0,(hl)
616+  9309 C9           	ret
617+  930A
618+  930A              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  930A
620+  930A 2A 98 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  930D 01 1F 00     	ld bc,31
622+  9310 A7           	and a
623+  9311 ED 42        	sbc hl,bc
624+  9313 22 98 85     	ld (Posicion_actual),hl 											; $xx1x
625+  9316 21 C3 85     	ld hl,Ctrl_0
626+  9319 CB CE        	set 1,(hl)
627+  931B C9           	ret
628+  931C
629+  931C              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  931C
631+  931C 24           Reaparece_abajo inc h
632+  931D 01 E0 17     	ld bc,$17e0
633+  9320 A7           	and a
634+  9321 ED 4A        	adc hl,bc
635+  9323 22 98 85     	ld (Posicion_actual),hl
636+  9326 21 C3 85     	ld hl,Ctrl_0
637+  9329 CB D6        	set 2,(hl)
638+  932B C9           	ret
639+  932C
640+  932C              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  932C
642+  932C 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  932F A7           	and a
644+  9330 ED 42        	sbc hl,bc
645+  9332 22 98 85     	ld (Posicion_actual),hl
646+  9335 21 C3 85     	ld hl,Ctrl_0
647+  9338 CB DE        	set 3,(hl)
648+  933A C9           	ret
649+  933B
650+  933B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  933B
652+  933B 2A A8 85     Reinicio ld hl,(Posicion_inicio)
653+  933E 22 98 85     	ld (Posicion_actual),hl
654+  9341 C9           	ret
# file closed: Direcciones.asm
842   9342              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  9342              ;	12/12/22
  2+  9342              ;
  3+  9342              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  9342              ;	Fila superior "0", Columna izquierda "0".
  5+  9342              ;
  6+  9342              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  9342              ;
  8+  9342              ;	Modifica: A
  9+  9342
 10+  9342 C5           Genera_coordenadas push bc
 11+  9343 E5           	push hl
 12+  9344 2A 98 85     	ld hl,(Posicion_actual)
 13+  9347 7D           	ld a,l
 14+  9348 E6 1F        	and $1f
 15+  934A 32 9C 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  934D CD 10 90     	call calcula_tercio
 17+  9350 47           	ld b,a
 18+  9351 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9352 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  9354 7D           	ld a,l
 21+  9355 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  9357 28 05        	jr z,2F
 23+  9359 0C           1 inc c
 24+  935A D6 20        	sub 32
 25+  935C 20 FB        	jr nz,1B
 26+  935E 0C           2 inc c
 27+  935F 04           	inc b
 28+  9360 05           	dec b
 29+  9361 28 04        	jr z,3F
 30+  9363 3E E0        	ld a,$e0
 31+  9365 10 F2        	djnz 1B
 32+  9367 79           3 ld a,c
 33+  9368 3D           	dec a
 34+  9369 32 9D 85     	ld (Coordenada_y),a
 35+  936C E1           	pop hl
 36+  936D C1           	pop bc
 37+  936E C9           	ret
# file closed: Genera_coordenadas.asm
843   936F              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  936F
  2+  936F
  3+  936F              ;   11/8/22
  4+  936F              ;
  5+  936F              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  936F              ;
  7+  936F              ;   Mov_obj.asm
  8+  936F              ;
  9+  936F              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  936F              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  936F              ;
 12+  936F              ;   Codificación:
 13+  936F              ;
 14+  936F              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  936F
 16+  936F              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  936F
 18+  936F 02 40 00     Arriba db 2,%01000000,0
 19+  9372 02 80 00     Abajo db 2,%10000000,0
 20+  9375 02 20 00     Derecha db 2,%00100000,0
 21+  9378 02 10 00     Izquierda db 2,%00010000,0
 22+  937B 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  937F 60 42 60 40
 22+  9383 63
 23+  9384 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9388 22 A3 80 A0
 24+  938C 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9390 84 A0 83 A0
 25+  9394 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9398 80 A3 22 A0
 26+  939C 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  93A0 40 60 42 60
 27+  93A4 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  93A8 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  93AC 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  93B0 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  93B4 84
 31+  93B5 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  93B9 84 00
 32+  93BB 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  93BF 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  93C3 1F 1F 1F 1F
 34+  93C7 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  93CB 1F 1F 1F 1F
 34+  93CF 1F
 35+  93D0 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  93D4 2F 2F 2F 2F
 35+  93D8 2F 2F
 36+  93DA 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  93DE 2F 2F 00
 37+  93E1
 38+  93E1
 39+  93E1              ; ----- ----- ----- ----- -----
 40+  93E1
 41+  93E1 BF 93        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  93E3 BB 93        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  93E5 78 93        Indice_mov_Izquierda defw Izquierda
 44+  93E7 75 93        Indice_mov_Derecha defw Derecha
 45+  93E9 72 93        Indice_mov_Abajo defw Abajo
 46+  93EB 6F 93        Indice_mov_Arriba defw Arriba
 47+  93ED AC 93        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  93EF B0 93        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  93F1 A8 93        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  93F3 B5 93        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  93F5 7B 93        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  93F7              ; ----- ----- ----- ----- -----
 53+  93F7
 54+  93F7 3A C9 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  93FA A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  93FB 28 02            jr z,1F
 57+  93FD 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  93FF 3A CA 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  9402 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  9404 32 CA 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  9407              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  9407 2A C7 85         ld hl,(Puntero_mov)
 63+  940A 7E               ld a,(hl)
 64+  940B 32 C9 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  940E 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  940F 22 C7 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  9412
 68+  9412 3A CB 85     Decoder ld a,(Repetimos_db)
 69+  9415 A7               and a
 70+  9416 20 0C            jr nz,12F
 71+  9418 2A C7 85         ld hl,(Puntero_mov)
 72+  941B 7E               ld a,(hl)
 73+  941C A7               and a
 74+  941D 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  941F E6 0F            and $0f
 76+  9421 32 CB 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  9424              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  9424 2A C7 85     12 ld hl,(Puntero_mov)
 79+  9427 CB 7E            bit 7,(hl)
 80+  9429 28 03            jr z,2F
 81+  942B CD 2E 90         call Mov_down
 82+  942E 2A C7 85     2 ld hl, (Puntero_mov)
 83+  9431 CB 76            bit 6,(hl)
 84+  9433 28 03            jr z,3F
 85+  9435 CD 5C 90         call Mov_up
 86+  9438 2A C7 85     3 ld hl, (Puntero_mov)
 87+  943B CB 6E            bit 5,(hl)
 88+  943D 28 03            jr z,4F
 89+  943F CD 8A 90         call Mov_right
 90+  9442 2A C7 85     4 ld hl, (Puntero_mov)
 91+  9445 CB 66            bit 4,(hl)
 92+  9447 28 03            jr z,5F
 93+  9449 CD A8 91         call Mov_left
 94+  944C
 95+  944C              ; ---------- --------- --------- ---------- ----------
 96+  944C
 97+  944C 3A CB 85     5 ld a,(Repetimos_db)
 98+  944F A7               and a
 99+  9450 28 07            jr z,6F
100+  9452 3D               dec a
101+  9453 32 CB 85         ld (Repetimos_db),a
102+  9456 28 01            jr z,6f
103+  9458 C9           11 ret
104+  9459 21 C9 85     6 ld hl,Contador_db_mov
105+  945C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  945D 2A C7 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9460 23               inc hl
108+  9461 22 C7 85         ld (Puntero_mov),hl
109+  9464 18 F2            jr 11B
110+  9466 2A C5 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  9469 3A CA 85         ld a,(Incrementa_puntero)
112+  946C 47               ld b,a
113+  946D 23           8 inc hl
114+  946E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9470 5E               ld e,(hl)
116+  9471 23               inc hl
117+  9472 56               ld d,(hl)
118+  9473 EB               ex de,hl
119+  9474 22 C7 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9477 18 DF            jr 11B
121+  9479
122+  9479              ; ---------- --------- --------- ---------- ----------
123+  9479              ;
124+  9479              ;   11/8/22
125+  9479              ;
126+  9479              ;   Prepara_Puntero_mov
127+  9479
128+  9479 E5           Prepara_Puntero_mov push hl
129+  947A D5               push de
130+  947B 2A C5 85         ld hl,(Puntero_indice_mov)
131+  947E 5E               ld e,(hl)
132+  947F 23               inc hl
133+  9480 56               ld d,(hl)
134+  9481 EB               ex de,hl
135+  9482 22 C7 85         ld (Puntero_mov),hl
136+  9485 D1               pop de
137+  9486 E1               pop hl
138+  9487 C9               ret
139+  9488
140+  9488              ; ---------- --------- --------- ---------- ----------
141+  9488              ;
142+  9488              ;   11/8/22
143+  9488              ;
144+  9488              ;   Reinicia_el_movimiento
145+  9488
146+  9488 CD 79 94     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  948B AF               xor a
148+  948C 32 C9 85         ld (Contador_db_mov),a
149+  948F 32 CA 85         ld (Incrementa_puntero),a
150+  9492
151+  9492              ;    jr $
152+  9492
153+  9492 C3 F7 93         jp Movimiento
154+  9495 C9               ret
155+  9496              ; ---------- --------- --------- ---------- ----------
156+  9496
157+  9496
158+  9496
159+  9496
160+  9496
161+  9496
162+  9496
163+  9496
164+  9496
165+  9496
166+  9496
167+  9496
168+  9496
169+  9496
170+  9496
171+  9496
172+  9496
173+  9496
# file closed: Patrones_de_mov.asm
844   9496              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9496              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9496              ;
  3+  9496              ;	3/1/23
  4+  9496              ;
  5+  9496              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9496
  7+  9496              ;	ADC HL,SP	LD (addr),SP
  8+  9496              ;	ADD HL,SP	LD SP,(addr)
  9+  9496              ;	ADD IX,SP	LD SP,nn
 10+  9496              ; 	ADD IY,SP	LD SP,HL
 11+  9496              ;				LD SP,IX
 12+  9496              ;	DEC SP		LD SP,IY
 13+  9496
 14+  9496              ;	EX (SP),HL
 15+  9496              ;	EX (SP),IX
 16+  9496              ;	EX (SP),IY
 17+  9496
 18+  9496              ;	INC SP
 19+  9496
 20+  9496
 21+  9496                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero objeto.
 27+  7FA0              ;   $7002 / 03 ..... Puntero de impresion.
 28+  7FA0              ;   $7004 / 05 ..... Rutina de impresión.
 29+  7FA0
 30+  7FA0 ED 73 D9 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 A0 7F         ld sp,Guarda_foto_registros                   ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 3A D0 85         ld a,(Ctrl_1)
 38+  7FAF CB 47            bit 0,a
 39+  7FB1 28 05            jr z,2F
 40+  7FB3
 41+  7FB3 2A DF 85         ld hl,(Stack_snapshot_disparos)
 42+  7FB6
 43+  7FB6 18 03            jr 4F
 44+  7FB8
 45+  7FB8 2A DD 85     2 ld hl,(Stack_snapshot)                          ; Album_de_fotos contiene la imagen de los registros implicados en el_
 46+  7FBB 06 03        4 ld b,3                                          ; _correcto funcionamiento de las distintas rutinas de impresión.
 47+  7FBD
 48+  7FBD D1           1 pop de
 49+  7FBE 73               ld (hl),e
 50+  7FBF 23               inc hl
 51+  7FC0 72               ld (hl),d
 52+  7FC1 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 53+  7FC2 10 F9            djnz 1B
 54+  7FC4
 55+  7FC4 A7               and a
 56+  7FC5 28 05            jr z,5F
 57+  7FC7
 58+  7FC7 22 DF 85         ld (Stack_snapshot_disparos),hl
 59+  7FCA 18 03            jr 6F
 60+  7FCC
 61+  7FCC 22 DD 85     5 ld (Stack_snapshot),hl
 62+  7FCF ED 7B D9 85  6 ld sp,(Stack)
 63+  7FD3
 64+  7FD3 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 65+  7FD4
 66+  7FD4
# file closed: Guarda_foto_registros.asm
845   7FD4
846   7FD4              	SAVESNA "Pruebas.sna", START
847   7FD4
848   7FD4
849   7FD4
# file closed: Banco_de_pruebas.asm
