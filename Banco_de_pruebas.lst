# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 F9 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 FB 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B FD 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF FF 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 F9 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 05           Numero_de_entidades db 5								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 4C 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 92 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargado a Amadeus en el engine.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 05 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 34 86      	call Inicia_Puntero_objeto
210   853A CD E9 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 51 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 05 86     	call Inicia_punteros_de_entidades
219   8549 CD 80 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD E9 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ;	jr $
243   8560
244   8560              ; ----------------------------------------------------------------------
245   8560
246   8560 21 00 70     	ld hl,Album_de_fotos
247   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
248   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
249   8566 3A 0E 85         ld a,(Numero_de_entidades)
250   8569 47               ld b,a
251   856A
252   856A C5           2 push bc
253   856B CD 94 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
254   856E 3A F5 84      	ld a,(Ctrl_0)
255   8571 CB 67        	bit 4,a
256   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   8575
258   8575              ; ---------
259   8575
260   8575 CD C8 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
261   8578 21 F5 84     	ld hl,Ctrl_0
262   857B CB A6            res 4,(hl)
263   857D
264   857D CD 51 86     1 call Store_Restore_entidades
265   8580
266   8580 C1           	pop bc
267   8581 10 E7        	djnz 2B
268   8583
269   8583 CD 05 86     	call Inicia_punteros_de_entidades
270   8586 CD 80 86     	call Restore_Primera_entidad
271   8589
272   8589 21 00 70     	ld hl,Album_de_fotos
273   858C 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
274   858F              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
275   858F 3E 00        	ld a,0
276   8591 D3 FE        	out ($fe),a
277   8593
278   8593              ;	jr $
279   8593
280   8593 C9           	ret
281   8594
282   8594              ; --------------------------------------------------------------------------------------------------------------
283   8594              ;
284   8594              Mov_obj
285   8594
286   8594              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
287   8594
288   8594              ; 	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
289   8594 CD D6 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
290   8597
291   8597 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
292   8599 32 F6 84     	ld (Obj_dibujado),a
293   859C
294   859C              ; Movemos Amadeus o enemigos...
295   859C
296   859C 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
297   859F CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
298   85A1 C4 A6 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
299   85A4
300   85A4 3A F5 84     	ld a,(Ctrl_0)
301   85A7 CB 77        	bit 6,a
302   85A9 CC 01 90     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
303   85AC
304   85AC 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
305   85AF CB 67        	bit 4,a
306   85B1 C8           	ret z
307   85B2
308   85B2              ; ---------
309   85B2
310   85B2 CD D6 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
311   85B5 CD ED 85         call Repone_borrar
312   85B8              ;	call Draw											; Preparamos las variables para borrar.
313   85B8
314   85B8 CD BF 89     	call Prepara_draw
315   85BB CD F9 88     	call calcula_CColumnass
316   85BE CD 30 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
317   85C1 CD 85 89     	call Define_rutina_de_impresion
318   85C4 CD A0 7F     	call Guarda_foto_registros
319   85C7
320   85C7 C9           	ret
321   85C8
322   85C8              ; --------------------------------------------------------------------------------------------------------------
323   85C8              ;
324   85C8 AF           Borra_Pinta_obj xor a
325   85C9 32 F6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
326   85CC CD F9 85     	call Repone_pintar
327   85CF              ;	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
328   85CF CD E9 86     	call Draw
329   85D2 CD A0 7F     	call Guarda_foto_registros
330   85D5 C9           	ret
331   85D6
332   85D6              ; --------------------------------------------------------------------------------------------------------------
333   85D6
334   85D6 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
335   85D9 3A F6 84     	ld a,(Obj_dibujado)
336   85DC A7           	and a
337   85DD 28 05        	jr z,1F
338   85DF 11 EE 84     	ld de,Variables_de_pintado
339   85E2 18 03        	jr 2F
340   85E4 11 E7 84     1 ld de,Variables_de_borrado
341   85E7 01 07 00     2 ld bc,7
342   85EA ED B0        	ldir
343   85EC C9           	ret
344   85ED
345   85ED 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
346   85F0 11 D2 84     	ld de,Filas
347   85F3 01 07 00     	ld bc,7
348   85F6 ED B0        	ldir
349   85F8 C9           	ret
350   85F9
351   85F9 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
352   85FC 11 D2 84     	ld de,Filas
353   85FF 01 07 00     	ld bc,7
354   8602 ED B0        	ldir
355   8604 C9           	ret
356   8605
357   8605              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
358   8605              ;	ld (Caja_de_BORRADO),hl
359   8605              ;	ret
360   8605
361   8605              ; *************************************************************************************************************************************************************
362   8605              ;
363   8605              ; 8/1/23
364   8605              ;
365   8605              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
366   8605              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
367   8605              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
368   8605
369   8605              ; Destruye HL y DE !!!!!
370   8605
371   8605 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
372   8608 CD 2E 86         call Extrae_address
373   860B 22 08 85         ld (Puntero_store_entidades),hl
374   860E 21 C2 83     	ld hl,Indice_de_entidades+2
375   8611 22 0C 85     	ld (Indice_restore),hl
376   8614 CD 2E 86     	call Extrae_address
377   8617 22 0A 85     	ld (Puntero_restore_entidades),hl
378   861A C9               ret
379   861B
380   861B              ; -------------------------------------------------------------------------------------------------------------
381   861B              ;
382   861B              ; 7/1/23
383   861B              ;
384   861B
385   861B 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
386   861E AF           	xor a
387   861F 67           	ld h,a
388   8620 7D           	ld a,l
389   8621 D6 06        1 sub 6
390   8623 28 03        	jr z,2F
391   8625 24           	inc h
392   8626 18 F9        	jr 1B
393   8628 24           2 inc h
394   8629 7C           	ld a,h
395   862A 32 0F 85     	ld (Numero_de_malotes),a
396   862D C9           	ret
397   862E
398   862E              ; *************************************************************************************************************************************************************
399   862E              ;
400   862E              ; 20/10/22
401   862E              ;
402   862E              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
403   862E              ;
404   862E              ; Destruye el puntero y DE !!!!!
405   862E
406   862E 5E           Extrae_address ld e,(hl)
407   862F 23           	inc hl
408   8630 56           	ld d,(hl)
409   8631 2B           	dec hl
410   8632 EB           	ex de,hl
411   8633 C9           	ret
412   8634
413   8634              ; *************************************************************************************************************************************************************
414   8634              ;
415   8634              ;	21/9/22
416   8634              ;
417   8634              ;   Destruye HL y BC !!!!!,
418   8634
419   8634 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
420   8637 22 DC 84     	ld (Puntero_DESPLZ),hl
421   863A CD 2E 86     	call Extrae_address
422   863D 22 D6 84     	ld (Puntero_objeto),hl
423   8640
424   8640              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
425   8640
426   8640 21 10 83     	ld hl,Amadeus
427   8643 ED 4B D6 84  	ld bc,(Puntero_objeto)
428   8647 B7 ED 42     	sub hl,bc
429   864A C0           	ret nz
430   864B
431   864B 21 F5 84     	ld hl,Ctrl_0
432   864E CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
433   8650
434   8650 C9            	ret 												; _de nuestra nave en los extremos.
435   8651
436   8651              ; *************************************************************************************************************************************************************
437   8651              ;
438   8651              ;	8/1/23
439   8651              ;
440   8651              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
441   8651              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
442   8651
443   8651              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
444   8651              ;	_de la 2ª y 3ª entidad respectivamente.
445   8651
446   8651
447   8651
448   8651              Store_Restore_entidades
449   8651
450   8651 E5           	push hl
451   8652 D5           	push de
452   8653 C5            	push bc
453   8654
454   8654              ;	STORE !!!!!
455   8654
456   8654 21 D2 84     	ld hl,Filas
457   8657 ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
458   865B 01 36 00     	ld bc,54
459   865E ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
460   8660
461   8660              ;	Incrementa STORE y ejecuta RESTORE !!!!!
462   8660
463   8660 2A 0A 85     	ld hl,(Puntero_restore_entidades)
464   8663 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
465   8666 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
466   8669 01 36 00     	ld bc,54
467   866C ED B0        	ldir
468   866E
469   866E              ;	Incrementa RESTORE !!!!!
470   866E
471   866E 2A 0C 85         ld hl,(Indice_restore)
472   8671 23           	inc hl
473   8672 23           	inc hl
474   8673 22 0C 85     	ld (Indice_restore),hl
475   8676 CD 2E 86         call Extrae_address
476   8679 22 0A 85         ld (Puntero_restore_entidades),hl
477   867C
478   867C C1           	pop bc
479   867D D1           	pop de
480   867E E1           	pop hl
481   867F
482   867F C9           	ret
483   8680
484   8680              ; **************************************************************************************************
485   8680              ;
486   8680              ;	29/10/22
487   8680              ;
488   8680              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
489   8680
490   8680 E5           Restore_Primera_entidad push hl
491   8681 D5           	push de
492   8682 C5            	push bc
493   8683 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
494   8686 11 D2 84     	ld de,Filas
495   8689 01 36 00     	ld bc,54
496   868C ED B0        	ldir
497   868E C1           	pop bc
498   868F D1           	pop de
499   8690 E1           	pop hl
500   8691 C9           	ret
501   8692
502   8692              ; *************************************************************************************************************************************************************
503   8692              ;
504   8692              ; Teclado.
505   8692
506   8692 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
507   8694 DB FE        	in a,($fe)
508   8696 E6 01        	and $01
509   8698 28 02        	jr z,1f
510   869A 18 F6        	jr Pulsa_ENTER
511   869C C9           1 ret
512   869D
513   869D              ; **************************************************************************************************
514   869D              ;
515   869D              ; Temporización.
516   869D
517   869D              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
518   869D              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
519   869D              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
520   869D              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
521   869D
522   869D              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
523   869D              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
524   869D              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
525   869D
526   869D              ; A partir de $4f61 no hace falta DELAY.
527   869D
528   869D              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
529   869D
530   869D 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
531   86A0 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
532   86A1 78           	LD A,B
533   86A2 A7           	AND A
534   86A3 20 FB        	JR NZ,wait
535   86A5 C9           	RET
536   86A6
537   86A6              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
538   86A6              ;
539   86A6              ;	21/4/22
540   86A6
541   86A6              Movimiento_Amadeus
542   86A6
543   86A6 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
544   86A8 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
545   86AA E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
546   86AC CC C8 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
547   86AF 3E F7        	ld a,$f7
548   86B1 DB FE        	in a,($fe)
549   86B3 E6 01        	and $01
550   86B5 C8           	ret z
551   86B6 3E F7        	ld a,$f7
552   86B8 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
553   86BA E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
554   86BC CC BC 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
555   86BF C9               ret
556   86C0
557   86C0              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
558   86C0
559   86C0              ; Pinta indicadores de FILAS. ------------------------------------------------------
560   86C0
561   86C0 21 10 40     Pinta_FILAS ld hl,$4010
562   86C3              ;	ld b,9
563   86C3              ;2 push hl
564   86C3              ;	push bc
565   86C3 06 BF        	ld b,$bf
566   86C5 36 80        1 ld (hl),%10000000
567   86C7 CD CB 89     	call NextScan
568   86CA 10 F9        	djnz 1B
569   86CC              ;	pop bc
570   86CC              ;	pop hl
571   86CC              ;	inc l
572   86CC              ;	djnz 2B
573   86CC
574   86CC 06 03        	ld b,3
575   86CE 21 00 47         ld hl,$4700
576   86D1 CD D7 86     3 call Bucle_1
577   86D4 10 FB            djnz 3B
578   86D6 C9               ret
579   86D7
580   86D7 C5           Bucle_1 push bc
581   86D8 E5                   push hl
582   86D9 D1                   pop de
583   86DA 13                   inc de
584   86DB 01 FF 00             ld bc,255
585   86DE 36 FF                ld (hl),255
586   86E0 ED B0                ldir
587   86E2 23                   inc hl
588   86E3 3E 07                ld a,7
589   86E5 84                   add a,h
590   86E6 67                   ld h,a
591   86E7 C1                   pop bc
592   86E8 C9                   ret
593   86E9
594   86E9              ; ---------------------------------------------------------------
595   86E9
596   86E9              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E9              ; ******************************************************************************************************************************************************************************************
  2+  86E9              ;
  3+  86E9              ; 17/08/22
  4+  86E9              ;
  5+  86E9              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E9
  7+  86E9 CD BF 89     Draw call Prepara_draw
  8+  86EC 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86ED A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86EE 28 05        	jr z,2F
 11+  86F0 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F3 18 0C        	jr 1F
 13+  86F5 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F8 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86FB CD 86 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86FE              ;													; _la esquina superior izquierda de la pantalla.
 17+  86FE CD 83 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8701 3A F5 84     1 ld a,(Ctrl_0)
 19+  8704 CB 6F        	bit 5,a
 20+  8706 20 00        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8708
 22+  8708              ;	call Comprueba_limite_horizontal
 23+  8708              ;	call Comprueba_limite_vertical
 24+  8708
 25+  8708              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8708
 27+  8708 CD F9 88     3 call calcula_CColumnass
 28+  870B CD 30 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870E CD 85 89     	call Define_rutina_de_impresion
 30+  8711
 31+  8711 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8714 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8716 32 F5 84     	ld (Ctrl_0),a
 34+  8719
 35+  8719 C9           	ret
 36+  871A
 37+  871A              ; *******************************************************************************************************************************************************************************************
 38+  871A              ;	23/8/22
 39+  871A              ;
 40+  871A              ; 	Comprueba_limite_horizontal.
 41+  871A              ;
 42+  871A
 43+  871A 3A F6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  871D A7           	and a
 45+  871E C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  871F
 47+  871F 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8722 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8724 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  8726
 51+  8726 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  8728 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  872B 18 09            jr 6F
 54+  872D CB 5F        1 bit 3,a
 55+  872F 28 0D            jr z,2F
 56+  8731 E6 F7            and $f7
 57+  8733 32 F5 84         ld (Ctrl_0),a
 58+  8736 CD 86 88     6 call Inicializacion
 59+  8739 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  873A 08           	ex af,af
 61+  873B F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  873C 18 56            jr 5F
 63+  873E E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  873F
 65+  873F              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  873F              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  873F
 68+  873F EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  8740 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8743 CD 14 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  8746 67           	ld h,a
 72+  8747 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  8748 CD 14 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  874B 67           	ld h,a
 75+  874C A7           	and a
 76+  874D ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  874F
 78+  874F 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  8750 FE 02        	cp 2
 80+  8752 38 1C        	jr c,3F
 81+  8754 28 1A        	jr z,3F
 82+  8756
 83+  8756 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8757 28 21            jr z,7F
 85+  8759 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  875B              ;	ld e,0
 87+  875B E1           	pop hl
 88+  875C
 89+  875C              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  875C              ; _para indicar con E="2" en caso necesario.
 91+  875C
 92+  875C E5               push hl
 93+  875D C5               push bc
 94+  875E
 95+  875E CD 14 8C     	call calcula_tercio
 96+  8761 FE 01        	cp 1
 97+  8763 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8765
 99+  8765 CD 95 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  8768 28 26            jr z,9F
101+  876A 38 24            jr c,9F
102+  876C 1E 00        11 ld e,0
103+  876E 18 22            jr 8F
104+  8770
105+  8770 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8771 28 07        	jr z, 7F
107+  8773 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  8775 1E 00         	ld e,0
109+  8777 E1           	pop hl
110+  8778 18 04        	jr 4F
111+  877A 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  877C 18 15            jr 10F
113+  877E
114+  877E              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  877E              ; _para indicar con E="2" en caso necesario.
116+  877E
117+  877E E5           4 push hl
118+  877F C5               push bc
119+  8780
120+  8780 CD 14 8C     	call calcula_tercio
121+  8783 FE 01        	cp 1
122+  8785 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  8787
124+  8787 CD 95 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  878A 28 04            jr z,9F
126+  878C 30 02            jr nc,9F
127+  878E 18 02        	jr 8F
128+  8790 1E 02        9 ld e,2
129+  8792 C1           8 pop bc
130+  8793 E1           10 pop hl
131+  8794 C9           5 ret
132+  8795
133+  8795              ; --------------------
134+  8795              ;
135+  8795              ; 25/08/22
136+  8795
137+  8795 CD 14 8C     Comprueba_centro call calcula_tercio
138+  8798 67               ld h,a
139+  8799 08           	ex af,af
140+  879A FE 02        	cp 2
141+  879C 38 07        	jr c,1F
142+  879E 28 05        	jr z,1F
143+  87A0 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  87A3 18 03        	jr 2F
145+  87A5 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87A8 08           2 ex af,af
147+  87A9 A7               and a
148+  87AA ED 42            sbc hl,bc
149+  87AC C9               ret
150+  87AD
151+  87AD              ; *********************************************************************************************************************************************************************************************
152+  87AD              ;
153+  87AD              ;   16/8/22
154+  87AD              ;
155+  87AD              ;	Comprueba_limite_vertical
156+  87AD              ;
157+  87AD              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87AD              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87AD              ;
160+  87AD
161+  87AD 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87B0 A7           	and a
163+  87B1 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87B2
165+  87B2 7D           	ld a,l
166+  87B3 E6 1F        	and $1F
167+  87B5 57           	ld d,a
168+  87B6 3A 03 85     	ld a,(Limite_vertical)
169+  87B9 BA           	cp d 											; Límite - Posición.
170+  87BA
171+  87BA 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87BB CB 47        	bit 0,a
173+  87BD 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87BF
175+  87BF              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87BF
177+  87BF 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87C0 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87C2
180+  87C2               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87C2              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87C2
183+  87C2 3A E1 84         ld a,(Coordenada_X)
184+  87C5 16 0F            ld d,Centro_izquierda
185+  87C7 A7               and a
186+  87C8 92               sub d 											 ; Posición - Centro_izquierda.
187+  87C9
188+  87C9 28 21            jr z,3F
189+  87CB 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87CD              ;                                                    ; _salimos sin modificar nada.
191+  87CD 18 0E            jr 2F
192+  87CF
193+  87CF 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87D0 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87D2
196+  87D2              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87D2              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87D2
199+  87D2 3A E1 84         ld a,(Coordenada_X)
200+  87D5 16 10            ld d,Centro_derecha
201+  87D7 A7               and a
202+  87D8 92               sub d
203+  87D9
204+  87D9 28 11            jr z,3F
205+  87DB 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87DD              ;                                                    ; _salimos sin modificar nada.
207+  87DD CB 43        2 bit 0,e
208+  87DF 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87E1 C5           	push bc
210+  87E2 CD 75 88         call Modificaccionne
211+  87E5 C1           	pop bc
212+  87E6 CD 86 88         call Inicializacion
213+  87E9 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87EA 08           	ex af,af
215+  87EB F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87EC C9           3 ret 				 								 ; Salimos de la rutina.
217+  87ED
218+  87ED              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87ED
220+  87ED C5           4 push bc
221+  87EE 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87F1 0A           	ld a,(bc)
223+  87F2 3D           	dec a
224+  87F3 47           	ld b,a 											 ; Columnas-1 en B.
225+  87F4 7D           	ld a,l
226+  87F5 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87F6 CB 47        	bit 0,a
228+  87F8 28 03        	jr z,5F
229+  87FA 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87FB 18 2E        	jr 7F
231+  87FD
232+  87FD              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87FD
234+  87FD 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87FE F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87FF 3A F5 84     	ld a,(Ctrl_0)
237+  8802 CB 4F        	bit 1,a
238+  8804 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  8806 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  8807
241+  8807              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  8807
243+  8807 1C               inc e
244+  8808 1D               dec e
245+  8809 20 07            jr nz,12F
246+  880B 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  880C 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  880D 22 D4 84     	ld (Posicion_actual),hl
249+  8810 18 44        13 jr 9F
250+  8812
251+  8812 CB 43        12 bit 0,e
252+  8814 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  8816              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  8816 C1           	pop bc
255+  8817 18 D3        	jr 3B
256+  8819
257+  8819 80           14 add b
258+  881A 6F               ld l,a
259+  881B 22 D4 84     	ld (Posicion_actual),hl
260+  881E CD 75 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8821 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8823
263+  8823 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  8825 32 F5 84         ld (Ctrl_0),a
265+  8828 F1           	pop af
266+  8829 18 2B        	jr 9F
267+  882B
268+  882B              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  882B
270+  882B F5           7 push af
271+  882C 3A F5 84     	ld a,(Ctrl_0)
272+  882F CB 47        	bit 0,a
273+  8831 20 1D        	jr nz,8F
274+  8833 F1           	pop af
275+  8834
276+  8834              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8834
278+  8834 1C           	inc e
279+  8835 1D               dec e
280+  8836 20 07            jr nz,10F
281+  8838
282+  8838 90           	sub b
283+  8839 6F               ld l,a
284+  883A 22 D4 84     	ld (Posicion_actual),hl
285+  883D 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  883F              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  883F CB 43        10 bit 0,e
288+  8841 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8843              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8843 C1           	pop bc
291+  8844 18 A6        	jr 3B
292+  8846
293+  8846 90           16 sub b
294+  8847 6F               ld l,a
295+  8848 22 D4 84     	ld (Posicion_actual),hl
296+  884B CD 75 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  884E 18 06            jr 9F
298+  8850
299+  8850 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8852 32 F5 84         ld (Ctrl_0),a
301+  8855 F1           	pop af
302+  8856
303+  8856 C1           9 pop bc
304+  8857              ;	ld e,0
305+  8857 CD 86 88         call Inicializacion
306+  885A F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  885B 08           	ex af,af
308+  885C F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  885D 18 8D            jr 3B
310+  885F
311+  885F              ; --------------------
312+  885F
313+  885F              Modifica_Pos_actual
314+  885F
315+  885F              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  885F 05               dec B                                           ; Scanlines-1 en B.
317+  8860 CD DA 89     1 call PreviousScan
318+  8863 10 FB            djnz 1B
319+  8865 22 D4 84     	ld (Posicion_actual),hl
320+  8868 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  8869 C9           	ret
322+  886A
323+  886A              ; --------------------
324+  886A
325+  886A              Modifica_Pos_actual2
326+  886A
327+  886A              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  886A 05               dec B                                           ; Scanlines-1 en B.
329+  886B CD CB 89     1 call NextScan
330+  886E 10 FB            djnz 1B
331+  8870 22 D4 84     	ld (Posicion_actual),hl
332+  8873 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8874 C9           	ret
334+  8875
335+  8875              ; --------------------
336+  8875
337+  8875              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  8875              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  8875
340+  8875 08           Modificaccionne ex af,af
341+  8876 FE 02            cp 2
342+  8878 F5               push af                                         ; Guardo el resultado de la comparación.
343+  8879 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  887A F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  887B CC 5F 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  887E DC 5F 88         call c,Modifica_Pos_actual
347+  8881 C8           	ret z
348+  8882 CD 6A 88         call Modifica_Pos_actual2
349+  8885 C9               ret
350+  8886
351+  8886              ; *************************************************************************************************************************************************************************************************
352+  8886              ;
353+  8886              ;	13/8/22
354+  8886              ;
355+  8886              ;	Inicializacion
356+  8886              ;
357+  8886              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  8886              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  8886              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  8886              ;
361+  8886              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  8886              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  8886              ;	_ desaparece/aparece.
364+  8886
365+  8886              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  8886              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  8886              ;
368+  8886              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  8886              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  8886              ; 		   [E] ="0"
371+  8886
372+  8886              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  8886
374+  8886 CD 14 8C     Inicializacion call calcula_tercio
375+  8889 28 36        	jr z,primit
376+  888B E6 02        	and 2
377+  888D 20 07        	jr nz,segmit
378+  888F 7D           	ld a,l
379+  8890 FE 7F        	cp $7f
380+  8892 38 2D        	jr c,primit
381+  8894 28 2B        	jr z,primit
382+  8896 CD F3 88     segmit call column
383+  8899 38 13        	jr c,tercuad
384+  889B 3E 04        cuarcuad ld a,4
385+  889D 32 E0 84     	ld (Cuad_objeto),a
386+  88A0 21 20 48     	ld hl,$4820
387+  88A3 22 01 85     	ld (Limite_horizontal),hl
388+  88A6 21 03 85     	ld hl,Limite_vertical
389+  88A9 36 0D        	ld (hl),$0d
390+  88AB 08           	ex af,af
391+  88AC 18 3C        	jr 1F
392+  88AE              tercuad
393+  88AE              ;	call Fija_punteros
394+  88AE 3E 03        	ld a,3
395+  88B0 32 E0 84     	ld (Cuad_objeto),a
396+  88B3 21 20 48     	ld hl,$4820
397+  88B6 22 01 85     	ld (Limite_horizontal),hl
398+  88B9 21 03 85     	ld hl,Limite_vertical
399+  88BC 36 12        	ld (hl),$12
400+  88BE 08           	ex af,af
401+  88BF 18 29        	jr 1F
402+  88C1 CD F3 88     primit call column
403+  88C4 38 13        	jr c, primcuad
404+  88C6              segcuad
405+  88C6              ;	call Fija_punteros
406+  88C6 3E 02        	ld a,2
407+  88C8 32 E0 84     	ld (Cuad_objeto),a
408+  88CB 21 C0 4F     	ld hl,$4fc0
409+  88CE 22 01 85     	ld (Limite_horizontal),hl
410+  88D1 21 03 85     	ld hl,Limite_vertical
411+  88D4 36 0D        	ld (hl),$0d
412+  88D6 08           	ex af,af
413+  88D7 18 11        	jr 1F
414+  88D9              primcuad
415+  88D9              ;	call Fija_punteros
416+  88D9 3E 01        	ld a,1
417+  88DB 32 E0 84     	ld (Cuad_objeto),a
418+  88DE 21 C0 4F     	ld hl,$4fc0
419+  88E1 22 01 85     	ld (Limite_horizontal),hl
420+  88E4 21 03 85     	ld hl,Limite_vertical
421+  88E7 36 12        	ld (hl),$12
422+  88E9 08           	ex af,af
423+  88EA CD 89 8F     1 call Genera_coordenadas
424+  88ED 21 F5 84     	ld hl,Ctrl_0
425+  88F0 CB EE        	set 5,(hl)
426+  88F2 C9           	ret
427+  88F3
428+  88F3              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88F3              ;
430+  88F3              ;	14/9/22
431+  88F3              ;
432+  88F3              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88F3              ;
434+  88F3              ;	La rutina fija el puntero de dibujado/borrado.
435+  88F3              ;
436+  88F3              ;	Función:
437+  88F3              ;
438+  88F3              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88F3
440+  88F3              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88F3              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88F3              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88F3              ;	and a
444+  88F3              ;	jr z,1F
445+  88F3              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88F3              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88F3              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88F3              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88F3              ;	ld (Puntero_objeto),hl
450+  88F3              ;	jr 3F
451+  88F3              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88F3              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88F3              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88F3              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88F3              ;	ld (Puntero_objeto),hl
456+  88F3              ;	jr 3F
457+  88F3              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88F3              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88F3              ;3 pop de
460+  88F3              ;	pop bc
461+  88F3              ;	ret
462+  88F3
463+  88F3              ; ------------------------------------------------------------------------------------------------------------------
464+  88F3
465+  88F3              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88F3              ;
467+  88F3              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88F3
469+  88F3 7D           column ld a,l
470+  88F4 E6 1F        	and $1f
471+  88F6 FE 10         	cp $10
472+  88F8 C9            	ret
473+  88F9
474+  88F9              ; --------------------------------------------------------------------------------------------------------------------
475+  88F9              ;
476+  88F9              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88F9              ;
478+  88F9              ; 14/12/22
479+  88F9              ;
480+  88F9              ;	Modifica: A y BC.
481+  88F9
482+  88F9 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  88FC E6 01        	and 1
484+  88FE 28 17        	jr z,1F
485+  8900
486+  8900              ; Nos encontramos en la parte izquierda de la pantalla
487+  8900
488+  8900 3A E1 84     	ld a,(Coordenada_X)
489+  8903 47           	ld b,a
490+  8904 04           	inc b											; (Coordenada_X)+1 en B.
491+  8905 79           	ld a,c
492+  8906 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  8907 38 08        	jr c,2F
494+  8909 47           	ld b,a
495+  890A 79           	ld a,c
496+  890B 90           	sub b
497+  890C 32 00 85     	ld (Columnas),a
498+  890F 18 1B        	jr 4F
499+  8911 79           2 ld a,c
500+  8912 32 00 85     	ld (Columnas),a
501+  8915 18 15        	jr 4F
502+  8917
503+  8917              ; Nos encontramos en la parte derecha de la pantalla.
504+  8917
505+  8917 3A E1 84     1 ld a,(Coordenada_X)
506+  891A 81           	add c
507+  891B 3D           	dec a
508+  891C D6 1F        	sub $1f
509+  891E 38 08        	jr c,3F
510+  8920 47           	ld b,a
511+  8921 79           	ld a,c
512+  8922 90           	sub b
513+  8923 32 00 85     	ld (Columnas),a
514+  8926 18 04        	jr 4F
515+  8928 79           3 ld a,c
516+  8929 32 00 85     	ld (Columnas),a
517+  892C D9           4 exx
518+  892D 4F           	ld c,a
519+  892E D9           	exx
520+  892F C9            ret
521+  8930
522+  8930              ; --------------------------------------------------------------------------------------------------------------------
523+  8930              ;
524+  8930              ; 7/1/23
525+  8930              ;
526+  8930              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  8930              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  8930              ;
529+  8930              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  8930              ;	DESTRUYE: HL,B Y A.
531+  8930
532+  8930 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  8933 FE 02        	cp 2
534+  8935 38 18        	jr c,1F
535+  8937 28 16        	jr z,1F
536+  8939 E6 01        	and 1
537+  893B 28 0D        	jr z,3F
538+  893D
539+  893D              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  893D
541+  893D CD 79 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  8940
543+  8940 7D           9 ld a,l
544+  8941 E6 1F        	and $1f
545+  8943 28 2A        	jr z,7F
546+  8945 2B           	dec hl
547+  8946 10 F8        	djnz 9B
548+  8948 18 25        	jr 7F
549+  894A
550+  894A              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  894A
552+  894A 2A D4 84     3 ld hl,(Posicion_actual)
553+  894D 18 20        	jr 7F
554+  894F
555+  894F 28 14        1 jr z,2F
556+  8951
557+  8951              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  8951
559+  8951 CD 79 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  8954 7D           4 ld a,l
561+  8955 E6 1F        	and $1f
562+  8957 28 03        	jr z,6F
563+  8959 2B           	dec hl
564+  895A 10 F8        	djnz 4B
565+  895C 06 0F        6 ld b,15
566+  895E CD DA 89     5 call PreviousScan
567+  8961 10 FB        	djnz 5B
568+  8963 18 0A        	jr 7F
569+  8965
570+  8965              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  8965
572+  8965 CD 79 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  8968 06 0F        	ld b,15
574+  896A CD DA 89     8 call PreviousScan
575+  896D 10 FB        	djnz 8B
576+  896F
577+  896F E5           7 push hl
578+  8970 DD E1        	pop ix
579+  8972
580+  8972 2A D6 84     	ld hl,(Puntero_objeto)
581+  8975 E5           	push hl
582+  8976 FD E1        	pop iy
583+  8978
584+  8978 C9           	ret
585+  8979
586+  8979              ; --------------------------------------------------------------------------------------------------------------------
587+  8979              ;
588+  8979              ;	2/1/23
589+  8979              ;
590+  8979              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  8979              ;
592+  8979              ;	Tras esta rutina tenemos:
593+  8979              ;
594+  8979              ;	OUTPUT: HL contiene (Posicion_actual).
595+  8979              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  8979              ;
597+  8979              ;	DESTRUYE!!!!! HL,B y A.
598+  8979
599+  8979 2A D4 84     Operandos ld hl,(Posicion_actual)
600+  897C 3A 00 85     	ld a,(Columnas)
601+  897F 3D           	dec a
602+  8980 20 01        	jr nz,1F
603+  8982 3C           	inc a
604+  8983 47           1 ld b,a
605+  8984 C9           	ret
606+  8985
607+  8985              ; --------------------------------------------------------------------------------------------------------------------
608+  8985              ;
609+  8985              ;	3/1/23
610+  8985              ;
611+  8985              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  8985              ;
613+  8985              ;	Destruye: A,B,HL y DE.
614+  8985
615+  8985              Define_rutina_de_impresion
616+  8985
617+  8985 3A D3 84     	ld a,(Columns)
618+  8988 47           	ld b,a
619+  8989 3A 00 85     	ld a,(Columnas)
620+  898C B8           	cp b
621+  898D 20 0D        	jr nz,2f
622+  898F
623+  898F              ;	La entidad se imprime entera.
624+  898F
625+  898F 21 21 8A     	ld hl, Indice_entidades_completas
626+  8992 E6 01        	and 1
627+  8994 28 02        	jr z,1F
628+  8996
629+  8996 23           	inc hl
630+  8997 23           	inc hl
631+  8998
632+  8998 CD 2E 86     1 call Extrae_address
633+  899B C9           	ret		;	ret
634+  899C
635+  899C              ;	La entidad no se imprime entera en pantalla.
636+  899C
637+  899C 3A E0 84     2 ld a,(Cuad_objeto)
638+  899F E6 01        	and 1
639+  89A1 28 17        	jr z,3F
640+  89A3
641+  89A3              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  89A3
643+  89A3 21 25 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  89A6 3A D3 84     4 ld a,(Columns)
645+  89A9 E6 01        	and 1
646+  89AB 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89AD
648+  89AD 23           	inc hl
649+  89AE 23           	inc hl
650+  89AF
651+  89AF 3A 00 85     	ld a,(Columnas)
652+  89B2 E6 01        	and 1
653+  89B4 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89B6
655+  89B6 23           	inc hl
656+  89B7 23           	inc hl
657+  89B8
658+  89B8 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89BA
660+  89BA 21 2B 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89BD 18 E7        	jr 4B
662+  89BF
663+  89BF              ; --------------------------------------------------------------------------------------------------------------------
664+  89BF              ;
665+  89BF              ;	Prepara_draw
666+  89BF              ;
667+  89BF              ;	Es una rutina de carga.
668+  89BF              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89BF              ;
670+  89BF              ;	FUNCIONAMIENTO:
671+  89BF              ;
672+  89BF              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89BF              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89BF              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89BF              ;
676+  89BF              ;	DESTRUYE:
677+  89BF              ;
678+  89BF              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89BF
680+  89BF 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89C2 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89C3 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89C4 4E           	ld c,(hl)
684+  89C5 2A D4 84     	ld hl,(Posicion_actual)
685+  89C8 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89CA C9           	ret
687+  89CB
688+  89CB              ;----------------------------------------------------------------------------------------------------------------
689+  89CB              ;
690+  89CB              ;	5/08/22
691+  89CB              ;
692+  89CB              ;   NextScan.
693+  89CB              ;
694+  89CB              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89CB              ;
696+  89CB              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89CB              ;
698+  89CB              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89CB              ;
700+  89CB              ;       DESTRUIDOS: AF y HL !!!
701+  89CB              ;
702+  89CB              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89CB              ;
704+  89CB
705+  89CB 24           NextScan inc h          ; Incrementamos el scanline.
706+  89CC 7C               ld a,h
707+  89CD E6 07            and 7
708+  89CF C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89D0
710+  89D0 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
711+  89D1 C6 20            add a,$20           ; Vamos a comprobarlo...
712+  89D3 6F               ld l,a
713+  89D4 D8               ret c               ; Salimos si se produce el cambio de tercio.
714+  89D5
715+  89D5 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
716+  89D6 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
717+  89D8 67               ld h,a
718+  89D9 C9               ret
719+  89DA
720+  89DA              ;----------------------------------------------------------------------------------------------------------------
721+  89DA              ;
722+  89DA              ;	5/08/22
723+  89DA              ;
724+  89DA              ;   PreviousScan.
725+  89DA              ;
726+  89DA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
727+  89DA              ;
728+  89DA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
729+  89DA              ;
730+  89DA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
731+  89DA              ;
732+  89DA              ;       DESTRUIDOS: AF y HL !!!
733+  89DA              ;
734+  89DA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
735+  89DA              ;
736+  89DA
737+  89DA 7C           PreviousScan ld a,h
738+  89DB 25               dec h               ; Dec H.
739+  89DC E6 07            and 7
740+  89DE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
741+  89DF
742+  89DF 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
743+  89E0 D6 20            sub $20             ; Vamos a comprobarlo...
744+  89E2 6F               ld l,a
745+  89E3 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
746+  89E4
747+  89E4 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
748+  89E5 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
749+  89E7 67               ld h,a
750+  89E8 C9               ret
751+  89E9
752+  89E9              ; -----------------------------------------------------------------------------------
753+  89E9              ;
754+  89E9              ;	07/01/23
755+  89E9
756+  89E9              Extrae_foto_registros
757+  89E9
758+  89E9 ED 73 10 85  	ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
759+  89ED 31 00 70     	ld sp,Album_de_fotos
760+  89F0 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
761+  89F2 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
762+  89F3 D1           	pop de																	; Dirección de la rutina de impresión en DE.
763+  89F4
764+  89F4 ED 73 12 85  	ld (Stack_2),sp
765+  89F8 ED 7B 10 85  	ld sp,(Stack)
766+  89FC 3E CD        	ld a,$cd
767+  89FE 32 06 8A     	ld (Imprime),a
768+  8A01 EB           	ex de,hl
769+  8A02 22 07 8A     	ld (Imprime+1),hl
770+  8A05 EB           	ex de,hl
771+  8A06
772+  8A06 00 00 00     Imprime db 0,0,0
773+  8A09 ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
774+  8A0D 3A 0F 85     	ld a,(Numero_de_malotes)
775+  8A10 3D           	dec a
776+  8A11 28 09        	jr z,1F
777+  8A13 32 0F 85      	ld (Numero_de_malotes),a
778+  8A16 ED 7B 12 85  	ld sp,(Stack_2)
779+  8A1A 18 D4        	jr 2B
780+  8A1C
781+  8A1C AF           1 xor a
782+  8A1D 32 12 85     	ld (Stack_2),a
783+  8A20 C9           	ret
784+  8A21
785+  8A21
# file closed: Draw_XOR.asm
597   8A21              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A21              ;   índices de Rutinas de impresión.
  2+  8A21
  3+  8A21 31 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A23 5A 8A            defw Pinta_Amadeus_3x2
  5+  8A25
  6+  8A25 A4 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A27 44 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A29 F8 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A2B
 10+  8A2B CE 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A2D D2 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2F 86 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A31
 14+  8A31
 15+  8A31              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A31              ;
 17+  8A31              ;   12/12/22
 18+  8A31              ;
 19+  8A31              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A31              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A31              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A31              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A31              ;
 24+  8A31              ;   Modifica: DE y HL.
 25+  8A31
 26+  8A31 ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A35 FD F9        	ld sp,iy
 28+  8A37 06 10            ld b,16
 29+  8A39 D1           1 pop de
 30+  8A3A 73           	ld (hl),e
 31+  8A3B 23           	inc hl
 32+  8A3C 72           	ld (hl),d
 33+  8A3D 2B           	dec hl
 34+  8A3E
 35+  8A3E 24           	inc h
 36+  8A3F 7C               ld a,h
 37+  8A40 E6 07            and 7
 38+  8A42 20 0A            jr nz,2F
 39+  8A44
 40+  8A44 7D               ld a,l
 41+  8A45 C6 20            add a,$20
 42+  8A47 6F               ld l,a
 43+  8A48 38 04            jr c,2F
 44+  8A4A
 45+  8A4A 7C               ld a,h
 46+  8A4B D6 08            sub 8
 47+  8A4D 67               ld h,a
 48+  8A4E
 49+  8A4E 7C           2 ld a,h
 50+  8A4F FE 58            cp $58
 51+  8A51 28 02            jr z,3F
 52+  8A53 10 E4            djnz 1B
 53+  8A55 ED 7B 10 85  3 ld sp,(Stack)
 54+  8A59 C9           	ret
 55+  8A5A
 56+  8A5A ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A5E FD F9        	ld sp,iy
 58+  8A60 06 08            ld b,8
 59+  8A62 D1           1 pop de
 60+  8A63 73           	ld (hl),e
 61+  8A64 23           	inc hl
 62+  8A65 72           	ld (hl),d
 63+  8A66 23           	inc hl
 64+  8A67 D1           	pop de
 65+  8A68 73           	ld (hl),e
 66+  8A69 2B           	dec hl
 67+  8A6A 2B           	dec hl
 68+  8A6B 24           	inc h
 69+  8A6C 7C               ld a,h
 70+  8A6D E6 07            and 7
 71+  8A6F 20 0A            jr nz,2F
 72+  8A71 7D               ld a,l
 73+  8A72 C6 20            add a,$20
 74+  8A74 6F               ld l,a
 75+  8A75 38 04            jr c,2F
 76+  8A77 7C               ld a,h
 77+  8A78 D6 08            sub 8
 78+  8A7A 67               ld h,a
 79+  8A7B 7C           2 ld a,h
 80+  8A7C FE 58            cp $58
 81+  8A7E 28 1F            jr z,4F
 82+  8A80 72               ld (hl),d
 83+  8A81 D1           	pop de
 84+  8A82 23           	inc hl
 85+  8A83 73           	ld (hl),e
 86+  8A84 23           	inc hl
 87+  8A85 72           	ld (hl),d
 88+  8A86 2B           	dec hl
 89+  8A87 2B           	dec hl
 90+  8A88 24           	inc h
 91+  8A89 7C               ld a,h
 92+  8A8A E6 07            and 7
 93+  8A8C 20 0A            jr nz,3F
 94+  8A8E 7D               ld a,l
 95+  8A8F C6 20            add a,$20
 96+  8A91 6F               ld l,a
 97+  8A92 38 04            jr c,3F
 98+  8A94 7C               ld a,h
 99+  8A95 D6 08            sub 8
100+  8A97 67               ld h,a
101+  8A98 7C           3 ld a,h
102+  8A99 FE 58            cp $58
103+  8A9B 28 02            jr z,4F
104+  8A9D 10 C3            djnz 1B
105+  8A9F ED 7B 10 85  4 ld sp,(Stack)
106+  8AA3 C9           	ret
107+  8AA4
108+  8AA4              ; ---------------------------------------------------
109+  8AA4
110+  8AA4 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AA8 FD F9        	ld sp,iy
112+  8AAA 06 10            ld b,16
113+  8AAC D1           1 pop de
114+  8AAD 7A           	ld a,d
115+  8AAE AE           	xor (hl)
116+  8AAF 77           	ld (hl),a
117+  8AB0 24           	inc h
118+  8AB1 7C               ld a,h
119+  8AB2 E6 07            and 7
120+  8AB4 20 0C            jr nz,2F
121+  8AB6 7D               ld a,l
122+  8AB7 C6 20            add a,$20
123+  8AB9 6F               ld l,a
124+  8ABA 38 06            jr c,2F
125+  8ABC 7C               ld a,h
126+  8ABD D6 08            sub 8
127+  8ABF 67               ld h,a
128+  8AC0 18 00            jr 2F
129+  8AC2 7C           2 ld a,h
130+  8AC3 FE 58            cp $58
131+  8AC5 28 02            jr z,3F
132+  8AC7 10 E3            djnz 1B
133+  8AC9 ED 7B 10 85  3 ld sp,(Stack)
134+  8ACD C9           	ret
135+  8ACE
136+  8ACE ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8AD2 FD F9        	ld sp,iy
138+  8AD4 06 10            ld b,16
139+  8AD6 D1           1 pop de
140+  8AD7 7B           	ld a,e
141+  8AD8 AE           	xor (hl)
142+  8AD9 77           	ld (hl),a
143+  8ADA 24           	inc h
144+  8ADB 7C               ld a,h
145+  8ADC E6 07            and 7
146+  8ADE 20 0C            jr nz,2F
147+  8AE0 7D               ld a,l
148+  8AE1 C6 20            add a,$20
149+  8AE3 6F               ld l,a
150+  8AE4 38 06            jr c,2F
151+  8AE6 7C               ld a,h
152+  8AE7 D6 08            sub 8
153+  8AE9 67               ld h,a
154+  8AEA 18 00            jr 2F
155+  8AEC 7C           2 ld a,h
156+  8AED FE 58            cp $58
157+  8AEF 28 02            jr z,3F
158+  8AF1 10 E3            djnz 1B
159+  8AF3 ED 7B 10 85  3 ld sp,(Stack)
160+  8AF7 C9           	ret
161+  8AF8
162+  8AF8              ; ---------------------------------------------------
163+  8AF8
164+  8AF8 ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8AFC FD F9        	ld sp,iy
166+  8AFE 06 08            ld b,8
167+  8B00 D1           1 pop de
168+  8B01 7A           	ld a,d
169+  8B02 AE           	xor (hl)
170+  8B03 77           	ld (hl),a
171+  8B04 23           	inc hl
172+  8B05 D1           	pop de
173+  8B06 7B           	ld a,e
174+  8B07 AE           	xor (hl)
175+  8B08 77           	ld (hl),a
176+  8B09 2B           	dec hl
177+  8B0A 24            	inc h
178+  8B0B 7C               ld a,h
179+  8B0C E6 07            and 7
180+  8B0E 20 0A            jr nz,2F
181+  8B10 7D               ld a,l
182+  8B11 C6 20            add a,$20
183+  8B13 6F               ld l,a
184+  8B14 38 04            jr c,2F
185+  8B16 7C               ld a,h
186+  8B17 D6 08            sub 8
187+  8B19 67               ld h,a
188+  8B1A 7C           2 ld a,h
189+  8B1B FE 58            cp $58
190+  8B1D 28 20            jr z,4F
191+  8B1F D1               pop de
192+  8B20 7B           	ld a,e
193+  8B21 AE           	xor (hl)
194+  8B22 77           	ld (hl),a
195+  8B23 23           	inc hl
196+  8B24 7A           	ld a,d
197+  8B25 AE           	xor (hl)
198+  8B26 77           	ld (hl),a
199+  8B27 2B           	dec hl
200+  8B28 24           	inc h
201+  8B29 7C               ld a,h
202+  8B2A E6 07            and 7
203+  8B2C 20 0A            jr nz,3F
204+  8B2E 7D               ld a,l
205+  8B2F C6 20            add a,$20
206+  8B31 6F               ld l,a
207+  8B32 38 04            jr c,3F
208+  8B34 7C               ld a,h
209+  8B35 D6 08            sub 8
210+  8B37 67               ld h,a
211+  8B38 7C           3 ld a,h
212+  8B39 FE 58            cp $58
213+  8B3B 28 02            jr z,4F
214+  8B3D 10 C1            djnz 1B
215+  8B3F ED 7B 10 85  4 ld sp,(Stack)
216+  8B43 C9           	ret
217+  8B44
218+  8B44 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B48 FD F9        	ld sp,iy
220+  8B4A 06 08            ld b,8
221+  8B4C D1           1 pop de
222+  8B4D D1           	pop de
223+  8B4E 7B           	ld a,e
224+  8B4F AE           	xor (hl)
225+  8B50 77           	ld (hl),a
226+  8B51 24            	inc h
227+  8B52 7C               ld a,h
228+  8B53 E6 07            and 7
229+  8B55 20 0A            jr nz,2F
230+  8B57 7D               ld a,l
231+  8B58 C6 20            add a,$20
232+  8B5A 6F               ld l,a
233+  8B5B 38 04            jr c,2F
234+  8B5D 7C               ld a,h
235+  8B5E D6 08            sub 8
236+  8B60 67               ld h,a
237+  8B61 7C           2 ld a,h
238+  8B62 FE 58            cp $58
239+  8B64 28 1B            jr z,4F
240+  8B66 D1               pop de
241+  8B67 7A           	ld a,d
242+  8B68 AE           	xor (hl)
243+  8B69 77           	ld (hl),a
244+  8B6A 24           	inc h
245+  8B6B 7C               ld a,h
246+  8B6C E6 07            and 7
247+  8B6E 20 0A            jr nz,3F
248+  8B70 7D               ld a,l
249+  8B71 C6 20            add a,$20
250+  8B73 6F               ld l,a
251+  8B74 38 04            jr c,3F
252+  8B76 7C               ld a,h
253+  8B77 D6 08            sub 8
254+  8B79 67               ld h,a
255+  8B7A 7C           3 ld a,h
256+  8B7B FE 58            cp $58
257+  8B7D 28 02            jr z,4F
258+  8B7F 10 CB            djnz 1B
259+  8B81 ED 7B 10 85  4 ld sp,(Stack)
260+  8B85 C9           	ret
261+  8B86
262+  8B86 ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8B8A FD F9        	ld sp,iy
264+  8B8C 06 08            ld b,8
265+  8B8E D1           1 pop de
266+  8B8F 7B           	ld a,e
267+  8B90 AE           	xor (hl)
268+  8B91 77           	ld (hl),a
269+  8B92 23           	inc hl
270+  8B93 7A           	ld a,d
271+  8B94 AE           	xor (hl)
272+  8B95 77           	ld (hl),a
273+  8B96 2B           	dec hl
274+  8B97 24             	inc h
275+  8B98 7C               ld a,h
276+  8B99 E6 07            and 7
277+  8B9B 20 0A            jr nz,2F
278+  8B9D 7D               ld a,l
279+  8B9E C6 20            add a,$20
280+  8BA0 6F               ld l,a
281+  8BA1 38 04            jr c,2F
282+  8BA3 7C               ld a,h
283+  8BA4 D6 08            sub 8
284+  8BA6 67               ld h,a
285+  8BA7 7C           2 ld a,h
286+  8BA8 FE 58            cp $58
287+  8BAA 28 21            jr z,4F
288+  8BAC D1               pop de
289+  8BAD 7A           	ld a,d
290+  8BAE AE           	xor (hl)
291+  8BAF 77           	ld (hl),a
292+  8BB0 23           	inc hl
293+  8BB1 D1               pop de
294+  8BB2 7B           	ld a,e
295+  8BB3 AE           	xor (hl)
296+  8BB4 77           	ld (hl),a
297+  8BB5 2B           	dec hl
298+  8BB6 24           	inc h
299+  8BB7 7C               ld a,h
300+  8BB8 E6 07            and 7
301+  8BBA 20 0A            jr nz,3F
302+  8BBC 7D               ld a,l
303+  8BBD C6 20            add a,$20
304+  8BBF 6F               ld l,a
305+  8BC0 38 04            jr c,3F
306+  8BC2 7C               ld a,h
307+  8BC3 D6 08            sub 8
308+  8BC5 67               ld h,a
309+  8BC6 7C           3 ld a,h
310+  8BC7 FE 58            cp $58
311+  8BC9 28 02            jr z,4F
312+  8BCB 10 C1            djnz 1B
313+  8BCD ED 7B 10 85  4 ld sp,(Stack)
314+  8BD1 C9           	ret
315+  8BD2
316+  8BD2 ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8BD6 FD F9        	ld sp,iy
318+  8BD8 06 08            ld b,8
319+  8BDA D1           1 pop de
320+  8BDB 7B           	ld a,e
321+  8BDC AE           	xor (hl)
322+  8BDD 77           	ld (hl),a
323+  8BDE 24            	inc h
324+  8BDF 7C               ld a,h
325+  8BE0 E6 07            and 7
326+  8BE2 20 0A            jr nz,2F
327+  8BE4 7D               ld a,l
328+  8BE5 C6 20            add a,$20
329+  8BE7 6F               ld l,a
330+  8BE8 38 04            jr c,2F
331+  8BEA 7C               ld a,h
332+  8BEB D6 08            sub 8
333+  8BED 67               ld h,a
334+  8BEE 7C           2 ld a,h
335+  8BEF FE 58            cp $58
336+  8BF1 28 1C            jr z,4F
337+  8BF3 D1               pop de
338+  8BF4 7A           	ld a,d
339+  8BF5 AE           	xor (hl)
340+  8BF6 77           	ld (hl),a
341+  8BF7 24           	inc h
342+  8BF8 7C               ld a,h
343+  8BF9 E6 07            and 7
344+  8BFB 20 0A            jr nz,3F
345+  8BFD 7D               ld a,l
346+  8BFE C6 20            add a,$20
347+  8C00 6F               ld l,a
348+  8C01 38 04            jr c,3F
349+  8C03 7C               ld a,h
350+  8C04 D6 08            sub 8
351+  8C06 67               ld h,a
352+  8C07 7C           3 ld a,h
353+  8C08 FE 58            cp $58
354+  8C0A 28 03            jr z,4F
355+  8C0C D1               pop de
356+  8C0D 10 CB            djnz 1B
357+  8C0F ED 7B 10 85  4 ld sp,(Stack)
358+  8C13 C9           	ret
359+  8C14
360+  8C14              ; ---------------------------------------------------
361+  8C14
# file closed: Rutinas_de_impresion_sprites.asm
598   8C14              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C14              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C14              ;
  3+  8C14              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C14              ;
  5+  8C14              ; *****************************************************************************************************************************************************************************************
  6+  8C14              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C14
  8+  8C14 7C           calcula_tercio ld a,h
  9+  8C15 E6 18        	and $18
 10+  8C17 CB 2F        	sra a
 11+  8C19 CB 2F        	sra a
 12+  8C1B CB 2F        	sra a
 13+  8C1D C9           	ret
 14+  8C1E
# file closed: calcula_tercio.asm
599   8C1E              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C1E              ; -----------------------------------------------------------------------------------------
  2+  8C1E              ;
  3+  8C1E              ;   04/11/22
  4+  8C1E              ;
  5+  8C1E              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C1E              ;
  7+  8C1E              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C1E              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C1E              ;
 10+  8C1E              ;   DESTRUYE: HL y A. !!!!!
 11+  8C1E
 12+  8C1E CD 14 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C21 26 58            ld h,$58
 14+  8C23 84               add h
 15+  8C24 67               ld h,a
 16+  8C25 C9               ret
# file closed: Calcula_direccion_atributos.asm
600   8C26              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C26              ; ********** **********
  2+  8C26              ;
  3+  8C26              ;   5/11/22
  4+  8C26              ;
  5+  8C26              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C26              ;
  7+  8C26              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C26              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C26              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C26              ;
 11+  8C26              ;   NO DESTROYERSSSS !!!!!
 12+  8C26
 13+  8C26 E5           Define_atributos push hl
 14+  8C27 C5           	push bc
 15+  8C28 D5           	push de
 16+  8C29
 17+  8C29 CD 1E 8C     	call Calcula_direccion_atributos
 18+  8C2C
 19+  8C2C D9               exx
 20+  8C2D E5               push hl
 21+  8C2E D9               exx
 22+  8C2F D1               pop de
 23+  8C30
 24+  8C30 42               ld b,d
 25+  8C31 7B               ld a,e 									; (Attr) en A.
 26+  8C32
 27+  8C32 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C33 E5            	push hl 								; Guardo dirección de attr.
 29+  8C34
 30+  8C34              ; -----
 31+  8C34
 32+  8C34 77           2 ld (hl),a
 33+  8C35 0D           	dec c 									; Decremento (Columnas).
 34+  8C36 28 03        	jr z,1F
 35+  8C38 23           	inc hl
 36+  8C39 18 F9        	jr 2B
 37+  8C3B
 38+  8C3B E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C3C C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C3D
 41+  8C3D 05           	dec b									; Decremento (Filas).
 42+  8C3E 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C40
 44+  8C40 11 20 00     	ld de,32
 45+  8C43 A7           	and a
 46+  8C44 ED 5A        	adc hl,de
 47+  8C46 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C48
 49+  8C48 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C49 C1           	pop bc
 51+  8C4A E1           	pop hl
 52+  8C4B
 53+  8C4B C9           	ret
 54+  8C4C
# file closed: Define_atributos.asm
601   8C4C              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C4C              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C4C              ;
  3+  8C4C              ;
  4+  8C4C              ;	CLS.
  5+  8C4C              ;
  6+  8C4C              ;	Limpia la pantalla y define sus atributos.
  7+  8C4C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C4C              ;
  9+  8C4C              ;	COLORES: 0 ..... NEGRO
 10+  8C4C              ;    		 1 ..... AZUL
 11+  8C4C              ; 			 2 ..... ROJO
 12+  8C4C              ;			 3 ..... MAGENTA
 13+  8C4C              ; 			 4 ..... VERDE
 14+  8C4C              ; 			 5 ..... CIAN
 15+  8C4C              ;			 6 ..... AMARILLO
 16+  8C4C              ; 			 7 ..... BLANCO
 17+  8C4C              ;
 18+  8C4C              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C4C              ;
 20+  8C4C              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C4C
 22+  8C4C
 23+  8C4C 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C4F 11 01 40     	LD DE,$4001
 25+  8C52 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C55 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C57 ED B0        	LDIR
 28+  8C59 01 FF 02     	LD BC,767
 29+  8C5C 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C5D ED B0        	LDIR
 31+  8C5F C9           	ret
 32+  8C60
# file closed: Cls.asm
602   8C60              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C60              ; ******************************************************************************************************************************************************************************************
  2+  8C60              ;
  3+  8C60              ;   19/10/22
  4+  8C60              ;
  5+  8C60              ;	Mov_down
  6+  8C60              ;
  7+  8C60              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C60              ;
  9+  8C60              ;
 10+  8C60 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C63 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C65              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C65              ; 																	; _ en el caso de que no lo haya.
 14+  8C65 3A E6 84     	ld a,(Vel_down)
 15+  8C68 47           	ld b,a
 16+  8C69 2A D4 84         ld hl,(Posicion_actual)
 17+  8C6C CD 14 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C6F E6 02        	and 2
 19+  8C71 28 0F        	jr z,1F
 20+  8C73 7C           	ld a,h
 21+  8C74 FE 57        	cp $57
 22+  8C76 20 0A        	jr nz,1F
 23+  8C78 7D           	ld a,l
 24+  8C79 C6 20        	add $20
 25+  8C7B 30 05        	jr nc,1F
 26+  8C7D
 27+  8C7D              ; ------------------------------
 28+  8C7D CD 70 8F     	call Reaparece_arriba
 29+  8C80              ;	call Reinicio
 30+  8C80              ; ------------------------------
 31+  8C80
 32+  8C80 18 08        	jr 3F
 33+  8C82 CD CB 89     1 call NextScan
 34+  8C85 22 D4 84     	ld (Posicion_actual),hl
 35+  8C88 10 E2            djnz 2B
 36+  8C8A CD 89 8F     3 call Genera_coordenadas
 37+  8C8D C9           	ret
 38+  8C8E
 39+  8C8E
 40+  8C8E              ; ******************************************************************************************************************************************************************************************
 41+  8C8E              ;
 42+  8C8E              ;   19/10/22
 43+  8C8E              ;
 44+  8C8E              ;	Mov_up
 45+  8C8E              ;
 46+  8C8E              ; 	Mueve el Sprite hacia arriba.
 47+  8C8E              ;
 48+  8C8E              ;
 49+  8C8E 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C91 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C93              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C93              ; 																		; _ en el caso de que no lo haya.
 53+  8C93 3A E5 84     	ld a,(Vel_up)
 54+  8C96 47           	ld b,a
 55+  8C97 2A D4 84     	ld hl,(Posicion_actual)
 56+  8C9A CD 14 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8C9D A7           	and a
 58+  8C9E 20 10        	jr nz,1F
 59+  8CA0 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CA1 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CA3 20 0B            jr nz,1F
 62+  8CA5 7D               ld a,l
 63+  8CA6 D6 20            sub $20
 64+  8CA8 30 06            jr nc,1F
 65+  8CAA 25               dec h
 66+  8CAB
 67+  8CAB              ; -----------------------------
 68+  8CAB CD 60 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CAE              ;	call Reinicio
 70+  8CAE              ; -----------------------------
 71+  8CAE
 72+  8CAE 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CB0 CD DA 89     1 call PreviousScan
 74+  8CB3 22 D4 84     	ld (Posicion_actual),hl
 75+  8CB6 10 E2            djnz 3B
 76+  8CB8 CD 89 8F     2 call Genera_coordenadas
 77+  8CBB C9           	ret
 78+  8CBC
 79+  8CBC              ; ******************************************************************************************************************************************************************************************
 80+  8CBC              ;
 81+  8CBC              ;	19/10/22
 82+  8CBC              ;
 83+  8CBC              ;	Mov_right.
 84+  8CBC              ;
 85+  8CBC              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CBC              ;
 87+  8CBC
 88+  8CBC 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CBF CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CC1              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CC1              ; 																	; _ en el caso de que no lo haya.
 92+  8CC1 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CC4 A7           	and a
 94+  8CC5 28 0B        	jr z,10F
 95+  8CC7
 96+  8CC7 3A F5 84     	ld a,(Ctrl_0)
 97+  8CCA CB 7F        	bit 7,a
 98+  8CCC 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CCE 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CD1 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CD2
102+  8CD2 3A F5 84     10 ld a,(Ctrl_0)
103+  8CD5 CB 77        	bit 6,a
104+  8CD7 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CD9
106+  8CD9 CD 1F 8F     	call Stop_Amadeus_right
107+  8CDC C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CDD 18 4A        	jr 3F
109+  8CDF
110+  8CDF 3A E1 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CE2 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CE4 20 43        	jr nz,3F
113+  8CE6
114+  8CE6 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CE9 A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CEA 28 3D        	jr z,3F
117+  8CEC
118+  8CEC              ; ---------- ---------- ----------
119+  8CEC
120+  8CEC 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
121+  8CEF FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
122+  8CF1 28 11        	jr z,1F
123+  8CF3 38 06        	jr c,6F
124+  8CF5 FE 04        	cp 4
125+  8CF7 28 14        	jr z,7F
126+  8CF9 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
127+  8CFB
128+  8CFB              ; ---------- ---------- ----------
129+  8CFB              ;
130+  8CFB              ; Perfiles de velocidad
131+  8CFB              ;
132+  8CFB 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
133+  8CFE FE FE        	cp $fe
134+  8D00 20 27        	jr nz,3F
135+  8D02 18 10        	jr 4F
136+  8D04 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
137+  8D07 FE FD        	cp $fd
138+  8D09 20 1E        	jr nz,3F
139+  8D0B 18 07        	jr 4F
140+  8D0D 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
141+  8D10 FE FB        	cp $fb
142+  8D12 20 15        	jr nz,3F
143+  8D14
144+  8D14              ; ---------- ---------- ----------
145+  8D14
146+  8D14 CD 4E 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
147+  8D17              ;	call Reinicio
148+  8D17
149+  8D17              ; ---------- ---------- ----------
150+  8D17
151+  8D17 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
152+  8D19 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
153+  8D1A CD 52 8D     	call DESPLZ_DER
154+  8D1D C1           	pop bc
155+  8D1E 10 F9        	djnz 5B
156+  8D20 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
157+  8D23 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
158+  8D24 22 D4 84     	ld (Posicion_actual),hl
159+  8D27 18 25        	jr 2F 															; Salimos para pintar la nueva posición.
160+  8D29
161+  8D29              ; ---------- ---------- ----------
162+  8D29
163+  8D29 3A E4 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
164+  8D2C FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
165+  8D2E 20 18        	jr nz,8F
166+  8D30 2A D4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
167+  8D33 7D           	ld a,l
168+  8D34 E6 1F        	and $1f
169+  8D36 FE 1F        	cp 31
170+  8D38 20 05        	jr nz,9F
171+  8D3A
172+  8D3A              ; ---------- ---------- ----------
173+  8D3A
174+  8D3A CD 4E 8F     	call Reaparece_izquierda
175+  8D3D
176+  8D3D              ; ---------- ---------- ----------
177+  8D3D
178+  8D3D 18 0F        	jr 2F
179+  8D3F 2A D4 84     9 ld hl,(Posicion_actual)
180+  8D42 23           	inc hl
181+  8D43 22 D4 84     	ld (Posicion_actual),hl
182+  8D46 18 06        	jr 2F
183+  8D48 2A D4 84     8 ld hl,(Posicion_actual)
184+  8D4B CD 52 8D     	call DESPLZ_DER
185+  8D4E CD 89 8F     2 call Genera_coordenadas
186+  8D51 C9           	ret
187+  8D52
188+  8D52              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
189+  8D52              ;
190+  8D52              ;	22/9/22
191+  8D52              ;
192+  8D52
193+  8D52 CD 61 8D     DESPLZ_DER call Desplaza_derecha
194+  8D55 CD 76 8D         call modifica_parametros_1er_DESPLZ_2
195+  8D58 CD 9C 8D         call Ciclo_completo
196+  8D5B 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
197+  8D5E CB FE        	set 7,(hl)
198+  8D60 C9           	ret
199+  8D61
200+  8D61              ; ******************************************************************************************************************************************************************************************
201+  8D61              ;	14/9/22
202+  8D61              ;
203+  8D61
204+  8D61 3A E4 84     Desplaza_derecha ld a,(Vel_right)
205+  8D64 47           	ld b,a
206+  8D65 2A DC 84     	ld hl,(Puntero_DESPLZ)
207+  8D68 23           1 inc hl
208+  8D69 23           	inc hl
209+  8D6A 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
210+  8D6C 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
211+  8D6F CD 2E 86     	call Extrae_address
212+  8D72
213+  8D72              ;	ld (Caja_de_DESPLZ),hl
214+  8D72 22 D6 84     	ld (Puntero_objeto),hl
215+  8D75
216+  8D75 C9           	ret
217+  8D76
218+  8D76              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8D76              ;
220+  8D76              ;	24/7/22
221+  8D76              ;
222+  8D76              ;	modifica_parametros_1er_DESPLZ_2
223+  8D76              ;
224+  8D76              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8D76              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8D76              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8D76
228+  8D76 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8D79 A7           	and a
230+  8D7A 20 1C        	jr nz,1F
231+  8D7C D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8D7E 32 D8 84         ld (CTRL_DESPLZ),a
233+  8D81
234+  8D81 21 D3 84     	ld hl,Columns
235+  8D84 34           	inc (hl)
236+  8D85
237+  8D85 3A E0 84     	ld a,(Cuad_objeto)
238+  8D88 E6 01        	and 1
239+  8D8A 28 0C        	jr z,1F
240+  8D8C 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
241+  8D8F 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
242+  8D90 22 D4 84     	ld (Posicion_actual),hl
243+  8D93 CD 2B 8F     	call Inc_CTRL_DESPLZ
244+  8D96 18 03        	jr 2F
245+  8D98 CD 2B 8F     1 call Inc_CTRL_DESPLZ
246+  8D9B C9           2 ret
247+  8D9C
248+  8D9C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
249+  8D9C              ;
250+  8D9C              ;	24/7/22
251+  8D9C              ;
252+  8D9C              ;	Ciclo_completo.
253+  8D9C              ;
254+  8D9C              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
255+  8D9C              ;
256+  8D9C              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
257+  8D9C              ; 	Decrementamos (Columns).
258+  8D9C              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
259+  8D9C              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
260+  8D9C
261+  8D9C
262+  8D9C 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
263+  8D9F FE FF        	cp $ff
264+  8DA1 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
265+  8DA3 18 22        	jr 3f
266+  8DA5 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
267+  8DA8 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
268+  8DA9 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
269+  8DAA 32 D8 84     	ld (CTRL_DESPLZ),a
270+  8DAD 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
271+  8DB0 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
272+  8DB2 20 07        	jr nz,2F
273+  8DB4 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
274+  8DB7 23           	inc hl
275+  8DB8 22 D4 84     	ld (Posicion_actual),hl
276+  8DBB 2A DA 84     2 ld hl,(Indice_Sprite)
277+  8DBE 22 DC 84     	ld (Puntero_DESPLZ),hl
278+  8DC1 21 00 00     	ld hl,0
279+  8DC4 22 04 85     	ld (Caja_de_DESPLZ),hl
280+  8DC7              ;	call Genera_coordenadas
281+  8DC7 C9           3 ret
282+  8DC8
283+  8DC8              ; ******************************************************************************************************************************************************************************************
284+  8DC8              ;
285+  8DC8              ;	19/10/22
286+  8DC8              ;
287+  8DC8              ;	Mov_left.
288+  8DC8              ;
289+  8DC8              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
290+  8DC8              ;
291+  8DC8              Mov_left
292+  8DC8
293+  8DC8 21 F5 84     	ld hl,Ctrl_0
294+  8DCB CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
295+  8DCD              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
296+  8DCD              ; 																	; _ en el caso de que no lo haya.
297+  8DCD 3A D8 84     	ld a,(CTRL_DESPLZ)
298+  8DD0 A7           	and a
299+  8DD1 20 19        	jr nz,10F
300+  8DD3
301+  8DD3 2A D6 84     	ld hl,(Puntero_objeto)
302+  8DD6 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
303+  8DD9
304+  8DD9 3A F5 84     	ld a,(Ctrl_0)
305+  8DDC CB 77        	bit 6,a
306+  8DDE 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
307+  8DE0
308+  8DE0 CD 25 8F     	call Stop_Amadeus_left
309+  8DE3 20 5F        	jr nz,3F
310+  8DE5
311+  8DE5 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
312+  8DE8 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
313+  8DEB C9           	ret
314+  8DEC
315+  8DEC 3A F5 84     10 ld a,(Ctrl_0)
316+  8DEF CB 7F        	bit 7,a
317+  8DF1 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
318+  8DF3 21 D8 84     	ld hl,CTRL_DESPLZ
319+  8DF6 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
320+  8DF7
321+  8DF7 3A E1 84     11 ld a,(Coordenada_X)
322+  8DFA A7           	and a
323+  8DFB 20 47        	jr nz,3F
324+  8DFD 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
325+  8E00 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
326+  8E01 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
327+  8E03
328+  8E03              ; ---------- ---------- ----------
329+  8E03
330+  8E03 3A E3 84     	ld a,(Vel_left)
331+  8E06 FE 02        	cp 2
332+  8E08 28 0F        	jr z,1F
333+  8E0A 38 04        	jr c,6F
334+  8E0C FE 04        	cp 4
335+  8E0E 28 12        	jr z,7F
336+  8E10
337+  8E10              ; ---------- ---------- ----------
338+  8E10
339+  8E10 3A D8 84     6 ld a,(CTRL_DESPLZ)
340+  8E13 FE F9        	cp $f9
341+  8E15 20 2D        	jr nz,3F
342+  8E17 18 10        	jr 4F
343+  8E19 3A D8 84     1 ld a,(CTRL_DESPLZ)
344+  8E1C FE FA        	cp $fa
345+  8E1E 20 24        	jr nz,3F
346+  8E20 18 07        	jr 4F
347+  8E22 3A D8 84     7 ld a,(CTRL_DESPLZ)
348+  8E25 FE FC        	cp $fc
349+  8E27 20 1B        	jr nz,3F
350+  8E29
351+  8E29              ; ---------- ---------- ----------
352+  8E29
353+  8E29 CD 3C 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
354+  8E2C              ;	call Reinicio
355+  8E2C
356+  8E2C              ; ---------- ---------- ----------
357+  8E2C
358+  8E2C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
359+  8E2E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
360+  8E2F 2A D6 84     	ld hl,(Puntero_objeto)
361+  8E32 22 DC 84     	ld (Puntero_DESPLZ),hl
362+  8E35 CD 6B 8E     	call DESPLZ_IZQ
363+  8E38 C1           	pop bc
364+  8E39 10 F3        	djnz 5B
365+  8E3B 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
366+  8E3E 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
367+  8E3F 22 D4 84     	ld (Posicion_actual),hl
368+  8E42 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
369+  8E44
370+  8E44              ; ---------- ---------- ----------
371+  8E44
372+  8E44 3A E3 84     3 ld a,(Vel_left)
373+  8E47 FE 08        	cp 8
374+  8E49 20 16        	jr nz,8F
375+  8E4B 2A D4 84     	ld hl,(Posicion_actual)
376+  8E4E 7D           	ld a,l
377+  8E4F E6 1F        	and $1f
378+  8E51 20 05        	jr nz,9F
379+  8E53
380+  8E53              ; ---------- ---------- ----------
381+  8E53
382+  8E53 CD 3C 8F     	call Reaparece_derecha
383+  8E56
384+  8E56              ; ---------- ---------- ----------
385+  8E56
386+  8E56 18 0F        	jr 2F
387+  8E58 2A D4 84     9 ld hl,(Posicion_actual)
388+  8E5B 2B           	dec hl
389+  8E5C 22 D4 84     	ld (Posicion_actual),hl
390+  8E5F 18 06        	jr 2F
391+  8E61 2A D4 84     8 ld hl,(Posicion_actual)
392+  8E64 CD 6B 8E     	call DESPLZ_IZQ
393+  8E67 CD 89 8F     2 call Genera_coordenadas
394+  8E6A C9           	ret
395+  8E6B
396+  8E6B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
397+  8E6B              ;
398+  8E6B              ;	22/9/22
399+  8E6B
400+  8E6B CD 7A 8E     DESPLZ_IZQ call Desplaza_izquierda
401+  8E6E CD 8F 8E         call modifica_parametros_1er_DESPLZ
402+  8E71 CD B0 8E     	call Ciclo_completo_2
403+  8E74 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
404+  8E77 CB BE        	res 7,(hl)
405+  8E79 C9           	ret
406+  8E7A
407+  8E7A 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
408+  8E7D 47           	ld b,a
409+  8E7E 2A DC 84     	ld hl,(Puntero_DESPLZ)
410+  8E81 2B           1 dec hl
411+  8E82 2B           	dec hl
412+  8E83 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
413+  8E85 22 DC 84     	ld (Puntero_DESPLZ),hl
414+  8E88 CD 2E 86     	call Extrae_address
415+  8E8B 22 04 85     	ld (Caja_de_DESPLZ),hl
416+  8E8E C9           	ret
417+  8E8F
418+  8E8F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
419+  8E8F              ;
420+  8E8F              ;	modifica_parametros_1er_DESPLZ
421+  8E8F              ;
422+  8E8F              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
423+  8E8F              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
424+  8E8F              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
425+  8E8F
426+  8E8F 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
427+  8E92 A7           	and a
428+  8E93 20 17        	jr nz,1F
429+  8E95 21 D3 84     	ld hl,Columns
430+  8E98 34           	inc (hl)
431+  8E99 3A E0 84     	ld a,(Cuad_objeto)
432+  8E9C E6 01        	and 1
433+  8E9E 20 0C        	jr nz,1F
434+  8EA0 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
435+  8EA3 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
436+  8EA4 22 D4 84     	ld (Posicion_actual),hl
437+  8EA7 CD 0E 8F     	call Dec_CTRL_DESPLZ
438+  8EAA 18 03        	jr 2F
439+  8EAC CD 0E 8F     1 call Dec_CTRL_DESPLZ
440+  8EAF C9           2 ret
441+  8EB0
442+  8EB0              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
443+  8EB0              ;
444+  8EB0 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
445+  8EB3 FE F8        	cp $f8
446+  8EB5 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
447+  8EB7 18 19        	jr 3f
448+  8EB9 21 D3 84     1 ld hl,Columns
449+  8EBC 35           	dec (hl)
450+  8EBD AF           	xor a
451+  8EBE 32 D8 84     	ld (CTRL_DESPLZ),a
452+  8EC1 3A E0 84     	ld a,(Cuad_objeto)
453+  8EC4 E6 01        	and 1
454+  8EC6 28 07        	jr z,2F
455+  8EC8 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
456+  8ECB 2B           	dec hl
457+  8ECC 22 D4 84     	ld (Posicion_actual),hl
458+  8ECF CD 89 8F     2 call Genera_coordenadas
459+  8ED2 C9           3 ret
460+  8ED3
461+  8ED3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
462+  8ED3
463+  8ED3 CD BF 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
464+  8ED6              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
465+  8ED6              ;																	; Filas * Columnas en DE´.
466+  8ED6 3A E0 84     	ld a,(Cuad_objeto)
467+  8ED9 FE 02        	cp 2
468+  8EDB 38 1A        	jr c,2F
469+  8EDD 28 18        	jr z,2F
470+  8EDF E6 01        	and 1
471+  8EE1 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
472+  8EE3              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
473+  8EE3              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
474+  8EE3 C5           	push bc
475+  8EE4 E5           	push hl
476+  8EE5 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
477+  8EE7 0D           	dec c
478+  8EE8 2A FE 84     	ld hl,(Puntero_datas)
479+  8EEB A7           	and a
480+  8EEC ED 4A        	adc hl,bc
481+  8EEE 22 FE 84     	ld (Puntero_datas),hl
482+  8EF1 E1           	pop hl
483+  8EF2 C1           	pop bc
484+  8EF3 18 18        	jr 4F
485+  8EF5              1
486+  8EF5              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
487+  8EF5 18 16        	jr 4F
488+  8EF7 E6 01        2 and 1
489+  8EF9 28 02        	jr z,3F
490+  8EFB              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
491+  8EFB 18 10        	jr 4F
492+  8EFD              3
493+  8EFD              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
494+  8EFD C5           	push bc
495+  8EFE E5           	push hl
496+  8EFF 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
497+  8F01 0D           	dec c
498+  8F02 2A FE 84     	ld hl,(Puntero_datas)
499+  8F05 A7           	and a
500+  8F06 ED 42        	sbc hl,bc
501+  8F08 22 FE 84     	ld (Puntero_datas),hl
502+  8F0B E1           	pop hl
503+  8F0C C1           	pop bc
504+  8F0D C9           4 ret
505+  8F0E
506+  8F0E              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F0E              ;
508+  8F0E              ;	Dec_CTRL_DESPLZ
509+  8F0E              ;
510+  8F0E              ;	Subrutina de [modifica_punteros].
511+  8F0E              ;
512+  8F0E              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
513+  8F0E
514+  8F0E 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
515+  8F11 3A E3 84     	ld a,(Vel_left)
516+  8F14 A7           	and a
517+  8F15 28 06        	jr z,1F
518+  8F17 47           	ld b,a
519+  8F18 35           3 dec (hl)
520+  8F19 10 FD        	djnz 3B
521+  8F1B 18 01        	jr 2F
522+  8F1D 35           1 dec (hl)
523+  8F1E C9           2 ret
524+  8F1F
525+  8F1F              ; ---------- ---------- ---------- ---------- ---------- ----------
526+  8F1F              ;
527+  8F1F              ;	19/10/22
528+  8F1F              ;
529+  8F1F              ;	(cp 29) para un Amadeus de 3 Columns.
530+  8F1F              ;	(cp 30)   ""  ""    ""     2 Columns.
531+  8F1F
532+  8F1F 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
533+  8F22 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
534+  8F24 C9           	ret
535+  8F25
536+  8F25              ; ---------- ---------- ---------- ---------- ---------- ----------
537+  8F25              ;
538+  8F25              ;	19/10/22
539+  8F25              ;
540+  8F25              ;	(cp 2) para un Amadeus de 3 Columns.
541+  8F25              ;	(cp 1)   ""  ""    ""     2 Columns.
542+  8F25
543+  8F25 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
544+  8F28 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
545+  8F2A C9           	ret
546+  8F2B
547+  8F2B              ; ---------- ---------- ---------- ---------- ---------- ----------
548+  8F2B              ;
549+  8F2B              ;	24/7/22
550+  8F2B              ;
551+  8F2B              ;	Inc_CTRL_DESPLZ
552+  8F2B              ;
553+  8F2B              ;	Subrutina de [modifica_punteros].
554+  8F2B              ;
555+  8F2B              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
556+  8F2B
557+  8F2B 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
558+  8F2E 3A E4 84     	ld a,(Vel_right)
559+  8F31 A7           	and a
560+  8F32 28 06        	jr z,1F
561+  8F34 47           	ld b,a
562+  8F35 34           3 inc (hl)
563+  8F36 10 FD        	djnz 3B
564+  8F38 18 01        	jr 2F
565+  8F3A 34           1 inc (hl)
566+  8F3B C9           2 ret
567+  8F3C
568+  8F3C              ; ---------- ---------- ---------- ---------- ---------- ----------
569+  8F3C
570+  8F3C 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
571+  8F3F 01 1F 00     	ld bc,31
572+  8F42 A7           	and a
573+  8F43 ED 4A        	adc hl,bc
574+  8F45 22 D4 84     	ld (Posicion_actual),hl
575+  8F48 21 F5 84     	ld hl,Ctrl_0														; $xxx1
576+  8F4B CB C6        	set 0,(hl)
577+  8F4D C9           	ret
578+  8F4E
579+  8F4E              ; ---------- ---------- ---------- ---------- ---------- ----------
580+  8F4E
581+  8F4E 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
582+  8F51 01 1F 00     	ld bc,31
583+  8F54 A7           	and a
584+  8F55 ED 42        	sbc hl,bc
585+  8F57 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
586+  8F5A 21 F5 84     	ld hl,Ctrl_0
587+  8F5D CB CE        	set 1,(hl)
588+  8F5F C9           	ret
589+  8F60
590+  8F60              ; ---------- ---------- ---------- ---------- ---------- ----------
591+  8F60
592+  8F60 24           Reaparece_abajo inc h
593+  8F61 01 E0 17     	ld bc,$17e0
594+  8F64 A7           	and a
595+  8F65 ED 4A        	adc hl,bc
596+  8F67 22 D4 84     	ld (Posicion_actual),hl
597+  8F6A 21 F5 84     	ld hl,Ctrl_0
598+  8F6D CB D6        	set 2,(hl)
599+  8F6F C9           	ret
600+  8F70
601+  8F70              ; ---------- ---------- ---------- ---------- ---------- ----------
602+  8F70
603+  8F70 01 E0 17     Reaparece_arriba ld bc,$17e0
604+  8F73 A7           	and a
605+  8F74 ED 42        	sbc hl,bc
606+  8F76 22 D4 84     	ld (Posicion_actual),hl
607+  8F79 21 F5 84     	ld hl,Ctrl_0
608+  8F7C CB DE        	set 3,(hl)
609+  8F7E C9           	ret
610+  8F7F
611+  8F7F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
612+  8F7F
613+  8F7F 2A DE 84     Reinicio ld hl,(Posicion_inicio)
614+  8F82
615+  8F82              ;	ld (Posicion_actual),hl
616+  8F82 21 00 00     	ld hl,0
617+  8F85 22 D4 84     	ld (Posicion_actual),hl
618+  8F88
619+  8F88
620+  8F88 C9           	ret
# file closed: Direcciones.asm
603   8F89              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F89              ;	12/12/22
  2+  8F89              ;
  3+  8F89              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F89              ;	Fila superior "0", Columna izquierda "0".
  5+  8F89              ;
  6+  8F89              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F89              ;
  8+  8F89              ;	Modifica: A
  9+  8F89
 10+  8F89 C5           Genera_coordenadas push bc
 11+  8F8A E5           	push hl
 12+  8F8B 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F8E 7D           	ld a,l
 14+  8F8F E6 1F        	and $1f
 15+  8F91 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F94 CD 14 8C     	call calcula_tercio
 17+  8F97 47           	ld b,a
 18+  8F98 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F99 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F9B 7D           	ld a,l
 21+  8F9C E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F9E 28 05        	jr z,2F
 23+  8FA0 0C           1 inc c
 24+  8FA1 D6 20        	sub 32
 25+  8FA3 20 FB        	jr nz,1B
 26+  8FA5 0C           2 inc c
 27+  8FA6 04           	inc b
 28+  8FA7 05           	dec b
 29+  8FA8 28 04        	jr z,3F
 30+  8FAA 3E E0        	ld a,$e0
 31+  8FAC 10 F2        	djnz 1B
 32+  8FAE 79           3 ld a,c
 33+  8FAF 3D           	dec a
 34+  8FB0 32 E2 84     	ld (Coordenada_y),a
 35+  8FB3 E1           	pop hl
 36+  8FB4 C1           	pop bc
 37+  8FB5 C9           	ret
# file closed: Genera_coordenadas.asm
604   8FB6              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FB6
  2+  8FB6
  3+  8FB6              ;   11/8/22
  4+  8FB6              ;
  5+  8FB6              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FB6              ;
  7+  8FB6              ;   Mov_obj.asm
  8+  8FB6              ;
  9+  8FB6              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FB6              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FB6              ;
 12+  8FB6              ;   Codificación:
 13+  8FB6              ;
 14+  8FB6              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FB6              ;
 16+  8FB6
 17+  8FB6 02 10 00     Izquierda db 2,%00010000,0
 18+  8FB9 02 20 00     Derecha db 2,%00100000,0
 19+  8FBC 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FC0 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FC4 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FC8 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FCC 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FD0 60 42 60 40
 23+  8FD4 63
 24+  8FD5 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FD9 22 A3 80 A0
 25+  8FDD 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FE1 84 A0 83 A0
 26+  8FE5 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FE9 80 A3 22 A0
 27+  8FED 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FF1 40 60 42 60
 28+  8FF5 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FF9
 30+  8FF9 B9 8F        Indice_mov_Badsat defw Derecha
 31+  8FFB C0 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FFD C8 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FFF BC 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  9001
 35+  9001 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  9004 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  9005 28 02            jr z,1F
 38+  9007 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  9009
 40+  9009 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  900C C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  900E 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  9011              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  9011 2A F9 84         ld hl,(Puntero_mov)
 45+  9014 7E               ld a,(hl)
 46+  9015 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  9018 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  9019 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  901C
 50+  901C 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  901F A7               and a
 52+  9020 20 0C            jr nz,12F
 53+  9022 2A F9 84         ld hl,(Puntero_mov)
 54+  9025 7E               ld a,(hl)
 55+  9026 A7               and a
 56+  9027 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  9029
 58+  9029 E6 0F            and $0f
 59+  902B 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  902E              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  902E 2A F9 84     12 ld hl,(Puntero_mov)
 62+  9031 CB 7E            bit 7,(hl)
 63+  9033 28 03            jr z,2F
 64+  9035 CD 60 8C         call Mov_down
 65+  9038 2A F9 84     2 ld hl, (Puntero_mov)
 66+  903B CB 76            bit 6,(hl)
 67+  903D 28 03            jr z,3F
 68+  903F CD 8E 8C         call Mov_up
 69+  9042 2A F9 84     3 ld hl, (Puntero_mov)
 70+  9045 CB 6E            bit 5,(hl)
 71+  9047 28 03            jr z,4F
 72+  9049 CD BC 8C         call Mov_right
 73+  904C 2A F9 84     4 ld hl, (Puntero_mov)
 74+  904F CB 66            bit 4,(hl)
 75+  9051 28 03            jr z,5F
 76+  9053 CD C8 8D         call Mov_left
 77+  9056
 78+  9056              ; ---------- --------- --------- ---------- ----------
 79+  9056
 80+  9056 3A FD 84     5 ld a,(Repetimos_db)
 81+  9059 A7               and a
 82+  905A 28 07            jr z,6F
 83+  905C 3D               dec a
 84+  905D 32 FD 84         ld (Repetimos_db),a
 85+  9060 28 01            jr z,6f
 86+  9062 C9           11 ret
 87+  9063 21 FB 84     6 ld hl,Contador_db_mov
 88+  9066 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9067 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  906A 23               inc hl
 91+  906B 22 F9 84         ld (Puntero_mov),hl
 92+  906E 18 F2            jr 11B
 93+  9070 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9073 3A FC 84         ld a,(Incrementa_puntero)
 95+  9076 47               ld b,a
 96+  9077 23           8 inc hl
 97+  9078 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  907A 5E               ld e,(hl)
 99+  907B 23               inc hl
100+  907C 56               ld d,(hl)
101+  907D EB               ex de,hl
102+  907E 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  9081 18 DF            jr 11B
104+  9083
105+  9083              ; ---------- --------- --------- ---------- ----------
106+  9083              ;
107+  9083              ;   11/8/22
108+  9083              ;
109+  9083              ;   Prepara_Puntero_mov
110+  9083
111+  9083 E5           Prepara_Puntero_mov push hl
112+  9084 D5               push de
113+  9085 2A F7 84         ld hl,(Puntero_indice_mov)
114+  9088 5E               ld e,(hl)
115+  9089 23               inc hl
116+  908A 56               ld d,(hl)
117+  908B EB               ex de,hl
118+  908C 22 F9 84         ld (Puntero_mov),hl
119+  908F D1               pop de
120+  9090 E1               pop hl
121+  9091 C9               ret
122+  9092
123+  9092              ; ---------- --------- --------- ---------- ----------
124+  9092              ;
125+  9092              ;   11/8/22
126+  9092              ;
127+  9092              ;   Reinicia_el_movimiento
128+  9092
129+  9092 CD 83 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  9095 AF               xor a
131+  9096 32 FB 84         ld (Contador_db_mov),a
132+  9099 32 FC 84         ld (Incrementa_puntero),a
133+  909C C3 01 90         jp Movimiento
134+  909F
135+  909F              ; ---------- --------- --------- ---------- ----------
136+  909F
137+  909F
138+  909F
139+  909F
140+  909F
141+  909F
142+  909F
143+  909F
144+  909F
145+  909F
146+  909F
147+  909F
148+  909F
149+  909F
150+  909F
151+  909F
152+  909F
153+  909F
# file closed: Patrones_de_mov.asm
605   909F              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  909F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  909F              ;
  3+  909F              ;	3/1/23
  4+  909F              ;
  5+  909F              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  909F
  7+  909F              ;	ADC HL,SP	LD (addr),SP
  8+  909F              ;	ADD HL,SP	LD SP,(addr)
  9+  909F              ;	ADD IX,SP	LD SP,nn
 10+  909F              ; 	ADD IY,SP	LD SP,HL
 11+  909F              ;				LD SP,IX
 12+  909F              ;	DEC SP		LD SP,IY
 13+  909F
 14+  909F              ;	EX (SP),HL
 15+  909F              ;	EX (SP),IX
 16+  909F              ;	EX (SP),IY
 17+  909F
 18+  909F              ;	INC SP
 19+  909F
 20+  909F
 21+  909F                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
606   7FC0
607   7FC0              	SAVESNA "Pruebas.sna", START
608   7FC0
609   7FC0
610   7FC0
# file closed: Banco_de_pruebas.asm
