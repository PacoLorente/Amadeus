# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 53 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 02 84        	defw Entidad_1
  9+  83C2 36 84        	defw Entidad_2
 10+  83C4 6A 84        	defw Entidad_3
 11+  83C6 9E 84        	defw Entidad_4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 23+  83D0 00 00        	defw 0 											; (Posicion_actual).
 24+  83D2 00 00        	defw 0 											; (Puntero_objeto).
 25+  83D4 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 26+  83D7
 27+  83D7 05           	db %00000101									; (Attr).
 28+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 29+  83DA 00 00        	defw 0	 										; (Puntero_DESPLZ).
 30+  83DC CF 50        	defw $50cf										; (Posicion_inicio).
 31+  83DE 00           	db 0 											; (Cuad_objeto).
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 34+  83E3
 35+  83E3 00 00        	db 0,0											; Variables_de_borrado
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00        	defw 0											;	" " " " " " "
 38+  83E9 00 00 00     	db 0,0,0										;	" " " " " " "
 39+  83EC
 40+  83EC 00 00        	db 0,0											; Variables_de_pintado
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00        	defw 0											;	" " " " " " "
 43+  83F2 00 00 00     	db 0,0,0										;	" " " " " " "
 44+  83F5
 45+  83F5 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 46+  83F7
 47+  83F7 00 00 00 00  	defw 0,0 										; (Puntero_indice_mov) / (Puntero_mov).
 48+  83FB 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 49+  83FE
 50+  83FE 00           	db 0 											; (Columnas).
 51+  83FF 00 00        	defw 0											; (Limite_horizontal).
 52+  8401 00           	db 0											; (Limite_vertical).
 53+  8402
 54+  8402              ; ---------- ---------- ---------- ---------- ----------
 55+  8402
 56+  8402 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 57+  8404 00 00        	defw 0											; (Posicion_actual).
 58+  8406 00 00        	defw 0 											; (Puntero_objeto).
 59+  8408 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 60+  840B
 61+  840B 00           	db %00000000 									; (Attr).
 62+  840C 00 00        	defw 0											; (Indice_Sprite).
 63+  840E 00 00        	defw 0											; (Puntero_DESPLZ).
 64+  8410 00 00        	defw 0											; (Posicion_inicio).
 65+  8412 00           	db 0											; (Cuad_objeto).
 66+  8413
 67+  8413 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 68+  8417
 69+  8417 00 00        	db 0,0										    ; Variables_de_borrado
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00        	defw 0											;	" " " " " " "
 72+  841D 00 00 00     	db 0,0,0										;	" " " " " " "
 73+  8420
 74+  8420 00 00        	db 0,0											; Variables_de_pintado
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00        	defw 0											;	" " " " " " "
 77+  8426 00 00 00     	db 0,0,0										;	" " " " " " "
 78+  8429
 79+  8429 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 80+  842B
 81+  842B 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 82+  842F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 83+  8432
 84+  8432 00           	db 0 											; (Columnas).
 85+  8433 00 00        	defw 0											; (Limite_horizontal).
 86+  8435 00           	db 0											; (Limite_vertical).
 87+  8436
 88+  8436              ; ---------- ---------- ---------- ---------- ----------
 89+  8436
 90+  8436 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 91+  8438 00 00        	defw 0                                          ; (Posicion_actual).
 92+  843A 00 00        	defw 0											; (Puntero_objeto).
 93+  843C 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 94+  843F
 95+  843F 02           	db %00000010									; (Attr).
 96+  8440 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 97+  8442 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 98+  8444 7E 47        	defw $477e                                      ; (Posicion_inicio).
 99+  8446 02           	db 2											; (Cuad_objeto).
100+  8447
101+  8447 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
102+  844B
103+  844B 00 00        	db 0,0											; Variables_de_borrado
104+  844D 00 00        	defw 0										 	;	" " " " " " "
105+  844F 00 00        	defw 0											;	" " " " " " "
106+  8451 00 00 00     	db 0,0,0										;	" " " " " " "
107+  8454
108+  8454 00 00        	db 0,0											; Variables_de_pintado
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00        	defw 0											;	" " " " " " "
111+  845A 00 00 00     	db 0,0,0										;	" " " " " " "
112+  845D
113+  845D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
114+  845F
115+  845F B7 8F 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
116+  8463 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
117+  8466
118+  8466 00           	db 0 											; (Columnas).
119+  8467 00 00        	defw 0											; (Limite_horizontal).
120+  8469 00           	db 0											; (Limite_vertical).
121+  846A
122+  846A              ; ---------- ---------- ---------- ---------- ----------
123+  846A
124+  846A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
125+  846C 00 00        	defw 0                                          ; (Posicion_actual).
126+  846E 00 00        	defw 0											; (Puntero_objeto).
127+  8470 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
128+  8473
129+  8473 04           	db %00000100									; (Attr).
130+  8474 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
131+  8476 00 00        	defw 0                                          ; (Puntero_DESPLZ).
132+  8478 A1 47        	defw $47a1                                      ; (Posicion_inicio).
133+  847A 01           	db 1											; (Cuad_objeto).
134+  847B
135+  847B 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
136+  847F
137+  847F 00 00        	db 0,0											; Variables_de_borrado
138+  8481 00 00        	defw 0										 	;	" " " " " " "
139+  8483 00 00        	defw 0											;	" " " " " " "
140+  8485 00 00 00     	db 0,0,0										;	" " " " " " "
141+  8488
142+  8488 00 00        	db 0,0											; Variables_de_pintado
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00        	defw 0											;	" " " " " " "
145+  848E 00 00 00     	db 0,0,0										;	" " " " " " "
146+  8491
147+  8491 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
148+  8493
149+  8493 B9 8F 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
150+  8497 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
151+  849A
152+  849A 00           	db 0 											; (Columnas).
153+  849B 00 00        	defw 0											; (Limite_horizontal).
154+  849D 00           	db 0											; (Limite_vertical).
155+  849E
156+  849E              ; ---------- ---------- ---------- ---------- ----------
157+  849E
158+  849E 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
159+  84A0 00 00        	defw 0                                          ; (Posicion_actual).
160+  84A2 00 00        	defw 0 											; (Puntero_objeto).
161+  84A4 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
162+  84A7
163+  84A7 01           	db %00000001									; (Attr).
164+  84A8 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
165+  84AA 00 00        	defw 0                                          ; (Puntero_DESPLZ).
166+  84AC BE 47        	defw $47be                                      ; (Posicion_inicio).
167+  84AE 00           	db 0											; (Cuad_objeto).
168+  84AF
169+  84AF 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
170+  84B3
171+  84B3 00 00        	db 0,0											; Variables_de_borrado
172+  84B5 00 00        	defw 0										 	;	" " " " " " "
173+  84B7 00 00        	defw 0											;	" " " " " " "
174+  84B9 00 00 00     	db 0,0,0										;	" " " " " " "
175+  84BC
176+  84BC 00 00        	db 0,0											; Variables_de_pintado
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00        	defw 0											;	" " " " " " "
179+  84C2 00 00 00     	db 0,0,0										;	" " " " " " "
180+  84C5
181+  84C5 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
182+  84C7
183+  84C7 A9 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
184+  84CB 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
185+  84CE
186+  84CE 00           	db 0 											; (Columnas).
187+  84CF 00 00        	defw 0											; (Limite_horizontal).
188+  84D1 00           	db 0											; (Limite_vertical).
189+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D2
 51   84D2 02           Filas db 2												; Filas. [DRAW]
 52   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D4 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D9 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84DA 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84DB
 62   84DB              ; ---------- ---------- ----------
 63   84DB
 64   84DB
 65   84DB 04           Attr db %00000100										; Atributos de la entidad:
 66   84DC
 67   84DC              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DC              ;
 69   84DC              ;	COLORES: 0 ..... NEGRO
 70   84DC              ;    		 1 ..... AZUL
 71   84DC              ; 			 2 ..... ROJO
 72   84DC              ;			 3 ..... MAGENTA
 73   84DC              ; 			 4 ..... VERDE
 74   84DC              ; 			 5 ..... CIAN
 75   84DC              ;			 6 ..... AMARILLO
 76   84DC              ; 			 7 ..... BLANCO
 77   84DC
 78   84DC 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DE 00 00        Puntero_DESPLZ defw 0
 80   84E0 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E2 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E3
 83   84E3              ; Variables de objeto. (Características).
 84   84E3
 85   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E6 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E7
 90   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84EB 00 00        	defw 0
 93   84ED 00 00 00     	db 0,0,0
 94   84F0
 95   84F0 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F2 00 00        	defw 0
 97   84F4 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F6 00 00 00     	db 0,0,0
 99   84F9
100   84F9              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F9
102   84F9 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84FA              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84FA              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84FA              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84FA              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84FA              ;
108   84FA              ; 														DESCRIPCIÖN:
109   84FA              ;
110   84FA              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84FA              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84FA              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84FA              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84FA              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84FA              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84FA              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84FA              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84FA              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84FA              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84FA              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84FA              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84FA              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84FA              ;
124   84FA              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84FA              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84FA              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84FA
128   84FA 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84FB
130   84FB              ; Movimiento.
131   84FB
132   84FB AB 8F        Puntero_indice_mov defw Indice_mov_Derecha
133   84FD 00 00        Puntero_mov defw 0
134   84FF 00           Contador_db_mov db 0
135   8500 00           Incrementa_puntero db 0
136   8501 00           Repetimos_db db 0
137   8502
138   8502
139   8502              ; Variables de funcionamiento. [DRAW].
140   8502
141   8502 00           Columnas db 0
142   8503 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8505              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8505 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8506
146   8506              ; 52 Bytes por entidad.
147   8506              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8506              ;					         		---------;      ;---------
149   8506
150   8506
151   8506              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8506              ; Gestión de ENTIDADES.
153   8506
154   8506 00 00        Puntero_store_entidades defw 0
155   8508 00 00        Puntero_restore_entidades defw 0
156   850A 00 00        Indice_restore defw 0
157   850C 05           Numero_de_entidades db 5								; Nº de objetos en pantalla, (contando con Amadeus).
158   850D 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850E              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850E              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850E              ;														; _ (Numero_de_malotes)="0".
162   850E 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8510              ;														; _variable para almacenar lo posición del puntero_
164   8510              ; 														; _de pila, SP.
165   8510 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8512              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8512 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8514              ;														; _el snapshot de los registros de la siguiente entidad.
169   8514              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8514
171   8514              ; Gestión de FRAMES.
172   8514
173   8514 00           Switch db 0
174   8515
175   8515              ; Variables de Raster y localización en pantalla.
176   8515
177   8515 00 FF        Temp_Raster defw $ff00
178   8517
179   8517              ; Rutina principal *************************************************************************************************************************************************************************
180   8517              ;
181   8517              ;	14/11/22
182   8517
183   8517 31 FF FF     START ld sp,$ffff
184   851A
185   851A 3E A0        	ld a,$a0
186   851C ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851E ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8520 F3           	DI
189   8521
190   8521 3E 01        	ld a,1
191   8523 D3 FE        	out ($fe),a
192   8525
193   8525 3E 07        	ld a,%00000111
194   8527 CD 5B 8C     	call Cls
195   852A
196   852A              ;	call Pinta_FILAS
197   852A
198   852A CD 8D 86     	call Pulsa_ENTER
199   852D
200   852D              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852D              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852D              ;	Pintamos el resto de entidades:
203   852D
204   852D CD 00 86     	call Inicia_punteros_de_entidades
205   8530 21 0C 85     	ld hl,Numero_de_entidades
206   8533 46           	ld b,(hl)
207   8534
208   8534 C5           1 push bc  												; Guardo el contador de entidades.
209   8535 CD 2F 86      	call Inicia_Puntero_objeto
210   8538 CD E4 86     	call Draw
211   853B CD A0 7F     	call Guarda_foto_registros
212   853E CD 4C 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8541 C1           	pop bc
214   8542 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8544
216   8544              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8544
218   8544 CD 00 86     	call Inicia_punteros_de_entidades
219   8547 CD 7B 86     	call Restore_Primera_entidad
220   854A
221   854A 3A 0C 85     	ld a,(Numero_de_entidades)
222   854D 32 0D 85     	ld (Numero_de_malotes),a
223   8550
224   8550 FB           2 ei
225   8551 18 FD        	jr 2B
226   8553
227   8553              ; -----------------------------------------------------------------------------------
228   8553
229   8553              Frame
230   8553
231   8553              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8553              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8553
234   8553 3E 07            ld a,7
235   8555 D3 FE            out ($fe),a
236   8557
237   8557 CD E8 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855A
239   855A 3E 01            ld a,1
240   855C D3 FE            out ($fe),a
241   855E
242   855E              ; ----------------------------------------------------------------------
243   855E
244   855E 21 00 70     	ld hl,Album_de_fotos
245   8561 22 12 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8564              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8564 3A 0C 85         ld a,(Numero_de_entidades)
248   8567 47               ld b,a
249   8568
250   8568 C5           2 push bc
251   8569
252   8569 CD 8F 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   856C
254   856C 3A F9 84      	ld a,(Ctrl_0)
255   856F CB 67        	bit 4,a
256   8571 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   8573
258   8573 CD C7 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8576
260   8576 21 F9 84     	ld hl,Ctrl_0
261   8579 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
262   857B
263   857B CD 4C 86     1 call Store_Restore_entidades
264   857E
265   857E C1           	pop bc
266   857F 10 E7        	djnz 2B
267   8581
268   8581 CD 00 86     	call Inicia_punteros_de_entidades
269   8584 CD 7B 86     	call Restore_Primera_entidad
270   8587 CD 16 86     	call Calcula_numero_de_malotes
271   858A
272   858A 3E 00        	ld a,0
273   858C D3 FE        	out ($fe),a
274   858E
275   858E C9           	ret
276   858F
277   858F              ; --------------------------------------------------------------------------------------------------------------
278   858F              ;
279   858F              Mov_obj
280   858F
281   858F              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
282   858F
283   858F AF           	xor a
284   8590 32 FA 84     	ld (Obj_dibujado),a
285   8593 CD D1 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
286   8596              ;														; Obj_dibujado="0".
287   8596              ; Movemos Amadeus o enemigos...
288   8596
289   8596 3A F9 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   8599 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   859B C4 A1 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   859E
293   859E 3A F9 84     	ld a,(Ctrl_0)
294   85A1 CB 77        	bit 6,a
295   85A3 CC BB 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A6
297   85A6 3A F9 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85A9 CB 67        	bit 4,a
299   85AB C8           	ret z
300   85AC
301   85AC              ; ---------
302   85AC
303   85AC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
304   85AE 32 FA 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
305   85B1 CD D1 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
306   85B4
307   85B4 CD E8 85         call Repone_borrar
308   85B7
309   85B7              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
310   85B7
311   85B7 CD BE 89     	call Prepara_draw
312   85BA CD F8 88     	call calcula_CColumnass
313   85BD CD 2F 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
314   85C0 CD 84 89     	call Define_rutina_de_impresion
315   85C3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
316   85C6
317   85C6 C9           	ret
318   85C7
319   85C7              ; --------------------------------------------------------------------------------------------------------------
320   85C7              ;
321   85C7 CD F4 85     Borra_Pinta_obj call Repone_pintar
322   85CA CD E4 86     	call Draw
323   85CD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
324   85D0 C9           	ret
325   85D1
326   85D1              ; --------------------------------------------------------------------------------------------------------------
327   85D1
328   85D1 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85D4 3A FA 84     	ld a,(Obj_dibujado)
330   85D7 A7           	and a
331   85D8 28 05        	jr z,1F
332   85DA 11 F0 84     	ld de,Variables_de_pintado
333   85DD 18 03        	jr 2F
334   85DF 11 E7 84     1 ld de,Variables_de_borrado
335   85E2 01 09 00     2 ld bc,9
336   85E5 ED B0        	ldir
337   85E7 C9           	ret
338   85E8
339   85E8 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
340   85EB 11 D2 84     	ld de,Filas
341   85EE 01 09 00     	ld bc,9
342   85F1 ED B0        	ldir
343   85F3 C9           	ret
344   85F4
345   85F4 21 F0 84     Repone_pintar ld hl,Variables_de_pintado
346   85F7 11 D2 84     	ld de,Filas
347   85FA 01 09 00     	ld bc,9
348   85FD ED B0        	ldir
349   85FF C9           	ret
350   8600
351   8600              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   8600              ;	ld (Caja_de_BORRADO),hl
353   8600              ;	ret
354   8600
355   8600              ; *************************************************************************************************************************************************************
356   8600              ;
357   8600              ; 8/1/23
358   8600              ;
359   8600              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
360   8600              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
361   8600              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
362   8600
363   8600              ; Destruye HL y DE !!!!!
364   8600
365   8600 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
366   8603 CD 29 86         call Extrae_address
367   8606 22 06 85         ld (Puntero_store_entidades),hl
368   8609 21 C2 83     	ld hl,Indice_de_entidades+2
369   860C 22 0A 85     	ld (Indice_restore),hl
370   860F CD 29 86     	call Extrae_address
371   8612 22 08 85     	ld (Puntero_restore_entidades),hl
372   8615 C9               ret
373   8616
374   8616              ; -------------------------------------------------------------------------------------------------------------
375   8616              ;
376   8616              ; 7/1/23
377   8616              ;
378   8616
379   8616 2A 12 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   8619 AF           	xor a
381   861A 67           	ld h,a
382   861B 7D           	ld a,l
383   861C D6 06        1 sub 6
384   861E 28 03        	jr z,2F
385   8620 24           	inc h
386   8621 18 F9        	jr 1B
387   8623 24           2 inc h
388   8624 7C           	ld a,h
389   8625 32 0D 85     	ld (Numero_de_malotes),a
390   8628 C9           	ret
391   8629
392   8629              ; *************************************************************************************************************************************************************
393   8629              ;
394   8629              ; 20/10/22
395   8629              ;
396   8629              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   8629              ;
398   8629              ; Destruye el puntero y DE !!!!!
399   8629
400   8629 5E           Extrae_address ld e,(hl)
401   862A 23           	inc hl
402   862B 56           	ld d,(hl)
403   862C 2B           	dec hl
404   862D EB           	ex de,hl
405   862E C9           	ret
406   862F
407   862F              ; *************************************************************************************************************************************************************
408   862F              ;
409   862F              ;	21/9/22
410   862F              ;
411   862F              ;   Destruye HL y BC !!!!!,
412   862F
413   862F 2A DC 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
414   8632 22 DE 84     	ld (Puntero_DESPLZ),hl
415   8635 CD 29 86     	call Extrae_address
416   8638 22 D6 84     	ld (Puntero_objeto),hl
417   863B
418   863B              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   863B
420   863B 21 10 83     	ld hl,Amadeus
421   863E ED 4B D6 84  	ld bc,(Puntero_objeto)
422   8642 B7 ED 42     	sub hl,bc
423   8645 C0           	ret nz
424   8646
425   8646 21 F9 84     	ld hl,Ctrl_0
426   8649 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   864B
428   864B C9            	ret 												; _de nuestra nave en los extremos.
429   864C
430   864C              ; *************************************************************************************************************************************************************
431   864C              ;
432   864C              ;	8/1/23
433   864C              ;
434   864C              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
435   864C              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
436   864C
437   864C              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
438   864C              ;	_de la 2ª y 3ª entidad respectivamente.
439   864C
440   864C
441   864C
442   864C              Store_Restore_entidades
443   864C
444   864C E5           	push hl
445   864D D5           	push de
446   864E C5            	push bc
447   864F
448   864F              ;	STORE !!!!!
449   864F              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
450   864F
451   864F 21 D2 84     	ld hl,Filas
452   8652 ED 5B 06 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
453   8656 01 34 00     	ld bc,52
454   8659 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
455   865B
456   865B              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
457   865B
458   865B 2A 08 85     	ld hl,(Puntero_restore_entidades)
459   865E 22 06 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
460   8661 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
461   8664 01 34 00     	ld bc,52
462   8667 ED B0        	ldir
463   8669
464   8669              ;	Incrementa RESTORE !!!!!
465   8669
466   8669 2A 0A 85         ld hl,(Indice_restore)
467   866C 23           	inc hl
468   866D 23           	inc hl
469   866E 22 0A 85     	ld (Indice_restore),hl
470   8671 CD 29 86         call Extrae_address
471   8674 22 08 85         ld (Puntero_restore_entidades),hl
472   8677
473   8677 C1           	pop bc
474   8678 D1           	pop de
475   8679 E1           	pop hl
476   867A
477   867A C9           	ret
478   867B
479   867B              ; **************************************************************************************************
480   867B              ;
481   867B              ;	29/10/22
482   867B              ;
483   867B              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
484   867B
485   867B E5           Restore_Primera_entidad push hl
486   867C D5           	push de
487   867D C5            	push bc
488   867E 2A 06 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
489   8681 11 D2 84     	ld de,Filas
490   8684 01 34 00     	ld bc,52
491   8687 ED B0        	ldir
492   8689 C1           	pop bc
493   868A D1           	pop de
494   868B E1           	pop hl
495   868C C9           	ret
496   868D
497   868D              ; *************************************************************************************************************************************************************
498   868D              ;
499   868D              ; Teclado.
500   868D
501   868D 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
502   868F DB FE        	in a,($fe)
503   8691 E6 01        	and $01
504   8693 28 02        	jr z,1f
505   8695 18 F6        	jr Pulsa_ENTER
506   8697 C9           1 ret
507   8698
508   8698              ; **************************************************************************************************
509   8698              ;
510   8698              ; Temporización.
511   8698
512   8698              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
513   8698              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
514   8698              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
515   8698              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
516   8698
517   8698              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
518   8698              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
519   8698              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
520   8698
521   8698              ; A partir de $4f61 no hace falta DELAY.
522   8698
523   8698              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
524   8698
525   8698 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
526   869B 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
527   869C 78           	LD A,B
528   869D A7           	AND A
529   869E 20 FB        	JR NZ,wait
530   86A0 C9           	RET
531   86A1
532   86A1              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
533   86A1              ;
534   86A1              ;	21/4/22
535   86A1
536   86A1              Movimiento_Amadeus
537   86A1
538   86A1 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
539   86A3 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
540   86A5 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
541   86A7 CC BE 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
542   86AA 3E F7        	ld a,$f7
543   86AC DB FE        	in a,($fe)
544   86AE E6 01        	and $01
545   86B0 C8           	ret z
546   86B1 3E F7        	ld a,$f7
547   86B3 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
548   86B5 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
549   86B7 CC CB 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
550   86BA C9               ret
551   86BB
552   86BB              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
553   86BB
554   86BB              ; Pinta indicadores de FILAS. ------------------------------------------------------
555   86BB
556   86BB 21 10 40     Pinta_FILAS ld hl,$4010
557   86BE              ;	ld b,9
558   86BE              ;2 push hl
559   86BE              ;	push bc
560   86BE 06 BF        	ld b,$bf
561   86C0 36 80        1 ld (hl),%10000000
562   86C2 CD CA 89     	call NextScan
563   86C5 10 F9        	djnz 1B
564   86C7              ;	pop bc
565   86C7              ;	pop hl
566   86C7              ;	inc l
567   86C7              ;	djnz 2B
568   86C7
569   86C7 06 03        	ld b,3
570   86C9 21 00 47         ld hl,$4700
571   86CC CD D2 86     3 call Bucle_1
572   86CF 10 FB            djnz 3B
573   86D1 C9               ret
574   86D2
575   86D2 C5           Bucle_1 push bc
576   86D3 E5                   push hl
577   86D4 D1                   pop de
578   86D5 13                   inc de
579   86D6 01 FF 00             ld bc,255
580   86D9 36 FF                ld (hl),255
581   86DB ED B0                ldir
582   86DD 23                   inc hl
583   86DE 3E 07                ld a,7
584   86E0 84                   add a,h
585   86E1 67                   ld h,a
586   86E2 C1                   pop bc
587   86E3 C9                   ret
588   86E4
589   86E4              ; ---------------------------------------------------------------
590   86E4
591   86E4              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E4              ; ******************************************************************************************************************************************************************************************
  2+  86E4              ;
  3+  86E4              ; 01/23
  4+  86E4              ;
  5+  86E4              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E4
  7+  86E4 CD BE 89     Draw call Prepara_draw
  8+  86E7 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86E8 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86E9 28 05        	jr z,2F
 11+  86EB 3A E2 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86EE 18 0C        	jr 1F
 13+  86F0 2A E0 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F3 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F6 CD 85 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86F9              ;													; _la esquina superior izquierda de la pantalla.
 17+  86F9 CD 3D 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86FC 3A F9 84     1 ld a,(Ctrl_0)
 19+  86FF CB 6F        	bit 5,a
 20+  8701 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8703
 22+  8703 CD 1B 87     	call Comprueba_limite_horizontal
 23+  8706 CD AB 87     	call Comprueba_limite_vertical
 24+  8709
 25+  8709              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8709
 27+  8709 CD F8 88     3 call calcula_CColumnass
 28+  870C CD 2F 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870F CD 84 89     	call Define_rutina_de_impresion
 30+  8712
 31+  8712 3A F9 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8715 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8717 32 F9 84     	ld (Ctrl_0),a
 34+  871A
 35+  871A C9           	ret
 36+  871B
 37+  871B              ; *******************************************************************************************************************************************************************************************
 38+  871B              ;	21/01/23
 39+  871B              ;
 40+  871B              ; 	Comprueba_limite_horizontal.
 41+  871B              ;
 42+  871B              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  871B              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  871B              ;
 45+  871B              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  871B              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  871B              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  871B              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  871B
 50+  871B
 51+  871B
 52+  871B 3A F9 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  871E CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  8720 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  8722 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8724 32 F9 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8727 18 09            jr 6F
 58+  8729 CB 5F        1 bit 3,a
 59+  872B 28 0A            jr z,2F
 60+  872D E6 F7            and $f7
 61+  872F 32 F9 84         ld (Ctrl_0),a
 62+  8732 CD 85 88     6 call Inicializacion
 63+  8735 18 5B            jr 5F
 64+  8737 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  8738
 66+  8738              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8738              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8738
 69+  8738 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8739 2A 03 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  873C CD 23 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  873F 67           	ld h,a
 73+  8740 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  8741 CD 23 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8744 67           	ld h,a
 76+  8745 A7           	and a
 77+  8746 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8748 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8749 3A E2 84     	ld a,(Cuad_objeto)
 80+  874C FE 02        	cp 2
 81+  874E 38 1E        	jr c,3F
 82+  8750 28 1C        	jr z,3F
 83+  8752 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8753 28 23            jr z,7F
 85+  8755 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8757 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8759 E1           	pop hl
 88+  875A
 89+  875A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  875A              ; _para indicar con E="2" en caso necesario.
 91+  875A
 92+  875A E5               push hl
 93+  875B C5               push bc
 94+  875C CD 23 8C     	call calcula_tercio
 95+  875F FE 01        	cp 1
 96+  8761 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  8763 CD 93 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8766 28 26            jr z,9F
 99+  8768 38 24            jr c,9F
100+  876A 1E 00        11 ld e,0
101+  876C 18 22            jr 8F
102+  876E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  876F 28 07        	jr z, 7F
104+  8771 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  8773 1E 00         	ld e,0
106+  8775 E1           	pop hl
107+  8776 18 04        	jr 4F
108+  8778 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  877A 18 15            jr 10F
110+  877C
111+  877C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  877C              ; _para indicar con E="2" en caso necesario.
113+  877C
114+  877C E5           4 push hl
115+  877D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  877E CD 23 8C     	call calcula_tercio
117+  8781 FE 01        	cp 1
118+  8783 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  8785 CD 93 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8788 28 04            jr z,9F
121+  878A 30 02            jr nc,9F
122+  878C 18 02        	jr 8F
123+  878E 1E 02        9 ld e,2
124+  8790 C1           8 pop bc
125+  8791 E1           10 pop hl
126+  8792 C9           5 ret
127+  8793
128+  8793              ; --------------------
129+  8793              ;
130+  8793              ; 25/08/22
131+  8793
132+  8793 CD 23 8C     Comprueba_centro call calcula_tercio
133+  8796 67               ld h,a
134+  8797 08           	ex af,af
135+  8798 FE 02        	cp 2
136+  879A 38 07        	jr c,1F
137+  879C 28 05        	jr z,1F
138+  879E 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  87A1 18 03        	jr 2F
140+  87A3 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  87A6 08           2 ex af,af
142+  87A7 A7               and a
143+  87A8 ED 42            sbc hl,bc
144+  87AA C9               ret
145+  87AB
146+  87AB              ; *********************************************************************************************************************************************************************************************
147+  87AB              ;
148+  87AB              ;   16/8/22
149+  87AB              ;
150+  87AB              ;	Comprueba_limite_vertical
151+  87AB              ;
152+  87AB              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  87AB              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  87AB              ;
155+  87AB
156+  87AB 2A D4 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  87AE 7D           	ld a,l
158+  87AF E6 1F        	and $1F
159+  87B1 57           	ld d,a
160+  87B2 3A 05 85     	ld a,(Limite_vertical)
161+  87B5 BA           	cp d 											; Límite - Posición.
162+  87B6 08           	ex af,af 										; Resultado de CP d en F'.
163+  87B7 3A E2 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  87BA CB 47        	bit 0,a
165+  87BC 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  87BE
167+  87BE              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  87BE
169+  87BE 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  87BF 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  87C1
172+  87C1              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  87C1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  87C1
175+  87C1 3A D9 84         ld a,(Coordenada_X)
176+  87C4 16 0F            ld d,Centro_izquierda
177+  87C6 A7               and a
178+  87C7 92               sub d 											 ; Posición - Centro_izquierda.
179+  87C8 28 1E            jr z,3F
180+  87CA 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  87CC              ;                                                    ; _salimos sin modificar nada.
182+  87CC 18 0E            jr 2F
183+  87CE 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  87CF 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  87D1
186+  87D1              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  87D1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  87D1
189+  87D1 3A D9 84         ld a,(Coordenada_X)
190+  87D4 16 10            ld d,Centro_derecha
191+  87D6 A7               and a
192+  87D7 92               sub d
193+  87D8 28 0E            jr z,3F
194+  87DA 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  87DC              ;                                                    ; _salimos sin modificar nada.
196+  87DC CB 43        2 bit 0,e
197+  87DE 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  87E0 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  87E1 CD 75 88         call Modificaccionne
200+  87E4 C1           	pop bc
201+  87E5 CD 85 88         call Inicializacion
202+  87E8 C9           3 ret 				 								 ; Salimos de la rutina.
203+  87E9
204+  87E9              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  87E9
206+  87E9 C5           4 push bc
207+  87EA 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  87ED 0A           	ld a,(bc)
209+  87EE 3D           	dec a
210+  87EF 47           	ld b,a 											 ; Columnas-1 en B.
211+  87F0 7D           	ld a,l
212+  87F1 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  87F2 CB 47        	bit 0,a
214+  87F4 28 03        	jr z,5F
215+  87F6 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  87F7 18 2E        	jr 7F
217+  87F9
218+  87F9              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  87F9
220+  87F9 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  87FA F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  87FB 3A F9 84     	ld a,(Ctrl_0)
223+  87FE CB 4F        	bit 1,a
224+  8800 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8802 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8803
227+  8803              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8803
229+  8803 1C               inc e
230+  8804 1D               dec e
231+  8805 20 07            jr nz,12F
232+  8807 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8808 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8809 22 D4 84     	ld (Posicion_actual),hl
235+  880C 18 44        13 jr 9F
236+  880E CB 43        12 bit 0,e
237+  8810 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  8812              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  8812 C1           	pop bc
240+  8813 18 D3        	jr 3B
241+  8815 80           14 add b
242+  8816 6F               ld l,a
243+  8817 22 D4 84     	ld (Posicion_actual),hl
244+  881A CD 75 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  881D 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  881F E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  8821 32 F9 84         ld (Ctrl_0),a
248+  8824 F1           	pop af
249+  8825 18 2B        	jr 9F
250+  8827
251+  8827              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8827
253+  8827 F5           7 push af
254+  8828 3A F9 84     	ld a,(Ctrl_0)
255+  882B CB 47        	bit 0,a
256+  882D 20 1D        	jr nz,8F
257+  882F F1           	pop af
258+  8830
259+  8830              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  8830
261+  8830 1C           	inc e
262+  8831 1D               dec e
263+  8832 20 07            jr nz,10F
264+  8834 90           	sub b
265+  8835 6F               ld l,a
266+  8836 22 D4 84     	ld (Posicion_actual),hl
267+  8839 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  883B              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  883B CB 43        10 bit 0,e
270+  883D 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  883F              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  883F C1           	pop bc
273+  8840 18 A6        	jr 3B
274+  8842 90           16 sub b
275+  8843 6F               ld l,a
276+  8844 22 D4 84     	ld (Posicion_actual),hl
277+  8847 CD 75 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  884A 18 06            jr 9F
279+  884C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  884E 32 F9 84         ld (Ctrl_0),a
281+  8851 F1           	pop af
282+  8852 C1           9 pop bc
283+  8853 1E 00        	ld e,0
284+  8855 CD 85 88         call Inicializacion
285+  8858 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8859 08           	ex af,af
287+  885A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  885B 18 8B            jr 3B
289+  885D
290+  885D              ; --------------------
291+  885D
292+  885D 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  885F CD D9 89     1 call PreviousScan
294+  8862 10 FB            djnz 1B
295+  8864 22 D4 84     	ld (Posicion_actual),hl
296+  8867 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  8868 C9           	ret
298+  8869
299+  8869              ; --------------------
300+  8869
301+  8869 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  886B CD CA 89     1 call NextScan
303+  886E 10 FB            djnz 1B
304+  8870 22 D4 84     	ld (Posicion_actual),hl
305+  8873 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8874 C9           	ret
307+  8875
308+  8875              ; --------------------
309+  8875              ;
310+  8875              ;	22/01/23
311+  8875              ;
312+  8875              ;	E="1". Hemos cambiado de cuadrante.
313+  8875              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8875              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8875
316+  8875
317+  8875              Modificaccionne
318+  8875
319+  8875 3A E2 84     	ld a,(Cuad_objeto)
320+  8878 FE 02        	cp 2
321+  887A CC 5D 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  887D DC 5D 88         call c,Modifica_Pos_actual
323+  8880 C8           	ret z
324+  8881 CD 69 88         call Modifica_Pos_actual2
325+  8884 C9               ret
326+  8885
327+  8885              ; *************************************************************************************************************************************************************************************************
328+  8885              ;
329+  8885              ;	13/8/22
330+  8885              ;
331+  8885              ;	Inicializacion
332+  8885              ;
333+  8885              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  8885              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  8885              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  8885              ;
337+  8885              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  8885              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  8885              ;	_ desaparece/aparece.
340+  8885
341+  8885              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  8885              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  8885              ;
344+  8885              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  8885              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  8885              ; 		   [E] ="0"
347+  8885
348+  8885              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  8885
350+  8885 CD 23 8C     Inicializacion call calcula_tercio
351+  8888 28 36        	jr z,primit
352+  888A E6 02        	and 2
353+  888C 20 07        	jr nz,segmit
354+  888E 7D           	ld a,l
355+  888F FE 7F        	cp $7f
356+  8891 38 2D        	jr c,primit
357+  8893 28 2B        	jr z,primit
358+  8895 CD F2 88     segmit call column
359+  8898 38 13        	jr c,tercuad
360+  889A 3E 04        cuarcuad ld a,4
361+  889C 32 E2 84     	ld (Cuad_objeto),a
362+  889F 21 20 48     	ld hl,$4820
363+  88A2 22 03 85     	ld (Limite_horizontal),hl
364+  88A5 21 05 85     	ld hl,Limite_vertical
365+  88A8 36 0D        	ld (hl),$0d
366+  88AA 08           	ex af,af
367+  88AB 18 3C        	jr 1F
368+  88AD              tercuad
369+  88AD              ;	call Fija_punteros
370+  88AD 3E 03        	ld a,3
371+  88AF 32 E2 84     	ld (Cuad_objeto),a
372+  88B2 21 20 48     	ld hl,$4820
373+  88B5 22 03 85     	ld (Limite_horizontal),hl
374+  88B8 21 05 85     	ld hl,Limite_vertical
375+  88BB 36 12        	ld (hl),$12
376+  88BD 08           	ex af,af
377+  88BE 18 29        	jr 1F
378+  88C0 CD F2 88     primit call column
379+  88C3 38 13        	jr c, primcuad
380+  88C5              segcuad
381+  88C5              ;	call Fija_punteros
382+  88C5 3E 02        	ld a,2
383+  88C7 32 E2 84     	ld (Cuad_objeto),a
384+  88CA 21 C0 4F     	ld hl,$4fc0
385+  88CD 22 03 85     	ld (Limite_horizontal),hl
386+  88D0 21 05 85     	ld hl,Limite_vertical
387+  88D3 36 0D        	ld (hl),$0d
388+  88D5 08           	ex af,af
389+  88D6 18 11        	jr 1F
390+  88D8              primcuad
391+  88D8              ;	call Fija_punteros
392+  88D8 3E 01        	ld a,1
393+  88DA 32 E2 84     	ld (Cuad_objeto),a
394+  88DD 21 C0 4F     	ld hl,$4fc0
395+  88E0 22 03 85     	ld (Limite_horizontal),hl
396+  88E3 21 05 85     	ld hl,Limite_vertical
397+  88E6 36 12        	ld (hl),$12
398+  88E8 08           	ex af,af
399+  88E9 CD 33 8F     1 call Genera_coordenadas
400+  88EC 21 F9 84     	ld hl,Ctrl_0
401+  88EF CB EE        	set 5,(hl)
402+  88F1 C9           	ret
403+  88F2
404+  88F2              ; ------------------------------------------------------------------------------------------------------------------
405+  88F2
406+  88F2              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  88F2              ;
408+  88F2              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  88F2
410+  88F2 7D           column ld a,l
411+  88F3 E6 1F        	and $1f
412+  88F5 FE 10         	cp $10
413+  88F7 C9            	ret
414+  88F8
415+  88F8              ; --------------------------------------------------------------------------------------------------------------------
416+  88F8              ;
417+  88F8              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  88F8              ;
419+  88F8              ; 14/12/22
420+  88F8              ;
421+  88F8              ;	Modifica: A y BC.
422+  88F8
423+  88F8 3A E2 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  88FB E6 01        	and 1
425+  88FD 28 17        	jr z,1F
426+  88FF
427+  88FF              ; Nos encontramos en la parte izquierda de la pantalla
428+  88FF
429+  88FF 3A D9 84     	ld a,(Coordenada_X)
430+  8902 47           	ld b,a
431+  8903 04           	inc b											; (Coordenada_X)+1 en B.
432+  8904 79           	ld a,c
433+  8905 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8906 38 08        	jr c,2F
435+  8908 47           	ld b,a
436+  8909 79           	ld a,c
437+  890A 90           	sub b
438+  890B 32 02 85     	ld (Columnas),a
439+  890E 18 1B        	jr 4F
440+  8910 79           2 ld a,c
441+  8911 32 02 85     	ld (Columnas),a
442+  8914 18 15        	jr 4F
443+  8916
444+  8916              ; Nos encontramos en la parte derecha de la pantalla.
445+  8916
446+  8916 3A D9 84     1 ld a,(Coordenada_X)
447+  8919 81           	add c
448+  891A 3D           	dec a
449+  891B D6 1F        	sub $1f
450+  891D 38 08        	jr c,3F
451+  891F 47           	ld b,a
452+  8920 79           	ld a,c
453+  8921 90           	sub b
454+  8922 32 02 85     	ld (Columnas),a
455+  8925 18 04        	jr 4F
456+  8927 79           3 ld a,c
457+  8928 32 02 85     	ld (Columnas),a
458+  892B D9           4 exx
459+  892C 4F           	ld c,a
460+  892D D9           	exx
461+  892E C9            ret
462+  892F
463+  892F              ; --------------------------------------------------------------------------------------------------------------------
464+  892F              ;
465+  892F              ; 7/1/23
466+  892F              ;
467+  892F              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  892F              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  892F              ;
470+  892F              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  892F              ;	DESTRUYE: HL,B Y A.
472+  892F
473+  892F 3A E2 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  8932 FE 02        	cp 2
475+  8934 38 18        	jr c,1F
476+  8936 28 16        	jr z,1F
477+  8938 E6 01        	and 1
478+  893A 28 0D        	jr z,3F
479+  893C
480+  893C              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  893C
482+  893C CD 78 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  893F
484+  893F 7D           9 ld a,l
485+  8940 E6 1F        	and $1f
486+  8942 28 2A        	jr z,7F
487+  8944 2B           	dec hl
488+  8945 10 F8        	djnz 9B
489+  8947 18 25        	jr 7F
490+  8949
491+  8949              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8949
493+  8949 2A D4 84     3 ld hl,(Posicion_actual)
494+  894C 18 20        	jr 7F
495+  894E
496+  894E 28 14        1 jr z,2F
497+  8950
498+  8950              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  8950
500+  8950 CD 78 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  8953 7D           4 ld a,l
502+  8954 E6 1F        	and $1f
503+  8956 28 03        	jr z,6F
504+  8958 2B           	dec hl
505+  8959 10 F8        	djnz 4B
506+  895B 06 0F        6 ld b,15
507+  895D CD D9 89     5 call PreviousScan
508+  8960 10 FB        	djnz 5B
509+  8962 18 0A        	jr 7F
510+  8964
511+  8964              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  8964
513+  8964 CD 78 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  8967 06 0F        	ld b,15
515+  8969 CD D9 89     8 call PreviousScan
516+  896C 10 FB        	djnz 8B
517+  896E
518+  896E E5           7 push hl
519+  896F DD E1        	pop ix
520+  8971
521+  8971 2A D6 84     	ld hl,(Puntero_objeto)
522+  8974 E5           	push hl
523+  8975 FD E1        	pop iy
524+  8977
525+  8977 C9           	ret
526+  8978
527+  8978              ; --------------------------------------------------------------------------------------------------------------------
528+  8978              ;
529+  8978              ;	2/1/23
530+  8978              ;
531+  8978              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8978              ;
533+  8978              ;	Tras esta rutina tenemos:
534+  8978              ;
535+  8978              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8978              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8978              ;
538+  8978              ;	DESTRUYE!!!!! HL,B y A.
539+  8978
540+  8978 2A D4 84     Operandos ld hl,(Posicion_actual)
541+  897B 3A 02 85     	ld a,(Columnas)
542+  897E 3D           	dec a
543+  897F 20 01        	jr nz,1F
544+  8981 3C           	inc a
545+  8982 47           1 ld b,a
546+  8983 C9           	ret
547+  8984
548+  8984              ; --------------------------------------------------------------------------------------------------------------------
549+  8984              ;
550+  8984              ;	3/1/23
551+  8984              ;
552+  8984              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  8984              ;
554+  8984              ;	Destruye: A,B,HL y DE.
555+  8984
556+  8984              Define_rutina_de_impresion
557+  8984
558+  8984 3A D3 84     	ld a,(Columns)
559+  8987 47           	ld b,a
560+  8988 3A 02 85     	ld a,(Columnas)
561+  898B B8           	cp b
562+  898C 20 0D        	jr nz,2f
563+  898E
564+  898E              ;	La entidad se imprime entera.
565+  898E
566+  898E 21 20 8A     	ld hl, Indice_entidades_completas
567+  8991 E6 01        	and 1
568+  8993 28 02        	jr z,1F
569+  8995
570+  8995 23           	inc hl
571+  8996 23           	inc hl
572+  8997
573+  8997 CD 29 86     1 call Extrae_address
574+  899A C9           	ret		;	ret
575+  899B
576+  899B              ;	La entidad no se imprime entera en pantalla.
577+  899B
578+  899B 3A E2 84     2 ld a,(Cuad_objeto)
579+  899E E6 01        	and 1
580+  89A0 28 17        	jr z,3F
581+  89A2
582+  89A2              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  89A2
584+  89A2 21 24 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  89A5 3A D3 84     4 ld a,(Columns)
586+  89A8 E6 01        	and 1
587+  89AA 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  89AC
589+  89AC 23           	inc hl
590+  89AD 23           	inc hl
591+  89AE
592+  89AE 3A 02 85     	ld a,(Columnas)
593+  89B1 E6 01        	and 1
594+  89B3 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  89B5
596+  89B5 23           	inc hl
597+  89B6 23           	inc hl
598+  89B7
599+  89B7 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  89B9
601+  89B9 21 2A 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  89BC 18 E7        	jr 4B
603+  89BE
604+  89BE              ; --------------------------------------------------------------------------------------------------------------------
605+  89BE              ;
606+  89BE              ;	Prepara_draw
607+  89BE              ;
608+  89BE              ;	Es una rutina de carga.
609+  89BE              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  89BE              ;
611+  89BE              ;	FUNCIONAMIENTO:
612+  89BE              ;
613+  89BE              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  89BE              ;	- LD (Posicion_actual) del objeto en [HL].
615+  89BE              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  89BE              ;
617+  89BE              ;	DESTRUYE:
618+  89BE              ;
619+  89BE              ;	Logicamente, BC,HL y E quedan destruidos.
620+  89BE
621+  89BE 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  89C1 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  89C2 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  89C3 4E           	ld c,(hl)
625+  89C4 2A D4 84     	ld hl,(Posicion_actual)
626+  89C7 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  89C9 C9           	ret
628+  89CA
629+  89CA              ;----------------------------------------------------------------------------------------------------------------
630+  89CA              ;
631+  89CA              ;	5/08/22
632+  89CA              ;
633+  89CA              ;   NextScan.
634+  89CA              ;
635+  89CA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  89CA              ;
637+  89CA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  89CA              ;
639+  89CA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  89CA              ;
641+  89CA              ;       DESTRUIDOS: AF y HL !!!
642+  89CA              ;
643+  89CA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  89CA              ;
645+  89CA
646+  89CA 24           NextScan inc h          ; Incrementamos el scanline.
647+  89CB 7C               ld a,h
648+  89CC E6 07            and 7
649+  89CE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  89CF
651+  89CF 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  89D0 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  89D2 6F               ld l,a
654+  89D3 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  89D4
656+  89D4 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  89D5 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  89D7 67               ld h,a
659+  89D8 C9               ret
660+  89D9
661+  89D9              ;----------------------------------------------------------------------------------------------------------------
662+  89D9              ;
663+  89D9              ;	5/08/22
664+  89D9              ;
665+  89D9              ;   PreviousScan.
666+  89D9              ;
667+  89D9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  89D9              ;
669+  89D9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  89D9              ;
671+  89D9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  89D9              ;
673+  89D9              ;       DESTRUIDOS: AF y HL !!!
674+  89D9              ;
675+  89D9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  89D9              ;
677+  89D9
678+  89D9 7C           PreviousScan ld a,h
679+  89DA 25               dec h               ; Dec H.
680+  89DB E6 07            and 7
681+  89DD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  89DE
683+  89DE 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  89DF D6 20            sub $20             ; Vamos a comprobarlo...
685+  89E1 6F               ld l,a
686+  89E2 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  89E3
688+  89E3 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  89E4 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  89E6 67               ld h,a
691+  89E7 C9               ret
692+  89E8
693+  89E8              ; -----------------------------------------------------------------------------------
694+  89E8              ;
695+  89E8              ;	15/1/23
696+  89E8
697+  89E8 ED 73 0E 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  89EC 31 00 70     	ld sp,Album_de_fotos
699+  89EF
700+  89EF FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  89F1 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  89F2 D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  89F3
704+  89F3 ED 73 10 85  	ld (Stack_2),sp
705+  89F7 ED 7B 0E 85  	ld sp,(Stack)
706+  89FB
707+  89FB              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  89FB
709+  89FB 3E CD        	ld a,$cd
710+  89FD 32 05 8A     	ld (Imprime),a
711+  8A00 EB           	ex de,hl
712+  8A01 22 06 8A     	ld (Imprime+1),hl
713+  8A04 EB           	ex de,hl
714+  8A05
715+  8A05              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A05
717+  8A05 00 00 00     Imprime db 0,0,0
718+  8A08
719+  8A08 ED 73 0E 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A0C
721+  8A0C 3A 0D 85     	ld a,(Numero_de_malotes)
722+  8A0F 3D           	dec a
723+  8A10 28 09        	jr z,1F
724+  8A12 32 0D 85      	ld (Numero_de_malotes),a
725+  8A15 ED 7B 10 85  	ld sp,(Stack_2)
726+  8A19 18 D4        	jr 2B
727+  8A1B
728+  8A1B AF           1 xor a
729+  8A1C 32 10 85     	ld (Stack_2),a
730+  8A1F C9           	ret
731+  8A20
732+  8A20
# file closed: Draw_XOR.asm
592   8A20              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A20              ;   índices de Rutinas de impresión.
  2+  8A20
  3+  8A20 30 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A22 5D 8A            defw Pinta_Amadeus_3x2
  5+  8A24
  6+  8A24 B3 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A26 53 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A28 07 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A2A
 10+  8A2A DD 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A2C E1 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2E 95 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A30
 14+  8A30
 15+  8A30              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A30              ;
 17+  8A30              ;   12/12/22
 18+  8A30              ;
 19+  8A30              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A30              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A30              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A30              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A30              ;
 24+  8A30              ;   Modifica: DE y HL.
 25+  8A30
 26+  8A30 ED 73 0E 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A34 FD F9        	ld sp,iy
 28+  8A36 06 10            ld b,16
 29+  8A38 D1           1 pop de
 30+  8A39 7B               ld a,e
 31+  8A3A AE               xor (hl)
 32+  8A3B 77           	ld (hl),a
 33+  8A3C 23           	inc hl
 34+  8A3D 7A               ld a,d
 35+  8A3E AE               xor (hl)
 36+  8A3F 77           	ld (hl),a
 37+  8A40 2B           	dec hl
 38+  8A41 24           	inc h
 39+  8A42 7C               ld a,h
 40+  8A43 E6 07            and 7
 41+  8A45 20 0A            jr nz,2F
 42+  8A47 7D               ld a,l
 43+  8A48 C6 20            add a,$20
 44+  8A4A 6F               ld l,a
 45+  8A4B 38 04            jr c,2F
 46+  8A4D 7C               ld a,h
 47+  8A4E D6 08            sub 8
 48+  8A50 67               ld h,a
 49+  8A51 7C           2 ld a,h
 50+  8A52 FE 58            cp $58
 51+  8A54 28 02            jr z,3F
 52+  8A56 10 E0            djnz 1B
 53+  8A58 ED 7B 0E 85  3 ld sp,(Stack)
 54+  8A5C C9           	ret
 55+  8A5D
 56+  8A5D ED 73 0E 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A61 FD F9        	ld sp,iy
 58+  8A63 06 08            ld b,8
 59+  8A65 D1           1 pop de
 60+  8A66 7B               ld a,e
 61+  8A67 AE               xor (hl)
 62+  8A68 77           	ld (hl),a
 63+  8A69 23           	inc hl
 64+  8A6A 7A               ld a,d
 65+  8A6B AE               xor (hl)
 66+  8A6C 77           	ld (hl),a
 67+  8A6D 23           	inc hl
 68+  8A6E D1           	pop de
 69+  8A6F 7B               ld a,e
 70+  8A70 AE               xor (hl)
 71+  8A71 77           	ld (hl),a
 72+  8A72 2B           	dec hl
 73+  8A73 2B           	dec hl
 74+  8A74 24           	inc h
 75+  8A75 7C               ld a,h
 76+  8A76 E6 07            and 7
 77+  8A78 20 0A            jr nz,2F
 78+  8A7A 7D               ld a,l
 79+  8A7B C6 20            add a,$20
 80+  8A7D 6F               ld l,a
 81+  8A7E 38 04            jr c,2F
 82+  8A80 7C               ld a,h
 83+  8A81 D6 08            sub 8
 84+  8A83 67               ld h,a
 85+  8A84 7C           2 ld a,h
 86+  8A85 FE 58            cp $58
 87+  8A87 28 25            jr z,4F
 88+  8A89 7A               ld a,d
 89+  8A8A AE               xor (hl)
 90+  8A8B 77               ld (hl),a
 91+  8A8C D1           	pop de
 92+  8A8D 23           	inc hl
 93+  8A8E 7B               ld a,e
 94+  8A8F AE               xor (hl)
 95+  8A90 77           	ld (hl),a
 96+  8A91 23           	inc hl
 97+  8A92 7A               ld a,d
 98+  8A93 AE               xor (hl)
 99+  8A94 77           	ld (hl),a
100+  8A95 2B           	dec hl
101+  8A96 2B           	dec hl
102+  8A97 24           	inc h
103+  8A98 7C               ld a,h
104+  8A99 E6 07            and 7
105+  8A9B 20 0A            jr nz,3F
106+  8A9D 7D               ld a,l
107+  8A9E C6 20            add a,$20
108+  8AA0 6F               ld l,a
109+  8AA1 38 04            jr c,3F
110+  8AA3 7C               ld a,h
111+  8AA4 D6 08            sub 8
112+  8AA6 67               ld h,a
113+  8AA7 7C           3 ld a,h
114+  8AA8 FE 58            cp $58
115+  8AAA 28 02            jr z,4F
116+  8AAC 10 B7            djnz 1B
117+  8AAE ED 7B 0E 85  4 ld sp,(Stack)
118+  8AB2 C9           	ret
119+  8AB3
120+  8AB3              ; ---------------------------------------------------
121+  8AB3
122+  8AB3 ED 73 0E 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AB7 FD F9        	ld sp,iy
124+  8AB9 06 10            ld b,16
125+  8ABB D1           1 pop de
126+  8ABC 7A           	ld a,d
127+  8ABD AE           	xor (hl)
128+  8ABE 77           	ld (hl),a
129+  8ABF 24           	inc h
130+  8AC0 7C               ld a,h
131+  8AC1 E6 07            and 7
132+  8AC3 20 0C            jr nz,2F
133+  8AC5 7D               ld a,l
134+  8AC6 C6 20            add a,$20
135+  8AC8 6F               ld l,a
136+  8AC9 38 06            jr c,2F
137+  8ACB 7C               ld a,h
138+  8ACC D6 08            sub 8
139+  8ACE 67               ld h,a
140+  8ACF 18 00            jr 2F
141+  8AD1 7C           2 ld a,h
142+  8AD2 FE 58            cp $58
143+  8AD4 28 02            jr z,3F
144+  8AD6 10 E3            djnz 1B
145+  8AD8 ED 7B 0E 85  3 ld sp,(Stack)
146+  8ADC C9           	ret
147+  8ADD
148+  8ADD ED 73 0E 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8AE1 FD F9        	ld sp,iy
150+  8AE3 06 10            ld b,16
151+  8AE5 D1           1 pop de
152+  8AE6 7B           	ld a,e
153+  8AE7 AE           	xor (hl)
154+  8AE8 77           	ld (hl),a
155+  8AE9 24           	inc h
156+  8AEA 7C               ld a,h
157+  8AEB E6 07            and 7
158+  8AED 20 0C            jr nz,2F
159+  8AEF 7D               ld a,l
160+  8AF0 C6 20            add a,$20
161+  8AF2 6F               ld l,a
162+  8AF3 38 06            jr c,2F
163+  8AF5 7C               ld a,h
164+  8AF6 D6 08            sub 8
165+  8AF8 67               ld h,a
166+  8AF9 18 00            jr 2F
167+  8AFB 7C           2 ld a,h
168+  8AFC FE 58            cp $58
169+  8AFE 28 02            jr z,3F
170+  8B00 10 E3            djnz 1B
171+  8B02 ED 7B 0E 85  3 ld sp,(Stack)
172+  8B06 C9           	ret
173+  8B07
174+  8B07              ; ---------------------------------------------------
175+  8B07
176+  8B07 ED 73 0E 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B0B FD F9        	ld sp,iy
178+  8B0D 06 08            ld b,8
179+  8B0F D1           1 pop de
180+  8B10 7A           	ld a,d
181+  8B11 AE           	xor (hl)
182+  8B12 77           	ld (hl),a
183+  8B13 23           	inc hl
184+  8B14 D1           	pop de
185+  8B15 7B           	ld a,e
186+  8B16 AE           	xor (hl)
187+  8B17 77           	ld (hl),a
188+  8B18 2B           	dec hl
189+  8B19 24            	inc h
190+  8B1A 7C               ld a,h
191+  8B1B E6 07            and 7
192+  8B1D 20 0A            jr nz,2F
193+  8B1F 7D               ld a,l
194+  8B20 C6 20            add a,$20
195+  8B22 6F               ld l,a
196+  8B23 38 04            jr c,2F
197+  8B25 7C               ld a,h
198+  8B26 D6 08            sub 8
199+  8B28 67               ld h,a
200+  8B29 7C           2 ld a,h
201+  8B2A FE 58            cp $58
202+  8B2C 28 20            jr z,4F
203+  8B2E D1               pop de
204+  8B2F 7B           	ld a,e
205+  8B30 AE           	xor (hl)
206+  8B31 77           	ld (hl),a
207+  8B32 23           	inc hl
208+  8B33 7A           	ld a,d
209+  8B34 AE           	xor (hl)
210+  8B35 77           	ld (hl),a
211+  8B36 2B           	dec hl
212+  8B37 24           	inc h
213+  8B38 7C               ld a,h
214+  8B39 E6 07            and 7
215+  8B3B 20 0A            jr nz,3F
216+  8B3D 7D               ld a,l
217+  8B3E C6 20            add a,$20
218+  8B40 6F               ld l,a
219+  8B41 38 04            jr c,3F
220+  8B43 7C               ld a,h
221+  8B44 D6 08            sub 8
222+  8B46 67               ld h,a
223+  8B47 7C           3 ld a,h
224+  8B48 FE 58            cp $58
225+  8B4A 28 02            jr z,4F
226+  8B4C 10 C1            djnz 1B
227+  8B4E ED 7B 0E 85  4 ld sp,(Stack)
228+  8B52 C9           	ret
229+  8B53
230+  8B53 ED 73 0E 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B57 FD F9        	ld sp,iy
232+  8B59 06 08            ld b,8
233+  8B5B D1           1 pop de
234+  8B5C D1           	pop de
235+  8B5D 7B           	ld a,e
236+  8B5E AE           	xor (hl)
237+  8B5F 77           	ld (hl),a
238+  8B60 24            	inc h
239+  8B61 7C               ld a,h
240+  8B62 E6 07            and 7
241+  8B64 20 0A            jr nz,2F
242+  8B66 7D               ld a,l
243+  8B67 C6 20            add a,$20
244+  8B69 6F               ld l,a
245+  8B6A 38 04            jr c,2F
246+  8B6C 7C               ld a,h
247+  8B6D D6 08            sub 8
248+  8B6F 67               ld h,a
249+  8B70 7C           2 ld a,h
250+  8B71 FE 58            cp $58
251+  8B73 28 1B            jr z,4F
252+  8B75 D1               pop de
253+  8B76 7A           	ld a,d
254+  8B77 AE           	xor (hl)
255+  8B78 77           	ld (hl),a
256+  8B79 24           	inc h
257+  8B7A 7C               ld a,h
258+  8B7B E6 07            and 7
259+  8B7D 20 0A            jr nz,3F
260+  8B7F 7D               ld a,l
261+  8B80 C6 20            add a,$20
262+  8B82 6F               ld l,a
263+  8B83 38 04            jr c,3F
264+  8B85 7C               ld a,h
265+  8B86 D6 08            sub 8
266+  8B88 67               ld h,a
267+  8B89 7C           3 ld a,h
268+  8B8A FE 58            cp $58
269+  8B8C 28 02            jr z,4F
270+  8B8E 10 CB            djnz 1B
271+  8B90 ED 7B 0E 85  4 ld sp,(Stack)
272+  8B94 C9           	ret
273+  8B95
274+  8B95 ED 73 0E 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B99 FD F9        	ld sp,iy
276+  8B9B 06 08            ld b,8
277+  8B9D D1           1 pop de
278+  8B9E 7B           	ld a,e
279+  8B9F AE           	xor (hl)
280+  8BA0 77           	ld (hl),a
281+  8BA1 23           	inc hl
282+  8BA2 7A           	ld a,d
283+  8BA3 AE           	xor (hl)
284+  8BA4 77           	ld (hl),a
285+  8BA5 2B           	dec hl
286+  8BA6 24             	inc h
287+  8BA7 7C               ld a,h
288+  8BA8 E6 07            and 7
289+  8BAA 20 0A            jr nz,2F
290+  8BAC 7D               ld a,l
291+  8BAD C6 20            add a,$20
292+  8BAF 6F               ld l,a
293+  8BB0 38 04            jr c,2F
294+  8BB2 7C               ld a,h
295+  8BB3 D6 08            sub 8
296+  8BB5 67               ld h,a
297+  8BB6 7C           2 ld a,h
298+  8BB7 FE 58            cp $58
299+  8BB9 28 21            jr z,4F
300+  8BBB D1               pop de
301+  8BBC 7A           	ld a,d
302+  8BBD AE           	xor (hl)
303+  8BBE 77           	ld (hl),a
304+  8BBF 23           	inc hl
305+  8BC0 D1               pop de
306+  8BC1 7B           	ld a,e
307+  8BC2 AE           	xor (hl)
308+  8BC3 77           	ld (hl),a
309+  8BC4 2B           	dec hl
310+  8BC5 24           	inc h
311+  8BC6 7C               ld a,h
312+  8BC7 E6 07            and 7
313+  8BC9 20 0A            jr nz,3F
314+  8BCB 7D               ld a,l
315+  8BCC C6 20            add a,$20
316+  8BCE 6F               ld l,a
317+  8BCF 38 04            jr c,3F
318+  8BD1 7C               ld a,h
319+  8BD2 D6 08            sub 8
320+  8BD4 67               ld h,a
321+  8BD5 7C           3 ld a,h
322+  8BD6 FE 58            cp $58
323+  8BD8 28 02            jr z,4F
324+  8BDA 10 C1            djnz 1B
325+  8BDC ED 7B 0E 85  4 ld sp,(Stack)
326+  8BE0 C9           	ret
327+  8BE1
328+  8BE1 ED 73 0E 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BE5 FD F9        	ld sp,iy
330+  8BE7 06 08            ld b,8
331+  8BE9 D1           1 pop de
332+  8BEA 7B           	ld a,e
333+  8BEB AE           	xor (hl)
334+  8BEC 77           	ld (hl),a
335+  8BED 24            	inc h
336+  8BEE 7C               ld a,h
337+  8BEF E6 07            and 7
338+  8BF1 20 0A            jr nz,2F
339+  8BF3 7D               ld a,l
340+  8BF4 C6 20            add a,$20
341+  8BF6 6F               ld l,a
342+  8BF7 38 04            jr c,2F
343+  8BF9 7C               ld a,h
344+  8BFA D6 08            sub 8
345+  8BFC 67               ld h,a
346+  8BFD 7C           2 ld a,h
347+  8BFE FE 58            cp $58
348+  8C00 28 1C            jr z,4F
349+  8C02 D1               pop de
350+  8C03 7A           	ld a,d
351+  8C04 AE           	xor (hl)
352+  8C05 77           	ld (hl),a
353+  8C06 24           	inc h
354+  8C07 7C               ld a,h
355+  8C08 E6 07            and 7
356+  8C0A 20 0A            jr nz,3F
357+  8C0C 7D               ld a,l
358+  8C0D C6 20            add a,$20
359+  8C0F 6F               ld l,a
360+  8C10 38 04            jr c,3F
361+  8C12 7C               ld a,h
362+  8C13 D6 08            sub 8
363+  8C15 67               ld h,a
364+  8C16 7C           3 ld a,h
365+  8C17 FE 58            cp $58
366+  8C19 28 03            jr z,4F
367+  8C1B D1               pop de
368+  8C1C 10 CB            djnz 1B
369+  8C1E ED 7B 0E 85  4 ld sp,(Stack)
370+  8C22 C9           	ret
371+  8C23
372+  8C23              ; ---------------------------------------------------
373+  8C23
# file closed: Rutinas_de_impresion_sprites.asm
593   8C23              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C23              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C23              ;
  3+  8C23              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C23              ;
  5+  8C23              ; *****************************************************************************************************************************************************************************************
  6+  8C23              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C23
  8+  8C23 7C           calcula_tercio ld a,h
  9+  8C24 E6 18        	and $18
 10+  8C26 CB 2F        	sra a
 11+  8C28 CB 2F        	sra a
 12+  8C2A CB 2F        	sra a
 13+  8C2C C9           	ret
 14+  8C2D
# file closed: calcula_tercio.asm
594   8C2D              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C2D              ; -----------------------------------------------------------------------------------------
  2+  8C2D              ;
  3+  8C2D              ;   04/11/22
  4+  8C2D              ;
  5+  8C2D              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C2D              ;
  7+  8C2D              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C2D              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C2D              ;
 10+  8C2D              ;   DESTRUYE: HL y A. !!!!!
 11+  8C2D
 12+  8C2D CD 23 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C30 26 58            ld h,$58
 14+  8C32 84               add h
 15+  8C33 67               ld h,a
 16+  8C34 C9               ret
# file closed: Calcula_direccion_atributos.asm
595   8C35              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C35              ; ********** **********
  2+  8C35              ;
  3+  8C35              ;   5/11/22
  4+  8C35              ;
  5+  8C35              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C35              ;
  7+  8C35              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C35              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C35              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C35              ;
 11+  8C35              ;   NO DESTROYERSSSS !!!!!
 12+  8C35
 13+  8C35 E5           Define_atributos push hl
 14+  8C36 C5           	push bc
 15+  8C37 D5           	push de
 16+  8C38
 17+  8C38 CD 2D 8C     	call Calcula_direccion_atributos
 18+  8C3B
 19+  8C3B D9               exx
 20+  8C3C E5               push hl
 21+  8C3D D9               exx
 22+  8C3E D1               pop de
 23+  8C3F
 24+  8C3F 42               ld b,d
 25+  8C40 7B               ld a,e 									; (Attr) en A.
 26+  8C41
 27+  8C41 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C42 E5            	push hl 								; Guardo dirección de attr.
 29+  8C43
 30+  8C43              ; -----
 31+  8C43
 32+  8C43 77           2 ld (hl),a
 33+  8C44 0D           	dec c 									; Decremento (Columnas).
 34+  8C45 28 03        	jr z,1F
 35+  8C47 23           	inc hl
 36+  8C48 18 F9        	jr 2B
 37+  8C4A
 38+  8C4A E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C4B C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C4C
 41+  8C4C 05           	dec b									; Decremento (Filas).
 42+  8C4D 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C4F
 44+  8C4F 11 20 00     	ld de,32
 45+  8C52 A7           	and a
 46+  8C53 ED 5A        	adc hl,de
 47+  8C55 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C57
 49+  8C57 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C58 C1           	pop bc
 51+  8C59 E1           	pop hl
 52+  8C5A
 53+  8C5A C9           	ret
 54+  8C5B
# file closed: Define_atributos.asm
596   8C5B              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C5B              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C5B              ;
  3+  8C5B              ;
  4+  8C5B              ;	CLS.
  5+  8C5B              ;
  6+  8C5B              ;	Limpia la pantalla y define sus atributos.
  7+  8C5B              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C5B              ;
  9+  8C5B              ;	COLORES: 0 ..... NEGRO
 10+  8C5B              ;    		 1 ..... AZUL
 11+  8C5B              ; 			 2 ..... ROJO
 12+  8C5B              ;			 3 ..... MAGENTA
 13+  8C5B              ; 			 4 ..... VERDE
 14+  8C5B              ; 			 5 ..... CIAN
 15+  8C5B              ;			 6 ..... AMARILLO
 16+  8C5B              ; 			 7 ..... BLANCO
 17+  8C5B              ;
 18+  8C5B              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C5B              ;
 20+  8C5B              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C5B
 22+  8C5B
 23+  8C5B 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C5E 11 01 40     	LD DE,$4001
 25+  8C61 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C64 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C66 ED B0        	LDIR
 28+  8C68 01 FF 02     	LD BC,767
 29+  8C6B 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C6C ED B0        	LDIR
 31+  8C6E C9           	ret
 32+  8C6F
# file closed: Cls.asm
597   8C6F              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C6F              ; ******************************************************************************************************************************************************************************************
  2+  8C6F              ;
  3+  8C6F              ;   22/01/23
  4+  8C6F              ;
  5+  8C6F              ;	Mov_down
  6+  8C6F              ;
  7+  8C6F              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C6F              ;
  9+  8C6F              ;
 10+  8C6F 21 F9 84     Mov_down ld hl,Ctrl_0
 11+  8C72 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C74              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C74              ; 																	; _ en el caso de que no lo haya.
 14+  8C74 3A E6 84     	ld a,(Vel_down)
 15+  8C77 47           	ld b,a
 16+  8C78 2A D4 84         ld hl,(Posicion_actual)
 17+  8C7B CD 23 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C7E E6 02        	and 2
 19+  8C80 28 0F        	jr z,1F
 20+  8C82
 21+  8C82              ; Nos encontramos en el último tercio de pantalla.
 22+  8C82              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8C82
 24+  8C82 7C           	ld a,h
 25+  8C83 FE 57        	cp $57
 26+  8C85 20 0A        	jr nz,1F
 27+  8C87 7D           	ld a,l
 28+  8C88 C6 20        	add $20
 29+  8C8A 30 05        	jr nc,1F
 30+  8C8C              ; ------------------------------
 31+  8C8C CD 1D 8F     	call Reaparece_arriba
 32+  8C8F              ;	call Reinicio
 33+  8C8F              ; ------------------------------
 34+  8C8F 18 08        	jr 3F
 35+  8C91 CD CA 89     1 call NextScan
 36+  8C94 22 D4 84     	ld (Posicion_actual),hl
 37+  8C97 10 E2            djnz 2B
 38+  8C99 CD 33 8F     3 call Genera_coordenadas
 39+  8C9C C9           	ret
 40+  8C9D
 41+  8C9D
 42+  8C9D              ; ******************************************************************************************************************************************************************************************
 43+  8C9D              ;
 44+  8C9D              ;   22/01/23
 45+  8C9D              ;
 46+  8C9D              ;	Mov_up
 47+  8C9D              ;
 48+  8C9D              ; 	Mueve el Sprite hacia arriba.
 49+  8C9D              ;
 50+  8C9D              ;
 51+  8C9D 21 F9 84     Mov_up ld hl,Ctrl_0
 52+  8CA0 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8CA2              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8CA2              ; 																		; _ en el caso de que no lo haya.
 55+  8CA2 3A E5 84     	ld a,(Vel_up)
 56+  8CA5 47           	ld b,a
 57+  8CA6 2A D4 84     	ld hl,(Posicion_actual)
 58+  8CA9 CD 23 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CAC A7           	and a
 60+  8CAD 20 10        	jr nz,1F
 61+  8CAF
 62+  8CAF              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CAF              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CAF
 65+  8CAF 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CB0 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CB2 20 0B            jr nz,1F
 68+  8CB4 7D               ld a,l
 69+  8CB5 D6 20            sub $20
 70+  8CB7 30 06            jr nc,1F
 71+  8CB9 25               dec h
 72+  8CBA
 73+  8CBA              ; -----------------------------
 74+  8CBA CD 0D 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CBD              ;	call Reinicio
 76+  8CBD              ; -----------------------------
 77+  8CBD
 78+  8CBD 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CBF CD D9 89     1 call PreviousScan
 80+  8CC2 22 D4 84     	ld (Posicion_actual),hl
 81+  8CC5 10 E2            djnz 3B
 82+  8CC7 CD 33 8F     2 call Genera_coordenadas
 83+  8CCA C9           	ret
 84+  8CCB
 85+  8CCB              ; ******************************************************************************************************************************************************************************************
 86+  8CCB              ;
 87+  8CCB              ;	19/10/22
 88+  8CCB              ;
 89+  8CCB              ;	Mov_right.
 90+  8CCB              ;
 91+  8CCB              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8CCB              ;
 93+  8CCB
 94+  8CCB 21 F9 84     Mov_right ld hl,Ctrl_0
 95+  8CCE CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8CD0              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8CD0              ; 																	; _ en el caso de que no lo haya.
 98+  8CD0 3A D8 84     	ld a,(CTRL_DESPLZ)
 99+  8CD3 A7           	and a
100+  8CD4 28 0B        	jr z,9F
101+  8CD6
102+  8CD6 3A F9 84     	ld a,(Ctrl_0)
103+  8CD9 CB 7F        	bit 7,a
104+  8CDB 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8CDD 21 D8 84     	ld hl,CTRL_DESPLZ
106+  8CE0 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8CE1
108+  8CE1 3A F9 84     9 ld a,(Ctrl_0)
109+  8CE4 CB 77        	bit 6,a
110+  8CE6 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8CE8
112+  8CE8 CD CC 8E     	call Stop_Amadeus_right
113+  8CEB C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8CEC 18 4D        	jr 8F
115+  8CEE
116+  8CEE 3A D9 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8CF1 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8CF3 20 46        	jr nz,8F
119+  8CF5
120+  8CF5 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8CF8 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8CF9 28 40        	jr z,8F
123+  8CFB
124+  8CFB              ; ---------- ---------- ----------
125+  8CFB              ;
126+  8CFB              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8CFB
128+  8CFB 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8CFE FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D00 28 11        	jr z,1F
131+  8D02 38 06        	jr c,6F
132+  8D04 FE 04        	cp 4
133+  8D06 28 14        	jr z,7F
134+  8D08 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D0A
136+  8D0A              ; ---------- ---------- ----------
137+  8D0A              ;
138+  8D0A              ; Perfiles de velocidad
139+  8D0A              ;
140+  8D0A 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D0D FE FE        	cp $fe
142+  8D0F 20 2A        	jr nz,8F
143+  8D11 18 10        	jr 3F
144+  8D13 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D16 FE FD        	cp $fd
146+  8D18 20 21        	jr nz,8F
147+  8D1A 18 07        	jr 3F
148+  8D1C 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D1F FE FB        	cp $fb
150+  8D21 20 18        	jr nz,8F
151+  8D23
152+  8D23              ; ---------- ---------- ----------
153+  8D23
154+  8D23 CD FB 8E     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D26              ;	call Reinicio
156+  8D26
157+  8D26              ; ---------- ---------- ----------
158+  8D26              ;
159+  8D26              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D26
161+  8D26 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D28 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D29 CD 42 8D     	call DESPLZ_DER
164+  8D2C C1           	pop bc
165+  8D2D 10 F9        	djnz 5B
166+  8D2F 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D32 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D33 22 D4 84     	ld (Posicion_actual),hl
169+  8D36 CD 33 8F     	call Genera_coordenadas
170+  8D39 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D3B
172+  8D3B              ; ---------- ---------- ----------
173+  8D3B
174+  8D3B 2A D4 84     8 ld hl,(Posicion_actual)
175+  8D3E CD 42 8D     	call DESPLZ_DER
176+  8D41 C9           2 ret
177+  8D42
178+  8D42              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D42              ;
180+  8D42              ;	22/9/22
181+  8D42              ;
182+  8D42
183+  8D42 CD 51 8D     DESPLZ_DER call Desplaza_derecha
184+  8D45 CD 66 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D48 CD 8F 8D         call Ciclo_completo
186+  8D4B 21 F9 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D4E CB FE        	set 7,(hl)
188+  8D50 C9           	ret
189+  8D51
190+  8D51              ; ******************************************************************************************************************************************************************************************
191+  8D51              ;	14/9/22
192+  8D51              ;
193+  8D51
194+  8D51 3A E4 84     Desplaza_derecha ld a,(Vel_right)
195+  8D54 47           	ld b,a
196+  8D55 2A DE 84     	ld hl,(Puntero_DESPLZ)
197+  8D58 23           1 inc hl
198+  8D59 23           	inc hl
199+  8D5A 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D5C 22 DE 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D5F CD 29 86     	call Extrae_address
202+  8D62 22 D6 84     	ld (Puntero_objeto),hl
203+  8D65 C9           	ret
204+  8D66
205+  8D66              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8D66              ;
207+  8D66              ;	24/7/22
208+  8D66              ;
209+  8D66              ;	modifica_parametros_1er_DESPLZ_2
210+  8D66              ;
211+  8D66              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8D66              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8D66              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8D66
215+  8D66 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8D69 A7           	and a
217+  8D6A 20 1F        	jr nz,1F
218+  8D6C D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8D6E 32 D8 84         ld (CTRL_DESPLZ),a
220+  8D71 21 D3 84     	ld hl,Columns
221+  8D74 34           	inc (hl)
222+  8D75 3A E2 84     	ld a,(Cuad_objeto)
223+  8D78 E6 01        	and 1
224+  8D7A 28 0F        	jr z,1F
225+  8D7C 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8D7F 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8D80 22 D4 84     	ld (Posicion_actual),hl
228+  8D83 CD 33 8F     	call Genera_coordenadas
229+  8D86 CD D8 8E     	call Inc_CTRL_DESPLZ
230+  8D89 18 03        	jr 2F
231+  8D8B CD D8 8E     1 call Inc_CTRL_DESPLZ
232+  8D8E C9           2 ret
233+  8D8F
234+  8D8F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8D8F              ;
236+  8D8F              ;	24/7/22
237+  8D8F              ;
238+  8D8F              ;	Ciclo_completo.
239+  8D8F              ;
240+  8D8F              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8D8F              ;
242+  8D8F              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8D8F              ; 	Decrementamos (Columns).
244+  8D8F              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8D8F              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8D8F
247+  8D8F
248+  8D8F 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8D92 FE FF        	cp $ff
250+  8D94 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8D96 18 25        	jr 3f
252+  8D98 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8D9B 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8D9C AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8D9D 32 D8 84     	ld (CTRL_DESPLZ),a
256+  8DA0 3A E2 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8DA3 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DA5 20 0A        	jr nz,2F
259+  8DA7 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DAA 23           	inc hl
261+  8DAB 22 D4 84     	ld (Posicion_actual),hl
262+  8DAE CD 33 8F     	call Genera_coordenadas
263+  8DB1
264+  8DB1              ; Inicia el puntero de Sprite.
265+  8DB1
266+  8DB1 2A DC 84     2 ld hl,(Indice_Sprite)
267+  8DB4 22 DE 84     	ld (Puntero_DESPLZ),hl
268+  8DB7 CD 29 86     	call Extrae_address
269+  8DBA 22 D6 84     	ld (Puntero_objeto),hl
270+  8DBD
271+  8DBD C9           3 ret
272+  8DBE
273+  8DBE              ; ******************************************************************************************************************************************************************************************
274+  8DBE              ;
275+  8DBE              ;	21/01/23
276+  8DBE              ;
277+  8DBE              ;	Mov_left.
278+  8DBE              ;
279+  8DBE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DBE              ;
281+  8DBE              Mov_left
282+  8DBE
283+  8DBE 21 F9 84     	ld hl,Ctrl_0
284+  8DC1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DC3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DC3              ; 																	; _ en el caso de que no lo haya.
287+  8DC3 3A D8 84     	ld a,(CTRL_DESPLZ)
288+  8DC6 A7           	and a
289+  8DC7 20 19        	jr nz,10F
290+  8DC9
291+  8DC9 2A D6 84     	ld hl,(Puntero_objeto)
292+  8DCC 22 DE 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8DCF
294+  8DCF 3A F9 84     	ld a,(Ctrl_0)
295+  8DD2 CB 77        	bit 6,a
296+  8DD4 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8DD6
298+  8DD6 CD D2 8E     	call Stop_Amadeus_left
299+  8DD9 20 62        	jr nz,8F
300+  8DDB
301+  8DDB 2A DC 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8DDE 22 DE 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8DE1 C9           	ret
304+  8DE2
305+  8DE2 3A F9 84     10 ld a,(Ctrl_0)
306+  8DE5 CB 7F        	bit 7,a
307+  8DE7 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8DE9 21 D8 84     	ld hl,CTRL_DESPLZ
309+  8DEC 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8DED
311+  8DED 3A D9 84     11 ld a,(Coordenada_X)
312+  8DF0 A7           	and a
313+  8DF1 20 4A        	jr nz,8F
314+  8DF3 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8DF6 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8DF7 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8DF9
318+  8DF9              ; ---------- ---------- ----------
319+  8DF9
320+  8DF9 3A E3 84     	ld a,(Vel_left)
321+  8DFC FE 02        	cp 2
322+  8DFE 28 0F        	jr z,1F
323+  8E00 38 04        	jr c,6F
324+  8E02 FE 04        	cp 4
325+  8E04 28 12        	jr z,7F
326+  8E06
327+  8E06              ; ---------- ---------- ----------
328+  8E06
329+  8E06 3A D8 84     6 ld a,(CTRL_DESPLZ)
330+  8E09 FE F9        	cp $f9
331+  8E0B 20 30        	jr nz,8F
332+  8E0D 18 10        	jr 4F
333+  8E0F 3A D8 84     1 ld a,(CTRL_DESPLZ)
334+  8E12 FE FA        	cp $fa
335+  8E14 20 27        	jr nz,8F
336+  8E16 18 07        	jr 4F
337+  8E18 3A D8 84     7 ld a,(CTRL_DESPLZ)
338+  8E1B FE FC        	cp $fc
339+  8E1D 20 1E        	jr nz,8F
340+  8E1F
341+  8E1F              ; ---------- ---------- ----------
342+  8E1F
343+  8E1F              4
344+  8E1F CD E9 8E     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E22              ;	call Reinicio
346+  8E22
347+  8E22              ; ---------- ---------- ----------
348+  8E22
349+  8E22 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E24 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E25 2A D6 84     	ld hl,(Puntero_objeto)
352+  8E28 22 DE 84     	ld (Puntero_DESPLZ),hl
353+  8E2B CD 44 8E     	call DESPLZ_IZQ
354+  8E2E C1           	pop bc
355+  8E2F 10 F3        	djnz 5B
356+  8E31 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E34 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E35 22 D4 84     	ld (Posicion_actual),hl
359+  8E38 CD 33 8F     	call Genera_coordenadas
360+  8E3B 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E3D
362+  8E3D              ; ---------- ---------- ----------
363+  8E3D
364+  8E3D 2A D4 84     8 ld hl,(Posicion_actual)
365+  8E40 CD 44 8E     	call DESPLZ_IZQ
366+  8E43 C9           2 ret
367+  8E44
368+  8E44              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E44              ;
370+  8E44              ;	22/9/22
371+  8E44
372+  8E44              DESPLZ_IZQ
373+  8E44
374+  8E44 CD 53 8E     	call Desplaza_izquierda
375+  8E47 CD 68 8E         call modifica_parametros_1er_DESPLZ
376+  8E4A CD 8C 8E     	call Ciclo_completo_2
377+  8E4D 21 F9 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E50 CB BE        	res 7,(hl)
379+  8E52 C9           	ret
380+  8E53
381+  8E53 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
382+  8E56 47           	ld b,a
383+  8E57 2A DE 84     	ld hl,(Puntero_DESPLZ)
384+  8E5A 2B           1 dec hl
385+  8E5B 2B           	dec hl
386+  8E5C 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E5E 22 DE 84     	ld (Puntero_DESPLZ),hl
388+  8E61 CD 29 86     	call Extrae_address
389+  8E64 22 D6 84     	ld (Puntero_objeto),hl
390+  8E67 C9           	ret
391+  8E68
392+  8E68              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8E68              ;
394+  8E68              ;	modifica_parametros_1er_DESPLZ
395+  8E68              ;
396+  8E68              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8E68              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8E68              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8E68
400+  8E68 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8E6B A7           	and a
402+  8E6C 20 1A        	jr nz,1F
403+  8E6E 21 D3 84     	ld hl,Columns
404+  8E71 34           	inc (hl)
405+  8E72 3A E2 84     	ld a,(Cuad_objeto)
406+  8E75 E6 01        	and 1
407+  8E77 20 0F        	jr nz,1F
408+  8E79 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8E7C 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8E7D 22 D4 84     	ld (Posicion_actual),hl
411+  8E80 CD 33 8F     	call Genera_coordenadas
412+  8E83 CD BB 8E     	call Dec_CTRL_DESPLZ
413+  8E86 18 03        	jr 2F
414+  8E88 CD BB 8E     1 call Dec_CTRL_DESPLZ
415+  8E8B C9           2 ret
416+  8E8C
417+  8E8C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8E8C              ;
419+  8E8C 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8E8F FE F8        	cp $f8
421+  8E91 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8E93 18 25        	jr 3f
423+  8E95 21 D3 84     1 ld hl,Columns
424+  8E98 35           	dec (hl)
425+  8E99 AF           	xor a
426+  8E9A 32 D8 84     	ld (CTRL_DESPLZ),a
427+  8E9D 3A E2 84     	ld a,(Cuad_objeto)
428+  8EA0 E6 01        	and 1
429+  8EA2 28 0A        	jr z,2F
430+  8EA4 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EA7 2B           	dec hl
432+  8EA8 22 D4 84     	ld (Posicion_actual),hl
433+  8EAB CD 33 8F     	call Genera_coordenadas
434+  8EAE
435+  8EAE              ; Inicia el puntero de Sprite.
436+  8EAE
437+  8EAE 2A DC 84     2 ld hl,(Indice_Sprite)
438+  8EB1 22 DE 84     	ld (Puntero_DESPLZ),hl
439+  8EB4 CD 29 86     	call Extrae_address
440+  8EB7 22 D6 84     	ld (Puntero_objeto),hl
441+  8EBA C9           3 ret
442+  8EBB
443+  8EBB              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8EBB              ;
445+  8EBB              ;	Dec_CTRL_DESPLZ
446+  8EBB              ;
447+  8EBB              ;	Subrutina de [modifica_punteros].
448+  8EBB              ;
449+  8EBB              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8EBB
451+  8EBB 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8EBE 3A E3 84     	ld a,(Vel_left)
453+  8EC1 A7           	and a
454+  8EC2 28 06        	jr z,1F
455+  8EC4 47           	ld b,a
456+  8EC5 35           3 dec (hl)
457+  8EC6 10 FD        	djnz 3B
458+  8EC8 18 01        	jr 2F
459+  8ECA 35           1 dec (hl)
460+  8ECB C9           2 ret
461+  8ECC
462+  8ECC              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8ECC              ;
464+  8ECC              ;	19/10/22
465+  8ECC              ;
466+  8ECC              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8ECC              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8ECC
469+  8ECC 3A D9 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8ECF FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8ED1 C9           	ret
472+  8ED2
473+  8ED2              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8ED2              ;
475+  8ED2              ;	19/10/22
476+  8ED2              ;
477+  8ED2              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8ED2              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8ED2
480+  8ED2 3A D9 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8ED5 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8ED7 C9           	ret
483+  8ED8
484+  8ED8              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8ED8              ;
486+  8ED8              ;	24/7/22
487+  8ED8              ;
488+  8ED8              ;	Inc_CTRL_DESPLZ
489+  8ED8              ;
490+  8ED8              ;	Subrutina de [modifica_punteros].
491+  8ED8              ;
492+  8ED8              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8ED8
494+  8ED8 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8EDB 3A E4 84     	ld a,(Vel_right)
496+  8EDE A7           	and a
497+  8EDF 28 06        	jr z,1F
498+  8EE1 47           	ld b,a
499+  8EE2 34           3 inc (hl)
500+  8EE3 10 FD        	djnz 3B
501+  8EE5 18 01        	jr 2F
502+  8EE7 34           1 inc (hl)
503+  8EE8 C9           2 ret
504+  8EE9
505+  8EE9              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8EE9
507+  8EE9 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8EEC 01 1F 00     	ld bc,31
509+  8EEF A7           	and a
510+  8EF0 ED 4A        	adc hl,bc
511+  8EF2 22 D4 84     	ld (Posicion_actual),hl
512+  8EF5 21 F9 84     	ld hl,Ctrl_0														; $xxx1
513+  8EF8 CB C6        	set 0,(hl)
514+  8EFA C9           	ret
515+  8EFB
516+  8EFB              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8EFB
518+  8EFB 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8EFE 01 1F 00     	ld bc,31
520+  8F01 A7           	and a
521+  8F02 ED 42        	sbc hl,bc
522+  8F04 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F07 21 F9 84     	ld hl,Ctrl_0
524+  8F0A CB CE        	set 1,(hl)
525+  8F0C C9           	ret
526+  8F0D
527+  8F0D              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F0D
529+  8F0D 24           Reaparece_abajo inc h
530+  8F0E 01 E0 17     	ld bc,$17e0
531+  8F11 A7           	and a
532+  8F12 ED 4A        	adc hl,bc
533+  8F14 22 D4 84     	ld (Posicion_actual),hl
534+  8F17 21 F9 84     	ld hl,Ctrl_0
535+  8F1A CB D6        	set 2,(hl)
536+  8F1C C9           	ret
537+  8F1D
538+  8F1D              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F1D
540+  8F1D 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F20 A7           	and a
542+  8F21 ED 42        	sbc hl,bc
543+  8F23 22 D4 84     	ld (Posicion_actual),hl
544+  8F26 21 F9 84     	ld hl,Ctrl_0
545+  8F29 CB DE        	set 3,(hl)
546+  8F2B C9           	ret
547+  8F2C
548+  8F2C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F2C
550+  8F2C 2A E0 84     Reinicio ld hl,(Posicion_inicio)
551+  8F2F 22 D4 84     	ld (Posicion_actual),hl
552+  8F32 C9           	ret
# file closed: Direcciones.asm
598   8F33              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F33              ;	12/12/22
  2+  8F33              ;
  3+  8F33              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F33              ;	Fila superior "0", Columna izquierda "0".
  5+  8F33              ;
  6+  8F33              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F33              ;
  8+  8F33              ;	Modifica: A
  9+  8F33
 10+  8F33 C5           Genera_coordenadas push bc
 11+  8F34 E5           	push hl
 12+  8F35 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F38 7D           	ld a,l
 14+  8F39 E6 1F        	and $1f
 15+  8F3B 32 D9 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F3E CD 23 8C     	call calcula_tercio
 17+  8F41 47           	ld b,a
 18+  8F42 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F43 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F45 7D           	ld a,l
 21+  8F46 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F48 28 05        	jr z,2F
 23+  8F4A 0C           1 inc c
 24+  8F4B D6 20        	sub 32
 25+  8F4D 20 FB        	jr nz,1B
 26+  8F4F 0C           2 inc c
 27+  8F50 04           	inc b
 28+  8F51 05           	dec b
 29+  8F52 28 04        	jr z,3F
 30+  8F54 3E E0        	ld a,$e0
 31+  8F56 10 F2        	djnz 1B
 32+  8F58 79           3 ld a,c
 33+  8F59 3D           	dec a
 34+  8F5A 32 DA 84     	ld (Coordenada_y),a
 35+  8F5D E1           	pop hl
 36+  8F5E C1           	pop bc
 37+  8F5F C9           	ret
# file closed: Genera_coordenadas.asm
599   8F60              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F60
  2+  8F60
  3+  8F60              ;   11/8/22
  4+  8F60              ;
  5+  8F60              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F60              ;
  7+  8F60              ;   Mov_obj.asm
  8+  8F60              ;
  9+  8F60              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F60              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F60              ;
 12+  8F60              ;   Codificación:
 13+  8F60              ;
 14+  8F60              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F60
 16+  8F60 02 10 00     Izquierda db 2,%00010000,0
 17+  8F63 02 20 00     Derecha db 2,%00100000,0
 18+  8F66 02 80 00     Abajo db 2,%10000000,0
 19+  8F69 02 40 00     Arriba db 2,%01000000,0
 20+  8F6C
 21+  8F6C 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8F70 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8F74 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8F78 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8F7C 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8F80 60 42 60 40
 25+  8F84 63
 26+  8F85 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8F89 22 A3 80 A0
 27+  8F8D 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8F91 84 A0 83 A0
 28+  8F95 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8F99 80 A3 22 A0
 29+  8F9D 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8FA1 40 60 42 60
 30+  8FA5 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FA9
 32+  8FA9 60 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FAB 63 8F        Indice_mov_Derecha defw Derecha
 34+  8FAD 66 8F        Indice_mov_Abajo defw Abajo
 35+  8FAF 69 8F        Indice_mov_Arriba defw Arriba
 36+  8FB1 70 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  8FB3 74 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  8FB5 6C 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  8FB7 78 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  8FB9 7C 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  8FBB
 42+  8FBB 3A FF 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  8FBE A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  8FBF 28 02            jr z,1F
 45+  8FC1 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  8FC3 3A 00 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  8FC6 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  8FC8 32 00 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  8FCB              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  8FCB 2A FD 84         ld hl,(Puntero_mov)
 51+  8FCE 7E               ld a,(hl)
 52+  8FCF 32 FF 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  8FD2 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  8FD3 22 FD 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  8FD6
 56+  8FD6 3A 01 85     Decoder ld a,(Repetimos_db)
 57+  8FD9 A7               and a
 58+  8FDA 20 0C            jr nz,12F
 59+  8FDC 2A FD 84         ld hl,(Puntero_mov)
 60+  8FDF 7E               ld a,(hl)
 61+  8FE0 A7               and a
 62+  8FE1 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  8FE3 E6 0F             and $0f
 64+  8FE5 32 01 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  8FE8              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  8FE8 2A FD 84     12 ld hl,(Puntero_mov)
 67+  8FEB CB 7E            bit 7,(hl)
 68+  8FED 28 03            jr z,2F
 69+  8FEF CD 6F 8C         call Mov_down
 70+  8FF2 2A FD 84     2 ld hl, (Puntero_mov)
 71+  8FF5 CB 76            bit 6,(hl)
 72+  8FF7 28 03            jr z,3F
 73+  8FF9 CD 9D 8C         call Mov_up
 74+  8FFC 2A FD 84     3 ld hl, (Puntero_mov)
 75+  8FFF CB 6E            bit 5,(hl)
 76+  9001 28 03            jr z,4F
 77+  9003 CD CB 8C         call Mov_right
 78+  9006 2A FD 84     4 ld hl, (Puntero_mov)
 79+  9009 CB 66            bit 4,(hl)
 80+  900B 28 03            jr z,5F
 81+  900D CD BE 8D         call Mov_left
 82+  9010
 83+  9010              ; ---------- --------- --------- ---------- ----------
 84+  9010
 85+  9010 3A 01 85     5 ld a,(Repetimos_db)
 86+  9013 A7               and a
 87+  9014 28 07            jr z,6F
 88+  9016 3D               dec a
 89+  9017 32 01 85         ld (Repetimos_db),a
 90+  901A 28 01            jr z,6f
 91+  901C C9           11 ret
 92+  901D 21 FF 84     6 ld hl,Contador_db_mov
 93+  9020 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  9021 2A FD 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9024 23               inc hl
 96+  9025 22 FD 84         ld (Puntero_mov),hl
 97+  9028 18 F2            jr 11B
 98+  902A 2A FB 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  902D 3A 00 85         ld a,(Incrementa_puntero)
100+  9030 47               ld b,a
101+  9031 23           8 inc hl
102+  9032 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  9034 5E               ld e,(hl)
104+  9035 23               inc hl
105+  9036 56               ld d,(hl)
106+  9037 EB               ex de,hl
107+  9038 22 FD 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  903B 18 DF            jr 11B
109+  903D
110+  903D              ; ---------- --------- --------- ---------- ----------
111+  903D              ;
112+  903D              ;   11/8/22
113+  903D              ;
114+  903D              ;   Prepara_Puntero_mov
115+  903D
116+  903D E5           Prepara_Puntero_mov push hl
117+  903E D5               push de
118+  903F 2A FB 84         ld hl,(Puntero_indice_mov)
119+  9042 5E               ld e,(hl)
120+  9043 23               inc hl
121+  9044 56               ld d,(hl)
122+  9045 EB               ex de,hl
123+  9046 22 FD 84         ld (Puntero_mov),hl
124+  9049 D1               pop de
125+  904A E1               pop hl
126+  904B C9               ret
127+  904C
128+  904C              ; ---------- --------- --------- ---------- ----------
129+  904C              ;
130+  904C              ;   11/8/22
131+  904C              ;
132+  904C              ;   Reinicia_el_movimiento
133+  904C
134+  904C CD 3D 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  904F AF               xor a
136+  9050 32 FF 84         ld (Contador_db_mov),a
137+  9053 32 00 85         ld (Incrementa_puntero),a
138+  9056 C3 BB 8F         jp Movimiento
139+  9059
140+  9059              ; ---------- --------- --------- ---------- ----------
141+  9059
142+  9059
143+  9059
144+  9059
145+  9059
146+  9059
147+  9059
148+  9059
149+  9059
150+  9059
151+  9059
152+  9059
153+  9059
154+  9059
155+  9059
156+  9059
157+  9059
158+  9059
# file closed: Patrones_de_mov.asm
600   9059              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9059              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9059              ;
  3+  9059              ;	3/1/23
  4+  9059              ;
  5+  9059              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9059
  7+  9059              ;	ADC HL,SP	LD (addr),SP
  8+  9059              ;	ADD HL,SP	LD SP,(addr)
  9+  9059              ;	ADD IX,SP	LD SP,nn
 10+  9059              ; 	ADD IY,SP	LD SP,HL
 11+  9059              ;				LD SP,IX
 12+  9059              ;	DEC SP		LD SP,IY
 13+  9059
 14+  9059              ;	EX (SP),HL
 15+  9059              ;	EX (SP),IX
 16+  9059              ;	EX (SP),IY
 17+  9059
 18+  9059              ;	INC SP
 19+  9059
 20+  9059
 21+  9059                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0E 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 12 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 12 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0E 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
601   7FC0
602   7FC0              	SAVESNA "Pruebas.sna", START
603   7FC0
604   7FC0
605   7FC0
# file closed: Banco_de_pruebas.asm
