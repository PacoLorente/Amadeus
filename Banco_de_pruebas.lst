# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 89 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 31/01/23
  5+  83C0
  6+  83C0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83C0
  8+  83C0 06 84        	defw Entidad_1
  9+  83C2 40 84        	defw Entidad_2
 10+  83C4 7A 84        	defw Entidad_3
 11+  83C6 B4 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6
 28+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite_der).
 29+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite_izq).
 30+  83DA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83DC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83DE
 33+  83DE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83E0 04           	db 4 											; (Cuad_objeto).
 35+  83E1
 36+  83E1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83E5
 38+  83E5 00 00        	db 0,0											; Variables_de_borrado
 39+  83E7 00 00        	defw 0											;	" " " " " " "
 40+  83E9 00 00        	defw 0											;	" " " " " " "
 41+  83EB 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 42+  83EF
 43+  83EF 00 00        	db 0,0											; Variables_de_pintado
 44+  83F1 00 00        	defw 0											;	" " " " " " "
 45+  83F3 00 00        	defw 0											;	" " " " " " "
 46+  83F5 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 47+  83F9
 48+  83F9 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  83FB
 50+  83FB 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  83FF 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8402
 53+  8402 00           	db 0 											; (Columnas).
 54+  8403 00 00        	defw 0											; (Limite_horizontal).
 55+  8405 00           	db 0											; (Limite_vertical).
 56+  8406
 57+  8406              ; ---------- ---------- ---------- ---------- ----------
 58+  8406
 59+  8406 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8408 00 00        	defw 0											; (Posicion_actual).
 61+  840A 00 00        	defw 0 											; (Puntero_objeto).
 62+  840C 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 63+  840F
 64+  840F 00           	db %00000000 									; (Attr).
 65+  8410
 66+  8410 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8412 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8414 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8416 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8418
 71+  8418 00 00        	defw 0											; (Posicion_inicio).
 72+  841A 00           	db 0											; (Cuad_objeto).
 73+  841B
 74+  841B 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  841F
 76+  841F 00 00        	db 0,0										    ; Variables_de_borrado
 77+  8421 00 00        	defw 0											;	" " " " " " "
 78+  8423 00 00        	defw 0											;	" " " " " " "
 79+  8425 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 80+  8429
 81+  8429 00 00        	db 0,0											; Variables_de_pintado
 82+  842B 00 00        	defw 0											;	" " " " " " "
 83+  842D 00 00        	defw 0											;	" " " " " " "
 84+  842F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 85+  8433
 86+  8433 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8435
 88+  8435 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8439 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  843C
 91+  843C 00           	db 0 											; (Columnas).
 92+  843D 00 00        	defw 0											; (Limite_horizontal).
 93+  843F 00           	db 0											; (Limite_vertical).
 94+  8440
 95+  8440              ; ---------- ---------- ---------- ---------- ----------
 96+  8440
 97+  8440 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  8442 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8444 00 00        	defw 0											; (Puntero_objeto).
100+  8446 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
101+  8449
102+  8449 02           	db %00000010									; (Attr).
103+  844A
104+  844A 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  844C 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  844E 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  8450 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  8452
109+  8452 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8454 02           	db 2											; (Cuad_objeto).
111+  8455
112+  8455 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8459
114+  8459 00 00        	db 0,0											; Variables_de_borrado
115+  845B 00 00        	defw 0										 	;	" " " " " " "
116+  845D 00 00        	defw 0											;	" " " " " " "
117+  845F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
118+  8463
119+  8463 00 00        	db 0,0											; Variables_de_pintado
120+  8465 00 00        	defw 0											;	" " " " " " "
121+  8467 00 00        	defw 0											;	" " " " " " "
122+  8469 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
123+  846D
124+  846D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  846F
126+  846F 78 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  8473 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8476
129+  8476 00           	db 0 											; (Columnas).
130+  8477 00 00        	defw 0											; (Limite_horizontal).
131+  8479 00           	db 0											; (Limite_vertical).
132+  847A
133+  847A              ; ---------- ---------- ---------- ---------- ----------
134+  847A
135+  847A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  847C 00 00        	defw 0                                          ; (Posicion_actual).
137+  847E 00 00        	defw 0											; (Puntero_objeto).
138+  8480 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
139+  8483
140+  8483 04           	db %00000100									; (Attr).
141+  8484
142+  8484 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8486 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8488
145+  8488 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  848A 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  848C
148+  848C A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  848E 01           	db 1											; (Cuad_objeto).
150+  848F
151+  848F 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  8493
153+  8493 00 00        	db 0,0											; Variables_de_borrado
154+  8495 00 00        	defw 0										 	;	" " " " " " "
155+  8497 00 00        	defw 0											;	" " " " " " "
156+  8499 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
157+  849D
158+  849D 00 00        	db 0,0											; Variables_de_pintado
159+  849F 00 00        	defw 0											;	" " " " " " "
160+  84A1 00 00        	defw 0											;	" " " " " " "
161+  84A3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
162+  84A7
163+  84A7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84A9
165+  84A9 7A 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84AD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84B0
168+  84B0 00           	db 0 											; (Columnas).
169+  84B1 00 00        	defw 0											; (Limite_horizontal).
170+  84B3 00           	db 0											; (Limite_vertical).
171+  84B4
172+  84B4              ; ---------- ---------- ---------- ---------- ----------
173+  84B4
174+  84B4 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84B6 00 00        	defw 0                                          ; (Posicion_actual).
176+  84B8 00 00        	defw 0 											; (Puntero_objeto).
177+  84BA 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
178+  84BD
179+  84BD 01           	db %00000001									; (Attr).
180+  84BE
181+  84BE 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84C0 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84C2
184+  84C2 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84C4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84C6
187+  84C6 BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84C8 00           	db 0											; (Cuad_objeto).
189+  84C9
190+  84C9 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84CD
192+  84CD 00 00        	db 0,0											; Variables_de_borrado
193+  84CF 00 00        	defw 0										 	;	" " " " " " "
194+  84D1 00 00        	defw 0											;	" " " " " " "
195+  84D3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
196+  84D7
197+  84D7 00 00        	db 0,0											; Variables_de_pintado
198+  84D9 00 00        	defw 0											;	" " " " " " "
199+  84DB 00 00        	defw 0											;	" " " " " " "
200+  84DD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
201+  84E1
202+  84E1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84E3
204+  84E3 6A 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84E7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84EA
207+  84EA 00           	db 0 											; (Columnas).
208+  84EB 00 00        	defw 0											; (Limite_horizontal).
209+  84ED 00           	db 0											; (Limite_vertical).
210+  84EE
# file closed: Entidades.asm
 21   84EE
 22   84EE              ; ******************************************************************************************************************************************************************************************
 23   84EE              ; Constantes.
 24   84EE              ; ******************************************************************************************************************************************************************************************
 25   84EE              ;
 26   84EE              ; 8/11/22
 27   84EE              ;
 28   84EE              ; Constantes generales.
 29   84EE              ;
 30   84EE
 31   84EE              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84EE              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84EE              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84EE              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84EE              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84EE
 37   84EE              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84EE              ;                               				        ; De momento situamos este almacén en $7000.
 39   84EE
 40   84EE
 41   84EE              ; ******************************************************************************************************************************************************************************************
 42   84EE              ; Variables.
 43   84EE              ; ******************************************************************************************************************************************************************************************
 44   84EE              ;
 45   84EE              ; 10/11/22
 46   84EE              ;
 47   84EE              ; Variables de DRAW. (Motor principal).
 48   84EE              ;
 49   84EE              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84EE
 51   84EE 02           Filas db 2												; Filas. [DRAW]
 52   84EF 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84F0 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84F2 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84F4 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 56   84F5              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84F5              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84F5 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 59   84F6 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 60   84F7
 61   84F7              ; ---------- ---------- ----------
 62   84F7
 63   84F7
 64   84F7 04           Attr db %00000100										; Atributos de la entidad:
 65   84F8
 66   84F8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 67   84F8              ;
 68   84F8              ;	COLORES: 0 ..... NEGRO
 69   84F8              ;    		 1 ..... AZUL
 70   84F8              ; 			 2 ..... ROJO
 71   84F8              ;			 3 ..... MAGENTA
 72   84F8              ; 			 4 ..... VERDE
 73   84F8              ; 			 5 ..... CIAN
 74   84F8              ;			 6 ..... AMARILLO
 75   84F8              ; 			 7 ..... BLANCO
 76   84F8
 77   84F8 80 81        Indice_Sprite_der defw Indice_Badsat_der
 78   84FA 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 79   84FC 00 00        Puntero_DESPLZ_der defw 0
 80   84FE 00 00        Puntero_DESPLZ_izq defw 0
 81   8500
 82   8500 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 83   8502 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 84   8503
 85   8503              ; Variables de objeto. (Características).
 86   8503
 87   8503 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 88   8504 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 89   8505 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 90   8506 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 91   8507
 92   8507 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 93   8509 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 94   850B 00 00        	defw 0
 95   850D 00 00 00 00  	db 0,0,0,0
 96   8511
 97   8511 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 98   8513 00 00        	defw 0
 99   8515 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
100   8517 00 00 00 00  	db 0,0,0,0
101   851B
102   851B              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
103   851B
104   851B 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
105   851C              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
106   851C              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
107   851C              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
108   851C              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
109   851C              ;
110   851C              ; 														DESCRIPCIÖN:
111   851C              ;
112   851C              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
113   851C              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
114   851C              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
115   851C              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
116   851C              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
117   851C              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
118   851C              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
119   851C              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
120   851C              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
121   851C              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
122   851C              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
123   851C              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
124   851C              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
125   851C              ;
126   851C              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
127   851C              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
128   851C              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
129   851C
130   851C 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
131   851D
132   851D              ; Movimiento.
133   851D
134   851D 6A 90        Puntero_indice_mov defw Indice_mov_Izquierda
135   851F 00 00        Puntero_mov defw 0
136   8521 00           Contador_db_mov db 0
137   8522 00           Incrementa_puntero db 0
138   8523 00           Repetimos_db db 0
139   8524
140   8524
141   8524              ; Variables de funcionamiento. [DRAW].
142   8524
143   8524 00           Columnas db 0
144   8525 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
145   8527              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   8527 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   8528
148   8528              ; 59 Bytes por entidad.
149   8528              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
150   8528              ;					         		---------;      ;---------
151   8528
152   8528
153   8528              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   8528              ; Gestión de ENTIDADES.
155   8528
156   8528 00 00        Puntero_store_entidades defw 0
157   852A 00 00        Puntero_restore_entidades defw 0
158   852C 00 00        Indice_restore defw 0
159   852E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
160   852F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
161   8530              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
162   8530              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
163   8530              ;														; _ (Numero_de_malotes)="0".
164   8530 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
165   8532              ;														; _variable para almacenar lo posición del puntero_
166   8532              ; 														; _de pila, SP.
167   8532 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
168   8534              ;														; La utiliza la rutina [Extrae_foto_registros].
169   8534 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
170   8536              ;														; _el snapshot de los registros de la siguiente entidad.
171   8536              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
172   8536
173   8536              ; Gestión de FRAMES.
174   8536
175   8536 00           Switch db 0
176   8537
177   8537              ; Variables de Raster y localización en pantalla.
178   8537
179   8537 00 FF        Temp_Raster defw $ff00
180   8539
181   8539              ; Rutina principal *************************************************************************************************************************************************************************
182   8539              ;
183   8539              ;	14/11/22
184   8539
185   8539 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
186   853C
187   853C 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
188   853E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
189   8540 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
190   8542 F3           	DI
191   8543
192   8543 3E 01        	ld a,1
193   8545 D3 FE        	out ($fe),a
194   8547
195   8547 3E 07        	ld a,%00000111
196   8549 CD 26 8D     	call Cls
197   854C
198   854C              ;	call Pinta_FILAS
199   854C
200   854C CD 53 87     	call Pulsa_ENTER
201   854F
202   854F 21 2E 85     	ld hl,Numero_de_entidades
203   8552 46           	ld b,(hl)
204   8553 04           	inc b
205   8554 05           	dec b
206   8555 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
207   8557
208   8557              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
209   8557              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
210   8557              ;	Pintamos el resto de entidades:
211   8557
212   8557 CD 6F 86     	call Inicia_punteros_de_entidades
213   855A
214   855A              ;	INICIA ENTIDADES!!!!!
215   855A
216   855A C5           1 push bc  												; Guardo el contador de entidades.
217   855B CD A2 86      	call Inicia_Puntero_objeto
218   855E CD AA 87     	call Draw
219   8561 CD A0 7F     	call Guarda_foto_registros
220   8564 CD EE 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
221   8567 C1           	pop bc
222   8568 10 F0        	djnz 1B  											; Decremento el contador de entidades.
223   856A
224   856A              ; 	INICIA AMADEUS!!!!!
225   856A
226   856A CD 2F 87     3 call Restore_Amadeus
227   856D CD A2 86     	call Inicia_Puntero_objeto
228   8570 CD AA 87     	call Draw
229   8573 CD A0 7F     	call Guarda_foto_registros
230   8576 CD 41 87     	call Store_Amadeus
231   8579
232   8579              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
233   8579
234   8579 CD 6F 86     	call Inicia_punteros_de_entidades
235   857C CD 1D 87     	call Restore_Primera_entidad
236   857F
237   857F 3A 2E 85     	ld a,(Numero_de_entidades)
238   8582 3C           	inc a
239   8583 32 2F 85     	ld (Numero_de_malotes),a
240   8586
241   8586 FB           2 ei
242   8587 18 FD        	jr 2B
243   8589
244   8589              ; -----------------------------------------------------------------------------------
245   8589
246   8589              Frame
247   8589
248   8589              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
249   8589              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
250   8589
251   8589 3E 07            ld a,7
252   858B D3 FE            out ($fe),a
253   858D CD AE 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
254   8590 3E 01            ld a,1
255   8592 D3 FE            out ($fe),a
256   8594
257   8594
258   8594              ;	jr $
259   8594
260   8594              ; ----------------------------------------------------------------------
261   8594
262   8594 21 00 70     	ld hl,Album_de_fotos
263   8597 22 34 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
264   859A              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
265   859A 3A 2E 85         ld a,(Numero_de_entidades)
266   859D 47               ld b,a
267   859E A7           	and a
268   859F 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
269   85A1
270   85A1 C5           2 push bc
271   85A2 CD E8 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
272   85A5 3A 1B 85     	ld a,(Ctrl_0)
273   85A8 CB 67        	bit 4,a
274   85AA 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
275   85AC CD 36 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
276   85AF 21 1B 85     1 ld hl,Ctrl_0
277   85B2 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
278   85B4 AF           	xor a
279   85B5 32 1C 85     	ld (Obj_dibujado),a
280   85B8 CD EE 86     	call Store_Restore_entidades
281   85BB C1           	pop bc
282   85BC 10 E3        	djnz 2B
283   85BE
284   85BE CD 2F 87     4 call Restore_Amadeus
285   85C1 CD 07 86     	call Mov_Amadeus
286   85C4 3A 1B 85     	ld a,(Ctrl_0)
287   85C7 CB 67        	bit 4,a
288   85C9 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
289   85CB CD 36 86     	call Guarda_foto_entidad_a_pintar
290   85CE
291   85CE 21 1B 85     3 ld hl,Ctrl_0
292   85D1 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
293   85D3 AF           	xor a
294   85D4 32 1C 85     	ld (Obj_dibujado),a
295   85D7 CD 41 87     	call Store_Amadeus
296   85DA
297   85DA              ; -----
298   85DA
299   85DA CD 6F 86     	call Inicia_punteros_de_entidades
300   85DD CD 1D 87     	call Restore_Primera_entidad
301   85E0 CD 85 86     	call Calcula_numero_de_malotes
302   85E3
303   85E3 3E 00        	ld a,0
304   85E5 D3 FE        	out ($fe),a
305   85E7 C9           	ret
306   85E8
307   85E8              ; --------------------------------------------------------------------------------------------------------------
308   85E8              ;
309   85E8              ;	29/1/23
310   85E8
311   85E8              Mov_obj
312   85E8
313   85E8              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
314   85E8
315   85E8 AF           	xor a
316   85E9 32 1C 85     	ld (Obj_dibujado),a
317   85EC CD 40 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
318   85EF              ;														; Obj_dibujado="0".
319   85EF              ; Movemos Entidades malignas.
320   85EF
321   85EF CD 7C 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
322   85F2 3A 1B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
323   85F5 CB 67        	bit 4,a
324   85F7 C8           	ret z
325   85F8
326   85F8              ; ---------
327   85F8
328   85F8 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
329   85FA 32 1C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
330   85FD CD 40 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
331   8600 CD 57 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
332   8603 CD 26 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
333   8606 C9           	ret													; _de la misma.
334   8607
335   8607              ; --------------------------------------------------------------------------------------------------------------
336   8607              ;
337   8607              ;	29/1/23
338   8607
339   8607              Mov_Amadeus
340   8607
341   8607 AF           	xor a
342   8608 32 1C 85     	ld (Obj_dibujado),a
343   860B CD 40 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
344   860E              ;														; Obj_dibujado="0".
345   860E              ; Movemos Amadeus.
346   860E
347   860E CD 67 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
348   8611 3A 1B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
349   8614 CB 67        	bit 4,a
350   8616 C8           	ret z
351   8617
352   8617              ; ---------
353   8617
354   8617 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
355   8619 32 1C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
356   861C CD 40 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
357   861F CD 57 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
358   8622 CD 26 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
359   8625 C9           	ret													; _de la nave.
360   8626
361   8626              ; --------------------------------------------------------------------------------------------------------------
362   8626              ;
363   8626              ;	31/01/23
364   8626              ;
365   8626              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
366   8626
367   8626              Guarda_foto_entidad_a_borrar
368   8626
369   8626 CD 84 8A     	call Prepara_draw
370   8629 CD BE 89     	call calcula_CColumnass
371   862C CD F5 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
372   862F CD 4A 8A     	call Define_rutina_de_impresion
373   8632 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
374   8635 C9           	ret
375   8636
376   8636              ; --------------------------------------------------------------------------------------------------------------
377   8636              ;
378   8636              ;	31/01/23
379   8636              ;
380   8636              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
381   8636              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
382   8636
383   8636              Guarda_foto_entidad_a_pintar
384   8636
385   8636 CD 63 86     	call Repone_pintar
386   8639 CD AA 87     	call Draw
387   863C CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
388   863F C9           	ret
389   8640
390   8640              ; --------------------------------------------------------------------------------------------------------------
391   8640              ;
392   8640              ;
393   8640
394   8640 21 EE 84     Prepara_var_pintado_borrado	ld hl,Filas
395   8643 3A 1C 85     	ld a,(Obj_dibujado)
396   8646 A7           	and a
397   8647 28 05        	jr z,1F
398   8649 11 11 85     	ld de,Variables_de_pintado
399   864C 18 03        	jr 2F
400   864E 11 07 85     1 ld de,Variables_de_borrado
401   8651 01 09 00     2 ld bc,9
402   8654 ED B0        	ldir
403   8656 C9           	ret
404   8657
405   8657              ; --------------------------------------------------------------------------------------------------------------
406   8657
407   8657 21 07 85     Repone_borrar ld hl,Variables_de_borrado
408   865A 11 EE 84     	ld de,Filas
409   865D 01 09 00     	ld bc,9
410   8660 ED B0        	ldir
411   8662 C9           	ret
412   8663
413   8663 21 11 85     Repone_pintar ld hl,Variables_de_pintado
414   8666 11 EE 84     	ld de,Filas
415   8669 01 09 00     	ld bc,9
416   866C ED B0        	ldir
417   866E C9           	ret
418   866F
419   866F              ; *************************************************************************************************************************************************************
420   866F              ;
421   866F              ; 8/1/23
422   866F              ;
423   866F              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
424   866F              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
425   866F              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
426   866F
427   866F              ; Destruye HL y DE !!!!!
428   866F
429   866F              Inicia_punteros_de_entidades
430   866F
431   866F 21 C0 83     	ld hl,Indice_de_entidades
432   8672 CD 9C 86         call Extrae_address
433   8675 22 28 85         ld (Puntero_store_entidades),hl
434   8678 21 C2 83     	ld hl,Indice_de_entidades+2
435   867B 22 2C 85     	ld (Indice_restore),hl
436   867E CD 9C 86     	call Extrae_address
437   8681 22 2A 85     	ld (Puntero_restore_entidades),hl
438   8684 C9               ret
439   8685
440   8685              ; -------------------------------------------------------------------------------------------------------------
441   8685              ;
442   8685              ; 30/1/23
443   8685              ;
444   8685
445   8685 2A 34 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
446   8688 7D           	ld a,l
447   8689 A7           	and a
448   868A 28 0C        	jr z,3F
449   868C AF           	xor a
450   868D 67           	ld h,a
451   868E 7D           	ld a,l
452   868F D6 06        1 sub 6
453   8691 28 03        	jr z,2F
454   8693 24           	inc h
455   8694 18 F9        	jr 1B
456   8696 24           2 inc h
457   8697 7C           	ld a,h
458   8698 32 2F 85     3 ld (Numero_de_malotes),a
459   869B C9           	ret
460   869C
461   869C              ; *************************************************************************************************************************************************************
462   869C              ;
463   869C              ; 20/10/22
464   869C              ;
465   869C              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
466   869C              ;
467   869C              ; Destruye el puntero y DE !!!!!
468   869C
469   869C 5E           Extrae_address ld e,(hl)
470   869D 23           	inc hl
471   869E 56           	ld d,(hl)
472   869F 2B           	dec hl
473   86A0 EB           	ex de,hl
474   86A1 C9           	ret
475   86A2
476   86A2              ; *************************************************************************************************************************************************************
477   86A2              ;
478   86A2              ;	3/2/23
479   86A2              ;
480   86A2              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
481   86A2              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
482   86A2              ;
483   86A2              ;   Destruye HL y BC !!!!!,
484   86A2              ;
485   86A2              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
486   86A2              ;					"0" ..... Izquierda.
487   86A2
488   86A2              Inicia_Puntero_objeto
489   86A2
490   86A2 3A 02 85     	ld a,(Cuad_objeto)
491   86A5 E6 01        	and 1
492   86A7 F5           	push af
493   86A8 CC C7 86     	call z,Inicia_puntero_objeto_izq
494   86AB F1           	pop af
495   86AC C8           	ret z
496   86AD CD B1 86     	call Inicia_puntero_objeto_der
497   86B0 C9           	ret
498   86B1
499   86B1              ; Arrancamos desde la parte izquierda de la pantalla.
500   86B1              ; Iniciamos (Indice_Sprite_der).
501   86B1
502   86B1 2A F8 84     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
503   86B4 22 FC 84     	ld (Puntero_DESPLZ_der),hl
504   86B7 CD 9C 86     	call Extrae_address
505   86BA 22 F2 84     	ld (Puntero_objeto),hl
506   86BD
507   86BD 2A FA 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
508   86C0 CD 9C 86     	call Extrae_address
509   86C3 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
510   86C6 C9           	ret
511   86C7
512   86C7              ; Arrancamos desde la parte derecha de la pantalla.
513   86C7              ; Iniciamos (Indice_Sprite_izq).
514   86C7
515   86C7 2A FA 84     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
516   86CA 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
517   86CD CD 9C 86     	call Extrae_address
518   86D0 22 F2 84     	ld (Puntero_objeto),hl
519   86D3
520   86D3 2A F8 84     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
521   86D6 CD 9C 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
522   86D9 22 FC 84     	ld (Puntero_DESPLZ_der),hl
523   86DC C9           	ret
524   86DD
525   86DD              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
526   86DD
527   86DD 21 10 83     	ld hl,Amadeus
528   86E0 ED 4B F2 84  	ld bc,(Puntero_objeto)
529   86E4 B7 ED 42     	sub hl,bc
530   86E7 C0           	ret nz
531   86E8 21 1B 85     	ld hl,Ctrl_0
532   86EB CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
533   86ED C9           	ret 												; _de nuestra nave en los extremos.
534   86EE
535   86EE              ; *************************************************************************************************************************************************************
536   86EE              ;
537   86EE              ;	8/1/23
538   86EE              ;
539   86EE              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
540   86EE              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
541   86EE
542   86EE              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
543   86EE              ;	_de la 2ª y 3ª entidad respectivamente.
544   86EE
545   86EE
546   86EE
547   86EE              Store_Restore_entidades
548   86EE
549   86EE E5           	push hl
550   86EF D5           	push de
551   86F0 C5            	push bc
552   86F1
553   86F1              ;	STORE !!!!!
554   86F1              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
555   86F1
556   86F1 21 EE 84     	ld hl,Filas
557   86F4 ED 5B 28 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
558   86F8 01 3A 00     	ld bc,58
559   86FB ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
560   86FD
561   86FD              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
562   86FD
563   86FD 2A 2A 85     	ld hl,(Puntero_restore_entidades)
564   8700 22 28 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
565   8703 11 EE 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
566   8706 01 3A 00     	ld bc,58
567   8709 ED B0        	ldir
568   870B
569   870B              ;	Incrementa RESTORE !!!!!
570   870B
571   870B 2A 2C 85         ld hl,(Indice_restore)
572   870E 23           	inc hl
573   870F 23           	inc hl
574   8710 22 2C 85     	ld (Indice_restore),hl
575   8713 CD 9C 86         call Extrae_address
576   8716 22 2A 85         ld (Puntero_restore_entidades),hl
577   8719 C1           	pop bc
578   871A D1           	pop de
579   871B E1           	pop hl
580   871C C9           	ret
581   871D
582   871D              ; **************************************************************************************************
583   871D              ;
584   871D              ;	29/10/22
585   871D              ;
586   871D              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
587   871D
588   871D E5           Restore_Primera_entidad push hl
589   871E D5           	push de
590   871F C5            	push bc
591   8720 2A 28 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
592   8723 11 EE 84     	ld de,Filas
593   8726 01 3A 00     	ld bc,58
594   8729 ED B0        	ldir
595   872B C1           	pop bc
596   872C D1           	pop de
597   872D E1           	pop hl
598   872E C9           	ret
599   872F
600   872F              ; **************************************************************************************************
601   872F              ;
602   872F              ;	25/01/23
603   872F              ;
604   872F              ;	Restore_Amadeus
605   872F              ;
606   872F              ;	Cargamos en DRAW los parámetros de Amadeus.
607   872F              ;
608   872F
609   872F E5           Restore_Amadeus	push hl
610   8730 D5           	push de
611   8731 C5            	push bc
612   8732 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
613   8735 11 EE 84     	ld de,Filas
614   8738 01 3A 00     	ld bc,58
615   873B ED B0        	ldir
616   873D C1           	pop bc
617   873E D1           	pop de
618   873F E1           	pop hl
619   8740 C9           	ret
620   8741
621   8741              ; *************************************************************************************************************************************************************
622   8741              ;
623   8741              ;	29/01/23
624   8741              ;
625   8741              ;	Store_Amadeus
626   8741              ;
627   8741              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
628   8741              ;
629   8741
630   8741 E5           Store_Amadeus push hl
631   8742 D5           	push de
632   8743 C5            	push bc
633   8744 21 EE 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
634   8747 11 CC 83     	ld de,Amadeus_db
635   874A 01 3A 00     	ld bc,58
636   874D ED B0        	ldir
637   874F C1           	pop bc
638   8750 D1           	pop de
639   8751 E1           	pop hl
640   8752 C9           	ret
641   8753
642   8753              ; **************************************************************************************************
643   8753
644   8753              ; Teclado.
645   8753
646   8753 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
647   8755 DB FE        	in a,($fe)
648   8757 E6 01        	and $01
649   8759 28 02        	jr z,1f
650   875B 18 F6        	jr Pulsa_ENTER
651   875D C9           1 ret
652   875E
653   875E              ; **************************************************************************************************
654   875E              ;
655   875E              ; Temporización.
656   875E
657   875E              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
658   875E              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
659   875E              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
660   875E              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
661   875E
662   875E              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
663   875E              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
664   875E              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
665   875E
666   875E              ; A partir de $4f61 no hace falta DELAY.
667   875E
668   875E              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
669   875E
670   875E 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
671   8761 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
672   8762 78           	LD A,B
673   8763 A7           	AND A
674   8764 20 FB        	JR NZ,wait
675   8766 C9           	RET
676   8767
677   8767              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
678   8767              ;
679   8767              ;	21/4/22
680   8767
681   8767              Movimiento_Amadeus
682   8767
683   8767 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
684   8769 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
685   876B E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
686   876D CC 7D 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
687   8770 3E F7        	ld a,$f7
688   8772 DB FE        	in a,($fe)
689   8774 E6 01        	and $01
690   8776 C8           	ret z
691   8777 3E F7        	ld a,$f7
692   8779 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
693   877B E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
694   877D CC 96 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
695   8780 C9               ret
696   8781
697   8781              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
698   8781
699   8781              ; Pinta indicadores de FILAS. ------------------------------------------------------
700   8781
701   8781 21 10 40     Pinta_FILAS ld hl,$4010
702   8784              ;	ld b,9
703   8784              ;2 push hl
704   8784              ;	push bc
705   8784 06 BF        	ld b,$bf
706   8786 36 80        1 ld (hl),%10000000
707   8788 CD 90 8A     	call NextScan
708   878B 10 F9        	djnz 1B
709   878D              ;	pop bc
710   878D              ;	pop hl
711   878D              ;	inc l
712   878D              ;	djnz 2B
713   878D 06 03        	ld b,3
714   878F 21 00 47         ld hl,$4700
715   8792 CD 98 87     3 call Bucle_1
716   8795 10 FB            djnz 3B
717   8797 C9               ret
718   8798
719   8798 C5           Bucle_1 push bc
720   8799 E5                   push hl
721   879A D1                   pop de
722   879B 13                   inc de
723   879C 01 FF 00             ld bc,255
724   879F 36 FF                ld (hl),255
725   87A1 ED B0                ldir
726   87A3 23                   inc hl
727   87A4 3E 07                ld a,7
728   87A6 84                   add a,h
729   87A7 67                   ld h,a
730   87A8 C1                   pop bc
731   87A9 C9                   ret
732   87AA
733   87AA              ; ---------------------------------------------------------------
734   87AA
735   87AA              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  87AA              ; ******************************************************************************************************************************************************************************************
  2+  87AA              ;
  3+  87AA              ; 01/23
  4+  87AA              ;
  5+  87AA              ; DRAW. ************************************************************************************************************************************************************************************
  6+  87AA
  7+  87AA CD 84 8A     Draw call Prepara_draw
  8+  87AD 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  87AE A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  87AF 28 05        	jr z,2F
 11+  87B1
 12+  87B1 3A 02 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  87B4 18 0C        	jr 1F
 14+  87B6 2A 00 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  87B9 22 F0 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  87BC CD 4B 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  87BF              ;													; _la esquina superior izquierda de la pantalla.
 18+  87BF CD FE 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  87C2 3A 1B 85     1 ld a,(Ctrl_0)
 20+  87C5 CB 6F        	bit 5,a
 21+  87C7 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  87C9
 23+  87C9 CD E1 87     	call Comprueba_limite_horizontal
 24+  87CC CD 71 88     	call Comprueba_limite_vertical
 25+  87CF
 26+  87CF              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  87CF
 28+  87CF CD BE 89     3 call calcula_CColumnass
 29+  87D2 CD F5 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  87D5 CD 4A 8A     	call Define_rutina_de_impresion
 31+  87D8
 32+  87D8 3A 1B 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  87DB CB AF        	res 5,a											; _a ser de utilidad.
 34+  87DD 32 1B 85     	ld (Ctrl_0),a
 35+  87E0
 36+  87E0 C9           	ret
 37+  87E1
 38+  87E1              ; *******************************************************************************************************************************************************************************************
 39+  87E1              ;	21/01/23
 40+  87E1              ;
 41+  87E1              ; 	Comprueba_limite_horizontal.
 42+  87E1              ;
 43+  87E1              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  87E1              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  87E1              ;
 46+  87E1              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  87E1              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  87E1              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  87E1              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  87E1
 51+  87E1
 52+  87E1
 53+  87E1 3A 1B 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  87E4 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  87E6 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  87E8 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  87EA 32 1B 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  87ED 18 09            jr 6F
 59+  87EF CB 5F        1 bit 3,a
 60+  87F1 28 0A            jr z,2F
 61+  87F3 E6 F7            and $f7
 62+  87F5 32 1B 85         ld (Ctrl_0),a
 63+  87F8 CD 4B 89     6 call Inicializacion
 64+  87FB 18 5B            jr 5F
 65+  87FD E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  87FE
 67+  87FE              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  87FE              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  87FE
 70+  87FE EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  87FF 2A 25 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8802 CD EE 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8805 67           	ld h,a
 74+  8806 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8807 CD EE 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  880A 67           	ld h,a
 77+  880B A7           	and a
 78+  880C ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  880E 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  880F 3A 02 85     	ld a,(Cuad_objeto)
 81+  8812 FE 02        	cp 2
 82+  8814 38 1E        	jr c,3F
 83+  8816 28 1C        	jr z,3F
 84+  8818 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8819 28 23            jr z,7F
 86+  881B 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  881D 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  881F E1           	pop hl
 89+  8820
 90+  8820              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8820              ; _para indicar con E="2" en caso necesario.
 92+  8820
 93+  8820 E5               push hl
 94+  8821 C5               push bc
 95+  8822 CD EE 8C     	call calcula_tercio
 96+  8825 FE 01        	cp 1
 97+  8827 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8829 CD 59 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  882C 28 26            jr z,9F
100+  882E 38 24            jr c,9F
101+  8830 1E 00        11 ld e,0
102+  8832 18 22            jr 8F
103+  8834 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8835 28 07        	jr z, 7F
105+  8837 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8839 1E 00         	ld e,0
107+  883B E1           	pop hl
108+  883C 18 04        	jr 4F
109+  883E 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8840 18 15            jr 10F
111+  8842
112+  8842              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8842              ; _para indicar con E="2" en caso necesario.
114+  8842
115+  8842 E5           4 push hl
116+  8843 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8844 CD EE 8C     	call calcula_tercio
118+  8847 FE 01        	cp 1
119+  8849 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  884B CD 59 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  884E 28 04            jr z,9F
122+  8850 30 02            jr nc,9F
123+  8852 18 02        	jr 8F
124+  8854 1E 02        9 ld e,2
125+  8856 C1           8 pop bc
126+  8857 E1           10 pop hl
127+  8858 C9           5 ret
128+  8859
129+  8859              ; --------------------
130+  8859              ;
131+  8859              ; 25/08/22
132+  8859
133+  8859 CD EE 8C     Comprueba_centro call calcula_tercio
134+  885C 67               ld h,a
135+  885D 08           	ex af,af
136+  885E FE 02        	cp 2
137+  8860 38 07        	jr c,1F
138+  8862 28 05        	jr z,1F
139+  8864 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8867 18 03        	jr 2F
141+  8869 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  886C 08           2 ex af,af
143+  886D A7               and a
144+  886E ED 42            sbc hl,bc
145+  8870 C9               ret
146+  8871
147+  8871              ; *********************************************************************************************************************************************************************************************
148+  8871              ;
149+  8871              ;   16/8/22
150+  8871              ;
151+  8871              ;	Comprueba_limite_vertical
152+  8871              ;
153+  8871              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8871              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8871              ;
156+  8871
157+  8871 2A F0 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8874 7D           	ld a,l
159+  8875 E6 1F        	and $1F
160+  8877 57           	ld d,a
161+  8878 3A 27 85     	ld a,(Limite_vertical)
162+  887B BA           	cp d 											; Límite - Posición.
163+  887C 08           	ex af,af 										; Resultado de CP d en F'.
164+  887D 3A 02 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8880 CB 47        	bit 0,a
166+  8882 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8884
168+  8884              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8884
170+  8884 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8885 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8887
173+  8887              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8887              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8887
176+  8887 3A F5 84         ld a,(Coordenada_X)
177+  888A 16 0F            ld d,Centro_izquierda
178+  888C A7               and a
179+  888D 92               sub d 											 ; Posición - Centro_izquierda.
180+  888E 28 1E            jr z,3F
181+  8890 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8892              ;                                                    ; _salimos sin modificar nada.
183+  8892 18 0E            jr 2F
184+  8894 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8895 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8897
187+  8897              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8897              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8897
190+  8897 3A F5 84         ld a,(Coordenada_X)
191+  889A 16 10            ld d,Centro_derecha
192+  889C A7               and a
193+  889D 92               sub d
194+  889E 28 0E            jr z,3F
195+  88A0 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  88A2              ;                                                    ; _salimos sin modificar nada.
197+  88A2 CB 43        2 bit 0,e
198+  88A4 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  88A6 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  88A7 CD 3B 89         call Modificaccionne
201+  88AA C1           	pop bc
202+  88AB CD 4B 89         call Inicializacion
203+  88AE C9           3 ret 				 								 ; Salimos de la rutina.
204+  88AF
205+  88AF              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  88AF
207+  88AF C5           4 push bc
208+  88B0 01 EF 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  88B3 0A           	ld a,(bc)
210+  88B4 3D           	dec a
211+  88B5 47           	ld b,a 											 ; Columnas-1 en B.
212+  88B6 7D           	ld a,l
213+  88B7 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  88B8 CB 47        	bit 0,a
215+  88BA 28 03        	jr z,5F
216+  88BC 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  88BD 18 2E        	jr 7F
218+  88BF
219+  88BF              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  88BF
221+  88BF 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  88C0 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  88C1 3A 1B 85     	ld a,(Ctrl_0)
224+  88C4 CB 4F        	bit 1,a
225+  88C6 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  88C8 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  88C9
228+  88C9              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  88C9
230+  88C9 1C               inc e
231+  88CA 1D               dec e
232+  88CB 20 07            jr nz,12F
233+  88CD 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  88CE 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  88CF 22 F0 84     	ld (Posicion_actual),hl
236+  88D2 18 44        13 jr 9F
237+  88D4 CB 43        12 bit 0,e
238+  88D6 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  88D8              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  88D8 C1           	pop bc
241+  88D9 18 D3        	jr 3B
242+  88DB 80           14 add b
243+  88DC 6F               ld l,a
244+  88DD 22 F0 84     	ld (Posicion_actual),hl
245+  88E0 CD 3B 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  88E3 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  88E5 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  88E7 32 1B 85         ld (Ctrl_0),a
249+  88EA F1           	pop af
250+  88EB 18 2B        	jr 9F
251+  88ED
252+  88ED              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  88ED
254+  88ED F5           7 push af
255+  88EE 3A 1B 85     	ld a,(Ctrl_0)
256+  88F1 CB 47        	bit 0,a
257+  88F3 20 1D        	jr nz,8F
258+  88F5 F1           	pop af
259+  88F6
260+  88F6              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  88F6
262+  88F6 1C           	inc e
263+  88F7 1D               dec e
264+  88F8 20 07            jr nz,10F
265+  88FA 90           	sub b
266+  88FB 6F               ld l,a
267+  88FC 22 F0 84     	ld (Posicion_actual),hl
268+  88FF 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8901              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8901 CB 43        10 bit 0,e
271+  8903 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8905              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8905 C1           	pop bc
274+  8906 18 A6        	jr 3B
275+  8908 90           16 sub b
276+  8909 6F               ld l,a
277+  890A 22 F0 84     	ld (Posicion_actual),hl
278+  890D CD 3B 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8910 18 06            jr 9F
280+  8912 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8914 32 1B 85         ld (Ctrl_0),a
282+  8917 F1           	pop af
283+  8918 C1           9 pop bc
284+  8919 1E 00        	ld e,0
285+  891B CD 4B 89         call Inicializacion
286+  891E F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  891F 08           	ex af,af
288+  8920 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8921 18 8B            jr 3B
290+  8923
291+  8923              ; --------------------
292+  8923
293+  8923 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8925 CD 9F 8A     1 call PreviousScan
295+  8928 10 FB            djnz 1B
296+  892A 22 F0 84     	ld (Posicion_actual),hl
297+  892D AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  892E C9           	ret
299+  892F
300+  892F              ; --------------------
301+  892F
302+  892F 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8931 CD 90 8A     1 call NextScan
304+  8934 10 FB            djnz 1B
305+  8936 22 F0 84     	ld (Posicion_actual),hl
306+  8939 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  893A C9           	ret
308+  893B
309+  893B              ; --------------------
310+  893B              ;
311+  893B              ;	22/01/23
312+  893B              ;
313+  893B              ;	E="1". Hemos cambiado de cuadrante.
314+  893B              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  893B              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  893B
317+  893B
318+  893B              Modificaccionne
319+  893B
320+  893B 3A 02 85     	ld a,(Cuad_objeto)
321+  893E FE 02        	cp 2
322+  8940 CC 23 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8943 DC 23 89         call c,Modifica_Pos_actual
324+  8946 C8           	ret z
325+  8947 CD 2F 89         call Modifica_Pos_actual2
326+  894A C9               ret
327+  894B
328+  894B              ; *************************************************************************************************************************************************************************************************
329+  894B              ;
330+  894B              ;	13/8/22
331+  894B              ;
332+  894B              ;	Inicializacion
333+  894B              ;
334+  894B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  894B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  894B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  894B              ;
338+  894B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  894B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  894B              ;	_ desaparece/aparece.
341+  894B
342+  894B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  894B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  894B              ;
345+  894B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  894B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  894B              ; 		   [E] ="0"
348+  894B
349+  894B              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  894B
351+  894B CD EE 8C     Inicializacion call calcula_tercio
352+  894E 28 36        	jr z,primit
353+  8950 E6 02        	and 2
354+  8952 20 07        	jr nz,segmit
355+  8954 7D           	ld a,l
356+  8955 FE 7F        	cp $7f
357+  8957 38 2D        	jr c,primit
358+  8959 28 2B        	jr z,primit
359+  895B CD B8 89     segmit call column
360+  895E 38 13        	jr c,tercuad
361+  8960 3E 04        cuarcuad ld a,4
362+  8962 32 02 85     	ld (Cuad_objeto),a
363+  8965 21 20 48     	ld hl,$4820
364+  8968 22 25 85     	ld (Limite_horizontal),hl
365+  896B 21 27 85     	ld hl,Limite_vertical
366+  896E 36 0D        	ld (hl),$0d
367+  8970 08           	ex af,af
368+  8971 18 3C        	jr 1F
369+  8973              tercuad
370+  8973 3E 03        	ld a,3
371+  8975 32 02 85     	ld (Cuad_objeto),a
372+  8978 21 20 48     	ld hl,$4820
373+  897B 22 25 85     	ld (Limite_horizontal),hl
374+  897E 21 27 85     	ld hl,Limite_vertical
375+  8981 36 12        	ld (hl),$12
376+  8983 08           	ex af,af
377+  8984 18 29        	jr 1F
378+  8986 CD B8 89     primit call column
379+  8989 38 13        	jr c, primcuad
380+  898B              segcuad
381+  898B 3E 02        	ld a,2
382+  898D 32 02 85     	ld (Cuad_objeto),a
383+  8990 21 C0 4F     	ld hl,$4fc0
384+  8993 22 25 85     	ld (Limite_horizontal),hl
385+  8996 21 27 85     	ld hl,Limite_vertical
386+  8999 36 0D        	ld (hl),$0d
387+  899B 08           	ex af,af
388+  899C 18 11        	jr 1F
389+  899E              primcuad
390+  899E 3E 01        	ld a,1
391+  89A0 32 02 85     	ld (Cuad_objeto),a
392+  89A3 21 C0 4F     	ld hl,$4fc0
393+  89A6 22 25 85     	ld (Limite_horizontal),hl
394+  89A9 21 27 85     	ld hl,Limite_vertical
395+  89AC 36 12        	ld (hl),$12
396+  89AE 08           	ex af,af
397+  89AF CD E3 8F     1 call Genera_coordenadas
398+  89B2 21 1B 85     	ld hl,Ctrl_0
399+  89B5 CB EE        	set 5,(hl)
400+  89B7 C9           	ret
401+  89B8
402+  89B8              ; ------------------------------------------------------------------------------------------------------------------
403+  89B8
404+  89B8              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  89B8              ;
406+  89B8              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  89B8
408+  89B8 7D           column ld a,l
409+  89B9 E6 1F        	and $1f
410+  89BB FE 10         	cp $10
411+  89BD C9            	ret
412+  89BE
413+  89BE              ; --------------------------------------------------------------------------------------------------------------------
414+  89BE              ;
415+  89BE              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  89BE              ;
417+  89BE              ; 14/12/22
418+  89BE              ;
419+  89BE              ;	Modifica: A y BC.
420+  89BE
421+  89BE 3A 02 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  89C1 E6 01        	and 1
423+  89C3 28 17        	jr z,1F
424+  89C5
425+  89C5              ; Nos encontramos en la parte izquierda de la pantalla
426+  89C5
427+  89C5 3A F5 84     	ld a,(Coordenada_X)
428+  89C8 47           	ld b,a
429+  89C9 04           	inc b											; (Coordenada_X)+1 en B.
430+  89CA 79           	ld a,c
431+  89CB 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  89CC 38 08        	jr c,2F
433+  89CE 47           	ld b,a
434+  89CF 79           	ld a,c
435+  89D0 90           	sub b
436+  89D1 32 24 85     	ld (Columnas),a
437+  89D4 18 1B        	jr 4F
438+  89D6 79           2 ld a,c
439+  89D7 32 24 85     	ld (Columnas),a
440+  89DA 18 15        	jr 4F
441+  89DC
442+  89DC              ; Nos encontramos en la parte derecha de la pantalla.
443+  89DC
444+  89DC 3A F5 84     1 ld a,(Coordenada_X)
445+  89DF 81           	add c
446+  89E0 3D           	dec a
447+  89E1 D6 1F        	sub $1f
448+  89E3 38 08        	jr c,3F
449+  89E5 47           	ld b,a
450+  89E6 79           	ld a,c
451+  89E7 90           	sub b
452+  89E8 32 24 85     	ld (Columnas),a
453+  89EB 18 04        	jr 4F
454+  89ED 79           3 ld a,c
455+  89EE 32 24 85     	ld (Columnas),a
456+  89F1 D9           4 exx
457+  89F2 4F           	ld c,a
458+  89F3 D9           	exx
459+  89F4 C9            ret
460+  89F5
461+  89F5              ; --------------------------------------------------------------------------------------------------------------------
462+  89F5              ;
463+  89F5              ; 7/1/23
464+  89F5              ;
465+  89F5              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  89F5              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  89F5              ;
468+  89F5              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  89F5              ;	DESTRUYE: HL,B Y A.
470+  89F5
471+  89F5 3A 02 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  89F8 FE 02        	cp 2
473+  89FA 38 18        	jr c,1F
474+  89FC 28 16        	jr z,1F
475+  89FE E6 01        	and 1
476+  8A00 28 0D        	jr z,3F
477+  8A02
478+  8A02              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8A02
480+  8A02 CD 3E 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8A05
482+  8A05 7D           9 ld a,l
483+  8A06 E6 1F        	and $1f
484+  8A08 28 2A        	jr z,7F
485+  8A0A 2B           	dec hl
486+  8A0B 10 F8        	djnz 9B
487+  8A0D 18 25        	jr 7F
488+  8A0F
489+  8A0F              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8A0F
491+  8A0F 2A F0 84     3 ld hl,(Posicion_actual)
492+  8A12 18 20        	jr 7F
493+  8A14
494+  8A14 28 14        1 jr z,2F
495+  8A16
496+  8A16              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8A16
498+  8A16 CD 3E 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8A19 7D           4 ld a,l
500+  8A1A E6 1F        	and $1f
501+  8A1C 28 03        	jr z,6F
502+  8A1E 2B           	dec hl
503+  8A1F 10 F8        	djnz 4B
504+  8A21 06 0F        6 ld b,15
505+  8A23 CD 9F 8A     5 call PreviousScan
506+  8A26 10 FB        	djnz 5B
507+  8A28 18 0A        	jr 7F
508+  8A2A
509+  8A2A              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8A2A
511+  8A2A CD 3E 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8A2D 06 0F        	ld b,15
513+  8A2F CD 9F 8A     8 call PreviousScan
514+  8A32 10 FB        	djnz 8B
515+  8A34
516+  8A34 E5           7 push hl
517+  8A35 DD E1        	pop ix
518+  8A37
519+  8A37 2A F2 84     	ld hl,(Puntero_objeto)
520+  8A3A E5           	push hl
521+  8A3B FD E1        	pop iy
522+  8A3D
523+  8A3D C9           	ret
524+  8A3E
525+  8A3E              ; --------------------------------------------------------------------------------------------------------------------
526+  8A3E              ;
527+  8A3E              ;	2/1/23
528+  8A3E              ;
529+  8A3E              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8A3E              ;
531+  8A3E              ;	Tras esta rutina tenemos:
532+  8A3E              ;
533+  8A3E              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8A3E              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8A3E              ;
536+  8A3E              ;	DESTRUYE!!!!! HL,B y A.
537+  8A3E
538+  8A3E 2A F0 84     Operandos ld hl,(Posicion_actual)
539+  8A41 3A 24 85     	ld a,(Columnas)
540+  8A44 3D           	dec a
541+  8A45 20 01        	jr nz,1F
542+  8A47 3C           	inc a
543+  8A48 47           1 ld b,a
544+  8A49 C9           	ret
545+  8A4A
546+  8A4A              ; --------------------------------------------------------------------------------------------------------------------
547+  8A4A              ;
548+  8A4A              ;	3/1/23
549+  8A4A              ;
550+  8A4A              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8A4A              ;
552+  8A4A              ;	Destruye: A,B,HL y DE.
553+  8A4A
554+  8A4A              Define_rutina_de_impresion
555+  8A4A
556+  8A4A 3A EF 84     	ld a,(Columns)
557+  8A4D 47           	ld b,a
558+  8A4E 3A 24 85     	ld a,(Columnas)
559+  8A51 B8           	cp b
560+  8A52 20 0D        	jr nz,2f
561+  8A54
562+  8A54              ;	La entidad se imprime entera.
563+  8A54
564+  8A54 21 EB 8A     	ld hl, Indice_entidades_completas
565+  8A57 E6 01        	and 1
566+  8A59 28 02        	jr z,1F
567+  8A5B
568+  8A5B 23           	inc hl
569+  8A5C 23           	inc hl
570+  8A5D
571+  8A5D CD 9C 86     1 call Extrae_address
572+  8A60 C9           	ret		;	ret
573+  8A61
574+  8A61              ;	La entidad no se imprime entera en pantalla.
575+  8A61
576+  8A61 3A 02 85     2 ld a,(Cuad_objeto)
577+  8A64 E6 01        	and 1
578+  8A66 28 17        	jr z,3F
579+  8A68
580+  8A68              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8A68
582+  8A68 21 EF 8A     	ld hl, Indice_entidades_incompletas_izquierda
583+  8A6B 3A EF 84     4 ld a,(Columns)
584+  8A6E E6 01        	and 1
585+  8A70 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8A72
587+  8A72 23           	inc hl
588+  8A73 23           	inc hl
589+  8A74
590+  8A74 3A 24 85     	ld a,(Columnas)
591+  8A77 E6 01        	and 1
592+  8A79 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8A7B
594+  8A7B 23           	inc hl
595+  8A7C 23           	inc hl
596+  8A7D
597+  8A7D 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8A7F
599+  8A7F 21 F5 8A     3 ld hl, Indice_entidades_incompletas_derecha
600+  8A82 18 E7        	jr 4B
601+  8A84
602+  8A84              ; --------------------------------------------------------------------------------------------------------------------
603+  8A84              ;
604+  8A84              ;	Prepara_draw
605+  8A84              ;
606+  8A84              ;	Es una rutina de carga.
607+  8A84              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8A84              ;
609+  8A84              ;	FUNCIONAMIENTO:
610+  8A84              ;
611+  8A84              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8A84              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8A84              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8A84              ;
615+  8A84              ;	DESTRUYE:
616+  8A84              ;
617+  8A84              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8A84
619+  8A84 21 EE 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8A87 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8A88 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8A89 4E           	ld c,(hl)
623+  8A8A 2A F0 84     	ld hl,(Posicion_actual)
624+  8A8D 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8A8F C9           	ret
626+  8A90
627+  8A90              ;----------------------------------------------------------------------------------------------------------------
628+  8A90              ;
629+  8A90              ;	5/08/22
630+  8A90              ;
631+  8A90              ;   NextScan.
632+  8A90              ;
633+  8A90              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8A90              ;
635+  8A90              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8A90              ;
637+  8A90              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8A90              ;
639+  8A90              ;       DESTRUIDOS: AF y HL !!!
640+  8A90              ;
641+  8A90              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8A90              ;
643+  8A90
644+  8A90 24           NextScan inc h          ; Incrementamos el scanline.
645+  8A91 7C               ld a,h
646+  8A92 E6 07            and 7
647+  8A94 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8A95
649+  8A95 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8A96 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8A98 6F               ld l,a
652+  8A99 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8A9A
654+  8A9A 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8A9B D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8A9D 67               ld h,a
657+  8A9E C9               ret
658+  8A9F
659+  8A9F              ;----------------------------------------------------------------------------------------------------------------
660+  8A9F              ;
661+  8A9F              ;	5/08/22
662+  8A9F              ;
663+  8A9F              ;   PreviousScan.
664+  8A9F              ;
665+  8A9F              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8A9F              ;
667+  8A9F              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8A9F              ;
669+  8A9F              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8A9F              ;
671+  8A9F              ;       DESTRUIDOS: AF y HL !!!
672+  8A9F              ;
673+  8A9F              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8A9F              ;
675+  8A9F
676+  8A9F 7C           PreviousScan ld a,h
677+  8AA0 25               dec h               ; Dec H.
678+  8AA1 E6 07            and 7
679+  8AA3 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8AA4
681+  8AA4 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8AA5 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8AA7 6F               ld l,a
684+  8AA8 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8AA9
686+  8AA9 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8AAA C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8AAC 67               ld h,a
689+  8AAD C9               ret
690+  8AAE
691+  8AAE              ; -----------------------------------------------------------------------------------
692+  8AAE              ;
693+  8AAE              ;	15/1/23
694+  8AAE
695+  8AAE              Extrae_foto_registros
696+  8AAE
697+  8AAE 3A 2F 85     	ld a,(Numero_de_malotes)
698+  8AB1 A7           	and a
699+  8AB2 C8           	ret z
700+  8AB3
701+  8AB3
702+  8AB3 ED 73 30 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8AB7 31 00 70     	ld sp,Album_de_fotos
704+  8ABA
705+  8ABA FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8ABC E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8ABD D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8ABE
709+  8ABE ED 73 32 85  	ld (Stack_2),sp
710+  8AC2 ED 7B 30 85  	ld sp,(Stack)
711+  8AC6
712+  8AC6              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8AC6
714+  8AC6 3E CD        	ld a,$cd
715+  8AC8 32 D0 8A     	ld (Imprime),a
716+  8ACB EB           	ex de,hl
717+  8ACC 22 D1 8A     	ld (Imprime+1),hl
718+  8ACF EB           	ex de,hl
719+  8AD0
720+  8AD0              ; Ejecuta la llamada:	CALL $xx,xx
721+  8AD0
722+  8AD0 00 00 00     Imprime db 0,0,0
723+  8AD3
724+  8AD3 ED 73 30 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8AD7
726+  8AD7 3A 2F 85     	ld a,(Numero_de_malotes)
727+  8ADA 3D           	dec a
728+  8ADB 28 09        	jr z,1F
729+  8ADD 32 2F 85      	ld (Numero_de_malotes),a
730+  8AE0 ED 7B 32 85  	ld sp,(Stack_2)
731+  8AE4 18 D4        	jr 2B
732+  8AE6
733+  8AE6 AF           1 xor a
734+  8AE7 32 32 85     	ld (Stack_2),a
735+  8AEA C9           	ret
736+  8AEB
737+  8AEB
# file closed: Draw_XOR.asm
736   8AEB              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8AEB              ;   índices de Rutinas de impresión.
  2+  8AEB
  3+  8AEB FB 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AED 28 8B            defw Pinta_Amadeus_3x2
  5+  8AEF
  6+  8AEF 7E 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AF1 1E 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AF3 D2 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AF5
 10+  8AF5 A8 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AF7 AC 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AF9 60 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AFB
 14+  8AFB
 15+  8AFB              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AFB              ;
 17+  8AFB              ;   12/12/22
 18+  8AFB              ;
 19+  8AFB              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AFB              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AFB              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AFB              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AFB              ;
 24+  8AFB              ;   Modifica: DE y HL.
 25+  8AFB
 26+  8AFB ED 73 30 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AFF FD F9        	ld sp,iy
 28+  8B01 06 10            ld b,16
 29+  8B03 D1           1 pop de
 30+  8B04 7B               ld a,e
 31+  8B05 AE               xor (hl)
 32+  8B06 77           	ld (hl),a
 33+  8B07 23           	inc hl
 34+  8B08 7A               ld a,d
 35+  8B09 AE               xor (hl)
 36+  8B0A 77           	ld (hl),a
 37+  8B0B 2B           	dec hl
 38+  8B0C 24           	inc h
 39+  8B0D 7C               ld a,h
 40+  8B0E E6 07            and 7
 41+  8B10 20 0A            jr nz,2F
 42+  8B12 7D               ld a,l
 43+  8B13 C6 20            add a,$20
 44+  8B15 6F               ld l,a
 45+  8B16 38 04            jr c,2F
 46+  8B18 7C               ld a,h
 47+  8B19 D6 08            sub 8
 48+  8B1B 67               ld h,a
 49+  8B1C 7C           2 ld a,h
 50+  8B1D FE 58            cp $58
 51+  8B1F 28 02            jr z,3F
 52+  8B21 10 E0            djnz 1B
 53+  8B23 ED 7B 30 85  3 ld sp,(Stack)
 54+  8B27 C9           	ret
 55+  8B28
 56+  8B28 ED 73 30 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B2C FD F9        	ld sp,iy
 58+  8B2E 06 08            ld b,8
 59+  8B30 D1           1 pop de
 60+  8B31 7B               ld a,e
 61+  8B32 AE               xor (hl)
 62+  8B33 77           	ld (hl),a
 63+  8B34 23           	inc hl
 64+  8B35 7A               ld a,d
 65+  8B36 AE               xor (hl)
 66+  8B37 77           	ld (hl),a
 67+  8B38 23           	inc hl
 68+  8B39 D1           	pop de
 69+  8B3A 7B               ld a,e
 70+  8B3B AE               xor (hl)
 71+  8B3C 77           	ld (hl),a
 72+  8B3D 2B           	dec hl
 73+  8B3E 2B           	dec hl
 74+  8B3F 24           	inc h
 75+  8B40 7C               ld a,h
 76+  8B41 E6 07            and 7
 77+  8B43 20 0A            jr nz,2F
 78+  8B45 7D               ld a,l
 79+  8B46 C6 20            add a,$20
 80+  8B48 6F               ld l,a
 81+  8B49 38 04            jr c,2F
 82+  8B4B 7C               ld a,h
 83+  8B4C D6 08            sub 8
 84+  8B4E 67               ld h,a
 85+  8B4F 7C           2 ld a,h
 86+  8B50 FE 58            cp $58
 87+  8B52 28 25            jr z,4F
 88+  8B54 7A               ld a,d
 89+  8B55 AE               xor (hl)
 90+  8B56 77               ld (hl),a
 91+  8B57 D1           	pop de
 92+  8B58 23           	inc hl
 93+  8B59 7B               ld a,e
 94+  8B5A AE               xor (hl)
 95+  8B5B 77           	ld (hl),a
 96+  8B5C 23           	inc hl
 97+  8B5D 7A               ld a,d
 98+  8B5E AE               xor (hl)
 99+  8B5F 77           	ld (hl),a
100+  8B60 2B           	dec hl
101+  8B61 2B           	dec hl
102+  8B62 24           	inc h
103+  8B63 7C               ld a,h
104+  8B64 E6 07            and 7
105+  8B66 20 0A            jr nz,3F
106+  8B68 7D               ld a,l
107+  8B69 C6 20            add a,$20
108+  8B6B 6F               ld l,a
109+  8B6C 38 04            jr c,3F
110+  8B6E 7C               ld a,h
111+  8B6F D6 08            sub 8
112+  8B71 67               ld h,a
113+  8B72 7C           3 ld a,h
114+  8B73 FE 58            cp $58
115+  8B75 28 02            jr z,4F
116+  8B77 10 B7            djnz 1B
117+  8B79 ED 7B 30 85  4 ld sp,(Stack)
118+  8B7D C9           	ret
119+  8B7E
120+  8B7E              ; ---------------------------------------------------
121+  8B7E
122+  8B7E ED 73 30 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B82 FD F9        	ld sp,iy
124+  8B84 06 10            ld b,16
125+  8B86 D1           1 pop de
126+  8B87 7A           	ld a,d
127+  8B88 AE           	xor (hl)
128+  8B89 77           	ld (hl),a
129+  8B8A 24           	inc h
130+  8B8B 7C               ld a,h
131+  8B8C E6 07            and 7
132+  8B8E 20 0C            jr nz,2F
133+  8B90 7D               ld a,l
134+  8B91 C6 20            add a,$20
135+  8B93 6F               ld l,a
136+  8B94 38 06            jr c,2F
137+  8B96 7C               ld a,h
138+  8B97 D6 08            sub 8
139+  8B99 67               ld h,a
140+  8B9A 18 00            jr 2F
141+  8B9C 7C           2 ld a,h
142+  8B9D FE 58            cp $58
143+  8B9F 28 02            jr z,3F
144+  8BA1 10 E3            djnz 1B
145+  8BA3 ED 7B 30 85  3 ld sp,(Stack)
146+  8BA7 C9           	ret
147+  8BA8
148+  8BA8 ED 73 30 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8BAC FD F9        	ld sp,iy
150+  8BAE 06 10            ld b,16
151+  8BB0 D1           1 pop de
152+  8BB1 7B           	ld a,e
153+  8BB2 AE           	xor (hl)
154+  8BB3 77           	ld (hl),a
155+  8BB4 24           	inc h
156+  8BB5 7C               ld a,h
157+  8BB6 E6 07            and 7
158+  8BB8 20 0C            jr nz,2F
159+  8BBA 7D               ld a,l
160+  8BBB C6 20            add a,$20
161+  8BBD 6F               ld l,a
162+  8BBE 38 06            jr c,2F
163+  8BC0 7C               ld a,h
164+  8BC1 D6 08            sub 8
165+  8BC3 67               ld h,a
166+  8BC4 18 00            jr 2F
167+  8BC6 7C           2 ld a,h
168+  8BC7 FE 58            cp $58
169+  8BC9 28 02            jr z,3F
170+  8BCB 10 E3            djnz 1B
171+  8BCD ED 7B 30 85  3 ld sp,(Stack)
172+  8BD1 C9           	ret
173+  8BD2
174+  8BD2              ; ---------------------------------------------------
175+  8BD2
176+  8BD2 ED 73 30 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BD6 FD F9        	ld sp,iy
178+  8BD8 06 08            ld b,8
179+  8BDA D1           1 pop de
180+  8BDB 7A           	ld a,d
181+  8BDC AE           	xor (hl)
182+  8BDD 77           	ld (hl),a
183+  8BDE 23           	inc hl
184+  8BDF D1           	pop de
185+  8BE0 7B           	ld a,e
186+  8BE1 AE           	xor (hl)
187+  8BE2 77           	ld (hl),a
188+  8BE3 2B           	dec hl
189+  8BE4 24            	inc h
190+  8BE5 7C               ld a,h
191+  8BE6 E6 07            and 7
192+  8BE8 20 0A            jr nz,2F
193+  8BEA 7D               ld a,l
194+  8BEB C6 20            add a,$20
195+  8BED 6F               ld l,a
196+  8BEE 38 04            jr c,2F
197+  8BF0 7C               ld a,h
198+  8BF1 D6 08            sub 8
199+  8BF3 67               ld h,a
200+  8BF4 7C           2 ld a,h
201+  8BF5 FE 58            cp $58
202+  8BF7 28 20            jr z,4F
203+  8BF9 D1               pop de
204+  8BFA 7B           	ld a,e
205+  8BFB AE           	xor (hl)
206+  8BFC 77           	ld (hl),a
207+  8BFD 23           	inc hl
208+  8BFE 7A           	ld a,d
209+  8BFF AE           	xor (hl)
210+  8C00 77           	ld (hl),a
211+  8C01 2B           	dec hl
212+  8C02 24           	inc h
213+  8C03 7C               ld a,h
214+  8C04 E6 07            and 7
215+  8C06 20 0A            jr nz,3F
216+  8C08 7D               ld a,l
217+  8C09 C6 20            add a,$20
218+  8C0B 6F               ld l,a
219+  8C0C 38 04            jr c,3F
220+  8C0E 7C               ld a,h
221+  8C0F D6 08            sub 8
222+  8C11 67               ld h,a
223+  8C12 7C           3 ld a,h
224+  8C13 FE 58            cp $58
225+  8C15 28 02            jr z,4F
226+  8C17 10 C1            djnz 1B
227+  8C19 ED 7B 30 85  4 ld sp,(Stack)
228+  8C1D C9           	ret
229+  8C1E
230+  8C1E ED 73 30 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C22 FD F9        	ld sp,iy
232+  8C24 06 08            ld b,8
233+  8C26 D1           1 pop de
234+  8C27 D1           	pop de
235+  8C28 7B           	ld a,e
236+  8C29 AE           	xor (hl)
237+  8C2A 77           	ld (hl),a
238+  8C2B 24            	inc h
239+  8C2C 7C               ld a,h
240+  8C2D E6 07            and 7
241+  8C2F 20 0A            jr nz,2F
242+  8C31 7D               ld a,l
243+  8C32 C6 20            add a,$20
244+  8C34 6F               ld l,a
245+  8C35 38 04            jr c,2F
246+  8C37 7C               ld a,h
247+  8C38 D6 08            sub 8
248+  8C3A 67               ld h,a
249+  8C3B 7C           2 ld a,h
250+  8C3C FE 58            cp $58
251+  8C3E 28 1B            jr z,4F
252+  8C40 D1               pop de
253+  8C41 7A           	ld a,d
254+  8C42 AE           	xor (hl)
255+  8C43 77           	ld (hl),a
256+  8C44 24           	inc h
257+  8C45 7C               ld a,h
258+  8C46 E6 07            and 7
259+  8C48 20 0A            jr nz,3F
260+  8C4A 7D               ld a,l
261+  8C4B C6 20            add a,$20
262+  8C4D 6F               ld l,a
263+  8C4E 38 04            jr c,3F
264+  8C50 7C               ld a,h
265+  8C51 D6 08            sub 8
266+  8C53 67               ld h,a
267+  8C54 7C           3 ld a,h
268+  8C55 FE 58            cp $58
269+  8C57 28 02            jr z,4F
270+  8C59 10 CB            djnz 1B
271+  8C5B ED 7B 30 85  4 ld sp,(Stack)
272+  8C5F C9           	ret
273+  8C60
274+  8C60 ED 73 30 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C64 FD F9        	ld sp,iy
276+  8C66 06 08            ld b,8
277+  8C68 D1           1 pop de
278+  8C69 7B           	ld a,e
279+  8C6A AE           	xor (hl)
280+  8C6B 77           	ld (hl),a
281+  8C6C 23           	inc hl
282+  8C6D 7A           	ld a,d
283+  8C6E AE           	xor (hl)
284+  8C6F 77           	ld (hl),a
285+  8C70 2B           	dec hl
286+  8C71 24             	inc h
287+  8C72 7C               ld a,h
288+  8C73 E6 07            and 7
289+  8C75 20 0A            jr nz,2F
290+  8C77 7D               ld a,l
291+  8C78 C6 20            add a,$20
292+  8C7A 6F               ld l,a
293+  8C7B 38 04            jr c,2F
294+  8C7D 7C               ld a,h
295+  8C7E D6 08            sub 8
296+  8C80 67               ld h,a
297+  8C81 7C           2 ld a,h
298+  8C82 FE 58            cp $58
299+  8C84 28 21            jr z,4F
300+  8C86 D1               pop de
301+  8C87 7A           	ld a,d
302+  8C88 AE           	xor (hl)
303+  8C89 77           	ld (hl),a
304+  8C8A 23           	inc hl
305+  8C8B D1               pop de
306+  8C8C 7B           	ld a,e
307+  8C8D AE           	xor (hl)
308+  8C8E 77           	ld (hl),a
309+  8C8F 2B           	dec hl
310+  8C90 24           	inc h
311+  8C91 7C               ld a,h
312+  8C92 E6 07            and 7
313+  8C94 20 0A            jr nz,3F
314+  8C96 7D               ld a,l
315+  8C97 C6 20            add a,$20
316+  8C99 6F               ld l,a
317+  8C9A 38 04            jr c,3F
318+  8C9C 7C               ld a,h
319+  8C9D D6 08            sub 8
320+  8C9F 67               ld h,a
321+  8CA0 7C           3 ld a,h
322+  8CA1 FE 58            cp $58
323+  8CA3 28 02            jr z,4F
324+  8CA5 10 C1            djnz 1B
325+  8CA7 ED 7B 30 85  4 ld sp,(Stack)
326+  8CAB C9           	ret
327+  8CAC
328+  8CAC ED 73 30 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8CB0 FD F9        	ld sp,iy
330+  8CB2 06 08            ld b,8
331+  8CB4 D1           1 pop de
332+  8CB5 7B           	ld a,e
333+  8CB6 AE           	xor (hl)
334+  8CB7 77           	ld (hl),a
335+  8CB8 24            	inc h
336+  8CB9 7C               ld a,h
337+  8CBA E6 07            and 7
338+  8CBC 20 0A            jr nz,2F
339+  8CBE 7D               ld a,l
340+  8CBF C6 20            add a,$20
341+  8CC1 6F               ld l,a
342+  8CC2 38 04            jr c,2F
343+  8CC4 7C               ld a,h
344+  8CC5 D6 08            sub 8
345+  8CC7 67               ld h,a
346+  8CC8 7C           2 ld a,h
347+  8CC9 FE 58            cp $58
348+  8CCB 28 1C            jr z,4F
349+  8CCD D1               pop de
350+  8CCE 7A           	ld a,d
351+  8CCF AE           	xor (hl)
352+  8CD0 77           	ld (hl),a
353+  8CD1 24           	inc h
354+  8CD2 7C               ld a,h
355+  8CD3 E6 07            and 7
356+  8CD5 20 0A            jr nz,3F
357+  8CD7 7D               ld a,l
358+  8CD8 C6 20            add a,$20
359+  8CDA 6F               ld l,a
360+  8CDB 38 04            jr c,3F
361+  8CDD 7C               ld a,h
362+  8CDE D6 08            sub 8
363+  8CE0 67               ld h,a
364+  8CE1 7C           3 ld a,h
365+  8CE2 FE 58            cp $58
366+  8CE4 28 03            jr z,4F
367+  8CE6 D1               pop de
368+  8CE7 10 CB            djnz 1B
369+  8CE9 ED 7B 30 85  4 ld sp,(Stack)
370+  8CED C9           	ret
371+  8CEE
372+  8CEE              ; ---------------------------------------------------
373+  8CEE
# file closed: Rutinas_de_impresion_sprites.asm
737   8CEE              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CEE              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CEE              ;
  3+  8CEE              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CEE              ;
  5+  8CEE              ; *****************************************************************************************************************************************************************************************
  6+  8CEE              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CEE
  8+  8CEE 7C           calcula_tercio ld a,h
  9+  8CEF E6 18        	and $18
 10+  8CF1 CB 2F        	sra a
 11+  8CF3 CB 2F        	sra a
 12+  8CF5 CB 2F        	sra a
 13+  8CF7 C9           	ret
 14+  8CF8
# file closed: calcula_tercio.asm
738   8CF8              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CF8              ; -----------------------------------------------------------------------------------------
  2+  8CF8              ;
  3+  8CF8              ;   04/11/22
  4+  8CF8              ;
  5+  8CF8              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CF8              ;
  7+  8CF8              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CF8              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CF8              ;
 10+  8CF8              ;   DESTRUYE: HL y A. !!!!!
 11+  8CF8
 12+  8CF8 CD EE 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CFB 26 58            ld h,$58
 14+  8CFD 84               add h
 15+  8CFE 67               ld h,a
 16+  8CFF C9               ret
# file closed: Calcula_direccion_atributos.asm
739   8D00              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8D00              ; ********** **********
  2+  8D00              ;
  3+  8D00              ;   5/11/22
  4+  8D00              ;
  5+  8D00              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8D00              ;
  7+  8D00              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8D00              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8D00              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8D00              ;
 11+  8D00              ;   NO DESTROYERSSSS !!!!!
 12+  8D00
 13+  8D00 E5           Define_atributos push hl
 14+  8D01 C5           	push bc
 15+  8D02 D5           	push de
 16+  8D03
 17+  8D03 CD F8 8C     	call Calcula_direccion_atributos
 18+  8D06
 19+  8D06 D9               exx
 20+  8D07 E5               push hl
 21+  8D08 D9               exx
 22+  8D09 D1               pop de
 23+  8D0A
 24+  8D0A 42               ld b,d
 25+  8D0B 7B               ld a,e 									; (Attr) en A.
 26+  8D0C
 27+  8D0C C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8D0D E5            	push hl 								; Guardo dirección de attr.
 29+  8D0E
 30+  8D0E              ; -----
 31+  8D0E
 32+  8D0E 77           2 ld (hl),a
 33+  8D0F 0D           	dec c 									; Decremento (Columnas).
 34+  8D10 28 03        	jr z,1F
 35+  8D12 23           	inc hl
 36+  8D13 18 F9        	jr 2B
 37+  8D15
 38+  8D15 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8D16 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8D17
 41+  8D17 05           	dec b									; Decremento (Filas).
 42+  8D18 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8D1A
 44+  8D1A 11 20 00     	ld de,32
 45+  8D1D A7           	and a
 46+  8D1E ED 5A        	adc hl,de
 47+  8D20 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8D22
 49+  8D22 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8D23 C1           	pop bc
 51+  8D24 E1           	pop hl
 52+  8D25
 53+  8D25 C9           	ret
 54+  8D26
# file closed: Define_atributos.asm
740   8D26              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D26              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D26              ;
  3+  8D26              ;
  4+  8D26              ;	CLS.
  5+  8D26              ;
  6+  8D26              ;	Limpia la pantalla y define sus atributos.
  7+  8D26              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D26              ;
  9+  8D26              ;	COLORES: 0 ..... NEGRO
 10+  8D26              ;    		 1 ..... AZUL
 11+  8D26              ; 			 2 ..... ROJO
 12+  8D26              ;			 3 ..... MAGENTA
 13+  8D26              ; 			 4 ..... VERDE
 14+  8D26              ; 			 5 ..... CIAN
 15+  8D26              ;			 6 ..... AMARILLO
 16+  8D26              ; 			 7 ..... BLANCO
 17+  8D26              ;
 18+  8D26              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D26              ;
 20+  8D26              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D26
 22+  8D26
 23+  8D26 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D29 11 01 40     	LD DE,$4001
 25+  8D2C 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D2F 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D31 ED B0        	LDIR
 28+  8D33 01 FF 02     	LD BC,767
 29+  8D36 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D37 ED B0        	LDIR
 31+  8D39 C9           	ret
 32+  8D3A
# file closed: Cls.asm
741   8D3A              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D3A              ; ******************************************************************************************************************************************************************************************
  2+  8D3A              ;
  3+  8D3A              ;   22/01/23
  4+  8D3A              ;
  5+  8D3A              ;	Mov_down
  6+  8D3A              ;
  7+  8D3A              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D3A              ;
  9+  8D3A              ;
 10+  8D3A 21 1B 85     Mov_down ld hl,Ctrl_0
 11+  8D3D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D3F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D3F              ; 																	; _ en el caso de que no lo haya.
 14+  8D3F 3A 06 85     	ld a,(Vel_down)
 15+  8D42 47           	ld b,a
 16+  8D43 2A F0 84         ld hl,(Posicion_actual)
 17+  8D46 CD EE 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D49 E6 02        	and 2
 19+  8D4B 28 0F        	jr z,1F
 20+  8D4D
 21+  8D4D              ; Nos encontramos en el último tercio de pantalla.
 22+  8D4D              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D4D
 24+  8D4D 7C           	ld a,h
 25+  8D4E FE 57        	cp $57
 26+  8D50 20 0A        	jr nz,1F
 27+  8D52 7D           	ld a,l
 28+  8D53 C6 20        	add $20
 29+  8D55 30 05        	jr nc,1F
 30+  8D57              ; ------------------------------
 31+  8D57 CD CD 8F     	call Reaparece_arriba
 32+  8D5A              ;	call Reinicio
 33+  8D5A              ; ------------------------------
 34+  8D5A 18 08        	jr 3F
 35+  8D5C CD 90 8A     1 call NextScan
 36+  8D5F 22 F0 84     	ld (Posicion_actual),hl
 37+  8D62 10 E2            djnz 2B
 38+  8D64 CD E3 8F     3 call Genera_coordenadas
 39+  8D67 C9           	ret
 40+  8D68
 41+  8D68
 42+  8D68              ; ******************************************************************************************************************************************************************************************
 43+  8D68              ;
 44+  8D68              ;   22/01/23
 45+  8D68              ;
 46+  8D68              ;	Mov_up
 47+  8D68              ;
 48+  8D68              ; 	Mueve el Sprite hacia arriba.
 49+  8D68              ;
 50+  8D68              ;
 51+  8D68 21 1B 85     Mov_up ld hl,Ctrl_0
 52+  8D6B CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D6D              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D6D              ; 																		; _ en el caso de que no lo haya.
 55+  8D6D 3A 05 85     	ld a,(Vel_up)
 56+  8D70 47           	ld b,a
 57+  8D71 2A F0 84     	ld hl,(Posicion_actual)
 58+  8D74 CD EE 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D77 A7           	and a
 60+  8D78 20 10        	jr nz,1F
 61+  8D7A
 62+  8D7A              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D7A              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D7A
 65+  8D7A 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D7B FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D7D 20 0B            jr nz,1F
 68+  8D7F 7D               ld a,l
 69+  8D80 D6 20            sub $20
 70+  8D82 30 06            jr nc,1F
 71+  8D84 25               dec h
 72+  8D85
 73+  8D85              ; -----------------------------
 74+  8D85 CD BD 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D88              ;	call Reinicio
 76+  8D88              ; -----------------------------
 77+  8D88
 78+  8D88 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D8A CD 9F 8A     1 call PreviousScan
 80+  8D8D 22 F0 84     	ld (Posicion_actual),hl
 81+  8D90 10 E2            djnz 3B
 82+  8D92 CD E3 8F     2 call Genera_coordenadas
 83+  8D95 C9           	ret
 84+  8D96
 85+  8D96              ; ******************************************************************************************************************************************************************************************
 86+  8D96              ;
 87+  8D96              ;	19/10/22
 88+  8D96              ;
 89+  8D96              ;	Mov_right.
 90+  8D96              ;
 91+  8D96              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D96              ;
 93+  8D96
 94+  8D96 21 1B 85     Mov_right ld hl,Ctrl_0
 95+  8D99 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D9B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D9B              ; 																	; _ en el caso de que no lo haya.
 98+  8D9B 3A 1B 85     	ld a,(Ctrl_0)
 99+  8D9E CB 77        	bit 6,a
100+  8DA0 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
101+  8DA2
102+  8DA2 CD 6B 8F     	call Stop_Amadeus_right
103+  8DA5 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
104+  8DA6 18 4D        	jr 8F
105+  8DA8
106+  8DA8 3A F5 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
107+  8DAB FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
108+  8DAD 20 46        	jr nz,8F
109+  8DAF
110+  8DAF 3A F4 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
111+  8DB2 A7           	and a 															; _[3] para continuar con el DESPLZ.
112+  8DB3 28 40        	jr z,8F
113+  8DB5
114+  8DB5              ; ---------- ---------- ----------
115+  8DB5              ;
116+  8DB5              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
117+  8DB5
118+  8DB5 3A 04 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8DB8 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8DBA 28 11        	jr z,1F
121+  8DBC 38 06        	jr c,6F
122+  8DBE FE 04        	cp 4
123+  8DC0 28 14        	jr z,7F
124+  8DC2 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8DC4
126+  8DC4              ; ---------- ---------- ----------
127+  8DC4              ;
128+  8DC4              ; Perfiles de velocidad
129+  8DC4              ;
130+  8DC4
131+  8DC4 3A F4 84     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
132+  8DC7 FE FE        	cp $fe
133+  8DC9 20 2A        	jr nz,8F
134+  8DCB 18 10        	jr 3F
135+  8DCD 3A F4 84     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
136+  8DD0 FE FD        	cp $fd
137+  8DD2 20 21        	jr nz,8F
138+  8DD4 18 07        	jr 3F
139+  8DD6 3A F4 84     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
140+  8DD9 FE FB        	cp $fb
141+  8DDB 20 18        	jr nz,8F
142+  8DDD
143+  8DDD              ; ---------- ---------- ----------
144+  8DDD
145+  8DDD CD AB 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
146+  8DE0              ;	call Reinicio
147+  8DE0
148+  8DE0              ; ---------- ---------- ----------
149+  8DE0              ;
150+  8DE0              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
151+  8DE0
152+  8DE0 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
153+  8DE2 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
154+  8DE3 CD FC 8D     	call DESPLZ_DER
155+  8DE6 C1           	pop bc
156+  8DE7 10 F9        	djnz 5B
157+  8DE9 2A F0 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
158+  8DEC 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
159+  8DED 22 F0 84     	ld (Posicion_actual),hl
160+  8DF0 CD E3 8F     	call Genera_coordenadas
161+  8DF3 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
162+  8DF5
163+  8DF5              ; ---------- ---------- ----------
164+  8DF5
165+  8DF5 2A F0 84     8 ld hl,(Posicion_actual)
166+  8DF8 CD FC 8D     	call DESPLZ_DER
167+  8DFB C9           2 ret
168+  8DFC
169+  8DFC              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
170+  8DFC              ;
171+  8DFC              ;	22/9/22
172+  8DFC              ;
173+  8DFC
174+  8DFC CD 0B 8E     DESPLZ_DER call Desplaza_derecha
175+  8DFF CD 2E 8E         call modifica_parametros_1er_DESPLZ_2
176+  8E02 CD 57 8E         call Ciclo_completo
177+  8E05 21 1B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
178+  8E08 CB FE        	set 7,(hl)
179+  8E0A C9           	ret
180+  8E0B
181+  8E0B              ; ******************************************************************************************************************************************************************************************
182+  8E0B              ;	2/2/23
183+  8E0B              ;
184+  8E0B
185+  8E0B 3A 04 85     Desplaza_derecha ld a,(Vel_right)
186+  8E0E 47           	ld b,a
187+  8E0F 2A FC 84     	ld hl,(Puntero_DESPLZ_der)
188+  8E12
189+  8E12 23           1 inc hl
190+  8E13 23           	inc hl
191+  8E14 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
192+  8E16 22 FC 84     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
193+  8E19 CD 9C 86     	call Extrae_address
194+  8E1C 22 F2 84     	ld (Puntero_objeto),hl
195+  8E1F
196+  8E1F              ; Modifica (Puntero_DESPLZ_izq).
197+  8E1F
198+  8E1F 3A 04 85     	ld a,(Vel_right)
199+  8E22 47           	ld b,a
200+  8E23 2A FE 84     	ld hl,(Puntero_DESPLZ_izq)
201+  8E26 2B           1 dec hl
202+  8E27 2B           	dec hl
203+  8E28 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
204+  8E2A 22 FE 84     	ld (Puntero_DESPLZ_izq),hl 										; _por el índice del Sprite.
205+  8E2D C9           	ret
206+  8E2E
207+  8E2E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
208+  8E2E              ;
209+  8E2E              ;	24/7/22
210+  8E2E              ;
211+  8E2E              ;	modifica_parametros_1er_DESPLZ_2
212+  8E2E              ;
213+  8E2E              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
214+  8E2E              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
215+  8E2E              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
216+  8E2E
217+  8E2E 3A F4 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
218+  8E31 A7           	and a
219+  8E32 20 1F        	jr nz,1F
220+  8E34 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
221+  8E36 32 F4 84         ld (CTRL_DESPLZ),a
222+  8E39
223+  8E39 21 EF 84     	ld hl,Columns
224+  8E3C 34           	inc (hl)
225+  8E3D 3A 02 85     	ld a,(Cuad_objeto)
226+  8E40 E6 01        	and 1
227+  8E42 28 0F        	jr z,1F
228+  8E44 2A F0 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
229+  8E47 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
230+  8E48 22 F0 84     	ld (Posicion_actual),hl
231+  8E4B CD E3 8F     	call Genera_coordenadas
232+  8E4E CD 77 8F     	call Inc_CTRL_DESPLZ
233+  8E51 18 03        	jr 2F
234+  8E53 CD 77 8F     1 call Inc_CTRL_DESPLZ
235+  8E56 C9           2 ret
236+  8E57
237+  8E57              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
238+  8E57              ;
239+  8E57              ;	24/7/22
240+  8E57              ;
241+  8E57              ;	Ciclo_completo.
242+  8E57              ;
243+  8E57              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
244+  8E57              ;
245+  8E57              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
246+  8E57              ; 	Decrementamos (Columns).
247+  8E57              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
248+  8E57              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
249+  8E57
250+  8E57
251+  8E57 3A F4 84     Ciclo_completo ld a,(CTRL_DESPLZ)
252+  8E5A FE FF        	cp $ff
253+  8E5C 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
254+  8E5E 18 1C        	jr 3f
255+  8E60 21 EF 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
256+  8E63 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
257+  8E64 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
258+  8E65 32 F4 84     	ld (CTRL_DESPLZ),a
259+  8E68 3A 02 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
260+  8E6B E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
261+  8E6D 20 0A        	jr nz,2F
262+  8E6F 2A F0 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
263+  8E72 23           	inc hl
264+  8E73 22 F0 84     	ld (Posicion_actual),hl
265+  8E76 CD E3 8F     	call Genera_coordenadas
266+  8E79
267+  8E79              ; Inicia el puntero de Sprite.
268+  8E79
269+  8E79 CD B1 86     2 call Inicia_puntero_objeto_der
270+  8E7C C9           3 ret
271+  8E7D
272+  8E7D              ; ******************************************************************************************************************************************************************************************
273+  8E7D              ;
274+  8E7D              ;	21/01/23
275+  8E7D              ;
276+  8E7D              ;	Mov_left.
277+  8E7D              ;
278+  8E7D              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
279+  8E7D              ;
280+  8E7D              Mov_left
281+  8E7D
282+  8E7D 21 1B 85     	ld hl,Ctrl_0
283+  8E80 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
284+  8E82              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
285+  8E82              ; 																	; _ en el caso de que no lo haya.
286+  8E82 3A F4 84     	ld a,(CTRL_DESPLZ)
287+  8E85 A7           	and a
288+  8E86 20 0C        	jr nz,11F
289+  8E88
290+  8E88 3A 1B 85     	ld a,(Ctrl_0)
291+  8E8B CB 77        	bit 6,a
292+  8E8D 28 55        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
293+  8E8F
294+  8E8F CD 71 8F     	call Stop_Amadeus_left
295+  8E92 20 50        	jr nz,8F
296+  8E94
297+  8E94 3A F5 84     11 ld a,(Coordenada_X)
298+  8E97 A7           	and a
299+  8E98 20 4A        	jr nz,8F
300+  8E9A 3A F4 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
301+  8E9D A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
302+  8E9E 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
303+  8EA0
304+  8EA0              ; ---------- ---------- ----------
305+  8EA0
306+  8EA0 3A 03 85     	ld a,(Vel_left)
307+  8EA3 FE 02        	cp 2
308+  8EA5 28 0F        	jr z,1F
309+  8EA7 38 04        	jr c,6F
310+  8EA9 FE 04        	cp 4
311+  8EAB 28 12        	jr z,7F
312+  8EAD
313+  8EAD              ; ---------- ---------- ----------
314+  8EAD
315+  8EAD 3A F4 84     6 ld a,(CTRL_DESPLZ)
316+  8EB0 FE F9        	cp $f9
317+  8EB2 20 30        	jr nz,8F
318+  8EB4 18 10        	jr 4F
319+  8EB6 3A F4 84     1 ld a,(CTRL_DESPLZ)
320+  8EB9 FE FA        	cp $fa
321+  8EBB 20 27        	jr nz,8F
322+  8EBD 18 07        	jr 4F
323+  8EBF 3A F4 84     7 ld a,(CTRL_DESPLZ)
324+  8EC2 FE FC        	cp $fc
325+  8EC4 20 1E        	jr nz,8F
326+  8EC6
327+  8EC6              ; ---------- ---------- ----------
328+  8EC6
329+  8EC6              4
330+  8EC6 CD 99 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
331+  8EC9              ;	call Reinicio
332+  8EC9
333+  8EC9              ; ---------- ---------- ----------
334+  8EC9
335+  8EC9 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
336+  8ECB C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
337+  8ECC
338+  8ECC 2A FA 84     	ld hl,(Indice_Sprite_izq)
339+  8ECF 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
340+  8ED2
341+  8ED2 CD EB 8E     	call DESPLZ_IZQ
342+  8ED5 C1           	pop bc
343+  8ED6 10 F3        	djnz 5B
344+  8ED8 2A F0 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
345+  8EDB 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
346+  8EDC 22 F0 84     	ld (Posicion_actual),hl
347+  8EDF CD E3 8F     	call Genera_coordenadas
348+  8EE2 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
349+  8EE4
350+  8EE4              ; ---------- ---------- ----------
351+  8EE4              ; Movemos, no hay recolocación.
352+  8EE4
353+  8EE4 2A F0 84     8 ld hl,(Posicion_actual)
354+  8EE7 CD EB 8E     	call DESPLZ_IZQ
355+  8EEA C9           2 ret
356+  8EEB
357+  8EEB              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
358+  8EEB              ;
359+  8EEB              ;	22/9/22
360+  8EEB
361+  8EEB              DESPLZ_IZQ
362+  8EEB
363+  8EEB CD FA 8E     	call Desplaza_izquierda
364+  8EEE CD 1D 8F         call modifica_parametros_1er_DESPLZ
365+  8EF1 CD 45 8F     	call Ciclo_completo_2
366+  8EF4 21 1B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
367+  8EF7 CB BE        	res 7,(hl)
368+  8EF9 C9           	ret
369+  8EFA
370+  8EFA 3A 03 85     Desplaza_izquierda ld a,(Vel_left)
371+  8EFD 47           	ld b,a
372+  8EFE 2A FE 84     	ld hl,(Puntero_DESPLZ_izq)
373+  8F01 23           1 inc hl
374+  8F02 23           	inc hl
375+  8F03 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
376+  8F05 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
377+  8F08 CD 9C 86     	call Extrae_address
378+  8F0B 22 F2 84     	ld (Puntero_objeto),hl
379+  8F0E
380+  8F0E              ; Modifica (Puntero_DESPLZ_der).
381+  8F0E
382+  8F0E 3A 03 85     	ld a,(Vel_left)
383+  8F11 47           	ld b,a
384+  8F12 2A FC 84     	ld hl,(Puntero_DESPLZ_der)
385+  8F15 2B           1 dec hl
386+  8F16 2B           	dec hl
387+  8F17 10 FC        	djnz 1B 													 	; Seleccionamos FRAME en función de la velocidad del Sprite.
388+  8F19 22 FC 84     	ld (Puntero_DESPLZ_der),hl
389+  8F1C C9           	ret
390+  8F1D
391+  8F1D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
392+  8F1D              ;
393+  8F1D              ;	modifica_parametros_1er_DESPLZ
394+  8F1D              ;
395+  8F1D              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
396+  8F1D              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
397+  8F1D              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
398+  8F1D
399+  8F1D 3A F4 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
400+  8F20 A7           	and a
401+  8F21 20 1E        	jr nz,1F
402+  8F23 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
403+  8F24 32 F4 84         ld (CTRL_DESPLZ),a
404+  8F27 21 EF 84     	ld hl,Columns
405+  8F2A 34           	inc (hl)
406+  8F2B 3A 02 85     	ld a,(Cuad_objeto)
407+  8F2E E6 01        	and 1
408+  8F30 20 0F        	jr nz,1F
409+  8F32 2A F0 84     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
410+  8F35 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
411+  8F36 22 F0 84     	ld (Posicion_actual),hl
412+  8F39 CD E3 8F     	call Genera_coordenadas
413+  8F3C CD 88 8F     	call Dec_CTRL_DESPLZ
414+  8F3F 18 03        	jr 2F
415+  8F41 CD 88 8F     1 call Dec_CTRL_DESPLZ
416+  8F44 C9           2 ret
417+  8F45
418+  8F45              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
419+  8F45
420+  8F45 3A F4 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
421+  8F48 FE F8        	cp $f8
422+  8F4A 28 02        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
423+  8F4C 18 1C        	jr 3f
424+  8F4E
425+  8F4E 21 EF 84     1 ld hl,Columns
426+  8F51 35           	dec (hl)
427+  8F52 AF           	xor a
428+  8F53 32 F4 84     	ld (CTRL_DESPLZ),a
429+  8F56 3A 02 85     	ld a,(Cuad_objeto)
430+  8F59 E6 01        	and 1
431+  8F5B 28 0A        	jr z,2F
432+  8F5D 2A F0 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
433+  8F60 2B           	dec hl
434+  8F61 22 F0 84     	ld (Posicion_actual),hl
435+  8F64 CD E3 8F     	call Genera_coordenadas
436+  8F67
437+  8F67              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
438+  8F67
439+  8F67 CD C7 86     2 call Inicia_puntero_objeto_izq
440+  8F6A C9           3 ret
441+  8F6B
442+  8F6B              ; ---------- ---------- ---------- ---------- ---------- ----------
443+  8F6B              ;
444+  8F6B              ;	19/10/22
445+  8F6B              ;
446+  8F6B              ;	(cp 29) para un Amadeus de 3 Columns.
447+  8F6B              ;	(cp 30)   ""  ""    ""     2 Columns.
448+  8F6B
449+  8F6B 3A F5 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
450+  8F6E FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
451+  8F70 C9           	ret
452+  8F71
453+  8F71              ; ---------- ---------- ---------- ---------- ---------- ----------
454+  8F71              ;
455+  8F71              ;	19/10/22
456+  8F71              ;
457+  8F71              ;	(cp 2) para un Amadeus de 3 Columns.
458+  8F71              ;	(cp 1)   ""  ""    ""     2 Columns.
459+  8F71
460+  8F71 3A F5 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
461+  8F74 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
462+  8F76 C9           	ret
463+  8F77
464+  8F77              ; ---------- ---------- ---------- ---------- ---------- ----------
465+  8F77              ;
466+  8F77              ;	24/7/22
467+  8F77              ;
468+  8F77              ;	Inc_CTRL_DESPLZ
469+  8F77              ;
470+  8F77              ;
471+  8F77              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
472+  8F77
473+  8F77 21 F4 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
474+  8F7A 3A 04 85     	ld a,(Vel_right)
475+  8F7D A7           	and a
476+  8F7E 28 06        	jr z,1F
477+  8F80 47           	ld b,a
478+  8F81 34           3 inc (hl)
479+  8F82 10 FD        	djnz 3B
480+  8F84 18 01        	jr 2F
481+  8F86 34           1 inc (hl)
482+  8F87 C9           2 ret
483+  8F88
484+  8F88              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8F88              ;
486+  8F88              ;	5/2/23
487+  8F88              ;
488+  8F88              ;	Dec_CTRL_DESPLZ
489+  8F88              ;
490+  8F88              ;
491+  8F88              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
492+  8F88
493+  8F88 21 F4 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
494+  8F8B 3A 03 85     	ld a,(Vel_left)
495+  8F8E A7           	and a
496+  8F8F 28 06        	jr z,1F
497+  8F91 47           	ld b,a
498+  8F92 35           3 dec (hl)
499+  8F93 10 FD        	djnz 3B
500+  8F95 18 01        	jr 2F
501+  8F97 35           1 dec (hl)
502+  8F98 C9           2 ret
503+  8F99
504+  8F99              ; ---------- ---------- ---------- ---------- ---------- ----------
505+  8F99
506+  8F99 2A F0 84     Reaparece_derecha ld hl,(Posicion_actual)
507+  8F9C 01 1F 00     	ld bc,31
508+  8F9F A7           	and a
509+  8FA0 ED 4A        	adc hl,bc
510+  8FA2 22 F0 84     	ld (Posicion_actual),hl
511+  8FA5 21 1B 85     	ld hl,Ctrl_0														; $xxx1
512+  8FA8 CB C6        	set 0,(hl)
513+  8FAA C9           	ret
514+  8FAB
515+  8FAB              ; ---------- ---------- ---------- ---------- ---------- ----------
516+  8FAB
517+  8FAB 2A F0 84     Reaparece_izquierda ld hl,(Posicion_actual)
518+  8FAE 01 1F 00     	ld bc,31
519+  8FB1 A7           	and a
520+  8FB2 ED 42        	sbc hl,bc
521+  8FB4 22 F0 84     	ld (Posicion_actual),hl 											; $xx1x
522+  8FB7 21 1B 85     	ld hl,Ctrl_0
523+  8FBA CB CE        	set 1,(hl)
524+  8FBC C9           	ret
525+  8FBD
526+  8FBD              ; ---------- ---------- ---------- ---------- ---------- ----------
527+  8FBD
528+  8FBD 24           Reaparece_abajo inc h
529+  8FBE 01 E0 17     	ld bc,$17e0
530+  8FC1 A7           	and a
531+  8FC2 ED 4A        	adc hl,bc
532+  8FC4 22 F0 84     	ld (Posicion_actual),hl
533+  8FC7 21 1B 85     	ld hl,Ctrl_0
534+  8FCA CB D6        	set 2,(hl)
535+  8FCC C9           	ret
536+  8FCD
537+  8FCD              ; ---------- ---------- ---------- ---------- ---------- ----------
538+  8FCD
539+  8FCD 01 E0 17     Reaparece_arriba ld bc,$17e0
540+  8FD0 A7           	and a
541+  8FD1 ED 42        	sbc hl,bc
542+  8FD3 22 F0 84     	ld (Posicion_actual),hl
543+  8FD6 21 1B 85     	ld hl,Ctrl_0
544+  8FD9 CB DE        	set 3,(hl)
545+  8FDB C9           	ret
546+  8FDC
547+  8FDC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
548+  8FDC
549+  8FDC 2A 00 85     Reinicio ld hl,(Posicion_inicio)
550+  8FDF 22 F0 84     	ld (Posicion_actual),hl
551+  8FE2 C9           	ret
# file closed: Direcciones.asm
742   8FE3              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FE3              ;	12/12/22
  2+  8FE3              ;
  3+  8FE3              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FE3              ;	Fila superior "0", Columna izquierda "0".
  5+  8FE3              ;
  6+  8FE3              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FE3              ;
  8+  8FE3              ;	Modifica: A
  9+  8FE3
 10+  8FE3 C5           Genera_coordenadas push bc
 11+  8FE4 E5           	push hl
 12+  8FE5 2A F0 84     	ld hl,(Posicion_actual)
 13+  8FE8 7D           	ld a,l
 14+  8FE9 E6 1F        	and $1f
 15+  8FEB 32 F5 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FEE CD EE 8C     	call calcula_tercio
 17+  8FF1 47           	ld b,a
 18+  8FF2 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FF3 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FF5 7D           	ld a,l
 21+  8FF6 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FF8 28 05        	jr z,2F
 23+  8FFA 0C           1 inc c
 24+  8FFB D6 20        	sub 32
 25+  8FFD 20 FB        	jr nz,1B
 26+  8FFF 0C           2 inc c
 27+  9000 04           	inc b
 28+  9001 05           	dec b
 29+  9002 28 04        	jr z,3F
 30+  9004 3E E0        	ld a,$e0
 31+  9006 10 F2        	djnz 1B
 32+  9008 79           3 ld a,c
 33+  9009 3D           	dec a
 34+  900A 32 F6 84     	ld (Coordenada_y),a
 35+  900D E1           	pop hl
 36+  900E C1           	pop bc
 37+  900F C9           	ret
# file closed: Genera_coordenadas.asm
743   9010              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9010
  2+  9010
  3+  9010              ;   11/8/22
  4+  9010              ;
  5+  9010              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9010              ;
  7+  9010              ;   Mov_obj.asm
  8+  9010              ;
  9+  9010              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9010              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9010              ;
 12+  9010              ;   Codificación:
 13+  9010              ;
 14+  9010              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9010
 16+  9010
 17+  9010
 18+  9010 02 10 00     Izquierda db 2,%00010000,0
 19+  9013 02 20 00     Derecha db 2,%00100000,0
 20+  9016 02 80 00     Abajo db 2,%10000000,0
 21+  9019 02 40 00     Arriba db 2,%01000000,0
 22+  901C
 23+  901C 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 24+  9020 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 25+  9024 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 26+  9028 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 27+  902C 2B 44 60 42  Onda_senoidal db 43,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 27+  9030 60 42 60 40
 27+  9034 63
 28+  9035 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 28+  9039 22 A3 80 A0
 29+  903D 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 29+  9041 84 A0 83 A0
 30+  9045 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 30+  9049 80 A3 22 A0
 31+  904D 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 31+  9051 40 60 42 60
 32+  9055 42 60 44         db %01000010,%01100000,%01000100
 33+  9058 0B 2F 1F 00  Derecha_e_izquierda db 11,%00101111,%00011111,0
 34+  905C 09 1F 1F 1F  Izquierda_y_derecha db 9,%00011111,%00011111,%00011111,%00011111,%00101111,%00101111,%00101111,%00101111,0
 34+  9060 1F 2F 2F 2F
 34+  9064 2F 00
 35+  9066
 36+  9066 5C 90        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 37+  9068 58 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 38+  906A 10 90        Indice_mov_Izquierda defw Izquierda
 39+  906C 13 90        Indice_mov_Derecha defw Derecha
 40+  906E 16 90        Indice_mov_Abajo defw Abajo
 41+  9070 19 90        Indice_mov_Arriba defw Arriba
 42+  9072 20 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 43+  9074 24 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 44+  9076 1C 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 45+  9078 28 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 46+  907A 2C 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 47+  907C
 48+  907C 3A 21 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 49+  907F A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 50+  9080 28 02            jr z,1F
 51+  9082 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 52+  9084 3A 22 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 53+  9087 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 54+  9089 32 22 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 55+  908C              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 56+  908C 2A 1F 85         ld hl,(Puntero_mov)
 57+  908F 7E               ld a,(hl)
 58+  9090 32 21 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 59+  9093 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 60+  9094 22 1F 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 61+  9097
 62+  9097 3A 23 85     Decoder ld a,(Repetimos_db)
 63+  909A A7               and a
 64+  909B 20 0C            jr nz,12F
 65+  909D 2A 1F 85         ld hl,(Puntero_mov)
 66+  90A0 7E               ld a,(hl)
 67+  90A1 A7               and a
 68+  90A2 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 69+  90A4 E6 0F             and $0f
 70+  90A6 32 23 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 71+  90A9              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 72+  90A9 2A 1F 85     12 ld hl,(Puntero_mov)
 73+  90AC CB 7E            bit 7,(hl)
 74+  90AE 28 03            jr z,2F
 75+  90B0 CD 3A 8D         call Mov_down
 76+  90B3 2A 1F 85     2 ld hl, (Puntero_mov)
 77+  90B6 CB 76            bit 6,(hl)
 78+  90B8 28 03            jr z,3F
 79+  90BA CD 68 8D         call Mov_up
 80+  90BD 2A 1F 85     3 ld hl, (Puntero_mov)
 81+  90C0 CB 6E            bit 5,(hl)
 82+  90C2 28 03            jr z,4F
 83+  90C4 CD 96 8D         call Mov_right
 84+  90C7 2A 1F 85     4 ld hl, (Puntero_mov)
 85+  90CA CB 66            bit 4,(hl)
 86+  90CC 28 03            jr z,5F
 87+  90CE CD 7D 8E         call Mov_left
 88+  90D1
 89+  90D1              ; ---------- --------- --------- ---------- ----------
 90+  90D1
 91+  90D1 3A 23 85     5 ld a,(Repetimos_db)
 92+  90D4 A7               and a
 93+  90D5 28 07            jr z,6F
 94+  90D7 3D               dec a
 95+  90D8 32 23 85         ld (Repetimos_db),a
 96+  90DB 28 01            jr z,6f
 97+  90DD C9           11 ret
 98+  90DE 21 21 85     6 ld hl,Contador_db_mov
 99+  90E1 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
100+  90E2 2A 1F 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
101+  90E5 23               inc hl
102+  90E6 22 1F 85         ld (Puntero_mov),hl
103+  90E9 18 F2            jr 11B
104+  90EB 2A 1D 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
105+  90EE 3A 22 85         ld a,(Incrementa_puntero)
106+  90F1 47               ld b,a
107+  90F2 23           8 inc hl
108+  90F3 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
109+  90F5 5E               ld e,(hl)
110+  90F6 23               inc hl
111+  90F7 56               ld d,(hl)
112+  90F8 EB               ex de,hl
113+  90F9 22 1F 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
114+  90FC 18 DF            jr 11B
115+  90FE
116+  90FE              ; ---------- --------- --------- ---------- ----------
117+  90FE              ;
118+  90FE              ;   11/8/22
119+  90FE              ;
120+  90FE              ;   Prepara_Puntero_mov
121+  90FE
122+  90FE E5           Prepara_Puntero_mov push hl
123+  90FF D5               push de
124+  9100 2A 1D 85         ld hl,(Puntero_indice_mov)
125+  9103 5E               ld e,(hl)
126+  9104 23               inc hl
127+  9105 56               ld d,(hl)
128+  9106 EB               ex de,hl
129+  9107 22 1F 85         ld (Puntero_mov),hl
130+  910A D1               pop de
131+  910B E1               pop hl
132+  910C C9               ret
133+  910D
134+  910D              ; ---------- --------- --------- ---------- ----------
135+  910D              ;
136+  910D              ;   11/8/22
137+  910D              ;
138+  910D              ;   Reinicia_el_movimiento
139+  910D
140+  910D CD FE 90     Reinicia_el_movimiento call Prepara_Puntero_mov
141+  9110 AF               xor a
142+  9111 32 21 85         ld (Contador_db_mov),a
143+  9114 32 22 85         ld (Incrementa_puntero),a
144+  9117 C3 7C 90         jp Movimiento
145+  911A
146+  911A              ; ---------- --------- --------- ---------- ----------
147+  911A
148+  911A
149+  911A
150+  911A
151+  911A
152+  911A
153+  911A
154+  911A
155+  911A
156+  911A
157+  911A
158+  911A
159+  911A
160+  911A
161+  911A
162+  911A
163+  911A
164+  911A
# file closed: Patrones_de_mov.asm
744   911A              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  911A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  911A              ;
  3+  911A              ;	3/1/23
  4+  911A              ;
  5+  911A              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  911A
  7+  911A              ;	ADC HL,SP	LD (addr),SP
  8+  911A              ;	ADD HL,SP	LD SP,(addr)
  9+  911A              ;	ADD IX,SP	LD SP,nn
 10+  911A              ; 	ADD IY,SP	LD SP,HL
 11+  911A              ;				LD SP,IX
 12+  911A              ;	DEC SP		LD SP,IY
 13+  911A
 14+  911A              ;	EX (SP),HL
 15+  911A              ;	EX (SP),IX
 16+  911A              ;	EX (SP),IY
 17+  911A
 18+  911A              ;	INC SP
 19+  911A
 20+  911A
 21+  911A                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 30 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 34 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 34 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 30 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
745   7FC0
746   7FC0              	SAVESNA "Pruebas.sna", START
747   7FC0
748   7FC0
749   7FC0
# file closed: Banco_de_pruebas.asm
