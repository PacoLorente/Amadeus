# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 21 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 FA 83        	defw Badsat
  9+  83C2              ;	defw Badsat2
 10+  83C2              ;	defw Badsat3
 11+  83C2              ;	defw Badsat4
 12+  83C2 C8 83        	defw Amadeus_db
 13+  83C4              ;	...
 14+  83C4              ;	...
 15+  83C4              ;	+ entidades ...
 16+  83C4
 17+  83C4 00 00        	defw 0
 18+  83C6 00 00        	defw 0
 19+  83C8
 20+  83C8              ; ---------- ---------- ---------- ---------- ----------
 21+  83C8
 22+  83C8 02 02        Amadeus_db db 2,2
 23+  83CA 00 00        	defw 0
 24+  83CC 00           	db 0
 25+  83CD
 26+  83CD 05           	db %00000101
 27+  83CE 00 83        	defw Indice_Amadeus
 28+  83D0 00 00        	defw 0
 29+  83D2 CF 50        	defw $50cf
 30+  83D4 00 00 00     	db 0,0,0
 31+  83D7
 32+  83D7 02 02 00 00  	db 2,2,0,0
 33+  83DB
 34+  83DB 00 00        	db 0,0
 35+  83DD 00 00        	defw 0
 36+  83DF 00           	db 0
 37+  83E0 00 00        	db 0,0
 38+  83E2 00 00        	defw 0
 39+  83E4 00           	db 0
 40+  83E5
 41+  83E5 00 00        	db 0,0
 42+  83E7
 43+  83E7 00 00 00 00  	defw 0,0
 44+  83EB 00 00 00     	db 0,0,0
 45+  83EE
 46+  83EE 00 00        	defw 0
 47+  83F0 00 00        	defw 0
 48+  83F2 00           	db 0
 49+  83F3 00 00        	defw 0
 50+  83F5 00           	db 0
 51+  83F6
 52+  83F6 00 00 00 00  	defw 0,0
 53+  83FA
 54+  83FA              ; ---------- ---------- ---------- ---------- ----------
 55+  83FA
 56+  83FA 02 02        Badsat db 2,2
 57+  83FC 00 00        	defw 0
 58+  83FE 00           	db 0
 59+  83FF
 60+  83FF 06           	db %00000110
 61+  8400 80 81        	defw Indice_Badsat_der
 62+  8402 00 00        	defw 0
 63+  8404 A1 47        	defw $47a1
 64+  8406 00 00 00     	db 0,0,0
 65+  8409
 66+  8409 01 01 01 02  	db 1,1,1,2
 67+  840D
 68+  840D 00 00        	db 0,0
 69+  840F 00 00        	defw 0
 70+  8411 00           	db 0
 71+  8412 00 00        	db 0,0
 72+  8414 00 00        	defw 0
 73+  8416 00           	db 0
 74+  8417
 75+  8417 00 00        	db 0,0
 76+  8419
 77+  8419 A0 8F 00 00  	defw Indice_mov_Badsat,0
 78+  841D 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 79+  8420
 80+  8420 00 00        	defw 0
 81+  8422 00 00        	defw 0
 82+  8424 00           	db 0
 83+  8425 00 00        	defw 0
 84+  8427 00           	db 0
 85+  8428
 86+  8428 00 00 00 00  	defw 0,0
 87+  842C
 88+  842C              ; ---------- ---------- ---------- ---------- ----------
 89+  842C
 90+  842C 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 91+  842E 00 00        	defw 0                                            ; Posicion_actual
 92+  8430 00           	db 0                                              ; CTRL_DESPLZ
 93+  8431
 94+  8431 02           	db %00000010
 95+  8432 00 80        	defw Indice_Badsat_izq	                          ; Indice_Sprite
 96+  8434 00 00        	defw 0                                            ; Puntero_DESPLZ
 97+  8436 61 47        	defw $4761                                        ; Posicion_inicio
 98+  8438 00 00 00     	db 0,0,0
 99+  843B
100+  843B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
101+  843F
102+  843F 00 00        	db 0,0
103+  8441 00 00        	defw 0
104+  8443 00           	db 0
105+  8444 00 00        	db 0,0
106+  8446 00 00        	defw 0
107+  8448 00           	db 0
108+  8449
109+  8449 00 00        	db 0,0
110+  844B
111+  844B A2 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
112+  844F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
113+  8452
114+  8452 00 00        	defw 0
115+  8454 00 00        	defw 0
116+  8456 00           	db 0
117+  8457 00 00        	defw 0
118+  8459 00           	db 0
119+  845A
120+  845A 00 00 00 00  	defw 0,0
121+  845E
122+  845E              ; ---------- ---------- ---------- ---------- ----------
123+  845E
124+  845E 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
125+  8460 00 00        	defw 0                                            ; Posicion_actual
126+  8462 00           	db 0                                              ; CTRL_DESPLZ
127+  8463
128+  8463 04           	db %00000100
129+  8464 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
130+  8466 00 00        	defw 0                                            ; Puntero_DESPLZ
131+  8468 7E 47        	defw $477e                                        ; Posicion_inicio
132+  846A 00 00 00     	db 0,0,0
133+  846D
134+  846D 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
135+  8471
136+  8471 00 00        	db 0,0
137+  8473 00 00        	defw 0
138+  8475 00           	db 0
139+  8476 00 00        	db 0,0
140+  8478 00 00        	defw 0
141+  847A 00           	db 0
142+  847B
143+  847B 00 00        	db 0,0
144+  847D
145+  847D A4 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
146+  8481 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
147+  8484
148+  8484 00 00        	defw 0
149+  8486 00 00        	defw 0
150+  8488 00           	db 0
151+  8489 00 00        	defw 0
152+  848B 00           	db 0
153+  848C
154+  848C 00 00 00 00  	defw 0,0
155+  8490
156+  8490              ; ---------- ---------- ---------- ---------- ----------
157+  8490
158+  8490 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
159+  8492 00 00        	defw 0                                            ; Posicion_actual
160+  8494 00           	db 0                                              ; CTRL_DESPLZ
161+  8495
162+  8495 01           	db %00000001
163+  8496 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
164+  8498 00 00        	defw 0                                            ; Puntero_DESPLZ
165+  849A BE 47        	defw $47be                                        ; Posicion_inicio
166+  849C 00 00 00     	db 0,0,0
167+  849F
168+  849F 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
169+  84A3
170+  84A3 00 00        	db 0,0
171+  84A5 00 00        	defw 0
172+  84A7 00           	db 0
173+  84A8 00 00        	db 0,0
174+  84AA 00 00        	defw 0
175+  84AC 00           	db 0
176+  84AD
177+  84AD 00 00        	db 0,0
178+  84AF
179+  84AF A6 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
180+  84B3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
181+  84B6
182+  84B6 00 00        	defw 0
183+  84B8 00 00        	defw 0
184+  84BA 00           	db 0
185+  84BB 00 00        	defw 0
186+  84BD 00           	db 0
187+  84BE
188+  84BE 00 00 00 00  	defw 0,0
189+  84C2
# file closed: Base_de_datos_Sprites.asm
 21   84C2
 22   84C2              ; ******************************************************************************************************************************************************************************************
 23   84C2              ; Constantes.
 24   84C2              ; ******************************************************************************************************************************************************************************************
 25   84C2              ;
 26   84C2              ; 8/11/22
 27   84C2              ;
 28   84C2              ; Constantes generales.
 29   84C2              ;
 30   84C2
 31   84C2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84C2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84C2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84C2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84C2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84C2
 37   84C2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84C2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84C2
 40   84C2
 41   84C2              ; ******************************************************************************************************************************************************************************************
 42   84C2              ; Variables.
 43   84C2              ; ******************************************************************************************************************************************************************************************
 44   84C2              ;
 45   84C2              ; 10/11/22
 46   84C2              ;
 47   84C2              ; Variables de DRAW. (Motor principal).
 48   84C2              ;
 49   84C2
 50   84C2 02           Filas db 2												; Filas. [DRAW]
 51   84C3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84C4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84C6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 54   84C7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 55   84C7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 56   84C7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 57   84C7 06           Attr db %00000110										; Atributos de la entidad:
 58   84C8
 59   84C8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 60   84C8              ;
 61   84C8              ;	COLORES: 0 ..... NEGRO
 62   84C8              ;    		 1 ..... AZUL
 63   84C8              ; 			 2 ..... ROJO
 64   84C8              ;			 3 ..... MAGENTA
 65   84C8              ; 			 4 ..... VERDE
 66   84C8              ; 			 5 ..... CIAN
 67   84C8              ;			 6 ..... AMARILLO
 68   84C8              ; 			 7 ..... BLANCO
 69   84C8
 70   84C8 00 00        Indice_Sprite defw 0
 71   84CA 00 00        Puntero_DESPLZ defw 0
 72   84CC 20 40        Posicion_inicio defw $4020								; Dirección de pantalla donde aparece el objeto. [DRAW]
 73   84CE 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 74   84CF 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 75   84D0 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 76   84D1
 77   84D1              ; Variables de objeto. (Características).
 78   84D1
 79   84D1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 80   84D2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 81   84D3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 82   84D4 03           Vel_down db 3 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 83   84D5
 84   84D5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 85   84D7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 86   84D9 00           	db 0
 87   84DA 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 88   84DC 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 89   84DE 00           	db 0
 90   84DF
 91   84DF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 92   84DF
 93   84DF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 94   84E0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 95   84E0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 96   84E0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
 97   84E0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
 98   84E0              ;
 99   84E0              ; 														DESCRIPCIÖN:
100   84E0              ;
101   84E0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
102   84E0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
103   84E0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
104   84E0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
105   84E0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
106   84E0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
107   84E0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
108   84E0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
109   84E0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
110   84E0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
111   84E0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
112   84E0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
113   84E0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
114   84E0              ;
115   84E0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
116   84E0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
117   84E0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
118   84E0
119   84E0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
120   84E1
121   84E1              ; Movimiento.
122   84E1
123   84E1 00 00        Puntero_indice_mov defw 0
124   84E3 00 00        Puntero_mov defw 0
125   84E5 00           Contador_db_mov db 0
126   84E6 00           Incrementa_puntero db 0
127   84E7 00           Repetimos_db db 0
128   84E8
129   84E8
130   84E8              ; Variables de funcionamiento. [DRAW].
131   84E8
132   84E8 10 83        Puntero_objeto defw Amadeus 							; Donde están los datos para pintar el Sprite.
133   84EA 00 00        Puntero_datas defw 0
134   84EC 00           Columnas db 0
135   84ED 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
136   84EF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
137   84EF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
138   84F0
139   84F0
140   84F0              ; Cajas. Almacenes.
141   84F0
142   84F0 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
143   84F2 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
144   84F4
145   84F4              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
146   84F4
147   84F4              ; Gestión de ENTIDADES.
148   84F4
149   84F4 00 00        Puntero_store_entidades defw 0
150   84F6 00 00        Puntero_restore_entidades defw 0
151   84F8 00 00        Indice_restore defw 0
152   84FA
153   84FA              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
154   84FA
155   84FA 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
156   84FB 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
157   84FC              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
158   84FC              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
159   84FC              ;														; _ (Numero_de_malotes)="0".
160   84FC 00 00        Stack defw 0 											; La rutina de pintado, [Pintorrejeo], utiliza esta_
161   84FE              ;														; _variable para almacenar lo posición del puntero_
162   84FE              ; 														; _de pila, SP.
163   84FE 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
164   8500              ;														; La utiliza la rutina [Extrae_foto_registros].
165   8500 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
166   8502              ;														; _el snapshot de los registros de la siguiente entidad.
167   8502              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
168   8502
169   8502              ; Gestión de FRAMES.
170   8502
171   8502 00           Switch db 0
172   8503
173   8503              ; Variables de Raster y localización en pantalla.
174   8503
175   8503 00 FF        Temp_Raster defw $ff00
176   8505
177   8505              ; Rutina principal *************************************************************************************************************************************************************************
178   8505              ;
179   8505              ;	14/11/22
180   8505
181   8505 31 FF FF     START ld sp,$ffff
182   8508
183   8508 3E A0        	ld a,$a0
184   850A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
185   850C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
186   850E F3           	DI
187   850F
188   850F              ;	xor a												 ; Borde NEGRO. PAPER CYAN, INK BLACK.
189   850F              ;	out ($fe),a
190   850F
191   850F 3E 01        	ld a,1
192   8511 D3 FE        	out ($fe),a
193   8513
194   8513 3E 07        	ld a,%00000111
195   8515 CD F6 8B     	call Cls
196   8518
197   8518              ;	call Pinta_FILAS
198   8518
199   8518 CD 2B 86     	call Pulsa_ENTER
200   851B
201   851B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
202   851B              ;   Inicialmente tengo cargado a Amadeus en el engine.
203   851B              ;	Pintamos el resto de entidades:
204   851B
205   851B              ;	call Inicia_punteros_de_entidades
206   851B              ;	ld hl,Numero_de_entidades
207   851B              ;	ld b,(hl)
208   851B
209   851B              ;1 push bc  												; Guardo el contador de entidades.
210   851B              ; 	call Inicia_sprite
211   851B CD 82 86     	call Draw
212   851E              ;	call Guarda_foto_registros
213   851E              ;	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
214   851E              ;	pop bc
215   851E              ;	djnz 1B  											; Decremento (CONTANDOR AMADEUS).
216   851E
217   851E              ; Volvemos a situar los punteros STORE/RESTORE de entidades en AMADEUS y cargamos los datos de nuestra nave en el engine.
218   851E
219   851E              ;    call Inicia_punteros_de_entidades
220   851E              ;    call Restore_Primera_entidad
221   851E
222   851E FB           4 ei
223   851F 18 FD        	jr 4B
224   8521
225   8521              ; -----------------------------------------------------------------------------------
226   8521
227   8521              Frame
228   8521
229   8521              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
230   8521              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
231   8521
232   8521
233   8521              ;	call Calcula_numero_de_malotes						; Nº de entidades que vamos a imprimir en pantalla.
234   8521
235   8521              ;	ld a,7
236   8521              ;   out ($fe),a
237   8521              ;	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   8521
239   8521
240   8521
241   8521              ;	ld a,7
242   8521               ;   out ($fe),a
243   8521
244   8521              ;    call DELAY
245   8521
246   8521              ;    ld a,7
247   8521              ;    out ($fe),a
248   8521
249   8521
250   8521              ;    call DELAY
251   8521
252   8521
253   8521 3E 01            ld a,1
254   8523 D3 FE            out ($fe),a
255   8525
256   8525
257   8525
258   8525              ;	ld hl,$4000
259   8525              ;    ld b,8
260   8525              ;    call Pinta_enemigo_3x2
261   8525
262   8525              ;    ld hl,$4041
263   8525              ;    ld b,8
264   8525              ;    call Pinta_enemigo_3x2
265   8525
266   8525              ;	ld hl,$4082
267   8525              ;    ld b,8
268   8525              ;    call Pinta_enemigo_3x2
269   8525
270   8525              ;    ld hl,$40c3
271   8525              ;    ld b,8
272   8525              ;    call Pinta_enemigo_3x2
273   8525
274   8525              ;    ld hl,$4804
275   8525              ;    ld b,16
276   8525              ;    call Pinta_enemigo_2x2
277   8525
278   8525              ; -----
279   8525
280   8525              ;	ld hl,$50df
281   8525              ;	ld b,8
282   8525              ;;	call Pinta_enemigo_3x2_derecha_1columna;;
283   8525
284   8525              ;    xor a
285   8525              ;    out ($fe),a
286   8525
287   8525
288   8525              ; ----------------------------------------------------------------------
289   8525
290   8525              ;;	ld a,1
291   8525              ;;	out ($fe),a
292   8525
293   8525              ;;	ld hl,Album_de_fotos
294   8525              ;;    ld (Stack_snapshot),hl								; Nos situamos al principio del álbum de fotos.
295   8525              ;;    ld a,(Numero_de_entidades)
296   8525              ;;    ld b,a
297   8525
298   8525              ;;2 push bc
299   8525
300   8525              ;;	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
301   8525
302   8525              ;; 	ld a,(Ctrl_0)
303   8525              ;;	bit 4,a
304   8525              ;;	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
305   8525              ; ---------
306   8525
307   8525              ;    call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
308   8525
309   8525              ;	ld hl,Ctrl_0
310   8525              ;    res 4,(hl)
311   8525
312   8525              ;1 call Store_Restore_entidades
313   8525
314   8525              ;	pop bc
315   8525              ;	djnz 2B
316   8525
317   8525              ;	call Inicia_punteros_de_entidades
318   8525              ;	call Restore_Primera_entidad
319   8525
320   8525              ;	ld a,0
321   8525              ;	out ($fe),a
322   8525
323   8525              ;	jr $
324   8525
325   8525 C9           	ret
326   8526
327   8526              ; --------------------------------------------------------------------------------------------------------------
328   8526              ;
329   8526              Mov_obj
330   8526
331   8526 CD 97 85      	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
332   8529 CD 68 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´.
333   852C
334   852C 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla. En este caso, (Mod_puntero_datas) sitúa_
335   852E 32 E0 84     	ld (Obj_dibujado),a 								; (Puntero_datas) en la Caja_de_BORRADO.
336   8531
337   8531              ; Movemos Amadeus o enemigos...
338   8531
339   8531 3A DF 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
340   8534 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
341   8536 C4 3F 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
342   8539
343   8539 3A DF 84     	ld a,(Ctrl_0)
344   853C CB 77        	bit 6,a
345   853E CC A8 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
346   8541
347   8541 3A DF 84     	ld a,(Ctrl_0) 										; Salimos de la rutina si no ha habido movimiento.
348   8544 CB 67        	bit 4,a
349   8546 C8           	ret z
350   8547              ; ---------
351   8547
352   8547 CD 68 85         call Prepara_var_pintado_borrado	                ; Almaceno las `VARIABLES DE PINTADO´.
353   854A CD 7F 85         call Repone_borrar
354   854D CD 7A 8E     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
355   8550 CD 82 86     	call Draw											; Preparamos las variables para borrar.
356   8553 CD A0 7F     	call Guarda_foto_registros
357   8556
358   8556 C9           	ret
359   8557
360   8557              ; --------------------------------------------------------------------------------------------------------------
361   8557              ;
362   8557 AF           Borra_Pinta_obj xor a
363   8558 32 E0 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
364   855B CD 8B 85     	call Repone_pintar
365   855E CD 7A 8E     	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
366   8561 CD 82 86     	call Draw
367   8564 CD A0 7F     	call Guarda_foto_registros
368   8567 C9           	ret
369   8568
370   8568              ; --------------------------------------------------------------------------------------------------------------
371   8568
372   8568 21 C2 84     Prepara_var_pintado_borrado	ld hl,Filas
373   856B 3A E0 84     	ld a,(Obj_dibujado)
374   856E A7           	and a
375   856F 28 05        	jr z,1F
376   8571 11 DA 84     	ld de,Variables_de_pintado
377   8574 18 03        	jr 2F
378   8576 11 D5 84     1 ld de,Variables_de_borrado
379   8579 01 05 00     2 ld bc,5
380   857C ED B0        	ldir
381   857E C9           	ret
382   857F
383   857F 21 D5 84     Repone_borrar ld hl,Variables_de_borrado
384   8582 11 C2 84     	ld de,Filas
385   8585 01 05 00     	ld bc,5
386   8588 ED B0        	ldir
387   858A C9           	ret
388   858B
389   858B 21 DA 84     Repone_pintar ld hl,Variables_de_pintado
390   858E 11 C2 84     	ld de,Filas
391   8591 01 05 00     	ld bc,5
392   8594 ED B0        	ldir
393   8596 C9           	ret
394   8597
395   8597 2A F0 84     Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
396   859A 22 F2 84     	ld (Caja_de_BORRADO),hl
397   859D C9           	ret
398   859E
399   859E              ; *************************************************************************************************************************************************************
400   859E              ;
401   859E              ; 21/10/22
402   859E              ;
403   859E              ; Sitúa el puntero (Puntero_store_entidades) en la 1ª entidad del índice.
404   859E              ; Sitúa el puntero (Puntero_restore_entidades) en el 1er `enemigo', (2º entidad del índice).
405   859E              ; Destruye HL y DE !!!!!
406   859E
407   859E 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
408   85A1 CD C7 85         call Extrae_address
409   85A4 22 F4 84         ld (Puntero_store_entidades),hl
410   85A7
411   85A7 21 C2 83     	ld hl,Indice_de_entidades+2
412   85AA 22 F8 84     	ld (Indice_restore),hl
413   85AD CD C7 85     	call Extrae_address
414   85B0 22 F6 84     	ld (Puntero_restore_entidades),hl
415   85B3
416   85B3 C9               ret
417   85B4
418   85B4              ; -------------------------------------------------------------------------------------------------------------
419   85B4              ;
420   85B4              ; 16/11/22
421   85B4
422   85B4 2A 00 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
423   85B7 AF           	xor a
424   85B8 67           	ld h,a
425   85B9 7D           	ld a,l
426   85BA D6 0E        1 sub 14
427   85BC 28 03        	jr z,2F
428   85BE 24           	inc h
429   85BF 18 F9        	jr 1B
430   85C1 24           2 inc h
431   85C2 7C           	ld a,h
432   85C3 32 FB 84     	ld (Numero_de_malotes),a
433   85C6 C9           	ret
434   85C7
435   85C7              ; *************************************************************************************************************************************************************
436   85C7              ;
437   85C7              ; 20/10/22
438   85C7              ;
439   85C7              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
440   85C7              ;
441   85C7              ; Destruye el puntero y DE !!!!!
442   85C7
443   85C7 5E           Extrae_address ld e,(hl)
444   85C8 23           	inc hl
445   85C9 56           	ld d,(hl)
446   85CA 2B           	dec hl
447   85CB EB           	ex de,hl
448   85CC C9           	ret
449   85CD
450   85CD              ; *************************************************************************************************************************************************************
451   85CD              ;
452   85CD              ;	21/9/22
453   85CD              ;
454   85CD              ;   Destruye HL !!!!!,
455   85CD
456   85CD 2A C8 84     Inicia_sprite ld hl,(Indice_Sprite)
457   85D0 22 CA 84     	ld (Puntero_DESPLZ),hl
458   85D3 CD C7 85     	call Extrae_address
459   85D6 22 E8 84     	ld (Puntero_objeto),hl
460   85D9
461   85D9              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
462   85D9
463   85D9 21 10 83     	ld hl,Amadeus
464   85DC ED 4B E8 84  	ld bc,(Puntero_objeto)
465   85E0 B7 ED 42     	sub hl,bc
466   85E3 C0           	ret nz
467   85E4
468   85E4 21 DF 84     	ld hl,Ctrl_0
469   85E7 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
470   85E9
471   85E9 C9            	ret 												; _de nuestra nave en los extremos.
472   85EA
473   85EA              ; *************************************************************************************************************************************************************
474   85EA              ;
475   85EA              ;	22/10/22
476   85EA              ;
477   85EA              ;	Almacena los datos del Sprite que tenemos cargado en DRAW, en su respectiva BASE DE DATOS.
478   85EA
479   85EA              Store_Restore_entidades
480   85EA
481   85EA E5           	push hl
482   85EB D5           	push de
483   85EC C5            	push bc
484   85ED
485   85ED              ;	STORE !!!!!
486   85ED
487   85ED 21 C2 84     	ld hl,Filas
488   85F0 ED 5B F4 84  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
489   85F4 01 32 00     	ld bc,50
490   85F7 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
491   85F9
492   85F9              ;	Incrementa STORE y ejecuta RESTORE !!!!!
493   85F9
494   85F9 2A F6 84     	ld hl,(Puntero_restore_entidades)
495   85FC 22 F4 84     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
496   85FF 11 C2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
497   8602 01 32 00     	ld bc,50
498   8605 ED B0        	ldir
499   8607
500   8607              ;	Incrementa RESTORE !!!!!
501   8607
502   8607 2A F8 84         ld hl,(Indice_restore)
503   860A 23           	inc hl
504   860B 23           	inc hl
505   860C 22 F8 84     	ld (Indice_restore),hl
506   860F CD C7 85         call Extrae_address
507   8612 22 F6 84         ld (Puntero_restore_entidades),hl
508   8615
509   8615 C1           	pop bc
510   8616 D1           	pop de
511   8617 E1           	pop hl
512   8618
513   8618 C9           	ret
514   8619
515   8619              ; **************************************************************************************************
516   8619              ;
517   8619              ;	29/10/22
518   8619              ;
519   8619              ;	Cargamos los datos de la 1º entidad en el `engine'.
520   8619
521   8619 E5           Restore_Primera_entidad push hl
522   861A D5           	push de
523   861B C5            	push bc
524   861C
525   861C 2A F4 84     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de Amadeus.
526   861F 11 C2 84     	ld de,Filas
527   8622 01 32 00     	ld bc,50
528   8625 ED B0        	ldir
529   8627
530   8627 C1           	pop bc
531   8628 D1           	pop de
532   8629 E1           	pop hl
533   862A
534   862A C9           	ret
535   862B
536   862B              ; *************************************************************************************************************************************************************
537   862B              ;
538   862B              ; Teclado.
539   862B
540   862B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
541   862D DB FE        	in a,($fe)
542   862F E6 01        	and $01
543   8631 28 02        	jr z,1f
544   8633 18 F6        	jr Pulsa_ENTER
545   8635 C9           1 ret
546   8636
547   8636              ; **************************************************************************************************
548   8636              ;
549   8636              ; Temporización.
550   8636
551   8636              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
552   8636              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
553   8636              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
554   8636              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
555   8636
556   8636              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
557   8636              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
558   8636              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
559   8636
560   8636              ; A partir de $4f61 no hace falta DELAY.
561   8636
562   8636              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
563   8636
564   8636 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
565   8639 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
566   863A 78           	LD A,B
567   863B A7           	AND A
568   863C 20 FB        	JR NZ,wait
569   863E C9           	RET
570   863F
571   863F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
572   863F              ;
573   863F              ;	21/4/22
574   863F
575   863F              Movimiento_Amadeus
576   863F
577   863F 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
578   8641 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
579   8643 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
580   8645 CC 6F 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
581   8648 3E F7        	ld a,$f7
582   864A DB FE        	in a,($fe)
583   864C E6 01        	and $01
584   864E C8           	ret z
585   864F 3E F7        	ld a,$f7
586   8651 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
587   8653 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
588   8655 CC 60 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
589   8658 C9               ret
590   8659
591   8659              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
592   8659
593   8659              ; Pinta indicadores de FILAS. ------------------------------------------------------
594   8659
595   8659 21 10 40     Pinta_FILAS ld hl,$4010
596   865C              ;	ld b,9
597   865C              ;2 push hl
598   865C              ;	push bc
599   865C 06 BF        	ld b,$bf
600   865E 36 80        1 ld (hl),%10000000
601   8660 CD 57 89     	call NextScan
602   8663 10 F9        	djnz 1B
603   8665              ;	pop bc
604   8665              ;	pop hl
605   8665              ;	inc l
606   8665              ;	djnz 2B
607   8665
608   8665 06 03        	ld b,3
609   8667 21 00 47         ld hl,$4700
610   866A CD 70 86     3 call Bucle_1
611   866D 10 FB            djnz 3B
612   866F C9               ret
613   8670
614   8670 C5           Bucle_1 push bc
615   8671 E5                   push hl
616   8672 D1                   pop de
617   8673 13                   inc de
618   8674 01 FF 00             ld bc,255
619   8677 36 FF                ld (hl),255
620   8679 ED B0                ldir
621   867B 23                   inc hl
622   867C 3E 07                ld a,7
623   867E 84                   add a,h
624   867F 67                   ld h,a
625   8680 C1                   pop bc
626   8681 C9                   ret
627   8682
628   8682              ; ---------------------------------------------------------------
629   8682
630   8682              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8682              ; ******************************************************************************************************************************************************************************************
  2+  8682              ;
  3+  8682              ; 17/08/22
  4+  8682              ;
  5+  8682              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8682
  7+  8682 CD 4B 89     Draw call Prepara_draw
  8+  8685 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8686 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8687 28 05        	jr z,2F
 11+  8689 3A CE 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  868C 18 0C        	jr 1F
 13+  868E 2A CC 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8691 22 C4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8694 CD 21 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8697              ;													; _la esquina superior izquierda de la pantalla.
 17+  8697 CD 2A 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  869A 3A DF 84     1 ld a,(Ctrl_0)
 19+  869D CB 6F        	bit 5,a
 20+  869F 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  86A1
 22+  86A1 CD B5 86     	call Comprueba_limite_horizontal
 23+  86A4 CD 48 87     	call Comprueba_limite_vertical
 24+  86A7
 25+  86A7              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  86A7
 27+  86A7 CD CA 88     3 call calcula_CColumnass
 28+  86AA CD 01 89     	call calcula_variable_B
 29+  86AD
 30+  86AD
 31+  86AD
 32+  86AD 18 FE        	jr $
 33+  86AF
 34+  86AF 21 DF 84     	ld hl,Ctrl_0
 35+  86B2 CB AE        	res 5,(hl)
 36+  86B4 C9           	ret
 37+  86B5
 38+  86B5              ; *******************************************************************************************************************************************************************************************
 39+  86B5              ;	23/8/22
 40+  86B5              ;
 41+  86B5              ; 	Comprueba_limite_horizontal.
 42+  86B5              ;
 43+  86B5
 44+  86B5 3A E0 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 45+  86B8 A7           	and a
 46+  86B9 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 47+  86BA
 48+  86BA 3A DF 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 49+  86BD CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 50+  86BF 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 51+  86C1
 52+  86C1 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 53+  86C3 32 DF 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 54+  86C6 18 09            jr 6F
 55+  86C8 CB 5F        1 bit 3,a
 56+  86CA 28 0D            jr z,2F
 57+  86CC E6 F7            and $f7
 58+  86CE 32 DF 84         ld (Ctrl_0),a
 59+  86D1 CD 21 88     6 call Inicializacion
 60+  86D4 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 61+  86D5 08           	ex af,af
 62+  86D6 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 63+  86D7 18 56            jr 5F
 64+  86D9 E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 65+  86DA
 66+  86DA              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  86DA              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  86DA
 69+  86DA EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  86DB 2A ED 84     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  86DE CD BE 8B     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  86E1 67           	ld h,a
 73+  86E2 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  86E3 CD BE 8B     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  86E6 67           	ld h,a
 76+  86E7 A7           	and a
 77+  86E8 ED 52        	sbc hl,de 										; Posicíon - Límite.
 78+  86EA
 79+  86EA 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 80+  86EB FE 02        	cp 2
 81+  86ED 38 1C        	jr c,3F
 82+  86EF 28 1A        	jr z,3F
 83+  86F1
 84+  86F1 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  86F2 28 21            jr z,7F
 86+  86F4 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 87+  86F6              ;	ld e,0
 88+  86F6 E1           	pop hl
 89+  86F7
 90+  86F7              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  86F7              ; _para indicar con E="2" en caso necesario.
 92+  86F7
 93+  86F7 E5               push hl
 94+  86F8 C5               push bc
 95+  86F9
 96+  86F9 CD BE 8B     	call calcula_tercio
 97+  86FC FE 01        	cp 1
 98+  86FE 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 99+  8700
100+  8700 CD 30 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
101+  8703 28 26            jr z,9F
102+  8705 38 24            jr c,9F
103+  8707 1E 00        11 ld e,0
104+  8709 18 22            jr 8F
105+  870B
106+  870B 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
107+  870C 28 07        	jr z, 7F
108+  870E 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
109+  8710 1E 00         	ld e,0
110+  8712 E1           	pop hl
111+  8713 18 04        	jr 4F
112+  8715 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
113+  8717 18 15            jr 10F
114+  8719
115+  8719              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
116+  8719              ; _para indicar con E="2" en caso necesario.
117+  8719
118+  8719 E5           4 push hl
119+  871A C5               push bc
120+  871B
121+  871B CD BE 8B     	call calcula_tercio
122+  871E FE 01        	cp 1
123+  8720 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
124+  8722
125+  8722 CD 30 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
126+  8725 28 04            jr z,9F
127+  8727 30 02            jr nc,9F
128+  8729 18 02        	jr 8F
129+  872B 1E 02        9 ld e,2
130+  872D C1           8 pop bc
131+  872E E1           10 pop hl
132+  872F C9           5 ret
133+  8730
134+  8730              ; --------------------
135+  8730              ;
136+  8730              ; 25/08/22
137+  8730
138+  8730 CD BE 8B     Comprueba_centro call calcula_tercio
139+  8733 67               ld h,a
140+  8734 08           	ex af,af
141+  8735 FE 02        	cp 2
142+  8737 38 07        	jr c,1F
143+  8739 28 05        	jr z,1F
144+  873B 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
145+  873E 18 03        	jr 2F
146+  8740 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
147+  8743 08           2 ex af,af
148+  8744 A7               and a
149+  8745 ED 42            sbc hl,bc
150+  8747 C9               ret
151+  8748
152+  8748              ; *********************************************************************************************************************************************************************************************
153+  8748              ;
154+  8748              ;   16/8/22
155+  8748              ;
156+  8748              ;	Comprueba_limite_vertical
157+  8748              ;
158+  8748              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
159+  8748              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
160+  8748              ;
161+  8748
162+  8748 3A E0 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
163+  874B A7           	and a
164+  874C C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
165+  874D
166+  874D 7D           	ld a,l
167+  874E E6 1F        	and $1F
168+  8750 57           	ld d,a
169+  8751 3A EF 84     	ld a,(Limite_vertical)
170+  8754 BA           	cp d 											; Límite - Posición.
171+  8755
172+  8755 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
173+  8756 CB 47        	bit 0,a
174+  8758 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
175+  875A
176+  875A              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
177+  875A
178+  875A 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
179+  875B 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
180+  875D
181+  875D               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
182+  875D              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
183+  875D
184+  875D 3A CF 84         ld a,(Coordenada_X)
185+  8760 16 0F            ld d,Centro_izquierda
186+  8762 A7               and a
187+  8763 92               sub d 											 ; Posición - Centro_izquierda.
188+  8764
189+  8764 28 21            jr z,3F
190+  8766 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
191+  8768              ;                                                    ; _salimos sin modificar nada.
192+  8768 18 0E            jr 2F
193+  876A
194+  876A 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
195+  876B 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
196+  876D
197+  876D              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
198+  876D              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
199+  876D
200+  876D 3A CF 84         ld a,(Coordenada_X)
201+  8770 16 10            ld d,Centro_derecha
202+  8772 A7               and a
203+  8773 92               sub d
204+  8774
205+  8774 28 11            jr z,3F
206+  8776 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
207+  8778              ;                                                    ; _salimos sin modificar nada.
208+  8778 CB 43        2 bit 0,e
209+  877A 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
210+  877C C5           	push bc
211+  877D CD 10 88         call Modificaccionne
212+  8780 C1           	pop bc
213+  8781 CD 21 88         call Inicializacion
214+  8784 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
215+  8785 08           	ex af,af
216+  8786 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
217+  8787 C9           3 ret 				 								 ; Salimos de la rutina.
218+  8788
219+  8788              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
220+  8788
221+  8788 C5           4 push bc
222+  8789 01 C3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
223+  878C 0A           	ld a,(bc)
224+  878D 3D           	dec a
225+  878E 47           	ld b,a 											 ; Columnas-1 en B.
226+  878F 7D           	ld a,l
227+  8790 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
228+  8791 CB 47        	bit 0,a
229+  8793 28 03        	jr z,5F
230+  8795 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
231+  8796 18 2E        	jr 7F
232+  8798
233+  8798              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
234+  8798
235+  8798 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
236+  8799 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
237+  879A 3A DF 84     	ld a,(Ctrl_0)
238+  879D CB 4F        	bit 1,a
239+  879F 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
240+  87A1 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
241+  87A2
242+  87A2              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
243+  87A2
244+  87A2 1C               inc e
245+  87A3 1D               dec e
246+  87A4 20 07            jr nz,12F
247+  87A6 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
248+  87A7 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
249+  87A8 22 C4 84     	ld (Posicion_actual),hl
250+  87AB 18 44        13 jr 9F
251+  87AD
252+  87AD CB 43        12 bit 0,e
253+  87AF 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
254+  87B1              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
255+  87B1 C1           	pop bc
256+  87B2 18 D3        	jr 3B
257+  87B4
258+  87B4 80           14 add b
259+  87B5 6F               ld l,a
260+  87B6 22 C4 84     	ld (Posicion_actual),hl
261+  87B9 CD 10 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
262+  87BC 18 33            jr 9F 											 ; _inicializamos y salimos.
263+  87BE
264+  87BE E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
265+  87C0 32 DF 84         ld (Ctrl_0),a
266+  87C3 F1           	pop af
267+  87C4 18 2B        	jr 9F
268+  87C6
269+  87C6              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
270+  87C6
271+  87C6 F5           7 push af
272+  87C7 3A DF 84     	ld a,(Ctrl_0)
273+  87CA CB 47        	bit 0,a
274+  87CC 20 1D        	jr nz,8F
275+  87CE F1           	pop af
276+  87CF
277+  87CF              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
278+  87CF
279+  87CF 1C           	inc e
280+  87D0 1D               dec e
281+  87D1 20 07            jr nz,10F
282+  87D3
283+  87D3 90           	sub b
284+  87D4 6F               ld l,a
285+  87D5 22 C4 84     	ld (Posicion_actual),hl
286+  87D8 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
287+  87DA              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
288+  87DA CB 43        10 bit 0,e
289+  87DC 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
290+  87DE              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
291+  87DE C1           	pop bc
292+  87DF 18 A6        	jr 3B
293+  87E1
294+  87E1 90           16 sub b
295+  87E2 6F               ld l,a
296+  87E3 22 C4 84     	ld (Posicion_actual),hl
297+  87E6 CD 10 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
298+  87E9 18 06            jr 9F
299+  87EB
300+  87EB E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
301+  87ED 32 DF 84         ld (Ctrl_0),a
302+  87F0 F1           	pop af
303+  87F1
304+  87F1 C1           9 pop bc
305+  87F2              ;	ld e,0
306+  87F2 CD 21 88         call Inicializacion
307+  87F5 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
308+  87F6 08           	ex af,af
309+  87F7 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
310+  87F8 18 8D            jr 3B
311+  87FA
312+  87FA              ; --------------------
313+  87FA
314+  87FA              Modifica_Pos_actual
315+  87FA
316+  87FA              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
317+  87FA 05               dec B                                           ; Scanlines-1 en B.
318+  87FB CD 69 89     1 call PreviousScan
319+  87FE 10 FB            djnz 1B
320+  8800 22 C4 84     	ld (Posicion_actual),hl
321+  8803 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
322+  8804 C9           	ret
323+  8805
324+  8805              ; --------------------
325+  8805
326+  8805              Modifica_Pos_actual2
327+  8805
328+  8805              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
329+  8805 05               dec B                                           ; Scanlines-1 en B.
330+  8806 CD 57 89     1 call NextScan
331+  8809 10 FB            djnz 1B
332+  880B 22 C4 84     	ld (Posicion_actual),hl
333+  880E AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
334+  880F C9           	ret
335+  8810
336+  8810              ; --------------------
337+  8810
338+  8810              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
339+  8810              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
340+  8810
341+  8810 08           Modificaccionne ex af,af
342+  8811 FE 02            cp 2
343+  8813 F5               push af                                         ; Guardo el resultado de la comparación.
344+  8814 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
345+  8815 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
346+  8816 CC FA 87         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
347+  8819 DC FA 87         call c,Modifica_Pos_actual
348+  881C C8           	ret z
349+  881D CD 05 88         call Modifica_Pos_actual2
350+  8820 C9               ret
351+  8821
352+  8821              ; *************************************************************************************************************************************************************************************************
353+  8821              ;
354+  8821              ;	13/8/22
355+  8821              ;
356+  8821              ;	Inicializacion
357+  8821              ;
358+  8821              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
359+  8821              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
360+  8821              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
361+  8821              ;
362+  8821              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
363+  8821              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
364+  8821              ;	_ desaparece/aparece.
365+  8821
366+  8821              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
367+  8821              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
368+  8821              ;
369+  8821              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
370+  8821              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
371+  8821              ; 		   [E] ="0"
372+  8821
373+  8821              ; 	OUTPUT: DESTRUYE [AF] y [D].
374+  8821
375+  8821 CD BE 8B     Inicializacion call calcula_tercio
376+  8824 28 39        	jr z,primit
377+  8826 E6 02        	and 2
378+  8828 20 07        	jr nz,segmit
379+  882A 7D           	ld a,l
380+  882B FE 7F        	cp $7f
381+  882D 38 30        	jr c,primit
382+  882F 28 2E        	jr z,primit
383+  8831 CD C4 88     segmit call column
384+  8834 38 13        	jr c,tercuad
385+  8836 3E 04        cuarcuad ld a,4
386+  8838 32 CE 84     	ld (Cuad_objeto),a
387+  883B 21 20 48     	ld hl,$4820
388+  883E 22 ED 84     	ld (Limite_horizontal),hl
389+  8841 21 EF 84     	ld hl,Limite_vertical
390+  8844 36 0D        	ld (hl),$0d
391+  8846 08           	ex af,af
392+  8847 18 45        	jr 1F
393+  8849 CD 97 88     tercuad	call Fija_punteros
394+  884C 3E 03        	ld a,3
395+  884E 32 CE 84     	ld (Cuad_objeto),a
396+  8851 21 20 48     	ld hl,$4820
397+  8854 22 ED 84     	ld (Limite_horizontal),hl
398+  8857 21 EF 84     	ld hl,Limite_vertical
399+  885A 36 12        	ld (hl),$12
400+  885C 08           	ex af,af
401+  885D 18 2F        	jr 1F
402+  885F CD C4 88     primit call column
403+  8862 38 16        	jr c, primcuad
404+  8864 CD 97 88     segcuad call Fija_punteros
405+  8867 3E 02        	ld a,2
406+  8869 32 CE 84     	ld (Cuad_objeto),a
407+  886C 21 C0 4F     	ld hl,$4fc0
408+  886F 22 ED 84     	ld (Limite_horizontal),hl
409+  8872 21 EF 84     	ld hl,Limite_vertical
410+  8875 36 0D        	ld (hl),$0d
411+  8877 08           	ex af,af
412+  8878 18 14        	jr 1F
413+  887A CD 97 88     primcuad call Fija_punteros
414+  887D 3E 01        	ld a,1
415+  887F 32 CE 84     	ld (Cuad_objeto),a
416+  8882 21 C0 4F     	ld hl,$4fc0
417+  8885 22 ED 84     	ld (Limite_horizontal),hl
418+  8888 21 EF 84     	ld hl,Limite_vertical
419+  888B 36 12        	ld (hl),$12
420+  888D 08           	ex af,af
421+  888E CD 30 8F     1 call Genera_coordenadas
422+  8891 21 DF 84     	ld hl,Ctrl_0
423+  8894 CB EE        	set 5,(hl)
424+  8896 C9           	ret
425+  8897
426+  8897              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
427+  8897              ;
428+  8897              ;	14/9/22
429+  8897              ;
430+  8897              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
431+  8897              ;
432+  8897              ;	La rutina fija el puntero de dibujado/borrado.
433+  8897              ;
434+  8897              ;	Función:
435+  8897              ;
436+  8897              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
437+  8897
438+  8897 C5           Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
439+  8898 D5           	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
440+  8899 3A E0 84     	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
441+  889C A7           	and a
442+  889D 28 0E        	jr z,1F
443+  889F 3A C6 84     	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
444+  88A2 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
445+  88A3 28 16        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
446+  88A5 2A F2 84     	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
447+  88A8 22 EA 84     	ld (Puntero_datas),hl
448+  88AB 18 14        	jr 3F
449+  88AD 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
450+  88B0 A7           	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
451+  88B1 28 08        	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
452+  88B3 2A F0 84     	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
453+  88B6 22 EA 84     	ld (Puntero_datas),hl
454+  88B9 18 06        	jr 3F
455+  88BB 2A E8 84     2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
456+  88BE 22 EA 84     	ld (Puntero_datas),hl	 										; Fijamos el puntero de atributos y salimos.
457+  88C1 D1           3 pop de
458+  88C2 C1           	pop bc
459+  88C3 C9           	ret
460+  88C4
461+  88C4              ; ------------------------------------------------------------------------------------------------------------------
462+  88C4
463+  88C4              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
464+  88C4              ;
465+  88C4              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
466+  88C4
467+  88C4 7D           column ld a,l
468+  88C5 E6 1F        	and $1f
469+  88C7 FE 10         	cp $10
470+  88C9 C9            	ret
471+  88CA
472+  88CA              ; --------------------------------------------------------------------------------------------------------------------
473+  88CA              ;
474+  88CA              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
475+  88CA              ;
476+  88CA              ; 14/12/22
477+  88CA              ;
478+  88CA              ;	Modifica: A y BC.
479+  88CA
480+  88CA 3A CE 84     calcula_CColumnass ld a,(Cuad_objeto)
481+  88CD E6 01        	and 1
482+  88CF 28 17        	jr z,1F
483+  88D1
484+  88D1              ; Nos encontramos en la parte izquierda de la pantalla
485+  88D1
486+  88D1 3A CF 84     	ld a,(Coordenada_X)
487+  88D4 47           	ld b,a
488+  88D5 04           	inc b											; (Coordenada_X)+1 en B.
489+  88D6 79           	ld a,c
490+  88D7 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
491+  88D8 38 08        	jr c,2F
492+  88DA 47           	ld b,a
493+  88DB 79           	ld a,c
494+  88DC 90           	sub b
495+  88DD 32 EC 84     	ld (Columnas),a
496+  88E0 18 1B        	jr 4F
497+  88E2 79           2 ld a,c
498+  88E3 32 EC 84     	ld (Columnas),a
499+  88E6 18 15        	jr 4F
500+  88E8
501+  88E8              ; Nos encontramos en la parte derecha de la pantalla.
502+  88E8
503+  88E8 3A CF 84     1 ld a,(Coordenada_X)
504+  88EB 81           	add c
505+  88EC 3D           	dec a
506+  88ED D6 1F        	sub $1f
507+  88EF 38 08        	jr c,3F
508+  88F1 47           	ld b,a
509+  88F2 79           	ld a,c
510+  88F3 90           	sub b
511+  88F4 32 EC 84     	ld (Columnas),a
512+  88F7 18 04        	jr 4F
513+  88F9 79           3 ld a,c
514+  88FA 32 EC 84     	ld (Columnas),a
515+  88FD D9           4 exx
516+  88FE 4F           	ld c,a
517+  88FF D9           	exx
518+  8900 C9            ret
519+  8901
520+  8901              ; --------------------------------------------------------------------------------------------------------------------
521+  8901              ;
522+  8901              ;
523+  8901              calcula_variable_B
524+  8901
525+  8901 CD 4B 89     	call Prepara_draw					; (Filas)/(Columns) en BC.
526+  8904
527+  8904 3A CE 84     	ld a,(Cuad_objeto)
528+  8907 FE 02        	cp 2
529+  8909 38 04        	jr c,2F
530+  890B 28 02        	jr z,2F
531+  890D
532+  890D              ; El objeto se encuentra en la parte inferior de la pantalla.
533+  890D
534+  890D 18 FE        	jr $
535+  890F
536+  890F              ; El objeto se encuentra en la parte superior de la pantalla.
537+  890F
538+  890F 3A D0 84     2 ld a,(Coordenada_y)
539+  8912 57           	ld d,a
540+  8913 14           	inc d
541+  8914
542+  8914 78           	ld a,b
543+  8915 92           	sub d
544+  8916 38 1B        	jr c,1F
545+  8918 20 0C        	jr nz,3F
546+  891A
547+  891A              ; Aparece/desaparece por la parte alta de la pantalla. Nos encontramos en la SEGUNDA (Fila). (Coordenada_Y)="1".
548+  891A              ; Recuerdo que la 1ª (Fila) es la "0".
549+  891A
550+  891A 18 FE        	jr $
551+  891C
552+  891C CD 43 89     	call Calcula_lineas_a_restar
553+  891F A7           	and a
554+  8920 28 11        	jr z,1F 							; Si nos encontamos en el último scanline, el sprite se pintará entero.
555+  8922
556+  8922              ; No podemos imprimir todos los scanlines del objeto.
557+  8922
558+  8922 47           	ld b,a
559+  8923 3E 10        	ld a,16
560+  8925 90           	sub b
561+  8926
562+  8926
563+  8926
564+  8926
565+  8926 CD 43 89     3 call Calcula_lineas_a_restar
566+  8929 47           	ld b,a
567+  892A 3E 10        	ld a,16
568+  892C 90           	sub b
569+  892D 47           	ld b,a
Draw_XOR.asm(570): error: Label not found: Fija_Puntero_datas
570+  892E CD 00 00     	call Fija_Puntero_datas
571+  8931 18 0F        	jr 4F
572+  8933
573+  8933              ; Podemos imprimr todos los scanlines del objeto.
574+  8933
575+  8933 79           1 ld a,c
576+  8934 E6 01        	and 1
577+  8936 28 06        	jr z,5F
578+  8938
579+  8938              ; El sprite tiene 3 columnas, la variable B será "8".
580+  8938
581+  8938 D9           	exx
582+  8939 06 08        	ld b,8
583+  893B D9           	exx
584+  893C 18 04        	jr 4F
585+  893E
586+  893E              ; El sprite tiene 2 columnas, la variable B será "16".
587+  893E
588+  893E D9           5 exx
589+  893F 06 10        	ld b,16
590+  8941 D9           	exx
591+  8942
592+  8942 C9           4 ret														; Al salir de la rutina tendremos: Variable B de impresión en B´.
593+  8943              ;															;								   (Columnas) en C´.
594+  8943
595+  8943              ; ----- ----- ----- ----- ----- -----
596+  8943
597+  8943 7C           Calcula_lineas_a_restar ld a,h 								; HL contiene (Posicion_actual).
598+  8944 E6 07        	and 7
599+  8946 47           	ld b,a 													; B contiene el nº de scanlines que `NO PODEMOS IMPRIMIR´ del sprite.
600+  8947 3E 07        	ld a,7
601+  8949 90           	sub b
602+  894A C9           	ret
603+  894B
604+  894B              ; --------------------------------------------------------------------------------------------------------------------
605+  894B
606+  894B
607+  894B
608+  894B
609+  894B
610+  894B
611+  894B
612+  894B
613+  894B
614+  894B
615+  894B
616+  894B
617+  894B
618+  894B
619+  894B              ; --------------------------------------------------------------------------------------------------------------------
620+  894B              ;
621+  894B              ;	Prepara_draw
622+  894B              ;
623+  894B              ;	Es una rutina de carga.
624+  894B              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
625+  894B              ;
626+  894B              ;	FUNCIONAMIENTO:
627+  894B              ;
628+  894B              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
629+  894B              ;	- LD (Posicion_actual) del objeto en [HL].
630+  894B              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
631+  894B              ;
632+  894B              ;	DESTRUYE:
633+  894B              ;
634+  894B              ;	Logicamente, BC,HL y E quedan destruidos.
635+  894B
636+  894B 21 C2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
637+  894E 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
638+  894F 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
639+  8950 4E           	ld c,(hl)
640+  8951 2A C4 84     	ld hl,(Posicion_actual)
641+  8954 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
642+  8956 C9           	ret
643+  8957
644+  8957              ;----------------------------------------------------------------------------------------------------------------
645+  8957              ;
646+  8957              ;	5/08/22
647+  8957              ;
648+  8957              ;   NextScan.
649+  8957              ;
650+  8957              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
651+  8957              ;
652+  8957              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
653+  8957              ;
654+  8957              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
655+  8957              ;
656+  8957              ;       DESTRUIDOS: AF y HL !!!
657+  8957              ;
658+  8957              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
659+  8957              ;
660+  8957
661+  8957 24           NextScan inc h          ; Incrementamos el scanline.
662+  8958 7C               ld a,h
663+  8959 E6 07            and 7
664+  895B C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
665+  895C
666+  895C CD 30 8F     	call Genera_coordenadas
667+  895F
668+  895F 7D               ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
669+  8960 C6 20            add a,$20           ; Vamos a comprobarlo...
670+  8962 6F               ld l,a
671+  8963 D8               ret c               ; Salimos si se produce el cambio de tercio.
672+  8964
673+  8964 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
674+  8965 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
675+  8967 67               ld h,a
676+  8968 C9               ret
677+  8969
678+  8969              ;----------------------------------------------------------------------------------------------------------------
679+  8969              ;
680+  8969              ;	5/08/22
681+  8969              ;
682+  8969              ;   PreviousScan.
683+  8969              ;
684+  8969              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
685+  8969              ;
686+  8969              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
687+  8969              ;
688+  8969              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
689+  8969              ;
690+  8969              ;       DESTRUIDOS: AF y HL !!!
691+  8969              ;
692+  8969              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
693+  8969              ;
694+  8969
695+  8969 7C           PreviousScan ld a,h
696+  896A 25               dec h               ; Dec H.
697+  896B E6 07            and 7
698+  896D C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
699+  896E
700+  896E CD 30 8F     	call Genera_coordenadas
701+  8971
702+  8971 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
703+  8972 D6 20            sub $20             ; Vamos a comprobarlo...
704+  8974 6F               ld l,a
705+  8975 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
706+  8976
707+  8976 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
708+  8977 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
709+  8979 67               ld h,a
710+  897A C9               ret
711+  897B
712+  897B              ; -----------------------------------------------------------------------------------
713+  897B              ;
714+  897B              ;	14/11/22
715+  897B
716+  897B ED 73 FC 84  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
717+  897F 31 00 70     	ld sp,Album_de_fotos
718+  8982
719+  8982 D9           2 exx																		; Extraemos de Album_de_fotos los valores de los registros.
720+  8983 E1           	pop hl
721+  8984 C1           	pop bc
722+  8985 D9           	exx
723+  8986
724+  8986 08           	ex af,af
725+  8987 F1           	pop af
726+  8988 08           	ex af,af
727+  8989
728+  8989 DD E1        	pop ix
729+  898B D1           	pop de
730+  898C C1           	pop bc
731+  898D E1           	pop hl
732+  898E
733+  898E ED 73 FE 84  	ld (Stack_2),sp
734+  8992 ED 7B FC 84  	ld sp,(Stack)
735+  8996
736+  8996              ;	call Pintorrejeo														; call Pintorrejeo. Hemos pintado la entidad.
737+  8996              ;																			; Esta dirección ha de ser correcta. Cada vez que modifique
738+  8996 ED 73 FC 84  	ld (Stack),sp
739+  899A 3A FB 84     	ld a,(Numero_de_malotes)
740+  899D 3D           	dec a
741+  899E 28 09        	jr z,1F
742+  89A0 32 FB 84      	ld (Numero_de_malotes),a
743+  89A3 ED 7B FE 84  	ld sp,(Stack_2)
744+  89A7 18 D9        	jr 2B
745+  89A9
746+  89A9 ED 7B FC 84  1 ld sp,(Stack)
747+  89AD
748+  89AD C9           	ret
749+  89AE
# file closed: Draw_XOR.asm
631   89AE              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  89AE              ;   Conjunto de rutinas de impresión de Sprites.
  2+  89AE              ;
  3+  89AE              ;   12/12/22
  4+  89AE              ;
  5+  89AE              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
  6+  89AE              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
  7+  89AE              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
  8+  89AE              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
  9+  89AE              ;
 10+  89AE              ;   Modifica: DE y HL.
 11+  89AE
 12+  89AE ED 73 FC 84  Pinta_Amadeus_2x2 ld (Stack),sp
 13+  89B2 31 10 83     	ld sp,Amadeus
 14+  89B5 D1           1 pop de
 15+  89B6 73           	ld (hl),e
 16+  89B7 23           	inc hl
 17+  89B8 72           	ld (hl),d
 18+  89B9 2B           	dec hl
 19+  89BA 24           	inc h
 20+  89BB 7C               ld a,h
 21+  89BC E6 07            and 7
 22+  89BE 20 0C            jr nz,2F
 23+  89C0 7D               ld a,l
 24+  89C1 C6 20            add a,$20
 25+  89C3 6F               ld l,a
 26+  89C4 38 06            jr c,2F
 27+  89C6 7C               ld a,h
 28+  89C7 D6 08            sub 8
 29+  89C9 67               ld h,a
 30+  89CA 18 00            jr 2F
 31+  89CC 10 E7        2 djnz 1B
 32+  89CE ED 7B FC 84  	ld sp,(Stack)
 33+  89D2 C9           	ret
 34+  89D3
 35+  89D3 ED 73 FC 84  Pinta_Amadeus_3x2 ld (Stack),sp
 36+  89D7 31 30 83     	ld sp,Amadeus_F9
 37+  89DA D1           1 pop de
 38+  89DB 73           	ld (hl),e
 39+  89DC 23           	inc hl
 40+  89DD 72           	ld (hl),d
 41+  89DE 23           	inc hl
 42+  89DF D1           	pop de
 43+  89E0 73           	ld (hl),e
 44+  89E1 2B           	dec hl
 45+  89E2 2B           	dec hl
 46+  89E3 24           	inc h
 47+  89E4 7C               ld a,h
 48+  89E5 E6 07            and 7
 49+  89E7 20 0A            jr nz,2F
 50+  89E9 7D               ld a,l
 51+  89EA C6 20            add a,$20
 52+  89EC 6F               ld l,a
 53+  89ED 38 04            jr c,2F
 54+  89EF 7C               ld a,h
 55+  89F0 D6 08            sub 8
 56+  89F2 67               ld h,a
 57+  89F3 72           2 ld (hl),d
 58+  89F4 D1           	pop de
 59+  89F5 23           	inc hl
 60+  89F6 73           	ld (hl),e
 61+  89F7 23           	inc hl
 62+  89F8 72           	ld (hl),d
 63+  89F9 2B           	dec hl
 64+  89FA 2B           	dec hl
 65+  89FB 24           	inc h
 66+  89FC 7C               ld a,h
 67+  89FD E6 07            and 7
 68+  89FF 20 0A            jr nz,3F
 69+  8A01 7D               ld a,l
 70+  8A02 C6 20            add a,$20
 71+  8A04 6F               ld l,a
 72+  8A05 38 04            jr c,3F
 73+  8A07 7C               ld a,h
 74+  8A08 D6 08            sub 8
 75+  8A0A 67               ld h,a
 76+  8A0B 10 CD        3 djnz 1B
 77+  8A0D ED 7B FC 84  	ld sp,(Stack)
 78+  8A11 C9           	ret
 79+  8A12
 80+  8A12              ; ---------------------------------------------------
 81+  8A12
 82+  8A12 ED 73 FC 84  Pinta_enemigo_2x2_izquierda ld (Stack),sp
 83+  8A16 31 90 81     	ld sp,Badsat_derecha
 84+  8A19 D1           1 pop de
 85+  8A1A 7A           	ld a,d
 86+  8A1B AE           	xor (hl)
 87+  8A1C 77           	ld (hl),a
 88+  8A1D 24           	inc h
 89+  8A1E 7C               ld a,h
 90+  8A1F E6 07            and 7
 91+  8A21 20 0C            jr nz,2F
 92+  8A23 7D               ld a,l
 93+  8A24 C6 20            add a,$20
 94+  8A26 6F               ld l,a
 95+  8A27 38 06            jr c,2F
 96+  8A29 7C               ld a,h
 97+  8A2A D6 08            sub 8
 98+  8A2C 67               ld h,a
 99+  8A2D 18 00            jr 2F
100+  8A2F 10 E8        2 djnz 1B
101+  8A31 ED 7B FC 84  	ld sp,(Stack)
102+  8A35 C9           	ret
103+  8A36
104+  8A36 ED 73 FC 84  Pinta_enemigo_2x2_derecha ld (Stack),sp
105+  8A3A 31 90 81     	ld sp,Badsat_derecha
106+  8A3D D1           1 pop de
107+  8A3E 7B           	ld a,e
108+  8A3F AE           	xor (hl)
109+  8A40 77           	ld (hl),a
110+  8A41 24           	inc h
111+  8A42 7C               ld a,h
112+  8A43 E6 07            and 7
113+  8A45 20 0C            jr nz,2F
114+  8A47 7D               ld a,l
115+  8A48 C6 20            add a,$20
116+  8A4A 6F               ld l,a
117+  8A4B 38 06            jr c,2F
118+  8A4D 7C               ld a,h
119+  8A4E D6 08            sub 8
120+  8A50 67               ld h,a
121+  8A51 18 00            jr 2F
122+  8A53 10 E8        2 djnz 1B
123+  8A55 ED 7B FC 84  	ld sp,(Stack)
124+  8A59 C9           	ret
125+  8A5A
126+  8A5A              ; ---------------------------------------------------
127+  8A5A
128+  8A5A ED 73 FC 84  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
129+  8A5E 31 B0 81     	ld sp,Badsat_der_f8
130+  8A61 D1           1 pop de
131+  8A62 7A           	ld a,d
132+  8A63 AE           	xor (hl)
133+  8A64 77           	ld (hl),a
134+  8A65 23           	inc hl
135+  8A66 D1           	pop de
136+  8A67 7B           	ld a,e
137+  8A68 AE           	xor (hl)
138+  8A69 77           	ld (hl),a
139+  8A6A 2B           	dec hl
140+  8A6B 24            	inc h
141+  8A6C 7C               ld a,h
142+  8A6D E6 07            and 7
143+  8A6F 20 0A            jr nz,2F
144+  8A71 7D               ld a,l
145+  8A72 C6 20            add a,$20
146+  8A74 6F               ld l,a
147+  8A75 38 04            jr c,2F
148+  8A77 7C               ld a,h
149+  8A78 D6 08            sub 8
150+  8A7A 67               ld h,a
151+  8A7B D1           2 pop de
152+  8A7C 7B           	ld a,e
153+  8A7D AE           	xor (hl)
154+  8A7E 77           	ld (hl),a
155+  8A7F 23           	inc hl
156+  8A80 7A           	ld a,d
157+  8A81 AE           	xor (hl)
158+  8A82 77           	ld (hl),a
159+  8A83 2B           	dec hl
160+  8A84 24           	inc h
161+  8A85 7C               ld a,h
162+  8A86 E6 07            and 7
163+  8A88 20 0A            jr nz,3F
164+  8A8A 7D               ld a,l
165+  8A8B C6 20            add a,$20
166+  8A8D 6F               ld l,a
167+  8A8E 38 04            jr c,3F
168+  8A90 7C               ld a,h
169+  8A91 D6 08            sub 8
170+  8A93 67               ld h,a
171+  8A94 10 CB        3 djnz 1B
172+  8A96 ED 7B FC 84  	ld sp,(Stack)
173+  8A9A C9           	ret
174+  8A9B
175+  8A9B ED 73 FC 84  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
176+  8A9F 31 30 83     	ld sp,Amadeus_F9
177+  8AA2 D1           1 pop de
178+  8AA3 D1           	pop de
179+  8AA4 7B           	ld a,e
180+  8AA5 AE           	xor (hl)
181+  8AA6 77           	ld (hl),a
182+  8AA7 24            	inc h
183+  8AA8 7C               ld a,h
184+  8AA9 E6 07            and 7
185+  8AAB 20 0A            jr nz,2F
186+  8AAD 7D               ld a,l
187+  8AAE C6 20            add a,$20
188+  8AB0 6F               ld l,a
189+  8AB1 38 04            jr c,2F
190+  8AB3 7C               ld a,h
191+  8AB4 D6 08            sub 8
192+  8AB6 67               ld h,a
193+  8AB7 D1           2 pop de
194+  8AB8 7A           	ld a,d
195+  8AB9 AE           	xor (hl)
196+  8ABA 77           	ld (hl),a
197+  8ABB 24           	inc h
198+  8ABC 7C               ld a,h
199+  8ABD E6 07            and 7
200+  8ABF 20 0A            jr nz,3F
201+  8AC1 7D               ld a,l
202+  8AC2 C6 20            add a,$20
203+  8AC4 6F               ld l,a
204+  8AC5 38 04            jr c,3F
205+  8AC7 7C               ld a,h
206+  8AC8 D6 08            sub 8
207+  8ACA 67               ld h,a
208+  8ACB 10 D5        3 djnz 1B
209+  8ACD ED 7B FC 84  	ld sp,(Stack)
210+  8AD1 C9           	ret
211+  8AD2
212+  8AD2 ED 73 FC 84  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
213+  8AD6 31 30 83     	ld sp,Amadeus_F9
214+  8AD9 D1           1 pop de
215+  8ADA 7B           	ld a,e
216+  8ADB AE           	xor (hl)
217+  8ADC 77           	ld (hl),a
218+  8ADD 23           	inc hl
219+  8ADE 7A           	ld a,d
220+  8ADF AE           	xor (hl)
221+  8AE0 77           	ld (hl),a
222+  8AE1 2B           	dec hl
223+  8AE2 24             	inc h
224+  8AE3 7C               ld a,h
225+  8AE4 E6 07            and 7
226+  8AE6 20 0A            jr nz,2F
227+  8AE8 7D               ld a,l
228+  8AE9 C6 20            add a,$20
229+  8AEB 6F               ld l,a
230+  8AEC 38 04            jr c,2F
231+  8AEE 7C               ld a,h
232+  8AEF D6 08            sub 8
233+  8AF1 67               ld h,a
234+  8AF2 D1           2 pop de
235+  8AF3 7A           	ld a,d
236+  8AF4 AE           	xor (hl)
237+  8AF5 77           	ld (hl),a
238+  8AF6 23           	inc hl
239+  8AF7 D1               pop de
240+  8AF8 7B           	ld a,e
241+  8AF9 AE           	xor (hl)
242+  8AFA 77           	ld (hl),a
243+  8AFB 2B           	dec hl
244+  8AFC 24           	inc h
245+  8AFD 7C               ld a,h
246+  8AFE E6 07            and 7
247+  8B00 20 0A            jr nz,3F
248+  8B02 7D               ld a,l
249+  8B03 C6 20            add a,$20
250+  8B05 6F               ld l,a
251+  8B06 38 04            jr c,3F
252+  8B08 7C               ld a,h
253+  8B09 D6 08            sub 8
254+  8B0B 67               ld h,a
255+  8B0C 10 CB        3 djnz 1B
256+  8B0E ED 7B FC 84  	ld sp,(Stack)
257+  8B12 C9           	ret
258+  8B13
259+  8B13 ED 73 FC 84  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
260+  8B17 31 30 83     	ld sp,Amadeus_F9
261+  8B1A D1           1 pop de
262+  8B1B 7B           	ld a,e
263+  8B1C AE           	xor (hl)
264+  8B1D 77           	ld (hl),a
265+  8B1E 24            	inc h
266+  8B1F 7C               ld a,h
267+  8B20 E6 07            and 7
268+  8B22 20 0A            jr nz,2F
269+  8B24 7D               ld a,l
270+  8B25 C6 20            add a,$20
271+  8B27 6F               ld l,a
272+  8B28 38 04            jr c,2F
273+  8B2A 7C               ld a,h
274+  8B2B D6 08            sub 8
275+  8B2D 67               ld h,a
276+  8B2E D1           2 pop de
277+  8B2F 7A           	ld a,d
278+  8B30 AE           	xor (hl)
279+  8B31 77           	ld (hl),a
280+  8B32 24           	inc h
281+  8B33 7C               ld a,h
282+  8B34 E6 07            and 7
283+  8B36 20 0A            jr nz,3F
284+  8B38 7D               ld a,l
285+  8B39 C6 20            add a,$20
286+  8B3B 6F               ld l,a
287+  8B3C 38 04            jr c,3F
288+  8B3E 7C               ld a,h
289+  8B3F D6 08            sub 8
290+  8B41 67               ld h,a
291+  8B42 D1           3 pop de
292+  8B43 10 D5            djnz 1B
293+  8B45 ED 7B FC 84  	ld sp,(Stack)
294+  8B49 C9           	ret
295+  8B4A
296+  8B4A              ; ---------------------------------------------------
297+  8B4A
298+  8B4A ED 73 FC 84  Pinta_enemigo_2x2 ld (Stack),sp
299+  8B4E 31 90 81     	ld sp,Badsat_derecha
300+  8B51 D1           1 pop de
301+  8B52 7B           	ld a,e
302+  8B53 AE           	xor (hl)
303+  8B54 77           	ld (hl),a
304+  8B55 23           	inc hl
305+  8B56 7A           	ld a,d
306+  8B57 AE           	xor (hl)
307+  8B58 77           	ld (hl),a
308+  8B59 2B           	dec hl
309+  8B5A 24           	inc h
310+  8B5B 7C               ld a,h
311+  8B5C E6 07            and 7
312+  8B5E 20 0C            jr nz,2F
313+  8B60 7D               ld a,l
314+  8B61 C6 20            add a,$20
315+  8B63 6F               ld l,a
316+  8B64 38 06            jr c,2F
317+  8B66 7C               ld a,h
318+  8B67 D6 08            sub 8
319+  8B69 67               ld h,a
320+  8B6A 18 00            jr 2F
321+  8B6C 10 E3        2 djnz 1B
322+  8B6E ED 7B FC 84  	ld sp,(Stack)
323+  8B72 C9           	ret
324+  8B73
325+  8B73              ; ---------------------------------------------------
326+  8B73
327+  8B73 ED 73 FC 84  Pinta_enemigo_3x2 ld (Stack),sp
328+  8B77 31 B0 81     	ld sp,Badsat_der_f8
329+  8B7A D1           1 pop de
330+  8B7B 7B           	ld a,e
331+  8B7C AE           	xor (hl)
332+  8B7D 77           	ld (hl),a
333+  8B7E 23           	inc hl
334+  8B7F 7A           	ld a,d
335+  8B80 AE           	xor (hl)
336+  8B81 77           	ld (hl),a
337+  8B82 23           	inc hl
338+  8B83 D1           	pop de
339+  8B84 7B           	ld a,e
340+  8B85 AE           	xor (hl)
341+  8B86 77           	ld (hl),a
342+  8B87 2B           	dec hl
343+  8B88 2B           	dec hl
344+  8B89 24           	inc h
345+  8B8A 7C               ld a,h
346+  8B8B E6 07            and 7
347+  8B8D 20 0A            jr nz,2F
348+  8B8F 7D               ld a,l
349+  8B90 C6 20            add a,$20
350+  8B92 6F               ld l,a
351+  8B93 38 04            jr c,2F
352+  8B95 7C               ld a,h
353+  8B96 D6 08            sub 8
354+  8B98 67               ld h,a
355+  8B99 7A           2 ld a,d
356+  8B9A AE           	xor (hl)
357+  8B9B 77           	ld (hl),a
358+  8B9C D1           	pop de
359+  8B9D 23           	inc hl
360+  8B9E 7B           	ld a,e
361+  8B9F AE           	xor (hl)
362+  8BA0 77           	ld (hl),a
363+  8BA1 23           	inc hl
364+  8BA2 7A           	ld a,d
365+  8BA3 AE           	xor (hl)
366+  8BA4 77           	ld (hl),a
367+  8BA5 2B           	dec hl
368+  8BA6 2B           	dec hl
369+  8BA7 24           	inc h
370+  8BA8 7C               ld a,h
371+  8BA9 E6 07            and 7
372+  8BAB 20 0A            jr nz,3F
373+  8BAD 7D               ld a,l
374+  8BAE C6 20            add a,$20
375+  8BB0 6F               ld l,a
376+  8BB1 38 04            jr c,3F
377+  8BB3 7C               ld a,h
378+  8BB4 D6 08            sub 8
379+  8BB6 67               ld h,a
380+  8BB7 10 C1        3 djnz 1B
381+  8BB9 ED 7B FC 84  	ld sp,(Stack)
382+  8BBD C9           	ret
# file closed: Rutinas_de_impresion_sprites.asm
632   8BBE              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8BBE              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8BBE              ;
  3+  8BBE              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8BBE              ;
  5+  8BBE              ; *****************************************************************************************************************************************************************************************
  6+  8BBE              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8BBE
  8+  8BBE 7C           calcula_tercio ld a,h
  9+  8BBF E6 18        	and $18
 10+  8BC1 CB 2F        	sra a
 11+  8BC3 CB 2F        	sra a
 12+  8BC5 CB 2F        	sra a
 13+  8BC7 C9           	ret
 14+  8BC8
# file closed: calcula_tercio.asm
633   8BC8              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8BC8              ; -----------------------------------------------------------------------------------------
  2+  8BC8              ;
  3+  8BC8              ;   04/11/22
  4+  8BC8              ;
  5+  8BC8              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8BC8              ;
  7+  8BC8              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8BC8              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8BC8              ;
 10+  8BC8              ;   DESTRUYE: HL y A. !!!!!
 11+  8BC8
 12+  8BC8 CD BE 8B     Calcula_direccion_atributos call calcula_tercio
 13+  8BCB 26 58            ld h,$58
 14+  8BCD 84               add h
 15+  8BCE 67               ld h,a
 16+  8BCF C9               ret
# file closed: Calcula_direccion_atributos.asm
634   8BD0              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8BD0              ; ********** **********
  2+  8BD0              ;
  3+  8BD0              ;   5/11/22
  4+  8BD0              ;
  5+  8BD0              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8BD0              ;
  7+  8BD0              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8BD0              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8BD0              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8BD0              ;
 11+  8BD0              ;   NO DESTROYERSSSS !!!!!
 12+  8BD0
 13+  8BD0 E5           Define_atributos push hl
 14+  8BD1 C5           	push bc
 15+  8BD2 D5           	push de
 16+  8BD3
 17+  8BD3 CD C8 8B     	call Calcula_direccion_atributos
 18+  8BD6
 19+  8BD6 D9               exx
 20+  8BD7 E5               push hl
 21+  8BD8 D9               exx
 22+  8BD9 D1               pop de
 23+  8BDA
 24+  8BDA 42               ld b,d
 25+  8BDB 7B               ld a,e 									; (Attr) en A.
 26+  8BDC
 27+  8BDC C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8BDD E5            	push hl 								; Guardo dirección de attr.
 29+  8BDE
 30+  8BDE              ; -----
 31+  8BDE
 32+  8BDE 77           2 ld (hl),a
 33+  8BDF 0D           	dec c 									; Decremento (Columnas).
 34+  8BE0 28 03        	jr z,1F
 35+  8BE2 23           	inc hl
 36+  8BE3 18 F9        	jr 2B
 37+  8BE5
 38+  8BE5 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8BE6 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8BE7
 41+  8BE7 05           	dec b									; Decremento (Filas).
 42+  8BE8 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8BEA
 44+  8BEA 11 20 00     	ld de,32
 45+  8BED A7           	and a
 46+  8BEE ED 5A        	adc hl,de
 47+  8BF0 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8BF2
 49+  8BF2 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8BF3 C1           	pop bc
 51+  8BF4 E1           	pop hl
 52+  8BF5
 53+  8BF5 C9           	ret
 54+  8BF6
# file closed: Define_atributos.asm
635   8BF6              	include "Cls.asm"
# file opened: Cls.asm
  1+  8BF6              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8BF6              ;
  3+  8BF6              ;
  4+  8BF6              ;	CLS.
  5+  8BF6              ;
  6+  8BF6              ;	Limpia la pantalla y define sus atributos.
  7+  8BF6              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8BF6              ;
  9+  8BF6              ;	COLORES: 0 ..... NEGRO
 10+  8BF6              ;    		 1 ..... AZUL
 11+  8BF6              ; 			 2 ..... ROJO
 12+  8BF6              ;			 3 ..... MAGENTA
 13+  8BF6              ; 			 4 ..... VERDE
 14+  8BF6              ; 			 5 ..... CIAN
 15+  8BF6              ;			 6 ..... AMARILLO
 16+  8BF6              ; 			 7 ..... BLANCO
 17+  8BF6              ;
 18+  8BF6              ;	INPUT: A contiene los atributos de pantalla.
 19+  8BF6              ;
 20+  8BF6              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8BF6
 22+  8BF6
 23+  8BF6 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8BF9 11 01 40     	LD DE,$4001
 25+  8BFC 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8BFF 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C01 ED B0        	LDIR
 28+  8C03 01 FF 02     	LD BC,767
 29+  8C06 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C07 ED B0        	LDIR
 31+  8C09 C9           	ret
 32+  8C0A
# file closed: Cls.asm
636   8C0A              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C0A              ; ******************************************************************************************************************************************************************************************
  2+  8C0A              ;
  3+  8C0A              ;   19/10/22
  4+  8C0A              ;
  5+  8C0A              ;	Mov_down
  6+  8C0A              ;
  7+  8C0A              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C0A              ;
  9+  8C0A              ;
 10+  8C0A 21 DF 84     Mov_down ld hl,Ctrl_0
 11+  8C0D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C0F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C0F              ; 																	; _ en el caso de que no lo haya.
 14+  8C0F 3A D4 84     	ld a,(Vel_down)
 15+  8C12 47           	ld b,a
 16+  8C13 2A C4 84         ld hl,(Posicion_actual)
 17+  8C16 CD BE 8B     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C19 E6 02        	and 2
 19+  8C1B 28 0F        	jr z,1F
 20+  8C1D 7C           	ld a,h
 21+  8C1E FE 57        	cp $57
 22+  8C20 20 0A        	jr nz,1F
 23+  8C22 7D           	ld a,l
 24+  8C23 C6 20        	add $20
 25+  8C25 30 05        	jr nc,1F
 26+  8C27
 27+  8C27              ; ------------------------------
 28+  8C27 CD 17 8F     	call Reaparece_arriba
 29+  8C2A              ;	call Reinicio
 30+  8C2A              ; ------------------------------
 31+  8C2A
 32+  8C2A 18 08        	jr 3F
 33+  8C2C CD 57 89     1 call NextScan
 34+  8C2F 22 C4 84     	ld (Posicion_actual),hl
 35+  8C32 10 E2            djnz 2B
 36+  8C34 C9           3 ret
 37+  8C35
 38+  8C35
 39+  8C35              ; ******************************************************************************************************************************************************************************************
 40+  8C35              ;
 41+  8C35              ;   19/10/22
 42+  8C35              ;
 43+  8C35              ;	Mov_up
 44+  8C35              ;
 45+  8C35              ; 	Mueve el Sprite hacia arriba.
 46+  8C35              ;
 47+  8C35              ;
 48+  8C35 21 DF 84     Mov_up ld hl,Ctrl_0
 49+  8C38 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 50+  8C3A              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 51+  8C3A              ; 																		; _ en el caso de que no lo haya.
 52+  8C3A 3A D3 84     	ld a,(Vel_up)
 53+  8C3D 47           	ld b,a
 54+  8C3E 2A C4 84     	ld hl,(Posicion_actual)
 55+  8C41 CD BE 8B     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 56+  8C44 A7           	and a
 57+  8C45 20 10        	jr nz,1F
 58+  8C47 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 59+  8C48 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 60+  8C4A 20 0B            jr nz,1F
 61+  8C4C 7D               ld a,l
 62+  8C4D D6 20            sub $20
 63+  8C4F 30 06            jr nc,1F
 64+  8C51 25               dec h
 65+  8C52
 66+  8C52              ; -----------------------------
 67+  8C52 CD 07 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 68+  8C55              ;	call Reinicio
 69+  8C55              ; -----------------------------
 70+  8C55
 71+  8C55 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 72+  8C57 CD 69 89     1 call PreviousScan
 73+  8C5A 22 C4 84     	ld (Posicion_actual),hl
 74+  8C5D 10 E2            djnz 3B
 75+  8C5F C9           2   ret
 76+  8C60
 77+  8C60              ; ******************************************************************************************************************************************************************************************
 78+  8C60              ;
 79+  8C60              ;	19/10/22
 80+  8C60              ;
 81+  8C60              ;	Mov_right.
 82+  8C60              ;
 83+  8C60              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 84+  8C60              ;
 85+  8C60
 86+  8C60 21 DF 84     Mov_right ld hl,Ctrl_0
 87+  8C63 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 88+  8C65              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 89+  8C65              ; 																	; _ en el caso de que no lo haya.
 90+  8C65 3A C6 84     	ld a,(CTRL_DESPLZ)
 91+  8C68 A7           	and a
 92+  8C69 28 0B        	jr z,10F
 93+  8C6B
 94+  8C6B 3A DF 84     	ld a,(Ctrl_0)
 95+  8C6E CB 7F        	bit 7,a
 96+  8C70 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 97+  8C72 21 C6 84     	ld hl,CTRL_DESPLZ
 98+  8C75 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
 99+  8C76
100+  8C76 3A DF 84     10 ld a,(Ctrl_0)
101+  8C79 CB 77        	bit 6,a
102+  8C7B 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
103+  8C7D
104+  8C7D CD C6 8E     	call Stop_Amadeus_right
105+  8C80 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
106+  8C81 18 4A        	jr 3F
107+  8C83
108+  8C83 3A CF 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
109+  8C86 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
110+  8C88 20 43        	jr nz,3F
111+  8C8A
112+  8C8A 3A C6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
113+  8C8D A7           	and a 															; _[3] para continuar con el DESPLZ.
114+  8C8E 28 3D        	jr z,3F
115+  8C90
116+  8C90              ; ---------- ---------- ----------
117+  8C90
118+  8C90 3A D2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8C93 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8C95 28 11        	jr z,1F
121+  8C97 38 06        	jr c,6F
122+  8C99 FE 04        	cp 4
123+  8C9B 28 14        	jr z,7F
124+  8C9D 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8C9F
126+  8C9F              ; ---------- ---------- ----------
127+  8C9F              ;
128+  8C9F              ; Perfiles de velocidad
129+  8C9F              ;
130+  8C9F 3A C6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
131+  8CA2 FE FE        	cp $fe
132+  8CA4 20 27        	jr nz,3F
133+  8CA6 18 10        	jr 4F
134+  8CA8 3A C6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
135+  8CAB FE FD        	cp $fd
136+  8CAD 20 1E        	jr nz,3F
137+  8CAF 18 07        	jr 4F
138+  8CB1 3A C6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
139+  8CB4 FE FB        	cp $fb
140+  8CB6 20 15        	jr nz,3F
141+  8CB8
142+  8CB8              ; ---------- ---------- ----------
143+  8CB8
144+  8CB8 CD F5 8E     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
145+  8CBB              ;	call Reinicio
146+  8CBB
147+  8CBB              ; ---------- ---------- ----------
148+  8CBB
149+  8CBB 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
150+  8CBD C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
151+  8CBE CD F6 8C     	call DESPLZ_DER
152+  8CC1 C1           	pop bc
153+  8CC2 10 F9        	djnz 5B
154+  8CC4 2A C4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
155+  8CC7 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
156+  8CC8 22 C4 84     	ld (Posicion_actual),hl
157+  8CCB 18 28        	jr 2F 															; Salimos para pintar la nueva posición.
158+  8CCD
159+  8CCD              ; ---------- ---------- ----------
160+  8CCD
161+  8CCD 3A D2 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
162+  8CD0 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
163+  8CD2 20 1B        	jr nz,8F
164+  8CD4 2A C4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
165+  8CD7 7D           	ld a,l
166+  8CD8 E6 1F        	and $1f
167+  8CDA FE 1F        	cp 31
168+  8CDC 20 05        	jr nz,9F
169+  8CDE
170+  8CDE              ; ---------- ---------- ----------
171+  8CDE
172+  8CDE CD F5 8E     	call Reaparece_izquierda
173+  8CE1
174+  8CE1              ; ---------- ---------- ----------
175+  8CE1
176+  8CE1 18 12        	jr 2F
177+  8CE3 2A C4 84     9 ld hl,(Posicion_actual)
178+  8CE6 23           	inc hl
179+  8CE7 22 C4 84     	ld (Posicion_actual),hl
180+  8CEA CD 30 8F     	call Genera_coordenadas
181+  8CED 18 06        	jr 2F
182+  8CEF 2A C4 84     8 ld hl,(Posicion_actual)
183+  8CF2 CD F6 8C     	call DESPLZ_DER
184+  8CF5 C9           2 ret
185+  8CF6
186+  8CF6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
187+  8CF6              ;
188+  8CF6              ;	22/9/22
189+  8CF6              ;
190+  8CF6
191+  8CF6 CD 05 8D     DESPLZ_DER call Desplaza_derecha
192+  8CF9 CD 1A 8D         call modifica_parametros_1er_DESPLZ_2
193+  8CFC CD 40 8D         call Ciclo_completo
194+  8CFF 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
195+  8D02 CB FE        	set 7,(hl)
196+  8D04 C9           	ret
197+  8D05
198+  8D05              ; ******************************************************************************************************************************************************************************************
199+  8D05              ;	14/9/22
200+  8D05              ;
201+  8D05
202+  8D05 3A D2 84     Desplaza_derecha ld a,(Vel_right)
203+  8D08 47           	ld b,a
204+  8D09 2A CA 84     	ld hl,(Puntero_DESPLZ)
205+  8D0C 23           1 inc hl
206+  8D0D 23           	inc hl
207+  8D0E 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
208+  8D10 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
209+  8D13 CD C7 85     	call Extrae_address
210+  8D16 22 F0 84     	ld (Caja_de_DESPLZ),hl
211+  8D19 C9           	ret
212+  8D1A
213+  8D1A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
214+  8D1A              ;
215+  8D1A              ;	24/7/22
216+  8D1A              ;
217+  8D1A              ;	modifica_parametros_1er_DESPLZ_2
218+  8D1A              ;
219+  8D1A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
220+  8D1A              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
221+  8D1A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
222+  8D1A
223+  8D1A 3A C6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
224+  8D1D A7           	and a
225+  8D1E 20 1C        	jr nz,1F
226+  8D20 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
227+  8D22 32 C6 84         ld (CTRL_DESPLZ),a
228+  8D25 21 C3 84     	ld hl,Columns
229+  8D28 34           	inc (hl)
230+  8D29 3A CE 84     	ld a,(Cuad_objeto)
231+  8D2C E6 01        	and 1
232+  8D2E 28 0C        	jr z,1F
233+  8D30 2A C4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
234+  8D33 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
235+  8D34 22 C4 84     	ld (Posicion_actual),hl
236+  8D37 CD D2 8E     	call Inc_CTRL_DESPLZ
237+  8D3A 18 03        	jr 2F
238+  8D3C CD D2 8E     1 call Inc_CTRL_DESPLZ
239+  8D3F C9           2 ret
240+  8D40
241+  8D40              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
242+  8D40              ;
243+  8D40              ;	24/7/22
244+  8D40              ;
245+  8D40              ;	Ciclo_completo.
246+  8D40              ;
247+  8D40              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
248+  8D40              ;
249+  8D40              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
250+  8D40              ; 	Decrementamos (Columns).
251+  8D40              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
252+  8D40              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
253+  8D40
254+  8D40
255+  8D40 3A C6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
256+  8D43 FE FF        	cp $ff
257+  8D45 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
258+  8D47 18 25        	jr 3f
259+  8D49 21 C3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
260+  8D4C 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
261+  8D4D AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
262+  8D4E 32 C6 84     	ld (CTRL_DESPLZ),a
263+  8D51 3A CE 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
264+  8D54 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
265+  8D56 20 07        	jr nz,2F
266+  8D58 2A C4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
267+  8D5B 23           	inc hl
268+  8D5C 22 C4 84     	ld (Posicion_actual),hl
269+  8D5F 2A C8 84     2 ld hl,(Indice_Sprite)
270+  8D62 22 CA 84     	ld (Puntero_DESPLZ),hl
271+  8D65 21 00 00     	ld hl,0
272+  8D68 22 F0 84     	ld (Caja_de_DESPLZ),hl
273+  8D6B CD 30 8F     	call Genera_coordenadas
274+  8D6E C9           3 ret
275+  8D6F
276+  8D6F              ; ******************************************************************************************************************************************************************************************
277+  8D6F              ;
278+  8D6F              ;	19/10/22
279+  8D6F              ;
280+  8D6F              ;	Mov_left.
281+  8D6F              ;
282+  8D6F              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
283+  8D6F              ;
284+  8D6F              Mov_left
285+  8D6F
286+  8D6F 21 DF 84     	ld hl,Ctrl_0
287+  8D72 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
288+  8D74              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
289+  8D74              ; 																	; _ en el caso de que no lo haya.
290+  8D74 3A C6 84     	ld a,(CTRL_DESPLZ)
291+  8D77 A7           	and a
292+  8D78 20 19        	jr nz,10F
293+  8D7A
294+  8D7A 2A E8 84     	ld hl,(Puntero_objeto)
295+  8D7D 22 CA 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
296+  8D80
297+  8D80 3A DF 84     	ld a,(Ctrl_0)
298+  8D83 CB 77        	bit 6,a
299+  8D85 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
300+  8D87
301+  8D87 CD CC 8E     	call Stop_Amadeus_left
302+  8D8A 20 5F        	jr nz,3F
303+  8D8C
304+  8D8C 2A C8 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
305+  8D8F 22 CA 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
306+  8D92 C9           	ret
307+  8D93
308+  8D93 3A DF 84     10 	ld a,(Ctrl_0)
309+  8D96 CB 7F        	bit 7,a
310+  8D98 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
311+  8D9A 21 C6 84     	ld hl,CTRL_DESPLZ
312+  8D9D 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
313+  8D9E
314+  8D9E 3A CF 84     11 ld a,(Coordenada_X)
315+  8DA1 A7           	and a
316+  8DA2 20 47        	jr nz,3F
317+  8DA4 3A C6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
318+  8DA7 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
319+  8DA8 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
320+  8DAA
321+  8DAA              ; ---------- ---------- ----------
322+  8DAA
323+  8DAA 3A D1 84     	ld a,(Vel_left)
324+  8DAD FE 02        	cp 2
325+  8DAF 28 0F        	jr z,1F
326+  8DB1 38 04        	jr c,6F
327+  8DB3 FE 04        	cp 4
328+  8DB5 28 12        	jr z,7F
329+  8DB7
330+  8DB7              ; ---------- ---------- ----------
331+  8DB7
332+  8DB7 3A C6 84     6 ld a,(CTRL_DESPLZ)
333+  8DBA FE F9        	cp $f9
334+  8DBC 20 2D        	jr nz,3F
335+  8DBE 18 10        	jr 4F
336+  8DC0 3A C6 84     1 ld a,(CTRL_DESPLZ)
337+  8DC3 FE FA        	cp $fa
338+  8DC5 20 24        	jr nz,3F
339+  8DC7 18 07        	jr 4F
340+  8DC9 3A C6 84     7 ld a,(CTRL_DESPLZ)
341+  8DCC FE FC        	cp $fc
342+  8DCE 20 1B        	jr nz,3F
343+  8DD0
344+  8DD0              ; ---------- ---------- ----------
345+  8DD0
346+  8DD0 CD E3 8E     4 	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
347+  8DD3              ;	call Reinicio
348+  8DD3
349+  8DD3              ; ---------- ---------- ----------
350+  8DD3
351+  8DD3 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
352+  8DD5 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
353+  8DD6 2A E8 84     	ld hl,(Puntero_objeto)
354+  8DD9 22 CA 84     	ld (Puntero_DESPLZ),hl
355+  8DDC CD 12 8E     	call DESPLZ_IZQ
356+  8DDF C1           	pop bc
357+  8DE0 10 F3        	djnz 5B
358+  8DE2 2A C4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
359+  8DE5 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
360+  8DE6 22 C4 84     	ld (Posicion_actual),hl
361+  8DE9 18 26        	jr 2F 															; Salimos para pintar la nueva posición.
362+  8DEB
363+  8DEB              ; ---------- ---------- ----------
364+  8DEB
365+  8DEB 3A D1 84     3 ld a,(Vel_left)
366+  8DEE FE 08        	cp 8
367+  8DF0 20 19        	jr nz,8F
368+  8DF2 2A C4 84     	ld hl,(Posicion_actual)
369+  8DF5 7D           	ld a,l
370+  8DF6 E6 1F        	and $1f
371+  8DF8 20 05        	jr nz,9F
372+  8DFA
373+  8DFA              ; ---------- ---------- ----------
374+  8DFA
375+  8DFA CD E3 8E     	call Reaparece_derecha
376+  8DFD
377+  8DFD              ; ---------- ---------- ----------
378+  8DFD
379+  8DFD 18 12        	jr 2F
380+  8DFF 2A C4 84     9 ld hl,(Posicion_actual)
381+  8E02 2B           	dec hl
382+  8E03 22 C4 84     	ld (Posicion_actual),hl
383+  8E06 CD 30 8F     	call Genera_coordenadas
384+  8E09 18 06        	jr 2F
385+  8E0B 2A C4 84     8 ld hl,(Posicion_actual)
386+  8E0E CD 12 8E     	call DESPLZ_IZQ
387+  8E11 C9           2 ret
388+  8E12
389+  8E12              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
390+  8E12              ;
391+  8E12              ;	22/9/22
392+  8E12
393+  8E12 CD 21 8E     DESPLZ_IZQ call Desplaza_izquierda
394+  8E15 CD 36 8E         call modifica_parametros_1er_DESPLZ
395+  8E18 CD 57 8E     	call Ciclo_completo_2
396+  8E1B 21 DF 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
397+  8E1E CB BE        	res 7,(hl)
398+  8E20 C9           	ret
399+  8E21
400+  8E21 3A D1 84     Desplaza_izquierda ld a,(Vel_left)
401+  8E24 47           	ld b,a
402+  8E25 2A CA 84     	ld hl,(Puntero_DESPLZ)
403+  8E28 2B           1 dec hl
404+  8E29 2B           	dec hl
405+  8E2A 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
406+  8E2C 22 CA 84     	ld (Puntero_DESPLZ),hl
407+  8E2F CD C7 85     	call Extrae_address
408+  8E32 22 F0 84     	ld (Caja_de_DESPLZ),hl
409+  8E35 C9           	ret
410+  8E36
411+  8E36              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
412+  8E36              ;
413+  8E36              ;	modifica_parametros_1er_DESPLZ
414+  8E36              ;
415+  8E36              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
416+  8E36              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
417+  8E36              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
418+  8E36
419+  8E36 3A C6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
420+  8E39 A7           	and a
421+  8E3A 20 17        	jr nz,1F
422+  8E3C 21 C3 84     	ld hl,Columns
423+  8E3F 34           	inc (hl)
424+  8E40 3A CE 84     	ld a,(Cuad_objeto)
425+  8E43 E6 01        	and 1
426+  8E45 20 0C        	jr nz,1F
427+  8E47 2A C4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
428+  8E4A 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
429+  8E4B 22 C4 84     	ld (Posicion_actual),hl
430+  8E4E CD B5 8E     	call Dec_CTRL_DESPLZ
431+  8E51 18 03        	jr 2F
432+  8E53 CD B5 8E     1 call Dec_CTRL_DESPLZ
433+  8E56 C9           2 ret
434+  8E57
435+  8E57              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
436+  8E57              ;
437+  8E57 3A C6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
438+  8E5A FE F8        	cp $f8
439+  8E5C 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
440+  8E5E 18 19        	jr 3f
441+  8E60 21 C3 84     1 ld hl,Columns
442+  8E63 35           	dec (hl)
443+  8E64 AF           	xor a
444+  8E65 32 C6 84     	ld (CTRL_DESPLZ),a
445+  8E68 3A CE 84     	ld a,(Cuad_objeto)
446+  8E6B E6 01        	and 1
447+  8E6D 28 07        	jr z,2F
448+  8E6F 2A C4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
449+  8E72 2B           	dec hl
450+  8E73 22 C4 84     	ld (Posicion_actual),hl
451+  8E76 CD 30 8F     2 call Genera_coordenadas
452+  8E79 C9           3 ret
453+  8E7A
454+  8E7A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
455+  8E7A
456+  8E7A CD 4B 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
457+  8E7D              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
458+  8E7D              ;																	; Filas * Columnas en DE´.
459+  8E7D 3A CE 84     	ld a,(Cuad_objeto)
460+  8E80 FE 02        	cp 2
461+  8E82 38 1A        	jr c,2F
462+  8E84 28 18        	jr z,2F
463+  8E86 E6 01        	and 1
464+  8E88 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
465+  8E8A              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
466+  8E8A              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
467+  8E8A C5           	push bc
468+  8E8B E5           	push hl
469+  8E8C 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
470+  8E8E 0D           	dec c
471+  8E8F 2A EA 84     	ld hl,(Puntero_datas)
472+  8E92 A7           	and a
473+  8E93 ED 4A        	adc hl,bc
474+  8E95 22 EA 84     	ld (Puntero_datas),hl
475+  8E98 E1           	pop hl
476+  8E99 C1           	pop bc
477+  8E9A 18 18        	jr 4F
478+  8E9C              1
479+  8E9C              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
480+  8E9C 18 16        	jr 4F
481+  8E9E E6 01        2 and 1
482+  8EA0 28 02        	jr z,3F
483+  8EA2              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
484+  8EA2 18 10        	jr 4F
485+  8EA4              3
486+  8EA4              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
487+  8EA4 C5           	push bc
488+  8EA5 E5           	push hl
489+  8EA6 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
490+  8EA8 0D           	dec c
491+  8EA9 2A EA 84     	ld hl,(Puntero_datas)
492+  8EAC A7           	and a
493+  8EAD ED 42        	sbc hl,bc
494+  8EAF 22 EA 84     	ld (Puntero_datas),hl
495+  8EB2 E1           	pop hl
496+  8EB3 C1           	pop bc
497+  8EB4 C9           4 ret
498+  8EB5
499+  8EB5              ; ---------- ---------- ---------- ---------- ---------- ----------
500+  8EB5              ;
501+  8EB5              ;	Dec_CTRL_DESPLZ
502+  8EB5              ;
503+  8EB5              ;	Subrutina de [modifica_punteros].
504+  8EB5              ;
505+  8EB5              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
506+  8EB5
507+  8EB5 21 C6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
508+  8EB8 3A D1 84     	ld a,(Vel_left)
509+  8EBB A7           	and a
510+  8EBC 28 06        	jr z,1F
511+  8EBE 47           	ld b,a
512+  8EBF 35           3 dec (hl)
513+  8EC0 10 FD        	djnz 3B
514+  8EC2 18 01        	jr 2F
515+  8EC4 35           1 dec (hl)
516+  8EC5 C9           2 ret
517+  8EC6
518+  8EC6              ; ---------- ---------- ---------- ---------- ---------- ----------
519+  8EC6              ;
520+  8EC6              ;	19/10/22
521+  8EC6              ;
522+  8EC6              ;	(cp 29) para un Amadeus de 3 Columns.
523+  8EC6              ;	(cp 30)   ""  ""    ""     2 Columns.
524+  8EC6
525+  8EC6 3A CF 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
526+  8EC9 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
527+  8ECB C9           	ret
528+  8ECC
529+  8ECC              ; ---------- ---------- ---------- ---------- ---------- ----------
530+  8ECC              ;
531+  8ECC              ;	19/10/22
532+  8ECC              ;
533+  8ECC              ;	(cp 2) para un Amadeus de 3 Columns.
534+  8ECC              ;	(cp 1)   ""  ""    ""     2 Columns.
535+  8ECC
536+  8ECC 3A CF 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
537+  8ECF FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
538+  8ED1 C9           	ret
539+  8ED2
540+  8ED2              ; ---------- ---------- ---------- ---------- ---------- ----------
541+  8ED2              ;
542+  8ED2              ;	24/7/22
543+  8ED2              ;
544+  8ED2              ;	Inc_CTRL_DESPLZ
545+  8ED2              ;
546+  8ED2              ;	Subrutina de [modifica_punteros].
547+  8ED2              ;
548+  8ED2              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
549+  8ED2
550+  8ED2 21 C6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
551+  8ED5 3A D2 84     	ld a,(Vel_right)
552+  8ED8 A7           	and a
553+  8ED9 28 06        	jr z,1F
554+  8EDB 47           	ld b,a
555+  8EDC 34           3 inc (hl)
556+  8EDD 10 FD        	djnz 3B
557+  8EDF 18 01        	jr 2F
558+  8EE1 34           1 inc (hl)
559+  8EE2 C9           2 ret
560+  8EE3
561+  8EE3              ; ---------- ---------- ---------- ---------- ---------- ----------
562+  8EE3
563+  8EE3 2A C4 84     Reaparece_derecha ld hl,(Posicion_actual)
564+  8EE6 01 1F 00     	ld bc,31
565+  8EE9 A7           	and a
566+  8EEA ED 4A        	adc hl,bc
567+  8EEC 22 C4 84     	ld (Posicion_actual),hl
568+  8EEF 21 DF 84     	ld hl,Ctrl_0														; $xxx1
569+  8EF2 CB C6        	set 0,(hl)
570+  8EF4 C9           	ret
571+  8EF5
572+  8EF5              ; ---------- ---------- ---------- ---------- ---------- ----------
573+  8EF5
574+  8EF5 2A C4 84     Reaparece_izquierda ld hl,(Posicion_actual)
575+  8EF8 01 1F 00     	ld bc,31
576+  8EFB A7           	and a
577+  8EFC ED 42        	sbc hl,bc
578+  8EFE 22 C4 84     	ld (Posicion_actual),hl 											; $xx1x
579+  8F01 21 DF 84     	ld hl,Ctrl_0
580+  8F04 CB CE        	set 1,(hl)
581+  8F06 C9           	ret
582+  8F07
583+  8F07              ; ---------- ---------- ---------- ---------- ---------- ----------
584+  8F07
585+  8F07 24           Reaparece_abajo inc h
586+  8F08 01 E0 17     	ld bc,$17e0
587+  8F0B A7           	and a
588+  8F0C ED 4A        	adc hl,bc
589+  8F0E 22 C4 84     	ld (Posicion_actual),hl
590+  8F11 21 DF 84     	ld hl,Ctrl_0
591+  8F14 CB D6        	set 2,(hl)
592+  8F16 C9           	ret
593+  8F17
594+  8F17              ; ---------- ---------- ---------- ---------- ---------- ----------
595+  8F17
596+  8F17 01 E0 17     Reaparece_arriba ld bc,$17e0
597+  8F1A A7           	and a
598+  8F1B ED 42        	sbc hl,bc
599+  8F1D 22 C4 84     	ld (Posicion_actual),hl
600+  8F20 21 DF 84     	ld hl,Ctrl_0
601+  8F23 CB DE        	set 3,(hl)
602+  8F25 C9           	ret
603+  8F26
604+  8F26              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
605+  8F26
606+  8F26 2A CC 84     Reinicio ld hl,(Posicion_inicio)
607+  8F29
608+  8F29              ;	ld (Posicion_actual),hl
609+  8F29 21 00 00     	ld hl,0
610+  8F2C 22 C4 84     	ld (Posicion_actual),hl
611+  8F2F
612+  8F2F
613+  8F2F C9           	ret
# file closed: Direcciones.asm
637   8F30              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F30              ;	12/12/22
  2+  8F30              ;
  3+  8F30              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F30              ;	Fila superior "0", Columna izquierda "0".
  5+  8F30              ;
  6+  8F30              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F30              ;
  8+  8F30              ;	Modifica: A
  9+  8F30
 10+  8F30 C5           Genera_coordenadas push bc
 11+  8F31 E5           	push hl
 12+  8F32 2A C4 84     	ld hl,(Posicion_actual)
 13+  8F35 7D           	ld a,l
 14+  8F36 E6 1F        	and $1f
 15+  8F38 32 CF 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F3B CD BE 8B     	call calcula_tercio
 17+  8F3E 47           	ld b,a
 18+  8F3F 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F40 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F42 7D           	ld a,l
 21+  8F43 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F45 28 05        	jr z,2F
 23+  8F47 0C           1 inc c
 24+  8F48 D6 20        	sub 32
 25+  8F4A 20 FB        	jr nz,1B
 26+  8F4C 0C           2 inc c
 27+  8F4D 04           	inc b
 28+  8F4E 05           	dec b
 29+  8F4F 28 04        	jr z,3F
 30+  8F51 3E E0        	ld a,$e0
 31+  8F53 10 F2        	djnz 1B
 32+  8F55 79           3 ld a,c
 33+  8F56 3D           	dec a
 34+  8F57 32 D0 84     	ld (Coordenada_y),a
 35+  8F5A E1           	pop hl
 36+  8F5B C1           	pop bc
 37+  8F5C C9           	ret
# file closed: Genera_coordenadas.asm
638   8F5D              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F5D
  2+  8F5D
  3+  8F5D              ;   11/8/22
  4+  8F5D              ;
  5+  8F5D              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F5D              ;
  7+  8F5D              ;   Mov_obj.asm
  8+  8F5D              ;
  9+  8F5D              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F5D              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F5D              ;
 12+  8F5D              ;   Codificación:
 13+  8F5D              ;
 14+  8F5D              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F5D              ;
 16+  8F5D
 17+  8F5D 02 10 00     Izquierda db 2,%00010000,0
 18+  8F60 02 20 00     Derecha db 2,%00100000,0
 19+  8F63 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F67 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F6B 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F6F 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8F73 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8F77 60 42 60 40
 23+  8F7B 63
 24+  8F7C 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8F80 22 A3 80 A0
 25+  8F84 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8F88 84 A0 83 A0
 26+  8F8C 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8F90 80 A3 22 A0
 27+  8F94 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8F98 40 60 42 60
 28+  8F9C 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FA0
 30+  8FA0 60 8F        Indice_mov_Badsat defw Derecha
 31+  8FA2 67 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FA4 6F 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FA6 63 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FA8
 35+  8FA8              Movimiento
 36+  8FA8
 37+  8FA8 3A E5 84         ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 38+  8FAB A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 39+  8FAC 28 02            jr z,1F
 40+  8FAE 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 41+  8FB0
 42+  8FB0 3A E6 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 43+  8FB3 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 44+  8FB5 32 E6 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 45+  8FB8              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 46+  8FB8 2A E3 84         ld hl,(Puntero_mov)
 47+  8FBB 7E               ld a,(hl)
 48+  8FBC 32 E5 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 49+  8FBF 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 50+  8FC0 22 E3 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 51+  8FC3
 52+  8FC3 3A E7 84     Decoder ld a,(Repetimos_db)
 53+  8FC6 A7               and a
 54+  8FC7 20 0C            jr nz,12F
 55+  8FC9 2A E3 84         ld hl,(Puntero_mov)
 56+  8FCC 7E               ld a,(hl)
 57+  8FCD A7               and a
 58+  8FCE 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 59+  8FD0
 60+  8FD0 E6 0F            and $0f
 61+  8FD2 32 E7 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 62+  8FD5              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 63+  8FD5 2A E3 84     12 ld hl,(Puntero_mov)
 64+  8FD8 CB 7E            bit 7,(hl)
 65+  8FDA 28 03            jr z,2F
 66+  8FDC CD 0A 8C         call Mov_down
 67+  8FDF 2A E3 84     2 ld hl, (Puntero_mov)
 68+  8FE2 CB 76            bit 6,(hl)
 69+  8FE4 28 03            jr z,3F
 70+  8FE6 CD 35 8C         call Mov_up
 71+  8FE9 2A E3 84     3 ld hl, (Puntero_mov)
 72+  8FEC CB 6E            bit 5,(hl)
 73+  8FEE 28 03            jr z,4F
 74+  8FF0 CD 60 8C         call Mov_right
 75+  8FF3 2A E3 84     4 ld hl, (Puntero_mov)
 76+  8FF6 CB 66            bit 4,(hl)
 77+  8FF8 28 03            jr z,5F
 78+  8FFA CD 6F 8D         call Mov_left
 79+  8FFD
 80+  8FFD              ; ---------- --------- --------- ---------- ----------
 81+  8FFD
 82+  8FFD 3A E7 84     5 ld a,(Repetimos_db)
 83+  9000 A7               and a
 84+  9001 28 07            jr z,6F
 85+  9003 3D               dec a
 86+  9004 32 E7 84         ld (Repetimos_db),a
 87+  9007 28 01            jr z,6f
 88+  9009 C9           11 ret
 89+  900A 21 E5 84     6 ld hl,Contador_db_mov
 90+  900D 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 91+  900E 2A E3 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 92+  9011 23               inc hl
 93+  9012 22 E3 84         ld (Puntero_mov),hl
 94+  9015 18 F2            jr 11B
 95+  9017 2A E1 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 96+  901A 3A E6 84         ld a,(Incrementa_puntero)
 97+  901D 47               ld b,a
 98+  901E 23           8 inc hl
 99+  901F 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
100+  9021 5E               ld e,(hl)
101+  9022 23               inc hl
102+  9023 56               ld d,(hl)
103+  9024 EB               ex de,hl
104+  9025 22 E3 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
105+  9028 18 DF            jr 11B
106+  902A
107+  902A              ; ---------- --------- --------- ---------- ----------
108+  902A              ;
109+  902A              ;   11/8/22
110+  902A              ;
111+  902A              ;   Prepara_Puntero_mov
112+  902A
113+  902A E5           Prepara_Puntero_mov push hl
114+  902B D5               push de
115+  902C 2A E1 84         ld hl,(Puntero_indice_mov)
116+  902F 5E               ld e,(hl)
117+  9030 23               inc hl
118+  9031 56               ld d,(hl)
119+  9032 EB               ex de,hl
120+  9033 22 E3 84         ld (Puntero_mov),hl
121+  9036 D1               pop de
122+  9037 E1               pop hl
123+  9038 C9               ret
124+  9039
125+  9039              ; ---------- --------- --------- ---------- ----------
126+  9039              ;
127+  9039              ;   11/8/22
128+  9039              ;
129+  9039              ;   Reinicia_el_movimiento
130+  9039
131+  9039 CD 2A 90     Reinicia_el_movimiento call Prepara_Puntero_mov
132+  903C AF               xor a
133+  903D 32 E5 84         ld (Contador_db_mov),a
134+  9040 32 E6 84         ld (Incrementa_puntero),a
135+  9043 C3 A8 8F         jp Movimiento
136+  9046
137+  9046              ; ---------- --------- --------- ---------- ----------
138+  9046
139+  9046
140+  9046
141+  9046
142+  9046
143+  9046
144+  9046
145+  9046
146+  9046
147+  9046
148+  9046
149+  9046
150+  9046
151+  9046
152+  9046
153+  9046
154+  9046
155+  9046
# file closed: Patrones_de_mov.asm
639   9046              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9046              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9046              ;
  3+  9046              ;	8/11/22
  4+  9046              ;
  5+  9046              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9046
  7+  9046              ;	ADC HL,SP	LD (addr),SP
  8+  9046              ;	ADD HL,SP	LD SP,(addr)
  9+  9046              ;	ADD IX,SP	LD SP,nn
 10+  9046              ; 	ADD IY,SP	LD SP,HL
 11+  9046              ;				LD SP,IX
 12+  9046              ;	DEC SP		LD SP,IY
 13+  9046
 14+  9046              ;	EX (SP),HL
 15+  9046              ;	EX (SP),IX
 16+  9046              ;	EX (SP),IY
 17+  9046
 18+  9046              ;	INC SP
 19+  9046
 20+  9046
 21+  9046                  org $7fa0
 22+  7FA0
 23+  7FA0 ED 73 FC 84  Guarda_foto_registros ld (Stack),sp			                      ; Guardo SP en (Stack).
 24+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 25+  7FA7
 26+  7FA7 E5               push hl
 27+  7FA8 C5               push bc
 28+  7FA9 D5               push de
 29+  7FAA DD E5            push ix
 30+  7FAC
 31+  7FAC 08               ex af,af
 32+  7FAD F5               push af
 33+  7FAE 08               ex af,af
 34+  7FAF
 35+  7FAF D9               exx
 36+  7FB0 C5               push bc
 37+  7FB1 E5               push hl                                        ; Hacemos un SNAPSHOT de los registros.
 38+  7FB2 D9               exx
 39+  7FB3
 40+  7FB3 2A 00 85         ld hl,(Stack_snapshot)                         ; Album_de_fotos contiene la imagen de los registros implicados en el_
 41+  7FB6 06 07            ld b,7                                         ; _correcto funcionamiento de [Pintorrejeo].
 42+  7FB8
 43+  7FB8 D1           1 pop de
 44+  7FB9 73               ld (hl),e
 45+  7FBA 23               inc hl
 46+  7FBB 72               ld (hl),d
 47+  7FBC 23               inc hl                                         ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 48+  7FBD 10 F9            djnz 1B
 49+  7FBF
 50+  7FBF 22 00 85         ld (Stack_snapshot),hl
 51+  7FC2 ED 7B FC 84      ld sp,(Stack)
 52+  7FC6
 53+  7FC6 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 54+  7FC7
 55+  7FC7
# file closed: Guarda_foto_registros.asm
640   7FC7
641   7FC7              	SAVESNA "Pruebas.sna", START
642   7FC7
643   7FC7
644   7FC7
# file closed: Banco_de_pruebas.asm
