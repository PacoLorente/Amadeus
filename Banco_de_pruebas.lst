# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD B9 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 31/01/23
  5+  83F0
  6+  83F0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83F0
  8+  83F0 36 84        	defw Entidad_1
  9+  83F2 70 84        	defw Entidad_2
 10+  83F4 AA 84        	defw Entidad_3
 11+  83F6 E4 84        	defw Entidad_4
 12+  83F8              ;	...
 13+  83F8              ;	...
 14+  83F8              ;	+ entidades ...
 15+  83F8
 16+  83F8 00 00        	defw 0
 17+  83FA 00 00        	defw 0
 18+  83FC
 19+  83FC              ; ---------- ---------- ---------- ---------- ----------
 20+  83FC
 21+  83FC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83FE 00 00        	defw 0		 									; (Posicion_actual).
 23+  8400 00 00        	defw 0	 										; (Puntero_objeto).
 24+  8402 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 25+  8405
 26+  8405 05           	db %00000101									; (Attr).
 27+  8406
 28+  8406 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 29+  8408 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 30+  840A 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  840C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  840E
 33+  840E D0 50        	defw $50d0										; (Posicion_inicio).
 34+  8410 04           	db 4 											; (Cuad_objeto).
 35+  8411
 36+  8411 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  8415
 38+  8415 00 00        	db 0,0											; Variables_de_borrado
 39+  8417 00 00        	defw 0											;	" " " " " " "
 40+  8419 00 00        	defw 0											;	" " " " " " "
 41+  841B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 42+  841F
 43+  841F 00 00        	db 0,0											; Variables_de_pintado
 44+  8421 00 00        	defw 0											;	" " " " " " "
 45+  8423 00 00        	defw 0											;	" " " " " " "
 46+  8425 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 47+  8429
 48+  8429 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  842B
 50+  842B 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  842F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8432
 53+  8432 00           	db 0 											; (Columnas).
 54+  8433 00 00        	defw 0											; (Limite_horizontal).
 55+  8435 00           	db 0											; (Limite_vertical).
 56+  8436
 57+  8436              ; ---------- ---------- ---------- ---------- ----------
 58+  8436
 59+  8436 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8438 00 00        	defw 0											; (Posicion_actual).
 61+  843A 00 00        	defw 0 											; (Puntero_objeto).
 62+  843C 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 63+  843F
 64+  843F 00           	db %00000000 									; (Attr).
 65+  8440
 66+  8440 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8442 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8444 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8446 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8448
 71+  8448 00 00        	defw 0											; (Posicion_inicio).
 72+  844A 00           	db 0											; (Cuad_objeto).
 73+  844B
 74+  844B 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  844F
 76+  844F 00 00        	db 0,0										    ; Variables_de_borrado
 77+  8451 00 00        	defw 0											;	" " " " " " "
 78+  8453 00 00        	defw 0											;	" " " " " " "
 79+  8455 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 80+  8459
 81+  8459 00 00        	db 0,0											; Variables_de_pintado
 82+  845B 00 00        	defw 0											;	" " " " " " "
 83+  845D 00 00        	defw 0											;	" " " " " " "
 84+  845F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 85+  8463
 86+  8463 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8465
 88+  8465 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8469 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  846C
 91+  846C 00           	db 0 											; (Columnas).
 92+  846D 00 00        	defw 0											; (Limite_horizontal).
 93+  846F 00           	db 0											; (Limite_vertical).
 94+  8470
 95+  8470              ; ---------- ---------- ---------- ---------- ----------
 96+  8470
 97+  8470 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  8472 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8474 00 00        	defw 0											; (Puntero_objeto).
100+  8476 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
101+  8479
102+  8479 02           	db %00000010									; (Attr).
103+  847A
104+  847A A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  847C 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  847E 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  8480 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  8482
109+  8482 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8484 02           	db 2											; (Cuad_objeto).
111+  8485
112+  8485 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8489
114+  8489 00 00        	db 0,0											; Variables_de_borrado
115+  848B 00 00        	defw 0										 	;	" " " " " " "
116+  848D 00 00        	defw 0											;	" " " " " " "
117+  848F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
118+  8493
119+  8493 00 00        	db 0,0											; Variables_de_pintado
120+  8495 00 00        	defw 0											;	" " " " " " "
121+  8497 00 00        	defw 0											;	" " " " " " "
122+  8499 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
123+  849D
124+  849D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  849F
126+  849F 39 91 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  84A3 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  84A6
129+  84A6 00           	db 0 											; (Columnas).
130+  84A7 00 00        	defw 0											; (Limite_horizontal).
131+  84A9 00           	db 0											; (Limite_vertical).
132+  84AA
133+  84AA              ; ---------- ---------- ---------- ---------- ----------
134+  84AA
135+  84AA 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  84AC 00 00        	defw 0                                          ; (Posicion_actual).
137+  84AE 00 00        	defw 0											; (Puntero_objeto).
138+  84B0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
139+  84B3
140+  84B3 04           	db %00000100									; (Attr).
141+  84B4
142+  84B4 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  84B6 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  84B8
145+  84B8 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  84BA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  84BC
148+  84BC A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  84BE 01           	db 1											; (Cuad_objeto).
150+  84BF
151+  84BF 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  84C3
153+  84C3 00 00        	db 0,0											; Variables_de_borrado
154+  84C5 00 00        	defw 0										 	;	" " " " " " "
155+  84C7 00 00        	defw 0											;	" " " " " " "
156+  84C9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
157+  84CD
158+  84CD 00 00        	db 0,0											; Variables_de_pintado
159+  84CF 00 00        	defw 0											;	" " " " " " "
160+  84D1 00 00        	defw 0											;	" " " " " " "
161+  84D3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
162+  84D7
163+  84D7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84D9
165+  84D9 3B 91 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84DD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84E0
168+  84E0 00           	db 0 											; (Columnas).
169+  84E1 00 00        	defw 0											; (Limite_horizontal).
170+  84E3 00           	db 0											; (Limite_vertical).
171+  84E4
172+  84E4              ; ---------- ---------- ---------- ---------- ----------
173+  84E4
174+  84E4 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84E6 00 00        	defw 0                                          ; (Posicion_actual).
176+  84E8 00 00        	defw 0 											; (Puntero_objeto).
177+  84EA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
178+  84ED
179+  84ED 01           	db %00000001									; (Attr).
180+  84EE
181+  84EE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84F0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84F2
184+  84F2 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84F4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84F6
187+  84F6 BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84F8 00           	db 0											; (Cuad_objeto).
189+  84F9
190+  84F9 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84FD
192+  84FD 00 00        	db 0,0											; Variables_de_borrado
193+  84FF 00 00        	defw 0										 	;	" " " " " " "
194+  8501 00 00        	defw 0											;	" " " " " " "
195+  8503 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
196+  8507
197+  8507 00 00        	db 0,0											; Variables_de_pintado
198+  8509 00 00        	defw 0											;	" " " " " " "
199+  850B 00 00        	defw 0											;	" " " " " " "
200+  850D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
201+  8511
202+  8511 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  8513
204+  8513 2B 91 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  8517 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  851A
207+  851A 00           	db 0 											; (Columnas).
208+  851B 00 00        	defw 0											; (Limite_horizontal).
209+  851D 00           	db 0											; (Limite_vertical).
210+  851E
# file closed: Entidades.asm
 21   851E
 22   851E              ; ******************************************************************************************************************************************************************************************
 23   851E              ; Constantes.
 24   851E              ; ******************************************************************************************************************************************************************************************
 25   851E              ;
 26   851E              ; 8/11/22
 27   851E              ;
 28   851E              ; Constantes generales.
 29   851E              ;
 30   851E
 31   851E              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   851E              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   851E              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   851E              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   851E              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   851E
 37   851E              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   851E              ;                               				        ; De momento situamos este almacén en $7000.
 39   851E
 40   851E
 41   851E              ; ******************************************************************************************************************************************************************************************
 42   851E              ; Variables.
 43   851E              ; ******************************************************************************************************************************************************************************************
 44   851E              ;
 45   851E              ; 10/11/22
 46   851E              ;
 47   851E              ; Variables de DRAW. (Motor principal).
 48   851E              ;
 49   851E              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   851E
 51   851E 02           Filas db 2												; Filas. [DRAW]
 52   851F 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8520 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8522 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8524 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8525 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   8526
 58   8526              ; ---------- ---------- ---------- ---------;      ;---------
 59   8526
 60   8526 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   8527              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   8527              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   8527 04           Attr db %00000100										; Atributos de la entidad:
 64   8528
 65   8528              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   8528              ;
 67   8528              ;	COLORES: 0 ..... NEGRO
 68   8528              ;    		 1 ..... AZUL
 69   8528              ; 			 2 ..... ROJO
 70   8528              ;			 3 ..... MAGENTA
 71   8528              ; 			 4 ..... VERDE
 72   8528              ; 			 5 ..... CIAN
 73   8528              ;			 6 ..... AMARILLO
 74   8528              ; 			 7 ..... BLANCO
 75   8528
 76   8528 A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   852A 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   852C 00 00        Puntero_DESPLZ_der defw 0
 79   852E 00 00        Puntero_DESPLZ_izq defw 0
 80   8530
 81   8530 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8532 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8533
 84   8533              ; Variables de objeto. (Características).
 85   8533
 86   8533 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8534 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8535 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   8536 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   8537
 91   8537 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   8539 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   853B 00 00        	defw 0
 94   853D 00 00 00 00  	db 0,0,0,0
 95   8541
 96   8541 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   8543 00 00        	defw 0
 98   8545 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   8547 00 00 00 00  	db 0,0,0,0
100   854B
101   854B              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   854B
103   854B 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   854C              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   854C              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   854C              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   854C              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   854C              ;
109   854C              ; 														DESCRIPCIÖN:
110   854C              ;
111   854C              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   854C              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   854C              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   854C              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   854C              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   854C              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   854C              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   854C              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   854C              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   854C              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   854C              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   854C              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   854C              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   854C              ;
125   854C              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   854C              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   854C              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   854C
129   854C 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   854D
131   854D              ; Movimiento.
132   854D
133   854D 27 91        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   854F 00 00        Puntero_mov defw 0
135   8551 00           Contador_db_mov db 0
136   8552 00           Incrementa_puntero db 0
137   8553 00           Repetimos_db db 0
138   8554
139   8554              ; Variables de funcionamiento. [DRAW].
140   8554
141   8554 00           Columnas db 0
142   8555 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8557              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8557 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8558
146   8558              ; 59 Bytes por entidad.
147   8558              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8558              ;					         		---------;      ;---------
149   8558
150   8558
151   8558              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8558              ; Gestión de ENTIDADES.
153   8558
154   8558 00 00        Puntero_store_entidades defw 0
155   855A 00 00        Puntero_restore_entidades defw 0
156   855C 00 00        Indice_restore defw 0
157   855E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   855F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8560              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8560              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8560              ;														; _ (Numero_de_malotes)="0".
162   8560 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8562              ;														; _variable para almacenar lo posición del puntero_
164   8562              ; 														; _de pila, SP.
165   8562 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8564              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8564 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8566              ;														; _el snapshot de los registros de la siguiente entidad.
169   8566              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8566
171   8566              ; Gestión de FRAMES.
172   8566
173   8566 00           Switch db 0
174   8567
175   8567              ; Variables de Raster y localización en pantalla.
176   8567
177   8567 00 FF        Temp_Raster defw $ff00
178   8569
179   8569              ; Rutina principal *************************************************************************************************************************************************************************
180   8569              ;
181   8569              ;	14/11/22
182   8569
183   8569 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   856C
185   856C 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   856E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8570 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8572 F3           	DI
189   8573
190   8573 3E 01        	ld a,1
191   8575 D3 FE        	out ($fe),a
192   8577
193   8577 3E 07        	ld a,%00000111
194   8579 CD 60 8D     	call Cls
195   857C
196   857C              ;	call Pinta_FILAS
197   857C
198   857C CD 82 87     	call Pulsa_ENTER
199   857F
200   857F 21 5E 85     	ld hl,Numero_de_entidades
201   8582 46           	ld b,(hl)
202   8583 04           	inc b
203   8584 05           	dec b
204   8585 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8587
206   8587              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8587              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8587              ;	Pintamos el resto de entidades:
209   8587
210   8587 CD A2 86     	call Inicia_punteros_de_entidades
211   858A
212   858A              ;	INICIA ENTIDADES!!!!!
213   858A
214   858A C5           1 push bc  												; Guardo el contador de entidades.
215   858B CD D5 86      	call Inicia_Puntero_objeto
216   858E CD 12 88     	call Draw
217   8591 CD A0 7F     	call Guarda_foto_registros
218   8594 CD 1D 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8597 C1           	pop bc
220   8598 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   859A
222   859A              ; 	INICIA AMADEUS!!!!!
223   859A
224   859A CD 5E 87     3 call Restore_Amadeus
225   859D CD D5 86     	call Inicia_Puntero_objeto
226   85A0 CD 12 88     	call Draw
227   85A3 CD A0 7F     	call Guarda_foto_registros
228   85A6 CD 70 87     	call Store_Amadeus
229   85A9
230   85A9              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   85A9
232   85A9 CD A2 86     	call Inicia_punteros_de_entidades
233   85AC CD 4C 87     	call Restore_Primera_entidad
234   85AF
235   85AF 3A 5E 85     	ld a,(Numero_de_entidades)
236   85B2 3C           	inc a
237   85B3 32 5F 85     	ld (Numero_de_malotes),a
238   85B6
239   85B6 FB           2 ei
240   85B7 18 FD        	jr 2B
241   85B9
242   85B9              ; -----------------------------------------------------------------------------------
243   85B9
244   85B9              Frame
245   85B9
246   85B9              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   85B9              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   85B9
249   85B9 3E 07            ld a,7
250   85BB D3 FE            out ($fe),a
251   85BD CD 16 8B     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   85C0 3E 01            ld a,1
253   85C2 D3 FE            out ($fe),a
254   85C4
255   85C4              ; ----------------------------------------------------------------------
256   85C4
257   85C4 21 00 70     	ld hl,Album_de_fotos
258   85C7 22 64 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
259   85CA              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
260   85CA 3A 5E 85         ld a,(Numero_de_entidades)
261   85CD 47               ld b,a
262   85CE A7           	and a
263   85CF 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
264   85D1
265   85D1 C5           2 push bc
266   85D2 CD 1B 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
267   85D5 3A 4B 85     	ld a,(Ctrl_0)
268   85D8 CB 67        	bit 4,a
269   85DA 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
270   85DC CD 69 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
271   85DF
272   85DF              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
273   85DF              ; 16/02/23.
274   85DF              ; [[[
275   85DF CD B9 87     1 call Detecta_disparo_entidad
276   85E2              ; ]]]
277   85E2
278   85E2              ;1
279   85E2 21 4B 85     	ld hl,Ctrl_0
280   85E5 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
281   85E7 AF           	xor a
282   85E8 32 4C 85     	ld (Obj_dibujado),a
283   85EB CD 1D 87     	call Store_Restore_entidades
284   85EE C1           	pop bc
285   85EF 10 E0        	djnz 2B
286   85F1
287   85F1 CD 5E 87     4 call Restore_Amadeus
288   85F4 CD 3A 86     	call Mov_Amadeus
289   85F7 3A 4B 85     	ld a,(Ctrl_0)
290   85FA CB 67        	bit 4,a
291   85FC 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
292   85FE CD 69 86     	call Guarda_foto_entidad_a_pintar
293   8601
294   8601 21 4B 85     3 ld hl,Ctrl_0
295   8604 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
296   8606 AF           	xor a
297   8607 32 4C 85     	ld (Obj_dibujado),a
298   860A CD 70 87     	call Store_Amadeus
299   860D
300   860D              ; -----
301   860D
302   860D CD A2 86     	call Inicia_punteros_de_entidades
303   8610 CD 4C 87     	call Restore_Primera_entidad
304   8613 CD B8 86     	call Calcula_numero_de_malotes
305   8616
306   8616 3E 00        	ld a,0
307   8618 D3 FE        	out ($fe),a
308   861A C9           	ret
309   861B
310   861B              ; --------------------------------------------------------------------------------------------------------------
311   861B              ;
312   861B              ;	29/1/23
313   861B
314   861B              Mov_obj
315   861B
316   861B              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
317   861B
318   861B AF           	xor a
319   861C 32 4C 85     	ld (Obj_dibujado),a
320   861F CD 73 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
321   8622              ;														; Obj_dibujado="0".
322   8622              ; Movemos Entidades malignas.
323   8622
324   8622 CD 3D 91     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
325   8625 3A 4B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
326   8628 CB 67        	bit 4,a
327   862A C8           	ret z
328   862B
329   862B              ; ---------
330   862B
331   862B 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
332   862D 32 4C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
333   8630 CD 73 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
334   8633 CD 8A 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
335   8636 CD 59 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
336   8639 C9           	ret													; _de la misma.
337   863A
338   863A              ; --------------------------------------------------------------------------------------------------------------
339   863A              ;
340   863A              ;	29/1/23
341   863A
342   863A              Mov_Amadeus
343   863A
344   863A AF           	xor a
345   863B 32 4C 85     	ld (Obj_dibujado),a
346   863E CD 73 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
347   8641              ;														; Obj_dibujado="0".
348   8641              ; Movemos Amadeus.
349   8641
350   8641 CD 96 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
351   8644 3A 4B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
352   8647 CB 67        	bit 4,a
353   8649 C8           	ret z
354   864A
355   864A              ; ---------
356   864A
357   864A 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
358   864C 32 4C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
359   864F CD 73 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
360   8652 CD 8A 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
361   8655 CD 59 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
362   8658 C9           	ret													; _de la nave.
363   8659
364   8659              ; --------------------------------------------------------------------------------------------------------------
365   8659              ;
366   8659              ;	31/01/23
367   8659              ;
368   8659              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
369   8659
370   8659              Guarda_foto_entidad_a_borrar
371   8659
372   8659 CD EC 8A     	call Prepara_draw
373   865C CD 26 8A     	call calcula_CColumnass
374   865F CD 5D 8A     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
375   8662 CD B2 8A     	call Define_rutina_de_impresion
376   8665 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
377   8668 C9           	ret
378   8669
379   8669              ; --------------------------------------------------------------------------------------------------------------
380   8669              ;
381   8669              ;	31/01/23
382   8669              ;
383   8669              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
384   8669              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
385   8669
386   8669              Guarda_foto_entidad_a_pintar
387   8669
388   8669 CD 96 86     	call Repone_pintar
389   866C CD 12 88     	call Draw
390   866F CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
391   8672 C9           	ret
392   8673
393   8673              ; --------------------------------------------------------------------------------------------------------------
394   8673              ;
395   8673              ;
396   8673
397   8673 21 1E 85     Prepara_var_pintado_borrado	ld hl,Filas
398   8676 3A 4C 85     	ld a,(Obj_dibujado)
399   8679 A7           	and a
400   867A 28 05        	jr z,1F
401   867C 11 41 85     	ld de,Variables_de_pintado
402   867F 18 03        	jr 2F
403   8681 11 37 85     1 ld de,Variables_de_borrado
404   8684 01 08 00     2 ld bc,8
405   8687 ED B0        	ldir
406   8689 C9           	ret
407   868A
408   868A              ; --------------------------------------------------------------------------------------------------------------
409   868A
410   868A 21 37 85     Repone_borrar ld hl,Variables_de_borrado
411   868D 11 1E 85     	ld de,Filas
412   8690 01 08 00     	ld bc,8
413   8693 ED B0        	ldir
414   8695 C9           	ret
415   8696
416   8696 21 41 85     Repone_pintar ld hl,Variables_de_pintado
417   8699 11 1E 85     	ld de,Filas
418   869C 01 08 00     	ld bc,8
419   869F ED B0        	ldir
420   86A1 C9           	ret
421   86A2
422   86A2              ; *************************************************************************************************************************************************************
423   86A2              ;
424   86A2              ; 8/1/23
425   86A2              ;
426   86A2              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
427   86A2              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
428   86A2              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
429   86A2
430   86A2              ; Destruye HL y DE !!!!!
431   86A2
432   86A2              Inicia_punteros_de_entidades
433   86A2
434   86A2 21 F0 83     	ld hl,Indice_de_entidades
435   86A5 CD CF 86         call Extrae_address
436   86A8 22 58 85         ld (Puntero_store_entidades),hl
437   86AB 21 F2 83     	ld hl,Indice_de_entidades+2
438   86AE 22 5C 85     	ld (Indice_restore),hl
439   86B1 CD CF 86     	call Extrae_address
440   86B4 22 5A 85     	ld (Puntero_restore_entidades),hl
441   86B7 C9               ret
442   86B8
443   86B8              ; -------------------------------------------------------------------------------------------------------------
444   86B8              ;
445   86B8              ; 30/1/23
446   86B8              ;
447   86B8
448   86B8 2A 64 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
449   86BB 7D           	ld a,l
450   86BC A7           	and a
451   86BD 28 0C        	jr z,3F
452   86BF AF           	xor a
453   86C0 67           	ld h,a
454   86C1 7D           	ld a,l
455   86C2 D6 06        1 sub 6
456   86C4 28 03        	jr z,2F
457   86C6 24           	inc h
458   86C7 18 F9        	jr 1B
459   86C9 24           2 inc h
460   86CA 7C           	ld a,h
461   86CB 32 5F 85     3 ld (Numero_de_malotes),a
462   86CE C9           	ret
463   86CF
464   86CF              ; *************************************************************************************************************************************************************
465   86CF              ;
466   86CF              ; 20/10/22
467   86CF              ;
468   86CF              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
469   86CF              ;
470   86CF              ; Destruye el puntero y DE !!!!!
471   86CF
472   86CF 5E           Extrae_address ld e,(hl)
473   86D0 23           	inc hl
474   86D1 56           	ld d,(hl)
475   86D2 2B           	dec hl
476   86D3 EB           	ex de,hl
477   86D4 C9           	ret
478   86D5
479   86D5              ; *************************************************************************************************************************************************************
480   86D5              ;
481   86D5              ;	7/2/23
482   86D5              ;
483   86D5              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
484   86D5              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
485   86D5              ;
486   86D5              ;   Destruye HL y BC !!!!!,
487   86D5              ;
488   86D5              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
489   86D5              ;					"0" ..... Izquierda.
490   86D5
491   86D5              Inicia_Puntero_objeto
492   86D5
493   86D5 3A 32 85     	ld a,(Cuad_objeto)
494   86D8 E6 01        	and 1
495   86DA F5           	push af
496   86DB CC F9 86     	call z,Inicia_puntero_objeto_izq
497   86DE F1           	pop af
498   86DF 28 2B        	jr z,1F
499   86E1 CD E6 86     	call Inicia_puntero_objeto_der
500   86E4 18 26        	jr 1F
501   86E6
502   86E6              ; Arrancamos desde la parte izquierda de la pantalla.
503   86E6              ; Iniciamos (Indice_Sprite_der).
504   86E6
505   86E6 2A 28 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
506   86E9 22 2C 85     	ld (Puntero_DESPLZ_der),hl
507   86EC CD CF 86     	call Extrae_address
508   86EF 22 22 85     	ld (Puntero_objeto),hl
509   86F2
510   86F2 2A 2A 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
511   86F5              ;	call Extrae_address
512   86F5 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
513   86F8 C9           	ret
514   86F9
515   86F9              ; Arrancamos desde la parte derecha de la pantalla.
516   86F9              ; Iniciamos (Indice_Sprite_izq).
517   86F9
518   86F9 2A 2A 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
519   86FC 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
520   86FF CD CF 86     	call Extrae_address
521   8702 22 22 85     	ld (Puntero_objeto),hl
522   8705
523   8705 2A 28 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
524   8708              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
525   8708 22 2C 85     	ld (Puntero_DESPLZ_der),hl
526   870B C9           	ret
527   870C
528   870C              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
529   870C
530   870C 21 40 83     1 ld hl,Amadeus
531   870F ED 4B 22 85  	ld bc,(Puntero_objeto)
532   8713 B7 ED 42     	sub hl,bc
533   8716 C0           	ret nz
534   8717 21 4B 85     	ld hl,Ctrl_0
535   871A CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
536   871C C9           	ret 												; _de nuestra nave en los extremos.
537   871D
538   871D              ; *************************************************************************************************************************************************************
539   871D              ;
540   871D              ;	8/1/23
541   871D              ;
542   871D              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
543   871D              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
544   871D
545   871D              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
546   871D              ;	_de la 2ª y 3ª entidad respectivamente.
547   871D
548   871D
549   871D
550   871D              Store_Restore_entidades
551   871D
552   871D E5           	push hl
553   871E D5           	push de
554   871F C5            	push bc
555   8720
556   8720              ;	STORE !!!!!
557   8720              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
558   8720
559   8720 21 1E 85     	ld hl,Filas
560   8723 ED 5B 58 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
561   8727 01 3A 00     	ld bc,58
562   872A ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
563   872C
564   872C              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
565   872C
566   872C 2A 5A 85     	ld hl,(Puntero_restore_entidades)
567   872F 22 58 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
568   8732 11 1E 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
569   8735 01 3A 00     	ld bc,58
570   8738 ED B0        	ldir
571   873A
572   873A              ;	Incrementa RESTORE !!!!!
573   873A
574   873A 2A 5C 85         ld hl,(Indice_restore)
575   873D 23           	inc hl
576   873E 23           	inc hl
577   873F 22 5C 85     	ld (Indice_restore),hl
578   8742 CD CF 86         call Extrae_address
579   8745 22 5A 85         ld (Puntero_restore_entidades),hl
580   8748 C1           	pop bc
581   8749 D1           	pop de
582   874A E1           	pop hl
583   874B C9           	ret
584   874C
585   874C              ; **************************************************************************************************
586   874C              ;
587   874C              ;	29/10/22
588   874C              ;
589   874C              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
590   874C
591   874C E5           Restore_Primera_entidad push hl
592   874D D5           	push de
593   874E C5            	push bc
594   874F 2A 58 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
595   8752 11 1E 85     	ld de,Filas
596   8755 01 3A 00     	ld bc,58
597   8758 ED B0        	ldir
598   875A C1           	pop bc
599   875B D1           	pop de
600   875C E1           	pop hl
601   875D C9           	ret
602   875E
603   875E              ; **************************************************************************************************
604   875E              ;
605   875E              ;	25/01/23
606   875E              ;
607   875E              ;	Restore_Amadeus
608   875E              ;
609   875E              ;	Cargamos en DRAW los parámetros de Amadeus.
610   875E              ;
611   875E
612   875E E5           Restore_Amadeus	push hl
613   875F D5           	push de
614   8760 C5            	push bc
615   8761 21 FC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
616   8764 11 1E 85     	ld de,Filas
617   8767 01 3A 00     	ld bc,58
618   876A ED B0        	ldir
619   876C C1           	pop bc
620   876D D1           	pop de
621   876E E1           	pop hl
622   876F C9           	ret
623   8770
624   8770              ; *************************************************************************************************************************************************************
625   8770              ;
626   8770              ;	29/01/23
627   8770              ;
628   8770              ;	Store_Amadeus
629   8770              ;
630   8770              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
631   8770              ;
632   8770
633   8770 E5           Store_Amadeus push hl
634   8771 D5           	push de
635   8772 C5            	push bc
636   8773 21 1E 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
637   8776 11 FC 83     	ld de,Amadeus_db
638   8779 01 3A 00     	ld bc,58
639   877C ED B0        	ldir
640   877E C1           	pop bc
641   877F D1           	pop de
642   8780 E1           	pop hl
643   8781 C9           	ret
644   8782
645   8782              ; **************************************************************************************************
646   8782
647   8782              ; Teclado.
648   8782
649   8782 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
650   8784 DB FE        	in a,($fe)
651   8786 E6 01        	and $01
652   8788 28 02        	jr z,1f
653   878A 18 F6        	jr Pulsa_ENTER
654   878C C9           1 ret
655   878D
656   878D              ; **************************************************************************************************
657   878D              ;
658   878D              ; Temporización.
659   878D
660   878D              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
661   878D              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
662   878D              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
663   878D              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
664   878D
665   878D              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
666   878D              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
667   878D              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
668   878D
669   878D              ; A partir de $4f61 no hace falta DELAY.
670   878D
671   878D              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
672   878D
673   878D 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
674   8790 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
675   8791 78           	LD A,B
676   8792 A7           	AND A
677   8793 20 FB        	JR NZ,wait
678   8795 C9           	RET
679   8796
680   8796              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
681   8796              ;
682   8796              ;	16/02/23
683   8796
684   8796              Movimiento_Amadeus
685   8796
686   8796 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
687   8798 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
688   879A E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
689   879C CC EE 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
690   879F 3E F7        	ld a,$f7
691   87A1 DB FE        	in a,($fe)
692   87A3 E6 01        	and $01
693   87A5 C8           	ret z
694   87A6
695   87A6 3E F7        	ld a,$f7
696   87A8 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
697   87AA E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
698   87AC CC D0 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
699   87AF
700   87AF              ; Disparo.
701   87AF
702   87AF 3E F7        	ld a,$f7												; "5" para disparar.
703   87B1 DB FE        	in a,($fe)
704   87B3 E6 10        	and $10
705   87B5 CC EC 87     	call z,Genera_disparo
706   87B8 C9               ret
707   87B9
708   87B9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
709   87B9              ;
710   87B9              Detecta_disparo_entidad
711   87B9
712   87B9 3E 7F        	ld a,$7f
713   87BB DB FE        	in a,($fe)
714   87BD E6 01        	and 1
715   87BF C0           	ret nz
716   87C0 CD EC 87     	call Genera_disparo
717   87C3
718   87C3              ; Pinta indicadores de FILAS. ------------------------------------------------------
719   87C3
720   87C3 21 10 40     Pinta_FILAS ld hl,$4010
721   87C6              ;	ld b,9
722   87C6              ;2 push hl
723   87C6              ;	push bc
724   87C6 06 BF        	ld b,$bf
725   87C8 36 80        1 ld (hl),%10000000
726   87CA CD F8 8A     	call NextScan
727   87CD 10 F9        	djnz 1B
728   87CF              ;	pop bc
729   87CF              ;	pop hl
730   87CF              ;	inc l
731   87CF              ;	djnz 2B
732   87CF 06 03        	ld b,3
733   87D1 21 00 47         ld hl,$4700
734   87D4 CD DA 87     3 call Bucle_1
735   87D7 10 FB            djnz 3B
736   87D9 C9               ret
737   87DA
738   87DA C5           Bucle_1 push bc
739   87DB E5                   push hl
740   87DC D1                   pop de
741   87DD 13                   inc de
742   87DE 01 FF 00             ld bc,255
743   87E1 36 FF                ld (hl),255
744   87E3 ED B0                ldir
745   87E5 23                   inc hl
746   87E6 3E 07                ld a,7
747   87E8 84                   add a,h
748   87E9 67                   ld h,a
749   87EA C1                   pop bc
750   87EB C9                   ret
751   87EC
752   87EC              ; ---------------------------------------------------------------
753   87EC
754   87EC              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  87EC              ; ******************************************************************************************************************************************************************************************
  2+  87EC              ;
  3+  87EC              ;   16/02/23
  4+  87EC              ;
  5+  87EC              ;
  6+  87EC              ;
  7+  87EC              ; 	Calcula la dirección de memoria de pantalla donde se va a iniciar el disparo, (se aplica a_)
  8+  87EC              ;   _entidades y Amadeus).
  9+  87EC
 10+  87EC              Genera_disparo
 11+  87EC
 12+  87EC 3A 32 85         ld a,(Cuad_objeto)
 13+  87EF FE 02            cp 2
 14+  87F1 38 0A            jr c,1F
 15+  87F3 28 08            jr z,1F
 16+  87F5
 17+  87F5              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 18+  87F5
 19+  87F5 E6 01            and 1
 20+  87F7 28 02            jr z,2F
 21+  87F9
 22+  87F9              ; Estamos en el 3er cuadrante de pantalla.
 23+  87F9
 24+  87F9 18 FE            jr $
 25+  87FB
 26+  87FB              ; Estamos en el 4º cuadrante de pantalla.
 27+  87FB
 28+  87FB 18 FE        2 jr $
 29+  87FD
 30+  87FD              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
 31+  87FD
 32+  87FD 28 10        1 jr z,3F
 33+  87FF
 34+  87FF              ; 1er CUAD. ----- ----- ----- ----- -----
 35+  87FF              ;
 36+  87FF              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
 37+  87FF              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
 38+  87FF
 39+  87FF 2A 20 85     	ld hl,(Posicion_actual)
 40+  8802 CD F8 8A     	call NextScan
 41+  8805
 42+  8805              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
 43+  8805
 44+  8805 3A 26 85         ld a,(CTRL_DESPLZ)
 45+  8808 A7               and a
 46+  8809 28 00            jr z, 1F
 47+  880B
 48+  880B              ; (CTRL_DESPLZ)="0".
 49+  880B
 50+  880B 2B           1 dec hl
 51+  880C E5           	push hl
 52+  880D DD E1        	pop ix										; IX contiene el puntero de impresión.
 53+  880F
 54+  880F
 55+  880F
 56+  880F
 57+  880F
 58+  880F
 59+  880F
 60+  880F              ; Estamos en el 2º cuadrante de pantalla.
 61+  880F
 62+  880F 18 FE        3 jr $
 63+  8811
 64+  8811 C9           10 ret
 65+  8812
# file closed: Disparo.asm
755   8812              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8812              ; ******************************************************************************************************************************************************************************************
  2+  8812              ;
  3+  8812              ; 01/23
  4+  8812              ;
  5+  8812              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8812
  7+  8812 CD EC 8A     Draw call Prepara_draw
  8+  8815 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8816 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8817 28 05        	jr z,2F
 11+  8819
 12+  8819 3A 32 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  881C 18 0C        	jr 1F
 14+  881E 2A 30 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8821 22 20 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8824 CD B3 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8827              ;													; _la esquina superior izquierda de la pantalla.
 18+  8827 CD BF 91     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  882A 3A 4B 85     1 ld a,(Ctrl_0)
 20+  882D CB 6F        	bit 5,a
 21+  882F 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8831
 23+  8831 CD 49 88     	call Comprueba_limite_horizontal
 24+  8834 CD D9 88     	call Comprueba_limite_vertical
 25+  8837
 26+  8837              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8837
 28+  8837 CD 26 8A     3 call calcula_CColumnass
 29+  883A CD 5D 8A     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  883D CD B2 8A     	call Define_rutina_de_impresion
 31+  8840
 32+  8840 3A 4B 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8843 CB AF        	res 5,a											; _a ser de utilidad.
 34+  8845 32 4B 85     	ld (Ctrl_0),a
 35+  8848
 36+  8848 C9           	ret
 37+  8849
 38+  8849              ; *******************************************************************************************************************************************************************************************
 39+  8849              ;	21/01/23
 40+  8849              ;
 41+  8849              ; 	Comprueba_limite_horizontal.
 42+  8849              ;
 43+  8849              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8849              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8849              ;
 46+  8849              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8849              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8849              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8849              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8849
 51+  8849
 52+  8849
 53+  8849 3A 4B 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  884C CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  884E 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8850 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8852 32 4B 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8855 18 09            jr 6F
 59+  8857 CB 5F        1 bit 3,a
 60+  8859 28 0A            jr z,2F
 61+  885B E6 F7            and $f7
 62+  885D 32 4B 85         ld (Ctrl_0),a
 63+  8860 CD B3 89     6 call Inicializacion
 64+  8863 18 5B            jr 5F
 65+  8865 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8866
 67+  8866              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8866              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8866
 70+  8866 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8867 2A 55 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  886A CD 56 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  886D 67           	ld h,a
 74+  886E EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  886F CD 56 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8872 67           	ld h,a
 77+  8873 A7           	and a
 78+  8874 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8876 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8877 3A 32 85     	ld a,(Cuad_objeto)
 81+  887A FE 02        	cp 2
 82+  887C 38 1E        	jr c,3F
 83+  887E 28 1C        	jr z,3F
 84+  8880 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8881 28 23            jr z,7F
 86+  8883 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8885 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8887 E1           	pop hl
 89+  8888
 90+  8888              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8888              ; _para indicar con E="2" en caso necesario.
 92+  8888
 93+  8888 E5               push hl
 94+  8889 C5               push bc
 95+  888A CD 56 8D     	call calcula_tercio
 96+  888D FE 01        	cp 1
 97+  888F 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8891 CD C1 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8894 28 26            jr z,9F
100+  8896 38 24            jr c,9F
101+  8898 1E 00        11 ld e,0
102+  889A 18 22            jr 8F
103+  889C 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  889D 28 07        	jr z, 7F
105+  889F 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  88A1 1E 00         	ld e,0
107+  88A3 E1           	pop hl
108+  88A4 18 04        	jr 4F
109+  88A6 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  88A8 18 15            jr 10F
111+  88AA
112+  88AA              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  88AA              ; _para indicar con E="2" en caso necesario.
114+  88AA
115+  88AA E5           4 push hl
116+  88AB C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  88AC CD 56 8D     	call calcula_tercio
118+  88AF FE 01        	cp 1
119+  88B1 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  88B3 CD C1 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  88B6 28 04            jr z,9F
122+  88B8 30 02            jr nc,9F
123+  88BA 18 02        	jr 8F
124+  88BC 1E 02        9 ld e,2
125+  88BE C1           8 pop bc
126+  88BF E1           10 pop hl
127+  88C0 C9           5 ret
128+  88C1
129+  88C1              ; --------------------
130+  88C1              ;
131+  88C1              ; 25/08/22
132+  88C1
133+  88C1 CD 56 8D     Comprueba_centro call calcula_tercio
134+  88C4 67               ld h,a
135+  88C5 08           	ex af,af
136+  88C6 FE 02        	cp 2
137+  88C8 38 07        	jr c,1F
138+  88CA 28 05        	jr z,1F
139+  88CC 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  88CF 18 03        	jr 2F
141+  88D1 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  88D4 08           2 ex af,af
143+  88D5 A7               and a
144+  88D6 ED 42            sbc hl,bc
145+  88D8 C9               ret
146+  88D9
147+  88D9              ; *********************************************************************************************************************************************************************************************
148+  88D9              ;
149+  88D9              ;   16/8/22
150+  88D9              ;
151+  88D9              ;	Comprueba_limite_vertical
152+  88D9              ;
153+  88D9              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  88D9              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  88D9              ;
156+  88D9
157+  88D9 2A 20 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  88DC 7D           	ld a,l
159+  88DD E6 1F        	and $1F
160+  88DF 57           	ld d,a
161+  88E0 3A 57 85     	ld a,(Limite_vertical)
162+  88E3 BA           	cp d 											; Límite - Posición.
163+  88E4 08           	ex af,af 										; Resultado de CP d en F'.
164+  88E5 3A 32 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  88E8 CB 47        	bit 0,a
166+  88EA 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  88EC
168+  88EC              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  88EC
170+  88EC 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  88ED 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  88EF
173+  88EF              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  88EF              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  88EF
176+  88EF 3A 24 85         ld a,(Coordenada_X)
177+  88F2 16 0F            ld d,Centro_izquierda
178+  88F4 A7               and a
179+  88F5 92               sub d 											 ; Posición - Centro_izquierda.
180+  88F6 28 1E            jr z,3F
181+  88F8 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  88FA              ;                                                    ; _salimos sin modificar nada.
183+  88FA 18 0E            jr 2F
184+  88FC 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  88FD 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  88FF
187+  88FF              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  88FF              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  88FF
190+  88FF 3A 24 85         ld a,(Coordenada_X)
191+  8902 16 10            ld d,Centro_derecha
192+  8904 A7               and a
193+  8905 92               sub d
194+  8906 28 0E            jr z,3F
195+  8908 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  890A              ;                                                    ; _salimos sin modificar nada.
197+  890A CB 43        2 bit 0,e
198+  890C 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  890E C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  890F CD A3 89         call Modificaccionne
201+  8912 C1           	pop bc
202+  8913 CD B3 89         call Inicializacion
203+  8916 C9           3 ret 				 								 ; Salimos de la rutina.
204+  8917
205+  8917              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8917
207+  8917 C5           4 push bc
208+  8918 01 1F 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  891B 0A           	ld a,(bc)
210+  891C 3D           	dec a
211+  891D 47           	ld b,a 											 ; Columnas-1 en B.
212+  891E 7D           	ld a,l
213+  891F 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8920 CB 47        	bit 0,a
215+  8922 28 03        	jr z,5F
216+  8924 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8925 18 2E        	jr 7F
218+  8927
219+  8927              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8927
221+  8927 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8928 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8929 3A 4B 85     	ld a,(Ctrl_0)
224+  892C CB 4F        	bit 1,a
225+  892E 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8930 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8931
228+  8931              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8931
230+  8931 1C               inc e
231+  8932 1D               dec e
232+  8933 20 07            jr nz,12F
233+  8935 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8936 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8937 22 20 85     	ld (Posicion_actual),hl
236+  893A 18 44        13 jr 9F
237+  893C CB 43        12 bit 0,e
238+  893E 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8940              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8940 C1           	pop bc
241+  8941 18 D3        	jr 3B
242+  8943 80           14 add b
243+  8944 6F               ld l,a
244+  8945 22 20 85     	ld (Posicion_actual),hl
245+  8948 CD A3 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  894B 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  894D E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  894F 32 4B 85         ld (Ctrl_0),a
249+  8952 F1           	pop af
250+  8953 18 2B        	jr 9F
251+  8955
252+  8955              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8955
254+  8955 F5           7 push af
255+  8956 3A 4B 85     	ld a,(Ctrl_0)
256+  8959 CB 47        	bit 0,a
257+  895B 20 1D        	jr nz,8F
258+  895D F1           	pop af
259+  895E
260+  895E              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  895E
262+  895E 1C           	inc e
263+  895F 1D               dec e
264+  8960 20 07            jr nz,10F
265+  8962 90           	sub b
266+  8963 6F               ld l,a
267+  8964 22 20 85     	ld (Posicion_actual),hl
268+  8967 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8969              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8969 CB 43        10 bit 0,e
271+  896B 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  896D              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  896D C1           	pop bc
274+  896E 18 A6        	jr 3B
275+  8970 90           16 sub b
276+  8971 6F               ld l,a
277+  8972 22 20 85     	ld (Posicion_actual),hl
278+  8975 CD A3 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8978 18 06            jr 9F
280+  897A E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  897C 32 4B 85         ld (Ctrl_0),a
282+  897F F1           	pop af
283+  8980 C1           9 pop bc
284+  8981 1E 00        	ld e,0
285+  8983 CD B3 89         call Inicializacion
286+  8986 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8987 08           	ex af,af
288+  8988 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8989 18 8B            jr 3B
290+  898B
291+  898B              ; --------------------
292+  898B
293+  898B 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  898D CD 07 8B     1 call PreviousScan
295+  8990 10 FB            djnz 1B
296+  8992 22 20 85     	ld (Posicion_actual),hl
297+  8995 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8996 C9           	ret
299+  8997
300+  8997              ; --------------------
301+  8997
302+  8997 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8999 CD F8 8A     1 call NextScan
304+  899C 10 FB            djnz 1B
305+  899E 22 20 85     	ld (Posicion_actual),hl
306+  89A1 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  89A2 C9           	ret
308+  89A3
309+  89A3              ; --------------------
310+  89A3              ;
311+  89A3              ;	22/01/23
312+  89A3              ;
313+  89A3              ;	E="1". Hemos cambiado de cuadrante.
314+  89A3              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  89A3              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  89A3
317+  89A3
318+  89A3              Modificaccionne
319+  89A3
320+  89A3 3A 32 85     	ld a,(Cuad_objeto)
321+  89A6 FE 02        	cp 2
322+  89A8 CC 8B 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  89AB DC 8B 89         call c,Modifica_Pos_actual
324+  89AE C8           	ret z
325+  89AF CD 97 89         call Modifica_Pos_actual2
326+  89B2 C9               ret
327+  89B3
328+  89B3              ; *************************************************************************************************************************************************************************************************
329+  89B3              ;
330+  89B3              ;	13/8/22
331+  89B3              ;
332+  89B3              ;	Inicializacion
333+  89B3              ;
334+  89B3              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  89B3              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  89B3              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  89B3              ;
338+  89B3              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  89B3              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  89B3              ;	_ desaparece/aparece.
341+  89B3
342+  89B3              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  89B3              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  89B3              ;
345+  89B3              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  89B3              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  89B3              ; 		   [E] ="0"
348+  89B3
349+  89B3              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  89B3
351+  89B3 CD 56 8D     Inicializacion call calcula_tercio
352+  89B6 28 36        	jr z,primit
353+  89B8 E6 02        	and 2
354+  89BA 20 07        	jr nz,segmit
355+  89BC 7D           	ld a,l
356+  89BD FE 7F        	cp $7f
357+  89BF 38 2D        	jr c,primit
358+  89C1 28 2B        	jr z,primit
359+  89C3 CD 20 8A     segmit call column
360+  89C6 38 13        	jr c,tercuad
361+  89C8 3E 04        cuarcuad ld a,4
362+  89CA 32 32 85     	ld (Cuad_objeto),a
363+  89CD 21 20 48     	ld hl,$4820
364+  89D0 22 55 85     	ld (Limite_horizontal),hl
365+  89D3 21 57 85     	ld hl,Limite_vertical
366+  89D6 36 0D        	ld (hl),$0d
367+  89D8 08           	ex af,af
368+  89D9 18 3C        	jr 1F
369+  89DB              tercuad
370+  89DB 3E 03        	ld a,3
371+  89DD 32 32 85     	ld (Cuad_objeto),a
372+  89E0 21 20 48     	ld hl,$4820
373+  89E3 22 55 85     	ld (Limite_horizontal),hl
374+  89E6 21 57 85     	ld hl,Limite_vertical
375+  89E9 36 12        	ld (hl),$12
376+  89EB 08           	ex af,af
377+  89EC 18 29        	jr 1F
378+  89EE CD 20 8A     primit call column
379+  89F1 38 13        	jr c, primcuad
380+  89F3              segcuad
381+  89F3 3E 02        	ld a,2
382+  89F5 32 32 85     	ld (Cuad_objeto),a
383+  89F8 21 C0 4F     	ld hl,$4fc0
384+  89FB 22 55 85     	ld (Limite_horizontal),hl
385+  89FE 21 57 85     	ld hl,Limite_vertical
386+  8A01 36 0D        	ld (hl),$0d
387+  8A03 08           	ex af,af
388+  8A04 18 11        	jr 1F
389+  8A06              primcuad
390+  8A06 3E 01        	ld a,1
391+  8A08 32 32 85     	ld (Cuad_objeto),a
392+  8A0B 21 C0 4F     	ld hl,$4fc0
393+  8A0E 22 55 85     	ld (Limite_horizontal),hl
394+  8A11 21 57 85     	ld hl,Limite_vertical
395+  8A14 36 12        	ld (hl),$12
396+  8A16 08           	ex af,af
397+  8A17 CD 88 90     1 call Genera_coordenadas
398+  8A1A 21 4B 85     	ld hl,Ctrl_0
399+  8A1D CB EE        	set 5,(hl)
400+  8A1F C9           	ret
401+  8A20
402+  8A20              ; ------------------------------------------------------------------------------------------------------------------
403+  8A20
404+  8A20              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8A20              ;
406+  8A20              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8A20
408+  8A20 7D           column ld a,l
409+  8A21 E6 1F        	and $1f
410+  8A23 FE 10         	cp $10
411+  8A25 C9            	ret
412+  8A26
413+  8A26              ; --------------------------------------------------------------------------------------------------------------------
414+  8A26              ;
415+  8A26              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8A26              ;
417+  8A26              ; 14/12/22
418+  8A26              ;
419+  8A26              ;	Modifica: A y BC.
420+  8A26
421+  8A26 3A 32 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8A29 E6 01        	and 1
423+  8A2B 28 17        	jr z,1F
424+  8A2D
425+  8A2D              ; Nos encontramos en la parte izquierda de la pantalla
426+  8A2D
427+  8A2D 3A 24 85     	ld a,(Coordenada_X)
428+  8A30 47           	ld b,a
429+  8A31 04           	inc b											; (Coordenada_X)+1 en B.
430+  8A32 79           	ld a,c
431+  8A33 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8A34 38 08        	jr c,2F
433+  8A36 47           	ld b,a
434+  8A37 79           	ld a,c
435+  8A38 90           	sub b
436+  8A39 32 54 85     	ld (Columnas),a
437+  8A3C 18 1B        	jr 4F
438+  8A3E 79           2 ld a,c
439+  8A3F 32 54 85     	ld (Columnas),a
440+  8A42 18 15        	jr 4F
441+  8A44
442+  8A44              ; Nos encontramos en la parte derecha de la pantalla.
443+  8A44
444+  8A44 3A 24 85     1 ld a,(Coordenada_X)
445+  8A47 81           	add c
446+  8A48 3D           	dec a
447+  8A49 D6 1F        	sub $1f
448+  8A4B 38 08        	jr c,3F
449+  8A4D 47           	ld b,a
450+  8A4E 79           	ld a,c
451+  8A4F 90           	sub b
452+  8A50 32 54 85     	ld (Columnas),a
453+  8A53 18 04        	jr 4F
454+  8A55 79           3 ld a,c
455+  8A56 32 54 85     	ld (Columnas),a
456+  8A59 D9           4 exx
457+  8A5A 4F           	ld c,a
458+  8A5B D9           	exx
459+  8A5C C9            ret
460+  8A5D
461+  8A5D              ; --------------------------------------------------------------------------------------------------------------------
462+  8A5D              ;
463+  8A5D              ; 7/1/23
464+  8A5D              ;
465+  8A5D              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8A5D              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8A5D              ;
468+  8A5D              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8A5D              ;	DESTRUYE: HL,B Y A.
470+  8A5D
471+  8A5D 3A 32 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8A60 FE 02        	cp 2
473+  8A62 38 18        	jr c,1F
474+  8A64 28 16        	jr z,1F
475+  8A66 E6 01        	and 1
476+  8A68 28 0D        	jr z,3F
477+  8A6A
478+  8A6A              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8A6A
480+  8A6A CD A6 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8A6D
482+  8A6D 7D           9 ld a,l
483+  8A6E E6 1F        	and $1f
484+  8A70 28 2A        	jr z,7F
485+  8A72 2B           	dec hl
486+  8A73 10 F8        	djnz 9B
487+  8A75 18 25        	jr 7F
488+  8A77
489+  8A77              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8A77
491+  8A77 2A 20 85     3 ld hl,(Posicion_actual)
492+  8A7A 18 20        	jr 7F
493+  8A7C
494+  8A7C 28 14        1 jr z,2F
495+  8A7E
496+  8A7E              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8A7E
498+  8A7E CD A6 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8A81 7D           4 ld a,l
500+  8A82 E6 1F        	and $1f
501+  8A84 28 03        	jr z,6F
502+  8A86 2B           	dec hl
503+  8A87 10 F8        	djnz 4B
504+  8A89 06 0F        6 ld b,15
505+  8A8B CD 07 8B     5 call PreviousScan
506+  8A8E 10 FB        	djnz 5B
507+  8A90 18 0A        	jr 7F
508+  8A92
509+  8A92              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8A92
511+  8A92 CD A6 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8A95 06 0F        	ld b,15
513+  8A97 CD 07 8B     8 call PreviousScan
514+  8A9A 10 FB        	djnz 8B
515+  8A9C
516+  8A9C E5           7 push hl
517+  8A9D DD E1        	pop ix
518+  8A9F
519+  8A9F 2A 22 85     	ld hl,(Puntero_objeto)
520+  8AA2 E5           	push hl
521+  8AA3 FD E1        	pop iy
522+  8AA5
523+  8AA5 C9           	ret
524+  8AA6
525+  8AA6              ; --------------------------------------------------------------------------------------------------------------------
526+  8AA6              ;
527+  8AA6              ;	2/1/23
528+  8AA6              ;
529+  8AA6              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8AA6              ;
531+  8AA6              ;	Tras esta rutina tenemos:
532+  8AA6              ;
533+  8AA6              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8AA6              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8AA6              ;
536+  8AA6              ;	DESTRUYE!!!!! HL,B y A.
537+  8AA6
538+  8AA6 2A 20 85     Operandos ld hl,(Posicion_actual)
539+  8AA9 3A 54 85     	ld a,(Columnas)
540+  8AAC 3D           	dec a
541+  8AAD 20 01        	jr nz,1F
542+  8AAF 3C           	inc a
543+  8AB0 47           1 ld b,a
544+  8AB1 C9           	ret
545+  8AB2
546+  8AB2              ; --------------------------------------------------------------------------------------------------------------------
547+  8AB2              ;
548+  8AB2              ;	3/1/23
549+  8AB2              ;
550+  8AB2              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8AB2              ;
552+  8AB2              ;	Destruye: A,B,HL y DE.
553+  8AB2
554+  8AB2              Define_rutina_de_impresion
555+  8AB2
556+  8AB2 3A 1F 85     	ld a,(Columns)
557+  8AB5 47           	ld b,a
558+  8AB6 3A 54 85     	ld a,(Columnas)
559+  8AB9 B8           	cp b
560+  8ABA 20 0D        	jr nz,2f
561+  8ABC
562+  8ABC              ;	La entidad se imprime entera.
563+  8ABC
564+  8ABC 21 53 8B     	ld hl, Indice_entidades_completas
565+  8ABF E6 01        	and 1
566+  8AC1 28 02        	jr z,1F
567+  8AC3
568+  8AC3 23           	inc hl
569+  8AC4 23           	inc hl
570+  8AC5
571+  8AC5 CD CF 86     1 call Extrae_address
572+  8AC8 C9           	ret		;	ret
573+  8AC9
574+  8AC9              ;	La entidad no se imprime entera en pantalla.
575+  8AC9
576+  8AC9 3A 32 85     2 ld a,(Cuad_objeto)
577+  8ACC E6 01        	and 1
578+  8ACE 28 17        	jr z,3F
579+  8AD0
580+  8AD0              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8AD0
582+  8AD0 21 57 8B     	ld hl, Indice_entidades_incompletas_izquierda
583+  8AD3 3A 1F 85     4 ld a,(Columns)
584+  8AD6 E6 01        	and 1
585+  8AD8 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8ADA
587+  8ADA 23           	inc hl
588+  8ADB 23           	inc hl
589+  8ADC
590+  8ADC 3A 54 85     	ld a,(Columnas)
591+  8ADF E6 01        	and 1
592+  8AE1 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8AE3
594+  8AE3 23           	inc hl
595+  8AE4 23           	inc hl
596+  8AE5
597+  8AE5 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8AE7
599+  8AE7 21 5D 8B     3 ld hl, Indice_entidades_incompletas_derecha
600+  8AEA 18 E7        	jr 4B
601+  8AEC
602+  8AEC              ; --------------------------------------------------------------------------------------------------------------------
603+  8AEC              ;
604+  8AEC              ;	Prepara_draw
605+  8AEC              ;
606+  8AEC              ;	Es una rutina de carga.
607+  8AEC              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8AEC              ;
609+  8AEC              ;	FUNCIONAMIENTO:
610+  8AEC              ;
611+  8AEC              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8AEC              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8AEC              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8AEC              ;
615+  8AEC              ;	DESTRUYE:
616+  8AEC              ;
617+  8AEC              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8AEC
619+  8AEC 21 1E 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8AEF 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8AF0 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8AF1 4E           	ld c,(hl)
623+  8AF2 2A 20 85     	ld hl,(Posicion_actual)
624+  8AF5 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8AF7 C9           	ret
626+  8AF8
627+  8AF8              ;----------------------------------------------------------------------------------------------------------------
628+  8AF8              ;
629+  8AF8              ;	5/08/22
630+  8AF8              ;
631+  8AF8              ;   NextScan.
632+  8AF8              ;
633+  8AF8              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8AF8              ;
635+  8AF8              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8AF8              ;
637+  8AF8              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8AF8              ;
639+  8AF8              ;       DESTRUIDOS: AF y HL !!!
640+  8AF8              ;
641+  8AF8              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8AF8              ;
643+  8AF8
644+  8AF8 24           NextScan inc h          ; Incrementamos el scanline.
645+  8AF9 7C               ld a,h
646+  8AFA E6 07            and 7
647+  8AFC C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8AFD
649+  8AFD 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8AFE C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8B00 6F               ld l,a
652+  8B01 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8B02
654+  8B02 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8B03 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8B05 67               ld h,a
657+  8B06 C9               ret
658+  8B07
659+  8B07              ;----------------------------------------------------------------------------------------------------------------
660+  8B07              ;
661+  8B07              ;	5/08/22
662+  8B07              ;
663+  8B07              ;   PreviousScan.
664+  8B07              ;
665+  8B07              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8B07              ;
667+  8B07              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8B07              ;
669+  8B07              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8B07              ;
671+  8B07              ;       DESTRUIDOS: AF y HL !!!
672+  8B07              ;
673+  8B07              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8B07              ;
675+  8B07
676+  8B07 7C           PreviousScan ld a,h
677+  8B08 25               dec h               ; Dec H.
678+  8B09 E6 07            and 7
679+  8B0B C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8B0C
681+  8B0C 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8B0D D6 20            sub $20             ; Vamos a comprobarlo...
683+  8B0F 6F               ld l,a
684+  8B10 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8B11
686+  8B11 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8B12 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8B14 67               ld h,a
689+  8B15 C9               ret
690+  8B16
691+  8B16              ; -----------------------------------------------------------------------------------
692+  8B16              ;
693+  8B16              ;	15/1/23
694+  8B16
695+  8B16              Extrae_foto_registros
696+  8B16
697+  8B16 3A 5F 85     	ld a,(Numero_de_malotes)
698+  8B19 A7           	and a
699+  8B1A C8           	ret z
700+  8B1B
701+  8B1B
702+  8B1B ED 73 60 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8B1F 31 00 70     	ld sp,Album_de_fotos
704+  8B22
705+  8B22 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8B24 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8B25 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8B26
709+  8B26 ED 73 62 85  	ld (Stack_2),sp
710+  8B2A ED 7B 60 85  	ld sp,(Stack)
711+  8B2E
712+  8B2E              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8B2E
714+  8B2E 3E CD        	ld a,$cd
715+  8B30 32 38 8B     	ld (Imprime),a
716+  8B33 EB           	ex de,hl
717+  8B34 22 39 8B     	ld (Imprime+1),hl
718+  8B37 EB           	ex de,hl
719+  8B38
720+  8B38              ; Ejecuta la llamada:	CALL $xx,xx
721+  8B38
722+  8B38 00 00 00     Imprime db 0,0,0
723+  8B3B
724+  8B3B ED 73 60 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8B3F
726+  8B3F 3A 5F 85     	ld a,(Numero_de_malotes)
727+  8B42 3D           	dec a
728+  8B43 28 09        	jr z,1F
729+  8B45 32 5F 85      	ld (Numero_de_malotes),a
730+  8B48 ED 7B 62 85  	ld sp,(Stack_2)
731+  8B4C 18 D4        	jr 2B
732+  8B4E
733+  8B4E AF           1 xor a
734+  8B4F 32 62 85     	ld (Stack_2),a
735+  8B52 C9           	ret
736+  8B53
737+  8B53
# file closed: Draw_XOR.asm
756   8B53              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8B53              ;   índices de Rutinas de impresión.
  2+  8B53
  3+  8B53 63 8B        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8B55 90 8B            defw Pinta_Amadeus_3x2
  5+  8B57
  6+  8B57 E6 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8B59 86 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8B5B 3A 8C            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8B5D
 10+  8B5D 10 8C        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8B5F 14 8D            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8B61 C8 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8B63
 14+  8B63
 15+  8B63              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8B63              ;
 17+  8B63              ;   12/12/22
 18+  8B63              ;
 19+  8B63              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8B63              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8B63              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8B63              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8B63              ;
 24+  8B63              ;   Modifica: DE y HL.
 25+  8B63
 26+  8B63 ED 73 60 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8B67 FD F9        	ld sp,iy
 28+  8B69 06 10            ld b,16
 29+  8B6B D1           1 pop de
 30+  8B6C 7B               ld a,e
 31+  8B6D AE               xor (hl)
 32+  8B6E 77           	ld (hl),a
 33+  8B6F 23           	inc hl
 34+  8B70 7A               ld a,d
 35+  8B71 AE               xor (hl)
 36+  8B72 77           	ld (hl),a
 37+  8B73 2B           	dec hl
 38+  8B74 24           	inc h
 39+  8B75 7C               ld a,h
 40+  8B76 E6 07            and 7
 41+  8B78 20 0A            jr nz,2F
 42+  8B7A 7D               ld a,l
 43+  8B7B C6 20            add a,$20
 44+  8B7D 6F               ld l,a
 45+  8B7E 38 04            jr c,2F
 46+  8B80 7C               ld a,h
 47+  8B81 D6 08            sub 8
 48+  8B83 67               ld h,a
 49+  8B84 7C           2 ld a,h
 50+  8B85 FE 58            cp $58
 51+  8B87 28 02            jr z,3F
 52+  8B89 10 E0            djnz 1B
 53+  8B8B ED 7B 60 85  3 ld sp,(Stack)
 54+  8B8F C9           	ret
 55+  8B90
 56+  8B90 ED 73 60 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B94 FD F9        	ld sp,iy
 58+  8B96 06 08            ld b,8
 59+  8B98 D1           1 pop de
 60+  8B99 7B               ld a,e
 61+  8B9A AE               xor (hl)
 62+  8B9B 77           	ld (hl),a
 63+  8B9C 23           	inc hl
 64+  8B9D 7A               ld a,d
 65+  8B9E AE               xor (hl)
 66+  8B9F 77           	ld (hl),a
 67+  8BA0 23           	inc hl
 68+  8BA1 D1           	pop de
 69+  8BA2 7B               ld a,e
 70+  8BA3 AE               xor (hl)
 71+  8BA4 77           	ld (hl),a
 72+  8BA5 2B           	dec hl
 73+  8BA6 2B           	dec hl
 74+  8BA7 24           	inc h
 75+  8BA8 7C               ld a,h
 76+  8BA9 E6 07            and 7
 77+  8BAB 20 0A            jr nz,2F
 78+  8BAD 7D               ld a,l
 79+  8BAE C6 20            add a,$20
 80+  8BB0 6F               ld l,a
 81+  8BB1 38 04            jr c,2F
 82+  8BB3 7C               ld a,h
 83+  8BB4 D6 08            sub 8
 84+  8BB6 67               ld h,a
 85+  8BB7 7C           2 ld a,h
 86+  8BB8 FE 58            cp $58
 87+  8BBA 28 25            jr z,4F
 88+  8BBC 7A               ld a,d
 89+  8BBD AE               xor (hl)
 90+  8BBE 77               ld (hl),a
 91+  8BBF D1           	pop de
 92+  8BC0 23           	inc hl
 93+  8BC1 7B               ld a,e
 94+  8BC2 AE               xor (hl)
 95+  8BC3 77           	ld (hl),a
 96+  8BC4 23           	inc hl
 97+  8BC5 7A               ld a,d
 98+  8BC6 AE               xor (hl)
 99+  8BC7 77           	ld (hl),a
100+  8BC8 2B           	dec hl
101+  8BC9 2B           	dec hl
102+  8BCA 24           	inc h
103+  8BCB 7C               ld a,h
104+  8BCC E6 07            and 7
105+  8BCE 20 0A            jr nz,3F
106+  8BD0 7D               ld a,l
107+  8BD1 C6 20            add a,$20
108+  8BD3 6F               ld l,a
109+  8BD4 38 04            jr c,3F
110+  8BD6 7C               ld a,h
111+  8BD7 D6 08            sub 8
112+  8BD9 67               ld h,a
113+  8BDA 7C           3 ld a,h
114+  8BDB FE 58            cp $58
115+  8BDD 28 02            jr z,4F
116+  8BDF 10 B7            djnz 1B
117+  8BE1 ED 7B 60 85  4 ld sp,(Stack)
118+  8BE5 C9           	ret
119+  8BE6
120+  8BE6              ; ---------------------------------------------------
121+  8BE6
122+  8BE6 ED 73 60 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8BEA FD F9        	ld sp,iy
124+  8BEC 06 10            ld b,16
125+  8BEE D1           1 pop de
126+  8BEF 7A           	ld a,d
127+  8BF0 AE           	xor (hl)
128+  8BF1 77           	ld (hl),a
129+  8BF2 24           	inc h
130+  8BF3 7C               ld a,h
131+  8BF4 E6 07            and 7
132+  8BF6 20 0C            jr nz,2F
133+  8BF8 7D               ld a,l
134+  8BF9 C6 20            add a,$20
135+  8BFB 6F               ld l,a
136+  8BFC 38 06            jr c,2F
137+  8BFE 7C               ld a,h
138+  8BFF D6 08            sub 8
139+  8C01 67               ld h,a
140+  8C02 18 00            jr 2F
141+  8C04 7C           2 ld a,h
142+  8C05 FE 58            cp $58
143+  8C07 28 02            jr z,3F
144+  8C09 10 E3            djnz 1B
145+  8C0B ED 7B 60 85  3 ld sp,(Stack)
146+  8C0F C9           	ret
147+  8C10
148+  8C10 ED 73 60 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8C14 FD F9        	ld sp,iy
150+  8C16 06 10            ld b,16
151+  8C18 D1           1 pop de
152+  8C19 7B           	ld a,e
153+  8C1A AE           	xor (hl)
154+  8C1B 77           	ld (hl),a
155+  8C1C 24           	inc h
156+  8C1D 7C               ld a,h
157+  8C1E E6 07            and 7
158+  8C20 20 0C            jr nz,2F
159+  8C22 7D               ld a,l
160+  8C23 C6 20            add a,$20
161+  8C25 6F               ld l,a
162+  8C26 38 06            jr c,2F
163+  8C28 7C               ld a,h
164+  8C29 D6 08            sub 8
165+  8C2B 67               ld h,a
166+  8C2C 18 00            jr 2F
167+  8C2E 7C           2 ld a,h
168+  8C2F FE 58            cp $58
169+  8C31 28 02            jr z,3F
170+  8C33 10 E3            djnz 1B
171+  8C35 ED 7B 60 85  3 ld sp,(Stack)
172+  8C39 C9           	ret
173+  8C3A
174+  8C3A              ; ---------------------------------------------------
175+  8C3A
176+  8C3A ED 73 60 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8C3E FD F9        	ld sp,iy
178+  8C40 06 08            ld b,8
179+  8C42 D1           1 pop de
180+  8C43 7A           	ld a,d
181+  8C44 AE           	xor (hl)
182+  8C45 77           	ld (hl),a
183+  8C46 23           	inc hl
184+  8C47 D1           	pop de
185+  8C48 7B           	ld a,e
186+  8C49 AE           	xor (hl)
187+  8C4A 77           	ld (hl),a
188+  8C4B 2B           	dec hl
189+  8C4C 24            	inc h
190+  8C4D 7C               ld a,h
191+  8C4E E6 07            and 7
192+  8C50 20 0A            jr nz,2F
193+  8C52 7D               ld a,l
194+  8C53 C6 20            add a,$20
195+  8C55 6F               ld l,a
196+  8C56 38 04            jr c,2F
197+  8C58 7C               ld a,h
198+  8C59 D6 08            sub 8
199+  8C5B 67               ld h,a
200+  8C5C 7C           2 ld a,h
201+  8C5D FE 58            cp $58
202+  8C5F 28 20            jr z,4F
203+  8C61 D1               pop de
204+  8C62 7B           	ld a,e
205+  8C63 AE           	xor (hl)
206+  8C64 77           	ld (hl),a
207+  8C65 23           	inc hl
208+  8C66 7A           	ld a,d
209+  8C67 AE           	xor (hl)
210+  8C68 77           	ld (hl),a
211+  8C69 2B           	dec hl
212+  8C6A 24           	inc h
213+  8C6B 7C               ld a,h
214+  8C6C E6 07            and 7
215+  8C6E 20 0A            jr nz,3F
216+  8C70 7D               ld a,l
217+  8C71 C6 20            add a,$20
218+  8C73 6F               ld l,a
219+  8C74 38 04            jr c,3F
220+  8C76 7C               ld a,h
221+  8C77 D6 08            sub 8
222+  8C79 67               ld h,a
223+  8C7A 7C           3 ld a,h
224+  8C7B FE 58            cp $58
225+  8C7D 28 02            jr z,4F
226+  8C7F 10 C1            djnz 1B
227+  8C81 ED 7B 60 85  4 ld sp,(Stack)
228+  8C85 C9           	ret
229+  8C86
230+  8C86 ED 73 60 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C8A FD F9        	ld sp,iy
232+  8C8C 06 08            ld b,8
233+  8C8E D1           1 pop de
234+  8C8F D1           	pop de
235+  8C90 7B           	ld a,e
236+  8C91 AE           	xor (hl)
237+  8C92 77           	ld (hl),a
238+  8C93 24            	inc h
239+  8C94 7C               ld a,h
240+  8C95 E6 07            and 7
241+  8C97 20 0A            jr nz,2F
242+  8C99 7D               ld a,l
243+  8C9A C6 20            add a,$20
244+  8C9C 6F               ld l,a
245+  8C9D 38 04            jr c,2F
246+  8C9F 7C               ld a,h
247+  8CA0 D6 08            sub 8
248+  8CA2 67               ld h,a
249+  8CA3 7C           2 ld a,h
250+  8CA4 FE 58            cp $58
251+  8CA6 28 1B            jr z,4F
252+  8CA8 D1               pop de
253+  8CA9 7A           	ld a,d
254+  8CAA AE           	xor (hl)
255+  8CAB 77           	ld (hl),a
256+  8CAC 24           	inc h
257+  8CAD 7C               ld a,h
258+  8CAE E6 07            and 7
259+  8CB0 20 0A            jr nz,3F
260+  8CB2 7D               ld a,l
261+  8CB3 C6 20            add a,$20
262+  8CB5 6F               ld l,a
263+  8CB6 38 04            jr c,3F
264+  8CB8 7C               ld a,h
265+  8CB9 D6 08            sub 8
266+  8CBB 67               ld h,a
267+  8CBC 7C           3 ld a,h
268+  8CBD FE 58            cp $58
269+  8CBF 28 02            jr z,4F
270+  8CC1 10 CB            djnz 1B
271+  8CC3 ED 7B 60 85  4 ld sp,(Stack)
272+  8CC7 C9           	ret
273+  8CC8
274+  8CC8 ED 73 60 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8CCC FD F9        	ld sp,iy
276+  8CCE 06 08            ld b,8
277+  8CD0 D1           1 pop de
278+  8CD1 7B           	ld a,e
279+  8CD2 AE           	xor (hl)
280+  8CD3 77           	ld (hl),a
281+  8CD4 23           	inc hl
282+  8CD5 7A           	ld a,d
283+  8CD6 AE           	xor (hl)
284+  8CD7 77           	ld (hl),a
285+  8CD8 2B           	dec hl
286+  8CD9 24             	inc h
287+  8CDA 7C               ld a,h
288+  8CDB E6 07            and 7
289+  8CDD 20 0A            jr nz,2F
290+  8CDF 7D               ld a,l
291+  8CE0 C6 20            add a,$20
292+  8CE2 6F               ld l,a
293+  8CE3 38 04            jr c,2F
294+  8CE5 7C               ld a,h
295+  8CE6 D6 08            sub 8
296+  8CE8 67               ld h,a
297+  8CE9 7C           2 ld a,h
298+  8CEA FE 58            cp $58
299+  8CEC 28 21            jr z,4F
300+  8CEE D1               pop de
301+  8CEF 7A           	ld a,d
302+  8CF0 AE           	xor (hl)
303+  8CF1 77           	ld (hl),a
304+  8CF2 23           	inc hl
305+  8CF3 D1               pop de
306+  8CF4 7B           	ld a,e
307+  8CF5 AE           	xor (hl)
308+  8CF6 77           	ld (hl),a
309+  8CF7 2B           	dec hl
310+  8CF8 24           	inc h
311+  8CF9 7C               ld a,h
312+  8CFA E6 07            and 7
313+  8CFC 20 0A            jr nz,3F
314+  8CFE 7D               ld a,l
315+  8CFF C6 20            add a,$20
316+  8D01 6F               ld l,a
317+  8D02 38 04            jr c,3F
318+  8D04 7C               ld a,h
319+  8D05 D6 08            sub 8
320+  8D07 67               ld h,a
321+  8D08 7C           3 ld a,h
322+  8D09 FE 58            cp $58
323+  8D0B 28 02            jr z,4F
324+  8D0D 10 C1            djnz 1B
325+  8D0F ED 7B 60 85  4 ld sp,(Stack)
326+  8D13 C9           	ret
327+  8D14
328+  8D14 ED 73 60 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8D18 FD F9        	ld sp,iy
330+  8D1A 06 08            ld b,8
331+  8D1C D1           1 pop de
332+  8D1D 7B           	ld a,e
333+  8D1E AE           	xor (hl)
334+  8D1F 77           	ld (hl),a
335+  8D20 24            	inc h
336+  8D21 7C               ld a,h
337+  8D22 E6 07            and 7
338+  8D24 20 0A            jr nz,2F
339+  8D26 7D               ld a,l
340+  8D27 C6 20            add a,$20
341+  8D29 6F               ld l,a
342+  8D2A 38 04            jr c,2F
343+  8D2C 7C               ld a,h
344+  8D2D D6 08            sub 8
345+  8D2F 67               ld h,a
346+  8D30 7C           2 ld a,h
347+  8D31 FE 58            cp $58
348+  8D33 28 1C            jr z,4F
349+  8D35 D1               pop de
350+  8D36 7A           	ld a,d
351+  8D37 AE           	xor (hl)
352+  8D38 77           	ld (hl),a
353+  8D39 24           	inc h
354+  8D3A 7C               ld a,h
355+  8D3B E6 07            and 7
356+  8D3D 20 0A            jr nz,3F
357+  8D3F 7D               ld a,l
358+  8D40 C6 20            add a,$20
359+  8D42 6F               ld l,a
360+  8D43 38 04            jr c,3F
361+  8D45 7C               ld a,h
362+  8D46 D6 08            sub 8
363+  8D48 67               ld h,a
364+  8D49 7C           3 ld a,h
365+  8D4A FE 58            cp $58
366+  8D4C 28 03            jr z,4F
367+  8D4E D1               pop de
368+  8D4F 10 CB            djnz 1B
369+  8D51 ED 7B 60 85  4 ld sp,(Stack)
370+  8D55 C9           	ret
371+  8D56
372+  8D56              ; ---------------------------------------------------
373+  8D56
# file closed: Rutinas_de_impresion_sprites.asm
757   8D56              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8D56              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8D56              ;
  3+  8D56              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8D56              ;
  5+  8D56              ; *****************************************************************************************************************************************************************************************
  6+  8D56              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8D56
  8+  8D56 7C           calcula_tercio ld a,h
  9+  8D57 E6 18        	and $18
 10+  8D59 CB 2F        	sra a
 11+  8D5B CB 2F        	sra a
 12+  8D5D CB 2F        	sra a
 13+  8D5F C9           	ret
 14+  8D60
# file closed: calcula_tercio.asm
758   8D60              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D60              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D60              ;
  3+  8D60              ;
  4+  8D60              ;	CLS.
  5+  8D60              ;
  6+  8D60              ;	Limpia la pantalla y define sus atributos.
  7+  8D60              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D60              ;
  9+  8D60              ;	COLORES: 0 ..... NEGRO
 10+  8D60              ;    		 1 ..... AZUL
 11+  8D60              ; 			 2 ..... ROJO
 12+  8D60              ;			 3 ..... MAGENTA
 13+  8D60              ; 			 4 ..... VERDE
 14+  8D60              ; 			 5 ..... CIAN
 15+  8D60              ;			 6 ..... AMARILLO
 16+  8D60              ; 			 7 ..... BLANCO
 17+  8D60              ;
 18+  8D60              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D60              ;
 20+  8D60              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D60
 22+  8D60
 23+  8D60 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D63 11 01 40     	LD DE,$4001
 25+  8D66 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D69 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D6B ED B0        	LDIR
 28+  8D6D 01 FF 02     	LD BC,767
 29+  8D70 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D71 ED B0        	LDIR
 31+  8D73 C9           	ret
 32+  8D74
# file closed: Cls.asm
759   8D74              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D74              ; ******************************************************************************************************************************************************************************************
  2+  8D74              ;
  3+  8D74              ;   22/01/23
  4+  8D74              ;
  5+  8D74              ;	Mov_down
  6+  8D74              ;
  7+  8D74              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D74              ;
  9+  8D74              ;
 10+  8D74 21 4B 85     Mov_down ld hl,Ctrl_0
 11+  8D77 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D79              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D79              ; 																	; _ en el caso de que no lo haya.
 14+  8D79 3A 36 85     	ld a,(Vel_down)
 15+  8D7C 47           	ld b,a
 16+  8D7D 2A 20 85         ld hl,(Posicion_actual)
 17+  8D80 CD 56 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D83 E6 02        	and 2
 19+  8D85 28 0F        	jr z,1F
 20+  8D87
 21+  8D87              ; Nos encontramos en el último tercio de pantalla.
 22+  8D87              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D87
 24+  8D87 7C           	ld a,h
 25+  8D88 FE 57        	cp $57
 26+  8D8A 20 0A        	jr nz,1F
 27+  8D8C 7D           	ld a,l
 28+  8D8D C6 20        	add $20
 29+  8D8F 30 05        	jr nc,1F
 30+  8D91
 31+  8D91              ; ------------------------------
 32+  8D91 CD 72 90     	call Reaparece_arriba
 33+  8D94              ;	call Reinicio
 34+  8D94              ; ------------------------------
 35+  8D94 18 08        	jr 3F
 36+  8D96 CD F8 8A     1 call NextScan
 37+  8D99 22 20 85     	ld (Posicion_actual),hl
 38+  8D9C 10 E2            djnz 2B
 39+  8D9E CD 88 90     3 call Genera_coordenadas
 40+  8DA1 C9           	ret
 41+  8DA2
 42+  8DA2
 43+  8DA2              ; ******************************************************************************************************************************************************************************************
 44+  8DA2              ;
 45+  8DA2              ;   22/01/23
 46+  8DA2              ;
 47+  8DA2              ;	Mov_up
 48+  8DA2              ;
 49+  8DA2              ; 	Mueve el Sprite hacia arriba.
 50+  8DA2              ;
 51+  8DA2              ;
 52+  8DA2 21 4B 85     Mov_up ld hl,Ctrl_0
 53+  8DA5 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8DA7              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8DA7              ; 																		; _ en el caso de que no lo haya.
 56+  8DA7 3A 35 85     	ld a,(Vel_up)
 57+  8DAA 47           	ld b,a
 58+  8DAB 2A 20 85     	ld hl,(Posicion_actual)
 59+  8DAE CD 56 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8DB1 A7           	and a
 61+  8DB2 20 10        	jr nz,1F
 62+  8DB4
 63+  8DB4              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8DB4              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8DB4
 66+  8DB4 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8DB5 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8DB7 20 0B            jr nz,1F
 69+  8DB9 7D               ld a,l
 70+  8DBA D6 20            sub $20
 71+  8DBC 30 06            jr nc,1F
 72+  8DBE 25               dec h
 73+  8DBF
 74+  8DBF              ; -----------------------------
 75+  8DBF CD 62 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8DC2              ;	call Reinicio
 77+  8DC2              ; -----------------------------
 78+  8DC2
 79+  8DC2 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8DC4 CD 07 8B     1 call PreviousScan
 81+  8DC7 22 20 85     	ld (Posicion_actual),hl
 82+  8DCA 10 E2            djnz 3B
 83+  8DCC CD 88 90     2 call Genera_coordenadas
 84+  8DCF C9           	ret
 85+  8DD0
 86+  8DD0              ; ******************************************************************************************************************************************************************************************
 87+  8DD0              ;
 88+  8DD0              ;	19/10/22
 89+  8DD0              ;
 90+  8DD0              ;	Mov_right.
 91+  8DD0              ;
 92+  8DD0              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8DD0              ;
 94+  8DD0
 95+  8DD0 21 4B 85     Mov_right ld hl,Ctrl_0
 96+  8DD3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8DD5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8DD5              ; 																	; _ en el caso de que no lo haya.
 99+  8DD5 3A 4B 85     	ld a,(Ctrl_0)
100+  8DD8 CB 77        	bit 6,a
101+  8DDA 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8DDC
103+  8DDC CD 10 90     	call Stop_Amadeus_right
104+  8DDF C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8DE0 18 4D        	jr 8F
106+  8DE2
107+  8DE2 3A 24 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8DE5 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8DE7 20 46        	jr nz,8F
110+  8DE9
111+  8DE9 3A 26 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8DEC A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8DED 28 40        	jr z,8F
114+  8DEF
115+  8DEF              ; ---------- ---------- ----------
116+  8DEF              ;
117+  8DEF              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8DEF
119+  8DEF 3A 34 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8DF2 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8DF4 28 11        	jr z,1F
122+  8DF6 38 06        	jr c,6F
123+  8DF8 FE 04        	cp 4
124+  8DFA 28 14        	jr z,7F
125+  8DFC 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8DFE
127+  8DFE              ; ---------- ---------- ----------
128+  8DFE              ;
129+  8DFE              ; Perfiles de velocidad
130+  8DFE              ;
131+  8DFE
132+  8DFE 3A 26 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8E01 FE FE        	cp $fe
134+  8E03 20 2A        	jr nz,8F
135+  8E05 18 10        	jr 3F
136+  8E07 3A 26 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8E0A FE FD        	cp $fd
138+  8E0C 20 21        	jr nz,8F
139+  8E0E 18 07        	jr 3F
140+  8E10 3A 26 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8E13 FE FB        	cp $fb
142+  8E15 20 18        	jr nz,8F
143+  8E17
144+  8E17              ; ---------- ---------- ----------
145+  8E17
146+  8E17              3
147+  8E17 CD 50 90     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8E1A              ;	call Reinicio
149+  8E1A
150+  8E1A              ; ---------- ---------- ----------
151+  8E1A              ;
152+  8E1A              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8E1A
154+  8E1A 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8E1C C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8E1D CD 36 8E     	call DESPLZ_DER
157+  8E20 C1           	pop bc
158+  8E21 10 F9        	djnz 5B
159+  8E23 2A 20 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8E26 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8E27 22 20 85     	ld (Posicion_actual),hl
162+  8E2A CD 88 90     	call Genera_coordenadas
163+  8E2D 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8E2F
165+  8E2F              ; ---------- ---------- ----------
166+  8E2F
167+  8E2F 2A 20 85     8 ld hl,(Posicion_actual)
168+  8E32 CD 36 8E     	call DESPLZ_DER
169+  8E35 C9           2 ret
170+  8E36
171+  8E36              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8E36              ;
173+  8E36              ;	22/9/22
174+  8E36              ;
175+  8E36
176+  8E36 CD 45 8E     DESPLZ_DER call Desplaza_derecha
177+  8E39 CD 91 8E         call modifica_parametros_1er_DESPLZ_2
178+  8E3C CD BA 8E         call Ciclo_completo
179+  8E3F 21 4B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8E42 CB FE        	set 7,(hl)
181+  8E44 C9           	ret
182+  8E45
183+  8E45              ; ******************************************************************************************************************************************************************************************
184+  8E45              ;	15/02/23
185+  8E45              ;
186+  8E45
187+  8E45 3A 34 85     Desplaza_derecha ld a,(Vel_right)
188+  8E48 47           	ld b,a
189+  8E49 2A 2C 85     	ld hl,(Puntero_DESPLZ_der)
190+  8E4C 23           1 inc hl
191+  8E4D 23           	inc hl
192+  8E4E 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8E50 22 2C 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8E53 CD CF 86     	call Extrae_address
195+  8E56 22 22 85     	ld (Puntero_objeto),hl
196+  8E59
197+  8E59              ; Modifica (Puntero_DESPLZ_izq).
198+  8E59
199+  8E59              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8E59              ; Cuántos movimientos hemos hecho ??
201+  8E59              ; DE contiene (Puntero_DESPLZ_der).
202+  8E59
203+  8E59 2A 28 85     7 ld hl,(Indice_Sprite_der)
204+  8E5C EB           	ex de,hl
205+  8E5D A7           	and a
206+  8E5E ED 52        	sbc hl,de
207+  8E60 CB 3D        	srl l
208+  8E62 3E 08        6 ld a,8
209+  8E64 95           	sub l
210+  8E65 30 1E        	jr nc,3F
211+  8E67
212+  8E67              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8E67              ; B="0".
214+  8E67
215+  8E67 04           4 inc b
216+  8E68 3C           	inc a
217+  8E69 20 FC        	jr nz,4B
218+  8E6B 78           	ld a,b
219+  8E6C 08           	ex af,af
220+  8E6D 2A 28 85     	ld hl,(Indice_Sprite_der)
221+  8E70 23           5 inc hl
222+  8E71 23           	inc hl
223+  8E72 10 FC        	djnz 5B
224+  8E74 22 2C 85     	ld (Puntero_DESPLZ_der),hl
225+  8E77 CD CF 86     	call Extrae_address
226+  8E7A 22 22 85     	ld (Puntero_objeto),hl
227+  8E7D
228+  8E7D              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8E7D              ; _(Posicion_actual).
230+  8E7D
231+  8E7D 21 20 85     	ld hl,Posicion_actual
232+  8E80 34           	inc (hl)
233+  8E81 08               ex af,af
234+  8E82 6F           	ld l,a
235+  8E83 18 DD        	jr 6B
236+  8E85
237+  8E85              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8E85
239+  8E85 47           3 ld b,a
240+  8E86 2A 2A 85     	ld hl,(Indice_Sprite_izq)
241+  8E89 23           2 inc hl
242+  8E8A 23           	inc hl
243+  8E8B 10 FC        	djnz 2B
244+  8E8D 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
245+  8E90 C9           8 ret
246+  8E91
247+  8E91              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8E91              ;
249+  8E91              ;	24/7/22
250+  8E91              ;
251+  8E91              ;	modifica_parametros_1er_DESPLZ_2
252+  8E91              ;
253+  8E91              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8E91              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8E91              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8E91
257+  8E91 3A 26 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8E94 A7           	and a
259+  8E95 20 1F        	jr nz,1F
260+  8E97 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8E99 32 26 85         ld (CTRL_DESPLZ),a
262+  8E9C
263+  8E9C 21 1F 85     	ld hl,Columns
264+  8E9F 34           	inc (hl)
265+  8EA0 3A 32 85     	ld a,(Cuad_objeto)
266+  8EA3 E6 01        	and 1
267+  8EA5 28 0F        	jr z,1F
268+  8EA7 2A 20 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8EAA 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8EAB 22 20 85     	ld (Posicion_actual),hl
271+  8EAE CD 88 90     	call Genera_coordenadas
272+  8EB1 CD 1C 90     	call Inc_CTRL_DESPLZ
273+  8EB4 18 03        	jr 2F
274+  8EB6 CD 1C 90     1 call Inc_CTRL_DESPLZ
275+  8EB9 C9           2 ret
276+  8EBA
277+  8EBA              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8EBA              ;
279+  8EBA              ;	24/7/22
280+  8EBA              ;
281+  8EBA              ;	Ciclo_completo.
282+  8EBA              ;
283+  8EBA              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8EBA              ;
285+  8EBA              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8EBA              ; 	Decrementamos (Columns).
287+  8EBA              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8EBA              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8EBA
290+  8EBA
291+  8EBA 3A 26 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8EBD FE FF        	cp $ff
293+  8EBF 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8EC1 E6 F0        	and $f0
295+  8EC3 20 28        	jr nz,3F
296+  8EC5
297+  8EC5              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8EC5
299+  8EC5 3A 26 85     	ld a,(CTRL_DESPLZ)
300+  8EC8 47           	ld b,a
301+  8EC9 3E F8        	ld a,$f8
302+  8ECB 80           	add b
303+  8ECC 32 26 85     	ld (CTRL_DESPLZ),a
304+  8ECF 18 1C        	jr 3F
305+  8ED1 21 1F 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8ED4 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8ED5 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8ED6 32 26 85     	ld (CTRL_DESPLZ),a
309+  8ED9 3A 32 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8EDC E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8EDE 20 0A        	jr nz,2F
312+  8EE0 2A 20 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8EE3 23           	inc hl
314+  8EE4 22 20 85     	ld (Posicion_actual),hl
315+  8EE7 CD 88 90     	call Genera_coordenadas
316+  8EEA
317+  8EEA              ; Inicia el puntero de Sprite.
318+  8EEA
319+  8EEA CD E6 86     2 call Inicia_puntero_objeto_der
320+  8EED C9           3 ret
321+  8EEE
322+  8EEE              ; ******************************************************************************************************************************************************************************************
323+  8EEE              ;
324+  8EEE              ;	15/02/23
325+  8EEE              ;
326+  8EEE              ;	Mov_left.
327+  8EEE              ;
328+  8EEE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8EEE              ;
330+  8EEE              Mov_left
331+  8EEE
332+  8EEE 21 4B 85     	ld hl,Ctrl_0
333+  8EF1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8EF3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8EF3              ; 																	; _ en el caso de que no lo haya.
336+  8EF3 3A 4B 85     	ld a,(Ctrl_0)
337+  8EF6 CB 77        	bit 6,a
338+  8EF8 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8EFA
340+  8EFA CD 16 90     	call Stop_Amadeus_left
341+  8EFD C8           	ret z
342+  8EFE 20 50        	jr nz,8F
343+  8F00
344+  8F00 3A 24 85     11 ld a,(Coordenada_X)
345+  8F03 A7           	and a
346+  8F04 20 4A        	jr nz,8F
347+  8F06
348+  8F06 3A 26 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8F09 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8F0A 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8F0C
352+  8F0C              ; ---------- ---------- ----------
353+  8F0C
354+  8F0C 3A 33 85     	ld a,(Vel_left)
355+  8F0F FE 02        	cp 2
356+  8F11 28 0F        	jr z,1F
357+  8F13 38 04        	jr c,6F
358+  8F15 FE 04        	cp 4
359+  8F17 28 12        	jr z,7F
360+  8F19
361+  8F19              ; ---------- ---------- ----------
362+  8F19
363+  8F19 3A 26 85     6 ld a,(CTRL_DESPLZ)
364+  8F1C FE F9        	cp $f9
365+  8F1E 20 30        	jr nz,8F
366+  8F20 18 10        	jr 4F
367+  8F22 3A 26 85     1 ld a,(CTRL_DESPLZ)
368+  8F25 FE FA        	cp $fa
369+  8F27 20 27        	jr nz,8F
370+  8F29 18 07        	jr 4F
371+  8F2B 3A 26 85     7 ld a,(CTRL_DESPLZ)
372+  8F2E FE FC        	cp $fc
373+  8F30 20 1E        	jr nz,8F
374+  8F32
375+  8F32              ; ---------- ---------- ----------
376+  8F32
377+  8F32              4
378+  8F32 CD 3E 90     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8F35              ;	call Reinicio
380+  8F35
381+  8F35              ; ---------- ---------- ----------
382+  8F35
383+  8F35 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  8F37 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  8F38
386+  8F38 2A 2A 85     	ld hl,(Indice_Sprite_izq)
387+  8F3B 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
388+  8F3E
389+  8F3E CD 57 8F     	call DESPLZ_IZQ
390+  8F41 C1           	pop bc
391+  8F42 10 F3        	djnz 5B
392+  8F44 2A 20 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  8F47 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  8F48 22 20 85     	ld (Posicion_actual),hl
395+  8F4B CD 88 90     	call Genera_coordenadas
396+  8F4E 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  8F50
398+  8F50              ; ---------- ---------- ----------
399+  8F50              ; Movemos, no hay recolocación.
400+  8F50
401+  8F50 2A 20 85     8 ld hl,(Posicion_actual)
402+  8F53 CD 57 8F     	call DESPLZ_IZQ
403+  8F56 C9           2 ret
404+  8F57
405+  8F57              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  8F57              ;
407+  8F57              ;	22/9/22
408+  8F57
409+  8F57              DESPLZ_IZQ
410+  8F57
411+  8F57 CD 66 8F     	call Desplaza_izquierda
412+  8F5A CD B2 8F         call modifica_parametros_1er_DESPLZ
413+  8F5D CD DA 8F     	call Ciclo_completo_2
414+  8F60 21 4B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  8F63 CB BE        	res 7,(hl)
416+  8F65 C9           	ret
417+  8F66
418+  8F66              Desplaza_izquierda
419+  8F66
420+  8F66 3A 33 85     	ld a,(Vel_left)
421+  8F69 47           	ld b,a
422+  8F6A 2A 2E 85     	ld hl,(Puntero_DESPLZ_izq)
423+  8F6D 23           1 inc hl
424+  8F6E 23           	inc hl
425+  8F6F 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  8F71 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
427+  8F74 CD CF 86     	call Extrae_address
428+  8F77 22 22 85     	ld (Puntero_objeto),hl
429+  8F7A
430+  8F7A              ; Modifica (Puntero_DESPLZ_der).
431+  8F7A
432+  8F7A              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  8F7A              ; Cuántos movimientos hemos hecho ??
434+  8F7A              ; DE contiene (Puntero_DESPLZ_izq).
435+  8F7A
436+  8F7A 2A 2A 85     7 ld hl,(Indice_Sprite_izq)
437+  8F7D EB           	ex de,hl
438+  8F7E A7           	and a
439+  8F7F ED 52        	sbc hl,de
440+  8F81 CB 3D        	srl l
441+  8F83 3E 08        6 ld a,8
442+  8F85 95           	sub l
443+  8F86 30 1E        	jr nc,3F
444+  8F88
445+  8F88              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  8F88              ; B="0".
447+  8F88
448+  8F88 04           4 inc b
449+  8F89 3C           	inc a
450+  8F8A 20 FC        	jr nz,4B
451+  8F8C 78           	ld a,b
452+  8F8D 08           	ex af,af
453+  8F8E 2A 2A 85     	ld hl,(Indice_Sprite_izq)
454+  8F91 23           5 inc hl
455+  8F92 23           	inc hl
456+  8F93 10 FC        	djnz 5B
457+  8F95 22 2E 85     	ld (Puntero_DESPLZ_izq),hl
458+  8F98 CD CF 86     	call Extrae_address
459+  8F9B 22 22 85     	ld (Puntero_objeto),hl
460+  8F9E
461+  8F9E              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  8F9E              ; _(Posicion_actual).
463+  8F9E
464+  8F9E 21 20 85     	ld hl,Posicion_actual
465+  8FA1 35           	dec (hl)
466+  8FA2 08           	ex af,af
467+  8FA3 6F           	ld l,a
468+  8FA4 18 DD        	jr 6B
469+  8FA6
470+  8FA6              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  8FA6
472+  8FA6 47           3 ld b,a
473+  8FA7 2A 28 85     	ld hl,(Indice_Sprite_der)
474+  8FAA 23           2 inc hl
475+  8FAB 23           	inc hl
476+  8FAC 10 FC        	djnz 2B
477+  8FAE 22 2C 85     	ld (Puntero_DESPLZ_der),hl
478+  8FB1 C9           8 ret
479+  8FB2
480+  8FB2              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  8FB2              ;
482+  8FB2              ;	modifica_parametros_1er_DESPLZ
483+  8FB2              ;
484+  8FB2              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  8FB2              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  8FB2              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  8FB2
488+  8FB2 3A 26 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  8FB5 A7           	and a
490+  8FB6 20 1E        	jr nz,1F
491+  8FB8 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  8FB9 32 26 85         ld (CTRL_DESPLZ),a
493+  8FBC 21 1F 85     	ld hl,Columns
494+  8FBF 34           	inc (hl)
495+  8FC0 3A 32 85     	ld a,(Cuad_objeto)
496+  8FC3 E6 01        	and 1
497+  8FC5 20 0F        	jr nz,1F
498+  8FC7 2A 20 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  8FCA 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  8FCB 22 20 85     	ld (Posicion_actual),hl
501+  8FCE CD 88 90     	call Genera_coordenadas
502+  8FD1 CD 2D 90     	call Dec_CTRL_DESPLZ
503+  8FD4 18 03        	jr 2F
504+  8FD6 CD 2D 90     1 call Dec_CTRL_DESPLZ
505+  8FD9 C9           2 ret
506+  8FDA
507+  8FDA              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  8FDA
509+  8FDA 3A 26 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  8FDD FE F7        	cp $f7
511+  8FDF 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  8FE1 30 2C        	jr nc,3F
513+  8FE3
514+  8FE3              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  8FE3
516+  8FE3 06 00        	ld b,0
517+  8FE5 04           4 inc b
518+  8FE6 3C           	inc a
519+  8FE7 FE F7        	cp $f7
520+  8FE9 20 FA        	jr nz,4B
521+  8FEB 3E FF        	ld a,$ff
522+  8FED 90           	sub b
523+  8FEE 32 26 85     	ld (CTRL_DESPLZ),a
524+  8FF1 18 1C        	jr 3F
525+  8FF3
526+  8FF3              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  8FF3
528+  8FF3 21 1F 85     1 ld hl,Columns
529+  8FF6 35           	dec (hl)
530+  8FF7 AF           	xor a
531+  8FF8 32 26 85     	ld (CTRL_DESPLZ),a
532+  8FFB 3A 32 85     	ld a,(Cuad_objeto)
533+  8FFE E6 01        	and 1
534+  9000 28 0A        	jr z,2F
535+  9002 2A 20 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  9005 2B           	dec hl
537+  9006 22 20 85     	ld (Posicion_actual),hl
538+  9009 CD 88 90     	call Genera_coordenadas
539+  900C
540+  900C              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  900C
542+  900C CD F9 86     2 call Inicia_puntero_objeto_izq
543+  900F C9           3 ret
544+  9010
545+  9010              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9010              ;
547+  9010              ;	19/10/22
548+  9010              ;
549+  9010              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9010              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9010
552+  9010 3A 24 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  9013 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  9015 C9           	ret
555+  9016
556+  9016              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  9016              ;
558+  9016              ;	19/10/22
559+  9016              ;
560+  9016              ;	(cp 2) para un Amadeus de 3 Columns.
561+  9016              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  9016
563+  9016 3A 24 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  9019 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  901B C9           	ret
566+  901C
567+  901C              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  901C              ;
569+  901C              ;	24/7/22
570+  901C              ;
571+  901C              ;	Inc_CTRL_DESPLZ
572+  901C              ;
573+  901C              ;
574+  901C              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  901C
576+  901C 21 26 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  901F 3A 34 85     	ld a,(Vel_right)
578+  9022 A7           	and a
579+  9023 28 06        	jr z,1F
580+  9025 47           	ld b,a
581+  9026 34           3 inc (hl)
582+  9027 10 FD        	djnz 3B
583+  9029 18 01        	jr 2F
584+  902B 34           1 inc (hl)
585+  902C C9           2 ret
586+  902D
587+  902D              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  902D              ;
589+  902D              ;	5/2/23
590+  902D              ;
591+  902D              ;	Dec_CTRL_DESPLZ
592+  902D              ;
593+  902D              ;
594+  902D              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  902D
596+  902D 21 26 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9030 3A 33 85     	ld a,(Vel_left)
598+  9033 A7           	and a
599+  9034 28 06        	jr z,1F
600+  9036 47           	ld b,a
601+  9037 35           3 dec (hl)
602+  9038 10 FD        	djnz 3B
603+  903A 18 01        	jr 2F
604+  903C 35           1 dec (hl)
605+  903D C9           2 ret
606+  903E
607+  903E              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  903E
609+  903E 2A 20 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9041 01 1F 00     	ld bc,31
611+  9044 A7           	and a
612+  9045 ED 4A        	adc hl,bc
613+  9047 22 20 85     	ld (Posicion_actual),hl
614+  904A 21 4B 85     	ld hl,Ctrl_0														; $xxx1
615+  904D CB C6        	set 0,(hl)
616+  904F C9           	ret
617+  9050
618+  9050              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9050
620+  9050 2A 20 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9053 01 1F 00     	ld bc,31
622+  9056 A7           	and a
623+  9057 ED 42        	sbc hl,bc
624+  9059 22 20 85     	ld (Posicion_actual),hl 											; $xx1x
625+  905C 21 4B 85     	ld hl,Ctrl_0
626+  905F CB CE        	set 1,(hl)
627+  9061 C9           	ret
628+  9062
629+  9062              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  9062
631+  9062 24           Reaparece_abajo inc h
632+  9063 01 E0 17     	ld bc,$17e0
633+  9066 A7           	and a
634+  9067 ED 4A        	adc hl,bc
635+  9069 22 20 85     	ld (Posicion_actual),hl
636+  906C 21 4B 85     	ld hl,Ctrl_0
637+  906F CB D6        	set 2,(hl)
638+  9071 C9           	ret
639+  9072
640+  9072              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  9072
642+  9072 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  9075 A7           	and a
644+  9076 ED 42        	sbc hl,bc
645+  9078 22 20 85     	ld (Posicion_actual),hl
646+  907B 21 4B 85     	ld hl,Ctrl_0
647+  907E CB DE        	set 3,(hl)
648+  9080 C9           	ret
649+  9081
650+  9081              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9081
652+  9081 2A 30 85     Reinicio ld hl,(Posicion_inicio)
653+  9084 22 20 85     	ld (Posicion_actual),hl
654+  9087 C9           	ret
# file closed: Direcciones.asm
760   9088              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  9088              ;	12/12/22
  2+  9088              ;
  3+  9088              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  9088              ;	Fila superior "0", Columna izquierda "0".
  5+  9088              ;
  6+  9088              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  9088              ;
  8+  9088              ;	Modifica: A
  9+  9088
 10+  9088 C5           Genera_coordenadas push bc
 11+  9089 E5           	push hl
 12+  908A 2A 20 85     	ld hl,(Posicion_actual)
 13+  908D 7D           	ld a,l
 14+  908E E6 1F        	and $1f
 15+  9090 32 24 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9093 CD 56 8D     	call calcula_tercio
 17+  9096 47           	ld b,a
 18+  9097 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9098 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  909A 7D           	ld a,l
 21+  909B E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  909D 28 05        	jr z,2F
 23+  909F 0C           1 inc c
 24+  90A0 D6 20        	sub 32
 25+  90A2 20 FB        	jr nz,1B
 26+  90A4 0C           2 inc c
 27+  90A5 04           	inc b
 28+  90A6 05           	dec b
 29+  90A7 28 04        	jr z,3F
 30+  90A9 3E E0        	ld a,$e0
 31+  90AB 10 F2        	djnz 1B
 32+  90AD 79           3 ld a,c
 33+  90AE 3D           	dec a
 34+  90AF 32 25 85     	ld (Coordenada_y),a
 35+  90B2 E1           	pop hl
 36+  90B3 C1           	pop bc
 37+  90B4 C9           	ret
# file closed: Genera_coordenadas.asm
761   90B5              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  90B5
  2+  90B5
  3+  90B5              ;   11/8/22
  4+  90B5              ;
  5+  90B5              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  90B5              ;
  7+  90B5              ;   Mov_obj.asm
  8+  90B5              ;
  9+  90B5              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  90B5              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  90B5              ;
 12+  90B5              ;   Codificación:
 13+  90B5              ;
 14+  90B5              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  90B5
 16+  90B5              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  90B5
 18+  90B5 02 40 00     Arriba db 2,%01000000,0
 19+  90B8 02 80 00     Abajo db 2,%10000000,0
 20+  90BB 02 20 00     Derecha db 2,%00100000,0
 21+  90BE 02 10 00     Izquierda db 2,%00010000,0
 22+  90C1 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  90C5 60 42 60 40
 22+  90C9 63
 23+  90CA 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  90CE 22 A3 80 A0
 24+  90D2 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  90D6 84 A0 83 A0
 25+  90DA 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  90DE 80 A3 22 A0
 26+  90E2 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  90E6 40 60 42 60
 27+  90EA 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  90EE 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  90F2 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  90F6 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  90FA 84
 31+  90FB 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  90FF 84 00
 32+  9101 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  9105 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  9109 1F 1F 1F 1F
 34+  910D 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9111 1F 1F 1F 1F
 34+  9115 1F
 35+  9116 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  911A 2F 2F 2F 2F
 35+  911E 2F 2F
 36+  9120 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  9124 2F 2F 00
 37+  9127
 38+  9127
 39+  9127              ; ----- ----- ----- ----- -----
 40+  9127
 41+  9127 05 91        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  9129 01 91        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  912B BE 90        Indice_mov_Izquierda defw Izquierda
 44+  912D BB 90        Indice_mov_Derecha defw Derecha
 45+  912F B8 90        Indice_mov_Abajo defw Abajo
 46+  9131 B5 90        Indice_mov_Arriba defw Arriba
 47+  9133 F2 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  9135 F6 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  9137 EE 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  9139 FB 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  913B C1 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  913D              ; ----- ----- ----- ----- -----
 53+  913D
 54+  913D 3A 51 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9140 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9141 28 02            jr z,1F
 57+  9143 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  9145 3A 52 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  9148 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  914A 32 52 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  914D              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  914D 2A 4F 85         ld hl,(Puntero_mov)
 63+  9150 7E               ld a,(hl)
 64+  9151 32 51 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  9154 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  9155 22 4F 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  9158
 68+  9158 3A 53 85     Decoder ld a,(Repetimos_db)
 69+  915B A7               and a
 70+  915C 20 0C            jr nz,12F
 71+  915E 2A 4F 85         ld hl,(Puntero_mov)
 72+  9161 7E               ld a,(hl)
 73+  9162 A7               and a
 74+  9163 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  9165 E6 0F            and $0f
 76+  9167 32 53 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  916A              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  916A 2A 4F 85     12 ld hl,(Puntero_mov)
 79+  916D CB 7E            bit 7,(hl)
 80+  916F 28 03            jr z,2F
 81+  9171 CD 74 8D         call Mov_down
 82+  9174 2A 4F 85     2 ld hl, (Puntero_mov)
 83+  9177 CB 76            bit 6,(hl)
 84+  9179 28 03            jr z,3F
 85+  917B CD A2 8D         call Mov_up
 86+  917E 2A 4F 85     3 ld hl, (Puntero_mov)
 87+  9181 CB 6E            bit 5,(hl)
 88+  9183 28 03            jr z,4F
 89+  9185 CD D0 8D         call Mov_right
 90+  9188 2A 4F 85     4 ld hl, (Puntero_mov)
 91+  918B CB 66            bit 4,(hl)
 92+  918D 28 03            jr z,5F
 93+  918F CD EE 8E         call Mov_left
 94+  9192
 95+  9192              ; ---------- --------- --------- ---------- ----------
 96+  9192
 97+  9192 3A 53 85     5 ld a,(Repetimos_db)
 98+  9195 A7               and a
 99+  9196 28 07            jr z,6F
100+  9198 3D               dec a
101+  9199 32 53 85         ld (Repetimos_db),a
102+  919C 28 01            jr z,6f
103+  919E C9           11 ret
104+  919F 21 51 85     6 ld hl,Contador_db_mov
105+  91A2 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  91A3 2A 4F 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  91A6 23               inc hl
108+  91A7 22 4F 85         ld (Puntero_mov),hl
109+  91AA 18 F2            jr 11B
110+  91AC 2A 4D 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  91AF 3A 52 85         ld a,(Incrementa_puntero)
112+  91B2 47               ld b,a
113+  91B3 23           8 inc hl
114+  91B4 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  91B6 5E               ld e,(hl)
116+  91B7 23               inc hl
117+  91B8 56               ld d,(hl)
118+  91B9 EB               ex de,hl
119+  91BA 22 4F 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  91BD 18 DF            jr 11B
121+  91BF
122+  91BF              ; ---------- --------- --------- ---------- ----------
123+  91BF              ;
124+  91BF              ;   11/8/22
125+  91BF              ;
126+  91BF              ;   Prepara_Puntero_mov
127+  91BF
128+  91BF E5           Prepara_Puntero_mov push hl
129+  91C0 D5               push de
130+  91C1 2A 4D 85         ld hl,(Puntero_indice_mov)
131+  91C4 5E               ld e,(hl)
132+  91C5 23               inc hl
133+  91C6 56               ld d,(hl)
134+  91C7 EB               ex de,hl
135+  91C8 22 4F 85         ld (Puntero_mov),hl
136+  91CB D1               pop de
137+  91CC E1               pop hl
138+  91CD C9               ret
139+  91CE
140+  91CE              ; ---------- --------- --------- ---------- ----------
141+  91CE              ;
142+  91CE              ;   11/8/22
143+  91CE              ;
144+  91CE              ;   Reinicia_el_movimiento
145+  91CE
146+  91CE CD BF 91     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  91D1 AF               xor a
148+  91D2 32 51 85         ld (Contador_db_mov),a
149+  91D5 32 52 85         ld (Incrementa_puntero),a
150+  91D8
151+  91D8              ;    jr $
152+  91D8
153+  91D8 C3 3D 91         jp Movimiento
154+  91DB C9               ret
155+  91DC              ; ---------- --------- --------- ---------- ----------
156+  91DC
157+  91DC
158+  91DC
159+  91DC
160+  91DC
161+  91DC
162+  91DC
163+  91DC
164+  91DC
165+  91DC
166+  91DC
167+  91DC
168+  91DC
169+  91DC
170+  91DC
171+  91DC
172+  91DC
173+  91DC
# file closed: Patrones_de_mov.asm
762   91DC              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  91DC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  91DC              ;
  3+  91DC              ;	3/1/23
  4+  91DC              ;
  5+  91DC              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  91DC
  7+  91DC              ;	ADC HL,SP	LD (addr),SP
  8+  91DC              ;	ADD HL,SP	LD SP,(addr)
  9+  91DC              ;	ADD IX,SP	LD SP,nn
 10+  91DC              ; 	ADD IY,SP	LD SP,HL
 11+  91DC              ;				LD SP,IX
 12+  91DC              ;	DEC SP		LD SP,IY
 13+  91DC
 14+  91DC              ;	EX (SP),HL
 15+  91DC              ;	EX (SP),IX
 16+  91DC              ;	EX (SP),IY
 17+  91DC
 18+  91DC              ;	INC SP
 19+  91DC
 20+  91DC
 21+  91DC                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 60 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 64 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 64 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 60 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
763   7FC0
764   7FC0              	SAVESNA "Pruebas.sna", START
765   7FC0
766   7FC0
767   7FC0
# file closed: Banco_de_pruebas.asm
