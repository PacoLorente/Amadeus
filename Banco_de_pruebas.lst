# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 52 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 F4 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 F6 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B F8 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF FA 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE A1 47        Posicion_inicio defw $47a1								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 00           Cuad_objeto db 0			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 F4 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 47 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 8B 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargado a Amadeus en el engine.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD FE 85     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 2D 86      	call Inicia_Puntero_objeto
210   853A CD E2 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 4A 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD FE 85     	call Inicia_punteros_de_entidades
219   8549 CD 79 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552              ; -----------------------------------------------------------------------------------
225   8552
226   8552              Frame
227   8552
228   8552              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
229   8552              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
230   8552
231   8552 3E 07            ld a,7
232   8554 D3 FE            out ($fe),a
233   8556
234   8556 CD E8 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
235   8559
236   8559 3E 01            ld a,1
237   855B D3 FE            out ($fe),a
238   855D
239   855D              ; ----------------------------------------------------------------------
240   855D
241   855D 21 00 70     	ld hl,Album_de_fotos
242   8560 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
243   8563              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
244   8563 3A 0E 85         ld a,(Numero_de_entidades)
245   8566 47               ld b,a
246   8567
247   8567 C5           2 push bc
248   8568
249   8568 CD 8B 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
250   856B
251   856B 3A F5 84      	ld a,(Ctrl_0)
252   856E CB 67        	bit 4,a
253   8570 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
254   8572
255   8572              ; ---------
256   8572
257   8572 CD BF 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
258   8575
259   8575 21 F5 84     	ld hl,Ctrl_0
260   8578 CB A6            res 4,(hl)
261   857A
262   857A CD 4A 86     1 call Store_Restore_entidades
263   857D
264   857D C1           	pop bc
265   857E 10 E7        	djnz 2B
266   8580
267   8580 CD FE 85     	call Inicia_punteros_de_entidades
268   8583 CD 79 86     	call Restore_Primera_entidad
269   8586
270   8586 3E 00        	ld a,0
271   8588 D3 FE        	out ($fe),a
272   858A
273   858A C9           	ret
274   858B
275   858B              ; --------------------------------------------------------------------------------------------------------------
276   858B              ;
277   858B              Mov_obj
278   858B
279   858B              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
280   858B
281   858B              ; 	call Prepara_caja_de_borrado  						; LDIR (Caja_de_DESPLZ) a (Caja_de_BORRADO).
282   858B CD CF 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW.
283   858E
284   858E 3E 01        	ld a,1 				 								; (Obj_dibujado)="1". El objeto está impreso en pantalla.
285   8590 32 F6 84     	ld (Obj_dibujado),a
286   8593
287   8593              ; Movemos Amadeus o enemigos...
288   8593
289   8593 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   8596 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   8598 C4 9F 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   859B
293   859B 3A F5 84     	ld a,(Ctrl_0)
294   859E CB 77        	bit 6,a
295   85A0 CC FC 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A3
297   85A3 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85A6 CB 67        	bit 4,a
299   85A8 C8           	ret z
300   85A9
301   85A9              ; ---------
302   85A9
303   85A9 CD CF 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
304   85AC CD E6 85         call Repone_borrar
305   85AF              ;	call Draw											; Preparamos las variables para borrar.
306   85AF
307   85AF CD BE 89     	call Prepara_draw
308   85B2 CD F8 88     	call calcula_CColumnass
309   85B5 CD 2F 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
310   85B8 CD 84 89     	call Define_rutina_de_impresion
311   85BB CD A0 7F     	call Guarda_foto_registros
312   85BE
313   85BE C9           	ret
314   85BF
315   85BF              ; --------------------------------------------------------------------------------------------------------------
316   85BF              ;
317   85BF AF           Borra_Pinta_obj xor a
318   85C0 32 F6 84     	ld (Obj_dibujado),a 								; (Obj_dibujado)="0". El objeto está borrado. En este caso, (Mod_puntero_datas) sitúa (Puntero_datas) en_
319   85C3 CD F2 85     	call Repone_pintar
320   85C6              ;	call Mod_puntero_datas 								; Al jugar con 2 estados, PINTADO/BORRADO, e ir alternando ambos, llamaremos a [Mod_puntero_datas] antes de PINTAR/BORRAR el objeto.
321   85C6
322   85C6              ;	jr $
323   85C6
324   85C6 CD E2 86     	call Draw
325   85C9
326   85C9 18 FE        	jr $
327   85CB
328   85CB CD A0 7F     	call Guarda_foto_registros
329   85CE C9           	ret
330   85CF
331   85CF              ; --------------------------------------------------------------------------------------------------------------
332   85CF
333   85CF 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
334   85D2 3A F6 84     	ld a,(Obj_dibujado)
335   85D5 A7           	and a
336   85D6 28 05        	jr z,1F
337   85D8 11 EE 84     	ld de,Variables_de_pintado
338   85DB 18 03        	jr 2F
339   85DD 11 E7 84     1 ld de,Variables_de_borrado
340   85E0 01 07 00     2 ld bc,7
341   85E3 ED B0        	ldir
342   85E5 C9           	ret
343   85E6
344   85E6 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
345   85E9 11 D2 84     	ld de,Filas
346   85EC 01 07 00     	ld bc,7
347   85EF ED B0        	ldir
348   85F1 C9           	ret
349   85F2
350   85F2 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
351   85F5 11 D2 84     	ld de,Filas
352   85F8 01 07 00     	ld bc,7
353   85FB ED B0        	ldir
354   85FD C9           	ret
355   85FE
356   85FE              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
357   85FE              ;	ld (Caja_de_BORRADO),hl
358   85FE              ;	ret
359   85FE
360   85FE              ; *************************************************************************************************************************************************************
361   85FE              ;
362   85FE              ; 8/1/23
363   85FE              ;
364   85FE              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
365   85FE              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
366   85FE              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
367   85FE
368   85FE              ; Destruye HL y DE !!!!!
369   85FE
370   85FE 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
371   8601 CD 27 86         call Extrae_address
372   8604 22 08 85         ld (Puntero_store_entidades),hl
373   8607 21 C2 83     	ld hl,Indice_de_entidades+2
374   860A 22 0C 85     	ld (Indice_restore),hl
375   860D CD 27 86     	call Extrae_address
376   8610 22 0A 85     	ld (Puntero_restore_entidades),hl
377   8613 C9               ret
378   8614
379   8614              ; -------------------------------------------------------------------------------------------------------------
380   8614              ;
381   8614              ; 7/1/23
382   8614              ;
383   8614
384   8614 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
385   8617 AF           	xor a
386   8618 67           	ld h,a
387   8619 7D           	ld a,l
388   861A D6 06        1 sub 6
389   861C 28 03        	jr z,2F
390   861E 24           	inc h
391   861F 18 F9        	jr 1B
392   8621 24           2 inc h
393   8622 7C           	ld a,h
394   8623 32 0F 85     	ld (Numero_de_malotes),a
395   8626 C9           	ret
396   8627
397   8627              ; *************************************************************************************************************************************************************
398   8627              ;
399   8627              ; 20/10/22
400   8627              ;
401   8627              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
402   8627              ;
403   8627              ; Destruye el puntero y DE !!!!!
404   8627
405   8627 5E           Extrae_address ld e,(hl)
406   8628 23           	inc hl
407   8629 56           	ld d,(hl)
408   862A 2B           	dec hl
409   862B EB           	ex de,hl
410   862C C9           	ret
411   862D
412   862D              ; *************************************************************************************************************************************************************
413   862D              ;
414   862D              ;	21/9/22
415   862D              ;
416   862D              ;   Destruye HL y BC !!!!!,
417   862D
418   862D 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
419   8630 22 DC 84     	ld (Puntero_DESPLZ),hl
420   8633 CD 27 86     	call Extrae_address
421   8636 22 D6 84     	ld (Puntero_objeto),hl
422   8639
423   8639              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
424   8639
425   8639 21 10 83     	ld hl,Amadeus
426   863C ED 4B D6 84  	ld bc,(Puntero_objeto)
427   8640 B7 ED 42     	sub hl,bc
428   8643 C0           	ret nz
429   8644
430   8644 21 F5 84     	ld hl,Ctrl_0
431   8647 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
432   8649
433   8649 C9            	ret 												; _de nuestra nave en los extremos.
434   864A
435   864A              ; *************************************************************************************************************************************************************
436   864A              ;
437   864A              ;	8/1/23
438   864A              ;
439   864A              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
440   864A              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
441   864A
442   864A              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
443   864A              ;	_de la 2ª y 3ª entidad respectivamente.
444   864A
445   864A
446   864A
447   864A              Store_Restore_entidades
448   864A
449   864A E5           	push hl
450   864B D5           	push de
451   864C C5            	push bc
452   864D
453   864D              ;	STORE !!!!!
454   864D
455   864D 21 D2 84     	ld hl,Filas
456   8650 ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
457   8654 01 36 00     	ld bc,54
458   8657 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
459   8659
460   8659              ;	Incrementa STORE y ejecuta RESTORE !!!!!
461   8659
462   8659 2A 0A 85     	ld hl,(Puntero_restore_entidades)
463   865C 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
464   865F 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
465   8662 01 36 00     	ld bc,54
466   8665 ED B0        	ldir
467   8667
468   8667              ;	Incrementa RESTORE !!!!!
469   8667
470   8667 2A 0C 85         ld hl,(Indice_restore)
471   866A 23           	inc hl
472   866B 23           	inc hl
473   866C 22 0C 85     	ld (Indice_restore),hl
474   866F CD 27 86         call Extrae_address
475   8672 22 0A 85         ld (Puntero_restore_entidades),hl
476   8675
477   8675 C1           	pop bc
478   8676 D1           	pop de
479   8677 E1           	pop hl
480   8678
481   8678 C9           	ret
482   8679
483   8679              ; **************************************************************************************************
484   8679              ;
485   8679              ;	29/10/22
486   8679              ;
487   8679              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
488   8679
489   8679 E5           Restore_Primera_entidad push hl
490   867A D5           	push de
491   867B C5            	push bc
492   867C 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
493   867F 11 D2 84     	ld de,Filas
494   8682 01 36 00     	ld bc,54
495   8685 ED B0        	ldir
496   8687 C1           	pop bc
497   8688 D1           	pop de
498   8689 E1           	pop hl
499   868A C9           	ret
500   868B
501   868B              ; *************************************************************************************************************************************************************
502   868B              ;
503   868B              ; Teclado.
504   868B
505   868B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
506   868D DB FE        	in a,($fe)
507   868F E6 01        	and $01
508   8691 28 02        	jr z,1f
509   8693 18 F6        	jr Pulsa_ENTER
510   8695 C9           1 ret
511   8696
512   8696              ; **************************************************************************************************
513   8696              ;
514   8696              ; Temporización.
515   8696
516   8696              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
517   8696              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
518   8696              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
519   8696              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
520   8696
521   8696              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
522   8696              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
523   8696              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
524   8696
525   8696              ; A partir de $4f61 no hace falta DELAY.
526   8696
527   8696              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
528   8696
529   8696 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
530   8699 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
531   869A 78           	LD A,B
532   869B A7           	AND A
533   869C 20 FB        	JR NZ,wait
534   869E C9           	RET
535   869F
536   869F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
537   869F              ;
538   869F              ;	21/4/22
539   869F
540   869F              Movimiento_Amadeus
541   869F
542   869F 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
543   86A1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
544   86A3 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
545   86A5 CC C3 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
546   86A8 3E F7        	ld a,$f7
547   86AA DB FE        	in a,($fe)
548   86AC E6 01        	and $01
549   86AE C8           	ret z
550   86AF 3E F7        	ld a,$f7
551   86B1 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
552   86B3 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
553   86B5 CC B7 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
554   86B8 C9               ret
555   86B9
556   86B9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
557   86B9
558   86B9              ; Pinta indicadores de FILAS. ------------------------------------------------------
559   86B9
560   86B9 21 10 40     Pinta_FILAS ld hl,$4010
561   86BC              ;	ld b,9
562   86BC              ;2 push hl
563   86BC              ;	push bc
564   86BC 06 BF        	ld b,$bf
565   86BE 36 80        1 ld (hl),%10000000
566   86C0 CD CA 89     	call NextScan
567   86C3 10 F9        	djnz 1B
568   86C5              ;	pop bc
569   86C5              ;	pop hl
570   86C5              ;	inc l
571   86C5              ;	djnz 2B
572   86C5
573   86C5 06 03        	ld b,3
574   86C7 21 00 47         ld hl,$4700
575   86CA CD D0 86     3 call Bucle_1
576   86CD 10 FB            djnz 3B
577   86CF C9               ret
578   86D0
579   86D0 C5           Bucle_1 push bc
580   86D1 E5                   push hl
581   86D2 D1                   pop de
582   86D3 13                   inc de
583   86D4 01 FF 00             ld bc,255
584   86D7 36 FF                ld (hl),255
585   86D9 ED B0                ldir
586   86DB 23                   inc hl
587   86DC 3E 07                ld a,7
588   86DE 84                   add a,h
589   86DF 67                   ld h,a
590   86E0 C1                   pop bc
591   86E1 C9                   ret
592   86E2
593   86E2              ; ---------------------------------------------------------------
594   86E2
595   86E2              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E2              ; ******************************************************************************************************************************************************************************************
  2+  86E2              ;
  3+  86E2              ; 17/08/22
  4+  86E2              ;
  5+  86E2              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E2
  7+  86E2 CD BE 89     Draw call Prepara_draw
  8+  86E5 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86E6 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86E7 28 05        	jr z,2F
 11+  86E9 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86EC 18 0C        	jr 1F
 13+  86EE 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F1 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F4 CD 85 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86F7              ;													; _la esquina superior izquierda de la pantalla.
 17+  86F7 CD 7E 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86FA 3A F5 84     1 ld a,(Ctrl_0)
 19+  86FD CB 6F        	bit 5,a
 20+  86FF 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8701
 22+  8701 CD 19 87     	call Comprueba_limite_horizontal
 23+  8704 CD AC 87     	call Comprueba_limite_vertical
 24+  8707
 25+  8707              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8707
 27+  8707 CD F8 88     3 call calcula_CColumnass
 28+  870A CD 2F 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870D CD 84 89     	call Define_rutina_de_impresion
 30+  8710
 31+  8710 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8713 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8715 32 F5 84     	ld (Ctrl_0),a
 34+  8718
 35+  8718 C9           	ret
 36+  8719
 37+  8719              ; *******************************************************************************************************************************************************************************************
 38+  8719              ;	23/8/22
 39+  8719              ;
 40+  8719              ; 	Comprueba_limite_horizontal.
 41+  8719              ;
 42+  8719
 43+  8719 3A F6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  871C A7           	and a
 45+  871D C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  871E
 47+  871E 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  8721 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8723 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  8725
 51+  8725 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  8727 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  872A 18 09            jr 6F
 54+  872C CB 5F        1 bit 3,a
 55+  872E 28 0D            jr z,2F
 56+  8730 E6 F7            and $f7
 57+  8732 32 F5 84         ld (Ctrl_0),a
 58+  8735 CD 85 88     6 call Inicializacion
 59+  8738 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  8739 08           	ex af,af
 61+  873A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  873B 18 56            jr 5F
 63+  873D E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  873E
 65+  873E              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  873E              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  873E
 68+  873E EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  873F 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8742 CD 0F 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  8745 67           	ld h,a
 72+  8746 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  8747 CD 0F 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  874A 67           	ld h,a
 75+  874B A7           	and a
 76+  874C ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  874E
 78+  874E 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  874F FE 02        	cp 2
 80+  8751 38 1C        	jr c,3F
 81+  8753 28 1A        	jr z,3F
 82+  8755
 83+  8755 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8756 28 21            jr z,7F
 85+  8758 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  875A              ;	ld e,0
 87+  875A E1           	pop hl
 88+  875B
 89+  875B              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  875B              ; _para indicar con E="2" en caso necesario.
 91+  875B
 92+  875B E5               push hl
 93+  875C C5               push bc
 94+  875D
 95+  875D CD 0F 8C     	call calcula_tercio
 96+  8760 FE 01        	cp 1
 97+  8762 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8764
 99+  8764 CD 94 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  8767 28 26            jr z,9F
101+  8769 38 24            jr c,9F
102+  876B 1E 00        11 ld e,0
103+  876D 18 22            jr 8F
104+  876F
105+  876F 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  8770 28 07        	jr z, 7F
107+  8772 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  8774 1E 00         	ld e,0
109+  8776 E1           	pop hl
110+  8777 18 04        	jr 4F
111+  8779 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  877B 18 15            jr 10F
113+  877D
114+  877D              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  877D              ; _para indicar con E="2" en caso necesario.
116+  877D
117+  877D E5           4 push hl
118+  877E C5               push bc
119+  877F
120+  877F CD 0F 8C     	call calcula_tercio
121+  8782 FE 01        	cp 1
122+  8784 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  8786
124+  8786 CD 94 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  8789 28 04            jr z,9F
126+  878B 30 02            jr nc,9F
127+  878D 18 02        	jr 8F
128+  878F 1E 02        9 ld e,2
129+  8791 C1           8 pop bc
130+  8792 E1           10 pop hl
131+  8793 C9           5 ret
132+  8794
133+  8794              ; --------------------
134+  8794              ;
135+  8794              ; 25/08/22
136+  8794
137+  8794 CD 0F 8C     Comprueba_centro call calcula_tercio
138+  8797 67               ld h,a
139+  8798 08           	ex af,af
140+  8799 FE 02        	cp 2
141+  879B 38 07        	jr c,1F
142+  879D 28 05        	jr z,1F
143+  879F 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  87A2 18 03        	jr 2F
145+  87A4 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87A7 08           2 ex af,af
147+  87A8 A7               and a
148+  87A9 ED 42            sbc hl,bc
149+  87AB C9               ret
150+  87AC
151+  87AC              ; *********************************************************************************************************************************************************************************************
152+  87AC              ;
153+  87AC              ;   16/8/22
154+  87AC              ;
155+  87AC              ;	Comprueba_limite_vertical
156+  87AC              ;
157+  87AC              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87AC              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87AC              ;
160+  87AC
161+  87AC 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87AF A7           	and a
163+  87B0 C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87B1
165+  87B1 7D           	ld a,l
166+  87B2 E6 1F        	and $1F
167+  87B4 57           	ld d,a
168+  87B5 3A 03 85     	ld a,(Limite_vertical)
169+  87B8 BA           	cp d 											; Límite - Posición.
170+  87B9
171+  87B9 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87BA CB 47        	bit 0,a
173+  87BC 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87BE
175+  87BE              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87BE
177+  87BE 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87BF 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87C1
180+  87C1               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87C1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87C1
183+  87C1 3A E1 84         ld a,(Coordenada_X)
184+  87C4 16 0F            ld d,Centro_izquierda
185+  87C6 A7               and a
186+  87C7 92               sub d 											 ; Posición - Centro_izquierda.
187+  87C8
188+  87C8 28 21            jr z,3F
189+  87CA 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87CC              ;                                                    ; _salimos sin modificar nada.
191+  87CC 18 0E            jr 2F
192+  87CE
193+  87CE 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87CF 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87D1
196+  87D1              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87D1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87D1
199+  87D1 3A E1 84         ld a,(Coordenada_X)
200+  87D4 16 10            ld d,Centro_derecha
201+  87D6 A7               and a
202+  87D7 92               sub d
203+  87D8
204+  87D8 28 11            jr z,3F
205+  87DA 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87DC              ;                                                    ; _salimos sin modificar nada.
207+  87DC CB 43        2 bit 0,e
208+  87DE 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87E0 C5           	push bc
210+  87E1 CD 74 88         call Modificaccionne
211+  87E4 C1           	pop bc
212+  87E5 CD 85 88         call Inicializacion
213+  87E8 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87E9 08           	ex af,af
215+  87EA F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87EB C9           3 ret 				 								 ; Salimos de la rutina.
217+  87EC
218+  87EC              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87EC
220+  87EC C5           4 push bc
221+  87ED 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87F0 0A           	ld a,(bc)
223+  87F1 3D           	dec a
224+  87F2 47           	ld b,a 											 ; Columnas-1 en B.
225+  87F3 7D           	ld a,l
226+  87F4 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87F5 CB 47        	bit 0,a
228+  87F7 28 03        	jr z,5F
229+  87F9 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87FA 18 2E        	jr 7F
231+  87FC
232+  87FC              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87FC
234+  87FC 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87FD F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87FE 3A F5 84     	ld a,(Ctrl_0)
237+  8801 CB 4F        	bit 1,a
238+  8803 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  8805 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  8806
241+  8806              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  8806
243+  8806 1C               inc e
244+  8807 1D               dec e
245+  8808 20 07            jr nz,12F
246+  880A 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  880B 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  880C 22 D4 84     	ld (Posicion_actual),hl
249+  880F 18 44        13 jr 9F
250+  8811
251+  8811 CB 43        12 bit 0,e
252+  8813 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  8815              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  8815 C1           	pop bc
255+  8816 18 D3        	jr 3B
256+  8818
257+  8818 80           14 add b
258+  8819 6F               ld l,a
259+  881A 22 D4 84     	ld (Posicion_actual),hl
260+  881D CD 74 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  8820 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8822
263+  8822 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  8824 32 F5 84         ld (Ctrl_0),a
265+  8827 F1           	pop af
266+  8828 18 2B        	jr 9F
267+  882A
268+  882A              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  882A
270+  882A F5           7 push af
271+  882B 3A F5 84     	ld a,(Ctrl_0)
272+  882E CB 47        	bit 0,a
273+  8830 20 1D        	jr nz,8F
274+  8832 F1           	pop af
275+  8833
276+  8833              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8833
278+  8833 1C           	inc e
279+  8834 1D               dec e
280+  8835 20 07            jr nz,10F
281+  8837
282+  8837 90           	sub b
283+  8838 6F               ld l,a
284+  8839 22 D4 84     	ld (Posicion_actual),hl
285+  883C 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  883E              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  883E CB 43        10 bit 0,e
288+  8840 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8842              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8842 C1           	pop bc
291+  8843 18 A6        	jr 3B
292+  8845
293+  8845 90           16 sub b
294+  8846 6F               ld l,a
295+  8847 22 D4 84     	ld (Posicion_actual),hl
296+  884A CD 74 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  884D 18 06            jr 9F
298+  884F
299+  884F E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  8851 32 F5 84         ld (Ctrl_0),a
301+  8854 F1           	pop af
302+  8855
303+  8855 C1           9 pop bc
304+  8856              ;	ld e,0
305+  8856 CD 85 88         call Inicializacion
306+  8859 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  885A 08           	ex af,af
308+  885B F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  885C 18 8D            jr 3B
310+  885E
311+  885E              ; --------------------
312+  885E
313+  885E              Modifica_Pos_actual
314+  885E
315+  885E              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  885E 05               dec B                                           ; Scanlines-1 en B.
317+  885F CD D9 89     1 call PreviousScan
318+  8862 10 FB            djnz 1B
319+  8864 22 D4 84     	ld (Posicion_actual),hl
320+  8867 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  8868 C9           	ret
322+  8869
323+  8869              ; --------------------
324+  8869
325+  8869              Modifica_Pos_actual2
326+  8869
327+  8869              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  8869 05               dec B                                           ; Scanlines-1 en B.
329+  886A CD CA 89     1 call NextScan
330+  886D 10 FB            djnz 1B
331+  886F 22 D4 84     	ld (Posicion_actual),hl
332+  8872 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8873 C9           	ret
334+  8874
335+  8874              ; --------------------
336+  8874
337+  8874              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  8874              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  8874
340+  8874 08           Modificaccionne ex af,af
341+  8875 FE 02            cp 2
342+  8877 F5               push af                                         ; Guardo el resultado de la comparación.
343+  8878 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  8879 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  887A CC 5E 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  887D DC 5E 88         call c,Modifica_Pos_actual
347+  8880 C8           	ret z
348+  8881 CD 69 88         call Modifica_Pos_actual2
349+  8884 C9               ret
350+  8885
351+  8885              ; *************************************************************************************************************************************************************************************************
352+  8885              ;
353+  8885              ;	13/8/22
354+  8885              ;
355+  8885              ;	Inicializacion
356+  8885              ;
357+  8885              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  8885              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  8885              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  8885              ;
361+  8885              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  8885              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  8885              ;	_ desaparece/aparece.
364+  8885
365+  8885              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  8885              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  8885              ;
368+  8885              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  8885              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  8885              ; 		   [E] ="0"
371+  8885
372+  8885              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  8885
374+  8885 CD 0F 8C     Inicializacion call calcula_tercio
375+  8888 28 36        	jr z,primit
376+  888A E6 02        	and 2
377+  888C 20 07        	jr nz,segmit
378+  888E 7D           	ld a,l
379+  888F FE 7F        	cp $7f
380+  8891 38 2D        	jr c,primit
381+  8893 28 2B        	jr z,primit
382+  8895 CD F2 88     segmit call column
383+  8898 38 13        	jr c,tercuad
384+  889A 3E 04        cuarcuad ld a,4
385+  889C 32 E0 84     	ld (Cuad_objeto),a
386+  889F 21 20 48     	ld hl,$4820
387+  88A2 22 01 85     	ld (Limite_horizontal),hl
388+  88A5 21 03 85     	ld hl,Limite_vertical
389+  88A8 36 0D        	ld (hl),$0d
390+  88AA 08           	ex af,af
391+  88AB 18 3C        	jr 1F
392+  88AD              tercuad
393+  88AD              ;	call Fija_punteros
394+  88AD 3E 03        	ld a,3
395+  88AF 32 E0 84     	ld (Cuad_objeto),a
396+  88B2 21 20 48     	ld hl,$4820
397+  88B5 22 01 85     	ld (Limite_horizontal),hl
398+  88B8 21 03 85     	ld hl,Limite_vertical
399+  88BB 36 12        	ld (hl),$12
400+  88BD 08           	ex af,af
401+  88BE 18 29        	jr 1F
402+  88C0 CD F2 88     primit call column
403+  88C3 38 13        	jr c, primcuad
404+  88C5              segcuad
405+  88C5              ;	call Fija_punteros
406+  88C5 3E 02        	ld a,2
407+  88C7 32 E0 84     	ld (Cuad_objeto),a
408+  88CA 21 C0 4F     	ld hl,$4fc0
409+  88CD 22 01 85     	ld (Limite_horizontal),hl
410+  88D0 21 03 85     	ld hl,Limite_vertical
411+  88D3 36 0D        	ld (hl),$0d
412+  88D5 08           	ex af,af
413+  88D6 18 11        	jr 1F
414+  88D8              primcuad
415+  88D8              ;	call Fija_punteros
416+  88D8 3E 01        	ld a,1
417+  88DA 32 E0 84     	ld (Cuad_objeto),a
418+  88DD 21 C0 4F     	ld hl,$4fc0
419+  88E0 22 01 85     	ld (Limite_horizontal),hl
420+  88E3 21 03 85     	ld hl,Limite_vertical
421+  88E6 36 12        	ld (hl),$12
422+  88E8 08           	ex af,af
423+  88E9 CD 84 8F     1 call Genera_coordenadas
424+  88EC 21 F5 84     	ld hl,Ctrl_0
425+  88EF CB EE        	set 5,(hl)
426+  88F1 C9           	ret
427+  88F2
428+  88F2              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88F2              ;
430+  88F2              ;	14/9/22
431+  88F2              ;
432+  88F2              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88F2              ;
434+  88F2              ;	La rutina fija el puntero de dibujado/borrado.
435+  88F2              ;
436+  88F2              ;	Función:
437+  88F2              ;
438+  88F2              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88F2
440+  88F2              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88F2              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88F2              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88F2              ;	and a
444+  88F2              ;	jr z,1F
445+  88F2              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88F2              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88F2              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88F2              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88F2              ;	ld (Puntero_objeto),hl
450+  88F2              ;	jr 3F
451+  88F2              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88F2              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88F2              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88F2              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88F2              ;	ld (Puntero_objeto),hl
456+  88F2              ;	jr 3F
457+  88F2              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88F2              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88F2              ;3 pop de
460+  88F2              ;	pop bc
461+  88F2              ;	ret
462+  88F2
463+  88F2              ; ------------------------------------------------------------------------------------------------------------------
464+  88F2
465+  88F2              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88F2              ;
467+  88F2              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88F2
469+  88F2 7D           column ld a,l
470+  88F3 E6 1F        	and $1f
471+  88F5 FE 10         	cp $10
472+  88F7 C9            	ret
473+  88F8
474+  88F8              ; --------------------------------------------------------------------------------------------------------------------
475+  88F8              ;
476+  88F8              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88F8              ;
478+  88F8              ; 14/12/22
479+  88F8              ;
480+  88F8              ;	Modifica: A y BC.
481+  88F8
482+  88F8 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  88FB E6 01        	and 1
484+  88FD 28 17        	jr z,1F
485+  88FF
486+  88FF              ; Nos encontramos en la parte izquierda de la pantalla
487+  88FF
488+  88FF 3A E1 84     	ld a,(Coordenada_X)
489+  8902 47           	ld b,a
490+  8903 04           	inc b											; (Coordenada_X)+1 en B.
491+  8904 79           	ld a,c
492+  8905 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  8906 38 08        	jr c,2F
494+  8908 47           	ld b,a
495+  8909 79           	ld a,c
496+  890A 90           	sub b
497+  890B 32 00 85     	ld (Columnas),a
498+  890E 18 1B        	jr 4F
499+  8910 79           2 ld a,c
500+  8911 32 00 85     	ld (Columnas),a
501+  8914 18 15        	jr 4F
502+  8916
503+  8916              ; Nos encontramos en la parte derecha de la pantalla.
504+  8916
505+  8916 3A E1 84     1 ld a,(Coordenada_X)
506+  8919 81           	add c
507+  891A 3D           	dec a
508+  891B D6 1F        	sub $1f
509+  891D 38 08        	jr c,3F
510+  891F 47           	ld b,a
511+  8920 79           	ld a,c
512+  8921 90           	sub b
513+  8922 32 00 85     	ld (Columnas),a
514+  8925 18 04        	jr 4F
515+  8927 79           3 ld a,c
516+  8928 32 00 85     	ld (Columnas),a
517+  892B D9           4 exx
518+  892C 4F           	ld c,a
519+  892D D9           	exx
520+  892E C9            ret
521+  892F
522+  892F              ; --------------------------------------------------------------------------------------------------------------------
523+  892F              ;
524+  892F              ; 7/1/23
525+  892F              ;
526+  892F              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  892F              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  892F              ;
529+  892F              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  892F              ;	DESTRUYE: HL,B Y A.
531+  892F
532+  892F 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  8932 FE 02        	cp 2
534+  8934 38 18        	jr c,1F
535+  8936 28 16        	jr z,1F
536+  8938 E6 01        	and 1
537+  893A 28 0D        	jr z,3F
538+  893C
539+  893C              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  893C
541+  893C CD 78 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  893F
543+  893F 7D           9 ld a,l
544+  8940 E6 1F        	and $1f
545+  8942 28 2A        	jr z,7F
546+  8944 2B           	dec hl
547+  8945 10 F8        	djnz 9B
548+  8947 18 25        	jr 7F
549+  8949
550+  8949              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  8949
552+  8949 2A D4 84     3 ld hl,(Posicion_actual)
553+  894C 18 20        	jr 7F
554+  894E
555+  894E 28 14        1 jr z,2F
556+  8950
557+  8950              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  8950
559+  8950 CD 78 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  8953 7D           4 ld a,l
561+  8954 E6 1F        	and $1f
562+  8956 28 03        	jr z,6F
563+  8958 2B           	dec hl
564+  8959 10 F8        	djnz 4B
565+  895B 06 0F        6 ld b,15
566+  895D CD D9 89     5 call PreviousScan
567+  8960 10 FB        	djnz 5B
568+  8962 18 0A        	jr 7F
569+  8964
570+  8964              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  8964
572+  8964 CD 78 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  8967 06 0F        	ld b,15
574+  8969 CD D9 89     8 call PreviousScan
575+  896C 10 FB        	djnz 8B
576+  896E
577+  896E E5           7 push hl
578+  896F DD E1        	pop ix
579+  8971
580+  8971 2A D6 84     	ld hl,(Puntero_objeto)
581+  8974 E5           	push hl
582+  8975 FD E1        	pop iy
583+  8977
584+  8977 C9           	ret
585+  8978
586+  8978              ; --------------------------------------------------------------------------------------------------------------------
587+  8978              ;
588+  8978              ;	2/1/23
589+  8978              ;
590+  8978              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  8978              ;
592+  8978              ;	Tras esta rutina tenemos:
593+  8978              ;
594+  8978              ;	OUTPUT: HL contiene (Posicion_actual).
595+  8978              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  8978              ;
597+  8978              ;	DESTRUYE!!!!! HL,B y A.
598+  8978
599+  8978 2A D4 84     Operandos ld hl,(Posicion_actual)
600+  897B 3A 00 85     	ld a,(Columnas)
601+  897E 3D           	dec a
602+  897F 20 01        	jr nz,1F
603+  8981 3C           	inc a
604+  8982 47           1 ld b,a
605+  8983 C9           	ret
606+  8984
607+  8984              ; --------------------------------------------------------------------------------------------------------------------
608+  8984              ;
609+  8984              ;	3/1/23
610+  8984              ;
611+  8984              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  8984              ;
613+  8984              ;	Destruye: A,B,HL y DE.
614+  8984
615+  8984              Define_rutina_de_impresion
616+  8984
617+  8984 3A D3 84     	ld a,(Columns)
618+  8987 47           	ld b,a
619+  8988 3A 00 85     	ld a,(Columnas)
620+  898B B8           	cp b
621+  898C 20 0D        	jr nz,2f
622+  898E
623+  898E              ;	La entidad se imprime entera.
624+  898E
625+  898E 21 1C 8A     	ld hl, Indice_entidades_completas
626+  8991 E6 01        	and 1
627+  8993 28 02        	jr z,1F
628+  8995
629+  8995 23           	inc hl
630+  8996 23           	inc hl
631+  8997
632+  8997 CD 27 86     1 call Extrae_address
633+  899A C9           	ret		;	ret
634+  899B
635+  899B              ;	La entidad no se imprime entera en pantalla.
636+  899B
637+  899B 3A E0 84     2 ld a,(Cuad_objeto)
638+  899E E6 01        	and 1
639+  89A0 28 17        	jr z,3F
640+  89A2
641+  89A2              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  89A2
643+  89A2 21 20 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  89A5 3A D3 84     4 ld a,(Columns)
645+  89A8 E6 01        	and 1
646+  89AA 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89AC
648+  89AC 23           	inc hl
649+  89AD 23           	inc hl
650+  89AE
651+  89AE 3A 00 85     	ld a,(Columnas)
652+  89B1 E6 01        	and 1
653+  89B3 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89B5
655+  89B5 23           	inc hl
656+  89B6 23           	inc hl
657+  89B7
658+  89B7 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89B9
660+  89B9 21 26 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89BC 18 E7        	jr 4B
662+  89BE
663+  89BE              ; --------------------------------------------------------------------------------------------------------------------
664+  89BE              ;
665+  89BE              ;	Prepara_draw
666+  89BE              ;
667+  89BE              ;	Es una rutina de carga.
668+  89BE              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89BE              ;
670+  89BE              ;	FUNCIONAMIENTO:
671+  89BE              ;
672+  89BE              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89BE              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89BE              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89BE              ;
676+  89BE              ;	DESTRUYE:
677+  89BE              ;
678+  89BE              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89BE
680+  89BE 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89C1 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89C2 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89C3 4E           	ld c,(hl)
684+  89C4 2A D4 84     	ld hl,(Posicion_actual)
685+  89C7 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89C9 C9           	ret
687+  89CA
688+  89CA              ;----------------------------------------------------------------------------------------------------------------
689+  89CA              ;
690+  89CA              ;	5/08/22
691+  89CA              ;
692+  89CA              ;   NextScan.
693+  89CA              ;
694+  89CA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89CA              ;
696+  89CA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89CA              ;
698+  89CA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89CA              ;
700+  89CA              ;       DESTRUIDOS: AF y HL !!!
701+  89CA              ;
702+  89CA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89CA              ;
704+  89CA
705+  89CA 24           NextScan inc h          ; Incrementamos el scanline.
706+  89CB 7C               ld a,h
707+  89CC E6 07            and 7
708+  89CE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89CF
710+  89CF 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
711+  89D0 C6 20            add a,$20           ; Vamos a comprobarlo...
712+  89D2 6F               ld l,a
713+  89D3 D8               ret c               ; Salimos si se produce el cambio de tercio.
714+  89D4
715+  89D4 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
716+  89D5 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
717+  89D7 67               ld h,a
718+  89D8 C9               ret
719+  89D9
720+  89D9              ;----------------------------------------------------------------------------------------------------------------
721+  89D9              ;
722+  89D9              ;	5/08/22
723+  89D9              ;
724+  89D9              ;   PreviousScan.
725+  89D9              ;
726+  89D9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
727+  89D9              ;
728+  89D9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
729+  89D9              ;
730+  89D9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
731+  89D9              ;
732+  89D9              ;       DESTRUIDOS: AF y HL !!!
733+  89D9              ;
734+  89D9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
735+  89D9              ;
736+  89D9
737+  89D9 7C           PreviousScan ld a,h
738+  89DA 25               dec h               ; Dec H.
739+  89DB E6 07            and 7
740+  89DD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
741+  89DE
742+  89DE 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
743+  89DF D6 20            sub $20             ; Vamos a comprobarlo...
744+  89E1 6F               ld l,a
745+  89E2 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
746+  89E3
747+  89E3 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
748+  89E4 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
749+  89E6 67               ld h,a
750+  89E7 C9               ret
751+  89E8
752+  89E8              ; -----------------------------------------------------------------------------------
753+  89E8              ;
754+  89E8              ;	07/01/23
755+  89E8
756+  89E8              Extrae_foto_registros
757+  89E8
758+  89E8 ED 73 10 85  	ld (Stack),sp											; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
759+  89EC 31 00 70     	ld sp,Album_de_fotos
760+  89EF FD E1        2 pop iy																	; (Puntero_objeto) en IY.
761+  89F1 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
762+  89F2 D1           	pop de																	; Dirección de la rutina de impresión en DE.
763+  89F3
764+  89F3 ED 73 12 85  	ld (Stack_2),sp
765+  89F7 ED 7B 10 85  	ld sp,(Stack)
766+  89FB 3E CD        	ld a,$cd
767+  89FD 32 05 8A     	ld (Imprime),a
768+  8A00 EB           	ex de,hl
769+  8A01 22 06 8A     	ld (Imprime+1),hl
770+  8A04 EB           	ex de,hl
771+  8A05
772+  8A05 00 00 00     Imprime db 0,0,0
773+  8A08 ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
774+  8A0C 3A 0F 85     	ld a,(Numero_de_malotes)
775+  8A0F 3D           	dec a
776+  8A10 28 09        	jr z,1F
777+  8A12 32 0F 85      	ld (Numero_de_malotes),a
778+  8A15 ED 7B 12 85  	ld sp,(Stack_2)
779+  8A19 18 D4        	jr 2B
780+  8A1B C9           1 ret
781+  8A1C
782+  8A1C
# file closed: Draw_XOR.asm
596   8A1C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A1C              ;   índices de Rutinas de impresión.
  2+  8A1C
  3+  8A1C 2C 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A1E 55 8A            defw Pinta_Amadeus_3x2
  5+  8A20
  6+  8A20 9F 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A22 3F 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A24 F3 8A            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A26
 10+  8A26 C9 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A28 CD 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2A 81 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A2C
 14+  8A2C
 15+  8A2C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A2C              ;
 17+  8A2C              ;   12/12/22
 18+  8A2C              ;
 19+  8A2C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A2C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A2C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A2C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A2C              ;
 24+  8A2C              ;   Modifica: DE y HL.
 25+  8A2C
 26+  8A2C ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A30 FD F9        	ld sp,iy
 28+  8A32 06 10            ld b,16
 29+  8A34 D1           1 pop de
 30+  8A35 73           	ld (hl),e
 31+  8A36 23           	inc hl
 32+  8A37 72           	ld (hl),d
 33+  8A38 2B           	dec hl
 34+  8A39
 35+  8A39 24           	inc h
 36+  8A3A 7C               ld a,h
 37+  8A3B E6 07            and 7
 38+  8A3D 20 0A            jr nz,2F
 39+  8A3F
 40+  8A3F 7D               ld a,l
 41+  8A40 C6 20            add a,$20
 42+  8A42 6F               ld l,a
 43+  8A43 38 04            jr c,2F
 44+  8A45
 45+  8A45 7C               ld a,h
 46+  8A46 D6 08            sub 8
 47+  8A48 67               ld h,a
 48+  8A49
 49+  8A49 7C           2 ld a,h
 50+  8A4A FE 58            cp $58
 51+  8A4C 28 02            jr z,3F
 52+  8A4E 10 E4            djnz 1B
 53+  8A50 ED 7B 10 85  3 ld sp,(Stack)
 54+  8A54 C9           	ret
 55+  8A55
 56+  8A55 ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A59 FD F9        	ld sp,iy
 58+  8A5B 06 08            ld b,8
 59+  8A5D D1           1 pop de
 60+  8A5E 73           	ld (hl),e
 61+  8A5F 23           	inc hl
 62+  8A60 72           	ld (hl),d
 63+  8A61 23           	inc hl
 64+  8A62 D1           	pop de
 65+  8A63 73           	ld (hl),e
 66+  8A64 2B           	dec hl
 67+  8A65 2B           	dec hl
 68+  8A66 24           	inc h
 69+  8A67 7C               ld a,h
 70+  8A68 E6 07            and 7
 71+  8A6A 20 0A            jr nz,2F
 72+  8A6C 7D               ld a,l
 73+  8A6D C6 20            add a,$20
 74+  8A6F 6F               ld l,a
 75+  8A70 38 04            jr c,2F
 76+  8A72 7C               ld a,h
 77+  8A73 D6 08            sub 8
 78+  8A75 67               ld h,a
 79+  8A76 7C           2 ld a,h
 80+  8A77 FE 58            cp $58
 81+  8A79 28 1F            jr z,4F
 82+  8A7B 72               ld (hl),d
 83+  8A7C D1           	pop de
 84+  8A7D 23           	inc hl
 85+  8A7E 73           	ld (hl),e
 86+  8A7F 23           	inc hl
 87+  8A80 72           	ld (hl),d
 88+  8A81 2B           	dec hl
 89+  8A82 2B           	dec hl
 90+  8A83 24           	inc h
 91+  8A84 7C               ld a,h
 92+  8A85 E6 07            and 7
 93+  8A87 20 0A            jr nz,3F
 94+  8A89 7D               ld a,l
 95+  8A8A C6 20            add a,$20
 96+  8A8C 6F               ld l,a
 97+  8A8D 38 04            jr c,3F
 98+  8A8F 7C               ld a,h
 99+  8A90 D6 08            sub 8
100+  8A92 67               ld h,a
101+  8A93 7C           3 ld a,h
102+  8A94 FE 58            cp $58
103+  8A96 28 02            jr z,4F
104+  8A98 10 C3            djnz 1B
105+  8A9A ED 7B 10 85  4 ld sp,(Stack)
106+  8A9E C9           	ret
107+  8A9F
108+  8A9F              ; ---------------------------------------------------
109+  8A9F
110+  8A9F ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
111+  8AA3 FD F9        	ld sp,iy
112+  8AA5 06 10            ld b,16
113+  8AA7 D1           1 pop de
114+  8AA8 7A           	ld a,d
115+  8AA9 AE           	xor (hl)
116+  8AAA 77           	ld (hl),a
117+  8AAB 24           	inc h
118+  8AAC 7C               ld a,h
119+  8AAD E6 07            and 7
120+  8AAF 20 0C            jr nz,2F
121+  8AB1 7D               ld a,l
122+  8AB2 C6 20            add a,$20
123+  8AB4 6F               ld l,a
124+  8AB5 38 06            jr c,2F
125+  8AB7 7C               ld a,h
126+  8AB8 D6 08            sub 8
127+  8ABA 67               ld h,a
128+  8ABB 18 00            jr 2F
129+  8ABD 7C           2 ld a,h
130+  8ABE FE 58            cp $58
131+  8AC0 28 02            jr z,3F
132+  8AC2 10 E3            djnz 1B
133+  8AC4 ED 7B 10 85  3 ld sp,(Stack)
134+  8AC8 C9           	ret
135+  8AC9
136+  8AC9 ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
137+  8ACD FD F9        	ld sp,iy
138+  8ACF 06 10            ld b,16
139+  8AD1 D1           1 pop de
140+  8AD2 7B           	ld a,e
141+  8AD3 AE           	xor (hl)
142+  8AD4 77           	ld (hl),a
143+  8AD5 24           	inc h
144+  8AD6 7C               ld a,h
145+  8AD7 E6 07            and 7
146+  8AD9 20 0C            jr nz,2F
147+  8ADB 7D               ld a,l
148+  8ADC C6 20            add a,$20
149+  8ADE 6F               ld l,a
150+  8ADF 38 06            jr c,2F
151+  8AE1 7C               ld a,h
152+  8AE2 D6 08            sub 8
153+  8AE4 67               ld h,a
154+  8AE5 18 00            jr 2F
155+  8AE7 7C           2 ld a,h
156+  8AE8 FE 58            cp $58
157+  8AEA 28 02            jr z,3F
158+  8AEC 10 E3            djnz 1B
159+  8AEE ED 7B 10 85  3 ld sp,(Stack)
160+  8AF2 C9           	ret
161+  8AF3
162+  8AF3              ; ---------------------------------------------------
163+  8AF3
164+  8AF3 ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
165+  8AF7 FD F9        	ld sp,iy
166+  8AF9 06 08            ld b,8
167+  8AFB D1           1 pop de
168+  8AFC 7A           	ld a,d
169+  8AFD AE           	xor (hl)
170+  8AFE 77           	ld (hl),a
171+  8AFF 23           	inc hl
172+  8B00 D1           	pop de
173+  8B01 7B           	ld a,e
174+  8B02 AE           	xor (hl)
175+  8B03 77           	ld (hl),a
176+  8B04 2B           	dec hl
177+  8B05 24            	inc h
178+  8B06 7C               ld a,h
179+  8B07 E6 07            and 7
180+  8B09 20 0A            jr nz,2F
181+  8B0B 7D               ld a,l
182+  8B0C C6 20            add a,$20
183+  8B0E 6F               ld l,a
184+  8B0F 38 04            jr c,2F
185+  8B11 7C               ld a,h
186+  8B12 D6 08            sub 8
187+  8B14 67               ld h,a
188+  8B15 7C           2 ld a,h
189+  8B16 FE 58            cp $58
190+  8B18 28 20            jr z,4F
191+  8B1A D1               pop de
192+  8B1B 7B           	ld a,e
193+  8B1C AE           	xor (hl)
194+  8B1D 77           	ld (hl),a
195+  8B1E 23           	inc hl
196+  8B1F 7A           	ld a,d
197+  8B20 AE           	xor (hl)
198+  8B21 77           	ld (hl),a
199+  8B22 2B           	dec hl
200+  8B23 24           	inc h
201+  8B24 7C               ld a,h
202+  8B25 E6 07            and 7
203+  8B27 20 0A            jr nz,3F
204+  8B29 7D               ld a,l
205+  8B2A C6 20            add a,$20
206+  8B2C 6F               ld l,a
207+  8B2D 38 04            jr c,3F
208+  8B2F 7C               ld a,h
209+  8B30 D6 08            sub 8
210+  8B32 67               ld h,a
211+  8B33 7C           3 ld a,h
212+  8B34 FE 58            cp $58
213+  8B36 28 02            jr z,4F
214+  8B38 10 C1            djnz 1B
215+  8B3A ED 7B 10 85  4 ld sp,(Stack)
216+  8B3E C9           	ret
217+  8B3F
218+  8B3F ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
219+  8B43 FD F9        	ld sp,iy
220+  8B45 06 08            ld b,8
221+  8B47 D1           1 pop de
222+  8B48 D1           	pop de
223+  8B49 7B           	ld a,e
224+  8B4A AE           	xor (hl)
225+  8B4B 77           	ld (hl),a
226+  8B4C 24            	inc h
227+  8B4D 7C               ld a,h
228+  8B4E E6 07            and 7
229+  8B50 20 0A            jr nz,2F
230+  8B52 7D               ld a,l
231+  8B53 C6 20            add a,$20
232+  8B55 6F               ld l,a
233+  8B56 38 04            jr c,2F
234+  8B58 7C               ld a,h
235+  8B59 D6 08            sub 8
236+  8B5B 67               ld h,a
237+  8B5C 7C           2 ld a,h
238+  8B5D FE 58            cp $58
239+  8B5F 28 1B            jr z,4F
240+  8B61 D1               pop de
241+  8B62 7A           	ld a,d
242+  8B63 AE           	xor (hl)
243+  8B64 77           	ld (hl),a
244+  8B65 24           	inc h
245+  8B66 7C               ld a,h
246+  8B67 E6 07            and 7
247+  8B69 20 0A            jr nz,3F
248+  8B6B 7D               ld a,l
249+  8B6C C6 20            add a,$20
250+  8B6E 6F               ld l,a
251+  8B6F 38 04            jr c,3F
252+  8B71 7C               ld a,h
253+  8B72 D6 08            sub 8
254+  8B74 67               ld h,a
255+  8B75 7C           3 ld a,h
256+  8B76 FE 58            cp $58
257+  8B78 28 02            jr z,4F
258+  8B7A 10 CB            djnz 1B
259+  8B7C ED 7B 10 85  4 ld sp,(Stack)
260+  8B80 C9           	ret
261+  8B81
262+  8B81 ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
263+  8B85 FD F9        	ld sp,iy
264+  8B87 06 08            ld b,8
265+  8B89 D1           1 pop de
266+  8B8A 7B           	ld a,e
267+  8B8B AE           	xor (hl)
268+  8B8C 77           	ld (hl),a
269+  8B8D 23           	inc hl
270+  8B8E 7A           	ld a,d
271+  8B8F AE           	xor (hl)
272+  8B90 77           	ld (hl),a
273+  8B91 2B           	dec hl
274+  8B92 24             	inc h
275+  8B93 7C               ld a,h
276+  8B94 E6 07            and 7
277+  8B96 20 0A            jr nz,2F
278+  8B98 7D               ld a,l
279+  8B99 C6 20            add a,$20
280+  8B9B 6F               ld l,a
281+  8B9C 38 04            jr c,2F
282+  8B9E 7C               ld a,h
283+  8B9F D6 08            sub 8
284+  8BA1 67               ld h,a
285+  8BA2 7C           2 ld a,h
286+  8BA3 FE 58            cp $58
287+  8BA5 28 21            jr z,4F
288+  8BA7 D1               pop de
289+  8BA8 7A           	ld a,d
290+  8BA9 AE           	xor (hl)
291+  8BAA 77           	ld (hl),a
292+  8BAB 23           	inc hl
293+  8BAC D1               pop de
294+  8BAD 7B           	ld a,e
295+  8BAE AE           	xor (hl)
296+  8BAF 77           	ld (hl),a
297+  8BB0 2B           	dec hl
298+  8BB1 24           	inc h
299+  8BB2 7C               ld a,h
300+  8BB3 E6 07            and 7
301+  8BB5 20 0A            jr nz,3F
302+  8BB7 7D               ld a,l
303+  8BB8 C6 20            add a,$20
304+  8BBA 6F               ld l,a
305+  8BBB 38 04            jr c,3F
306+  8BBD 7C               ld a,h
307+  8BBE D6 08            sub 8
308+  8BC0 67               ld h,a
309+  8BC1 7C           3 ld a,h
310+  8BC2 FE 58            cp $58
311+  8BC4 28 02            jr z,4F
312+  8BC6 10 C1            djnz 1B
313+  8BC8 ED 7B 10 85  4 ld sp,(Stack)
314+  8BCC C9           	ret
315+  8BCD
316+  8BCD ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
317+  8BD1 FD F9        	ld sp,iy
318+  8BD3 06 08            ld b,8
319+  8BD5 D1           1 pop de
320+  8BD6 7B           	ld a,e
321+  8BD7 AE           	xor (hl)
322+  8BD8 77           	ld (hl),a
323+  8BD9 24            	inc h
324+  8BDA 7C               ld a,h
325+  8BDB E6 07            and 7
326+  8BDD 20 0A            jr nz,2F
327+  8BDF 7D               ld a,l
328+  8BE0 C6 20            add a,$20
329+  8BE2 6F               ld l,a
330+  8BE3 38 04            jr c,2F
331+  8BE5 7C               ld a,h
332+  8BE6 D6 08            sub 8
333+  8BE8 67               ld h,a
334+  8BE9 7C           2 ld a,h
335+  8BEA FE 58            cp $58
336+  8BEC 28 1C            jr z,4F
337+  8BEE D1               pop de
338+  8BEF 7A           	ld a,d
339+  8BF0 AE           	xor (hl)
340+  8BF1 77           	ld (hl),a
341+  8BF2 24           	inc h
342+  8BF3 7C               ld a,h
343+  8BF4 E6 07            and 7
344+  8BF6 20 0A            jr nz,3F
345+  8BF8 7D               ld a,l
346+  8BF9 C6 20            add a,$20
347+  8BFB 6F               ld l,a
348+  8BFC 38 04            jr c,3F
349+  8BFE 7C               ld a,h
350+  8BFF D6 08            sub 8
351+  8C01 67               ld h,a
352+  8C02 7C           3 ld a,h
353+  8C03 FE 58            cp $58
354+  8C05 28 03            jr z,4F
355+  8C07 D1               pop de
356+  8C08 10 CB            djnz 1B
357+  8C0A ED 7B 10 85  4 ld sp,(Stack)
358+  8C0E C9           	ret
359+  8C0F
360+  8C0F              ; ---------------------------------------------------
361+  8C0F
# file closed: Rutinas_de_impresion_sprites.asm
597   8C0F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C0F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C0F              ;
  3+  8C0F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C0F              ;
  5+  8C0F              ; *****************************************************************************************************************************************************************************************
  6+  8C0F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C0F
  8+  8C0F 7C           calcula_tercio ld a,h
  9+  8C10 E6 18        	and $18
 10+  8C12 CB 2F        	sra a
 11+  8C14 CB 2F        	sra a
 12+  8C16 CB 2F        	sra a
 13+  8C18 C9           	ret
 14+  8C19
# file closed: calcula_tercio.asm
598   8C19              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C19              ; -----------------------------------------------------------------------------------------
  2+  8C19              ;
  3+  8C19              ;   04/11/22
  4+  8C19              ;
  5+  8C19              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C19              ;
  7+  8C19              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C19              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C19              ;
 10+  8C19              ;   DESTRUYE: HL y A. !!!!!
 11+  8C19
 12+  8C19 CD 0F 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C1C 26 58            ld h,$58
 14+  8C1E 84               add h
 15+  8C1F 67               ld h,a
 16+  8C20 C9               ret
# file closed: Calcula_direccion_atributos.asm
599   8C21              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C21              ; ********** **********
  2+  8C21              ;
  3+  8C21              ;   5/11/22
  4+  8C21              ;
  5+  8C21              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C21              ;
  7+  8C21              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C21              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C21              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C21              ;
 11+  8C21              ;   NO DESTROYERSSSS !!!!!
 12+  8C21
 13+  8C21 E5           Define_atributos push hl
 14+  8C22 C5           	push bc
 15+  8C23 D5           	push de
 16+  8C24
 17+  8C24 CD 19 8C     	call Calcula_direccion_atributos
 18+  8C27
 19+  8C27 D9               exx
 20+  8C28 E5               push hl
 21+  8C29 D9               exx
 22+  8C2A D1               pop de
 23+  8C2B
 24+  8C2B 42               ld b,d
 25+  8C2C 7B               ld a,e 									; (Attr) en A.
 26+  8C2D
 27+  8C2D C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C2E E5            	push hl 								; Guardo dirección de attr.
 29+  8C2F
 30+  8C2F              ; -----
 31+  8C2F
 32+  8C2F 77           2 ld (hl),a
 33+  8C30 0D           	dec c 									; Decremento (Columnas).
 34+  8C31 28 03        	jr z,1F
 35+  8C33 23           	inc hl
 36+  8C34 18 F9        	jr 2B
 37+  8C36
 38+  8C36 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C37 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C38
 41+  8C38 05           	dec b									; Decremento (Filas).
 42+  8C39 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C3B
 44+  8C3B 11 20 00     	ld de,32
 45+  8C3E A7           	and a
 46+  8C3F ED 5A        	adc hl,de
 47+  8C41 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C43
 49+  8C43 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C44 C1           	pop bc
 51+  8C45 E1           	pop hl
 52+  8C46
 53+  8C46 C9           	ret
 54+  8C47
# file closed: Define_atributos.asm
600   8C47              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C47              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C47              ;
  3+  8C47              ;
  4+  8C47              ;	CLS.
  5+  8C47              ;
  6+  8C47              ;	Limpia la pantalla y define sus atributos.
  7+  8C47              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C47              ;
  9+  8C47              ;	COLORES: 0 ..... NEGRO
 10+  8C47              ;    		 1 ..... AZUL
 11+  8C47              ; 			 2 ..... ROJO
 12+  8C47              ;			 3 ..... MAGENTA
 13+  8C47              ; 			 4 ..... VERDE
 14+  8C47              ; 			 5 ..... CIAN
 15+  8C47              ;			 6 ..... AMARILLO
 16+  8C47              ; 			 7 ..... BLANCO
 17+  8C47              ;
 18+  8C47              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C47              ;
 20+  8C47              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C47
 22+  8C47
 23+  8C47 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C4A 11 01 40     	LD DE,$4001
 25+  8C4D 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C50 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C52 ED B0        	LDIR
 28+  8C54 01 FF 02     	LD BC,767
 29+  8C57 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C58 ED B0        	LDIR
 31+  8C5A C9           	ret
 32+  8C5B
# file closed: Cls.asm
601   8C5B              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C5B              ; ******************************************************************************************************************************************************************************************
  2+  8C5B              ;
  3+  8C5B              ;   19/10/22
  4+  8C5B              ;
  5+  8C5B              ;	Mov_down
  6+  8C5B              ;
  7+  8C5B              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C5B              ;
  9+  8C5B              ;
 10+  8C5B 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C5E CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C60              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C60              ; 																	; _ en el caso de que no lo haya.
 14+  8C60 3A E6 84     	ld a,(Vel_down)
 15+  8C63 47           	ld b,a
 16+  8C64 2A D4 84         ld hl,(Posicion_actual)
 17+  8C67 CD 0F 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C6A E6 02        	and 2
 19+  8C6C 28 0F        	jr z,1F
 20+  8C6E 7C           	ld a,h
 21+  8C6F FE 57        	cp $57
 22+  8C71 20 0A        	jr nz,1F
 23+  8C73 7D           	ld a,l
 24+  8C74 C6 20        	add $20
 25+  8C76 30 05        	jr nc,1F
 26+  8C78
 27+  8C78              ; ------------------------------
 28+  8C78 CD 6B 8F     	call Reaparece_arriba
 29+  8C7B              ;	call Reinicio
 30+  8C7B              ; ------------------------------
 31+  8C7B
 32+  8C7B 18 08        	jr 3F
 33+  8C7D CD CA 89     1 call NextScan
 34+  8C80 22 D4 84     	ld (Posicion_actual),hl
 35+  8C83 10 E2            djnz 2B
 36+  8C85 CD 84 8F     3 call Genera_coordenadas
 37+  8C88 C9           	ret
 38+  8C89
 39+  8C89
 40+  8C89              ; ******************************************************************************************************************************************************************************************
 41+  8C89              ;
 42+  8C89              ;   19/10/22
 43+  8C89              ;
 44+  8C89              ;	Mov_up
 45+  8C89              ;
 46+  8C89              ; 	Mueve el Sprite hacia arriba.
 47+  8C89              ;
 48+  8C89              ;
 49+  8C89 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C8C CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8C8E              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8C8E              ; 																		; _ en el caso de que no lo haya.
 53+  8C8E 3A E5 84     	ld a,(Vel_up)
 54+  8C91 47           	ld b,a
 55+  8C92 2A D4 84     	ld hl,(Posicion_actual)
 56+  8C95 CD 0F 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8C98 A7           	and a
 58+  8C99 20 10        	jr nz,1F
 59+  8C9B 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8C9C FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8C9E 20 0B            jr nz,1F
 62+  8CA0 7D               ld a,l
 63+  8CA1 D6 20            sub $20
 64+  8CA3 30 06            jr nc,1F
 65+  8CA5 25               dec h
 66+  8CA6
 67+  8CA6              ; -----------------------------
 68+  8CA6 CD 5B 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CA9              ;	call Reinicio
 70+  8CA9              ; -----------------------------
 71+  8CA9
 72+  8CA9 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CAB CD D9 89     1 call PreviousScan
 74+  8CAE 22 D4 84     	ld (Posicion_actual),hl
 75+  8CB1 10 E2            djnz 3B
 76+  8CB3 CD 84 8F     2 call Genera_coordenadas
 77+  8CB6 C9           	ret
 78+  8CB7
 79+  8CB7              ; ******************************************************************************************************************************************************************************************
 80+  8CB7              ;
 81+  8CB7              ;	19/10/22
 82+  8CB7              ;
 83+  8CB7              ;	Mov_right.
 84+  8CB7              ;
 85+  8CB7              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CB7              ;
 87+  8CB7
 88+  8CB7 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CBA CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CBC              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CBC              ; 																	; _ en el caso de que no lo haya.
 92+  8CBC 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CBF A7           	and a
 94+  8CC0 28 0B        	jr z,10F
 95+  8CC2
 96+  8CC2 3A F5 84     	ld a,(Ctrl_0)
 97+  8CC5 CB 7F        	bit 7,a
 98+  8CC7 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CC9 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CCC 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CCD
102+  8CCD 3A F5 84     10 ld a,(Ctrl_0)
103+  8CD0 CB 77        	bit 6,a
104+  8CD2 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CD4
106+  8CD4 CD 1A 8F     	call Stop_Amadeus_right
107+  8CD7 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CD8 18 4A        	jr 3F
109+  8CDA
110+  8CDA 3A E1 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CDD FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CDF 20 43        	jr nz,3F
113+  8CE1
114+  8CE1 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CE4 A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CE5 28 3D        	jr z,3F
117+  8CE7
118+  8CE7              ; ---------- ---------- ----------
119+  8CE7
120+  8CE7 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
121+  8CEA FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
122+  8CEC 28 11        	jr z,1F
123+  8CEE 38 06        	jr c,6F
124+  8CF0 FE 04        	cp 4
125+  8CF2 28 14        	jr z,7F
126+  8CF4 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
127+  8CF6
128+  8CF6              ; ---------- ---------- ----------
129+  8CF6              ;
130+  8CF6              ; Perfiles de velocidad
131+  8CF6              ;
132+  8CF6 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
133+  8CF9 FE FE        	cp $fe
134+  8CFB 20 27        	jr nz,3F
135+  8CFD 18 10        	jr 4F
136+  8CFF 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
137+  8D02 FE FD        	cp $fd
138+  8D04 20 1E        	jr nz,3F
139+  8D06 18 07        	jr 4F
140+  8D08 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
141+  8D0B FE FB        	cp $fb
142+  8D0D 20 15        	jr nz,3F
143+  8D0F
144+  8D0F              ; ---------- ---------- ----------
145+  8D0F
146+  8D0F CD 49 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
147+  8D12              ;	call Reinicio
148+  8D12
149+  8D12              ; ---------- ---------- ----------
150+  8D12
151+  8D12 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
152+  8D14 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
153+  8D15 CD 4D 8D     	call DESPLZ_DER
154+  8D18 C1           	pop bc
155+  8D19 10 F9        	djnz 5B
156+  8D1B 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
157+  8D1E 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
158+  8D1F 22 D4 84     	ld (Posicion_actual),hl
159+  8D22 18 25        	jr 2F 															; Salimos para pintar la nueva posición.
160+  8D24
161+  8D24              ; ---------- ---------- ----------
162+  8D24
163+  8D24 3A E4 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
164+  8D27 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
165+  8D29 20 18        	jr nz,8F
166+  8D2B 2A D4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
167+  8D2E 7D           	ld a,l
168+  8D2F E6 1F        	and $1f
169+  8D31 FE 1F        	cp 31
170+  8D33 20 05        	jr nz,9F
171+  8D35
172+  8D35              ; ---------- ---------- ----------
173+  8D35
174+  8D35 CD 49 8F     	call Reaparece_izquierda
175+  8D38
176+  8D38              ; ---------- ---------- ----------
177+  8D38
178+  8D38 18 0F        	jr 2F
179+  8D3A 2A D4 84     9 ld hl,(Posicion_actual)
180+  8D3D 23           	inc hl
181+  8D3E 22 D4 84     	ld (Posicion_actual),hl
182+  8D41 18 06        	jr 2F
183+  8D43 2A D4 84     8 ld hl,(Posicion_actual)
184+  8D46 CD 4D 8D     	call DESPLZ_DER
185+  8D49 CD 84 8F     2 call Genera_coordenadas
186+  8D4C C9           	ret
187+  8D4D
188+  8D4D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
189+  8D4D              ;
190+  8D4D              ;	22/9/22
191+  8D4D              ;
192+  8D4D
193+  8D4D CD 5C 8D     DESPLZ_DER call Desplaza_derecha
194+  8D50 CD 71 8D         call modifica_parametros_1er_DESPLZ_2
195+  8D53 CD 97 8D         call Ciclo_completo
196+  8D56 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
197+  8D59 CB FE        	set 7,(hl)
198+  8D5B C9           	ret
199+  8D5C
200+  8D5C              ; ******************************************************************************************************************************************************************************************
201+  8D5C              ;	14/9/22
202+  8D5C              ;
203+  8D5C
204+  8D5C 3A E4 84     Desplaza_derecha ld a,(Vel_right)
205+  8D5F 47           	ld b,a
206+  8D60 2A DC 84     	ld hl,(Puntero_DESPLZ)
207+  8D63 23           1 inc hl
208+  8D64 23           	inc hl
209+  8D65 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
210+  8D67 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
211+  8D6A CD 27 86     	call Extrae_address
212+  8D6D
213+  8D6D              ;	ld (Caja_de_DESPLZ),hl
214+  8D6D 22 D6 84     	ld (Puntero_objeto),hl
215+  8D70
216+  8D70 C9           	ret
217+  8D71
218+  8D71              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8D71              ;
220+  8D71              ;	24/7/22
221+  8D71              ;
222+  8D71              ;	modifica_parametros_1er_DESPLZ_2
223+  8D71              ;
224+  8D71              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8D71              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8D71              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8D71
228+  8D71 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8D74 A7           	and a
230+  8D75 20 1C        	jr nz,1F
231+  8D77 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8D79 32 D8 84         ld (CTRL_DESPLZ),a
233+  8D7C
234+  8D7C 21 D3 84     	ld hl,Columns
235+  8D7F 34           	inc (hl)
236+  8D80
237+  8D80 3A E0 84     	ld a,(Cuad_objeto)
238+  8D83 E6 01        	and 1
239+  8D85 28 0C        	jr z,1F
240+  8D87 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
241+  8D8A 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
242+  8D8B 22 D4 84     	ld (Posicion_actual),hl
243+  8D8E CD 26 8F     	call Inc_CTRL_DESPLZ
244+  8D91 18 03        	jr 2F
245+  8D93 CD 26 8F     1 call Inc_CTRL_DESPLZ
246+  8D96 C9           2 ret
247+  8D97
248+  8D97              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
249+  8D97              ;
250+  8D97              ;	24/7/22
251+  8D97              ;
252+  8D97              ;	Ciclo_completo.
253+  8D97              ;
254+  8D97              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
255+  8D97              ;
256+  8D97              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
257+  8D97              ; 	Decrementamos (Columns).
258+  8D97              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
259+  8D97              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
260+  8D97
261+  8D97
262+  8D97 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
263+  8D9A FE FF        	cp $ff
264+  8D9C 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
265+  8D9E 18 22        	jr 3f
266+  8DA0 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
267+  8DA3 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
268+  8DA4 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
269+  8DA5 32 D8 84     	ld (CTRL_DESPLZ),a
270+  8DA8 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
271+  8DAB E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
272+  8DAD 20 07        	jr nz,2F
273+  8DAF 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
274+  8DB2 23           	inc hl
275+  8DB3 22 D4 84     	ld (Posicion_actual),hl
276+  8DB6 2A DA 84     2 ld hl,(Indice_Sprite)
277+  8DB9 22 DC 84     	ld (Puntero_DESPLZ),hl
278+  8DBC 21 00 00     	ld hl,0
279+  8DBF 22 04 85     	ld (Caja_de_DESPLZ),hl
280+  8DC2              ;	call Genera_coordenadas
281+  8DC2 C9           3 ret
282+  8DC3
283+  8DC3              ; ******************************************************************************************************************************************************************************************
284+  8DC3              ;
285+  8DC3              ;	19/10/22
286+  8DC3              ;
287+  8DC3              ;	Mov_left.
288+  8DC3              ;
289+  8DC3              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
290+  8DC3              ;
291+  8DC3              Mov_left
292+  8DC3
293+  8DC3 21 F5 84     	ld hl,Ctrl_0
294+  8DC6 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
295+  8DC8              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
296+  8DC8              ; 																	; _ en el caso de que no lo haya.
297+  8DC8 3A D8 84     	ld a,(CTRL_DESPLZ)
298+  8DCB A7           	and a
299+  8DCC 20 19        	jr nz,10F
300+  8DCE
301+  8DCE 2A D6 84     	ld hl,(Puntero_objeto)
302+  8DD1 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
303+  8DD4
304+  8DD4 3A F5 84     	ld a,(Ctrl_0)
305+  8DD7 CB 77        	bit 6,a
306+  8DD9 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
307+  8DDB
308+  8DDB CD 20 8F     	call Stop_Amadeus_left
309+  8DDE 20 5F        	jr nz,3F
310+  8DE0
311+  8DE0 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
312+  8DE3 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
313+  8DE6 C9           	ret
314+  8DE7
315+  8DE7 3A F5 84     10 ld a,(Ctrl_0)
316+  8DEA CB 7F        	bit 7,a
317+  8DEC 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
318+  8DEE 21 D8 84     	ld hl,CTRL_DESPLZ
319+  8DF1 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
320+  8DF2
321+  8DF2 3A E1 84     11 ld a,(Coordenada_X)
322+  8DF5 A7           	and a
323+  8DF6 20 47        	jr nz,3F
324+  8DF8 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
325+  8DFB A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
326+  8DFC 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
327+  8DFE
328+  8DFE              ; ---------- ---------- ----------
329+  8DFE
330+  8DFE 3A E3 84     	ld a,(Vel_left)
331+  8E01 FE 02        	cp 2
332+  8E03 28 0F        	jr z,1F
333+  8E05 38 04        	jr c,6F
334+  8E07 FE 04        	cp 4
335+  8E09 28 12        	jr z,7F
336+  8E0B
337+  8E0B              ; ---------- ---------- ----------
338+  8E0B
339+  8E0B 3A D8 84     6 ld a,(CTRL_DESPLZ)
340+  8E0E FE F9        	cp $f9
341+  8E10 20 2D        	jr nz,3F
342+  8E12 18 10        	jr 4F
343+  8E14 3A D8 84     1 ld a,(CTRL_DESPLZ)
344+  8E17 FE FA        	cp $fa
345+  8E19 20 24        	jr nz,3F
346+  8E1B 18 07        	jr 4F
347+  8E1D 3A D8 84     7 ld a,(CTRL_DESPLZ)
348+  8E20 FE FC        	cp $fc
349+  8E22 20 1B        	jr nz,3F
350+  8E24
351+  8E24              ; ---------- ---------- ----------
352+  8E24
353+  8E24 CD 37 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
354+  8E27              ;	call Reinicio
355+  8E27
356+  8E27              ; ---------- ---------- ----------
357+  8E27
358+  8E27 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
359+  8E29 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
360+  8E2A 2A D6 84     	ld hl,(Puntero_objeto)
361+  8E2D 22 DC 84     	ld (Puntero_DESPLZ),hl
362+  8E30 CD 66 8E     	call DESPLZ_IZQ
363+  8E33 C1           	pop bc
364+  8E34 10 F3        	djnz 5B
365+  8E36 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
366+  8E39 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
367+  8E3A 22 D4 84     	ld (Posicion_actual),hl
368+  8E3D 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
369+  8E3F
370+  8E3F              ; ---------- ---------- ----------
371+  8E3F
372+  8E3F 3A E3 84     3 ld a,(Vel_left)
373+  8E42 FE 08        	cp 8
374+  8E44 20 16        	jr nz,8F
375+  8E46 2A D4 84     	ld hl,(Posicion_actual)
376+  8E49 7D           	ld a,l
377+  8E4A E6 1F        	and $1f
378+  8E4C 20 05        	jr nz,9F
379+  8E4E
380+  8E4E              ; ---------- ---------- ----------
381+  8E4E
382+  8E4E CD 37 8F     	call Reaparece_derecha
383+  8E51
384+  8E51              ; ---------- ---------- ----------
385+  8E51
386+  8E51 18 0F        	jr 2F
387+  8E53 2A D4 84     9 ld hl,(Posicion_actual)
388+  8E56 2B           	dec hl
389+  8E57 22 D4 84     	ld (Posicion_actual),hl
390+  8E5A 18 06        	jr 2F
391+  8E5C 2A D4 84     8 ld hl,(Posicion_actual)
392+  8E5F CD 66 8E     	call DESPLZ_IZQ
393+  8E62 CD 84 8F     2 call Genera_coordenadas
394+  8E65 C9           	ret
395+  8E66
396+  8E66              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
397+  8E66              ;
398+  8E66              ;	22/9/22
399+  8E66
400+  8E66 CD 75 8E     DESPLZ_IZQ call Desplaza_izquierda
401+  8E69 CD 8A 8E         call modifica_parametros_1er_DESPLZ
402+  8E6C CD AB 8E     	call Ciclo_completo_2
403+  8E6F 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
404+  8E72 CB BE        	res 7,(hl)
405+  8E74 C9           	ret
406+  8E75
407+  8E75 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
408+  8E78 47           	ld b,a
409+  8E79 2A DC 84     	ld hl,(Puntero_DESPLZ)
410+  8E7C 2B           1 dec hl
411+  8E7D 2B           	dec hl
412+  8E7E 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
413+  8E80 22 DC 84     	ld (Puntero_DESPLZ),hl
414+  8E83 CD 27 86     	call Extrae_address
415+  8E86 22 04 85     	ld (Caja_de_DESPLZ),hl
416+  8E89 C9           	ret
417+  8E8A
418+  8E8A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
419+  8E8A              ;
420+  8E8A              ;	modifica_parametros_1er_DESPLZ
421+  8E8A              ;
422+  8E8A              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
423+  8E8A              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
424+  8E8A              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
425+  8E8A
426+  8E8A 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
427+  8E8D A7           	and a
428+  8E8E 20 17        	jr nz,1F
429+  8E90 21 D3 84     	ld hl,Columns
430+  8E93 34           	inc (hl)
431+  8E94 3A E0 84     	ld a,(Cuad_objeto)
432+  8E97 E6 01        	and 1
433+  8E99 20 0C        	jr nz,1F
434+  8E9B 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
435+  8E9E 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
436+  8E9F 22 D4 84     	ld (Posicion_actual),hl
437+  8EA2 CD 09 8F     	call Dec_CTRL_DESPLZ
438+  8EA5 18 03        	jr 2F
439+  8EA7 CD 09 8F     1 call Dec_CTRL_DESPLZ
440+  8EAA C9           2 ret
441+  8EAB
442+  8EAB              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
443+  8EAB              ;
444+  8EAB 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
445+  8EAE FE F8        	cp $f8
446+  8EB0 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
447+  8EB2 18 19        	jr 3f
448+  8EB4 21 D3 84     1 ld hl,Columns
449+  8EB7 35           	dec (hl)
450+  8EB8 AF           	xor a
451+  8EB9 32 D8 84     	ld (CTRL_DESPLZ),a
452+  8EBC 3A E0 84     	ld a,(Cuad_objeto)
453+  8EBF E6 01        	and 1
454+  8EC1 28 07        	jr z,2F
455+  8EC3 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
456+  8EC6 2B           	dec hl
457+  8EC7 22 D4 84     	ld (Posicion_actual),hl
458+  8ECA CD 84 8F     2 call Genera_coordenadas
459+  8ECD C9           3 ret
460+  8ECE
461+  8ECE              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
462+  8ECE
463+  8ECE CD BE 89     Mod_puntero_datas call Prepara_draw									; Recabamos los datos de la entidad, (Filas) y (Columns).
464+  8ED1              ;	call Calcula_dbs_totales	 									; (Filas * Columnas)*8 en BC´.
465+  8ED1              ;																	; Filas * Columnas en DE´.
466+  8ED1 3A E0 84     	ld a,(Cuad_objeto)
467+  8ED4 FE 02        	cp 2
468+  8ED6 38 1A        	jr c,2F
469+  8ED8 28 18        	jr z,2F
470+  8EDA E6 01        	and 1
471+  8EDC 28 12        	jr z,1F 														; Necesitamos saber en que cuadrante de pantalla se encuentra_
472+  8EDE              ; 																	; _la entidad para poder calcular su puntero de .db´s, (Puntero_datas).
473+  8EDE              ;	call puntero_cuarcuad 											; Nos encontramos en el 3º cuadrante.
474+  8EDE C5           	push bc
475+  8EDF E5           	push hl
476+  8EE0 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
477+  8EE2 0D           	dec c
478+  8EE3 2A FE 84     	ld hl,(Puntero_datas)
479+  8EE6 A7           	and a
480+  8EE7 ED 4A        	adc hl,bc
481+  8EE9 22 FE 84     	ld (Puntero_datas),hl
482+  8EEC E1           	pop hl
483+  8EED C1           	pop bc
484+  8EEE 18 18        	jr 4F
485+  8EF0              1
486+  8EF0              ;	call puntero_cuarcuad 											; 4º CUADRANTE !!!!!!!!!!
487+  8EF0 18 16        	jr 4F
488+  8EF2 E6 01        2 and 1
489+  8EF4 28 02        	jr z,3F
490+  8EF6              ;	call puntero_primcuad 											; 1er CUADRANTE !!!!!!!!!!!!!
491+  8EF6 18 10        	jr 4F
492+  8EF8              3
493+  8EF8              ;	call puntero_primcuad 											; 2º CUADRANTE !!!!!!!!!!!!!!
494+  8EF8 C5           	push bc
495+  8EF9 E5           	push hl
496+  8EFA 06 00        	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
497+  8EFC 0D           	dec c
498+  8EFD 2A FE 84     	ld hl,(Puntero_datas)
499+  8F00 A7           	and a
500+  8F01 ED 42        	sbc hl,bc
501+  8F03 22 FE 84     	ld (Puntero_datas),hl
502+  8F06 E1           	pop hl
503+  8F07 C1           	pop bc
504+  8F08 C9           4 ret
505+  8F09
506+  8F09              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F09              ;
508+  8F09              ;	Dec_CTRL_DESPLZ
509+  8F09              ;
510+  8F09              ;	Subrutina de [modifica_punteros].
511+  8F09              ;
512+  8F09              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
513+  8F09
514+  8F09 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
515+  8F0C 3A E3 84     	ld a,(Vel_left)
516+  8F0F A7           	and a
517+  8F10 28 06        	jr z,1F
518+  8F12 47           	ld b,a
519+  8F13 35           3 dec (hl)
520+  8F14 10 FD        	djnz 3B
521+  8F16 18 01        	jr 2F
522+  8F18 35           1 dec (hl)
523+  8F19 C9           2 ret
524+  8F1A
525+  8F1A              ; ---------- ---------- ---------- ---------- ---------- ----------
526+  8F1A              ;
527+  8F1A              ;	19/10/22
528+  8F1A              ;
529+  8F1A              ;	(cp 29) para un Amadeus de 3 Columns.
530+  8F1A              ;	(cp 30)   ""  ""    ""     2 Columns.
531+  8F1A
532+  8F1A 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
533+  8F1D FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
534+  8F1F C9           	ret
535+  8F20
536+  8F20              ; ---------- ---------- ---------- ---------- ---------- ----------
537+  8F20              ;
538+  8F20              ;	19/10/22
539+  8F20              ;
540+  8F20              ;	(cp 2) para un Amadeus de 3 Columns.
541+  8F20              ;	(cp 1)   ""  ""    ""     2 Columns.
542+  8F20
543+  8F20 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
544+  8F23 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
545+  8F25 C9           	ret
546+  8F26
547+  8F26              ; ---------- ---------- ---------- ---------- ---------- ----------
548+  8F26              ;
549+  8F26              ;	24/7/22
550+  8F26              ;
551+  8F26              ;	Inc_CTRL_DESPLZ
552+  8F26              ;
553+  8F26              ;	Subrutina de [modifica_punteros].
554+  8F26              ;
555+  8F26              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
556+  8F26
557+  8F26 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
558+  8F29 3A E4 84     	ld a,(Vel_right)
559+  8F2C A7           	and a
560+  8F2D 28 06        	jr z,1F
561+  8F2F 47           	ld b,a
562+  8F30 34           3 inc (hl)
563+  8F31 10 FD        	djnz 3B
564+  8F33 18 01        	jr 2F
565+  8F35 34           1 inc (hl)
566+  8F36 C9           2 ret
567+  8F37
568+  8F37              ; ---------- ---------- ---------- ---------- ---------- ----------
569+  8F37
570+  8F37 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
571+  8F3A 01 1F 00     	ld bc,31
572+  8F3D A7           	and a
573+  8F3E ED 4A        	adc hl,bc
574+  8F40 22 D4 84     	ld (Posicion_actual),hl
575+  8F43 21 F5 84     	ld hl,Ctrl_0														; $xxx1
576+  8F46 CB C6        	set 0,(hl)
577+  8F48 C9           	ret
578+  8F49
579+  8F49              ; ---------- ---------- ---------- ---------- ---------- ----------
580+  8F49
581+  8F49 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
582+  8F4C 01 1F 00     	ld bc,31
583+  8F4F A7           	and a
584+  8F50 ED 42        	sbc hl,bc
585+  8F52 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
586+  8F55 21 F5 84     	ld hl,Ctrl_0
587+  8F58 CB CE        	set 1,(hl)
588+  8F5A C9           	ret
589+  8F5B
590+  8F5B              ; ---------- ---------- ---------- ---------- ---------- ----------
591+  8F5B
592+  8F5B 24           Reaparece_abajo inc h
593+  8F5C 01 E0 17     	ld bc,$17e0
594+  8F5F A7           	and a
595+  8F60 ED 4A        	adc hl,bc
596+  8F62 22 D4 84     	ld (Posicion_actual),hl
597+  8F65 21 F5 84     	ld hl,Ctrl_0
598+  8F68 CB D6        	set 2,(hl)
599+  8F6A C9           	ret
600+  8F6B
601+  8F6B              ; ---------- ---------- ---------- ---------- ---------- ----------
602+  8F6B
603+  8F6B 01 E0 17     Reaparece_arriba ld bc,$17e0
604+  8F6E A7           	and a
605+  8F6F ED 42        	sbc hl,bc
606+  8F71 22 D4 84     	ld (Posicion_actual),hl
607+  8F74 21 F5 84     	ld hl,Ctrl_0
608+  8F77 CB DE        	set 3,(hl)
609+  8F79 C9           	ret
610+  8F7A
611+  8F7A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
612+  8F7A
613+  8F7A 2A DE 84     Reinicio ld hl,(Posicion_inicio)
614+  8F7D
615+  8F7D              ;	ld (Posicion_actual),hl
616+  8F7D 21 00 00     	ld hl,0
617+  8F80 22 D4 84     	ld (Posicion_actual),hl
618+  8F83
619+  8F83
620+  8F83 C9           	ret
# file closed: Direcciones.asm
602   8F84              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F84              ;	12/12/22
  2+  8F84              ;
  3+  8F84              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F84              ;	Fila superior "0", Columna izquierda "0".
  5+  8F84              ;
  6+  8F84              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F84              ;
  8+  8F84              ;	Modifica: A
  9+  8F84
 10+  8F84 C5           Genera_coordenadas push bc
 11+  8F85 E5           	push hl
 12+  8F86 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F89 7D           	ld a,l
 14+  8F8A E6 1F        	and $1f
 15+  8F8C 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F8F CD 0F 8C     	call calcula_tercio
 17+  8F92 47           	ld b,a
 18+  8F93 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F94 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F96 7D           	ld a,l
 21+  8F97 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F99 28 05        	jr z,2F
 23+  8F9B 0C           1 inc c
 24+  8F9C D6 20        	sub 32
 25+  8F9E 20 FB        	jr nz,1B
 26+  8FA0 0C           2 inc c
 27+  8FA1 04           	inc b
 28+  8FA2 05           	dec b
 29+  8FA3 28 04        	jr z,3F
 30+  8FA5 3E E0        	ld a,$e0
 31+  8FA7 10 F2        	djnz 1B
 32+  8FA9 79           3 ld a,c
 33+  8FAA 3D           	dec a
 34+  8FAB 32 E2 84     	ld (Coordenada_y),a
 35+  8FAE E1           	pop hl
 36+  8FAF C1           	pop bc
 37+  8FB0 C9           	ret
# file closed: Genera_coordenadas.asm
603   8FB1              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8FB1
  2+  8FB1
  3+  8FB1              ;   11/8/22
  4+  8FB1              ;
  5+  8FB1              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8FB1              ;
  7+  8FB1              ;   Mov_obj.asm
  8+  8FB1              ;
  9+  8FB1              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8FB1              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8FB1              ;
 12+  8FB1              ;   Codificación:
 13+  8FB1              ;
 14+  8FB1              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8FB1              ;
 16+  8FB1
 17+  8FB1 02 10 00     Izquierda db 2,%00010000,0
 18+  8FB4 02 20 00     Derecha db 2,%00100000,0
 19+  8FB7 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8FBB 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8FBF 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8FC3 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FC7 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FCB 60 42 60 40
 23+  8FCF 63
 24+  8FD0 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FD4 22 A3 80 A0
 25+  8FD8 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FDC 84 A0 83 A0
 26+  8FE0 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FE4 80 A3 22 A0
 27+  8FE8 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FEC 40 60 42 60
 28+  8FF0 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FF4
 30+  8FF4 B4 8F        Indice_mov_Badsat defw Derecha
 31+  8FF6 BB 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FF8 C3 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FFA B7 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FFC
 35+  8FFC 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FFF A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  9000 28 02            jr z,1F
 38+  9002 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  9004
 40+  9004 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  9007 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  9009 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  900C              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  900C 2A F9 84         ld hl,(Puntero_mov)
 45+  900F 7E               ld a,(hl)
 46+  9010 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  9013 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  9014 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  9017
 50+  9017 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  901A A7               and a
 52+  901B 20 0C            jr nz,12F
 53+  901D 2A F9 84         ld hl,(Puntero_mov)
 54+  9020 7E               ld a,(hl)
 55+  9021 A7               and a
 56+  9022 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  9024
 58+  9024 E6 0F            and $0f
 59+  9026 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  9029              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  9029 2A F9 84     12 ld hl,(Puntero_mov)
 62+  902C CB 7E            bit 7,(hl)
 63+  902E 28 03            jr z,2F
 64+  9030 CD 5B 8C         call Mov_down
 65+  9033 2A F9 84     2 ld hl, (Puntero_mov)
 66+  9036 CB 76            bit 6,(hl)
 67+  9038 28 03            jr z,3F
 68+  903A CD 89 8C         call Mov_up
 69+  903D 2A F9 84     3 ld hl, (Puntero_mov)
 70+  9040 CB 6E            bit 5,(hl)
 71+  9042 28 03            jr z,4F
 72+  9044 CD B7 8C         call Mov_right
 73+  9047 2A F9 84     4 ld hl, (Puntero_mov)
 74+  904A CB 66            bit 4,(hl)
 75+  904C 28 03            jr z,5F
 76+  904E CD C3 8D         call Mov_left
 77+  9051
 78+  9051              ; ---------- --------- --------- ---------- ----------
 79+  9051
 80+  9051 3A FD 84     5 ld a,(Repetimos_db)
 81+  9054 A7               and a
 82+  9055 28 07            jr z,6F
 83+  9057 3D               dec a
 84+  9058 32 FD 84         ld (Repetimos_db),a
 85+  905B 28 01            jr z,6f
 86+  905D C9           11 ret
 87+  905E 21 FB 84     6 ld hl,Contador_db_mov
 88+  9061 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  9062 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  9065 23               inc hl
 91+  9066 22 F9 84         ld (Puntero_mov),hl
 92+  9069 18 F2            jr 11B
 93+  906B 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  906E 3A FC 84         ld a,(Incrementa_puntero)
 95+  9071 47               ld b,a
 96+  9072 23           8 inc hl
 97+  9073 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  9075 5E               ld e,(hl)
 99+  9076 23               inc hl
100+  9077 56               ld d,(hl)
101+  9078 EB               ex de,hl
102+  9079 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  907C 18 DF            jr 11B
104+  907E
105+  907E              ; ---------- --------- --------- ---------- ----------
106+  907E              ;
107+  907E              ;   11/8/22
108+  907E              ;
109+  907E              ;   Prepara_Puntero_mov
110+  907E
111+  907E E5           Prepara_Puntero_mov push hl
112+  907F D5               push de
113+  9080 2A F7 84         ld hl,(Puntero_indice_mov)
114+  9083 5E               ld e,(hl)
115+  9084 23               inc hl
116+  9085 56               ld d,(hl)
117+  9086 EB               ex de,hl
118+  9087 22 F9 84         ld (Puntero_mov),hl
119+  908A D1               pop de
120+  908B E1               pop hl
121+  908C C9               ret
122+  908D
123+  908D              ; ---------- --------- --------- ---------- ----------
124+  908D              ;
125+  908D              ;   11/8/22
126+  908D              ;
127+  908D              ;   Reinicia_el_movimiento
128+  908D
129+  908D CD 7E 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  9090 AF               xor a
131+  9091 32 FB 84         ld (Contador_db_mov),a
132+  9094 32 FC 84         ld (Incrementa_puntero),a
133+  9097 C3 FC 8F         jp Movimiento
134+  909A
135+  909A              ; ---------- --------- --------- ---------- ----------
136+  909A
137+  909A
138+  909A
139+  909A
140+  909A
141+  909A
142+  909A
143+  909A
144+  909A
145+  909A
146+  909A
147+  909A
148+  909A
149+  909A
150+  909A
151+  909A
152+  909A
153+  909A
# file closed: Patrones_de_mov.asm
604   909A              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  909A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  909A              ;
  3+  909A              ;	3/1/23
  4+  909A              ;
  5+  909A              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  909A
  7+  909A              ;	ADC HL,SP	LD (addr),SP
  8+  909A              ;	ADD HL,SP	LD SP,(addr)
  9+  909A              ;	ADD IX,SP	LD SP,nn
 10+  909A              ; 	ADD IY,SP	LD SP,HL
 11+  909A              ;				LD SP,IX
 12+  909A              ;	DEC SP		LD SP,IY
 13+  909A
 14+  909A              ;	EX (SP),HL
 15+  909A              ;	EX (SP),IX
 16+  909A              ;	EX (SP),IY
 17+  909A
 18+  909A              ;	INC SP
 19+  909A
 20+  909A
 21+  909A                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
605   7FC0
606   7FC0              	SAVESNA "Pruebas.sna", START
607   7FC0
608   7FC0
609   7FC0
# file closed: Banco_de_pruebas.asm
