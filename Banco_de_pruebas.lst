# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 55 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Base_de_datos_Sprites.asm"
# file opened: Base_de_datos_Sprites.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades
  7+  83C0
  8+  83C0 02 84        	defw Badsat
  9+  83C2 36 84        	defw Badsat2
 10+  83C4 6A 84        	defw Badsat3
 11+  83C6 9E 84        	defw Badsat4
 12+  83C8 CE 83        	defw Amadeus_db
 13+  83CA              ;	...
 14+  83CA              ;	...
 15+  83CA              ;	+ entidades ...
 16+  83CA
 17+  83CA 00 00        	defw 0
 18+  83CC 00 00        	defw 0
 19+  83CE
 20+  83CE              ; ---------- ---------- ---------- ---------- ----------
 21+  83CE
 22+  83CE 02 02        Amadeus_db db 2,2
 23+  83D0 00 00        	defw 0
 24+  83D2 00 00        	defw 0
 25+  83D4 00           	db 0
 26+  83D5
 27+  83D5 05           	db %00000101
 28+  83D6 00 83        	defw Indice_Amadeus
 29+  83D8 00 00        	defw 0
 30+  83DA CF 50        	defw $50cf
 31+  83DC 00 00 00     	db 0,0,0
 32+  83DF
 33+  83DF 02 02 00 00  	db 2,2,0,0
 34+  83E3
 35+  83E3 00 00        	db 0,0
 36+  83E5 00 00        	defw 0
 37+  83E7 00           	db 0
 38+  83E8 00 00        	db 0,0
 39+  83EA 00 00        	defw 0
 40+  83EC 00           	db 0
 41+  83ED
 42+  83ED 00 00        	db 0,0
 43+  83EF
 44+  83EF 00 00 00 00  	defw 0,0
 45+  83F3 00 00 00     	db 0,0,0
 46+  83F6
 47+  83F6 00 00        	defw 0
 48+  83F8 00 00        	defw 0
 49+  83FA 00           	db 0
 50+  83FB 00 00        	defw 0
 51+  83FD 00           	db 0
 52+  83FE
 53+  83FE 00 00 00 00  	defw 0,0
 54+  8402
 55+  8402              ; ---------- ---------- ---------- ---------- ----------
 56+  8402
 57+  8402 02 02        Badsat db 2,2
 58+  8404 00 00        	defw 0
 59+  8406 00 00        	defw 0
 60+  8408 00           	db 0
 61+  8409
 62+  8409 06           	db %00000110
 63+  840A 80 81        	defw Indice_Badsat_der
 64+  840C 00 00        	defw 0
 65+  840E A1 47        	defw $47a1
 66+  8410 00 00 00     	db 0,0,0
 67+  8413
 68+  8413 01 01 01 02  	db 1,1,1,2
 69+  8417
 70+  8417 00 00        	db 0,0
 71+  8419 00 00        	defw 0
 72+  841B 00           	db 0
 73+  841C 00 00        	db 0,0
 74+  841E 00 00        	defw 0
 75+  8420 00           	db 0
 76+  8421
 77+  8421 00 00        	db 0,0
 78+  8423
 79+  8423 CE 8F 00 00  	defw Indice_mov_Badsat,0
 80+  8427 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
 81+  842A
 82+  842A 00 00        	defw 0
 83+  842C 00 00        	defw 0
 84+  842E 00           	db 0
 85+  842F 00 00        	defw 0
 86+  8431 00           	db 0
 87+  8432
 88+  8432 00 00 00 00  	defw 0,0
 89+  8436
 90+  8436              ; ---------- ---------- ---------- ---------- ----------
 91+  8436
 92+  8436 02 02        Badsat2 db 2,2		                                  ; Filas/Columns
 93+  8438 00 00        	defw 0                                            ; Posicion_actual
 94+  843A 00 00        	defw 0
 95+  843C 00           	db 0                                              ; CTRL_DESPLZ
 96+  843D
 97+  843D 02           	db %00000010
 98+  843E 80 81        	defw Indice_Badsat_der	                          ; Indice_Sprite
 99+  8440 00 00        	defw 0                                            ; Puntero_DESPLZ
100+  8442 61 47        	defw $4761                                        ; Posicion_inicio
101+  8444 00 00 00     	db 0,0,0
102+  8447
103+  8447 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
104+  844B
105+  844B 00 00        	db 0,0
106+  844D 00 00        	defw 0
107+  844F 00           	db 0
108+  8450 00 00        	db 0,0
109+  8452 00 00        	defw 0
110+  8454 00           	db 0
111+  8455
112+  8455 00 00        	db 0,0
113+  8457
114+  8457 D0 8F 00 00  	defw Indice_mov_Badsat2,0                         ; Puntero_indice_mov / Puntero_mov.
115+  845B 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
116+  845E
117+  845E 00 00        	defw 0
118+  8460 00 00        	defw 0
119+  8462 00           	db 0
120+  8463 00 00        	defw 0
121+  8465 00           	db 0
122+  8466
123+  8466 00 00 00 00  	defw 0,0
124+  846A
125+  846A              ; ---------- ---------- ---------- ---------- ----------
126+  846A
127+  846A 02 02        Badsat3 db 2,2                                 		  ; Filas/Columns
128+  846C 00 00        	defw 0                                            ; Posicion_actual
129+  846E 00 00        	defw 0
130+  8470 00           	db 0                                              ; CTRL_DESPLZ
131+  8471
132+  8471 04           	db %00000100
133+  8472 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
134+  8474 00 00        	defw 0                                            ; Puntero_DESPLZ
135+  8476 7E 47        	defw $477e                                        ; Posicion_inicio
136+  8478 00 00 00     	db 0,0,0
137+  847B
138+  847B 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
139+  847F
140+  847F 00 00        	db 0,0
141+  8481 00 00        	defw 0
142+  8483 00           	db 0
143+  8484 00 00        	db 0,0
144+  8486 00 00        	defw 0
145+  8488 00           	db 0
146+  8489
147+  8489 00 00        	db 0,0
148+  848B
149+  848B D2 8F 00 00  	defw Indice_mov_Badsat3,0                        ; Puntero_indice_mov / Puntero_mov.
150+  848F 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
151+  8492
152+  8492 00 00        	defw 0
153+  8494 00 00        	defw 0
154+  8496 00           	db 0
155+  8497 00 00        	defw 0
156+  8499 00           	db 0
157+  849A
158+  849A 00 00 00 00  	defw 0,0
159+  849E
160+  849E              ; ---------- ---------- ---------- ---------- ----------
161+  849E
162+  849E 02 02        Badsat4 db 2,2                                  	  ; Filas/Columns
163+  84A0 00 00        	defw 0                                            ; Posicion_actual
164+  84A2 00 00        	defw 0
165+  84A4 00           	db 0                                              ; CTRL_DESPLZ
166+  84A5
167+  84A5 01           	db %00000001
168+  84A6 00 80        	defw Indice_Badsat_izq                            ; Indice_Sprite
169+  84A8 00 00        	defw 0                                            ; Puntero_DESPLZ
170+  84AA BE 47        	defw $47be                                        ; Posicion_inicio
171+  84AC 00 00 00     	db 0,0,0
172+  84AF
173+  84AF 01 01 01 01  	db 1,1,1,1                                        ; Vel_right, left, up, down.
174+  84B3
175+  84B3 00 00        	db 0,0
176+  84B5 00 00        	defw 0
177+  84B7 00           	db 0
178+  84B8 00 00        	db 0,0
179+  84BA 00 00        	defw 0
180+  84BC 00           	db 0
181+  84BD
182+  84BD 00 00        	db 0,0
183+  84BF
184+  84BF D4 8F 00 00  	defw Indice_mov_Badsat4,0                        ; Puntero_indice_mov / Puntero_mov.
185+  84C3 00 00 00     	db 0,0,0										  ; 50 Bytes de información por Sprite.
186+  84C6
187+  84C6 00 00        	defw 0
188+  84C8 00 00        	defw 0
189+  84CA 00           	db 0
190+  84CB 00 00        	defw 0
191+  84CD 00           	db 0
192+  84CE
193+  84CE 00 00 00 00  	defw 0,0
194+  84D2
# file closed: Base_de_datos_Sprites.asm
 21   84D2
 22   84D2              ; ******************************************************************************************************************************************************************************************
 23   84D2              ; Constantes.
 24   84D2              ; ******************************************************************************************************************************************************************************************
 25   84D2              ;
 26   84D2              ; 8/11/22
 27   84D2              ;
 28   84D2              ; Constantes generales.
 29   84D2              ;
 30   84D2
 31   84D2              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D2              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D2              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D2              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D2              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D2
 37   84D2              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D2              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D2
 40   84D2
 41   84D2              ; ******************************************************************************************************************************************************************************************
 42   84D2              ; Variables.
 43   84D2              ; ******************************************************************************************************************************************************************************************
 44   84D2              ;
 45   84D2              ; 10/11/22
 46   84D2              ;
 47   84D2              ; Variables de DRAW. (Motor principal).
 48   84D2              ;
 49   84D2
 50   84D2 02           Filas db 2												; Filas. [DRAW]
 51   84D3 02           Columns db 2  											; Nº de columnas. [DRAW]
 52   84D4 00 00        Posicion_actual defw $0000								; Dirección actual del Sprite. [DRAW]
 53   84D6 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 54   84D8 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 55   84D9              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 56   84D9              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 57   84D9              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 58   84D9 06           Attr db %00000110										; Atributos de la entidad:
 59   84DA
 60   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 61   84DA              ;
 62   84DA              ;	COLORES: 0 ..... NEGRO
 63   84DA              ;    		 1 ..... AZUL
 64   84DA              ; 			 2 ..... ROJO
 65   84DA              ;			 3 ..... MAGENTA
 66   84DA              ; 			 4 ..... VERDE
 67   84DA              ; 			 5 ..... CIAN
 68   84DA              ;			 6 ..... AMARILLO
 69   84DA              ; 			 7 ..... BLANCO
 70   84DA
 71   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 72   84DC 00 00        Puntero_DESPLZ defw 0
 73   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW]
 74   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 75   84E1 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 76   84E2 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 77   84E3
 78   84E3              ; Variables de objeto. (Características).
 79   84E3
 80   84E3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 81   84E4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 82   84E5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 83   84E6 02           Vel_down db 2 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 84   84E7
 85   84E7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 86   84E9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 87   84EB 00 00        	defw 0
 88   84ED 00           	db 0
 89   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 90   84F0 00 00        	defw 0
 91   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84F4 00           	db 0
 93   84F5
 94   84F5              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
 95   84F5
 96   84F5 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
 97   84F6              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
 98   84F6              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
 99   84F6              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
100   84F6              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
101   84F6              ;
102   84F6              ; 														DESCRIPCIÖN:
103   84F6              ;
104   84F6              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
105   84F6              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
106   84F6              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
107   84F6              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
108   84F6              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
109   84F6              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
110   84F6              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
111   84F6              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
112   84F6              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
113   84F6              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
114   84F6              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
115   84F6              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
116   84F6              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
117   84F6              ;
118   84F6              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
119   84F6              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
120   84F6              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
121   84F6
122   84F6 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
123   84F7
124   84F7              ; Movimiento.
125   84F7
126   84F7 CE 8F        Puntero_indice_mov defw Indice_mov_Badsat
127   84F9 00 00        Puntero_mov defw 0
128   84FB 00           Contador_db_mov db 0
129   84FC 00           Incrementa_puntero db 0
130   84FD 00           Repetimos_db db 0
131   84FE
132   84FE
133   84FE              ; Variables de funcionamiento. [DRAW].
134   84FE
135   84FE 00 00        Puntero_datas defw 0 									;! Borraremos esta merda !!!!!
136   8500 00           Columnas db 0
137   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
138   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
139   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
140   8504
141   8504
142   8504              ; Cajas. Almacenes.
143   8504
144   8504 00 00        Caja_de_DESPLZ defw 0								   	; Caja de memoria donde almacenaremos los bytes del Sprite una vez desplazado. 3x4, (Filas/Columnas).(12*8). [DRAW]/[Mov_left]
145   8506 00 00        Caja_de_BORRADO defw 0 									; Caja de memoria donde tendremos una copia de respaldo de Caja_de_DESPLZ. Se utiliza para borrar la entidad, (función XOR). [DRAW]/[Mov_left]
146   8508
147   8508              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
148   8508
149   8508              ; Gestión de ENTIDADES.
150   8508
151   8508 00 00        Puntero_store_entidades defw 0
152   850A 00 00        Puntero_restore_entidades defw 0
153   850C 00 00        Indice_restore defw 0
154   850E
155   850E              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
156   850E
157   850E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   850F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8510              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8510              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8510              ;														; _ (Numero_de_malotes)="0".
162   8510 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8512              ;														; _variable para almacenar lo posición del puntero_
164   8512              ; 														; _de pila, SP.
165   8512 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8514              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8514 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8516              ;														; _el snapshot de los registros de la siguiente entidad.
169   8516              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8516
171   8516              ; Gestión de FRAMES.
172   8516
173   8516 00           Switch db 0
174   8517
175   8517              ; Variables de Raster y localización en pantalla.
176   8517
177   8517 00 FF        Temp_Raster defw $ff00
178   8519
179   8519              ; Rutina principal *************************************************************************************************************************************************************************
180   8519              ;
181   8519              ;	14/11/22
182   8519
183   8519 31 FF FF     START ld sp,$ffff
184   851C
185   851C 3E A0        	ld a,$a0
186   851E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8520 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8522 F3           	DI
189   8523
190   8523 3E 01        	ld a,1
191   8525 D3 FE        	out ($fe),a
192   8527
193   8527 3E 07        	ld a,%00000111
194   8529 CD 59 8C     	call Cls
195   852C
196   852C              ;	call Pinta_FILAS
197   852C
198   852C CD 8F 86     	call Pulsa_ENTER
199   852F
200   852F              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
201   852F              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
202   852F              ;	Pintamos el resto de entidades:
203   852F
204   852F CD 02 86     	call Inicia_punteros_de_entidades
205   8532 21 0E 85     	ld hl,Numero_de_entidades
206   8535 46           	ld b,(hl)
207   8536
208   8536 C5           1 push bc  												; Guardo el contador de entidades.
209   8537 CD 31 86      	call Inicia_Puntero_objeto
210   853A CD E6 86     	call Draw
211   853D CD A0 7F     	call Guarda_foto_registros
212   8540 CD 4E 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
213   8543 C1           	pop bc
214   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
215   8546
216   8546              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
217   8546
218   8546 CD 02 86     	call Inicia_punteros_de_entidades
219   8549 CD 7D 86     	call Restore_Primera_entidad
220   854C
221   854C 3A 0E 85     	ld a,(Numero_de_entidades)
222   854F 32 0F 85     	ld (Numero_de_malotes),a
223   8552
224   8552 FB           2 ei
225   8553 18 FD        	jr 2B
226   8555
227   8555              ; -----------------------------------------------------------------------------------
228   8555
229   8555              Frame
230   8555
231   8555              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
232   8555              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
233   8555
234   8555 3E 07            ld a,7
235   8557 D3 FE            out ($fe),a
236   8559
237   8559 CD E6 89     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
238   855C
239   855C 3E 01            ld a,1
240   855E D3 FE            out ($fe),a
241   8560
242   8560              ; ----------------------------------------------------------------------
243   8560
244   8560 21 00 70     	ld hl,Album_de_fotos
245   8563 22 14 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
246   8566              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
247   8566 3A 0E 85         ld a,(Numero_de_entidades)
248   8569 47               ld b,a
249   856A
250   856A C5           2 push bc
251   856B
252   856B CD 91 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
253   856E
254   856E 3A F5 84      	ld a,(Ctrl_0)
255   8571 CB 67        	bit 4,a
256   8573 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
257   8575
258   8575 CD C9 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
259   8578
260   8578 21 F5 84     	ld hl,Ctrl_0
261   857B CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
262   857D
263   857D CD 4E 86     1 call Store_Restore_entidades
264   8580
265   8580 C1           	pop bc
266   8581 10 E7        	djnz 2B
267   8583
268   8583 CD 02 86     	call Inicia_punteros_de_entidades
269   8586 CD 7D 86     	call Restore_Primera_entidad
270   8589 CD 18 86     	call Calcula_numero_de_malotes
271   858C
272   858C 3E 00        	ld a,0
273   858E D3 FE        	out ($fe),a
274   8590
275   8590 C9           	ret
276   8591
277   8591              ; --------------------------------------------------------------------------------------------------------------
278   8591              ;
279   8591              Mov_obj
280   8591
281   8591              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
282   8591
283   8591 AF           	xor a
284   8592 32 F6 84     	ld (Obj_dibujado),a
285   8595 CD D3 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
286   8598              ;														; Obj_dibujado="0".
287   8598              ; Movemos Amadeus o enemigos...
288   8598
289   8598 3A F5 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
290   859B CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
291   859D C4 A3 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
292   85A0
293   85A0 3A F5 84     	ld a,(Ctrl_0)
294   85A3 CB 77        	bit 6,a
295   85A5 CC D6 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
296   85A8
297   85A8 3A F5 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
298   85AB CB 67        	bit 4,a
299   85AD C8           	ret z
300   85AE
301   85AE              ; ---------
302   85AE
303   85AE 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
304   85B0 32 F6 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
305   85B3 CD D3 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
306   85B6
307   85B6 CD EA 85         call Repone_borrar
308   85B9
309   85B9              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
310   85B9
311   85B9 CD BC 89     	call Prepara_draw
312   85BC CD F6 88     	call calcula_CColumnass
313   85BF CD 2D 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
314   85C2 CD 82 89     	call Define_rutina_de_impresion
315   85C5 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
316   85C8
317   85C8 C9           	ret
318   85C9
319   85C9              ; --------------------------------------------------------------------------------------------------------------
320   85C9              ;
321   85C9 CD F6 85     Borra_Pinta_obj call Repone_pintar
322   85CC CD E6 86     	call Draw
323   85CF CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
324   85D2 C9           	ret
325   85D3
326   85D3              ; --------------------------------------------------------------------------------------------------------------
327   85D3
328   85D3 21 D2 84     Prepara_var_pintado_borrado	ld hl,Filas
329   85D6 3A F6 84     	ld a,(Obj_dibujado)
330   85D9 A7           	and a
331   85DA 28 05        	jr z,1F
332   85DC 11 EE 84     	ld de,Variables_de_pintado
333   85DF 18 03        	jr 2F
334   85E1 11 E7 84     1 ld de,Variables_de_borrado
335   85E4 01 07 00     2 ld bc,7
336   85E7 ED B0        	ldir
337   85E9 C9           	ret
338   85EA
339   85EA 21 E7 84     Repone_borrar ld hl,Variables_de_borrado
340   85ED 11 D2 84     	ld de,Filas
341   85F0 01 07 00     	ld bc,7
342   85F3 ED B0        	ldir
343   85F5 C9           	ret
344   85F6
345   85F6 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
346   85F9 11 D2 84     	ld de,Filas
347   85FC 01 07 00     	ld bc,7
348   85FF ED B0        	ldir
349   8601 C9           	ret
350   8602
351   8602              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
352   8602              ;	ld (Caja_de_BORRADO),hl
353   8602              ;	ret
354   8602
355   8602              ; *************************************************************************************************************************************************************
356   8602              ;
357   8602              ; 8/1/23
358   8602              ;
359   8602              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
360   8602              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
361   8602              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
362   8602
363   8602              ; Destruye HL y DE !!!!!
364   8602
365   8602 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
366   8605 CD 2B 86         call Extrae_address
367   8608 22 08 85         ld (Puntero_store_entidades),hl
368   860B 21 C2 83     	ld hl,Indice_de_entidades+2
369   860E 22 0C 85     	ld (Indice_restore),hl
370   8611 CD 2B 86     	call Extrae_address
371   8614 22 0A 85     	ld (Puntero_restore_entidades),hl
372   8617 C9               ret
373   8618
374   8618              ; -------------------------------------------------------------------------------------------------------------
375   8618              ;
376   8618              ; 7/1/23
377   8618              ;
378   8618
379   8618 2A 14 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
380   861B AF           	xor a
381   861C 67           	ld h,a
382   861D 7D           	ld a,l
383   861E D6 06        1 sub 6
384   8620 28 03        	jr z,2F
385   8622 24           	inc h
386   8623 18 F9        	jr 1B
387   8625 24           2 inc h
388   8626 7C           	ld a,h
389   8627 32 0F 85     	ld (Numero_de_malotes),a
390   862A C9           	ret
391   862B
392   862B              ; *************************************************************************************************************************************************************
393   862B              ;
394   862B              ; 20/10/22
395   862B              ;
396   862B              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
397   862B              ;
398   862B              ; Destruye el puntero y DE !!!!!
399   862B
400   862B 5E           Extrae_address ld e,(hl)
401   862C 23           	inc hl
402   862D 56           	ld d,(hl)
403   862E 2B           	dec hl
404   862F EB           	ex de,hl
405   8630 C9           	ret
406   8631
407   8631              ; *************************************************************************************************************************************************************
408   8631              ;
409   8631              ;	21/9/22
410   8631              ;
411   8631              ;   Destruye HL y BC !!!!!,
412   8631
413   8631 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
414   8634 22 DC 84     	ld (Puntero_DESPLZ),hl
415   8637 CD 2B 86     	call Extrae_address
416   863A 22 D6 84     	ld (Puntero_objeto),hl
417   863D
418   863D              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
419   863D
420   863D 21 10 83     	ld hl,Amadeus
421   8640 ED 4B D6 84  	ld bc,(Puntero_objeto)
422   8644 B7 ED 42     	sub hl,bc
423   8647 C0           	ret nz
424   8648
425   8648 21 F5 84     	ld hl,Ctrl_0
426   864B CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
427   864D
428   864D C9            	ret 												; _de nuestra nave en los extremos.
429   864E
430   864E              ; *************************************************************************************************************************************************************
431   864E              ;
432   864E              ;	8/1/23
433   864E              ;
434   864E              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
435   864E              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
436   864E
437   864E              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
438   864E              ;	_de la 2ª y 3ª entidad respectivamente.
439   864E
440   864E
441   864E
442   864E              Store_Restore_entidades
443   864E
444   864E E5           	push hl
445   864F D5           	push de
446   8650 C5            	push bc
447   8651
448   8651              ;	STORE !!!!!
449   8651
450   8651 21 D2 84     	ld hl,Filas
451   8654 ED 5B 08 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
452   8658 01 36 00     	ld bc,54
453   865B ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
454   865D
455   865D              ;	Incrementa STORE y ejecuta RESTORE !!!!!
456   865D
457   865D 2A 0A 85     	ld hl,(Puntero_restore_entidades)
458   8660 22 08 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
459   8663 11 D2 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
460   8666 01 36 00     	ld bc,54
461   8669 ED B0        	ldir
462   866B
463   866B              ;	Incrementa RESTORE !!!!!
464   866B
465   866B 2A 0C 85         ld hl,(Indice_restore)
466   866E 23           	inc hl
467   866F 23           	inc hl
468   8670 22 0C 85     	ld (Indice_restore),hl
469   8673 CD 2B 86         call Extrae_address
470   8676 22 0A 85         ld (Puntero_restore_entidades),hl
471   8679
472   8679 C1           	pop bc
473   867A D1           	pop de
474   867B E1           	pop hl
475   867C
476   867C C9           	ret
477   867D
478   867D              ; **************************************************************************************************
479   867D              ;
480   867D              ;	29/10/22
481   867D              ;
482   867D              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
483   867D
484   867D E5           Restore_Primera_entidad push hl
485   867E D5           	push de
486   867F C5            	push bc
487   8680 2A 08 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
488   8683 11 D2 84     	ld de,Filas
489   8686 01 36 00     	ld bc,54
490   8689 ED B0        	ldir
491   868B C1           	pop bc
492   868C D1           	pop de
493   868D E1           	pop hl
494   868E C9           	ret
495   868F
496   868F              ; *************************************************************************************************************************************************************
497   868F              ;
498   868F              ; Teclado.
499   868F
500   868F 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
501   8691 DB FE        	in a,($fe)
502   8693 E6 01        	and $01
503   8695 28 02        	jr z,1f
504   8697 18 F6        	jr Pulsa_ENTER
505   8699 C9           1 ret
506   869A
507   869A              ; **************************************************************************************************
508   869A              ;
509   869A              ; Temporización.
510   869A
511   869A              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
512   869A              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
513   869A              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
514   869A              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
515   869A
516   869A              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
517   869A              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
518   869A              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
519   869A
520   869A              ; A partir de $4f61 no hace falta DELAY.
521   869A
522   869A              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
523   869A
524   869A 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
525   869D 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
526   869E 78           	LD A,B
527   869F A7           	AND A
528   86A0 20 FB        	JR NZ,wait
529   86A2 C9           	RET
530   86A3
531   86A3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
532   86A3              ;
533   86A3              ;	21/4/22
534   86A3
535   86A3              Movimiento_Amadeus
536   86A3
537   86A3 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
538   86A5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
539   86A7 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
540   86A9 CC D8 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
541   86AC 3E F7        	ld a,$f7
542   86AE DB FE        	in a,($fe)
543   86B0 E6 01        	and $01
544   86B2 C8           	ret z
545   86B3 3E F7        	ld a,$f7
546   86B5 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
547   86B7 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
548   86B9 CC C9 8C     	call z,Mov_right										;			"			"			"			"			"			"			"			"
549   86BC C9               ret
550   86BD
551   86BD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
552   86BD
553   86BD              ; Pinta indicadores de FILAS. ------------------------------------------------------
554   86BD
555   86BD 21 10 40     Pinta_FILAS ld hl,$4010
556   86C0              ;	ld b,9
557   86C0              ;2 push hl
558   86C0              ;	push bc
559   86C0 06 BF        	ld b,$bf
560   86C2 36 80        1 ld (hl),%10000000
561   86C4 CD C8 89     	call NextScan
562   86C7 10 F9        	djnz 1B
563   86C9              ;	pop bc
564   86C9              ;	pop hl
565   86C9              ;	inc l
566   86C9              ;	djnz 2B
567   86C9
568   86C9 06 03        	ld b,3
569   86CB 21 00 47         ld hl,$4700
570   86CE CD D4 86     3 call Bucle_1
571   86D1 10 FB            djnz 3B
572   86D3 C9               ret
573   86D4
574   86D4 C5           Bucle_1 push bc
575   86D5 E5                   push hl
576   86D6 D1                   pop de
577   86D7 13                   inc de
578   86D8 01 FF 00             ld bc,255
579   86DB 36 FF                ld (hl),255
580   86DD ED B0                ldir
581   86DF 23                   inc hl
582   86E0 3E 07                ld a,7
583   86E2 84                   add a,h
584   86E3 67                   ld h,a
585   86E4 C1                   pop bc
586   86E5 C9                   ret
587   86E6
588   86E6              ; ---------------------------------------------------------------
589   86E6
590   86E6              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  86E6              ; ******************************************************************************************************************************************************************************************
  2+  86E6              ;
  3+  86E6              ; 17/08/22
  4+  86E6              ;
  5+  86E6              ; DRAW. ************************************************************************************************************************************************************************************
  6+  86E6
  7+  86E6 CD BC 89     Draw call Prepara_draw
  8+  86E9 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  86EA A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  86EB 28 05        	jr z,2F
 11+  86ED 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  86F0 18 0C        	jr 1F
 13+  86F2 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  86F5 22 D4 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  86F8 CD 83 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  86FB              ;													; _la esquina superior izquierda de la pantalla.
 17+  86FB CD 58 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  86FE 3A F5 84     1 ld a,(Ctrl_0)
 19+  8701 CB 6F        	bit 5,a
 20+  8703 20 00        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8705
 22+  8705              ;	call Comprueba_limite_horizontal
 23+  8705              ;	call Comprueba_limite_vertical
 24+  8705
 25+  8705              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8705
 27+  8705 CD F6 88     3 call calcula_CColumnass
 28+  8708 CD 2D 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  870B CD 82 89     	call Define_rutina_de_impresion
 30+  870E
 31+  870E 3A F5 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8711 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8713 32 F5 84     	ld (Ctrl_0),a
 34+  8716
 35+  8716 C9           	ret
 36+  8717
 37+  8717              ; *******************************************************************************************************************************************************************************************
 38+  8717              ;	23/8/22
 39+  8717              ;
 40+  8717              ; 	Comprueba_limite_horizontal.
 41+  8717              ;
 42+  8717
 43+  8717 3A F6 84     Comprueba_limite_horizontal ld a,(Obj_dibujado)
 44+  871A A7           	and a
 45+  871B C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
 46+  871C
 47+  871C 3A F5 84     	ld a,(Ctrl_0)          							; Si no hemos desaparecido por arriba o por abajo, saltamos a ^14F^ para comprobar_
 48+  871F CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado el (Limite_horizontal), (seguimos con la rutina).
 49+  8721 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 50+  8723
 51+  8723 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 52+  8725 32 F5 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 53+  8728 18 09            jr 6F
 54+  872A CB 5F        1 bit 3,a
 55+  872C 28 0D            jr z,2F
 56+  872E E6 F7            and $f7
 57+  8730 32 F5 84         ld (Ctrl_0),a
 58+  8733 CD 83 88     6 call Inicializacion
 59+  8736 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
 60+  8737 08           	ex af,af
 61+  8738 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
 62+  8739 18 56            jr 5F
 63+  873B E5           2 push HL						        			; Guardo el puntero de pantalla, HL en la pila.
 64+  873C
 65+  873C              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 66+  873C              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 67+  873C
 68+  873C EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 69+  873D 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 70+  8740 CD 21 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 71+  8743 67           	ld h,a
 72+  8744 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 73+  8745 CD 21 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 74+  8748 67           	ld h,a
 75+  8749 A7           	and a
 76+  874A ED 52        	sbc hl,de 										; Posicíon - Límite.
 77+  874C
 78+  874C 08           	ex af,af 										; Averiguamos de que mitad de la pantalla partimos.
 79+  874D FE 02        	cp 2
 80+  874F 38 1C        	jr c,3F
 81+  8751 28 1A        	jr z,3F
 82+  8753
 83+  8753 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8754 28 21            jr z,7F
 85+  8756 38 1F            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 86+  8758              ;	ld e,0
 87+  8758 E1           	pop hl
 88+  8759
 89+  8759              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8759              ; _para indicar con E="2" en caso necesario.
 91+  8759
 92+  8759 E5               push hl
 93+  875A C5               push bc
 94+  875B
 95+  875B CD 21 8C     	call calcula_tercio
 96+  875E FE 01        	cp 1
 97+  8760 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8762
 99+  8762 CD 92 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
100+  8765 28 26            jr z,9F
101+  8767 38 24            jr c,9F
102+  8769 1E 00        11 ld e,0
103+  876B 18 22            jr 8F
104+  876D
105+  876D 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
106+  876E 28 07        	jr z, 7F
107+  8770 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
108+  8772 1E 00         	ld e,0
109+  8774 E1           	pop hl
110+  8775 18 04        	jr 4F
111+  8777 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
112+  8779 18 15            jr 10F
113+  877B
114+  877B              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
115+  877B              ; _para indicar con E="2" en caso necesario.
116+  877B
117+  877B E5           4 push hl
118+  877C C5               push bc
119+  877D
120+  877D CD 21 8C     	call calcula_tercio
121+  8780 FE 01        	cp 1
122+  8782 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
123+  8784
124+  8784 CD 92 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
125+  8787 28 04            jr z,9F
126+  8789 30 02            jr nc,9F
127+  878B 18 02        	jr 8F
128+  878D 1E 02        9 ld e,2
129+  878F C1           8 pop bc
130+  8790 E1           10 pop hl
131+  8791 C9           5 ret
132+  8792
133+  8792              ; --------------------
134+  8792              ;
135+  8792              ; 25/08/22
136+  8792
137+  8792 CD 21 8C     Comprueba_centro call calcula_tercio
138+  8795 67               ld h,a
139+  8796 08           	ex af,af
140+  8797 FE 02        	cp 2
141+  8799 38 07        	jr c,1F
142+  879B 28 05        	jr z,1F
143+  879D 01 A0 01     	ld bc,$01a0 								  	 ; !!!!! CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
144+  87A0 18 03        	jr 2F
145+  87A2 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
146+  87A5 08           2 ex af,af
147+  87A6 A7               and a
148+  87A7 ED 42            sbc hl,bc
149+  87A9 C9               ret
150+  87AA
151+  87AA              ; *********************************************************************************************************************************************************************************************
152+  87AA              ;
153+  87AA              ;   16/8/22
154+  87AA              ;
155+  87AA              ;	Comprueba_limite_vertical
156+  87AA              ;
157+  87AA              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
158+  87AA              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
159+  87AA              ;
160+  87AA
161+  87AA 3A F6 84     Comprueba_limite_vertical ld a,(Obj_dibujado)
162+  87AD A7           	and a
163+  87AE C0           	ret nz   										; Salimos de la rutina si estamos borrando el objeto, (Obj_dibujado)="1".
164+  87AF
165+  87AF 7D           	ld a,l
166+  87B0 E6 1F        	and $1F
167+  87B2 57           	ld d,a
168+  87B3 3A 03 85     	ld a,(Limite_vertical)
169+  87B6 BA           	cp d 											; Límite - Posición.
170+  87B7
171+  87B7 08           	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
172+  87B8 CB 47        	bit 0,a
173+  87BA 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
174+  87BC
175+  87BC              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
176+  87BC
177+  87BC 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
178+  87BD 38 2B        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando C.
179+  87BF
180+  87BF               ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
181+  87BF              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
182+  87BF
183+  87BF 3A E1 84         ld a,(Coordenada_X)
184+  87C2 16 0F            ld d,Centro_izquierda
185+  87C4 A7               and a
186+  87C5 92               sub d 											 ; Posición - Centro_izquierda.
187+  87C6
188+  87C6 28 21            jr z,3F
189+  87C8 30 1F            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
190+  87CA              ;                                                    ; _salimos sin modificar nada.
191+  87CA 18 0E            jr 2F
192+  87CC
193+  87CC 08           1 ex af,af 											 ; LADO DERECHO !!!!!!!!!!
194+  87CD 30 1B        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
195+  87CF
196+  87CF              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
197+  87CF              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
198+  87CF
199+  87CF 3A E1 84         ld a,(Coordenada_X)
200+  87D2 16 10            ld d,Centro_derecha
201+  87D4 A7               and a
202+  87D5 92               sub d
203+  87D6
204+  87D6 28 11            jr z,3F
205+  87D8 38 0F            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
206+  87DA              ;                                                    ; _salimos sin modificar nada.
207+  87DA CB 43        2 bit 0,e
208+  87DC 28 0B            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
209+  87DE C5           	push bc
210+  87DF CD 72 88         call Modificaccionne
211+  87E2 C1           	pop bc
212+  87E3 CD 83 88         call Inicializacion
213+  87E6 F5               push af	 										 ; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
214+  87E7 08           	ex af,af
215+  87E8 F1           	pop af 											 ; Ahora tengo (Cuad_objeto) en A y A´.
216+  87E9 C9           3 ret 				 								 ; Salimos de la rutina.
217+  87EA
218+  87EA              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
219+  87EA
220+  87EA C5           4 push bc
221+  87EB 01 D3 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
222+  87EE 0A           	ld a,(bc)
223+  87EF 3D           	dec a
224+  87F0 47           	ld b,a 											 ; Columnas-1 en B.
225+  87F1 7D           	ld a,l
226+  87F2 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
227+  87F3 CB 47        	bit 0,a
228+  87F5 28 03        	jr z,5F
229+  87F7 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
230+  87F8 18 2E        	jr 7F
231+  87FA
232+  87FA              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
233+  87FA
234+  87FA 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
235+  87FB F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
236+  87FC 3A F5 84     	ld a,(Ctrl_0)
237+  87FF CB 4F        	bit 1,a
238+  8801 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
239+  8803 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
240+  8804
241+  8804              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
242+  8804
243+  8804 1C               inc e
244+  8805 1D               dec e
245+  8806 20 07            jr nz,12F
246+  8808 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
247+  8809 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
248+  880A 22 D4 84     	ld (Posicion_actual),hl
249+  880D 18 44        13 jr 9F
250+  880F
251+  880F CB 43        12 bit 0,e
252+  8811 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
253+  8813              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
254+  8813 C1           	pop bc
255+  8814 18 D3        	jr 3B
256+  8816
257+  8816 80           14 add b
258+  8817 6F               ld l,a
259+  8818 22 D4 84     	ld (Posicion_actual),hl
260+  881B CD 72 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
261+  881E 18 33            jr 9F 											 ; _inicializamos y salimos.
262+  8820
263+  8820 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
264+  8822 32 F5 84         ld (Ctrl_0),a
265+  8825 F1           	pop af
266+  8826 18 2B        	jr 9F
267+  8828
268+  8828              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
269+  8828
270+  8828 F5           7 push af
271+  8829 3A F5 84     	ld a,(Ctrl_0)
272+  882C CB 47        	bit 0,a
273+  882E 20 1D        	jr nz,8F
274+  8830 F1           	pop af
275+  8831
276+  8831              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
277+  8831
278+  8831 1C           	inc e
279+  8832 1D               dec e
280+  8833 20 07            jr nz,10F
281+  8835
282+  8835 90           	sub b
283+  8836 6F               ld l,a
284+  8837 22 D4 84     	ld (Posicion_actual),hl
285+  883A 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
286+  883C              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
287+  883C CB 43        10 bit 0,e
288+  883E 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
289+  8840              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
290+  8840 C1           	pop bc
291+  8841 18 A6        	jr 3B
292+  8843
293+  8843 90           16 sub b
294+  8844 6F               ld l,a
295+  8845 22 D4 84     	ld (Posicion_actual),hl
296+  8848 CD 72 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
297+  884B 18 06            jr 9F
298+  884D
299+  884D E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
300+  884F 32 F5 84         ld (Ctrl_0),a
301+  8852 F1           	pop af
302+  8853
303+  8853 C1           9 pop bc
304+  8854              ;	ld e,0
305+  8854 CD 83 88         call Inicializacion
306+  8857 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
307+  8858 08           	ex af,af
308+  8859 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
309+  885A 18 8D            jr 3B
310+  885C
311+  885C              ; --------------------
312+  885C
313+  885C              Modifica_Pos_actual
314+  885C
315+  885C              ;	call Calcula_scanlines_totales  ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
316+  885C 05               dec B                                           ; Scanlines-1 en B.
317+  885D CD D7 89     1 call PreviousScan
318+  8860 10 FB            djnz 1B
319+  8862 22 D4 84     	ld (Posicion_actual),hl
320+  8865 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
321+  8866 C9           	ret
322+  8867
323+  8867              ; --------------------
324+  8867
325+  8867              Modifica_Pos_actual2
326+  8867
327+  8867              ;	call Calcula_scanlines_totales ; Ahora tenemos el nº total de scanlines en B, DE y DE´.
328+  8867 05               dec B                                           ; Scanlines-1 en B.
329+  8868 CD C8 89     1 call NextScan
330+  886B 10 FB            djnz 1B
331+  886D 22 D4 84     	ld (Posicion_actual),hl
332+  8870 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
333+  8871 C9           	ret
334+  8872
335+  8872              ; --------------------
336+  8872
337+  8872              ; [Calcula_scanlines_totales] DESTRUYE !!!!! BC, DE y DE´.
338+  8872              ; [PreviousScan] y [NextScan] DESTRUYE !!!!! AF y HL.
339+  8872
340+  8872 08           Modificaccionne ex af,af
341+  8873 FE 02            cp 2
342+  8875 F5               push af                                         ; Guardo el resultado de la comparación.
343+  8876 08               ex af,af                                        ; Vuelvo a guardar (Cuad_objeto) en A´.
344+  8877 F1               pop af                                          ; Resultado de la comparación en AF. Si estamos en la mitad superior de la pantalla, call Modifica_Pos_actual.
345+  8878 CC 5C 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
346+  887B DC 5C 88         call c,Modifica_Pos_actual
347+  887E C8           	ret z
348+  887F CD 67 88         call Modifica_Pos_actual2
349+  8882 C9               ret
350+  8883
351+  8883              ; *************************************************************************************************************************************************************************************************
352+  8883              ;
353+  8883              ;	13/8/22
354+  8883              ;
355+  8883              ;	Inicializacion
356+  8883              ;
357+  8883              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
358+  8883              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
359+  8883              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
360+  8883              ;
361+  8883              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
362+  8883              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
363+  8883              ;	_ desaparece/aparece.
364+  8883
365+  8883              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
366+  8883              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
367+  8883              ;
368+  8883              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
369+  8883              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
370+  8883              ; 		   [E] ="0"
371+  8883
372+  8883              ; 	OUTPUT: DESTRUYE [AF] y [D].
373+  8883
374+  8883 CD 21 8C     Inicializacion call calcula_tercio
375+  8886 28 36        	jr z,primit
376+  8888 E6 02        	and 2
377+  888A 20 07        	jr nz,segmit
378+  888C 7D           	ld a,l
379+  888D FE 7F        	cp $7f
380+  888F 38 2D        	jr c,primit
381+  8891 28 2B        	jr z,primit
382+  8893 CD F0 88     segmit call column
383+  8896 38 13        	jr c,tercuad
384+  8898 3E 04        cuarcuad ld a,4
385+  889A 32 E0 84     	ld (Cuad_objeto),a
386+  889D 21 20 48     	ld hl,$4820
387+  88A0 22 01 85     	ld (Limite_horizontal),hl
388+  88A3 21 03 85     	ld hl,Limite_vertical
389+  88A6 36 0D        	ld (hl),$0d
390+  88A8 08           	ex af,af
391+  88A9 18 3C        	jr 1F
392+  88AB              tercuad
393+  88AB              ;	call Fija_punteros
394+  88AB 3E 03        	ld a,3
395+  88AD 32 E0 84     	ld (Cuad_objeto),a
396+  88B0 21 20 48     	ld hl,$4820
397+  88B3 22 01 85     	ld (Limite_horizontal),hl
398+  88B6 21 03 85     	ld hl,Limite_vertical
399+  88B9 36 12        	ld (hl),$12
400+  88BB 08           	ex af,af
401+  88BC 18 29        	jr 1F
402+  88BE CD F0 88     primit call column
403+  88C1 38 13        	jr c, primcuad
404+  88C3              segcuad
405+  88C3              ;	call Fija_punteros
406+  88C3 3E 02        	ld a,2
407+  88C5 32 E0 84     	ld (Cuad_objeto),a
408+  88C8 21 C0 4F     	ld hl,$4fc0
409+  88CB 22 01 85     	ld (Limite_horizontal),hl
410+  88CE 21 03 85     	ld hl,Limite_vertical
411+  88D1 36 0D        	ld (hl),$0d
412+  88D3 08           	ex af,af
413+  88D4 18 11        	jr 1F
414+  88D6              primcuad
415+  88D6              ;	call Fija_punteros
416+  88D6 3E 01        	ld a,1
417+  88D8 32 E0 84     	ld (Cuad_objeto),a
418+  88DB 21 C0 4F     	ld hl,$4fc0
419+  88DE 22 01 85     	ld (Limite_horizontal),hl
420+  88E1 21 03 85     	ld hl,Limite_vertical
421+  88E4 36 12        	ld (hl),$12
422+  88E6 08           	ex af,af
423+  88E7 CD 5E 8F     1 call Genera_coordenadas
424+  88EA 21 F5 84     	ld hl,Ctrl_0
425+  88ED CB EE        	set 5,(hl)
426+  88EF C9           	ret
427+  88F0
428+  88F0              ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
429+  88F0              ;
430+  88F0              ;	14/9/22
431+  88F0              ;
432+  88F0              ;	Fija_punteros ..... (Subrutina de [Inicialización]).
433+  88F0              ;
434+  88F0              ;	La rutina fija el puntero de dibujado/borrado.
435+  88F0              ;
436+  88F0              ;	Función:
437+  88F0              ;
438+  88F0              ;	HL apuntará a (Puntero_de_objeto), Caja_de_DESPLZ o Caja_de_BORRADO en función de si estamos PINTANDO/BORRANDO el objeto o de si este, ha sido o no, DESPLAZADO.
439+  88F0
440+  88F0              ;Fija_punteros push bc 												; Guardamos en la pila (Filas)*(Columns)*8 y _
441+  88F0              ;	push de 														; _(Filas)*(Columns). BC y DE respectivamente.
442+  88F0              ;	ld a,(Obj_dibujado) 											; Pintamos o borramos???. (Obj_dibujado)="0" PINTAMOS.
443+  88F0              ;	and a
444+  88F0              ;	jr z,1F
445+  88F0              ;	ld a,(CTRL_DESPLZ)		 										; Borramos el objeto.
446+  88F0              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
447+  88F0              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
448+  88F0              ;	ld hl,(Caja_de_BORRADO) 										; _(Puntero_datas)=Caja_de_BORRADO.
449+  88F0              ;	ld (Puntero_objeto),hl
450+  88F0              ;	jr 3F
451+  88F0              ;1 ld a,(CTRL_DESPLZ) 												; Pintamos el objeto.
452+  88F0              ;	and a 															; Si (CTRL_DESPLZ)="0", el objeto no está desplazado, en ese caso (Puntero_datas)=(Puntero_objeto).
453+  88F0              ;	jr z,2F 														; Si (CTRL_DESPLZ)="1", el objeto está desplazado, por lo que tendrá una (Columns) más. En ese caso,_
454+  88F0              ;	ld hl,(Caja_de_DESPLZ) 											; _(Puntero_datas)=Caja_de_DESPLZ.
455+  88F0              ;	ld (Puntero_objeto),hl
456+  88F0              ;	jr 3F
457+  88F0              ;2 ld hl,(Puntero_objeto) 											; (Puntero_datas)=(Puntero_objeto).
458+  88F0              ;	ld (Puntero_objeto),hl	 										; Fijamos el puntero de atributos y salimos.
459+  88F0              ;3 pop de
460+  88F0              ;	pop bc
461+  88F0              ;	ret
462+  88F0
463+  88F0              ; ------------------------------------------------------------------------------------------------------------------
464+  88F0
465+  88F0              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
466+  88F0              ;
467+  88F0              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
468+  88F0
469+  88F0 7D           column ld a,l
470+  88F1 E6 1F        	and $1f
471+  88F3 FE 10         	cp $10
472+  88F5 C9            	ret
473+  88F6
474+  88F6              ; --------------------------------------------------------------------------------------------------------------------
475+  88F6              ;
476+  88F6              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
477+  88F6              ;
478+  88F6              ; 14/12/22
479+  88F6              ;
480+  88F6              ;	Modifica: A y BC.
481+  88F6
482+  88F6 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
483+  88F9 E6 01        	and 1
484+  88FB 28 17        	jr z,1F
485+  88FD
486+  88FD              ; Nos encontramos en la parte izquierda de la pantalla
487+  88FD
488+  88FD 3A E1 84     	ld a,(Coordenada_X)
489+  8900 47           	ld b,a
490+  8901 04           	inc b											; (Coordenada_X)+1 en B.
491+  8902 79           	ld a,c
492+  8903 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
493+  8904 38 08        	jr c,2F
494+  8906 47           	ld b,a
495+  8907 79           	ld a,c
496+  8908 90           	sub b
497+  8909 32 00 85     	ld (Columnas),a
498+  890C 18 1B        	jr 4F
499+  890E 79           2 ld a,c
500+  890F 32 00 85     	ld (Columnas),a
501+  8912 18 15        	jr 4F
502+  8914
503+  8914              ; Nos encontramos en la parte derecha de la pantalla.
504+  8914
505+  8914 3A E1 84     1 ld a,(Coordenada_X)
506+  8917 81           	add c
507+  8918 3D           	dec a
508+  8919 D6 1F        	sub $1f
509+  891B 38 08        	jr c,3F
510+  891D 47           	ld b,a
511+  891E 79           	ld a,c
512+  891F 90           	sub b
513+  8920 32 00 85     	ld (Columnas),a
514+  8923 18 04        	jr 4F
515+  8925 79           3 ld a,c
516+  8926 32 00 85     	ld (Columnas),a
517+  8929 D9           4 exx
518+  892A 4F           	ld c,a
519+  892B D9           	exx
520+  892C C9            ret
521+  892D
522+  892D              ; --------------------------------------------------------------------------------------------------------------------
523+  892D              ;
524+  892D              ; 7/1/23
525+  892D              ;
526+  892D              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
527+  892D              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
528+  892D              ;
529+  892D              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
530+  892D              ;	DESTRUYE: HL,B Y A.
531+  892D
532+  892D 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
533+  8930 FE 02        	cp 2
534+  8932 38 18        	jr c,1F
535+  8934 28 16        	jr z,1F
536+  8936 E6 01        	and 1
537+  8938 28 0D        	jr z,3F
538+  893A
539+  893A              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
540+  893A
541+  893A CD 76 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
542+  893D
543+  893D 7D           9 ld a,l
544+  893E E6 1F        	and $1f
545+  8940 28 2A        	jr z,7F
546+  8942 2B           	dec hl
547+  8943 10 F8        	djnz 9B
548+  8945 18 25        	jr 7F
549+  8947
550+  8947              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
551+  8947
552+  8947 2A D4 84     3 ld hl,(Posicion_actual)
553+  894A 18 20        	jr 7F
554+  894C
555+  894C 28 14        1 jr z,2F
556+  894E
557+  894E              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
558+  894E
559+  894E CD 76 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
560+  8951 7D           4 ld a,l
561+  8952 E6 1F        	and $1f
562+  8954 28 03        	jr z,6F
563+  8956 2B           	dec hl
564+  8957 10 F8        	djnz 4B
565+  8959 06 0F        6 ld b,15
566+  895B CD D7 89     5 call PreviousScan
567+  895E 10 FB        	djnz 5B
568+  8960 18 0A        	jr 7F
569+  8962
570+  8962              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
571+  8962
572+  8962 CD 76 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
573+  8965 06 0F        	ld b,15
574+  8967 CD D7 89     8 call PreviousScan
575+  896A 10 FB        	djnz 8B
576+  896C
577+  896C E5           7 push hl
578+  896D DD E1        	pop ix
579+  896F
580+  896F 2A D6 84     	ld hl,(Puntero_objeto)
581+  8972 E5           	push hl
582+  8973 FD E1        	pop iy
583+  8975
584+  8975 C9           	ret
585+  8976
586+  8976              ; --------------------------------------------------------------------------------------------------------------------
587+  8976              ;
588+  8976              ;	2/1/23
589+  8976              ;
590+  8976              ;	Sub-rutina de [Calcula_puntero_de_impresion].
591+  8976              ;
592+  8976              ;	Tras esta rutina tenemos:
593+  8976              ;
594+  8976              ;	OUTPUT: HL contiene (Posicion_actual).
595+  8976              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
596+  8976              ;
597+  8976              ;	DESTRUYE!!!!! HL,B y A.
598+  8976
599+  8976 2A D4 84     Operandos ld hl,(Posicion_actual)
600+  8979 3A 00 85     	ld a,(Columnas)
601+  897C 3D           	dec a
602+  897D 20 01        	jr nz,1F
603+  897F 3C           	inc a
604+  8980 47           1 ld b,a
605+  8981 C9           	ret
606+  8982
607+  8982              ; --------------------------------------------------------------------------------------------------------------------
608+  8982              ;
609+  8982              ;	3/1/23
610+  8982              ;
611+  8982              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
612+  8982              ;
613+  8982              ;	Destruye: A,B,HL y DE.
614+  8982
615+  8982              Define_rutina_de_impresion
616+  8982
617+  8982 3A D3 84     	ld a,(Columns)
618+  8985 47           	ld b,a
619+  8986 3A 00 85     	ld a,(Columnas)
620+  8989 B8           	cp b
621+  898A 20 0D        	jr nz,2f
622+  898C
623+  898C              ;	La entidad se imprime entera.
624+  898C
625+  898C 21 1E 8A     	ld hl, Indice_entidades_completas
626+  898F E6 01        	and 1
627+  8991 28 02        	jr z,1F
628+  8993
629+  8993 23           	inc hl
630+  8994 23           	inc hl
631+  8995
632+  8995 CD 2B 86     1 call Extrae_address
633+  8998 C9           	ret		;	ret
634+  8999
635+  8999              ;	La entidad no se imprime entera en pantalla.
636+  8999
637+  8999 3A E0 84     2 ld a,(Cuad_objeto)
638+  899C E6 01        	and 1
639+  899E 28 17        	jr z,3F
640+  89A0
641+  89A0              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
642+  89A0
643+  89A0 21 22 8A     	ld hl, Indice_entidades_incompletas_izquierda
644+  89A3 3A D3 84     4 ld a,(Columns)
645+  89A6 E6 01        	and 1
646+  89A8 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
647+  89AA
648+  89AA 23           	inc hl
649+  89AB 23           	inc hl
650+  89AC
651+  89AC 3A 00 85     	ld a,(Columnas)
652+  89AF E6 01        	and 1
653+  89B1 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
654+  89B3
655+  89B3 23           	inc hl
656+  89B4 23           	inc hl
657+  89B5
658+  89B5 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
659+  89B7
660+  89B7 21 28 8A     3 ld hl, Indice_entidades_incompletas_derecha
661+  89BA 18 E7        	jr 4B
662+  89BC
663+  89BC              ; --------------------------------------------------------------------------------------------------------------------
664+  89BC              ;
665+  89BC              ;	Prepara_draw
666+  89BC              ;
667+  89BC              ;	Es una rutina de carga.
668+  89BC              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
669+  89BC              ;
670+  89BC              ;	FUNCIONAMIENTO:
671+  89BC              ;
672+  89BC              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
673+  89BC              ;	- LD (Posicion_actual) del objeto en [HL].
674+  89BC              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
675+  89BC              ;
676+  89BC              ;	DESTRUYE:
677+  89BC              ;
678+  89BC              ;	Logicamente, BC,HL y E quedan destruidos.
679+  89BC
680+  89BC 21 D2 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
681+  89BF 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
682+  89C0 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
683+  89C1 4E           	ld c,(hl)
684+  89C2 2A D4 84     	ld hl,(Posicion_actual)
685+  89C5 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
686+  89C7 C9           	ret
687+  89C8
688+  89C8              ;----------------------------------------------------------------------------------------------------------------
689+  89C8              ;
690+  89C8              ;	5/08/22
691+  89C8              ;
692+  89C8              ;   NextScan.
693+  89C8              ;
694+  89C8              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
695+  89C8              ;
696+  89C8              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
697+  89C8              ;
698+  89C8              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
699+  89C8              ;
700+  89C8              ;       DESTRUIDOS: AF y HL !!!
701+  89C8              ;
702+  89C8              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
703+  89C8              ;
704+  89C8
705+  89C8 24           NextScan inc h          ; Incrementamos el scanline.
706+  89C9 7C               ld a,h
707+  89CA E6 07            and 7
708+  89CC C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
709+  89CD
710+  89CD 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
711+  89CE C6 20            add a,$20           ; Vamos a comprobarlo...
712+  89D0 6F               ld l,a
713+  89D1 D8               ret c               ; Salimos si se produce el cambio de tercio.
714+  89D2
715+  89D2 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
716+  89D3 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
717+  89D5 67               ld h,a
718+  89D6 C9               ret
719+  89D7
720+  89D7              ;----------------------------------------------------------------------------------------------------------------
721+  89D7              ;
722+  89D7              ;	5/08/22
723+  89D7              ;
724+  89D7              ;   PreviousScan.
725+  89D7              ;
726+  89D7              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
727+  89D7              ;
728+  89D7              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
729+  89D7              ;
730+  89D7              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
731+  89D7              ;
732+  89D7              ;       DESTRUIDOS: AF y HL !!!
733+  89D7              ;
734+  89D7              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
735+  89D7              ;
736+  89D7
737+  89D7 7C           PreviousScan ld a,h
738+  89D8 25               dec h               ; Dec H.
739+  89D9 E6 07            and 7
740+  89DB C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
741+  89DC
742+  89DC 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
743+  89DD D6 20            sub $20             ; Vamos a comprobarlo...
744+  89DF 6F               ld l,a
745+  89E0 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
746+  89E1
747+  89E1 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
748+  89E2 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
749+  89E4 67               ld h,a
750+  89E5 C9               ret
751+  89E6
752+  89E6              ; -----------------------------------------------------------------------------------
753+  89E6              ;
754+  89E6              ;	15/1/23
755+  89E6
756+  89E6 ED 73 10 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
757+  89EA 31 00 70     	ld sp,Album_de_fotos
758+  89ED
759+  89ED FD E1        2 pop iy																	; (Puntero_objeto) en IY.
760+  89EF E1           	pop hl																	; Puntero de impresión de pantalla en HL.
761+  89F0 D1           	pop de																	; Dirección de la rutina de impresión en DE.
762+  89F1
763+  89F1 ED 73 12 85  	ld (Stack_2),sp
764+  89F5 ED 7B 10 85  	ld sp,(Stack)
765+  89F9
766+  89F9              ; Fabrica la llamada a la correspondiente rutina de impresión.
767+  89F9
768+  89F9 3E CD        	ld a,$cd
769+  89FB 32 03 8A     	ld (Imprime),a
770+  89FE EB           	ex de,hl
771+  89FF 22 04 8A     	ld (Imprime+1),hl
772+  8A02 EB           	ex de,hl
773+  8A03
774+  8A03              ; Ejecuta la llamada:	CALL $xx,xx
775+  8A03
776+  8A03 00 00 00     Imprime db 0,0,0
777+  8A06
778+  8A06 ED 73 10 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
779+  8A0A
780+  8A0A 3A 0F 85     	ld a,(Numero_de_malotes)
781+  8A0D 3D           	dec a
782+  8A0E 28 09        	jr z,1F
783+  8A10 32 0F 85      	ld (Numero_de_malotes),a
784+  8A13 ED 7B 12 85  	ld sp,(Stack_2)
785+  8A17 18 D4        	jr 2B
786+  8A19
787+  8A19 AF           1 xor a
788+  8A1A 32 12 85     	ld (Stack_2),a
789+  8A1D C9           	ret
790+  8A1E
791+  8A1E
# file closed: Draw_XOR.asm
591   8A1E              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A1E              ;   índices de Rutinas de impresión.
  2+  8A1E
  3+  8A1E 2E 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A20 5B 8A            defw Pinta_Amadeus_3x2
  5+  8A22
  6+  8A22 B1 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A24 51 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A26 05 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A28
 10+  8A28 DB 8A        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A2A DF 8B            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A2C 93 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A2E
 14+  8A2E
 15+  8A2E              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A2E              ;
 17+  8A2E              ;   12/12/22
 18+  8A2E              ;
 19+  8A2E              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A2E              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A2E              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A2E              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A2E              ;
 24+  8A2E              ;   Modifica: DE y HL.
 25+  8A2E
 26+  8A2E ED 73 10 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A32 FD F9        	ld sp,iy
 28+  8A34 06 10            ld b,16
 29+  8A36 D1           1 pop de
 30+  8A37 7B               ld a,e
 31+  8A38 AE               xor (hl)
 32+  8A39 77           	ld (hl),a
 33+  8A3A 23           	inc hl
 34+  8A3B 7A               ld a,d
 35+  8A3C AE               xor (hl)
 36+  8A3D 77           	ld (hl),a
 37+  8A3E 2B           	dec hl
 38+  8A3F 24           	inc h
 39+  8A40 7C               ld a,h
 40+  8A41 E6 07            and 7
 41+  8A43 20 0A            jr nz,2F
 42+  8A45 7D               ld a,l
 43+  8A46 C6 20            add a,$20
 44+  8A48 6F               ld l,a
 45+  8A49 38 04            jr c,2F
 46+  8A4B 7C               ld a,h
 47+  8A4C D6 08            sub 8
 48+  8A4E 67               ld h,a
 49+  8A4F 7C           2 ld a,h
 50+  8A50 FE 58            cp $58
 51+  8A52 28 02            jr z,3F
 52+  8A54 10 E0            djnz 1B
 53+  8A56 ED 7B 10 85  3 ld sp,(Stack)
 54+  8A5A C9           	ret
 55+  8A5B
 56+  8A5B ED 73 10 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A5F FD F9        	ld sp,iy
 58+  8A61 06 08            ld b,8
 59+  8A63 D1           1 pop de
 60+  8A64 7B               ld a,e
 61+  8A65 AE               xor (hl)
 62+  8A66 77           	ld (hl),a
 63+  8A67 23           	inc hl
 64+  8A68 7A               ld a,d
 65+  8A69 AE               xor (hl)
 66+  8A6A 77           	ld (hl),a
 67+  8A6B 23           	inc hl
 68+  8A6C D1           	pop de
 69+  8A6D 7B               ld a,e
 70+  8A6E AE               xor (hl)
 71+  8A6F 77           	ld (hl),a
 72+  8A70 2B           	dec hl
 73+  8A71 2B           	dec hl
 74+  8A72 24           	inc h
 75+  8A73 7C               ld a,h
 76+  8A74 E6 07            and 7
 77+  8A76 20 0A            jr nz,2F
 78+  8A78 7D               ld a,l
 79+  8A79 C6 20            add a,$20
 80+  8A7B 6F               ld l,a
 81+  8A7C 38 04            jr c,2F
 82+  8A7E 7C               ld a,h
 83+  8A7F D6 08            sub 8
 84+  8A81 67               ld h,a
 85+  8A82 7C           2 ld a,h
 86+  8A83 FE 58            cp $58
 87+  8A85 28 25            jr z,4F
 88+  8A87 7A               ld a,d
 89+  8A88 AE               xor (hl)
 90+  8A89 77               ld (hl),a
 91+  8A8A D1           	pop de
 92+  8A8B 23           	inc hl
 93+  8A8C 7B               ld a,e
 94+  8A8D AE               xor (hl)
 95+  8A8E 77           	ld (hl),a
 96+  8A8F 23           	inc hl
 97+  8A90 7A               ld a,d
 98+  8A91 AE               xor (hl)
 99+  8A92 77           	ld (hl),a
100+  8A93 2B           	dec hl
101+  8A94 2B           	dec hl
102+  8A95 24           	inc h
103+  8A96 7C               ld a,h
104+  8A97 E6 07            and 7
105+  8A99 20 0A            jr nz,3F
106+  8A9B 7D               ld a,l
107+  8A9C C6 20            add a,$20
108+  8A9E 6F               ld l,a
109+  8A9F 38 04            jr c,3F
110+  8AA1 7C               ld a,h
111+  8AA2 D6 08            sub 8
112+  8AA4 67               ld h,a
113+  8AA5 7C           3 ld a,h
114+  8AA6 FE 58            cp $58
115+  8AA8 28 02            jr z,4F
116+  8AAA 10 B7            djnz 1B
117+  8AAC ED 7B 10 85  4 ld sp,(Stack)
118+  8AB0 C9           	ret
119+  8AB1
120+  8AB1              ; ---------------------------------------------------
121+  8AB1
122+  8AB1 ED 73 10 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AB5 FD F9        	ld sp,iy
124+  8AB7 06 10            ld b,16
125+  8AB9 D1           1 pop de
126+  8ABA 7A           	ld a,d
127+  8ABB AE           	xor (hl)
128+  8ABC 77           	ld (hl),a
129+  8ABD 24           	inc h
130+  8ABE 7C               ld a,h
131+  8ABF E6 07            and 7
132+  8AC1 20 0C            jr nz,2F
133+  8AC3 7D               ld a,l
134+  8AC4 C6 20            add a,$20
135+  8AC6 6F               ld l,a
136+  8AC7 38 06            jr c,2F
137+  8AC9 7C               ld a,h
138+  8ACA D6 08            sub 8
139+  8ACC 67               ld h,a
140+  8ACD 18 00            jr 2F
141+  8ACF 7C           2 ld a,h
142+  8AD0 FE 58            cp $58
143+  8AD2 28 02            jr z,3F
144+  8AD4 10 E3            djnz 1B
145+  8AD6 ED 7B 10 85  3 ld sp,(Stack)
146+  8ADA C9           	ret
147+  8ADB
148+  8ADB ED 73 10 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8ADF FD F9        	ld sp,iy
150+  8AE1 06 10            ld b,16
151+  8AE3 D1           1 pop de
152+  8AE4 7B           	ld a,e
153+  8AE5 AE           	xor (hl)
154+  8AE6 77           	ld (hl),a
155+  8AE7 24           	inc h
156+  8AE8 7C               ld a,h
157+  8AE9 E6 07            and 7
158+  8AEB 20 0C            jr nz,2F
159+  8AED 7D               ld a,l
160+  8AEE C6 20            add a,$20
161+  8AF0 6F               ld l,a
162+  8AF1 38 06            jr c,2F
163+  8AF3 7C               ld a,h
164+  8AF4 D6 08            sub 8
165+  8AF6 67               ld h,a
166+  8AF7 18 00            jr 2F
167+  8AF9 7C           2 ld a,h
168+  8AFA FE 58            cp $58
169+  8AFC 28 02            jr z,3F
170+  8AFE 10 E3            djnz 1B
171+  8B00 ED 7B 10 85  3 ld sp,(Stack)
172+  8B04 C9           	ret
173+  8B05
174+  8B05              ; ---------------------------------------------------
175+  8B05
176+  8B05 ED 73 10 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B09 FD F9        	ld sp,iy
178+  8B0B 06 08            ld b,8
179+  8B0D D1           1 pop de
180+  8B0E 7A           	ld a,d
181+  8B0F AE           	xor (hl)
182+  8B10 77           	ld (hl),a
183+  8B11 23           	inc hl
184+  8B12 D1           	pop de
185+  8B13 7B           	ld a,e
186+  8B14 AE           	xor (hl)
187+  8B15 77           	ld (hl),a
188+  8B16 2B           	dec hl
189+  8B17 24            	inc h
190+  8B18 7C               ld a,h
191+  8B19 E6 07            and 7
192+  8B1B 20 0A            jr nz,2F
193+  8B1D 7D               ld a,l
194+  8B1E C6 20            add a,$20
195+  8B20 6F               ld l,a
196+  8B21 38 04            jr c,2F
197+  8B23 7C               ld a,h
198+  8B24 D6 08            sub 8
199+  8B26 67               ld h,a
200+  8B27 7C           2 ld a,h
201+  8B28 FE 58            cp $58
202+  8B2A 28 20            jr z,4F
203+  8B2C D1               pop de
204+  8B2D 7B           	ld a,e
205+  8B2E AE           	xor (hl)
206+  8B2F 77           	ld (hl),a
207+  8B30 23           	inc hl
208+  8B31 7A           	ld a,d
209+  8B32 AE           	xor (hl)
210+  8B33 77           	ld (hl),a
211+  8B34 2B           	dec hl
212+  8B35 24           	inc h
213+  8B36 7C               ld a,h
214+  8B37 E6 07            and 7
215+  8B39 20 0A            jr nz,3F
216+  8B3B 7D               ld a,l
217+  8B3C C6 20            add a,$20
218+  8B3E 6F               ld l,a
219+  8B3F 38 04            jr c,3F
220+  8B41 7C               ld a,h
221+  8B42 D6 08            sub 8
222+  8B44 67               ld h,a
223+  8B45 7C           3 ld a,h
224+  8B46 FE 58            cp $58
225+  8B48 28 02            jr z,4F
226+  8B4A 10 C1            djnz 1B
227+  8B4C ED 7B 10 85  4 ld sp,(Stack)
228+  8B50 C9           	ret
229+  8B51
230+  8B51 ED 73 10 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B55 FD F9        	ld sp,iy
232+  8B57 06 08            ld b,8
233+  8B59 D1           1 pop de
234+  8B5A D1           	pop de
235+  8B5B 7B           	ld a,e
236+  8B5C AE           	xor (hl)
237+  8B5D 77           	ld (hl),a
238+  8B5E 24            	inc h
239+  8B5F 7C               ld a,h
240+  8B60 E6 07            and 7
241+  8B62 20 0A            jr nz,2F
242+  8B64 7D               ld a,l
243+  8B65 C6 20            add a,$20
244+  8B67 6F               ld l,a
245+  8B68 38 04            jr c,2F
246+  8B6A 7C               ld a,h
247+  8B6B D6 08            sub 8
248+  8B6D 67               ld h,a
249+  8B6E 7C           2 ld a,h
250+  8B6F FE 58            cp $58
251+  8B71 28 1B            jr z,4F
252+  8B73 D1               pop de
253+  8B74 7A           	ld a,d
254+  8B75 AE           	xor (hl)
255+  8B76 77           	ld (hl),a
256+  8B77 24           	inc h
257+  8B78 7C               ld a,h
258+  8B79 E6 07            and 7
259+  8B7B 20 0A            jr nz,3F
260+  8B7D 7D               ld a,l
261+  8B7E C6 20            add a,$20
262+  8B80 6F               ld l,a
263+  8B81 38 04            jr c,3F
264+  8B83 7C               ld a,h
265+  8B84 D6 08            sub 8
266+  8B86 67               ld h,a
267+  8B87 7C           3 ld a,h
268+  8B88 FE 58            cp $58
269+  8B8A 28 02            jr z,4F
270+  8B8C 10 CB            djnz 1B
271+  8B8E ED 7B 10 85  4 ld sp,(Stack)
272+  8B92 C9           	ret
273+  8B93
274+  8B93 ED 73 10 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8B97 FD F9        	ld sp,iy
276+  8B99 06 08            ld b,8
277+  8B9B D1           1 pop de
278+  8B9C 7B           	ld a,e
279+  8B9D AE           	xor (hl)
280+  8B9E 77           	ld (hl),a
281+  8B9F 23           	inc hl
282+  8BA0 7A           	ld a,d
283+  8BA1 AE           	xor (hl)
284+  8BA2 77           	ld (hl),a
285+  8BA3 2B           	dec hl
286+  8BA4 24             	inc h
287+  8BA5 7C               ld a,h
288+  8BA6 E6 07            and 7
289+  8BA8 20 0A            jr nz,2F
290+  8BAA 7D               ld a,l
291+  8BAB C6 20            add a,$20
292+  8BAD 6F               ld l,a
293+  8BAE 38 04            jr c,2F
294+  8BB0 7C               ld a,h
295+  8BB1 D6 08            sub 8
296+  8BB3 67               ld h,a
297+  8BB4 7C           2 ld a,h
298+  8BB5 FE 58            cp $58
299+  8BB7 28 21            jr z,4F
300+  8BB9 D1               pop de
301+  8BBA 7A           	ld a,d
302+  8BBB AE           	xor (hl)
303+  8BBC 77           	ld (hl),a
304+  8BBD 23           	inc hl
305+  8BBE D1               pop de
306+  8BBF 7B           	ld a,e
307+  8BC0 AE           	xor (hl)
308+  8BC1 77           	ld (hl),a
309+  8BC2 2B           	dec hl
310+  8BC3 24           	inc h
311+  8BC4 7C               ld a,h
312+  8BC5 E6 07            and 7
313+  8BC7 20 0A            jr nz,3F
314+  8BC9 7D               ld a,l
315+  8BCA C6 20            add a,$20
316+  8BCC 6F               ld l,a
317+  8BCD 38 04            jr c,3F
318+  8BCF 7C               ld a,h
319+  8BD0 D6 08            sub 8
320+  8BD2 67               ld h,a
321+  8BD3 7C           3 ld a,h
322+  8BD4 FE 58            cp $58
323+  8BD6 28 02            jr z,4F
324+  8BD8 10 C1            djnz 1B
325+  8BDA ED 7B 10 85  4 ld sp,(Stack)
326+  8BDE C9           	ret
327+  8BDF
328+  8BDF ED 73 10 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8BE3 FD F9        	ld sp,iy
330+  8BE5 06 08            ld b,8
331+  8BE7 D1           1 pop de
332+  8BE8 7B           	ld a,e
333+  8BE9 AE           	xor (hl)
334+  8BEA 77           	ld (hl),a
335+  8BEB 24            	inc h
336+  8BEC 7C               ld a,h
337+  8BED E6 07            and 7
338+  8BEF 20 0A            jr nz,2F
339+  8BF1 7D               ld a,l
340+  8BF2 C6 20            add a,$20
341+  8BF4 6F               ld l,a
342+  8BF5 38 04            jr c,2F
343+  8BF7 7C               ld a,h
344+  8BF8 D6 08            sub 8
345+  8BFA 67               ld h,a
346+  8BFB 7C           2 ld a,h
347+  8BFC FE 58            cp $58
348+  8BFE 28 1C            jr z,4F
349+  8C00 D1               pop de
350+  8C01 7A           	ld a,d
351+  8C02 AE           	xor (hl)
352+  8C03 77           	ld (hl),a
353+  8C04 24           	inc h
354+  8C05 7C               ld a,h
355+  8C06 E6 07            and 7
356+  8C08 20 0A            jr nz,3F
357+  8C0A 7D               ld a,l
358+  8C0B C6 20            add a,$20
359+  8C0D 6F               ld l,a
360+  8C0E 38 04            jr c,3F
361+  8C10 7C               ld a,h
362+  8C11 D6 08            sub 8
363+  8C13 67               ld h,a
364+  8C14 7C           3 ld a,h
365+  8C15 FE 58            cp $58
366+  8C17 28 03            jr z,4F
367+  8C19 D1               pop de
368+  8C1A 10 CB            djnz 1B
369+  8C1C ED 7B 10 85  4 ld sp,(Stack)
370+  8C20 C9           	ret
371+  8C21
372+  8C21              ; ---------------------------------------------------
373+  8C21
# file closed: Rutinas_de_impresion_sprites.asm
592   8C21              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C21              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C21              ;
  3+  8C21              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C21              ;
  5+  8C21              ; *****************************************************************************************************************************************************************************************
  6+  8C21              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C21
  8+  8C21 7C           calcula_tercio ld a,h
  9+  8C22 E6 18        	and $18
 10+  8C24 CB 2F        	sra a
 11+  8C26 CB 2F        	sra a
 12+  8C28 CB 2F        	sra a
 13+  8C2A C9           	ret
 14+  8C2B
# file closed: calcula_tercio.asm
593   8C2B              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C2B              ; -----------------------------------------------------------------------------------------
  2+  8C2B              ;
  3+  8C2B              ;   04/11/22
  4+  8C2B              ;
  5+  8C2B              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C2B              ;
  7+  8C2B              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C2B              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C2B              ;
 10+  8C2B              ;   DESTRUYE: HL y A. !!!!!
 11+  8C2B
 12+  8C2B CD 21 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C2E 26 58            ld h,$58
 14+  8C30 84               add h
 15+  8C31 67               ld h,a
 16+  8C32 C9               ret
# file closed: Calcula_direccion_atributos.asm
594   8C33              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C33              ; ********** **********
  2+  8C33              ;
  3+  8C33              ;   5/11/22
  4+  8C33              ;
  5+  8C33              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C33              ;
  7+  8C33              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C33              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C33              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C33              ;
 11+  8C33              ;   NO DESTROYERSSSS !!!!!
 12+  8C33
 13+  8C33 E5           Define_atributos push hl
 14+  8C34 C5           	push bc
 15+  8C35 D5           	push de
 16+  8C36
 17+  8C36 CD 2B 8C     	call Calcula_direccion_atributos
 18+  8C39
 19+  8C39 D9               exx
 20+  8C3A E5               push hl
 21+  8C3B D9               exx
 22+  8C3C D1               pop de
 23+  8C3D
 24+  8C3D 42               ld b,d
 25+  8C3E 7B               ld a,e 									; (Attr) en A.
 26+  8C3F
 27+  8C3F C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C40 E5            	push hl 								; Guardo dirección de attr.
 29+  8C41
 30+  8C41              ; -----
 31+  8C41
 32+  8C41 77           2 ld (hl),a
 33+  8C42 0D           	dec c 									; Decremento (Columnas).
 34+  8C43 28 03        	jr z,1F
 35+  8C45 23           	inc hl
 36+  8C46 18 F9        	jr 2B
 37+  8C48
 38+  8C48 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C49 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C4A
 41+  8C4A 05           	dec b									; Decremento (Filas).
 42+  8C4B 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C4D
 44+  8C4D 11 20 00     	ld de,32
 45+  8C50 A7           	and a
 46+  8C51 ED 5A        	adc hl,de
 47+  8C53 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C55
 49+  8C55 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C56 C1           	pop bc
 51+  8C57 E1           	pop hl
 52+  8C58
 53+  8C58 C9           	ret
 54+  8C59
# file closed: Define_atributos.asm
595   8C59              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C59              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C59              ;
  3+  8C59              ;
  4+  8C59              ;	CLS.
  5+  8C59              ;
  6+  8C59              ;	Limpia la pantalla y define sus atributos.
  7+  8C59              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C59              ;
  9+  8C59              ;	COLORES: 0 ..... NEGRO
 10+  8C59              ;    		 1 ..... AZUL
 11+  8C59              ; 			 2 ..... ROJO
 12+  8C59              ;			 3 ..... MAGENTA
 13+  8C59              ; 			 4 ..... VERDE
 14+  8C59              ; 			 5 ..... CIAN
 15+  8C59              ;			 6 ..... AMARILLO
 16+  8C59              ; 			 7 ..... BLANCO
 17+  8C59              ;
 18+  8C59              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C59              ;
 20+  8C59              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C59
 22+  8C59
 23+  8C59 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C5C 11 01 40     	LD DE,$4001
 25+  8C5F 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8C62 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8C64 ED B0        	LDIR
 28+  8C66 01 FF 02     	LD BC,767
 29+  8C69 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8C6A ED B0        	LDIR
 31+  8C6C C9           	ret
 32+  8C6D
# file closed: Cls.asm
596   8C6D              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8C6D              ; ******************************************************************************************************************************************************************************************
  2+  8C6D              ;
  3+  8C6D              ;   19/10/22
  4+  8C6D              ;
  5+  8C6D              ;	Mov_down
  6+  8C6D              ;
  7+  8C6D              ; 	Mueve el Sprite X px hacia abajo.
  8+  8C6D              ;
  9+  8C6D              ;
 10+  8C6D 21 F5 84     Mov_down ld hl,Ctrl_0
 11+  8C70 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8C72              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8C72              ; 																	; _ en el caso de que no lo haya.
 14+  8C72 3A E6 84     	ld a,(Vel_down)
 15+  8C75 47           	ld b,a
 16+  8C76 2A D4 84         ld hl,(Posicion_actual)
 17+  8C79 CD 21 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8C7C E6 02        	and 2
 19+  8C7E 28 0F        	jr z,1F
 20+  8C80 7C           	ld a,h
 21+  8C81 FE 57        	cp $57
 22+  8C83 20 0A        	jr nz,1F
 23+  8C85 7D           	ld a,l
 24+  8C86 C6 20        	add $20
 25+  8C88 30 05        	jr nc,1F
 26+  8C8A
 27+  8C8A              ; ------------------------------
 28+  8C8A CD 45 8F     	call Reaparece_arriba
 29+  8C8D              ;	call Reinicio
 30+  8C8D              ; ------------------------------
 31+  8C8D
 32+  8C8D 18 08        	jr 3F
 33+  8C8F CD C8 89     1 call NextScan
 34+  8C92 22 D4 84     	ld (Posicion_actual),hl
 35+  8C95 10 E2            djnz 2B
 36+  8C97 CD 5E 8F     3 call Genera_coordenadas
 37+  8C9A C9           	ret
 38+  8C9B
 39+  8C9B
 40+  8C9B              ; ******************************************************************************************************************************************************************************************
 41+  8C9B              ;
 42+  8C9B              ;   19/10/22
 43+  8C9B              ;
 44+  8C9B              ;	Mov_up
 45+  8C9B              ;
 46+  8C9B              ; 	Mueve el Sprite hacia arriba.
 47+  8C9B              ;
 48+  8C9B              ;
 49+  8C9B 21 F5 84     Mov_up ld hl,Ctrl_0
 50+  8C9E CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 51+  8CA0              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 52+  8CA0              ; 																		; _ en el caso de que no lo haya.
 53+  8CA0 3A E5 84     	ld a,(Vel_up)
 54+  8CA3 47           	ld b,a
 55+  8CA4 2A D4 84     	ld hl,(Posicion_actual)
 56+  8CA7 CD 21 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 57+  8CAA A7           	and a
 58+  8CAB 20 10        	jr nz,1F
 59+  8CAD 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 60+  8CAE FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 61+  8CB0 20 0B            jr nz,1F
 62+  8CB2 7D               ld a,l
 63+  8CB3 D6 20            sub $20
 64+  8CB5 30 06            jr nc,1F
 65+  8CB7 25               dec h
 66+  8CB8
 67+  8CB8              ; -----------------------------
 68+  8CB8 CD 35 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 69+  8CBB              ;	call Reinicio
 70+  8CBB              ; -----------------------------
 71+  8CBB
 72+  8CBB 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 73+  8CBD CD D7 89     1 call PreviousScan
 74+  8CC0 22 D4 84     	ld (Posicion_actual),hl
 75+  8CC3 10 E2            djnz 3B
 76+  8CC5 CD 5E 8F     2 call Genera_coordenadas
 77+  8CC8 C9           	ret
 78+  8CC9
 79+  8CC9              ; ******************************************************************************************************************************************************************************************
 80+  8CC9              ;
 81+  8CC9              ;	19/10/22
 82+  8CC9              ;
 83+  8CC9              ;	Mov_right.
 84+  8CC9              ;
 85+  8CC9              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 86+  8CC9              ;
 87+  8CC9
 88+  8CC9 21 F5 84     Mov_right ld hl,Ctrl_0
 89+  8CCC CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 90+  8CCE              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 91+  8CCE              ; 																	; _ en el caso de que no lo haya.
 92+  8CCE 3A D8 84     	ld a,(CTRL_DESPLZ)
 93+  8CD1 A7           	and a
 94+  8CD2 28 0B        	jr z,10F
 95+  8CD4
 96+  8CD4 3A F5 84     	ld a,(Ctrl_0)
 97+  8CD7 CB 7F        	bit 7,a
 98+  8CD9 20 04        	jr nz,10F														; Consultamos el último movimiento horizontal del SPRITE.
 99+  8CDB 21 D8 84     	ld hl,CTRL_DESPLZ
100+  8CDE 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
101+  8CDF
102+  8CDF 3A F5 84     10 ld a,(Ctrl_0)
103+  8CE2 CB 77        	bit 6,a
104+  8CE4 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
105+  8CE6
106+  8CE6 CD F4 8E     	call Stop_Amadeus_right
107+  8CE9 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
108+  8CEA 18 4A        	jr 3F
109+  8CEC
110+  8CEC 3A E1 84     11 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
111+  8CEF FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
112+  8CF1 20 43        	jr nz,3F
113+  8CF3
114+  8CF3 3A D8 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
115+  8CF6 A7           	and a 															; _[3] para continuar con el DESPLZ.
116+  8CF7 28 3D        	jr z,3F
117+  8CF9
118+  8CF9              ; ---------- ---------- ----------
119+  8CF9
120+  8CF9 3A E4 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
121+  8CFC FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
122+  8CFE 28 11        	jr z,1F
123+  8D00 38 06        	jr c,6F
124+  8D02 FE 04        	cp 4
125+  8D04 28 14        	jr z,7F
126+  8D06 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
127+  8D08
128+  8D08              ; ---------- ---------- ----------
129+  8D08              ;
130+  8D08              ; Perfiles de velocidad
131+  8D08              ;
132+  8D08 3A D8 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
133+  8D0B FE FE        	cp $fe
134+  8D0D 20 27        	jr nz,3F
135+  8D0F 18 10        	jr 4F
136+  8D11 3A D8 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
137+  8D14 FE FD        	cp $fd
138+  8D16 20 1E        	jr nz,3F
139+  8D18 18 07        	jr 4F
140+  8D1A 3A D8 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
141+  8D1D FE FB        	cp $fb
142+  8D1F 20 15        	jr nz,3F
143+  8D21
144+  8D21              ; ---------- ---------- ----------
145+  8D21
146+  8D21 CD 23 8F     4 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
147+  8D24              ;	call Reinicio
148+  8D24
149+  8D24              ; ---------- ---------- ----------
150+  8D24
151+  8D24 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
152+  8D26 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
153+  8D27 CD 5F 8D     	call DESPLZ_DER
154+  8D2A C1           	pop bc
155+  8D2B 10 F9        	djnz 5B
156+  8D2D 2A D4 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
157+  8D30 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
158+  8D31 22 D4 84     	ld (Posicion_actual),hl
159+  8D34 18 25        	jr 2F 															; Salimos para pintar la nueva posición.
160+  8D36
161+  8D36              ; ---------- ---------- ----------
162+  8D36
163+  8D36 3A E4 84     3 ld a,(Vel_right) 													; El objeto aún no ha llegado al último char. de la línea, (31).
164+  8D39 FE 08        	cp 8 															; Consultamos el perfil de velocidad. Si es distinto de "8" saltamos a [8] para seguir con el desplazamiento y actualizar coordenadas.
165+  8D3B 20 18        	jr nz,8F
166+  8D3D 2A D4 84     	ld hl,(Posicion_actual) 										; (Vel_right)="8". Si no hemos llegado al último char. incrementamos HL, actualizamos coordenadas y salimos.
167+  8D40 7D           	ld a,l
168+  8D41 E6 1F        	and $1f
169+  8D43 FE 1F        	cp 31
170+  8D45 20 05        	jr nz,9F
171+  8D47
172+  8D47              ; ---------- ---------- ----------
173+  8D47
174+  8D47 CD 23 8F     	call Reaparece_izquierda
175+  8D4A
176+  8D4A              ; ---------- ---------- ----------
177+  8D4A
178+  8D4A 18 0F        	jr 2F
179+  8D4C 2A D4 84     9 ld hl,(Posicion_actual)
180+  8D4F 23           	inc hl
181+  8D50 22 D4 84     	ld (Posicion_actual),hl
182+  8D53 18 06        	jr 2F
183+  8D55 2A D4 84     8 ld hl,(Posicion_actual)
184+  8D58 CD 5F 8D     	call DESPLZ_DER
185+  8D5B CD 5E 8F     2 call Genera_coordenadas
186+  8D5E C9           	ret
187+  8D5F
188+  8D5F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
189+  8D5F              ;
190+  8D5F              ;	22/9/22
191+  8D5F              ;
192+  8D5F
193+  8D5F CD 6E 8D     DESPLZ_DER call Desplaza_derecha
194+  8D62 CD 83 8D         call modifica_parametros_1er_DESPLZ_2
195+  8D65 CD A9 8D         call Ciclo_completo
196+  8D68 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
197+  8D6B CB FE        	set 7,(hl)
198+  8D6D C9           	ret
199+  8D6E
200+  8D6E              ; ******************************************************************************************************************************************************************************************
201+  8D6E              ;	14/9/22
202+  8D6E              ;
203+  8D6E
204+  8D6E 3A E4 84     Desplaza_derecha ld a,(Vel_right)
205+  8D71 47           	ld b,a
206+  8D72 2A DC 84     	ld hl,(Puntero_DESPLZ)
207+  8D75 23           1 inc hl
208+  8D76 23           	inc hl
209+  8D77 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
210+  8D79 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
211+  8D7C CD 2B 86     	call Extrae_address
212+  8D7F
213+  8D7F              ;	ld (Caja_de_DESPLZ),hl
214+  8D7F 22 D6 84     	ld (Puntero_objeto),hl
215+  8D82
216+  8D82 C9           	ret
217+  8D83
218+  8D83              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
219+  8D83              ;
220+  8D83              ;	24/7/22
221+  8D83              ;
222+  8D83              ;	modifica_parametros_1er_DESPLZ_2
223+  8D83              ;
224+  8D83              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
225+  8D83              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
226+  8D83              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
227+  8D83
228+  8D83 3A D8 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
229+  8D86 A7           	and a
230+  8D87 20 1C        	jr nz,1F
231+  8D89 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
232+  8D8B 32 D8 84         ld (CTRL_DESPLZ),a
233+  8D8E
234+  8D8E 21 D3 84     	ld hl,Columns
235+  8D91 34           	inc (hl)
236+  8D92
237+  8D92 3A E0 84     	ld a,(Cuad_objeto)
238+  8D95 E6 01        	and 1
239+  8D97 28 0C        	jr z,1F
240+  8D99 2A D4 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
241+  8D9C 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
242+  8D9D 22 D4 84     	ld (Posicion_actual),hl
243+  8DA0 CD 00 8F     	call Inc_CTRL_DESPLZ
244+  8DA3 18 03        	jr 2F
245+  8DA5 CD 00 8F     1 call Inc_CTRL_DESPLZ
246+  8DA8 C9           2 ret
247+  8DA9
248+  8DA9              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
249+  8DA9              ;
250+  8DA9              ;	24/7/22
251+  8DA9              ;
252+  8DA9              ;	Ciclo_completo.
253+  8DA9              ;
254+  8DA9              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
255+  8DA9              ;
256+  8DA9              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
257+  8DA9              ; 	Decrementamos (Columns).
258+  8DA9              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
259+  8DA9              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
260+  8DA9
261+  8DA9
262+  8DA9 3A D8 84     Ciclo_completo ld a,(CTRL_DESPLZ)
263+  8DAC FE FF        	cp $ff
264+  8DAE 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
265+  8DB0 18 25        	jr 3f
266+  8DB2 21 D3 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
267+  8DB5 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
268+  8DB6 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
269+  8DB7 32 D8 84     	ld (CTRL_DESPLZ),a
270+  8DBA 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
271+  8DBD E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
272+  8DBF 20 0A        	jr nz,2F
273+  8DC1 2A D4 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
274+  8DC4 23           	inc hl
275+  8DC5 22 D4 84     	ld (Posicion_actual),hl
276+  8DC8 CD 5E 8F     	call Genera_coordenadas
277+  8DCB
278+  8DCB              ; Inicia el puntero de Sprite.
279+  8DCB
280+  8DCB 2A DA 84     2 ld hl,(Indice_Sprite)
281+  8DCE 22 DC 84     	ld (Puntero_DESPLZ),hl
282+  8DD1 CD 2B 86     	call Extrae_address
283+  8DD4 22 D6 84     	ld (Puntero_objeto),hl
284+  8DD7
285+  8DD7 C9           3 ret
286+  8DD8
287+  8DD8              ; ******************************************************************************************************************************************************************************************
288+  8DD8              ;
289+  8DD8              ;	19/10/22
290+  8DD8              ;
291+  8DD8              ;	Mov_left.
292+  8DD8              ;
293+  8DD8              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
294+  8DD8              ;
295+  8DD8              Mov_left
296+  8DD8
297+  8DD8 21 F5 84     	ld hl,Ctrl_0
298+  8DDB CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
299+  8DDD              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
300+  8DDD              ; 																	; _ en el caso de que no lo haya.
301+  8DDD 3A D8 84     	ld a,(CTRL_DESPLZ)
302+  8DE0 A7           	and a
303+  8DE1 20 19        	jr nz,10F
304+  8DE3
305+  8DE3 2A D6 84     	ld hl,(Puntero_objeto)
306+  8DE6 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
307+  8DE9
308+  8DE9 3A F5 84     	ld a,(Ctrl_0)
309+  8DEC CB 77        	bit 6,a
310+  8DEE 28 64        	jr z,3F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
311+  8DF0
312+  8DF0 CD FA 8E     	call Stop_Amadeus_left
313+  8DF3 20 5F        	jr nz,3F
314+  8DF5
315+  8DF5 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
316+  8DF8 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
317+  8DFB C9           	ret
318+  8DFC
319+  8DFC 3A F5 84     10 ld a,(Ctrl_0)
320+  8DFF CB 7F        	bit 7,a
321+  8E01 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
322+  8E03 21 D8 84     	ld hl,CTRL_DESPLZ
323+  8E06 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
324+  8E07
325+  8E07 3A E1 84     11 ld a,(Coordenada_X)
326+  8E0A A7           	and a
327+  8E0B 20 47        	jr nz,3F
328+  8E0D 3A D8 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
329+  8E10 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
330+  8E11 28 41        	jr z,3F 														; _ pués aún podemos desplazarlo antes de desaparecer.
331+  8E13
332+  8E13              ; ---------- ---------- ----------
333+  8E13
334+  8E13 3A E3 84     	ld a,(Vel_left)
335+  8E16 FE 02        	cp 2
336+  8E18 28 0F        	jr z,1F
337+  8E1A 38 04        	jr c,6F
338+  8E1C FE 04        	cp 4
339+  8E1E 28 12        	jr z,7F
340+  8E20
341+  8E20              ; ---------- ---------- ----------
342+  8E20
343+  8E20 3A D8 84     6 ld a,(CTRL_DESPLZ)
344+  8E23 FE F9        	cp $f9
345+  8E25 20 2D        	jr nz,3F
346+  8E27 18 10        	jr 4F
347+  8E29 3A D8 84     1 ld a,(CTRL_DESPLZ)
348+  8E2C FE FA        	cp $fa
349+  8E2E 20 24        	jr nz,3F
350+  8E30 18 07        	jr 4F
351+  8E32 3A D8 84     7 ld a,(CTRL_DESPLZ)
352+  8E35 FE FC        	cp $fc
353+  8E37 20 1B        	jr nz,3F
354+  8E39
355+  8E39              ; ---------- ---------- ----------
356+  8E39
357+  8E39 CD 11 8F     4 call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
358+  8E3C              ;	call Reinicio
359+  8E3C
360+  8E3C              ; ---------- ---------- ----------
361+  8E3C
362+  8E3C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
363+  8E3E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
364+  8E3F 2A D6 84     	ld hl,(Puntero_objeto)
365+  8E42 22 DC 84     	ld (Puntero_DESPLZ),hl
366+  8E45 CD 7B 8E     	call DESPLZ_IZQ
367+  8E48 C1           	pop bc
368+  8E49 10 F3        	djnz 5B
369+  8E4B 2A D4 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
370+  8E4E 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
371+  8E4F 22 D4 84     	ld (Posicion_actual),hl
372+  8E52 18 23        	jr 2F 															; Salimos para pintar la nueva posición.
373+  8E54
374+  8E54              ; ---------- ---------- ----------
375+  8E54
376+  8E54 3A E3 84     3 ld a,(Vel_left)
377+  8E57 FE 08        	cp 8
378+  8E59 20 16        	jr nz,8F
379+  8E5B 2A D4 84     	ld hl,(Posicion_actual)
380+  8E5E 7D           	ld a,l
381+  8E5F E6 1F        	and $1f
382+  8E61 20 05        	jr nz,9F
383+  8E63
384+  8E63              ; ---------- ---------- ----------
385+  8E63
386+  8E63 CD 11 8F     	call Reaparece_derecha
387+  8E66
388+  8E66              ; ---------- ---------- ----------
389+  8E66
390+  8E66 18 0F        	jr 2F
391+  8E68 2A D4 84     9 ld hl,(Posicion_actual)
392+  8E6B 2B           	dec hl
393+  8E6C 22 D4 84     	ld (Posicion_actual),hl
394+  8E6F 18 06        	jr 2F
395+  8E71 2A D4 84     8 ld hl,(Posicion_actual)
396+  8E74 CD 7B 8E     	call DESPLZ_IZQ
397+  8E77 CD 5E 8F     2 call Genera_coordenadas
398+  8E7A C9           	ret
399+  8E7B
400+  8E7B              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
401+  8E7B              ;
402+  8E7B              ;	22/9/22
403+  8E7B
404+  8E7B CD 8A 8E     DESPLZ_IZQ call Desplaza_izquierda
405+  8E7E CD 9F 8E         call modifica_parametros_1er_DESPLZ
406+  8E81 CD C0 8E     	call Ciclo_completo_2
407+  8E84 21 F5 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
408+  8E87 CB BE        	res 7,(hl)
409+  8E89 C9           	ret
410+  8E8A
411+  8E8A 3A E3 84     Desplaza_izquierda ld a,(Vel_left)
412+  8E8D 47           	ld b,a
413+  8E8E 2A DC 84     	ld hl,(Puntero_DESPLZ)
414+  8E91 2B           1 dec hl
415+  8E92 2B           	dec hl
416+  8E93 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
417+  8E95 22 DC 84     	ld (Puntero_DESPLZ),hl
418+  8E98 CD 2B 86     	call Extrae_address
419+  8E9B 22 04 85     	ld (Caja_de_DESPLZ),hl
420+  8E9E C9           	ret
421+  8E9F
422+  8E9F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
423+  8E9F              ;
424+  8E9F              ;	modifica_parametros_1er_DESPLZ
425+  8E9F              ;
426+  8E9F              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
427+  8E9F              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
428+  8E9F              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
429+  8E9F
430+  8E9F 3A D8 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
431+  8EA2 A7           	and a
432+  8EA3 20 17        	jr nz,1F
433+  8EA5 21 D3 84     	ld hl,Columns
434+  8EA8 34           	inc (hl)
435+  8EA9 3A E0 84     	ld a,(Cuad_objeto)
436+  8EAC E6 01        	and 1
437+  8EAE 20 0C        	jr nz,1F
438+  8EB0 2A D4 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
439+  8EB3 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
440+  8EB4 22 D4 84     	ld (Posicion_actual),hl
441+  8EB7 CD E3 8E     	call Dec_CTRL_DESPLZ
442+  8EBA 18 03        	jr 2F
443+  8EBC CD E3 8E     1 call Dec_CTRL_DESPLZ
444+  8EBF C9           2 ret
445+  8EC0
446+  8EC0              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
447+  8EC0              ;
448+  8EC0 3A D8 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
449+  8EC3 FE F8        	cp $f8
450+  8EC5 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
451+  8EC7 18 19        	jr 3f
452+  8EC9 21 D3 84     1 ld hl,Columns
453+  8ECC 35           	dec (hl)
454+  8ECD AF           	xor a
455+  8ECE 32 D8 84     	ld (CTRL_DESPLZ),a
456+  8ED1 3A E0 84     	ld a,(Cuad_objeto)
457+  8ED4 E6 01        	and 1
458+  8ED6 28 07        	jr z,2F
459+  8ED8 2A D4 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
460+  8EDB 2B           	dec hl
461+  8EDC 22 D4 84     	ld (Posicion_actual),hl
462+  8EDF CD 5E 8F     2 call Genera_coordenadas
463+  8EE2 C9           3 ret
464+  8EE3
465+  8EE3              ; ---------- ---------- ---------- ---------- ---------- ----------
466+  8EE3              ;
467+  8EE3              ;	Dec_CTRL_DESPLZ
468+  8EE3              ;
469+  8EE3              ;	Subrutina de [modifica_punteros].
470+  8EE3              ;
471+  8EE3              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
472+  8EE3
473+  8EE3 21 D8 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
474+  8EE6 3A E3 84     	ld a,(Vel_left)
475+  8EE9 A7           	and a
476+  8EEA 28 06        	jr z,1F
477+  8EEC 47           	ld b,a
478+  8EED 35           3 dec (hl)
479+  8EEE 10 FD        	djnz 3B
480+  8EF0 18 01        	jr 2F
481+  8EF2 35           1 dec (hl)
482+  8EF3 C9           2 ret
483+  8EF4
484+  8EF4              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8EF4              ;
486+  8EF4              ;	19/10/22
487+  8EF4              ;
488+  8EF4              ;	(cp 29) para un Amadeus de 3 Columns.
489+  8EF4              ;	(cp 30)   ""  ""    ""     2 Columns.
490+  8EF4
491+  8EF4 3A E1 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
492+  8EF7 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
493+  8EF9 C9           	ret
494+  8EFA
495+  8EFA              ; ---------- ---------- ---------- ---------- ---------- ----------
496+  8EFA              ;
497+  8EFA              ;	19/10/22
498+  8EFA              ;
499+  8EFA              ;	(cp 2) para un Amadeus de 3 Columns.
500+  8EFA              ;	(cp 1)   ""  ""    ""     2 Columns.
501+  8EFA
502+  8EFA 3A E1 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
503+  8EFD FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
504+  8EFF C9           	ret
505+  8F00
506+  8F00              ; ---------- ---------- ---------- ---------- ---------- ----------
507+  8F00              ;
508+  8F00              ;	24/7/22
509+  8F00              ;
510+  8F00              ;	Inc_CTRL_DESPLZ
511+  8F00              ;
512+  8F00              ;	Subrutina de [modifica_punteros].
513+  8F00              ;
514+  8F00              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
515+  8F00
516+  8F00 21 D8 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
517+  8F03 3A E4 84     	ld a,(Vel_right)
518+  8F06 A7           	and a
519+  8F07 28 06        	jr z,1F
520+  8F09 47           	ld b,a
521+  8F0A 34           3 inc (hl)
522+  8F0B 10 FD        	djnz 3B
523+  8F0D 18 01        	jr 2F
524+  8F0F 34           1 inc (hl)
525+  8F10 C9           2 ret
526+  8F11
527+  8F11              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F11
529+  8F11 2A D4 84     Reaparece_derecha ld hl,(Posicion_actual)
530+  8F14 01 1F 00     	ld bc,31
531+  8F17 A7           	and a
532+  8F18 ED 4A        	adc hl,bc
533+  8F1A 22 D4 84     	ld (Posicion_actual),hl
534+  8F1D 21 F5 84     	ld hl,Ctrl_0														; $xxx1
535+  8F20 CB C6        	set 0,(hl)
536+  8F22 C9           	ret
537+  8F23
538+  8F23              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F23
540+  8F23 2A D4 84     Reaparece_izquierda ld hl,(Posicion_actual)
541+  8F26 01 1F 00     	ld bc,31
542+  8F29 A7           	and a
543+  8F2A ED 42        	sbc hl,bc
544+  8F2C 22 D4 84     	ld (Posicion_actual),hl 											; $xx1x
545+  8F2F 21 F5 84     	ld hl,Ctrl_0
546+  8F32 CB CE        	set 1,(hl)
547+  8F34 C9           	ret
548+  8F35
549+  8F35              ; ---------- ---------- ---------- ---------- ---------- ----------
550+  8F35
551+  8F35 24           Reaparece_abajo inc h
552+  8F36 01 E0 17     	ld bc,$17e0
553+  8F39 A7           	and a
554+  8F3A ED 4A        	adc hl,bc
555+  8F3C 22 D4 84     	ld (Posicion_actual),hl
556+  8F3F 21 F5 84     	ld hl,Ctrl_0
557+  8F42 CB D6        	set 2,(hl)
558+  8F44 C9           	ret
559+  8F45
560+  8F45              ; ---------- ---------- ---------- ---------- ---------- ----------
561+  8F45
562+  8F45 01 E0 17     Reaparece_arriba ld bc,$17e0
563+  8F48 A7           	and a
564+  8F49 ED 42        	sbc hl,bc
565+  8F4B 22 D4 84     	ld (Posicion_actual),hl
566+  8F4E 21 F5 84     	ld hl,Ctrl_0
567+  8F51 CB DE        	set 3,(hl)
568+  8F53 C9           	ret
569+  8F54
570+  8F54              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
571+  8F54
572+  8F54 2A DE 84     Reinicio ld hl,(Posicion_inicio)
573+  8F57
574+  8F57              ;	ld (Posicion_actual),hl
575+  8F57 21 00 00     	ld hl,0
576+  8F5A 22 D4 84     	ld (Posicion_actual),hl
577+  8F5D
578+  8F5D
579+  8F5D C9           	ret
# file closed: Direcciones.asm
597   8F5E              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F5E              ;	12/12/22
  2+  8F5E              ;
  3+  8F5E              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F5E              ;	Fila superior "0", Columna izquierda "0".
  5+  8F5E              ;
  6+  8F5E              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F5E              ;
  8+  8F5E              ;	Modifica: A
  9+  8F5E
 10+  8F5E C5           Genera_coordenadas push bc
 11+  8F5F E5           	push hl
 12+  8F60 2A D4 84     	ld hl,(Posicion_actual)
 13+  8F63 7D           	ld a,l
 14+  8F64 E6 1F        	and $1f
 15+  8F66 32 E1 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F69 CD 21 8C     	call calcula_tercio
 17+  8F6C 47           	ld b,a
 18+  8F6D 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F6E 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F70 7D           	ld a,l
 21+  8F71 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F73 28 05        	jr z,2F
 23+  8F75 0C           1 inc c
 24+  8F76 D6 20        	sub 32
 25+  8F78 20 FB        	jr nz,1B
 26+  8F7A 0C           2 inc c
 27+  8F7B 04           	inc b
 28+  8F7C 05           	dec b
 29+  8F7D 28 04        	jr z,3F
 30+  8F7F 3E E0        	ld a,$e0
 31+  8F81 10 F2        	djnz 1B
 32+  8F83 79           3 ld a,c
 33+  8F84 3D           	dec a
 34+  8F85 32 E2 84     	ld (Coordenada_y),a
 35+  8F88 E1           	pop hl
 36+  8F89 C1           	pop bc
 37+  8F8A C9           	ret
# file closed: Genera_coordenadas.asm
598   8F8B              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F8B
  2+  8F8B
  3+  8F8B              ;   11/8/22
  4+  8F8B              ;
  5+  8F8B              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F8B              ;
  7+  8F8B              ;   Mov_obj.asm
  8+  8F8B              ;
  9+  8F8B              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F8B              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F8B              ;
 12+  8F8B              ;   Codificación:
 13+  8F8B              ;
 14+  8F8B              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F8B              ;
 16+  8F8B
 17+  8F8B 02 10 00     Izquierda db 2,%00010000,0
 18+  8F8E 02 20 00     Derecha db 2,%00100000,0
 19+  8F91 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 20+  8F95 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 21+  8F99 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 22+  8F9D 03 14 84 00  Escaloncitos_izquierda db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 23+  8FA1 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 23+  8FA5 60 42 60 40
 23+  8FA9 63
 24+  8FAA 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 24+  8FAE 22 A3 80 A0
 25+  8FB2 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 25+  8FB6 84 A0 83 A0
 26+  8FBA 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 26+  8FBE 80 A3 22 A0
 27+  8FC2 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 27+  8FC6 40 60 42 60
 28+  8FCA 42 60 44 00      db %01000010,%01100000,%01000100,0
 29+  8FCE
 30+  8FCE 8E 8F        Indice_mov_Badsat defw Derecha
 31+  8FD0 95 8F        Indice_mov_Badsat2 defw Escaloncitos_derecha_arriba
 32+  8FD2 9D 8F        Indice_mov_Badsat3 defw Escaloncitos_izquierda
 33+  8FD4 91 8F        Indice_mov_Badsat4 defw Escaloncitos_izquierda_arriba
 34+  8FD6
 35+  8FD6 3A FB 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 36+  8FD9 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 37+  8FDA 28 02            jr z,1F
 38+  8FDC 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 39+  8FDE
 40+  8FDE 3A FC 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 41+  8FE1 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 42+  8FE3 32 FC 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 43+  8FE6              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 44+  8FE6 2A F9 84         ld hl,(Puntero_mov)
 45+  8FE9 7E               ld a,(hl)
 46+  8FEA 32 FB 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 47+  8FED 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 48+  8FEE 22 F9 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 49+  8FF1
 50+  8FF1 3A FD 84     Decoder ld a,(Repetimos_db)
 51+  8FF4 A7               and a
 52+  8FF5 20 0C            jr nz,12F
 53+  8FF7 2A F9 84         ld hl,(Puntero_mov)
 54+  8FFA 7E               ld a,(hl)
 55+  8FFB A7               and a
 56+  8FFC 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 57+  8FFE
 58+  8FFE E6 0F            and $0f
 59+  9000 32 FD 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 60+  9003              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 61+  9003 2A F9 84     12 ld hl,(Puntero_mov)
 62+  9006 CB 7E            bit 7,(hl)
 63+  9008 28 03            jr z,2F
 64+  900A CD 6D 8C         call Mov_down
 65+  900D 2A F9 84     2 ld hl, (Puntero_mov)
 66+  9010 CB 76            bit 6,(hl)
 67+  9012 28 03            jr z,3F
 68+  9014 CD 9B 8C         call Mov_up
 69+  9017 2A F9 84     3 ld hl, (Puntero_mov)
 70+  901A CB 6E            bit 5,(hl)
 71+  901C 28 03            jr z,4F
 72+  901E CD C9 8C         call Mov_right
 73+  9021 2A F9 84     4 ld hl, (Puntero_mov)
 74+  9024 CB 66            bit 4,(hl)
 75+  9026 28 03            jr z,5F
 76+  9028 CD D8 8D         call Mov_left
 77+  902B
 78+  902B              ; ---------- --------- --------- ---------- ----------
 79+  902B
 80+  902B 3A FD 84     5 ld a,(Repetimos_db)
 81+  902E A7               and a
 82+  902F 28 07            jr z,6F
 83+  9031 3D               dec a
 84+  9032 32 FD 84         ld (Repetimos_db),a
 85+  9035 28 01            jr z,6f
 86+  9037 C9           11 ret
 87+  9038 21 FB 84     6 ld hl,Contador_db_mov
 88+  903B 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 89+  903C 2A F9 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 90+  903F 23               inc hl
 91+  9040 22 F9 84         ld (Puntero_mov),hl
 92+  9043 18 F2            jr 11B
 93+  9045 2A F7 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 94+  9048 3A FC 84         ld a,(Incrementa_puntero)
 95+  904B 47               ld b,a
 96+  904C 23           8 inc hl
 97+  904D 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
 98+  904F 5E               ld e,(hl)
 99+  9050 23               inc hl
100+  9051 56               ld d,(hl)
101+  9052 EB               ex de,hl
102+  9053 22 F9 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
103+  9056 18 DF            jr 11B
104+  9058
105+  9058              ; ---------- --------- --------- ---------- ----------
106+  9058              ;
107+  9058              ;   11/8/22
108+  9058              ;
109+  9058              ;   Prepara_Puntero_mov
110+  9058
111+  9058 E5           Prepara_Puntero_mov push hl
112+  9059 D5               push de
113+  905A 2A F7 84         ld hl,(Puntero_indice_mov)
114+  905D 5E               ld e,(hl)
115+  905E 23               inc hl
116+  905F 56               ld d,(hl)
117+  9060 EB               ex de,hl
118+  9061 22 F9 84         ld (Puntero_mov),hl
119+  9064 D1               pop de
120+  9065 E1               pop hl
121+  9066 C9               ret
122+  9067
123+  9067              ; ---------- --------- --------- ---------- ----------
124+  9067              ;
125+  9067              ;   11/8/22
126+  9067              ;
127+  9067              ;   Reinicia_el_movimiento
128+  9067
129+  9067 CD 58 90     Reinicia_el_movimiento call Prepara_Puntero_mov
130+  906A AF               xor a
131+  906B 32 FB 84         ld (Contador_db_mov),a
132+  906E 32 FC 84         ld (Incrementa_puntero),a
133+  9071 C3 D6 8F         jp Movimiento
134+  9074
135+  9074              ; ---------- --------- --------- ---------- ----------
136+  9074
137+  9074
138+  9074
139+  9074
140+  9074
141+  9074
142+  9074
143+  9074
144+  9074
145+  9074
146+  9074
147+  9074
148+  9074
149+  9074
150+  9074
151+  9074
152+  9074
153+  9074
# file closed: Patrones_de_mov.asm
599   9074              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9074              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9074              ;
  3+  9074              ;	3/1/23
  4+  9074              ;
  5+  9074              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9074
  7+  9074              ;	ADC HL,SP	LD (addr),SP
  8+  9074              ;	ADD HL,SP	LD SP,(addr)
  9+  9074              ;	ADD IX,SP	LD SP,nn
 10+  9074              ; 	ADD IY,SP	LD SP,HL
 11+  9074              ;				LD SP,IX
 12+  9074              ;	DEC SP		LD SP,IY
 13+  9074
 14+  9074              ;	EX (SP),HL
 15+  9074              ;	EX (SP),IX
 16+  9074              ;	EX (SP),IY
 17+  9074
 18+  9074              ;	INC SP
 19+  9074
 20+  9074
 21+  9074                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 10 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 14 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 14 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 10 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
600   7FC0
601   7FC0              	SAVESNA "Pruebas.sna", START
602   7FC0
603   7FC0
604   7FC0
# file closed: Banco_de_pruebas.asm
