# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 41 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000
 11+  8000 08 80        Indice_disparo defw Disparo_0
 12+  8002 0C 80        	defw Disparo_f9
 13+  8004 10 80        	defw Disparo_fb
 14+  8006 14 80        	defw Disparo_fd
 15+  8008
 16+  8008              ; Disparo (CTRL_DESPLZ)="0".
 17+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 18+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 19+  800C 00 60 00 60  Disparo_f9 DEFB $00,$60,$00,$60
 20+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 21+  8010 18 00 18 00  Disparo_fb DEFB $18,$00,$18,$00
 22+  8014              ; Disparo (CTRL_DESPLZ)="fd"
 23+  8014 06 00 06 00  Disparo_fd DEFB $06,$00,$06,$00
 24+  8018
 25+  8018              ; ----------------------------------------------------------------------------------------
 26+  8018
 27+  8018              ; Badsat_izq. 2x2.
 28+  8018
 29+  8018 28 80        Indice_Badsat_izq defw Badsat_izquierda
 30+  801A 68 81        	defw Badsat_izq_fe
 31+  801C 38 81        	defw Badsat_izq_fd
 32+  801E 08 81        	defw Badsat_izq_fc
 33+  8020 D8 80        	defw Badsat_izq_fb
 34+  8022 A8 80        	defw Badsat_izq_fa
 35+  8024 78 80        	defw Badsat_izq_f9
 36+  8026 48 80        	defw Badsat_izq_f8
 37+  8028
 38+  8028 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 38+  802C 02 2A 02 55
 39+  8030 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 39+  8034 7F E8 03 60
 40+  8038 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 40+  803C 2B E8 54 40
 41+  8040 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 41+  8044 28 00 10 00
 42+  8048
 43+  8048 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 43+  804C 0A 00 01 15
 44+  8050 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 44+  8054 01 55 00 01
 45+  8058 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 45+  805C 00 01 B0 00
 46+  8060 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 46+  8064 FC 00 15 F4
 47+  8068 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 47+  806C 55 30 00 2A
 48+  8070 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 48+  8074 00 08 00 00
 49+  8078
 50+  8078 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 50+  807C 85 00 00 8A
 51+  8080 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 51+  8084 00 AA 80 00
 52+  8088 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 52+  808C 00 00 D8 00
 53+  8090 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 53+  8094 FE 00 0A FA
 54+  8098 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 54+  809C 2A 98 00 15
 55+  80A0 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 55+  80A4 00 04 00 00
 56+  80A8
 57+  80A8 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 57+  80AC 42 80 00 45
 58+  80B0 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 58+  80B4 00 55 40 00
 59+  80B8 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 59+  80BC 00 00 6C 00
 60+  80C0 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 60+  80C4 FF 00 05 7D
 61+  80C8 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 61+  80CC 15 4C 00 0A
 62+  80D0 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 62+  80D4 00 02 00 00
 63+  80D8
 64+  80D8 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 64+  80DC 21 40 00 22
 65+  80E0 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 65+  80E4 00 2A A0 00
 66+  80E8 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 66+  80EC 80 00 36 00
 67+  80F0 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 67+  80F4 7F 80 02 BE
 68+  80F8 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 68+  80FC 0A A6 00 05
 69+  8100 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 69+  8104 00 01 00 00
 70+  8108
 71+  8108 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 71+  810C 10 A0 00 11
 72+  8110 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 72+  8114 00 15 50 00
 73+  8118 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 73+  811C 40 00 1B 00
 74+  8120 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 74+  8124 BF C0 01 5F
 75+  8128 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 75+  812C 05 53 00 02
 76+  8130 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 76+  8134 00 00 80 00
 77+  8138
 78+  8138 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 78+  813C 08 50 00 08
 79+  8140 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 79+  8144 00 0A A8 00
 80+  8148 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 80+  814C A0 00 0D 80
 81+  8150 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 81+  8154 5F F8 00 AF
 82+  8158 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 82+  815C 02 A9 00 01
 83+  8160 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 83+  8164 00 00 40 00
 84+  8168
 85+  8168 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 85+  816C 04 28 00 04
 86+  8170 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 86+  8174 00 05 54 00
 87+  8178 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 87+  817C D0 00 06 C0
 88+  8180 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 88+  8184 2F FC 00 57
 89+  8188 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 89+  818C 01 54 80 00
 90+  8190 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 90+  8194 00 00 20 00
 91+  8198
 92+  8198
 93+  8198 A8 81        Indice_Badsat_der defw Badsat_derecha
 94+  819A C8 81        	defw Badsat_der_f8
 95+  819C F8 81        	defw Badsat_der_f9
 96+  819E 28 82        	defw Badsat_der_fa
 97+  81A0 58 82        	defw Badsat_der_fb
 98+  81A2 88 82        	defw Badsat_der_fc
 99+  81A4 B8 82        	defw Badsat_der_fd
100+  81A6 E8 82        	defw Badsat_der_fe
101+  81A8
102+  81A8 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
102+  81AC 54 40 AA 40
103+  81B0 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
103+  81B4 17 FE 06 C0
104+  81B8 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
104+  81BC 17 D4 02 2A
105+  81C0 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
105+  81C4 00 14 00 08
106+  81C8
107+  81C8 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
107+  81CC 20 00 2A 20
108+  81D0 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
108+  81D4 2A A0 00 15
109+  81D8 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
109+  81DC 00 03 60 00
110+  81E0 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
110+  81E4 F4 00 0B EA
111+  81E8 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
111+  81EC 03 2A 80 00
112+  81F0 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
112+  81F4 00 00 04 00
113+  81F8
114+  81F8 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
114+  81FC 10 00 15 10
115+  8200 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
115+  8204 15 50 00 0A
116+  8208 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
116+  820C 80 01 B0 00
117+  8210 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
117+  8214 FA 00 05 F5
118+  8218 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
118+  821C 01 95 40 00
119+  8220 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
119+  8224 00 00 02 00
120+  8228
121+  8228 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
121+  822C 08 00 0A 88
122+  8230 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
122+  8234 0A A8 00 05
123+  8238 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
123+  823C C0 00 D8 00
124+  8240 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
124+  8244 FD 00 02 FA
125+  8248 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
125+  824C 00 CA A0 00
126+  8250 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
126+  8254 80 00 01 00
127+  8258
128+  8258 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
128+  825C 84 00 05 44
129+  8260 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
129+  8264 05 54 00 02
130+  8268 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
130+  826C E0 00 6C 00
131+  8270 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
131+  8274 FE 80 01 7D
132+  8278 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
132+  827C 00 65 50 00
133+  8280 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
133+  8284 40 00 00 80
134+  8288
135+  8288 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
135+  828C 42 00 02 A2
136+  8290 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
136+  8294 02 AA 00 01
137+  8298 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
137+  829C F0 00 36 00
138+  82A0 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
138+  82A4 FF 40 00 BE
139+  82A8 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
139+  82AC 00 32 A8 00
140+  82B0 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
140+  82B4 A0 00 00 40
141+  82B8
142+  82B8 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
142+  82BC A1 00 01 51
143+  82C0 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
143+  82C4 01 55 00 00
144+  82C8 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
144+  82CC F8 00 1B 00
145+  82D0 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
145+  82D4 FF A0 00 1F
146+  82D8 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
146+  82DC 00 09 54 00
147+  82E0 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
147+  82E4 50 00 00 20
148+  82E8
149+  82E8 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
149+  82EC 50 80 00 A8
150+  82F0 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
150+  82F4 00 AA 80 00
151+  82F8 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
151+  82FC FC 00 0D 80
152+  8300 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
152+  8304 FF D0 00 0F
153+  8308 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
153+  830C 00 04 AA 00
154+  8310 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
154+  8314 28 00 00 10
155+  8318
156+  8318              ; ----------------------------------------------------------------------------------------
157+  8318
158+  8318              ; Amadeus. 2x2.
159+  8318
160+  8318 38 83        Indice_Amadeus_der defw Amadeus
161+  831A 00 00        	defw 0
162+  831C 58 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
163+  831E 00 00        	defw 0
164+  8320 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
165+  8322 00 00        	defw 0
166+  8324 B8 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
167+  8326 00 00        	defw 0	 								; (Fín de índice).
168+  8328
169+  8328 38 83        Indice_Amadeus_izq defw Amadeus
170+  832A 00 00        	defw 0
171+  832C B8 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
172+  832E 00 00        	defw 0
173+  8330 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
174+  8332 00 00        	defw 0
175+  8334 58 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
176+  8336 00 00        	defw 0	 								; (Fín de índice).
177+  8338
178+  8338 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
178+  833C 26 64 24 24
179+  8340 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
179+  8344 6F F6 67 E6
180+  8348 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
180+  834C F7 EF FF FF
181+  8350 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
181+  8354 8B D1 71 8E
182+  8358
183+  8358 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
183+  835C F1 00 09 99
184+  8360 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
184+  8364 0B 0D 00 1B
185+  8368 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
185+  836C 80 19 F9 80
186+  8370 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
186+  8374 F3 C0 3D FB
187+  8378 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
187+  837C 3E F7 C0 3E
188+  8380 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
188+  8384 40 1C 63 80
189+  8388
190+  8388 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
190+  838C 3C 40 02 66
191+  8390 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
191+  8394 02 C3 40 06
192+  8398 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
192+  839C 60 06 7E 60
193+  83A0 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
193+  83A4 3C F0 0F 7E
194+  83A8 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
194+  83AC 0F BD F0 0F
195+  83B0 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
195+  83B4 10 07 18 E0
196+  83B8
197+  83B8 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
197+  83BC 8F 10 00 99
198+  83C0 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
198+  83C4 00 B0 D0 01
199+  83C8 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
199+  83CC D8 01 9F 98
200+  83D0 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
200+  83D4 CF 3C 03 DF
201+  83D8 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
201+  83DC 03 EF 7C 03
202+  83E0 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
202+  83E4 44 01 C6 38
203+  83E8
204+  83E8              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83E8              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83E8
  2+  83E8              ; Base de datos de entidades e Índice.
  3+  83E8              ;
  4+  83E8              ; 17/02/23
  5+  83E8
  6+  83E8              ; Control. %00000001 00000001
  7+  83E8              ;
  8+  83E8              ;     [Bit0] ..... Impacto. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
  9+  83E8              ;                  _ hacen las entidades hacia abajo.
 10+  83E8              ;
 11+  83E8              ;     [Bit8] ..... Dirección. "1" Cuando se produce colisión al generar un disparo.
 12+  83E8
 13+  83E8 EE 83        Indice_de_disparos_Amadeus defw Disparo_1A
 14+  83EA F6 83        	defw Disparo_2A
 15+  83EC FE 83        	defw Disparo_3A
 16+  83EE
 17+  83EE 00 00        Disparo_1A defw 0									; Control.
 18+  83F0 00 00        	defw 0											; Puntero objeto.
 19+  83F2 00 00        	defw 0											; Puntero de impresión.
 20+  83F4 00 00        	defw 0											; Rutina de impresión.
 21+  83F6
 22+  83F6 00 00        Disparo_2A defw 0									; Control.
 23+  83F8 00 00        	defw 0											; Puntero objeto.
 24+  83FA 00 00        	defw 0											; Puntero de impresión.
 25+  83FC 00 00        	defw 0											; Rutina de impresión.
 26+  83FE
 27+  83FE 00 00        Disparo_3A defw 0
 28+  8400
 29+  8400 16 84        Indice_de_disparos_entidades defw Disparo_1
 30+  8402 1E 84        	defw Disparo_2
 31+  8404 26 84        	defw Disparo_3
 32+  8406 2E 84        	defw Disparo_4
 33+  8408 36 84        	defw Disparo_5
 34+  840A 3E 84        	defw Disparo_6
 35+  840C 46 84        	defw Disparo_7
 36+  840E 4E 84        	defw Disparo_8
 37+  8410 56 84        	defw Disparo_9
 38+  8412 5E 84        	defw Disparo_10
 39+  8414 66 84        	defw Disparo_11
 40+  8416
 41+  8416 00 00        Disparo_1 defw 0									; Control.
 42+  8418 00 00        	defw 0											; Puntero objeto.
 43+  841A 00 00        	defw 0											; Puntero de impresión.
 44+  841C 00 00        	defw 0											; Rutina de impresión.
 45+  841E
 46+  841E 00 00        Disparo_2 defw 0									; Control.
 47+  8420 00 00        	defw 0											; Puntero objeto.
 48+  8422 00 00        	defw 0											; Puntero de impresión.
 49+  8424 00 00        	defw 0											; Rutina de impresión.
 50+  8426
 51+  8426 00 00        Disparo_3 defw 0									; Control.
 52+  8428 00 00        	defw 0											; Puntero objeto.
 53+  842A 00 00        	defw 0											; Puntero de impresión.
 54+  842C 00 00        	defw 0											; Rutina de impresión.
 55+  842E
 56+  842E 00 00        Disparo_4 defw 0									; Control.
 57+  8430 00 00        	defw 0											; Puntero objeto.
 58+  8432 00 00        	defw 0											; Puntero de impresión.
 59+  8434 00 00        	defw 0											; Rutina de impresión.
 60+  8436
 61+  8436 00 00        Disparo_5 defw 0									; Control.
 62+  8438 00 00        	defw 0											; Puntero objeto.
 63+  843A 00 00        	defw 0											; Puntero de impresión.
 64+  843C 00 00        	defw 0
 65+  843E
 66+  843E 00 00        Disparo_6 defw 0									; Control.
 67+  8440 00 00        	defw 0											; Puntero objeto.
 68+  8442 00 00        	defw 0											; Puntero de impresión.
 69+  8444 00 00        	defw 0											; Rutina de impresión.
 70+  8446
 71+  8446 00 00        Disparo_7 defw 0									; Control.
 72+  8448 00 00        	defw 0											; Puntero objeto.
 73+  844A 00 00        	defw 0											; Puntero de impresión.
 74+  844C 00 00        	defw 0											; Rutina de impresión.
 75+  844E
 76+  844E 00 00        Disparo_8 defw 0									; Control.
 77+  8450 00 00        	defw 0											; Puntero objeto.
 78+  8452 00 00        	defw 0											; Puntero de impresión.
 79+  8454 00 00        	defw 0											; Rutina de impresión.
 80+  8456
 81+  8456 00 00        Disparo_9 defw 0									; Control.
 82+  8458 00 00        	defw 0											; Puntero objeto.
 83+  845A 00 00        	defw 0											; Puntero de impresión.
 84+  845C 00 00        	defw 0											; Rutina de impresión.
 85+  845E
 86+  845E 00 00        Disparo_10 defw 0									; Control.
 87+  8460 00 00        	defw 0											; Puntero objeto.
 88+  8462 00 00        	defw 0											; Puntero de impresión.
 89+  8464 00 00        	defw 0											; Rutina de impresión.
 90+  8466
 91+  8466 00 00        Disparo_11 defw 0
 92+  8468
 93+  8468              ; -------------------------------------------------------------------------------------
 94+  8468
 95+  8468              Indice_de_entidades									; 58 Bytes por entidad.
 96+  8468
 97+  8468 AE 84        	defw Entidad_1
 98+  846A E8 84        	defw Entidad_2
 99+  846C 22 85        	defw Entidad_3
100+  846E 5C 85        	defw Entidad_4
101+  8470              ;	...
102+  8470              ;	...
103+  8470              ;	+ entidades ...
104+  8470
105+  8470 00 00        	defw 0
106+  8472 00 00        	defw 0
107+  8474
108+  8474              ; ---------- ---------- ---------- ---------- ----------
109+  8474
110+  8474 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
111+  8476 00 00        	defw 0		 									; (Posicion_actual).
112+  8478 00 00        	defw 0	 										; (Puntero_objeto).
113+  847A 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
114+  847D
115+  847D 05           	db %00000101									; (Attr).
116+  847E
117+  847E 18 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
118+  8480 28 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
119+  8482 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
120+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
121+  8486
122+  8486 D0 50        	defw $50d0										; (Posicion_inicio).
123+  8488 04           	db 4 											; (Cuad_objeto).
124+  8489
125+  8489 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
126+  848D
127+  848D 00 00        	db 0,0											; Variables_de_borrado
128+  848F 00 00        	defw 0											;	" " " " " " "
129+  8491 00 00        	defw 0											;	" " " " " " "
130+  8493 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
131+  8497
132+  8497 00 00        	db 0,0											; Variables_de_pintado
133+  8499 00 00        	defw 0											;	" " " " " " "
134+  849B 00 00        	defw 0											;	" " " " " " "
135+  849D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
136+  84A1
137+  84A1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
138+  84A3
139+  84A3 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
140+  84A7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
141+  84AA
142+  84AA 00           	db 0 											; (Columnas).
143+  84AB 00 00        	defw 0											; (Limite_horizontal).
144+  84AD 00           	db 0											; (Limite_vertical).
145+  84AE
146+  84AE              ; ---------- ---------- ---------- ---------- ----------
147+  84AE
148+  84AE 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
149+  84B0 00 00        	defw 0											; (Posicion_actual).
150+  84B2 00 00        	defw 0 											; (Puntero_objeto).
151+  84B4 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
152+  84B7
153+  84B7 00           	db %00000000 									; (Attr).
154+  84B8
155+  84B8 00 00        	defw 0											; (Indice_Sprite_der).
156+  84BA 00 00        	defw 0											; (Indice_Sprite_izq).
157+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_der).
158+  84BE 00 00        	defw 0											; (Puntero_DESPLZ_izq).
159+  84C0
160+  84C0 00 00        	defw 0											; (Posicion_inicio).
161+  84C2 00           	db 0											; (Cuad_objeto).
162+  84C3
163+  84C3 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
164+  84C7
165+  84C7 00 00        	db 0,0										    ; Variables_de_borrado
166+  84C9 00 00        	defw 0											;	" " " " " " "
167+  84CB 00 00        	defw 0											;	" " " " " " "
168+  84CD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
169+  84D1
170+  84D1 00 00        	db 0,0											; Variables_de_pintado
171+  84D3 00 00        	defw 0											;	" " " " " " "
172+  84D5 00 00        	defw 0											;	" " " " " " "
173+  84D7 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
174+  84DB
175+  84DB 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
176+  84DD
177+  84DD 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
178+  84E1 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
179+  84E4
180+  84E4 00           	db 0 											; (Columnas).
181+  84E5 00 00        	defw 0											; (Limite_horizontal).
182+  84E7 00           	db 0											; (Limite_vertical).
183+  84E8
184+  84E8              ; ---------- ---------- ---------- ---------- ----------
185+  84E8
186+  84E8 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
187+  84EA 00 00        	defw 0                                          ; (Posicion_actual).
188+  84EC 00 00        	defw 0											; (Puntero_objeto).
189+  84EE 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
190+  84F1
191+  84F1 02           	db %00000010									; (Attr).
192+  84F2
193+  84F2 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
194+  84F4 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
195+  84F6 00 00        	defw 0											; (Puntero_DESPLZ_der).
196+  84F8 00 00        	defw 0											; (Puntero_DESPLZ_izq).
197+  84FA
198+  84FA 7E 47        	defw $477e                                      ; (Posicion_inicio).
199+  84FC 02           	db 2											; (Cuad_objeto).
200+  84FD
201+  84FD 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
202+  8501
203+  8501 00 00        	db 0,0											; Variables_de_borrado
204+  8503 00 00        	defw 0										 	;	" " " " " " "
205+  8505 00 00        	defw 0											;	" " " " " " "
206+  8507 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
207+  850B
208+  850B 00 00        	db 0,0											; Variables_de_pintado
209+  850D 00 00        	defw 0											;	" " " " " " "
210+  850F 00 00        	defw 0											;	" " " " " " "
211+  8511 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
212+  8515
213+  8515 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
214+  8517
215+  8517 7F 93 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
216+  851B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
217+  851E
218+  851E 00           	db 0 											; (Columnas).
219+  851F 00 00        	defw 0											; (Limite_horizontal).
220+  8521 00           	db 0											; (Limite_vertical).
221+  8522
222+  8522              ; ---------- ---------- ---------- ---------- ----------
223+  8522
224+  8522 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
225+  8524 00 00        	defw 0                                          ; (Posicion_actual).
226+  8526 00 00        	defw 0											; (Puntero_objeto).
227+  8528 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
228+  852B
229+  852B 04           	db %00000100									; (Attr).
230+  852C
231+  852C 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
232+  852E 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
233+  8530
234+  8530 00 00        	defw 0											; (Puntero_DESPLZ_der).
235+  8532 00 00        	defw 0											; (Puntero_DESPLZ_izq).
236+  8534
237+  8534 A1 47        	defw $47a1                                      ; (Posicion_inicio).
238+  8536 01           	db 1											; (Cuad_objeto).
239+  8537
240+  8537 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
241+  853B
242+  853B 00 00        	db 0,0											; Variables_de_borrado
243+  853D 00 00        	defw 0										 	;	" " " " " " "
244+  853F 00 00        	defw 0											;	" " " " " " "
245+  8541 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
246+  8545
247+  8545 00 00        	db 0,0											; Variables_de_pintado
248+  8547 00 00        	defw 0											;	" " " " " " "
249+  8549 00 00        	defw 0											;	" " " " " " "
250+  854B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
251+  854F
252+  854F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
253+  8551
254+  8551 81 93 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
255+  8555 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
256+  8558
257+  8558 00           	db 0 											; (Columnas).
258+  8559 00 00        	defw 0											; (Limite_horizontal).
259+  855B 00           	db 0											; (Limite_vertical).
260+  855C
261+  855C              ; ---------- ---------- ---------- ---------- ----------
262+  855C
263+  855C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
264+  855E 00 00        	defw 0                                          ; (Posicion_actual).
265+  8560 00 00        	defw 0 											; (Puntero_objeto).
266+  8562 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
267+  8565
268+  8565 01           	db %00000001									; (Attr).
269+  8566
270+  8566 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
271+  8568 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
272+  856A
273+  856A 00 00        	defw 0											; (Puntero_DESPLZ_der).
274+  856C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
275+  856E
276+  856E BE 47        	defw $47be                                      ; (Posicion_inicio).
277+  8570 00           	db 0											; (Cuad_objeto).
278+  8571
279+  8571 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
280+  8575
281+  8575 00 00        	db 0,0											; Variables_de_borrado
282+  8577 00 00        	defw 0										 	;	" " " " " " "
283+  8579 00 00        	defw 0											;	" " " " " " "
284+  857B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
285+  857F
286+  857F 00 00        	db 0,0											; Variables_de_pintado
287+  8581 00 00        	defw 0											;	" " " " " " "
288+  8583 00 00        	defw 0											;	" " " " " " "
289+  8585 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
290+  8589
291+  8589 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
292+  858B
293+  858B 71 93 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
294+  858F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
295+  8592
296+  8592 00           	db 0 											; (Columnas).
297+  8593 00 00        	defw 0											; (Limite_horizontal).
298+  8595 00           	db 0											; (Limite_vertical).
299+  8596
# file closed: Entidades_y_disparos.asm
 21   8596
 22   8596              ; ******************************************************************************************************************************************************************************************
 23   8596              ; Constantes.
 24   8596              ; ******************************************************************************************************************************************************************************************
 25   8596              ;
 26   8596              ; 8/11/22
 27   8596              ;
 28   8596              ; Constantes generales.
 29   8596              ;
 30   8596
 31   8596              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8596              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8596              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8596              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8596
 36   8596              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 37   8596              ;                                   				    ; _de los registros y las llamadas a las rutinas de impresión.
 38   8596              ;                               				        ; De momento situamos este almacén en $7000.
 39   8596              Album_de_fotos_disparos equ $7060						; En (Album_de_fotos_disparos) vamos a ir almacenando los valores_
 40   8596              ;                                   				    ; _de los registros y llamadas a las distintas rutinas de impresión para poder pintar `disparos´.
 41   8596              ;                               				        ; De momento situamos este almacén en $7060.
 42   8596
 43   8596              ; ******************************************************************************************************************************************************************************************
 44   8596              ; Variables.
 45   8596              ; ******************************************************************************************************************************************************************************************
 46   8596              ;
 47   8596              ; 10/11/22
 48   8596              ;
 49   8596              ; Variables de DRAW. (Motor principal).
 50   8596              ;
 51   8596              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 52   8596
 53   8596 02           Filas db 2												; Filas. [DRAW]
 54   8597 02           Columns db 2  											; Nº de columnas. [DRAW]
 55   8598 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 56   859A 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 57   859C 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 58   859D 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 59   859E
 60   859E              ; ---------- ---------- ---------- ---------;      ;---------
 61   859E
 62   859E 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 63   859F              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 64   859F              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 65   859F 04           Attr db %00000100										; Atributos de la entidad:
 66   85A0
 67   85A0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   85A0              ;
 69   85A0              ;	COLORES: 0 ..... NEGRO
 70   85A0              ;    		 1 ..... AZUL
 71   85A0              ; 			 2 ..... ROJO
 72   85A0              ;			 3 ..... MAGENTA
 73   85A0              ; 			 4 ..... VERDE
 74   85A0              ; 			 5 ..... CIAN
 75   85A0              ;			 6 ..... AMARILLO
 76   85A0              ; 			 7 ..... BLANCO
 77   85A0
 78   85A0 98 81        Indice_Sprite_der defw Indice_Badsat_der
 79   85A2 18 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   85A4 00 00        Puntero_DESPLZ_der defw 0
 81   85A6 00 00        Puntero_DESPLZ_izq defw 0
 82   85A8
 83   85A8 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   85AA 02           Cuad_objeto db 2										; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   85AB
 86   85AB              ; Variables de objeto. (Características).
 87   85AB
 88   85AB 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   85AC 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   85AD 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   85AE 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   85AF
 93   85AF 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   85B1 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   85B3 00 00        	defw 0
 96   85B5 00 00 00 00  	db 0,0,0,0
 97   85B9
 98   85B9 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   85BB 00 00        	defw 0
100   85BD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   85BF 00 00 00 00  	db 0,0,0,0
102   85C3
103   85C3              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   85C3
105   85C3 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   85C4              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   85C4              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   85C4              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   85C4              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   85C4              ;
111   85C4              ; 														DESCRIPCIÖN:
112   85C4              ;
113   85C4              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   85C4              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   85C4              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   85C4              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   85C4              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   85C4              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   85C4              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   85C4              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   85C4              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   85C4              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   85C4              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   85C4              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   85C4              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   85C4              ;
127   85C4              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   85C4              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   85C4              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   85C4
131   85C4 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   85C5
133   85C5              ; Movimiento.
134   85C5
135   85C5 6D 93        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
136   85C7 00 00        Puntero_mov defw 0
137   85C9 00           Contador_db_mov db 0
138   85CA 00           Incrementa_puntero db 0
139   85CB 00           Repetimos_db db 0
140   85CC
141   85CC              ; Variables de funcionamiento. [DRAW].
142   85CC
143   85CC 00           Columnas db 0
144   85CD 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
145   85CF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   85CF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   85D0
148   85D0              ; 59 Bytes por entidad.
149   85D0              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
150   85D0              ;					         		---------;      ;---------
151   85D0
152   85D0
153   85D0              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   85D0
155   85D0 00           Ctrl_1 db 0 											; 2º Byte de control de propósito general.
156   85D1
157   85D1              ;														DESCRIPCIÓN:
158   85D1              ;
159   85D1              ;														BIT 0, La rutina de generación de disparos, [Genera_disparo], pone este bit a "1" para indicar a la_
160   85D1              ;															_ rutina [Guarda_foto_registros] que los datos a guardar pertenecen a un disparo y no a una entidad,_
161   85D1              ;															_ por lo tanto hemos de almacenarlos en `Album_de_fotos_disparos´ en lugar de `Album_de_fotos´.
162   85D1              ; Gestión de ENTIDADES.
163   85D1
164   85D1 00 00        Puntero_store_entidades defw 0
165   85D3 00 00        Puntero_restore_entidades defw 0
166   85D5 00 00        Indice_restore defw 0
167   85D7 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
168   85D8 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
169   85D9              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
170   85D9              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
171   85D9              ;														; _ (Numero_de_malotes)="0".
172   85D9 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
173   85DB              ;														; _variable para almacenar lo posición del puntero_
174   85DB              ; 														; _de pila, SP.
175   85DB 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
176   85DD              ;														; La utiliza la rutina [Extrae_foto_registros].
177   85DD 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
178   85DF              ;														; _el snapshot de los registros de la siguiente entidad.
179   85DF              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
180   85DF 60 70        Stack_snapshot_disparos defw Album_de_fotos_disparos	; Puntero que indica la posición de memoria donde vamos a guardar_
181   85E1              ;														; _el snapshot de los registros del siguiente disparo.
182   85E1              ;														; Inicialmente está situado en la posición $7060, Album_de_fotos_disparos.
183   85E1
184   85E1              ; Gestión de Disparos.
185   85E1
186   85E1 00           Numero_de_disparotes db 0
187   85E2 00 84        Stack_guns defw Indice_de_disparos_entidades			; Este puntero se irá desplazando por el índice de disparos_
188   85E4              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
189   85E4              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
190   85E4 00 00        Puntero_DESPLZ_DISPARO_ENTIDADES defw 0
191   85E6 00 00        Puntero_DESPLZ_DISPARO_AMADEUS defw 0
192   85E8
193   85E8
194   85E8
195   85E8              ; Gestión de FRAMES.
196   85E8
197   85E8 00           Switch db 0
198   85E9
199   85E9              ; Variables de Raster y localización en pantalla.
200   85E9
201   85E9 00 FF        Temp_Raster defw $ff00
202   85EB
203   85EB              ; Rutina principal *************************************************************************************************************************************************************************
204   85EB              ;
205   85EB              ;	14/11/22
206   85EB
207   85EB 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
208   85EE
209   85EE 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
210   85F0 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
211   85F2 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
212   85F4 F3           	DI
213   85F5
214   85F5 3E 01        	ld a,1
215   85F7 D3 FE        	out ($fe),a
216   85F9
217   85F9 3E 07        	ld a,%00000111
218   85FB CD A6 8F     	call Cls
219   85FE
220   85FE              ;	call Pinta_FILAS
221   85FE
222   85FE CD 37 88     	call Pulsa_ENTER
223   8601
224   8601 21 D7 85     	ld hl,Numero_de_entidades
225   8604 46           	ld b,(hl)
226   8605 04           	inc b
227   8606 05           	dec b
228   8607 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
229   8609
230   8609              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
231   8609              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
232   8609              ;	Pintamos el resto de entidades:
233   8609
234   8609 CD 30 87     	call Inicia_punteros_de_entidades
235   860C
236   860C              ;	INICIA ENTIDADES!!!!!
237   860C
238   860C C5           1 push bc  												; Guardo el contador de entidades.
239   860D CD 8A 87      	call Inicia_Puntero_objeto
240   8610 CD F6 89     	call Draw
241   8613 CD A0 7F     	call Guarda_foto_registros
242   8616 CD D2 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
243   8619 C1           	pop bc
244   861A 10 F0        	djnz 1B  											; Decremento el contador de entidades.
245   861C
246   861C              ; 	INICIA AMADEUS!!!!!
247   861C
248   861C CD 13 88     3 call Restore_Amadeus
249   861F CD 8A 87     	call Inicia_Puntero_objeto
250   8622 CD F6 89     	call Draw
251   8625 CD A0 7F     	call Guarda_foto_registros
252   8628 CD 25 88     	call Store_Amadeus
253   862B
254   862B              ; Iniciamos los punteros de los índices de las dos bases de datos de disparo, (Amadeus/Entidades).
255   862B
256   862B CD 46 87     	call Inicia_Puntero_Disparo_Entidades
257   862E CD 4D 87     	call Inicia_Puntero_Disparo_Amadeus
258   8631
259   8631
260   8631              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
261   8631
262   8631 CD 30 87     	call Inicia_punteros_de_entidades
263   8634 CD 01 88     	call Restore_Primera_entidad
264   8637
265   8637 3A D7 85     	ld a,(Numero_de_entidades)
266   863A 3C           	inc a
267   863B 32 D8 85     	ld (Numero_de_malotes),a
268   863E
269   863E FB           2 ei
270   863F 18 FD        	jr 2B
271   8641
272   8641              ; -----------------------------------------------------------------------------------
273   8641
274   8641              Frame
275   8641
276   8641              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
277   8641              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
278   8641
279   8641 3E 02            ld a,2
280   8643 D3 FE            out ($fe),a
281   8645 CD FA 8C     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
282   8648 CD 33 8D     	call Extrae_foto_registros_disparos
283   864B 3E 01            ld a,1
284   864D D3 FE            out ($fe),a
285   864F
286   864F              ; ----------------------------------------------------------------------
287   864F
288   864F 21 00 70     	ld hl,Album_de_fotos
289   8652 22 DD 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
290   8655              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
291   8655 3A D7 85         ld a,(Numero_de_entidades)
292   8658 47               ld b,a
293   8659 A7           	and a
294   865A 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
295   865C
296   865C C5           2 push bc
297   865D CD A9 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
298   8660 3A C3 85     	ld a,(Ctrl_0)
299   8663 CB 67        	bit 4,a
300   8665 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
301   8667
302   8667              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
303   8667              ; Las entidades sólo generan disparo cuando se mueven.
304   8667              ; 16/02/23.
305   8667              ; [[[
306   8667 CD 6D 88     	call Detecta_disparo_entidad
307   866A              ; ]]]
308   866A
309   866A CD F7 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
310   866D
311   866D 21 C3 85     1 ld hl,Ctrl_0
312   8670 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
313   8672 AF           	xor a
314   8673 32 C4 85     	ld (Obj_dibujado),a
315   8676 CD D2 87     	call Store_Restore_entidades
316   8679 C1           	pop bc
317   867A 10 E0        	djnz 2B
318   867C
319   867C              ; Tras la gestión de las entidades, ... AMADEUS.
320   867C
321   867C CD 13 88     4 call Restore_Amadeus
322   867F CD C8 86     	call Mov_Amadeus
323   8682 3A C3 85     	ld a,(Ctrl_0)
324   8685 CB 67        	bit 4,a
325   8687 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
326   8689 CD F7 86     	call Guarda_foto_entidad_a_pintar
327   868C
328   868C 21 C3 85     3 ld hl,Ctrl_0
329   868F CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
330   8691 AF           	xor a
331   8692 32 C4 85     	ld (Obj_dibujado),a
332   8695 CD 25 88     	call Store_Amadeus
333   8698
334   8698              ; -----
335   8698
336   8698 CD 30 87     	call Inicia_punteros_de_entidades
337   869B CD 01 88     	call Restore_Primera_entidad
338   869E
339   869E              ; Calculamos el nº de malotes y de disparotes para pintarlos nada más comenzar el siguiente FRAME.
340   869E
341   869E CD 54 87     	call Calcula_numero_de_malotes
342   86A1 CD 6C 87     	call Calcula_numero_de_disparotes
343   86A4
344   86A4 3E 04        	ld a,4
345   86A6 D3 FE        	out ($fe),a
346   86A8 C9           	ret
347   86A9
348   86A9              ; --------------------------------------------------------------------------------------------------------------
349   86A9              ;
350   86A9              ;	29/1/23
351   86A9
352   86A9              Mov_obj
353   86A9
354   86A9              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
355   86A9
356   86A9 AF           	xor a
357   86AA 32 C4 85     	ld (Obj_dibujado),a
358   86AD CD 01 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
359   86B0              ;														; Obj_dibujado="0".
360   86B0              ; Movemos Entidades malignas.
361   86B0
362   86B0 CD 83 93     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
363   86B3 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
364   86B6 CB 67        	bit 4,a
365   86B8 C8           	ret z
366   86B9
367   86B9              ; ---------
368   86B9
369   86B9 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
370   86BB 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
371   86BE CD 01 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
372   86C1 CD 18 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
373   86C4 CD E7 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
374   86C7 C9           	ret													; _de la misma.
375   86C8
376   86C8              ; --------------------------------------------------------------------------------------------------------------
377   86C8              ;
378   86C8              ;	29/1/23
379   86C8
380   86C8              Mov_Amadeus
381   86C8
382   86C8 AF           	xor a
383   86C9 32 C4 85     	ld (Obj_dibujado),a
384   86CC CD 01 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
385   86CF              ;														; Obj_dibujado="0".
386   86CF              ; Movemos Amadeus.
387   86CF
388   86CF CD 4B 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
389   86D2 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
390   86D5 CB 67        	bit 4,a
391   86D7 C8           	ret z
392   86D8
393   86D8              ; ---------
394   86D8
395   86D8 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
396   86DA 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
397   86DD CD 01 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
398   86E0 CD 18 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
399   86E3 CD E7 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
400   86E6 C9           	ret													; _de la nave.
401   86E7
402   86E7              ; --------------------------------------------------------------------------------------------------------------
403   86E7              ;
404   86E7              ;	31/01/23
405   86E7              ;
406   86E7              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
407   86E7
408   86E7              Guarda_foto_entidad_a_borrar
409   86E7
410   86E7 CD D0 8C     	call Prepara_draw
411   86EA CD 0A 8C     	call calcula_CColumnass
412   86ED CD 41 8C     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
413   86F0 CD 96 8C     	call Define_rutina_de_impresion
414   86F3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
415   86F6 C9           	ret
416   86F7
417   86F7              ; --------------------------------------------------------------------------------------------------------------
418   86F7              ;
419   86F7              ;	31/01/23
420   86F7              ;
421   86F7              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
422   86F7              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
423   86F7
424   86F7              Guarda_foto_entidad_a_pintar
425   86F7
426   86F7 CD 24 87     	call Repone_pintar
427   86FA CD F6 89     	call Draw
428   86FD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
429   8700 C9           	ret
430   8701
431   8701              ; --------------------------------------------------------------------------------------------------------------
432   8701              ;
433   8701              ;
434   8701
435   8701 21 96 85     Prepara_var_pintado_borrado	ld hl,Filas
436   8704 3A C4 85     	ld a,(Obj_dibujado)
437   8707 A7           	and a
438   8708 28 05        	jr z,1F
439   870A 11 B9 85     	ld de,Variables_de_pintado
440   870D 18 03        	jr 2F
441   870F 11 AF 85     1 ld de,Variables_de_borrado
442   8712 01 08 00     2 ld bc,8
443   8715 ED B0        	ldir
444   8717 C9           	ret
445   8718
446   8718              ; --------------------------------------------------------------------------------------------------------------
447   8718
448   8718 21 AF 85     Repone_borrar ld hl,Variables_de_borrado
449   871B 11 96 85     	ld de,Filas
450   871E 01 08 00     	ld bc,8
451   8721 ED B0        	ldir
452   8723 C9           	ret
453   8724
454   8724 21 B9 85     Repone_pintar ld hl,Variables_de_pintado
455   8727 11 96 85     	ld de,Filas
456   872A 01 08 00     	ld bc,8
457   872D ED B0        	ldir
458   872F C9           	ret
459   8730
460   8730              ; *************************************************************************************************************************************************************
461   8730              ;
462   8730              ; 8/1/23
463   8730              ;
464   8730              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
465   8730              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
466   8730              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
467   8730
468   8730              ; Destruye HL y DE !!!!!
469   8730
470   8730              Inicia_punteros_de_entidades
471   8730
472   8730 21 68 84     	ld hl,Indice_de_entidades
473   8733 CD 84 87         call Extrae_address
474   8736 22 D1 85         ld (Puntero_store_entidades),hl
475   8739 21 6A 84     	ld hl,Indice_de_entidades+2
476   873C 22 D5 85     	ld (Indice_restore),hl
477   873F CD 84 87     	call Extrae_address
478   8742 22 D3 85     	ld (Puntero_restore_entidades),hl
479   8745 C9               ret
480   8746
481   8746              ; *************************************************************************************************************************************************************
482   8746              ;
483   8746              ; 8/1/23
484   8746              ;
485   8746              ;	Inicializamos los punteros de selección de los 2 índices de disparo, Amadeus y Entidades.
486   8746
487   8746 21 00 84     Inicia_Puntero_Disparo_Entidades ld hl,Indice_de_disparos_entidades
488   8749 22 E4 85     	ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
489   874C C9           	ret
490   874D 21 E8 83     Inicia_Puntero_Disparo_Amadeus ld hl,Indice_de_disparos_Amadeus
491   8750 22 E6 85     	ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
492   8753 C9           	ret
493   8754
494   8754              ; -------------------------------------------------------------------------------------------------------------
495   8754              ;
496   8754              ; 28/2/23
497   8754              ;
498   8754
499   8754              Calcula_numero_de_malotes
500   8754
501   8754 21 00 70     	ld hl,Album_de_fotos
502   8757 EB           	ex de,hl
503   8758 2A DD 85     	ld hl,(Stack_snapshot)
504   875B
505   875B 06 00        	ld b,0
506   875D 7D           	ld a,l
507   875E 93           	sub e
508   875F 28 07        	jr z,1F
509   8761
510   8761              ; Nº de malotes no es "0".
511   8761
512   8761 D6 06        2 sub 6
513   8763 04           	inc b
514   8764 A7           	and a
515   8765 20 FA        	jr nz,2B
516   8767 78           	ld a,b
517   8768
518   8768 32 D8 85     1 ld (Numero_de_malotes),a
519   876B C9           	ret
520   876C
521   876C              ; -------------------------------------------------------------------------------------------------------------
522   876C              ;
523   876C              ; 28/2/23
524   876C              ;
525   876C
526   876C              Calcula_numero_de_disparotes
527   876C
528   876C 21 60 70     	ld hl,Album_de_fotos_disparos
529   876F EB           	ex de,hl
530   8770 2A DF 85     	ld hl,(Stack_snapshot_disparos)
531   8773
532   8773 06 00        	ld b,0
533   8775 7D           	ld a,l
534   8776 93           	sub e
535   8777 28 07        	jr z,1F
536   8779
537   8779              ; Nº de malotes no es "0".
538   8779
539   8779 D6 06        2 sub 6
540   877B 04           	inc b
541   877C A7           	and a
542   877D 20 FA        	jr nz,2B
543   877F 78           	ld a,b
544   8780
545   8780 32 E1 85     1 ld (Numero_de_disparotes),a
546   8783 C9           	ret
547   8784              ; *************************************************************************************************************************************************************
548   8784              ;
549   8784              ; 20/10/22
550   8784              ;
551   8784              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
552   8784              ;
553   8784              ; Destruye el puntero y DE !!!!!
554   8784
555   8784 5E           Extrae_address ld e,(hl)
556   8785 23           	inc hl
557   8786 56           	ld d,(hl)
558   8787 2B           	dec hl
559   8788 EB           	ex de,hl
560   8789 C9           	ret
561   878A
562   878A              ; *************************************************************************************************************************************************************
563   878A              ;
564   878A              ;	7/2/23
565   878A              ;
566   878A              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
567   878A              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
568   878A              ;
569   878A              ;   Destruye HL y BC !!!!!,
570   878A              ;
571   878A              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
572   878A              ;					"0" ..... Izquierda.
573   878A
574   878A              Inicia_Puntero_objeto
575   878A
576   878A 3A AA 85     	ld a,(Cuad_objeto)
577   878D E6 01        	and 1
578   878F F5           	push af
579   8790 CC AE 87     	call z,Inicia_puntero_objeto_izq
580   8793 F1           	pop af
581   8794 28 2B        	jr z,1F
582   8796 CD 9B 87     	call Inicia_puntero_objeto_der
583   8799 18 26        	jr 1F
584   879B
585   879B              ; Arrancamos desde la parte izquierda de la pantalla.
586   879B              ; Iniciamos (Indice_Sprite_der).
587   879B
588   879B 2A A0 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
589   879E 22 A4 85     	ld (Puntero_DESPLZ_der),hl
590   87A1 CD 84 87     	call Extrae_address
591   87A4 22 9A 85     	ld (Puntero_objeto),hl
592   87A7
593   87A7 2A A2 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
594   87AA              ;	call Extrae_address
595   87AA 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
596   87AD C9           	ret
597   87AE
598   87AE              ; Arrancamos desde la parte derecha de la pantalla.
599   87AE              ; Iniciamos (Indice_Sprite_izq).
600   87AE
601   87AE 2A A2 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
602   87B1 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
603   87B4 CD 84 87     	call Extrae_address
604   87B7 22 9A 85     	ld (Puntero_objeto),hl
605   87BA
606   87BA 2A A0 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
607   87BD              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
608   87BD 22 A4 85     	ld (Puntero_DESPLZ_der),hl
609   87C0 C9           	ret
610   87C1
611   87C1              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
612   87C1
613   87C1 21 38 83     1 ld hl,Amadeus
614   87C4 ED 4B 9A 85  	ld bc,(Puntero_objeto)
615   87C8 B7 ED 42     	sub hl,bc
616   87CB C0           	ret nz
617   87CC 21 C3 85     	ld hl,Ctrl_0
618   87CF CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
619   87D1 C9           	ret 												; _de nuestra nave en los extremos.
620   87D2
621   87D2              ; *************************************************************************************************************************************************************
622   87D2              ;
623   87D2              ;	8/1/23
624   87D2              ;
625   87D2              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
626   87D2              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
627   87D2
628   87D2              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
629   87D2              ;	_de la 2ª y 3ª entidad respectivamente.
630   87D2
631   87D2              Store_Restore_entidades
632   87D2
633   87D2 E5           	push hl
634   87D3 D5           	push de
635   87D4 C5            	push bc
636   87D5
637   87D5              ;	STORE !!!!!
638   87D5              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
639   87D5
640   87D5 21 96 85     	ld hl,Filas
641   87D8 ED 5B D1 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
642   87DC 01 3A 00     	ld bc,58
643   87DF ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
644   87E1
645   87E1              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
646   87E1
647   87E1 2A D3 85     	ld hl,(Puntero_restore_entidades)
648   87E4 22 D1 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
649   87E7 11 96 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
650   87EA 01 3A 00     	ld bc,58
651   87ED ED B0        	ldir
652   87EF
653   87EF              ;	Incrementa RESTORE !!!!!
654   87EF
655   87EF 2A D5 85         ld hl,(Indice_restore)
656   87F2 23           	inc hl
657   87F3 23           	inc hl
658   87F4 22 D5 85     	ld (Indice_restore),hl
659   87F7 CD 84 87         call Extrae_address
660   87FA 22 D3 85         ld (Puntero_restore_entidades),hl
661   87FD C1           	pop bc
662   87FE D1           	pop de
663   87FF E1           	pop hl
664   8800 C9           	ret
665   8801
666   8801              ; **************************************************************************************************
667   8801              ;
668   8801              ;	29/10/22
669   8801              ;
670   8801              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
671   8801
672   8801 E5           Restore_Primera_entidad push hl
673   8802 D5           	push de
674   8803 C5            	push bc
675   8804 2A D1 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
676   8807 11 96 85     	ld de,Filas
677   880A 01 3A 00     	ld bc,58
678   880D ED B0        	ldir
679   880F C1           	pop bc
680   8810 D1           	pop de
681   8811 E1           	pop hl
682   8812 C9           	ret
683   8813
684   8813              ; **************************************************************************************************
685   8813              ;
686   8813              ;	25/01/23
687   8813              ;
688   8813              ;	Restore_Amadeus
689   8813              ;
690   8813              ;	Cargamos en DRAW los parámetros de Amadeus.
691   8813              ;
692   8813
693   8813 E5           Restore_Amadeus	push hl
694   8814 D5           	push de
695   8815 C5            	push bc
696   8816 21 74 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
697   8819 11 96 85     	ld de,Filas
698   881C 01 3A 00     	ld bc,58
699   881F ED B0        	ldir
700   8821 C1           	pop bc
701   8822 D1           	pop de
702   8823 E1           	pop hl
703   8824 C9           	ret
704   8825
705   8825              ; *************************************************************************************************************************************************************
706   8825              ;
707   8825              ;	29/01/23
708   8825              ;
709   8825              ;	Store_Amadeus
710   8825              ;
711   8825              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
712   8825              ;
713   8825
714   8825 E5           Store_Amadeus push hl
715   8826 D5           	push de
716   8827 C5            	push bc
717   8828 21 96 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
718   882B 11 74 84     	ld de,Amadeus_db
719   882E 01 3A 00     	ld bc,58
720   8831 ED B0        	ldir
721   8833 C1           	pop bc
722   8834 D1           	pop de
723   8835 E1           	pop hl
724   8836 C9           	ret
725   8837
726   8837              ; **************************************************************************************************
727   8837
728   8837              ; Teclado.
729   8837
730   8837 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
731   8839 DB FE        	in a,($fe)
732   883B E6 01        	and $01
733   883D 28 02        	jr z,1f
734   883F 18 F6        	jr Pulsa_ENTER
735   8841 C9           1 ret
736   8842
737   8842              ; **************************************************************************************************
738   8842              ;
739   8842              ; Temporización.
740   8842
741   8842              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
742   8842              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
743   8842              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
744   8842              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
745   8842
746   8842              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
747   8842              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
748   8842              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
749   8842
750   8842              ; A partir de $4f61 no hace falta DELAY.
751   8842
752   8842              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
753   8842
754   8842 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
755   8845 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
756   8846 78           	LD A,B
757   8847 A7           	AND A
758   8848 20 FB        	JR NZ,wait
759   884A C9           	RET
760   884B
761   884B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
762   884B              ;
763   884B              ;	16/02/23
764   884B
765   884B              Movimiento_Amadeus
766   884B
767   884B              ; Disparo.
768   884B
769   884B 3E F7        	ld a,$f7												; "5" para disparar.
770   884D DB FE        	in a,($fe)
771   884F E6 10        	and $10
772   8851 CC A1 88     	call z,Genera_disparo
773   8854
774   8854 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
775   8856 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
776   8858 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
777   885A CC 34 91         call z,Mov_left											;			"			"			"			"			"			"			"			"
778   885D 3E F7        	ld a,$f7
779   885F DB FE        	in a,($fe)
780   8861 E6 01        	and $01
781   8863 C8           	ret z
782   8864
783   8864 3E F7        	ld a,$f7
784   8866 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
785   8868 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
786   886A CC 16 90     	call z,Mov_right										;			"			"			"			"			"			"			"			"
787   886D
788   886D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
789   886D              ;
790   886D              ;	Rutina provisional para que los malotes cagen balas.
791   886D
792   886D 3E 7F        Detecta_disparo_entidad	ld a,$7f
793   886F DB FE        	in a,($fe)
794   8871 E6 01        	and 1
795   8873 C0           	ret nz
796   8874 CD A1 88     	call Genera_disparo
797   8877 C9           	ret
798   8878
799   8878              ; Pinta indicadores de FILAS. ------------------------------------------------------
800   8878
801   8878 21 10 40     Pinta_FILAS ld hl,$4010
802   887B              ;	ld b,9
803   887B              ;2 push hl
804   887B              ;	push bc
805   887B 06 BF        	ld b,$bf
806   887D 36 80        1 ld (hl),%10000000
807   887F CD DC 8C     	call NextScan
808   8882 10 F9        	djnz 1B
809   8884              ;	pop bc
810   8884              ;	pop hl
811   8884              ;	inc l
812   8884              ;	djnz 2B
813   8884 06 03        	ld b,3
814   8886 21 00 47         ld hl,$4700
815   8889 CD 8F 88     3 call Bucle_1
816   888C 10 FB            djnz 3B
817   888E C9               ret
818   888F
819   888F C5           Bucle_1 push bc
820   8890 E5                   push hl
821   8891 D1                   pop de
822   8892 13                   inc de
823   8893 01 FF 00             ld bc,255
824   8896 36 FF                ld (hl),255
825   8898 ED B0                ldir
826   889A 23                   inc hl
827   889B 3E 07                ld a,7
828   889D 84                   add a,h
829   889E 67                   ld h,a
830   889F C1                   pop bc
831   88A0 C9                   ret
832   88A1
833   88A1              ; ---------------------------------------------------------------
834   88A1
835   88A1              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  88A1              ; ******************************************************************************************************************************************************************************************
  2+  88A1              ;
  3+  88A1              ;   19/02/23
  4+  88A1              ;
  5+  88A1              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  88A1              ;   En el caso de generar disparo la rutina proporciona 4 variables:
  7+  88A1              ;
  8+  88A1              ;
  9+  88A1              ;       -1 .defw ..... Control. %00000001 00000001
 10+  88A1              ;
 11+  88A1              ;           [Bit0] ..... Dirección. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
 12+  88A1              ;               _ hacen las entidades hacia abajo.
 13+  88A1              ;
 14+  88A1              ;           [Bit8] ..... Impacto. "1" Cuando se produce colisión al generar un disparo.
 15+  88A1              ;
 16+  88A1              ;       - 2 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 17+  88A1              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 18+  88A1              ;
 19+  88A1              ;       - 3 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 20+  88A1              ;           _ la bala.
 21+  88A1              ;
 22+  88A1              ;       - 4 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 23+  88A1              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 24+  88A1              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 25+  88A1              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 26+  88A1              ;           _ en el momento de generarse la bala)).
 27+  88A1
 28+  88A1              Genera_disparo
 29+  88A1
 30+  88A1              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 31+  88A1              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 32+  88A1              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 33+  88A1              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 34+  88A1              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 35+  88A1              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga dichos valores.
 36+  88A1              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 37+  88A1
 38+  88A1 3A CC 85         ld a,(Columnas)
 39+  88A4 47               ld b,a
 40+  88A5 3A 97 85         ld a,(Columns)
 41+  88A8 B8               cp b
 42+  88A9 C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 43+  88AA
 44+  88AA              ; ----- ----- -----
 45+  88AA
 46+  88AA 21 00 80         ld hl,Indice_disparo
 47+  88AD 3A 9E 85         ld a,(CTRL_DESPLZ)
 48+  88B0 4F               ld c,a
 49+  88B1 06 00            ld b,0	                            ; B será 0,1,2 o 3 en función del valor de (CTRL_DESPLZ).
 50+  88B3              ;                                           Cuando (CTRL_DESPLZ)="0", B="0"
 51+  88B3              ;                                            ""        ""       "f9", B="1"
 52+  88B3              ;                                            ""        ""       "fb", B="2"
 53+  88B3              ;                                            ""        ""       "fb", B="3"
 54+  88B3 A7               and a
 55+  88B4 28 10            jr z,1F
 56+  88B6
 57+  88B6 E6 01            and 1
 58+  88B8 C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 59+  88B9
 60+  88B9 79               ld a,c
 61+  88BA 16 F9            ld d,$f9
 62+  88BC 23           2 inc hl
 63+  88BD 23               inc hl
 64+  88BE 04               inc b
 65+  88BF BA               cp d
 66+  88C0 28 04            jr z,1F
 67+  88C2 14               inc d
 68+  88C3 14               inc d
 69+  88C4 18 F6            jr 2B
 70+  88C6
 71+  88C6 CD 84 87     1 call Extrae_address
 72+  88C9 E5               push hl
 73+  88CA FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 74+  88CC DD 21 6F 8F  	ld ix, Pinta_Disparo        		; Rutinas_de_impresion en IX.
 75+  88D0
 76+  88D0              ; --------------- ---------------- ----------------- -------------
 77+  88D0              ;
 78+  88D0              ;   Genera disparo.
 79+  88D0              ;
 80+  88D0              ;   Generamos variables de disparo. Varían en función del cuadrante en el que nos encontramos.
 81+  88D0
 82+  88D0 3A AA 85     	ld a,(Cuad_objeto)
 83+  88D3 FE 02            cp 2
 84+  88D5 38 60            jr c,3F
 85+  88D7 28 5E            jr z,3F
 86+  88D9
 87+  88D9              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 88+  88D9
 89+  88D9 E6 01            and 1
 90+  88DB 28 2D            jr z,4F
 91+  88DD
 92+  88DD              ; Estamos en el 3er cuadrante de pantalla.
 93+  88DD              ; 3er CUAD. ----- ----- ----- ----- -----
 94+  88DD              ;
 95+  88DD              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 96+  88DD              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 97+  88DD              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 98+  88DD
 99+  88DD 2A 98 85     	ld hl,(Posicion_actual)
100+  88E0
101+  88E0              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
102+  88E0
103+  88E0 3A C3 85         ld a,(Ctrl_0)
104+  88E3 CB 77            bit 6,a
105+  88E5 28 0D            jr z,8F
106+  88E7
107+  88E7              ; Dispara Amadeus.
108+  88E7
109+  88E7 0E 81            ld c,$81	                                    ; Dirección "$81", hacia arriba.
110+  88E9 CD EB 8C         call PreviousScan
111+  88EC CD EB 8C         call PreviousScan
112+  88EF
113+  88EF              ; Ahora HL apunta un scanline por debajo de (Posicion_actual) si es una entidad la que dispara o dos SCANLINES_
114+  88EF              ; _ por arriba si se trata de Amadeus.
115+  88EF              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
116+  88EF              ; En el cuadrante 1 y 3, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2. El resto de combinaciones,_
117+  88EF              ; _ B="0","2" y "3" ..... DEC HL.
118+  88EF
119+  88EF CD 61 89         call Ajusta_disparo_parte_izquierda
120+  88F2 18 0E            jr 10F
121+  88F4
122+  88F4              ; Dispara Entidad.
123+  88F4
124+  88F4 0E 80        8 ld c,$80	                                        ; Dirección "$80", hacia abajo.
125+  88F6
126+  88F6              ; Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
127+  88F6              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
128+  88F6
129+  88F6 C5               push bc
130+  88F7
131+  88F7 06 10            ld b,16
132+  88F9 CD DC 8C     9 call NextScan
133+  88FC 10 FB            djnz 9B
134+  88FE
135+  88FE C1               pop bc
136+  88FF
137+  88FF              ; Ahora HL apunta un scanline por debajo de (Posicion_actual) si es una entidad la que dispara o dos SCANLINES_
138+  88FF              ; _ por arriba si se trata de Amadeus.
139+  88FF              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
140+  88FF              ; En el cuadrante 1 y 3, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2. El resto de combinaciones,_
141+  88FF              ; _ B="0","2" y "3" ..... DEC HL.
142+  88FF
143+  88FF CD 61 89         call Ajusta_disparo_parte_izquierda
144+  8902
145+  8902 CD D0 89     10 call Comprueba_Colision                          ; Retorna "$81" o "$80" en B indicando si se produce Colisión
146+  8905              ;                                                   ; _al generar el disparo.
147+  8905
148+  8905              ; LLegados a este punto tendremos:
149+  8905              ;
150+  8905              ;       Puntero_objeto_disparo en IY.
151+  8905              ;       Rutinas_de_impresion en IX.
152+  8905              ;       Puntero_de_impresion en HL.
153+  8905              ;       Impacto/Dirección en BC.
154+  8905
155+  8905 CD 69 89         call Almacena_disparo
156+  8908 18 4F            jr 6F                                           ; RET.
157+  890A
158+  890A
159+  890A              ; Estamos en el 4º cuadrante de pantalla.
160+  890A              ; 4º CUAD. ----- ----- ----- ----- -----
161+  890A              ;
162+  890A              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
163+  890A              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
164+  890A              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
165+  890A
166+  890A 2A 98 85     4 ld hl,(Posicion_actual)
167+  890D
168+  890D              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
169+  890D
170+  890D 3A C3 85         ld a,(Ctrl_0)
171+  8910 CB 77            bit 6,a
172+  8912 28 0D            jr z,11F
173+  8914
174+  8914              ; Dispara Amadeus.
175+  8914
176+  8914 0E 81            ld c,$81                                          ; Dirección "$81", hacia arriba.
177+  8916 CD EB 8C         call PreviousScan
178+  8919 CD EB 8C         call PreviousScan
179+  891C
180+  891C              ; Ahora HL apunta un scanline por debajo de (Posicion_actual) si es una entidad la que dispara o dos SCANLINES_
181+  891C              ; _ por arriba si se trata de Amadeus.
182+  891C              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
183+  891C              ; En el cuadrante 2 y 4, cuando (CTRL_DESPLZ)="$fb" y "$fd", B="2" y B="3" ..... (INC HL). El resto de combinaciones,_
184+  891C              ; _ B="0" y B="1"
185+  891C
186+  891C CD 5A 89         call Ajusta_disparo_parte_derecha
187+  891F 18 0E            jr 13F
188+  8921
189+  8921              ; Dispara Entidad.
190+  8921
191+  8921 0E 80        11 ld c,$80                                        	  ; Dirección "$80", hacia abajo.
192+  8923
193+  8923              ; Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
194+  8923              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
195+  8923
196+  8923 C5               push bc
197+  8924
198+  8924 06 10            ld b,16
199+  8926 CD DC 8C     12 call NextScan
200+  8929 10 FB            djnz 12B
201+  892B
202+  892B C1               pop bc
203+  892C
204+  892C              ; Ahora HL apunta un scanline por debajo de (Posicion_actual) si es una entidad la que dispara o dos SCANLINES_
205+  892C              ; _ por arriba si se trata de Amadeus.
206+  892C              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
207+  892C              ; En el cuadrante 2 y 4, cuando (CTRL_DESPLZ)="$fb" y "$fd", B="2" y B="3" ..... (INC HL). El resto de combinaciones,_
208+  892C              ; _ B="0" y B="1"
209+  892C
210+  892C CD 5A 89         call Ajusta_disparo_parte_derecha
211+  892F
212+  892F CD D0 89     13 call Comprueba_Colision                            ; Retorna "$81" o "$80" en B indicando si se produce Colisión
213+  8932              ;                                                     ; _al generar el disparo.
214+  8932
215+  8932              ; LLegados a este punto tendremos:
216+  8932              ;
217+  8932              ;       Puntero_objeto_disparo en IY.
218+  8932              ;       Rutinas_de_impresion en IX.
219+  8932              ;       Puntero_de_impresion en HL.
220+  8932              ;       Impacto/Dirección en BC.
221+  8932
222+  8932 CD 69 89         call Almacena_disparo
223+  8935 18 22            jr 6F                                           ; RET.
224+  8937
225+  8937              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
226+  8937
227+  8937 28 11        3 jr z,5F
228+  8939
229+  8939              ; 1er CUAD. ----- ----- ----- ----- -----
230+  8939              ;
231+  8939              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
232+  8939              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
233+  8939              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
234+  8939              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
235+  8939
236+  8939              ; 	Cuando (CTRL_DESPLZ)="0", B="0"
237+  8939              ;	   ""        ""       "f9", B="1"
238+  8939              ;	   ""        ""       "fb", B="2"
239+  8939              ; 	   ""        ""       "fb", B="3"
240+  8939
241+  8939
242+  8939 2A 98 85     	ld hl,(Posicion_actual)
243+  893C CD DC 8C     	call NextScan
244+  893F
245+  893F              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
246+  893F              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
247+  893F              ; En el cuadrante 1 y 3, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2. El resto de combinaciones,_
248+  893F              ; _ B="0","2" y "3" ..... DEC HL.
249+  893F
250+  893F CD 61 89         call Ajusta_disparo_parte_izquierda
251+  8942
252+  8942              ; No se produce impacto. B="$80"
253+  8942              ; Dirección del proyectil hacia abajo. C="$80"
254+  8942
255+  8942 01 80 80         ld bc,$8080
256+  8945
257+  8945              ; LLegados a este punto tendremos:
258+  8945              ;
259+  8945              ;       Puntero_objeto_disparo en IY.
260+  8945              ;       Rutinas_de_impresion en IX.
261+  8945              ;       Puntero_de_impresion en HL.
262+  8945              ;       Impacto/Dirección en BC.
263+  8945
264+  8945 CD 69 89         call Almacena_disparo
265+  8948 18 0F            jr 6F                                           ; RET.
266+  894A
267+  894A              ; Estamos en el 2º cuadrante de pantalla.
268+  894A              ; 2º CUAD. ----- ----- ----- ----- -----
269+  894A              ;
270+  894A              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
271+  894A              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
272+  894A              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
273+  894A              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
274+  894A
275+  894A 2A 98 85     5 ld hl,(Posicion_actual)
276+  894D CD DC 8C     	call NextScan
277+  8950
278+  8950              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
279+  8950              ; En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
280+  8950              ; En el cuadrante 2 y 4, cuando (CTRL_DESPLZ)="$fb" y "$fd", B="2" y B="3" ..... (INC HL). El resto de combinaciones,_
281+  8950              ; _ B="0" y B="1"
282+  8950
283+  8950 CD 5A 89         call Ajusta_disparo_parte_derecha
284+  8953
285+  8953              ; Ahora HL apunta un scanline por debajo de (Posicion_actual).
286+  8953
287+  8953              ; No se produce impacto. B="$80"
288+  8953              ; Dirección del proyectil hacia abajo. C="80"
289+  8953
290+  8953 01 80 80     15 ld bc,$8080
291+  8956
292+  8956              ; LLegados a este punto tendremos:
293+  8956              ;
294+  8956              ;       Puntero_objeto_disparo en IY.
295+  8956              ;       Rutinas_de_impresion en IX.
296+  8956              ;       Puntero_de_impresion en HL.
297+  8956              ;       Impacto/Dirección en BC.
298+  8956
299+  8956 CD 69 89         call Almacena_disparo
300+  8959
301+  8959              ; Preparamos registros para llamar a [Guarda_foto_registros].
302+  8959              ; Antes de llamar a [Guarda_foto_registros] indicamos que se trata de un disparo.
303+  8959
304+  8959 C9           6 ret
305+  895A
306+  895A              ; ----------------------------------------------------------------
307+  895A
308+  895A 78           Ajusta_disparo_parte_derecha ld a,b
309+  895B FE 02            cp 2
310+  895D 38 01            jr c,1F
311+  895F 23               inc hl
312+  8960 C9           1 ret
313+  8961
314+  8961 78           Ajusta_disparo_parte_izquierda ld a,b
315+  8962 FE 01        	cp 1
316+  8964 20 01        	jr nz,1F
317+  8966 2B           	dec hl
318+  8967 2B           1 dec hl
319+  8968 C9               ret
320+  8969
321+  8969              ; ----------------------------------------------------------------
322+  8969              ;
323+  8969              ;   25/02/23
324+  8969              ;
325+  8969              ;   La Rutina va almacenando disparos en sus respectivas bases de datos.
326+  8969              ;   Amadeus dispone de 2 disparos mientras que las entidades disponen de un máximo de 10.
327+  8969
328+  8969
329+  8969              Almacena_disparo
330+  8969
331+  8969 E5               push hl
332+  896A F1               pop af
333+  896B 08               ex af,af                                        ; Puntero_de_impresion en AF'.
334+  896C
335+  896C 79           3 ld a,c
336+  896D E6 01            and 1
337+  896F 28 1A            jr z,1F                                         ; Según la `Dirección' del proyectil sabemos si_
338+  8971              ;                                                   ; _ es Amadeus o una entidad la que dispara.
339+  8971              ; Dispara AMADEUS.
340+  8971
341+  8971 C5               push bc
342+  8972 01 EC 83         ld bc,Indice_de_disparos_Amadeus+4              ; Disparo_3A
343+  8975 2A E6 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
344+  8978 A7               and a
345+  8979 ED 42            sbc hl,bc
346+  897B CC 4D 87         call z,Inicia_Puntero_Disparo_Amadeus
347+  897E C1               pop bc
348+  897F 28 4E            jr z,4F
349+  8981
350+  8981 2A E6 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
351+  8984 23               inc hl
352+  8985 23               inc hl
353+  8986 22 E6 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl          ; (Puntero_DESPLZ_DISPARO_AMADEUS) ya apunta al siguiente_
354+  8989              ;                                                   ; _ Disparo_(+1).
355+  8989 18 18            jr 2F
356+  898B
357+  898B              ; Dispara una entidad.
358+  898B
359+  898B C5           1 push bc
360+  898C 01 14 84         ld bc,Indice_de_disparos_entidades+20           ; Disparo_11
361+  898F 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
362+  8992 A7               and a
363+  8993 ED 42            sbc hl,bc
364+  8995 CC 46 87         call z,Inicia_Puntero_Disparo_Entidades
365+  8998 C1               pop bc
366+  8999 28 34            jr z,4F
367+  899B
368+  899B 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
369+  899E 23               inc hl
370+  899F 23               inc hl
371+  89A0 22 E4 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl        ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
372+  89A3              ;                                                   ; _ Disparo_(+1).
373+  89A3 CD 84 87     2 call Extrae_address                               ; HL contiene la dirección donde vamos a almacenar_
374+  89A6              ;                                                   ; _ los 8 bytes que definen el disparo:
375+  89A6              ;
376+  89A6              ;                                                     Puntero_objeto_disparo en IY.
377+  89A6              ;                                                     Rutinas_de_impresion en IX.
378+  89A6              ;                                                     Puntero_de_impresion en HL.
379+  89A6              ;                                                     Impacto/Dirección en BC.
380+  89A6
381+  89A6 2B               dec hl                                          ; Esta parte de la rutina comprueba si este_
382+  89A7 7E               ld a,(hl)                                       ; _ almacén de disparo está vacio. Si no es así, saltamos_
383+  89A8 23               inc hl                                          ; _ al siguiente.
384+  89A9 A7               and a
385+  89AA 20 C0            jr nz,3B
386+  89AC
387+  89AC 08               ex af,af
388+  89AD ED 73 D9 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
389+  89B1 F9               ld sp,hl
390+  89B2
391+  89B2 DD E5            push ix                                         ; Rutina de impresión.
392+  89B4 F5               push af                                         ; Puntero de impresión.
393+  89B5 FD E5            push iy                                         ; Puntero objeto.
394+  89B7 C5               push bc                                         ; Control.
395+  89B8
396+  89B8 ED 7B D9 85      ld sp,(Stack)
397+  89BC
398+  89BC              ; Guardamos en Album_de_fotos_disparos los proyectiles generados.
399+  89BC
400+  89BC 21 D0 85     	ld hl,Ctrl_1
401+  89BF CB C6        	set 0,(hl)
402+  89C1
403+  89C1 DD E5        	push ix
404+  89C3 E1               pop hl
405+  89C4 F5               push af
406+  89C5 DD E1            pop ix
407+  89C7
408+  89C7 CD A0 7F     	call Guarda_foto_registros
409+  89CA
410+  89CA 21 D0 85     	ld hl,Ctrl_1									; Restauramos el indicador de disparo antes de salir.
411+  89CD CB 86        	res 0,(hl)
412+  89CF
413+  89CF C9           4 ret
414+  89D0
415+  89D0              ; ----------------------------------------------------------------
416+  89D0              ;
417+  89D0              ;   4/3/23
418+  89D0              ;
419+  89D0              ;   Entrega el siguiente dato en el registro B en función de si se produce colisión, o no,_
420+  89D0              ;   _ al generarse el disparo.
421+  89D0              ;       "$80" ..... No se produce colisión.
422+  89D0              ;       "$81" ..... Se produce colisión.
423+  89D0
424+  89D0 E5           Comprueba_Colision push hl
425+  89D1 1E 80            ld e,$80                                       ; E,(Impacto)="0".
426+  89D3 CD E8 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
427+  89D6
428+  89D6 7B               ld a,e
429+  89D7 E6 01            and 1
430+  89D9 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
431+  89DB
432+  89DB              ; Hay impacto.
433+  89DB
434+  89DB 43           2 ld b,e
435+  89DC E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
436+  89DD C9           3 ret
437+  89DE
438+  89DE E1           1 pop hl
439+  89DF E5               push hl
440+  89E0 CD DC 8C         call NextScan
441+  89E3 CD E8 89         call Bucle_2
442+  89E6 18 F3            jr 2B
443+  89E8
444+  89E8              ; ---------- ----------
445+  89E8
446+  89E8 06 02        Bucle_2 ld b,2
447+  89EA 7E           2 ld a,(hl)
448+  89EB A7               and a
449+  89EC 20 04            jr nz,1F
450+  89EE 23               inc hl
451+  89EF 10 F9            djnz 2B
452+  89F1 C9           3 ret
453+  89F2 1E 81        1 ld e,$81
454+  89F4 18 FB            jr 3B
455+  89F6
456+  89F6              ; -------------------------------------------------------------------------------------------------------------
457+  89F6
458+  89F6
459+  89F6
460+  89F6
461+  89F6
# file closed: Disparo.asm
836   89F6              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  89F6              ; ******************************************************************************************************************************************************************************************
  2+  89F6              ;
  3+  89F6              ; 01/23
  4+  89F6              ;
  5+  89F6              ; DRAW. ************************************************************************************************************************************************************************************
  6+  89F6
  7+  89F6 CD D0 8C     Draw call Prepara_draw
  8+  89F9 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  89FA A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  89FB 28 05        	jr z,2F
 11+  89FD
 12+  89FD 3A AA 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  8A00 18 0C        	jr 1F
 14+  8A02 2A A8 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8A05 22 98 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8A08 CD 97 8B     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8A0B              ;													; _la esquina superior izquierda de la pantalla.
 18+  8A0B CD 05 94     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  8A0E 3A C3 85     1 ld a,(Ctrl_0)
 20+  8A11 CB 6F        	bit 5,a
 21+  8A13 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8A15
 23+  8A15 CD 2D 8A     	call Comprueba_limite_horizontal
 24+  8A18 CD BD 8A     	call Comprueba_limite_vertical
 25+  8A1B
 26+  8A1B              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8A1B
 28+  8A1B CD 0A 8C     3 call calcula_CColumnass
 29+  8A1E CD 41 8C     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8A21 CD 96 8C     	call Define_rutina_de_impresion
 31+  8A24
 32+  8A24 3A C3 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8A27 CB AF        	res 5,a											; _a ser de utilidad.
 34+  8A29 32 C3 85     	ld (Ctrl_0),a
 35+  8A2C
 36+  8A2C C9           	ret
 37+  8A2D
 38+  8A2D              ; *******************************************************************************************************************************************************************************************
 39+  8A2D              ;	21/01/23
 40+  8A2D              ;
 41+  8A2D              ; 	Comprueba_limite_horizontal.
 42+  8A2D              ;
 43+  8A2D              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8A2D              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8A2D              ;
 46+  8A2D              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8A2D              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8A2D              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8A2D              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8A2D
 51+  8A2D
 52+  8A2D
 53+  8A2D 3A C3 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8A30 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8A32 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8A34 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8A36 32 C3 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8A39 18 09            jr 6F
 59+  8A3B CB 5F        1 bit 3,a
 60+  8A3D 28 0A            jr z,2F
 61+  8A3F E6 F7            and $f7
 62+  8A41 32 C3 85         ld (Ctrl_0),a
 63+  8A44 CD 97 8B     6 call Inicializacion
 64+  8A47 18 5B            jr 5F
 65+  8A49 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8A4A
 67+  8A4A              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8A4A              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8A4A
 70+  8A4A EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8A4B 2A CD 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8A4E CD 9C 8F     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8A51 67           	ld h,a
 74+  8A52 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8A53 CD 9C 8F     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8A56 67           	ld h,a
 77+  8A57 A7           	and a
 78+  8A58 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8A5A 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8A5B 3A AA 85     	ld a,(Cuad_objeto)
 81+  8A5E FE 02        	cp 2
 82+  8A60 38 1E        	jr c,3F
 83+  8A62 28 1C        	jr z,3F
 84+  8A64 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8A65 28 23            jr z,7F
 86+  8A67 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8A69 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8A6B E1           	pop hl
 89+  8A6C
 90+  8A6C              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8A6C              ; _para indicar con E="2" en caso necesario.
 92+  8A6C
 93+  8A6C E5               push hl
 94+  8A6D C5               push bc
 95+  8A6E CD 9C 8F     	call calcula_tercio
 96+  8A71 FE 01        	cp 1
 97+  8A73 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8A75 CD A5 8A         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8A78 28 26            jr z,9F
100+  8A7A 38 24            jr c,9F
101+  8A7C 1E 00        11 ld e,0
102+  8A7E 18 22            jr 8F
103+  8A80 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8A81 28 07        	jr z, 7F
105+  8A83 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8A85 1E 00         	ld e,0
107+  8A87 E1           	pop hl
108+  8A88 18 04        	jr 4F
109+  8A8A 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8A8C 18 15            jr 10F
111+  8A8E
112+  8A8E              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8A8E              ; _para indicar con E="2" en caso necesario.
114+  8A8E
115+  8A8E E5           4 push hl
116+  8A8F C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8A90 CD 9C 8F     	call calcula_tercio
118+  8A93 FE 01        	cp 1
119+  8A95 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8A97 CD A5 8A         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8A9A 28 04            jr z,9F
122+  8A9C 30 02            jr nc,9F
123+  8A9E 18 02        	jr 8F
124+  8AA0 1E 02        9 ld e,2
125+  8AA2 C1           8 pop bc
126+  8AA3 E1           10 pop hl
127+  8AA4 C9           5 ret
128+  8AA5
129+  8AA5              ; --------------------
130+  8AA5              ;
131+  8AA5              ; 25/08/22
132+  8AA5
133+  8AA5 CD 9C 8F     Comprueba_centro call calcula_tercio
134+  8AA8 67               ld h,a
135+  8AA9 08           	ex af,af
136+  8AAA FE 02        	cp 2
137+  8AAC 38 07        	jr c,1F
138+  8AAE 28 05        	jr z,1F
139+  8AB0 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8AB3 18 03        	jr 2F
141+  8AB5 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8AB8 08           2 ex af,af
143+  8AB9 A7               and a
144+  8ABA ED 42            sbc hl,bc
145+  8ABC C9               ret
146+  8ABD
147+  8ABD              ; *********************************************************************************************************************************************************************************************
148+  8ABD              ;
149+  8ABD              ;   16/8/22
150+  8ABD              ;
151+  8ABD              ;	Comprueba_limite_vertical
152+  8ABD              ;
153+  8ABD              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8ABD              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8ABD              ;
156+  8ABD
157+  8ABD 2A 98 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8AC0 7D           	ld a,l
159+  8AC1 E6 1F        	and $1F
160+  8AC3 57           	ld d,a
161+  8AC4 3A CF 85     	ld a,(Limite_vertical)
162+  8AC7 BA           	cp d 											; Límite - Posición.
163+  8AC8 08           	ex af,af 										; Resultado de CP d en F'.
164+  8AC9 3A AA 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8ACC CB 47        	bit 0,a
166+  8ACE 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8AD0
168+  8AD0              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8AD0
170+  8AD0 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8AD1 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8AD3
173+  8AD3              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8AD3              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8AD3
176+  8AD3 3A 9C 85         ld a,(Coordenada_X)
177+  8AD6 16 0F            ld d,Centro_izquierda
178+  8AD8 A7               and a
179+  8AD9 92               sub d 											 ; Posición - Centro_izquierda.
180+  8ADA 28 1E            jr z,3F
181+  8ADC 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8ADE              ;                                                    ; _salimos sin modificar nada.
183+  8ADE 18 0E            jr 2F
184+  8AE0 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8AE1 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8AE3
187+  8AE3              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8AE3              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8AE3
190+  8AE3 3A 9C 85         ld a,(Coordenada_X)
191+  8AE6 16 10            ld d,Centro_derecha
192+  8AE8 A7               and a
193+  8AE9 92               sub d
194+  8AEA 28 0E            jr z,3F
195+  8AEC 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8AEE              ;                                                    ; _salimos sin modificar nada.
197+  8AEE CB 43        2 bit 0,e
198+  8AF0 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8AF2 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8AF3 CD 87 8B         call Modificaccionne
201+  8AF6 C1           	pop bc
202+  8AF7 CD 97 8B         call Inicializacion
203+  8AFA C9           3 ret 				 								 ; Salimos de la rutina.
204+  8AFB
205+  8AFB              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8AFB
207+  8AFB C5           4 push bc
208+  8AFC 01 97 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8AFF 0A           	ld a,(bc)
210+  8B00 3D           	dec a
211+  8B01 47           	ld b,a 											 ; Columnas-1 en B.
212+  8B02 7D           	ld a,l
213+  8B03 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8B04 CB 47        	bit 0,a
215+  8B06 28 03        	jr z,5F
216+  8B08 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8B09 18 2E        	jr 7F
218+  8B0B
219+  8B0B              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8B0B
221+  8B0B 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8B0C F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8B0D 3A C3 85     	ld a,(Ctrl_0)
224+  8B10 CB 4F        	bit 1,a
225+  8B12 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8B14 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8B15
228+  8B15              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8B15
230+  8B15 1C               inc e
231+  8B16 1D               dec e
232+  8B17 20 07            jr nz,12F
233+  8B19 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8B1A 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8B1B 22 98 85     	ld (Posicion_actual),hl
236+  8B1E 18 44        13 jr 9F
237+  8B20 CB 43        12 bit 0,e
238+  8B22 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8B24              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8B24 C1           	pop bc
241+  8B25 18 D3        	jr 3B
242+  8B27 80           14 add b
243+  8B28 6F               ld l,a
244+  8B29 22 98 85     	ld (Posicion_actual),hl
245+  8B2C CD 87 8B         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8B2F 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8B31 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8B33 32 C3 85         ld (Ctrl_0),a
249+  8B36 F1           	pop af
250+  8B37 18 2B        	jr 9F
251+  8B39
252+  8B39              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8B39
254+  8B39 F5           7 push af
255+  8B3A 3A C3 85     	ld a,(Ctrl_0)
256+  8B3D CB 47        	bit 0,a
257+  8B3F 20 1D        	jr nz,8F
258+  8B41 F1           	pop af
259+  8B42
260+  8B42              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8B42
262+  8B42 1C           	inc e
263+  8B43 1D               dec e
264+  8B44 20 07            jr nz,10F
265+  8B46 90           	sub b
266+  8B47 6F               ld l,a
267+  8B48 22 98 85     	ld (Posicion_actual),hl
268+  8B4B 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8B4D              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8B4D CB 43        10 bit 0,e
271+  8B4F 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8B51              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8B51 C1           	pop bc
274+  8B52 18 A6        	jr 3B
275+  8B54 90           16 sub b
276+  8B55 6F               ld l,a
277+  8B56 22 98 85     	ld (Posicion_actual),hl
278+  8B59 CD 87 8B         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8B5C 18 06            jr 9F
280+  8B5E E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8B60 32 C3 85         ld (Ctrl_0),a
282+  8B63 F1           	pop af
283+  8B64 C1           9 pop bc
284+  8B65 1E 00        	ld e,0
285+  8B67 CD 97 8B         call Inicializacion
286+  8B6A F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8B6B 08           	ex af,af
288+  8B6C F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8B6D 18 8B            jr 3B
290+  8B6F
291+  8B6F              ; --------------------
292+  8B6F
293+  8B6F 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8B71 CD EB 8C     1 call PreviousScan
295+  8B74 10 FB            djnz 1B
296+  8B76 22 98 85     	ld (Posicion_actual),hl
297+  8B79 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8B7A C9           	ret
299+  8B7B
300+  8B7B              ; --------------------
301+  8B7B
302+  8B7B 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8B7D CD DC 8C     1 call NextScan
304+  8B80 10 FB            djnz 1B
305+  8B82 22 98 85     	ld (Posicion_actual),hl
306+  8B85 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8B86 C9           	ret
308+  8B87
309+  8B87              ; --------------------
310+  8B87              ;
311+  8B87              ;	22/01/23
312+  8B87              ;
313+  8B87              ;	E="1". Hemos cambiado de cuadrante.
314+  8B87              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8B87              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8B87
317+  8B87
318+  8B87              Modificaccionne
319+  8B87
320+  8B87 3A AA 85     	ld a,(Cuad_objeto)
321+  8B8A FE 02        	cp 2
322+  8B8C CC 6F 8B         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8B8F DC 6F 8B         call c,Modifica_Pos_actual
324+  8B92 C8           	ret z
325+  8B93 CD 7B 8B         call Modifica_Pos_actual2
326+  8B96 C9               ret
327+  8B97
328+  8B97              ; *************************************************************************************************************************************************************************************************
329+  8B97              ;
330+  8B97              ;	13/8/22
331+  8B97              ;
332+  8B97              ;	Inicializacion
333+  8B97              ;
334+  8B97              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8B97              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8B97              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8B97              ;
338+  8B97              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8B97              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8B97              ;	_ desaparece/aparece.
341+  8B97
342+  8B97              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8B97              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8B97              ;
345+  8B97              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8B97              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8B97              ; 		   [E] ="0"
348+  8B97
349+  8B97              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8B97
351+  8B97 CD 9C 8F     Inicializacion call calcula_tercio
352+  8B9A 28 36        	jr z,primit
353+  8B9C E6 02        	and 2
354+  8B9E 20 07        	jr nz,segmit
355+  8BA0 7D           	ld a,l
356+  8BA1 FE 7F        	cp $7f
357+  8BA3 38 2D        	jr c,primit
358+  8BA5 28 2B        	jr z,primit
359+  8BA7 CD 04 8C     segmit call column
360+  8BAA 38 13        	jr c,tercuad
361+  8BAC 3E 04        cuarcuad ld a,4
362+  8BAE 32 AA 85     	ld (Cuad_objeto),a
363+  8BB1 21 20 48     	ld hl,$4820
364+  8BB4 22 CD 85     	ld (Limite_horizontal),hl
365+  8BB7 21 CF 85     	ld hl,Limite_vertical
366+  8BBA 36 0D        	ld (hl),$0d
367+  8BBC 08           	ex af,af
368+  8BBD 18 3C        	jr 1F
369+  8BBF              tercuad
370+  8BBF 3E 03        	ld a,3
371+  8BC1 32 AA 85     	ld (Cuad_objeto),a
372+  8BC4 21 20 48     	ld hl,$4820
373+  8BC7 22 CD 85     	ld (Limite_horizontal),hl
374+  8BCA 21 CF 85     	ld hl,Limite_vertical
375+  8BCD 36 12        	ld (hl),$12
376+  8BCF 08           	ex af,af
377+  8BD0 18 29        	jr 1F
378+  8BD2 CD 04 8C     primit call column
379+  8BD5 38 13        	jr c, primcuad
380+  8BD7              segcuad
381+  8BD7 3E 02        	ld a,2
382+  8BD9 32 AA 85     	ld (Cuad_objeto),a
383+  8BDC 21 C0 4F     	ld hl,$4fc0
384+  8BDF 22 CD 85     	ld (Limite_horizontal),hl
385+  8BE2 21 CF 85     	ld hl,Limite_vertical
386+  8BE5 36 0D        	ld (hl),$0d
387+  8BE7 08           	ex af,af
388+  8BE8 18 11        	jr 1F
389+  8BEA              primcuad
390+  8BEA 3E 01        	ld a,1
391+  8BEC 32 AA 85     	ld (Cuad_objeto),a
392+  8BEF 21 C0 4F     	ld hl,$4fc0
393+  8BF2 22 CD 85     	ld (Limite_horizontal),hl
394+  8BF5 21 CF 85     	ld hl,Limite_vertical
395+  8BF8 36 12        	ld (hl),$12
396+  8BFA 08           	ex af,af
397+  8BFB CD CE 92     1 call Genera_coordenadas
398+  8BFE 21 C3 85     	ld hl,Ctrl_0
399+  8C01 CB EE        	set 5,(hl)
400+  8C03 C9           	ret
401+  8C04
402+  8C04              ; ------------------------------------------------------------------------------------------------------------------
403+  8C04
404+  8C04              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8C04              ;
406+  8C04              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8C04
408+  8C04 7D           column ld a,l
409+  8C05 E6 1F        	and $1f
410+  8C07 FE 10         	cp $10
411+  8C09 C9            	ret
412+  8C0A
413+  8C0A              ; --------------------------------------------------------------------------------------------------------------------
414+  8C0A              ;
415+  8C0A              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8C0A              ;
417+  8C0A              ; 14/12/22
418+  8C0A              ;
419+  8C0A              ;	Modifica: A y BC.
420+  8C0A
421+  8C0A 3A AA 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8C0D E6 01        	and 1
423+  8C0F 28 17        	jr z,1F
424+  8C11
425+  8C11              ; Nos encontramos en la parte izquierda de la pantalla
426+  8C11
427+  8C11 3A 9C 85     	ld a,(Coordenada_X)
428+  8C14 47           	ld b,a
429+  8C15 04           	inc b											; (Coordenada_X)+1 en B.
430+  8C16 79           	ld a,c
431+  8C17 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8C18 38 08        	jr c,2F
433+  8C1A 47           	ld b,a
434+  8C1B 79           	ld a,c
435+  8C1C 90           	sub b
436+  8C1D 32 CC 85     	ld (Columnas),a
437+  8C20 18 1B        	jr 4F
438+  8C22 79           2 ld a,c
439+  8C23 32 CC 85     	ld (Columnas),a
440+  8C26 18 15        	jr 4F
441+  8C28
442+  8C28              ; Nos encontramos en la parte derecha de la pantalla.
443+  8C28
444+  8C28 3A 9C 85     1 ld a,(Coordenada_X)
445+  8C2B 81           	add c
446+  8C2C 3D           	dec a
447+  8C2D D6 1F        	sub $1f
448+  8C2F 38 08        	jr c,3F
449+  8C31 47           	ld b,a
450+  8C32 79           	ld a,c
451+  8C33 90           	sub b
452+  8C34 32 CC 85     	ld (Columnas),a
453+  8C37 18 04        	jr 4F
454+  8C39 79           3 ld a,c
455+  8C3A 32 CC 85     	ld (Columnas),a
456+  8C3D D9           4 exx
457+  8C3E 4F           	ld c,a
458+  8C3F D9           	exx
459+  8C40 C9            ret
460+  8C41
461+  8C41              ; --------------------------------------------------------------------------------------------------------------------
462+  8C41              ;
463+  8C41              ; 7/1/23
464+  8C41              ;
465+  8C41              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8C41              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8C41              ;
468+  8C41              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8C41              ;	DESTRUYE: HL,B Y A.
470+  8C41
471+  8C41 3A AA 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8C44 FE 02        	cp 2
473+  8C46 38 18        	jr c,1F
474+  8C48 28 16        	jr z,1F
475+  8C4A E6 01        	and 1
476+  8C4C 28 0D        	jr z,3F
477+  8C4E
478+  8C4E              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8C4E
480+  8C4E CD 8A 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8C51
482+  8C51 7D           9 ld a,l
483+  8C52 E6 1F        	and $1f
484+  8C54 28 2A        	jr z,7F
485+  8C56 2B           	dec hl
486+  8C57 10 F8        	djnz 9B
487+  8C59 18 25        	jr 7F
488+  8C5B
489+  8C5B              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8C5B
491+  8C5B 2A 98 85     3 ld hl,(Posicion_actual)
492+  8C5E 18 20        	jr 7F
493+  8C60
494+  8C60 28 14        1 jr z,2F
495+  8C62
496+  8C62              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8C62
498+  8C62 CD 8A 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8C65 7D           4 ld a,l
500+  8C66 E6 1F        	and $1f
501+  8C68 28 03        	jr z,6F
502+  8C6A 2B           	dec hl
503+  8C6B 10 F8        	djnz 4B
504+  8C6D 06 0F        6 ld b,15
505+  8C6F CD EB 8C     5 call PreviousScan
506+  8C72 10 FB        	djnz 5B
507+  8C74 18 0A        	jr 7F
508+  8C76
509+  8C76              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8C76
511+  8C76 CD 8A 8C     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8C79 06 0F        	ld b,15
513+  8C7B CD EB 8C     8 call PreviousScan
514+  8C7E 10 FB        	djnz 8B
515+  8C80
516+  8C80 E5           7 push hl
517+  8C81 DD E1        	pop ix
518+  8C83
519+  8C83 2A 9A 85     	ld hl,(Puntero_objeto)
520+  8C86 E5           	push hl
521+  8C87 FD E1        	pop iy
522+  8C89
523+  8C89 C9           	ret
524+  8C8A
525+  8C8A              ; --------------------------------------------------------------------------------------------------------------------
526+  8C8A              ;
527+  8C8A              ;	2/1/23
528+  8C8A              ;
529+  8C8A              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8C8A              ;
531+  8C8A              ;	Tras esta rutina tenemos:
532+  8C8A              ;
533+  8C8A              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8C8A              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8C8A              ;
536+  8C8A              ;	DESTRUYE!!!!! HL,B y A.
537+  8C8A
538+  8C8A 2A 98 85     Operandos ld hl,(Posicion_actual)
539+  8C8D 3A CC 85     	ld a,(Columnas)
540+  8C90 3D           	dec a
541+  8C91 20 01        	jr nz,1F
542+  8C93 3C           	inc a
543+  8C94 47           1 ld b,a
544+  8C95 C9           	ret
545+  8C96
546+  8C96              ; --------------------------------------------------------------------------------------------------------------------
547+  8C96              ;
548+  8C96              ;	3/1/23
549+  8C96              ;
550+  8C96              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8C96              ;
552+  8C96              ;	Destruye: A,B,HL y DE.
553+  8C96
554+  8C96              Define_rutina_de_impresion
555+  8C96
556+  8C96 3A 97 85     	ld a,(Columns)
557+  8C99 47           	ld b,a
558+  8C9A 3A CC 85     	ld a,(Columnas)
559+  8C9D B8           	cp b
560+  8C9E 20 0D        	jr nz,2f
561+  8CA0
562+  8CA0              ;	La entidad se imprime entera.
563+  8CA0
564+  8CA0 21 6C 8D     	ld hl, Indice_entidades_completas
565+  8CA3 E6 01        	and 1
566+  8CA5 28 02        	jr z,1F
567+  8CA7
568+  8CA7 23           	inc hl
569+  8CA8 23           	inc hl
570+  8CA9
571+  8CA9 CD 84 87     1 call Extrae_address
572+  8CAC C9           	ret		;	ret
573+  8CAD
574+  8CAD              ;	La entidad no se imprime entera en pantalla.
575+  8CAD
576+  8CAD 3A AA 85     2 ld a,(Cuad_objeto)
577+  8CB0 E6 01        	and 1
578+  8CB2 28 17        	jr z,3F
579+  8CB4
580+  8CB4              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8CB4
582+  8CB4 21 70 8D     	ld hl, Indice_entidades_incompletas_izquierda
583+  8CB7 3A 97 85     4 ld a,(Columns)
584+  8CBA E6 01        	and 1
585+  8CBC 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8CBE
587+  8CBE 23           	inc hl
588+  8CBF 23           	inc hl
589+  8CC0
590+  8CC0 3A CC 85     	ld a,(Columnas)
591+  8CC3 E6 01        	and 1
592+  8CC5 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8CC7
594+  8CC7 23           	inc hl
595+  8CC8 23           	inc hl
596+  8CC9
597+  8CC9 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8CCB
599+  8CCB 21 76 8D     3 ld hl, Indice_entidades_incompletas_derecha
600+  8CCE 18 E7        	jr 4B
601+  8CD0
602+  8CD0              ; --------------------------------------------------------------------------------------------------------------------
603+  8CD0              ;
604+  8CD0              ;	Prepara_draw
605+  8CD0              ;
606+  8CD0              ;	Es una rutina de carga.
607+  8CD0              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8CD0              ;
609+  8CD0              ;	FUNCIONAMIENTO:
610+  8CD0              ;
611+  8CD0              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8CD0              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8CD0              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8CD0              ;
615+  8CD0              ;	DESTRUYE:
616+  8CD0              ;
617+  8CD0              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8CD0
619+  8CD0 21 96 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8CD3 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8CD4 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8CD5 4E           	ld c,(hl)
623+  8CD6 2A 98 85     	ld hl,(Posicion_actual)
624+  8CD9 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8CDB C9           	ret
626+  8CDC
627+  8CDC              ;----------------------------------------------------------------------------------------------------------------
628+  8CDC              ;
629+  8CDC              ;	5/08/22
630+  8CDC              ;
631+  8CDC              ;   NextScan.
632+  8CDC              ;
633+  8CDC              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8CDC              ;
635+  8CDC              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8CDC              ;
637+  8CDC              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8CDC              ;
639+  8CDC              ;       DESTRUIDOS: AF y HL !!!
640+  8CDC              ;
641+  8CDC              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8CDC              ;
643+  8CDC
644+  8CDC 24           NextScan inc h          ; Incrementamos el scanline.
645+  8CDD 7C               ld a,h
646+  8CDE E6 07            and 7
647+  8CE0 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8CE1
649+  8CE1 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8CE2 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8CE4 6F               ld l,a
652+  8CE5 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8CE6
654+  8CE6 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8CE7 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8CE9 67               ld h,a
657+  8CEA C9               ret
658+  8CEB
659+  8CEB              ;----------------------------------------------------------------------------------------------------------------
660+  8CEB              ;
661+  8CEB              ;	5/08/22
662+  8CEB              ;
663+  8CEB              ;   PreviousScan.
664+  8CEB              ;
665+  8CEB              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8CEB              ;
667+  8CEB              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8CEB              ;
669+  8CEB              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8CEB              ;
671+  8CEB              ;       DESTRUIDOS: AF y HL !!!
672+  8CEB              ;
673+  8CEB              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8CEB              ;
675+  8CEB
676+  8CEB 7C           PreviousScan ld a,h
677+  8CEC 25               dec h               ; Dec H.
678+  8CED E6 07            and 7
679+  8CEF C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8CF0
681+  8CF0 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8CF1 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8CF3 6F               ld l,a
684+  8CF4 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8CF5
686+  8CF5 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8CF6 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8CF8 67               ld h,a
689+  8CF9 C9               ret
690+  8CFA
691+  8CFA              ; -----------------------------------------------------------------------------------
692+  8CFA              ;
693+  8CFA              ;	28/2/23
694+  8CFA              ;
695+  8CFA              ;	Rutina principal de pintado de entidades/Amadeus.
696+  8CFA              ;	Extrae fotos de Album_de_fotos.
697+  8CFA
698+  8CFA 3A D8 85     Extrae_foto_registros ld a,(Numero_de_malotes)
699+  8CFD A7           	and a
700+  8CFE C8           	ret z
701+  8CFF ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
702+  8D03 31 00 70     	ld sp,Album_de_fotos
703+  8D06
704+  8D06 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
705+  8D08 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
706+  8D09 D1           	pop de																	; Dirección de la rutina de impresión en DE.
707+  8D0A
708+  8D0A ED 73 DB 85  	ld (Stack_2),sp
709+  8D0E ED 7B D9 85  	ld sp,(Stack)
710+  8D12
711+  8D12              ; Fabrica la llamada a la correspondiente rutina de impresión.
712+  8D12
713+  8D12 3E CD        	ld a,$cd
714+  8D14 32 1C 8D     	ld (Imprime),a
715+  8D17 EB           	ex de,hl
716+  8D18 22 1D 8D     	ld (Imprime+1),hl
717+  8D1B EB           	ex de,hl
718+  8D1C
719+  8D1C              ; Ejecuta la llamada:	CALL $xx,xx
720+  8D1C
721+  8D1C 00 00 00     Imprime db 0,0,0
722+  8D1F
723+  8D1F 3A D8 85     	ld a,(Numero_de_malotes)
724+  8D22 3D           	dec a
725+  8D23 28 09        	jr z,1F
726+  8D25 32 D8 85      	ld (Numero_de_malotes),a
727+  8D28
728+  8D28 ED 7B DB 85   	ld sp,(Stack_2)
729+  8D2C 18 D8        	jr 2B
730+  8D2E
731+  8D2E AF           1 xor a
732+  8D2F 32 DB 85     	ld (Stack_2),a
733+  8D32 C9           	ret
734+  8D33
735+  8D33              ; -----------------------------------------------------------------------------------
736+  8D33              ;
737+  8D33              ;	28/2/23
738+  8D33              ;
739+  8D33              ;	Rutina principal de pintado de disparos.
740+  8D33
741+  8D33              Extrae_foto_registros_disparos
742+  8D33
743+  8D33 3A E1 85     	ld a,(Numero_de_disparotes)
744+  8D36 A7           	and a
745+  8D37 C8           	ret z
746+  8D38 ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
747+  8D3C 31 60 70     	ld sp,Album_de_fotos_disparos
748+  8D3F
749+  8D3F FD E1        2 pop iy																	; (Puntero_objeto) en IY.
750+  8D41 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
751+  8D42 D1           	pop de																	; Dirección de la rutina de impresión en DE.
752+  8D43
753+  8D43 ED 73 DB 85  	ld (Stack_2),sp
754+  8D47 ED 7B D9 85  	ld sp,(Stack)
755+  8D4B
756+  8D4B              ; Fabrica la llamada a la correspondiente rutina de impresión.
757+  8D4B
758+  8D4B 3E CD        	ld a,$cd
759+  8D4D 32 55 8D     	ld (Imprime2),a
760+  8D50 EB           	ex de,hl
761+  8D51 22 56 8D     	ld (Imprime2+1),hl
762+  8D54 EB           	ex de,hl
763+  8D55
764+  8D55              ; Ejecuta la llamada:	CALL $xx,xx
765+  8D55
766+  8D55 00 00 00     Imprime2 db 0,0,0
767+  8D58
768+  8D58 3A E1 85     	ld a,(Numero_de_disparotes)
769+  8D5B 3D           	dec a
770+  8D5C 28 09        	jr z,1F
771+  8D5E 32 E1 85      	ld (Numero_de_disparotes),a
772+  8D61
773+  8D61 ED 7B DB 85  	ld sp,(Stack_2)
774+  8D65 18 D8        	jr 2B
775+  8D67
776+  8D67 AF           1 xor a
777+  8D68 32 DB 85     	ld (Stack_2),a
778+  8D6B C9           	ret
779+  8D6C
# file closed: Draw_XOR.asm
837   8D6C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8D6C              ;   índices de Rutinas de impresión.
  2+  8D6C
  3+  8D6C 7C 8D        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8D6E A9 8D            defw Pinta_Amadeus_3x2
  5+  8D70
  6+  8D70 FF 8D        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8D72 9F 8E            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8D74 53 8E            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8D76
 10+  8D76 29 8E        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8D78 2D 8F            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8D7A E1 8E            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8D7C
 14+  8D7C
 15+  8D7C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8D7C              ;
 17+  8D7C              ;   12/12/22
 18+  8D7C              ;
 19+  8D7C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8D7C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8D7C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8D7C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8D7C              ;
 24+  8D7C              ;   Modifica: DE y HL.
 25+  8D7C
 26+  8D7C ED 73 D9 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8D80 FD F9        	ld sp,iy
 28+  8D82 06 10            ld b,16
 29+  8D84 D1           1 pop de
 30+  8D85 7B               ld a,e
 31+  8D86 AE               xor (hl)
 32+  8D87 77           	ld (hl),a
 33+  8D88 23           	inc hl
 34+  8D89 7A               ld a,d
 35+  8D8A AE               xor (hl)
 36+  8D8B 77           	ld (hl),a
 37+  8D8C 2B           	dec hl
 38+  8D8D 24           	inc h
 39+  8D8E 7C               ld a,h
 40+  8D8F E6 07            and 7
 41+  8D91 20 0A            jr nz,2F
 42+  8D93 7D               ld a,l
 43+  8D94 C6 20            add a,$20
 44+  8D96 6F               ld l,a
 45+  8D97 38 04            jr c,2F
 46+  8D99 7C               ld a,h
 47+  8D9A D6 08            sub 8
 48+  8D9C 67               ld h,a
 49+  8D9D 7C           2 ld a,h
 50+  8D9E FE 58            cp $58
 51+  8DA0 28 02            jr z,3F
 52+  8DA2 10 E0            djnz 1B
 53+  8DA4 ED 7B D9 85  3 ld sp,(Stack)
 54+  8DA8 C9           	ret
 55+  8DA9
 56+  8DA9 ED 73 D9 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8DAD FD F9        	ld sp,iy
 58+  8DAF 06 08            ld b,8
 59+  8DB1 D1           1 pop de
 60+  8DB2 7B               ld a,e
 61+  8DB3 AE               xor (hl)
 62+  8DB4 77           	ld (hl),a
 63+  8DB5 23           	inc hl
 64+  8DB6 7A               ld a,d
 65+  8DB7 AE               xor (hl)
 66+  8DB8 77           	ld (hl),a
 67+  8DB9 23           	inc hl
 68+  8DBA D1           	pop de
 69+  8DBB 7B               ld a,e
 70+  8DBC AE               xor (hl)
 71+  8DBD 77           	ld (hl),a
 72+  8DBE 2B           	dec hl
 73+  8DBF 2B           	dec hl
 74+  8DC0 24           	inc h
 75+  8DC1 7C               ld a,h
 76+  8DC2 E6 07            and 7
 77+  8DC4 20 0A            jr nz,2F
 78+  8DC6 7D               ld a,l
 79+  8DC7 C6 20            add a,$20
 80+  8DC9 6F               ld l,a
 81+  8DCA 38 04            jr c,2F
 82+  8DCC 7C               ld a,h
 83+  8DCD D6 08            sub 8
 84+  8DCF 67               ld h,a
 85+  8DD0 7C           2 ld a,h
 86+  8DD1 FE 58            cp $58
 87+  8DD3 28 25            jr z,4F
 88+  8DD5 7A               ld a,d
 89+  8DD6 AE               xor (hl)
 90+  8DD7 77               ld (hl),a
 91+  8DD8 D1           	pop de
 92+  8DD9 23           	inc hl
 93+  8DDA 7B               ld a,e
 94+  8DDB AE               xor (hl)
 95+  8DDC 77           	ld (hl),a
 96+  8DDD 23           	inc hl
 97+  8DDE 7A               ld a,d
 98+  8DDF AE               xor (hl)
 99+  8DE0 77           	ld (hl),a
100+  8DE1 2B           	dec hl
101+  8DE2 2B           	dec hl
102+  8DE3 24           	inc h
103+  8DE4 7C               ld a,h
104+  8DE5 E6 07            and 7
105+  8DE7 20 0A            jr nz,3F
106+  8DE9 7D               ld a,l
107+  8DEA C6 20            add a,$20
108+  8DEC 6F               ld l,a
109+  8DED 38 04            jr c,3F
110+  8DEF 7C               ld a,h
111+  8DF0 D6 08            sub 8
112+  8DF2 67               ld h,a
113+  8DF3 7C           3 ld a,h
114+  8DF4 FE 58            cp $58
115+  8DF6 28 02            jr z,4F
116+  8DF8 10 B7            djnz 1B
117+  8DFA ED 7B D9 85  4 ld sp,(Stack)
118+  8DFE C9           	ret
119+  8DFF
120+  8DFF              ; ---------------------------------------------------
121+  8DFF
122+  8DFF ED 73 D9 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8E03 FD F9        	ld sp,iy
124+  8E05
125+  8E05              ; >>>
126+  8E05
127+  8E05 06 10            ld b,16
128+  8E07 D1           1 pop de
129+  8E08 7A           	ld a,d
130+  8E09 AE           	xor (hl)
131+  8E0A 77           	ld (hl),a
132+  8E0B 24           	inc h
133+  8E0C 7C               ld a,h
134+  8E0D E6 07            and 7
135+  8E0F 20 0C            jr nz,2F
136+  8E11 7D               ld a,l
137+  8E12 C6 20            add a,$20
138+  8E14 6F               ld l,a
139+  8E15 38 06            jr c,2F
140+  8E17 7C               ld a,h
141+  8E18 D6 08            sub 8
142+  8E1A 67               ld h,a
143+  8E1B 18 00            jr 2F
144+  8E1D 7C           2 ld a,h
145+  8E1E FE 58            cp $58
146+  8E20 28 02            jr z,3F
147+  8E22 10 E3            djnz 1B
148+  8E24 ED 7B D9 85  3 ld sp,(Stack)
149+  8E28 C9           	ret
150+  8E29
151+  8E29 ED 73 D9 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
152+  8E2D FD F9        	ld sp,iy
153+  8E2F
154+  8E2F              ; >>>
155+  8E2F
156+  8E2F 06 10            ld b,16
157+  8E31 D1           1 pop de
158+  8E32 7B           	ld a,e
159+  8E33 AE           	xor (hl)
160+  8E34 77           	ld (hl),a
161+  8E35 24           	inc h
162+  8E36 7C               ld a,h
163+  8E37 E6 07            and 7
164+  8E39 20 0C            jr nz,2F
165+  8E3B 7D               ld a,l
166+  8E3C C6 20            add a,$20
167+  8E3E 6F               ld l,a
168+  8E3F 38 06            jr c,2F
169+  8E41 7C               ld a,h
170+  8E42 D6 08            sub 8
171+  8E44 67               ld h,a
172+  8E45 18 00            jr 2F
173+  8E47 7C           2 ld a,h
174+  8E48 FE 58            cp $58
175+  8E4A 28 02            jr z,3F
176+  8E4C 10 E3            djnz 1B
177+  8E4E ED 7B D9 85  3 ld sp,(Stack)
178+  8E52 C9           	ret
179+  8E53
180+  8E53              ; ---------------------------------------------------
181+  8E53
182+  8E53 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
183+  8E57 FD F9        	ld sp,iy
184+  8E59 06 08            ld b,8
185+  8E5B D1           1 pop de
186+  8E5C 7A           	ld a,d
187+  8E5D AE           	xor (hl)
188+  8E5E 77           	ld (hl),a
189+  8E5F 23           	inc hl
190+  8E60 D1           	pop de
191+  8E61 7B           	ld a,e
192+  8E62 AE           	xor (hl)
193+  8E63 77           	ld (hl),a
194+  8E64 2B           	dec hl
195+  8E65 24            	inc h
196+  8E66 7C               ld a,h
197+  8E67 E6 07            and 7
198+  8E69 20 0A            jr nz,2F
199+  8E6B 7D               ld a,l
200+  8E6C C6 20            add a,$20
201+  8E6E 6F               ld l,a
202+  8E6F 38 04            jr c,2F
203+  8E71 7C               ld a,h
204+  8E72 D6 08            sub 8
205+  8E74 67               ld h,a
206+  8E75 7C           2 ld a,h
207+  8E76 FE 58            cp $58
208+  8E78 28 20            jr z,4F
209+  8E7A D1               pop de
210+  8E7B 7B           	ld a,e
211+  8E7C AE           	xor (hl)
212+  8E7D 77           	ld (hl),a
213+  8E7E 23           	inc hl
214+  8E7F 7A           	ld a,d
215+  8E80 AE           	xor (hl)
216+  8E81 77           	ld (hl),a
217+  8E82 2B           	dec hl
218+  8E83 24           	inc h
219+  8E84 7C               ld a,h
220+  8E85 E6 07            and 7
221+  8E87 20 0A            jr nz,3F
222+  8E89 7D               ld a,l
223+  8E8A C6 20            add a,$20
224+  8E8C 6F               ld l,a
225+  8E8D 38 04            jr c,3F
226+  8E8F 7C               ld a,h
227+  8E90 D6 08            sub 8
228+  8E92 67               ld h,a
229+  8E93 7C           3 ld a,h
230+  8E94 FE 58            cp $58
231+  8E96 28 02            jr z,4F
232+  8E98 10 C1            djnz 1B
233+  8E9A ED 7B D9 85  4 ld sp,(Stack)
234+  8E9E C9           	ret
235+  8E9F
236+  8E9F ED 73 D9 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
237+  8EA3 FD F9        	ld sp,iy
238+  8EA5 06 08            ld b,8
239+  8EA7 D1           1 pop de
240+  8EA8 D1           	pop de
241+  8EA9 7B           	ld a,e
242+  8EAA AE           	xor (hl)
243+  8EAB 77           	ld (hl),a
244+  8EAC 24            	inc h
245+  8EAD 7C               ld a,h
246+  8EAE E6 07            and 7
247+  8EB0 20 0A            jr nz,2F
248+  8EB2 7D               ld a,l
249+  8EB3 C6 20            add a,$20
250+  8EB5 6F               ld l,a
251+  8EB6 38 04            jr c,2F
252+  8EB8 7C               ld a,h
253+  8EB9 D6 08            sub 8
254+  8EBB 67               ld h,a
255+  8EBC 7C           2 ld a,h
256+  8EBD FE 58            cp $58
257+  8EBF 28 1B            jr z,4F
258+  8EC1 D1               pop de
259+  8EC2 7A           	ld a,d
260+  8EC3 AE           	xor (hl)
261+  8EC4 77           	ld (hl),a
262+  8EC5 24           	inc h
263+  8EC6 7C               ld a,h
264+  8EC7 E6 07            and 7
265+  8EC9 20 0A            jr nz,3F
266+  8ECB 7D               ld a,l
267+  8ECC C6 20            add a,$20
268+  8ECE 6F               ld l,a
269+  8ECF 38 04            jr c,3F
270+  8ED1 7C               ld a,h
271+  8ED2 D6 08            sub 8
272+  8ED4 67               ld h,a
273+  8ED5 7C           3 ld a,h
274+  8ED6 FE 58            cp $58
275+  8ED8 28 02            jr z,4F
276+  8EDA 10 CB            djnz 1B
277+  8EDC ED 7B D9 85  4 ld sp,(Stack)
278+  8EE0 C9           	ret
279+  8EE1
280+  8EE1 ED 73 D9 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
281+  8EE5 FD F9        	ld sp,iy
282+  8EE7 06 08            ld b,8
283+  8EE9 D1           1 pop de
284+  8EEA 7B           	ld a,e
285+  8EEB AE           	xor (hl)
286+  8EEC 77           	ld (hl),a
287+  8EED 23           	inc hl
288+  8EEE 7A           	ld a,d
289+  8EEF AE           	xor (hl)
290+  8EF0 77           	ld (hl),a
291+  8EF1 2B           	dec hl
292+  8EF2 24             	inc h
293+  8EF3 7C               ld a,h
294+  8EF4 E6 07            and 7
295+  8EF6 20 0A            jr nz,2F
296+  8EF8 7D               ld a,l
297+  8EF9 C6 20            add a,$20
298+  8EFB 6F               ld l,a
299+  8EFC 38 04            jr c,2F
300+  8EFE 7C               ld a,h
301+  8EFF D6 08            sub 8
302+  8F01 67               ld h,a
303+  8F02 7C           2 ld a,h
304+  8F03 FE 58            cp $58
305+  8F05 28 21            jr z,4F
306+  8F07 D1               pop de
307+  8F08 7A           	ld a,d
308+  8F09 AE           	xor (hl)
309+  8F0A 77           	ld (hl),a
310+  8F0B 23           	inc hl
311+  8F0C D1               pop de
312+  8F0D 7B           	ld a,e
313+  8F0E AE           	xor (hl)
314+  8F0F 77           	ld (hl),a
315+  8F10 2B           	dec hl
316+  8F11 24           	inc h
317+  8F12 7C               ld a,h
318+  8F13 E6 07            and 7
319+  8F15 20 0A            jr nz,3F
320+  8F17 7D               ld a,l
321+  8F18 C6 20            add a,$20
322+  8F1A 6F               ld l,a
323+  8F1B 38 04            jr c,3F
324+  8F1D 7C               ld a,h
325+  8F1E D6 08            sub 8
326+  8F20 67               ld h,a
327+  8F21 7C           3 ld a,h
328+  8F22 FE 58            cp $58
329+  8F24 28 02            jr z,4F
330+  8F26 10 C1            djnz 1B
331+  8F28 ED 7B D9 85  4 ld sp,(Stack)
332+  8F2C C9           	ret
333+  8F2D
334+  8F2D ED 73 D9 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
335+  8F31 FD F9        	ld sp,iy
336+  8F33 06 08            ld b,8
337+  8F35 D1           1 pop de
338+  8F36 7B           	ld a,e
339+  8F37 AE           	xor (hl)
340+  8F38 77           	ld (hl),a
341+  8F39 24            	inc h
342+  8F3A 7C               ld a,h
343+  8F3B E6 07            and 7
344+  8F3D 20 0A            jr nz,2F
345+  8F3F 7D               ld a,l
346+  8F40 C6 20            add a,$20
347+  8F42 6F               ld l,a
348+  8F43 38 04            jr c,2F
349+  8F45 7C               ld a,h
350+  8F46 D6 08            sub 8
351+  8F48 67               ld h,a
352+  8F49 7C           2 ld a,h
353+  8F4A FE 58            cp $58
354+  8F4C 28 1C            jr z,4F
355+  8F4E D1               pop de
356+  8F4F 7A           	ld a,d
357+  8F50 AE           	xor (hl)
358+  8F51 77           	ld (hl),a
359+  8F52 24           	inc h
360+  8F53 7C               ld a,h
361+  8F54 E6 07            and 7
362+  8F56 20 0A            jr nz,3F
363+  8F58 7D               ld a,l
364+  8F59 C6 20            add a,$20
365+  8F5B 6F               ld l,a
366+  8F5C 38 04            jr c,3F
367+  8F5E 7C               ld a,h
368+  8F5F D6 08            sub 8
369+  8F61 67               ld h,a
370+  8F62 7C           3 ld a,h
371+  8F63 FE 58            cp $58
372+  8F65 28 03            jr z,4F
373+  8F67 D1               pop de
374+  8F68 10 CB            djnz 1B
375+  8F6A ED 7B D9 85  4 ld sp,(Stack)
376+  8F6E C9           	ret
377+  8F6F
378+  8F6F              ; ---------------------------------------------------
379+  8F6F              ;
380+  8F6F              ;   27/02/23
381+  8F6F              ;
382+  8F6F              ;   Rutina idéntica a Pinta_Amadeus_2x2, sólo difiere de esta en el nº de scanlines_
383+  8F6F              ;   _ que imprime. No utilizamos [Pinta_Amadeus_2x2] porque cuando el programa está_
384+  8F6F              ;   _ imprimiendo elementos, no discrimina el tipo de Sprite que está pintando.
385+  8F6F
386+  8F6F ED 73 D9 85  Pinta_Disparo ld (Stack),sp
387+  8F73 FD F9            ld sp,iy
388+  8F75 06 02            ld b,2
389+  8F77 D1           1 pop de
390+  8F78 7B               ld a,e
391+  8F79 AE               xor (hl)
392+  8F7A 77               ld (hl),a
393+  8F7B 23               inc hl
394+  8F7C 7A               ld a,d
395+  8F7D AE               xor (hl)
396+  8F7E 77               ld (hl),a
397+  8F7F 2B               dec hl
398+  8F80 24               inc h
399+  8F81 7C               ld a,h
400+  8F82 E6 07            and 7
401+  8F84 20 0A            jr nz,2F
402+  8F86 7D               ld a,l
403+  8F87 C6 20            add a,$20
404+  8F89 6F               ld l,a
405+  8F8A 38 04            jr c,2F
406+  8F8C 7C               ld a,h
407+  8F8D D6 08            sub 8
408+  8F8F 67               ld h,a
409+  8F90 7C           2 ld a,h
410+  8F91 FE 58            cp $58
411+  8F93 28 02            jr z,3F
412+  8F95 10 E0            djnz 1B
413+  8F97 ED 7B D9 85  3 ld sp,(Stack)
414+  8F9B C9               ret
415+  8F9C
# file closed: Rutinas_de_impresion_sprites.asm
838   8F9C              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8F9C              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8F9C              ;
  3+  8F9C              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8F9C              ;
  5+  8F9C              ; *****************************************************************************************************************************************************************************************
  6+  8F9C              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8F9C
  8+  8F9C 7C           calcula_tercio ld a,h
  9+  8F9D E6 18        	and $18
 10+  8F9F CB 2F        	sra a
 11+  8FA1 CB 2F        	sra a
 12+  8FA3 CB 2F        	sra a
 13+  8FA5 C9           	ret
 14+  8FA6
# file closed: calcula_tercio.asm
839   8FA6              	include "Cls.asm"
# file opened: Cls.asm
  1+  8FA6              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8FA6              ;
  3+  8FA6              ;
  4+  8FA6              ;	CLS.
  5+  8FA6              ;
  6+  8FA6              ;	Limpia la pantalla y define sus atributos.
  7+  8FA6              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8FA6              ;
  9+  8FA6              ;	COLORES: 0 ..... NEGRO
 10+  8FA6              ;    		 1 ..... AZUL
 11+  8FA6              ; 			 2 ..... ROJO
 12+  8FA6              ;			 3 ..... MAGENTA
 13+  8FA6              ; 			 4 ..... VERDE
 14+  8FA6              ; 			 5 ..... CIAN
 15+  8FA6              ;			 6 ..... AMARILLO
 16+  8FA6              ; 			 7 ..... BLANCO
 17+  8FA6              ;
 18+  8FA6              ;	INPUT: A contiene los atributos de pantalla.
 19+  8FA6              ;
 20+  8FA6              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8FA6
 22+  8FA6
 23+  8FA6 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8FA9 11 01 40     	LD DE,$4001
 25+  8FAC 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8FAF 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8FB1 ED B0        	LDIR
 28+  8FB3 01 FF 02     	LD BC,767
 29+  8FB6 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8FB7 ED B0        	LDIR
 31+  8FB9 C9           	ret
 32+  8FBA
# file closed: Cls.asm
840   8FBA              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8FBA              ; ******************************************************************************************************************************************************************************************
  2+  8FBA              ;
  3+  8FBA              ;   22/01/23
  4+  8FBA              ;
  5+  8FBA              ;	Mov_down
  6+  8FBA              ;
  7+  8FBA              ; 	Mueve el Sprite X px hacia abajo.
  8+  8FBA              ;
  9+  8FBA              ;
 10+  8FBA 21 C3 85     Mov_down ld hl,Ctrl_0
 11+  8FBD CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8FBF              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8FBF              ; 																	; _ en el caso de que no lo haya.
 14+  8FBF 3A AE 85     	ld a,(Vel_down)
 15+  8FC2 47           	ld b,a
 16+  8FC3 2A 98 85         ld hl,(Posicion_actual)
 17+  8FC6 CD 9C 8F     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8FC9 E6 02        	and 2
 19+  8FCB 28 0F        	jr z,1F
 20+  8FCD
 21+  8FCD              ; Nos encontramos en el último tercio de pantalla.
 22+  8FCD              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8FCD
 24+  8FCD 7C           	ld a,h
 25+  8FCE FE 57        	cp $57
 26+  8FD0 20 0A        	jr nz,1F
 27+  8FD2 7D           	ld a,l
 28+  8FD3 C6 20        	add $20
 29+  8FD5 30 05        	jr nc,1F
 30+  8FD7
 31+  8FD7              ; ------------------------------
 32+  8FD7 CD B8 92     	call Reaparece_arriba
 33+  8FDA              ;	call Reinicio
 34+  8FDA              ; ------------------------------
 35+  8FDA 18 08        	jr 3F
 36+  8FDC CD DC 8C     1 call NextScan
 37+  8FDF 22 98 85     	ld (Posicion_actual),hl
 38+  8FE2 10 E2            djnz 2B
 39+  8FE4 CD CE 92     3 call Genera_coordenadas
 40+  8FE7 C9           	ret
 41+  8FE8
 42+  8FE8
 43+  8FE8              ; ******************************************************************************************************************************************************************************************
 44+  8FE8              ;
 45+  8FE8              ;   22/01/23
 46+  8FE8              ;
 47+  8FE8              ;	Mov_up
 48+  8FE8              ;
 49+  8FE8              ; 	Mueve el Sprite hacia arriba.
 50+  8FE8              ;
 51+  8FE8              ;
 52+  8FE8 21 C3 85     Mov_up ld hl,Ctrl_0
 53+  8FEB CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8FED              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8FED              ; 																		; _ en el caso de que no lo haya.
 56+  8FED 3A AD 85     	ld a,(Vel_up)
 57+  8FF0 47           	ld b,a
 58+  8FF1 2A 98 85     	ld hl,(Posicion_actual)
 59+  8FF4 CD 9C 8F     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8FF7 A7           	and a
 61+  8FF8 20 10        	jr nz,1F
 62+  8FFA
 63+  8FFA              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8FFA              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8FFA
 66+  8FFA 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8FFB FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8FFD 20 0B            jr nz,1F
 69+  8FFF 7D               ld a,l
 70+  9000 D6 20            sub $20
 71+  9002 30 06            jr nc,1F
 72+  9004 25               dec h
 73+  9005
 74+  9005              ; -----------------------------
 75+  9005 CD A8 92         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  9008              ;	call Reinicio
 77+  9008              ; -----------------------------
 78+  9008
 79+  9008 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  900A CD EB 8C     1 call PreviousScan
 81+  900D 22 98 85     	ld (Posicion_actual),hl
 82+  9010 10 E2            djnz 3B
 83+  9012 CD CE 92     2 call Genera_coordenadas
 84+  9015 C9           	ret
 85+  9016
 86+  9016              ; ******************************************************************************************************************************************************************************************
 87+  9016              ;
 88+  9016              ;	19/10/22
 89+  9016              ;
 90+  9016              ;	Mov_right.
 91+  9016              ;
 92+  9016              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  9016              ;
 94+  9016
 95+  9016 21 C3 85     Mov_right ld hl,Ctrl_0
 96+  9019 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  901B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  901B              ; 																	; _ en el caso de que no lo haya.
 99+  901B 3A C3 85     	ld a,(Ctrl_0)
100+  901E CB 77        	bit 6,a
101+  9020 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  9022
103+  9022 CD 56 92     	call Stop_Amadeus_right
104+  9025 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  9026 18 4D        	jr 8F
106+  9028
107+  9028 3A 9C 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  902B FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  902D 20 46        	jr nz,8F
110+  902F
111+  902F 3A 9E 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  9032 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  9033 28 40        	jr z,8F
114+  9035
115+  9035              ; ---------- ---------- ----------
116+  9035              ;
117+  9035              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  9035
119+  9035 3A AC 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  9038 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  903A 28 11        	jr z,1F
122+  903C 38 06        	jr c,6F
123+  903E FE 04        	cp 4
124+  9040 28 14        	jr z,7F
125+  9042 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  9044
127+  9044              ; ---------- ---------- ----------
128+  9044              ;
129+  9044              ; Perfiles de velocidad
130+  9044              ;
131+  9044
132+  9044 3A 9E 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  9047 FE FE        	cp $fe
134+  9049 20 2A        	jr nz,8F
135+  904B 18 10        	jr 3F
136+  904D 3A 9E 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  9050 FE FD        	cp $fd
138+  9052 20 21        	jr nz,8F
139+  9054 18 07        	jr 3F
140+  9056 3A 9E 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  9059 FE FB        	cp $fb
142+  905B 20 18        	jr nz,8F
143+  905D
144+  905D              ; ---------- ---------- ----------
145+  905D
146+  905D              3
147+  905D CD 96 92     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  9060              ;	call Reinicio
149+  9060
150+  9060              ; ---------- ---------- ----------
151+  9060              ;
152+  9060              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  9060
154+  9060 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  9062 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  9063 CD 7C 90     	call DESPLZ_DER
157+  9066 C1           	pop bc
158+  9067 10 F9        	djnz 5B
159+  9069 2A 98 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  906C 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  906D 22 98 85     	ld (Posicion_actual),hl
162+  9070 CD CE 92     	call Genera_coordenadas
163+  9073 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  9075
165+  9075              ; ---------- ---------- ----------
166+  9075
167+  9075 2A 98 85     8 ld hl,(Posicion_actual)
168+  9078 CD 7C 90     	call DESPLZ_DER
169+  907B C9           2 ret
170+  907C
171+  907C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  907C              ;
173+  907C              ;	22/9/22
174+  907C              ;
175+  907C
176+  907C CD 8B 90     DESPLZ_DER call Desplaza_derecha
177+  907F CD D7 90         call modifica_parametros_1er_DESPLZ_2
178+  9082 CD 00 91         call Ciclo_completo
179+  9085 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  9088 CB FE        	set 7,(hl)
181+  908A C9           	ret
182+  908B
183+  908B              ; ******************************************************************************************************************************************************************************************
184+  908B              ;	15/02/23
185+  908B              ;
186+  908B
187+  908B 3A AC 85     Desplaza_derecha ld a,(Vel_right)
188+  908E 47           	ld b,a
189+  908F 2A A4 85     	ld hl,(Puntero_DESPLZ_der)
190+  9092 23           1 inc hl
191+  9093 23           	inc hl
192+  9094 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  9096 22 A4 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  9099 CD 84 87     	call Extrae_address
195+  909C 22 9A 85     	ld (Puntero_objeto),hl
196+  909F
197+  909F              ; Modifica (Puntero_DESPLZ_izq).
198+  909F
199+  909F              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  909F              ; Cuántos movimientos hemos hecho ??
201+  909F              ; DE contiene (Puntero_DESPLZ_der).
202+  909F
203+  909F 2A A0 85     7 ld hl,(Indice_Sprite_der)
204+  90A2 EB           	ex de,hl
205+  90A3 A7           	and a
206+  90A4 ED 52        	sbc hl,de
207+  90A6 CB 3D        	srl l
208+  90A8 3E 08        6 ld a,8
209+  90AA 95           	sub l
210+  90AB 30 1E        	jr nc,3F
211+  90AD
212+  90AD              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  90AD              ; B="0".
214+  90AD
215+  90AD 04           4 inc b
216+  90AE 3C           	inc a
217+  90AF 20 FC        	jr nz,4B
218+  90B1 78           	ld a,b
219+  90B2 08           	ex af,af
220+  90B3 2A A0 85     	ld hl,(Indice_Sprite_der)
221+  90B6 23           5 inc hl
222+  90B7 23           	inc hl
223+  90B8 10 FC        	djnz 5B
224+  90BA 22 A4 85     	ld (Puntero_DESPLZ_der),hl
225+  90BD CD 84 87     	call Extrae_address
226+  90C0 22 9A 85     	ld (Puntero_objeto),hl
227+  90C3
228+  90C3              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  90C3              ; _(Posicion_actual).
230+  90C3
231+  90C3 21 98 85     	ld hl,Posicion_actual
232+  90C6 34           	inc (hl)
233+  90C7 08               ex af,af
234+  90C8 6F           	ld l,a
235+  90C9 18 DD        	jr 6B
236+  90CB
237+  90CB              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  90CB
239+  90CB 47           3 ld b,a
240+  90CC 2A A2 85     	ld hl,(Indice_Sprite_izq)
241+  90CF 23           2 inc hl
242+  90D0 23           	inc hl
243+  90D1 10 FC        	djnz 2B
244+  90D3 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
245+  90D6 C9           8 ret
246+  90D7
247+  90D7              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  90D7              ;
249+  90D7              ;	24/7/22
250+  90D7              ;
251+  90D7              ;	modifica_parametros_1er_DESPLZ_2
252+  90D7              ;
253+  90D7              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  90D7              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  90D7              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  90D7
257+  90D7 3A 9E 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  90DA A7           	and a
259+  90DB 20 1F        	jr nz,1F
260+  90DD D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  90DF 32 9E 85         ld (CTRL_DESPLZ),a
262+  90E2
263+  90E2 21 97 85     	ld hl,Columns
264+  90E5 34           	inc (hl)
265+  90E6 3A AA 85     	ld a,(Cuad_objeto)
266+  90E9 E6 01        	and 1
267+  90EB 28 0F        	jr z,1F
268+  90ED 2A 98 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  90F0 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  90F1 22 98 85     	ld (Posicion_actual),hl
271+  90F4 CD CE 92     	call Genera_coordenadas
272+  90F7 CD 62 92     	call Inc_CTRL_DESPLZ
273+  90FA 18 03        	jr 2F
274+  90FC CD 62 92     1 call Inc_CTRL_DESPLZ
275+  90FF C9           2 ret
276+  9100
277+  9100              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  9100              ;
279+  9100              ;	24/7/22
280+  9100              ;
281+  9100              ;	Ciclo_completo.
282+  9100              ;
283+  9100              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  9100              ;
285+  9100              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  9100              ; 	Decrementamos (Columns).
287+  9100              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  9100              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  9100
290+  9100
291+  9100 3A 9E 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  9103 FE FF        	cp $ff
293+  9105 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  9107 E6 F0        	and $f0
295+  9109 20 28        	jr nz,3F
296+  910B
297+  910B              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  910B
299+  910B 3A 9E 85     	ld a,(CTRL_DESPLZ)
300+  910E 47           	ld b,a
301+  910F 3E F8        	ld a,$f8
302+  9111 80           	add b
303+  9112 32 9E 85     	ld (CTRL_DESPLZ),a
304+  9115 18 1C        	jr 3F
305+  9117 21 97 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  911A 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  911B AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  911C 32 9E 85     	ld (CTRL_DESPLZ),a
309+  911F 3A AA 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  9122 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  9124 20 0A        	jr nz,2F
312+  9126 2A 98 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  9129 23           	inc hl
314+  912A 22 98 85     	ld (Posicion_actual),hl
315+  912D CD CE 92     	call Genera_coordenadas
316+  9130
317+  9130              ; Inicia el puntero de Sprite.
318+  9130
319+  9130 CD 9B 87     2 call Inicia_puntero_objeto_der
320+  9133 C9           3 ret
321+  9134
322+  9134              ; ******************************************************************************************************************************************************************************************
323+  9134              ;
324+  9134              ;	15/02/23
325+  9134              ;
326+  9134              ;	Mov_left.
327+  9134              ;
328+  9134              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  9134              ;
330+  9134              Mov_left
331+  9134
332+  9134 21 C3 85     	ld hl,Ctrl_0
333+  9137 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  9139              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  9139              ; 																	; _ en el caso de que no lo haya.
336+  9139 3A C3 85     	ld a,(Ctrl_0)
337+  913C CB 77        	bit 6,a
338+  913E 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  9140
340+  9140 CD 5C 92     	call Stop_Amadeus_left
341+  9143 C8           	ret z
342+  9144 20 50        	jr nz,8F
343+  9146
344+  9146 3A 9C 85     11 ld a,(Coordenada_X)
345+  9149 A7           	and a
346+  914A 20 4A        	jr nz,8F
347+  914C
348+  914C 3A 9E 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  914F A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  9150 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  9152
352+  9152              ; ---------- ---------- ----------
353+  9152
354+  9152 3A AB 85     	ld a,(Vel_left)
355+  9155 FE 02        	cp 2
356+  9157 28 0F        	jr z,1F
357+  9159 38 04        	jr c,6F
358+  915B FE 04        	cp 4
359+  915D 28 12        	jr z,7F
360+  915F
361+  915F              ; ---------- ---------- ----------
362+  915F
363+  915F 3A 9E 85     6 ld a,(CTRL_DESPLZ)
364+  9162 FE F9        	cp $f9
365+  9164 20 30        	jr nz,8F
366+  9166 18 10        	jr 4F
367+  9168 3A 9E 85     1 ld a,(CTRL_DESPLZ)
368+  916B FE FA        	cp $fa
369+  916D 20 27        	jr nz,8F
370+  916F 18 07        	jr 4F
371+  9171 3A 9E 85     7 ld a,(CTRL_DESPLZ)
372+  9174 FE FC        	cp $fc
373+  9176 20 1E        	jr nz,8F
374+  9178
375+  9178              ; ---------- ---------- ----------
376+  9178
377+  9178              4
378+  9178 CD 84 92     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  917B              ;	call Reinicio
380+  917B
381+  917B              ; ---------- ---------- ----------
382+  917B
383+  917B 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  917D C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  917E
386+  917E 2A A2 85     	ld hl,(Indice_Sprite_izq)
387+  9181 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
388+  9184
389+  9184 CD 9D 91     	call DESPLZ_IZQ
390+  9187 C1           	pop bc
391+  9188 10 F3        	djnz 5B
392+  918A 2A 98 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  918D 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  918E 22 98 85     	ld (Posicion_actual),hl
395+  9191 CD CE 92     	call Genera_coordenadas
396+  9194 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9196
398+  9196              ; ---------- ---------- ----------
399+  9196              ; Movemos, no hay recolocación.
400+  9196
401+  9196 2A 98 85     8 ld hl,(Posicion_actual)
402+  9199 CD 9D 91     	call DESPLZ_IZQ
403+  919C C9           2 ret
404+  919D
405+  919D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  919D              ;
407+  919D              ;	22/9/22
408+  919D
409+  919D              DESPLZ_IZQ
410+  919D
411+  919D CD AC 91     	call Desplaza_izquierda
412+  91A0 CD F8 91         call modifica_parametros_1er_DESPLZ
413+  91A3 CD 20 92     	call Ciclo_completo_2
414+  91A6 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  91A9 CB BE        	res 7,(hl)
416+  91AB C9           	ret
417+  91AC
418+  91AC              Desplaza_izquierda
419+  91AC
420+  91AC 3A AB 85     	ld a,(Vel_left)
421+  91AF 47           	ld b,a
422+  91B0 2A A6 85     	ld hl,(Puntero_DESPLZ_izq)
423+  91B3 23           1 inc hl
424+  91B4 23           	inc hl
425+  91B5 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  91B7 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
427+  91BA CD 84 87     	call Extrae_address
428+  91BD 22 9A 85     	ld (Puntero_objeto),hl
429+  91C0
430+  91C0              ; Modifica (Puntero_DESPLZ_der).
431+  91C0
432+  91C0              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  91C0              ; Cuántos movimientos hemos hecho ??
434+  91C0              ; DE contiene (Puntero_DESPLZ_izq).
435+  91C0
436+  91C0 2A A2 85     7 ld hl,(Indice_Sprite_izq)
437+  91C3 EB           	ex de,hl
438+  91C4 A7           	and a
439+  91C5 ED 52        	sbc hl,de
440+  91C7 CB 3D        	srl l
441+  91C9 3E 08        6 ld a,8
442+  91CB 95           	sub l
443+  91CC 30 1E        	jr nc,3F
444+  91CE
445+  91CE              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  91CE              ; B="0".
447+  91CE
448+  91CE 04           4 inc b
449+  91CF 3C           	inc a
450+  91D0 20 FC        	jr nz,4B
451+  91D2 78           	ld a,b
452+  91D3 08           	ex af,af
453+  91D4 2A A2 85     	ld hl,(Indice_Sprite_izq)
454+  91D7 23           5 inc hl
455+  91D8 23           	inc hl
456+  91D9 10 FC        	djnz 5B
457+  91DB 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
458+  91DE CD 84 87     	call Extrae_address
459+  91E1 22 9A 85     	ld (Puntero_objeto),hl
460+  91E4
461+  91E4              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  91E4              ; _(Posicion_actual).
463+  91E4
464+  91E4 21 98 85     	ld hl,Posicion_actual
465+  91E7 35           	dec (hl)
466+  91E8 08           	ex af,af
467+  91E9 6F           	ld l,a
468+  91EA 18 DD        	jr 6B
469+  91EC
470+  91EC              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  91EC
472+  91EC 47           3 ld b,a
473+  91ED 2A A0 85     	ld hl,(Indice_Sprite_der)
474+  91F0 23           2 inc hl
475+  91F1 23           	inc hl
476+  91F2 10 FC        	djnz 2B
477+  91F4 22 A4 85     	ld (Puntero_DESPLZ_der),hl
478+  91F7 C9           8 ret
479+  91F8
480+  91F8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  91F8              ;
482+  91F8              ;	modifica_parametros_1er_DESPLZ
483+  91F8              ;
484+  91F8              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  91F8              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  91F8              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  91F8
488+  91F8 3A 9E 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  91FB A7           	and a
490+  91FC 20 1E        	jr nz,1F
491+  91FE 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  91FF 32 9E 85         ld (CTRL_DESPLZ),a
493+  9202 21 97 85     	ld hl,Columns
494+  9205 34           	inc (hl)
495+  9206 3A AA 85     	ld a,(Cuad_objeto)
496+  9209 E6 01        	and 1
497+  920B 20 0F        	jr nz,1F
498+  920D 2A 98 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  9210 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  9211 22 98 85     	ld (Posicion_actual),hl
501+  9214 CD CE 92     	call Genera_coordenadas
502+  9217 CD 73 92     	call Dec_CTRL_DESPLZ
503+  921A 18 03        	jr 2F
504+  921C CD 73 92     1 call Dec_CTRL_DESPLZ
505+  921F C9           2 ret
506+  9220
507+  9220              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  9220
509+  9220 3A 9E 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  9223 FE F7        	cp $f7
511+  9225 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  9227 30 2C        	jr nc,3F
513+  9229
514+  9229              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  9229
516+  9229 06 00        	ld b,0
517+  922B 04           4 inc b
518+  922C 3C           	inc a
519+  922D FE F7        	cp $f7
520+  922F 20 FA        	jr nz,4B
521+  9231 3E FF        	ld a,$ff
522+  9233 90           	sub b
523+  9234 32 9E 85     	ld (CTRL_DESPLZ),a
524+  9237 18 1C        	jr 3F
525+  9239
526+  9239              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  9239
528+  9239 21 97 85     1 ld hl,Columns
529+  923C 35           	dec (hl)
530+  923D AF           	xor a
531+  923E 32 9E 85     	ld (CTRL_DESPLZ),a
532+  9241 3A AA 85     	ld a,(Cuad_objeto)
533+  9244 E6 01        	and 1
534+  9246 28 0A        	jr z,2F
535+  9248 2A 98 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  924B 2B           	dec hl
537+  924C 22 98 85     	ld (Posicion_actual),hl
538+  924F CD CE 92     	call Genera_coordenadas
539+  9252
540+  9252              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  9252
542+  9252 CD AE 87     2 call Inicia_puntero_objeto_izq
543+  9255 C9           3 ret
544+  9256
545+  9256              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9256              ;
547+  9256              ;	19/10/22
548+  9256              ;
549+  9256              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9256              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9256
552+  9256 3A 9C 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  9259 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  925B C9           	ret
555+  925C
556+  925C              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  925C              ;
558+  925C              ;	19/10/22
559+  925C              ;
560+  925C              ;	(cp 2) para un Amadeus de 3 Columns.
561+  925C              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  925C
563+  925C 3A 9C 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  925F FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  9261 C9           	ret
566+  9262
567+  9262              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  9262              ;
569+  9262              ;	24/7/22
570+  9262              ;
571+  9262              ;	Inc_CTRL_DESPLZ
572+  9262              ;
573+  9262              ;
574+  9262              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  9262
576+  9262 21 9E 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  9265 3A AC 85     	ld a,(Vel_right)
578+  9268 A7           	and a
579+  9269 28 06        	jr z,1F
580+  926B 47           	ld b,a
581+  926C 34           3 inc (hl)
582+  926D 10 FD        	djnz 3B
583+  926F 18 01        	jr 2F
584+  9271 34           1 inc (hl)
585+  9272 C9           2 ret
586+  9273
587+  9273              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  9273              ;
589+  9273              ;	5/2/23
590+  9273              ;
591+  9273              ;	Dec_CTRL_DESPLZ
592+  9273              ;
593+  9273              ;
594+  9273              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  9273
596+  9273 21 9E 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9276 3A AB 85     	ld a,(Vel_left)
598+  9279 A7           	and a
599+  927A 28 06        	jr z,1F
600+  927C 47           	ld b,a
601+  927D 35           3 dec (hl)
602+  927E 10 FD        	djnz 3B
603+  9280 18 01        	jr 2F
604+  9282 35           1 dec (hl)
605+  9283 C9           2 ret
606+  9284
607+  9284              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9284
609+  9284 2A 98 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9287 01 1F 00     	ld bc,31
611+  928A A7           	and a
612+  928B ED 4A        	adc hl,bc
613+  928D 22 98 85     	ld (Posicion_actual),hl
614+  9290 21 C3 85     	ld hl,Ctrl_0														; $xxx1
615+  9293 CB C6        	set 0,(hl)
616+  9295 C9           	ret
617+  9296
618+  9296              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9296
620+  9296 2A 98 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9299 01 1F 00     	ld bc,31
622+  929C A7           	and a
623+  929D ED 42        	sbc hl,bc
624+  929F 22 98 85     	ld (Posicion_actual),hl 											; $xx1x
625+  92A2 21 C3 85     	ld hl,Ctrl_0
626+  92A5 CB CE        	set 1,(hl)
627+  92A7 C9           	ret
628+  92A8
629+  92A8              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  92A8
631+  92A8 24           Reaparece_abajo inc h
632+  92A9 01 E0 17     	ld bc,$17e0
633+  92AC A7           	and a
634+  92AD ED 4A        	adc hl,bc
635+  92AF 22 98 85     	ld (Posicion_actual),hl
636+  92B2 21 C3 85     	ld hl,Ctrl_0
637+  92B5 CB D6        	set 2,(hl)
638+  92B7 C9           	ret
639+  92B8
640+  92B8              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  92B8
642+  92B8 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  92BB A7           	and a
644+  92BC ED 42        	sbc hl,bc
645+  92BE 22 98 85     	ld (Posicion_actual),hl
646+  92C1 21 C3 85     	ld hl,Ctrl_0
647+  92C4 CB DE        	set 3,(hl)
648+  92C6 C9           	ret
649+  92C7
650+  92C7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  92C7
652+  92C7 2A A8 85     Reinicio ld hl,(Posicion_inicio)
653+  92CA 22 98 85     	ld (Posicion_actual),hl
654+  92CD C9           	ret
# file closed: Direcciones.asm
841   92CE              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  92CE              ;	12/12/22
  2+  92CE              ;
  3+  92CE              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  92CE              ;	Fila superior "0", Columna izquierda "0".
  5+  92CE              ;
  6+  92CE              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  92CE              ;
  8+  92CE              ;	Modifica: A
  9+  92CE
 10+  92CE C5           Genera_coordenadas push bc
 11+  92CF E5           	push hl
 12+  92D0 2A 98 85     	ld hl,(Posicion_actual)
 13+  92D3 7D           	ld a,l
 14+  92D4 E6 1F        	and $1f
 15+  92D6 32 9C 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  92D9 CD 9C 8F     	call calcula_tercio
 17+  92DC 47           	ld b,a
 18+  92DD 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  92DE 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  92E0 7D           	ld a,l
 21+  92E1 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  92E3 28 05        	jr z,2F
 23+  92E5 0C           1 inc c
 24+  92E6 D6 20        	sub 32
 25+  92E8 20 FB        	jr nz,1B
 26+  92EA 0C           2 inc c
 27+  92EB 04           	inc b
 28+  92EC 05           	dec b
 29+  92ED 28 04        	jr z,3F
 30+  92EF 3E E0        	ld a,$e0
 31+  92F1 10 F2        	djnz 1B
 32+  92F3 79           3 ld a,c
 33+  92F4 3D           	dec a
 34+  92F5 32 9D 85     	ld (Coordenada_y),a
 35+  92F8 E1           	pop hl
 36+  92F9 C1           	pop bc
 37+  92FA C9           	ret
# file closed: Genera_coordenadas.asm
842   92FB              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  92FB
  2+  92FB
  3+  92FB              ;   11/8/22
  4+  92FB              ;
  5+  92FB              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  92FB              ;
  7+  92FB              ;   Mov_obj.asm
  8+  92FB              ;
  9+  92FB              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  92FB              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  92FB              ;
 12+  92FB              ;   Codificación:
 13+  92FB              ;
 14+  92FB              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  92FB
 16+  92FB              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  92FB
 18+  92FB 02 40 00     Arriba db 2,%01000000,0
 19+  92FE 02 80 00     Abajo db 2,%10000000,0
 20+  9301 02 20 00     Derecha db 2,%00100000,0
 21+  9304 02 10 00     Izquierda db 2,%00010000,0
 22+  9307 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  930B 60 42 60 40
 22+  930F 63
 23+  9310 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9314 22 A3 80 A0
 24+  9318 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  931C 84 A0 83 A0
 25+  9320 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9324 80 A3 22 A0
 26+  9328 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  932C 40 60 42 60
 27+  9330 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9334 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  9338 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  933C 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  9340 84
 31+  9341 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  9345 84 00
 32+  9347 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  934B 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  934F 1F 1F 1F 1F
 34+  9353 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9357 1F 1F 1F 1F
 34+  935B 1F
 35+  935C 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  9360 2F 2F 2F 2F
 35+  9364 2F 2F
 36+  9366 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  936A 2F 2F 00
 37+  936D
 38+  936D
 39+  936D              ; ----- ----- ----- ----- -----
 40+  936D
 41+  936D 4B 93        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  936F 47 93        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  9371 04 93        Indice_mov_Izquierda defw Izquierda
 44+  9373 01 93        Indice_mov_Derecha defw Derecha
 45+  9375 FE 92        Indice_mov_Abajo defw Abajo
 46+  9377 FB 92        Indice_mov_Arriba defw Arriba
 47+  9379 38 93        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  937B 3C 93        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  937D 34 93        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  937F 41 93        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  9381 07 93        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  9383              ; ----- ----- ----- ----- -----
 53+  9383
 54+  9383 3A C9 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9386 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9387 28 02            jr z,1F
 57+  9389 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  938B 3A CA 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  938E C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  9390 32 CA 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  9393              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  9393 2A C7 85         ld hl,(Puntero_mov)
 63+  9396 7E               ld a,(hl)
 64+  9397 32 C9 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  939A 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  939B 22 C7 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  939E
 68+  939E 3A CB 85     Decoder ld a,(Repetimos_db)
 69+  93A1 A7               and a
 70+  93A2 20 0C            jr nz,12F
 71+  93A4 2A C7 85         ld hl,(Puntero_mov)
 72+  93A7 7E               ld a,(hl)
 73+  93A8 A7               and a
 74+  93A9 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  93AB E6 0F            and $0f
 76+  93AD 32 CB 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  93B0              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  93B0 2A C7 85     12 ld hl,(Puntero_mov)
 79+  93B3 CB 7E            bit 7,(hl)
 80+  93B5 28 03            jr z,2F
 81+  93B7 CD BA 8F         call Mov_down
 82+  93BA 2A C7 85     2 ld hl, (Puntero_mov)
 83+  93BD CB 76            bit 6,(hl)
 84+  93BF 28 03            jr z,3F
 85+  93C1 CD E8 8F         call Mov_up
 86+  93C4 2A C7 85     3 ld hl, (Puntero_mov)
 87+  93C7 CB 6E            bit 5,(hl)
 88+  93C9 28 03            jr z,4F
 89+  93CB CD 16 90         call Mov_right
 90+  93CE 2A C7 85     4 ld hl, (Puntero_mov)
 91+  93D1 CB 66            bit 4,(hl)
 92+  93D3 28 03            jr z,5F
 93+  93D5 CD 34 91         call Mov_left
 94+  93D8
 95+  93D8              ; ---------- --------- --------- ---------- ----------
 96+  93D8
 97+  93D8 3A CB 85     5 ld a,(Repetimos_db)
 98+  93DB A7               and a
 99+  93DC 28 07            jr z,6F
100+  93DE 3D               dec a
101+  93DF 32 CB 85         ld (Repetimos_db),a
102+  93E2 28 01            jr z,6f
103+  93E4 C9           11 ret
104+  93E5 21 C9 85     6 ld hl,Contador_db_mov
105+  93E8 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  93E9 2A C7 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  93EC 23               inc hl
108+  93ED 22 C7 85         ld (Puntero_mov),hl
109+  93F0 18 F2            jr 11B
110+  93F2 2A C5 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  93F5 3A CA 85         ld a,(Incrementa_puntero)
112+  93F8 47               ld b,a
113+  93F9 23           8 inc hl
114+  93FA 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  93FC 5E               ld e,(hl)
116+  93FD 23               inc hl
117+  93FE 56               ld d,(hl)
118+  93FF EB               ex de,hl
119+  9400 22 C7 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9403 18 DF            jr 11B
121+  9405
122+  9405              ; ---------- --------- --------- ---------- ----------
123+  9405              ;
124+  9405              ;   11/8/22
125+  9405              ;
126+  9405              ;   Prepara_Puntero_mov
127+  9405
128+  9405 E5           Prepara_Puntero_mov push hl
129+  9406 D5               push de
130+  9407 2A C5 85         ld hl,(Puntero_indice_mov)
131+  940A 5E               ld e,(hl)
132+  940B 23               inc hl
133+  940C 56               ld d,(hl)
134+  940D EB               ex de,hl
135+  940E 22 C7 85         ld (Puntero_mov),hl
136+  9411 D1               pop de
137+  9412 E1               pop hl
138+  9413 C9               ret
139+  9414
140+  9414              ; ---------- --------- --------- ---------- ----------
141+  9414              ;
142+  9414              ;   11/8/22
143+  9414              ;
144+  9414              ;   Reinicia_el_movimiento
145+  9414
146+  9414 CD 05 94     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9417 AF               xor a
148+  9418 32 C9 85         ld (Contador_db_mov),a
149+  941B 32 CA 85         ld (Incrementa_puntero),a
150+  941E
151+  941E              ;    jr $
152+  941E
153+  941E C3 83 93         jp Movimiento
154+  9421 C9               ret
155+  9422              ; ---------- --------- --------- ---------- ----------
156+  9422
157+  9422
158+  9422
159+  9422
160+  9422
161+  9422
162+  9422
163+  9422
164+  9422
165+  9422
166+  9422
167+  9422
168+  9422
169+  9422
170+  9422
171+  9422
172+  9422
173+  9422
# file closed: Patrones_de_mov.asm
843   9422              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9422              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9422              ;
  3+  9422              ;	3/1/23
  4+  9422              ;
  5+  9422              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9422
  7+  9422              ;	ADC HL,SP	LD (addr),SP
  8+  9422              ;	ADD HL,SP	LD SP,(addr)
  9+  9422              ;	ADD IX,SP	LD SP,nn
 10+  9422              ; 	ADD IY,SP	LD SP,HL
 11+  9422              ;				LD SP,IX
 12+  9422              ;	DEC SP		LD SP,IY
 13+  9422
 14+  9422              ;	EX (SP),HL
 15+  9422              ;	EX (SP),IX
 16+  9422              ;	EX (SP),IY
 17+  9422
 18+  9422              ;	INC SP
 19+  9422
 20+  9422
 21+  9422                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero objeto.
 27+  7FA0              ;   $7002 / 03 ..... Puntero de impresion.
 28+  7FA0              ;   $7004 / 05 ..... Rutina de impresión.
 29+  7FA0
 30+  7FA0 ED 73 D9 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 A0 7F         ld sp,Guarda_foto_registros                   ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 3A D0 85         ld a,(Ctrl_1)
 38+  7FAF CB 47            bit 0,a
 39+  7FB1 28 05            jr z,2F
 40+  7FB3
 41+  7FB3 2A DF 85         ld hl,(Stack_snapshot_disparos)
 42+  7FB6 18 03            jr 4F
 43+  7FB8
 44+  7FB8 2A DD 85     2 ld hl,(Stack_snapshot)                          ; Album_de_fotos contiene la imagen de los registros implicados en el_
 45+  7FBB 06 03        4 ld b,3                                          ; _correcto funcionamiento de las distintas rutinas de impresión.
 46+  7FBD
 47+  7FBD D1           1 pop de
 48+  7FBE 73               ld (hl),e
 49+  7FBF 23               inc hl
 50+  7FC0 72               ld (hl),d
 51+  7FC1 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 52+  7FC2 10 F9            djnz 1B
 53+  7FC4
 54+  7FC4 A7               and a
 55+  7FC5 28 05            jr z,5F
 56+  7FC7
 57+  7FC7 22 DF 85         ld (Stack_snapshot_disparos),hl
 58+  7FCA 18 03            jr 6F
 59+  7FCC
 60+  7FCC 22 DD 85     5 ld (Stack_snapshot),hl
 61+  7FCF ED 7B D9 85  6 ld sp,(Stack)
 62+  7FD3
 63+  7FD3 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 64+  7FD4
 65+  7FD4
# file closed: Guarda_foto_registros.asm
844   7FD4
845   7FD4              	SAVESNA "Pruebas.sna", START
846   7FD4
847   7FD4
848   7FD4
# file closed: Banco_de_pruebas.asm
