# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 41 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000
 11+  8000 08 80        Indice_disparo defw Disparo_0
 12+  8002 0C 80        	defw Disparo_f9
 13+  8004 10 80        	defw Disparo_fb
 14+  8006 14 80        	defw Disparo_fd
 15+  8008
 16+  8008              ; Disparo (CTRL_DESPLZ)="0".
 17+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 18+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 19+  800C 00 60 00 60  Disparo_f9 DEFB $00,$60,$00,$60
 20+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 21+  8010 18 00 18 00  Disparo_fb DEFB $18,$00,$18,$00
 22+  8014              ; Disparo (CTRL_DESPLZ)="fd"
 23+  8014 06 00 06 00  Disparo_fd DEFB $06,$00,$06,$00
 24+  8018
 25+  8018              ; ----------------------------------------------------------------------------------------
 26+  8018
 27+  8018              ; Badsat_izq. 2x2.
 28+  8018
 29+  8018 28 80        Indice_Badsat_izq defw Badsat_izquierda
 30+  801A 68 81        	defw Badsat_izq_fe
 31+  801C 38 81        	defw Badsat_izq_fd
 32+  801E 08 81        	defw Badsat_izq_fc
 33+  8020 D8 80        	defw Badsat_izq_fb
 34+  8022 A8 80        	defw Badsat_izq_fa
 35+  8024 78 80        	defw Badsat_izq_f9
 36+  8026 48 80        	defw Badsat_izq_f8
 37+  8028
 38+  8028 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 38+  802C 02 2A 02 55
 39+  8030 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 39+  8034 7F E8 03 60
 40+  8038 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 40+  803C 2B E8 54 40
 41+  8040 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 41+  8044 28 00 10 00
 42+  8048
 43+  8048 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 43+  804C 0A 00 01 15
 44+  8050 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 44+  8054 01 55 00 01
 45+  8058 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 45+  805C 00 01 B0 00
 46+  8060 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 46+  8064 FC 00 15 F4
 47+  8068 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 47+  806C 55 30 00 2A
 48+  8070 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 48+  8074 00 08 00 00
 49+  8078
 50+  8078 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 50+  807C 85 00 00 8A
 51+  8080 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 51+  8084 00 AA 80 00
 52+  8088 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 52+  808C 00 00 D8 00
 53+  8090 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 53+  8094 FE 00 0A FA
 54+  8098 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 54+  809C 2A 98 00 15
 55+  80A0 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 55+  80A4 00 04 00 00
 56+  80A8
 57+  80A8 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 57+  80AC 42 80 00 45
 58+  80B0 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 58+  80B4 00 55 40 00
 59+  80B8 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 59+  80BC 00 00 6C 00
 60+  80C0 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 60+  80C4 FF 00 05 7D
 61+  80C8 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 61+  80CC 15 4C 00 0A
 62+  80D0 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 62+  80D4 00 02 00 00
 63+  80D8
 64+  80D8 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 64+  80DC 21 40 00 22
 65+  80E0 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 65+  80E4 00 2A A0 00
 66+  80E8 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 66+  80EC 80 00 36 00
 67+  80F0 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 67+  80F4 7F 80 02 BE
 68+  80F8 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 68+  80FC 0A A6 00 05
 69+  8100 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 69+  8104 00 01 00 00
 70+  8108
 71+  8108 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 71+  810C 10 A0 00 11
 72+  8110 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 72+  8114 00 15 50 00
 73+  8118 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 73+  811C 40 00 1B 00
 74+  8120 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 74+  8124 BF C0 01 5F
 75+  8128 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 75+  812C 05 53 00 02
 76+  8130 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 76+  8134 00 00 80 00
 77+  8138
 78+  8138 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 78+  813C 08 50 00 08
 79+  8140 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 79+  8144 00 0A A8 00
 80+  8148 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 80+  814C A0 00 0D 80
 81+  8150 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 81+  8154 5F F8 00 AF
 82+  8158 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 82+  815C 02 A9 00 01
 83+  8160 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 83+  8164 00 00 40 00
 84+  8168
 85+  8168 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 85+  816C 04 28 00 04
 86+  8170 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 86+  8174 00 05 54 00
 87+  8178 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 87+  817C D0 00 06 C0
 88+  8180 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 88+  8184 2F FC 00 57
 89+  8188 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 89+  818C 01 54 80 00
 90+  8190 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 90+  8194 00 00 20 00
 91+  8198
 92+  8198
 93+  8198 A8 81        Indice_Badsat_der defw Badsat_derecha
 94+  819A C8 81        	defw Badsat_der_f8
 95+  819C F8 81        	defw Badsat_der_f9
 96+  819E 28 82        	defw Badsat_der_fa
 97+  81A0 58 82        	defw Badsat_der_fb
 98+  81A2 88 82        	defw Badsat_der_fc
 99+  81A4 B8 82        	defw Badsat_der_fd
100+  81A6 E8 82        	defw Badsat_der_fe
101+  81A8
102+  81A8 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
102+  81AC 54 40 AA 40
103+  81B0 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
103+  81B4 17 FE 06 C0
104+  81B8 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
104+  81BC 17 D4 02 2A
105+  81C0 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
105+  81C4 00 14 00 08
106+  81C8
107+  81C8 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
107+  81CC 20 00 2A 20
108+  81D0 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
108+  81D4 2A A0 00 15
109+  81D8 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
109+  81DC 00 03 60 00
110+  81E0 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
110+  81E4 F4 00 0B EA
111+  81E8 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
111+  81EC 03 2A 80 00
112+  81F0 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
112+  81F4 00 00 04 00
113+  81F8
114+  81F8 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
114+  81FC 10 00 15 10
115+  8200 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
115+  8204 15 50 00 0A
116+  8208 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
116+  820C 80 01 B0 00
117+  8210 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
117+  8214 FA 00 05 F5
118+  8218 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
118+  821C 01 95 40 00
119+  8220 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
119+  8224 00 00 02 00
120+  8228
121+  8228 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
121+  822C 08 00 0A 88
122+  8230 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
122+  8234 0A A8 00 05
123+  8238 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
123+  823C C0 00 D8 00
124+  8240 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
124+  8244 FD 00 02 FA
125+  8248 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
125+  824C 00 CA A0 00
126+  8250 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
126+  8254 80 00 01 00
127+  8258
128+  8258 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
128+  825C 84 00 05 44
129+  8260 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
129+  8264 05 54 00 02
130+  8268 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
130+  826C E0 00 6C 00
131+  8270 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
131+  8274 FE 80 01 7D
132+  8278 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
132+  827C 00 65 50 00
133+  8280 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
133+  8284 40 00 00 80
134+  8288
135+  8288 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
135+  828C 42 00 02 A2
136+  8290 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
136+  8294 02 AA 00 01
137+  8298 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
137+  829C F0 00 36 00
138+  82A0 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
138+  82A4 FF 40 00 BE
139+  82A8 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
139+  82AC 00 32 A8 00
140+  82B0 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
140+  82B4 A0 00 00 40
141+  82B8
142+  82B8 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
142+  82BC A1 00 01 51
143+  82C0 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
143+  82C4 01 55 00 00
144+  82C8 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
144+  82CC F8 00 1B 00
145+  82D0 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
145+  82D4 FF A0 00 1F
146+  82D8 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
146+  82DC 00 09 54 00
147+  82E0 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
147+  82E4 50 00 00 20
148+  82E8
149+  82E8 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
149+  82EC 50 80 00 A8
150+  82F0 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
150+  82F4 00 AA 80 00
151+  82F8 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
151+  82FC FC 00 0D 80
152+  8300 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
152+  8304 FF D0 00 0F
153+  8308 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
153+  830C 00 04 AA 00
154+  8310 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
154+  8314 28 00 00 10
155+  8318
156+  8318              ; ----------------------------------------------------------------------------------------
157+  8318
158+  8318              ; Amadeus. 2x2.
159+  8318
160+  8318 38 83        Indice_Amadeus_der defw Amadeus
161+  831A 00 00        	defw 0
162+  831C 58 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
163+  831E 00 00        	defw 0
164+  8320 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
165+  8322 00 00        	defw 0
166+  8324 B8 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
167+  8326 00 00        	defw 0	 								; (Fín de índice).
168+  8328
169+  8328 38 83        Indice_Amadeus_izq defw Amadeus
170+  832A 00 00        	defw 0
171+  832C B8 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
172+  832E 00 00        	defw 0
173+  8330 88 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
174+  8332 00 00        	defw 0
175+  8334 58 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
176+  8336 00 00        	defw 0	 								; (Fín de índice).
177+  8338
178+  8338 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
178+  833C 26 64 24 24
179+  8340 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
179+  8344 6F F6 67 E6
180+  8348 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
180+  834C F7 EF FF FF
181+  8350 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
181+  8354 8B D1 71 8E
182+  8358
183+  8358 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
183+  835C F1 00 09 99
184+  8360 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
184+  8364 0B 0D 00 1B
185+  8368 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
185+  836C 80 19 F9 80
186+  8370 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
186+  8374 F3 C0 3D FB
187+  8378 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
187+  837C 3E F7 C0 3E
188+  8380 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
188+  8384 40 1C 63 80
189+  8388
190+  8388 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
190+  838C 3C 40 02 66
191+  8390 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
191+  8394 02 C3 40 06
192+  8398 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
192+  839C 60 06 7E 60
193+  83A0 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
193+  83A4 3C F0 0F 7E
194+  83A8 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
194+  83AC 0F BD F0 0F
195+  83B0 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
195+  83B4 10 07 18 E0
196+  83B8
197+  83B8 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
197+  83BC 8F 10 00 99
198+  83C0 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
198+  83C4 00 B0 D0 01
199+  83C8 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
199+  83CC D8 01 9F 98
200+  83D0 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
200+  83D4 CF 3C 03 DF
201+  83D8 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
201+  83DC 03 EF 7C 03
202+  83E0 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
202+  83E4 44 01 C6 38
203+  83E8
204+  83E8              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83E8              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83E8
  2+  83E8              ; Base de datos de entidades e Índice.
  3+  83E8              ;
  4+  83E8              ; 17/02/23
  5+  83E8
  6+  83E8              ; Control. %00000001 00000001
  7+  83E8              ;
  8+  83E8              ;     [Bit0] ..... Impacto. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
  9+  83E8              ;                  _ hacen las entidades hacia abajo.
 10+  83E8              ;
 11+  83E8              ;     [Bit8] ..... Dirección. "1" Cuando se produce colisión al generar un disparo.
 12+  83E8
 13+  83E8 EE 83        Indice_de_disparos_Amadeus defw Disparo_1A
 14+  83EA F6 83        	defw Disparo_2A
 15+  83EC FE 83        	defw Disparo_3A
 16+  83EE
 17+  83EE 00 00        Disparo_1A defw 0									; Control.
 18+  83F0 00 00        	defw 0											; Puntero objeto.
 19+  83F2 00 00        	defw 0											; Puntero de impresión.
 20+  83F4 00 00        	defw 0											; Rutina de impresión.
 21+  83F6
 22+  83F6 00 00        Disparo_2A defw 0									; Control.
 23+  83F8 00 00        	defw 0											; Puntero objeto.
 24+  83FA 00 00        	defw 0											; Puntero de impresión.
 25+  83FC 00 00        	defw 0											; Rutina de impresión.
 26+  83FE
 27+  83FE 00 00        Disparo_3A defw 0
 28+  8400
 29+  8400 16 84        Indice_de_disparos_entidades defw Disparo_1
 30+  8402 1E 84        	defw Disparo_2
 31+  8404 26 84        	defw Disparo_3
 32+  8406 2E 84        	defw Disparo_4
 33+  8408 36 84        	defw Disparo_5
 34+  840A 3E 84        	defw Disparo_6
 35+  840C 46 84        	defw Disparo_7
 36+  840E 4E 84        	defw Disparo_8
 37+  8410 56 84        	defw Disparo_9
 38+  8412 5E 84        	defw Disparo_10
 39+  8414 66 84        	defw Disparo_11
 40+  8416
 41+  8416 00 00        Disparo_1 defw 0									; Control.
 42+  8418 00 00        	defw 0											; Puntero objeto.
 43+  841A 00 00        	defw 0											; Puntero de impresión.
 44+  841C 00 00        	defw 0											; Rutina de impresión.
 45+  841E
 46+  841E 00 00        Disparo_2 defw 0									; Control.
 47+  8420 00 00        	defw 0											; Puntero objeto.
 48+  8422 00 00        	defw 0											; Puntero de impresión.
 49+  8424 00 00        	defw 0											; Rutina de impresión.
 50+  8426
 51+  8426 00 00        Disparo_3 defw 0									; Control.
 52+  8428 00 00        	defw 0											; Puntero objeto.
 53+  842A 00 00        	defw 0											; Puntero de impresión.
 54+  842C 00 00        	defw 0											; Rutina de impresión.
 55+  842E
 56+  842E 00 00        Disparo_4 defw 0									; Control.
 57+  8430 00 00        	defw 0											; Puntero objeto.
 58+  8432 00 00        	defw 0											; Puntero de impresión.
 59+  8434 00 00        	defw 0											; Rutina de impresión.
 60+  8436
 61+  8436 00 00        Disparo_5 defw 0									; Control.
 62+  8438 00 00        	defw 0											; Puntero objeto.
 63+  843A 00 00        	defw 0											; Puntero de impresión.
 64+  843C 00 00        	defw 0
 65+  843E
 66+  843E 00 00        Disparo_6 defw 0									; Control.
 67+  8440 00 00        	defw 0											; Puntero objeto.
 68+  8442 00 00        	defw 0											; Puntero de impresión.
 69+  8444 00 00        	defw 0											; Rutina de impresión.
 70+  8446
 71+  8446 00 00        Disparo_7 defw 0									; Control.
 72+  8448 00 00        	defw 0											; Puntero objeto.
 73+  844A 00 00        	defw 0											; Puntero de impresión.
 74+  844C 00 00        	defw 0											; Rutina de impresión.
 75+  844E
 76+  844E 00 00        Disparo_8 defw 0									; Control.
 77+  8450 00 00        	defw 0											; Puntero objeto.
 78+  8452 00 00        	defw 0											; Puntero de impresión.
 79+  8454 00 00        	defw 0											; Rutina de impresión.
 80+  8456
 81+  8456 00 00        Disparo_9 defw 0									; Control.
 82+  8458 00 00        	defw 0											; Puntero objeto.
 83+  845A 00 00        	defw 0											; Puntero de impresión.
 84+  845C 00 00        	defw 0											; Rutina de impresión.
 85+  845E
 86+  845E 00 00        Disparo_10 defw 0									; Control.
 87+  8460 00 00        	defw 0											; Puntero objeto.
 88+  8462 00 00        	defw 0											; Puntero de impresión.
 89+  8464 00 00        	defw 0											; Rutina de impresión.
 90+  8466
 91+  8466 00 00        Disparo_11 defw 0
 92+  8468
 93+  8468              ; -------------------------------------------------------------------------------------
 94+  8468
 95+  8468              Indice_de_entidades									; 58 Bytes por entidad.
 96+  8468
 97+  8468 AE 84        	defw Entidad_1
 98+  846A E8 84        	defw Entidad_2
 99+  846C 22 85        	defw Entidad_3
100+  846E 5C 85        	defw Entidad_4
101+  8470              ;	...
102+  8470              ;	...
103+  8470              ;	+ entidades ...
104+  8470
105+  8470 00 00        	defw 0
106+  8472 00 00        	defw 0
107+  8474
108+  8474              ; ---------- ---------- ---------- ---------- ----------
109+  8474
110+  8474 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
111+  8476 00 00        	defw 0		 									; (Posicion_actual).
112+  8478 00 00        	defw 0	 										; (Puntero_objeto).
113+  847A 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
114+  847D
115+  847D 05           	db %00000101									; (Attr).
116+  847E
117+  847E 18 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
118+  8480 28 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
119+  8482 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
120+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
121+  8486
122+  8486 D0 50        	defw $50d0										; (Posicion_inicio).
123+  8488 04           	db 4 											; (Cuad_objeto).
124+  8489
125+  8489 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
126+  848D
127+  848D 00 00        	db 0,0											; Variables_de_borrado
128+  848F 00 00        	defw 0											;	" " " " " " "
129+  8491 00 00        	defw 0											;	" " " " " " "
130+  8493 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
131+  8497
132+  8497 00 00        	db 0,0											; Variables_de_pintado
133+  8499 00 00        	defw 0											;	" " " " " " "
134+  849B 00 00        	defw 0											;	" " " " " " "
135+  849D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
136+  84A1
137+  84A1 40 00        	db $40,0										; (Ctrl_0) / (Obj_dibujado).
138+  84A3
139+  84A3 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
140+  84A7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
141+  84AA
142+  84AA 00           	db 0 											; (Columnas).
143+  84AB 00 00        	defw 0											; (Limite_horizontal).
144+  84AD 00           	db 0											; (Limite_vertical).
145+  84AE
146+  84AE              ; ---------- ---------- ---------- ---------- ----------
147+  84AE
148+  84AE 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
149+  84B0 00 00        	defw 0											; (Posicion_actual).
150+  84B2 00 00        	defw 0 											; (Puntero_objeto).
151+  84B4 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
152+  84B7
153+  84B7 00           	db %00000000 									; (Attr).
154+  84B8
155+  84B8 00 00        	defw 0											; (Indice_Sprite_der).
156+  84BA 00 00        	defw 0											; (Indice_Sprite_izq).
157+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_der).
158+  84BE 00 00        	defw 0											; (Puntero_DESPLZ_izq).
159+  84C0
160+  84C0 00 00        	defw 0											; (Posicion_inicio).
161+  84C2 00           	db 0											; (Cuad_objeto).
162+  84C3
163+  84C3 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
164+  84C7
165+  84C7 00 00        	db 0,0										    ; Variables_de_borrado
166+  84C9 00 00        	defw 0											;	" " " " " " "
167+  84CB 00 00        	defw 0											;	" " " " " " "
168+  84CD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
169+  84D1
170+  84D1 00 00        	db 0,0											; Variables_de_pintado
171+  84D3 00 00        	defw 0											;	" " " " " " "
172+  84D5 00 00        	defw 0											;	" " " " " " "
173+  84D7 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
174+  84DB
175+  84DB 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
176+  84DD
177+  84DD 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
178+  84E1 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
179+  84E4
180+  84E4 00           	db 0 											; (Columnas).
181+  84E5 00 00        	defw 0											; (Limite_horizontal).
182+  84E7 00           	db 0											; (Limite_vertical).
183+  84E8
184+  84E8              ; ---------- ---------- ---------- ---------- ----------
185+  84E8
186+  84E8 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
187+  84EA 00 00        	defw 0                                          ; (Posicion_actual).
188+  84EC 00 00        	defw 0											; (Puntero_objeto).
189+  84EE 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
190+  84F1
191+  84F1 02           	db %00000010									; (Attr).
192+  84F2
193+  84F2 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
194+  84F4 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
195+  84F6 00 00        	defw 0											; (Puntero_DESPLZ_der).
196+  84F8 00 00        	defw 0											; (Puntero_DESPLZ_izq).
197+  84FA
198+  84FA 7E 47        	defw $477e                                      ; (Posicion_inicio).
199+  84FC 02           	db 2											; (Cuad_objeto).
200+  84FD
201+  84FD 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
202+  8501
203+  8501 00 00        	db 0,0											; Variables_de_borrado
204+  8503 00 00        	defw 0										 	;	" " " " " " "
205+  8505 00 00        	defw 0											;	" " " " " " "
206+  8507 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
207+  850B
208+  850B 00 00        	db 0,0											; Variables_de_pintado
209+  850D 00 00        	defw 0											;	" " " " " " "
210+  850F 00 00        	defw 0											;	" " " " " " "
211+  8511 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
212+  8515
213+  8515 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
214+  8517
215+  8517 80 93 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
216+  851B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
217+  851E
218+  851E 00           	db 0 											; (Columnas).
219+  851F 00 00        	defw 0											; (Limite_horizontal).
220+  8521 00           	db 0											; (Limite_vertical).
221+  8522
222+  8522              ; ---------- ---------- ---------- ---------- ----------
223+  8522
224+  8522 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
225+  8524 00 00        	defw 0                                          ; (Posicion_actual).
226+  8526 00 00        	defw 0											; (Puntero_objeto).
227+  8528 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
228+  852B
229+  852B 04           	db %00000100									; (Attr).
230+  852C
231+  852C 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
232+  852E 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
233+  8530
234+  8530 00 00        	defw 0											; (Puntero_DESPLZ_der).
235+  8532 00 00        	defw 0											; (Puntero_DESPLZ_izq).
236+  8534
237+  8534 A1 47        	defw $47a1                                      ; (Posicion_inicio).
238+  8536 01           	db 1											; (Cuad_objeto).
239+  8537
240+  8537 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
241+  853B
242+  853B 00 00        	db 0,0											; Variables_de_borrado
243+  853D 00 00        	defw 0										 	;	" " " " " " "
244+  853F 00 00        	defw 0											;	" " " " " " "
245+  8541 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
246+  8545
247+  8545 00 00        	db 0,0											; Variables_de_pintado
248+  8547 00 00        	defw 0											;	" " " " " " "
249+  8549 00 00        	defw 0											;	" " " " " " "
250+  854B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
251+  854F
252+  854F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
253+  8551
254+  8551 82 93 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
255+  8555 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
256+  8558
257+  8558 00           	db 0 											; (Columnas).
258+  8559 00 00        	defw 0											; (Limite_horizontal).
259+  855B 00           	db 0											; (Limite_vertical).
260+  855C
261+  855C              ; ---------- ---------- ---------- ---------- ----------
262+  855C
263+  855C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
264+  855E 00 00        	defw 0                                          ; (Posicion_actual).
265+  8560 00 00        	defw 0 											; (Puntero_objeto).
266+  8562 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
267+  8565
268+  8565 01           	db %00000001									; (Attr).
269+  8566
270+  8566 98 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
271+  8568 18 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
272+  856A
273+  856A 00 00        	defw 0											; (Puntero_DESPLZ_der).
274+  856C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
275+  856E
276+  856E BE 47        	defw $47be                                      ; (Posicion_inicio).
277+  8570 00           	db 0											; (Cuad_objeto).
278+  8571
279+  8571 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
280+  8575
281+  8575 00 00        	db 0,0											; Variables_de_borrado
282+  8577 00 00        	defw 0										 	;	" " " " " " "
283+  8579 00 00        	defw 0											;	" " " " " " "
284+  857B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
285+  857F
286+  857F 00 00        	db 0,0											; Variables_de_pintado
287+  8581 00 00        	defw 0											;	" " " " " " "
288+  8583 00 00        	defw 0											;	" " " " " " "
289+  8585 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
290+  8589
291+  8589 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
292+  858B
293+  858B 72 93 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
294+  858F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
295+  8592
296+  8592 00           	db 0 											; (Columnas).
297+  8593 00 00        	defw 0											; (Limite_horizontal).
298+  8595 00           	db 0											; (Limite_vertical).
299+  8596
# file closed: Entidades_y_disparos.asm
 21   8596
 22   8596              ; ******************************************************************************************************************************************************************************************
 23   8596              ; Constantes.
 24   8596              ; ******************************************************************************************************************************************************************************************
 25   8596              ;
 26   8596              ; 8/11/22
 27   8596              ;
 28   8596              ; Constantes generales.
 29   8596              ;
 30   8596
 31   8596              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8596              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8596              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8596              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8596
 36   8596              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 37   8596              ;                                   				    ; _de los registros y las llamadas a las rutinas de impresión.
 38   8596              ;                               				        ; De momento situamos este almacén en $7000.
 39   8596              Album_de_fotos_disparos equ $7060						; En (Album_de_fotos_disparos) vamos a ir almacenando los valores_
 40   8596              ;                                   				    ; _de los registros y llamadas a las distintas rutinas de impresión para poder pintar `disparos´.
 41   8596              ;                               				        ; De momento situamos este almacén en $7060.
 42   8596
 43   8596              ; ******************************************************************************************************************************************************************************************
 44   8596              ; Variables.
 45   8596              ; ******************************************************************************************************************************************************************************************
 46   8596              ;
 47   8596              ; 10/11/22
 48   8596              ;
 49   8596              ; Variables de DRAW. (Motor principal).
 50   8596              ;
 51   8596              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 52   8596
 53   8596 02           Filas db 2												; Filas. [DRAW]
 54   8597 02           Columns db 2  											; Nº de columnas. [DRAW]
 55   8598 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 56   859A 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 57   859C 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 58   859D 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 59   859E
 60   859E              ; ---------- ---------- ---------- ---------;      ;---------
 61   859E
 62   859E 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 63   859F              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 64   859F              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 65   859F 04           Attr db %00000100										; Atributos de la entidad:
 66   85A0
 67   85A0              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   85A0              ;
 69   85A0              ;	COLORES: 0 ..... NEGRO
 70   85A0              ;    		 1 ..... AZUL
 71   85A0              ; 			 2 ..... ROJO
 72   85A0              ;			 3 ..... MAGENTA
 73   85A0              ; 			 4 ..... VERDE
 74   85A0              ; 			 5 ..... CIAN
 75   85A0              ;			 6 ..... AMARILLO
 76   85A0              ; 			 7 ..... BLANCO
 77   85A0
 78   85A0 98 81        Indice_Sprite_der defw Indice_Badsat_der
 79   85A2 18 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   85A4 00 00        Puntero_DESPLZ_der defw 0
 81   85A6 00 00        Puntero_DESPLZ_izq defw 0
 82   85A8
 83   85A8 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   85AA 02           Cuad_objeto db 2										; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   85AB
 86   85AB              ; Variables de objeto. (Características).
 87   85AB
 88   85AB 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   85AC 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   85AD 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   85AE 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   85AF
 93   85AF 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   85B1 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   85B3 00 00        	defw 0
 96   85B5 00 00 00 00  	db 0,0,0,0
 97   85B9
 98   85B9 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   85BB 00 00        	defw 0
100   85BD 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   85BF 00 00 00 00  	db 0,0,0,0
102   85C3
103   85C3              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   85C3
105   85C3 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   85C4              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   85C4              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   85C4              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   85C4              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   85C4              ;
111   85C4              ; 														DESCRIPCIÖN:
112   85C4              ;
113   85C4              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   85C4              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   85C4              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   85C4              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   85C4              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   85C4              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   85C4              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   85C4              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   85C4              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   85C4              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   85C4              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   85C4              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   85C4              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   85C4              ;
127   85C4              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   85C4              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   85C4              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   85C4
131   85C4 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   85C5
133   85C5              ; Movimiento.
134   85C5
135   85C5 6E 93        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
136   85C7 00 00        Puntero_mov defw 0
137   85C9 00           Contador_db_mov db 0
138   85CA 00           Incrementa_puntero db 0
139   85CB 00           Repetimos_db db 0
140   85CC
141   85CC              ; Variables de funcionamiento. [DRAW].
142   85CC
143   85CC 00           Columnas db 0
144   85CD 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
145   85CF              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
146   85CF 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   85D0
148   85D0              ; 59 Bytes por entidad.
149   85D0              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
150   85D0              ;					         		---------;      ;---------
151   85D0
152   85D0
153   85D0              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
154   85D0
155   85D0 00           Ctrl_1 db 0 											; 2º Byte de control de propósito general.
156   85D1
157   85D1              ;														DESCRIPCIÓN:
158   85D1              ;
159   85D1              ;														BIT 0, La rutina de generación de disparos, [Genera_disparo], pone este bit a "1" para indicar a la_
160   85D1              ;															_ rutina [Guarda_foto_registros] que los datos a guardar pertenecen a un disparo y no a una entidad,_
161   85D1              ;															_ por lo tanto hemos de almacenarlos en `Album_de_fotos_disparos´ en lugar de `Album_de_fotos´.
162   85D1              ; Gestión de ENTIDADES.
163   85D1
164   85D1 00 00        Puntero_store_entidades defw 0
165   85D3 00 00        Puntero_restore_entidades defw 0
166   85D5 00 00        Indice_restore defw 0
167   85D7 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
168   85D8 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
169   85D9              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
170   85D9              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
171   85D9              ;														; _ (Numero_de_malotes)="0".
172   85D9 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
173   85DB              ;														; _variable para almacenar lo posición del puntero_
174   85DB              ; 														; _de pila, SP.
175   85DB 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
176   85DD              ;														; La utiliza la rutina [Extrae_foto_registros].
177   85DD 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
178   85DF              ;														; _el snapshot de los registros de la siguiente entidad.
179   85DF              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
180   85DF 60 70        Stack_snapshot_disparos defw Album_de_fotos_disparos	; Puntero que indica la posición de memoria donde vamos a guardar_
181   85E1              ;														; _el snapshot de los registros del siguiente disparo.
182   85E1              ;														; Inicialmente está situado en la posición $7060, Album_de_fotos_disparos.
183   85E1
184   85E1              ; Gestión de Disparos.
185   85E1
186   85E1 00           Numero_de_disparotes db 0
187   85E2 00 84        Stack_guns defw Indice_de_disparos_entidades			; Este puntero se irá desplazando por el índice de disparos_
188   85E4              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
189   85E4              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
190   85E4 00 00        Puntero_DESPLZ_DISPARO_ENTIDADES defw 0
191   85E6 00 00        Puntero_DESPLZ_DISPARO_AMADEUS defw 0
192   85E8
193   85E8
194   85E8
195   85E8              ; Gestión de FRAMES.
196   85E8
197   85E8 00           Switch db 0
198   85E9
199   85E9              ; Variables de Raster y localización en pantalla.
200   85E9
201   85E9 00 FF        Temp_Raster defw $ff00
202   85EB
203   85EB              ; Rutina principal *************************************************************************************************************************************************************************
204   85EB              ;
205   85EB              ;	14/11/22
206   85EB
207   85EB 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
208   85EE
209   85EE 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
210   85F0 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
211   85F2 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
212   85F4 F3           	DI
213   85F5
214   85F5 3E 01        	ld a,1
215   85F7 D3 FE        	out ($fe),a
216   85F9
217   85F9 3E 07        	ld a,%00000111
218   85FB CD A7 8F     	call Cls
219   85FE
220   85FE              ;	call Pinta_FILAS
221   85FE
222   85FE CD 37 88     	call Pulsa_ENTER
223   8601
224   8601 21 D7 85     	ld hl,Numero_de_entidades
225   8604 46           	ld b,(hl)
226   8605 04           	inc b
227   8606 05           	dec b
228   8607 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
229   8609
230   8609              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
231   8609              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
232   8609              ;	Pintamos el resto de entidades:
233   8609
234   8609 CD 30 87     	call Inicia_punteros_de_entidades
235   860C
236   860C              ;	INICIA ENTIDADES!!!!!
237   860C
238   860C C5           1 push bc  												; Guardo el contador de entidades.
239   860D CD 8A 87      	call Inicia_Puntero_objeto
240   8610 CD F7 89     	call Draw
241   8613 CD A0 7F     	call Guarda_foto_registros
242   8616 CD D2 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
243   8619 C1           	pop bc
244   861A 10 F0        	djnz 1B  											; Decremento el contador de entidades.
245   861C
246   861C              ; 	INICIA AMADEUS!!!!!
247   861C
248   861C CD 13 88     3 call Restore_Amadeus
249   861F CD 8A 87     	call Inicia_Puntero_objeto
250   8622 CD F7 89     	call Draw
251   8625 CD A0 7F     	call Guarda_foto_registros
252   8628 CD 25 88     	call Store_Amadeus
253   862B
254   862B              ; Iniciamos los punteros de los índices de las dos bases de datos de disparo, (Amadeus/Entidades).
255   862B
256   862B CD 46 87     	call Inicia_Puntero_Disparo_Entidades
257   862E CD 4D 87     	call Inicia_Puntero_Disparo_Amadeus
258   8631
259   8631              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
260   8631
261   8631 CD 30 87     	call Inicia_punteros_de_entidades
262   8634 CD 01 88     	call Restore_Primera_entidad
263   8637
264   8637 3A D7 85     	ld a,(Numero_de_entidades)
265   863A 3C           	inc a
266   863B 32 D8 85     	ld (Numero_de_malotes),a
267   863E
268   863E FB           2 ei
269   863F 18 FD        	jr 2B
270   8641
271   8641              ; -----------------------------------------------------------------------------------
272   8641
273   8641              Frame
274   8641
275   8641              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
276   8641              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
277   8641
278   8641 3E 02            ld a,2
279   8643 D3 FE            out ($fe),a
280   8645 CD FB 8C     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
281   8648 CD 34 8D     	call Extrae_foto_registros_disparos
282   864B 3E 01            ld a,1
283   864D D3 FE            out ($fe),a
284   864F
285   864F              ; ----------------------------------------------------------------------
286   864F
287   864F 21 00 70     	ld hl,Album_de_fotos
288   8652 22 DD 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
289   8655              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
290   8655 3A D7 85         ld a,(Numero_de_entidades)
291   8658 47               ld b,a
292   8659 A7           	and a
293   865A 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
294   865C
295   865C C5           2 push bc
296   865D CD A9 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
297   8660 3A C3 85     	ld a,(Ctrl_0)
298   8663 CB 67        	bit 4,a
299   8665 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
300   8667
301   8667              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
302   8667              ; Las entidades sólo generan disparo cuando se mueven.
303   8667              ; 16/02/23.
304   8667              ; [[[
305   8667 CD 6E 88     	call Detecta_disparo_entidad
306   866A              ; ]]]
307   866A CD F7 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
308   866D
309   866D 21 C3 85     1 ld hl,Ctrl_0
310   8670 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
311   8672 AF           	xor a
312   8673 32 C4 85     	ld (Obj_dibujado),a
313   8676 CD D2 87     	call Store_Restore_entidades
314   8679 C1           	pop bc
315   867A 10 E0        	djnz 2B
316   867C
317   867C              ; Tras la gestión de las entidades, ... AMADEUS.
318   867C
319   867C CD 13 88     4 call Restore_Amadeus
320   867F CD C8 86     	call Mov_Amadeus
321   8682 3A C3 85     	ld a,(Ctrl_0)
322   8685 CB 67        	bit 4,a
323   8687 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
324   8689 CD F7 86     	call Guarda_foto_entidad_a_pintar
325   868C
326   868C 21 C3 85     3 ld hl,Ctrl_0
327   868F CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
328   8691 AF           	xor a
329   8692 32 C4 85     	ld (Obj_dibujado),a
330   8695 CD 25 88     	call Store_Amadeus
331   8698
332   8698              ; -----
333   8698
334   8698 CD 30 87     	call Inicia_punteros_de_entidades
335   869B CD 01 88     	call Restore_Primera_entidad
336   869E
337   869E              ; Calculamos el nº de malotes y de disparotes para pintarlos nada más comenzar el siguiente FRAME.
338   869E
339   869E CD 54 87     	call Calcula_numero_de_malotes
340   86A1 CD 6C 87     	call Calcula_numero_de_disparotes
341   86A4
342   86A4 3E 04        	ld a,4
343   86A6 D3 FE        	out ($fe),a
344   86A8 C9           	ret
345   86A9
346   86A9              ; --------------------------------------------------------------------------------------------------------------
347   86A9              ;
348   86A9              ;	29/1/23
349   86A9
350   86A9              Mov_obj
351   86A9
352   86A9              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
353   86A9
354   86A9 AF           	xor a
355   86AA 32 C4 85     	ld (Obj_dibujado),a
356   86AD CD 01 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
357   86B0              ;														; Obj_dibujado="0".
358   86B0              ; Movemos Entidades malignas.
359   86B0
360   86B0 CD 84 93     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
361   86B3 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
362   86B6 CB 67        	bit 4,a
363   86B8 C8           	ret z
364   86B9
365   86B9              ; ---------
366   86B9
367   86B9 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
368   86BB 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
369   86BE CD 01 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
370   86C1 CD 18 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
371   86C4 CD E7 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
372   86C7 C9           	ret													; _de la misma.
373   86C8
374   86C8              ; --------------------------------------------------------------------------------------------------------------
375   86C8              ;
376   86C8              ;	29/1/23
377   86C8
378   86C8              Mov_Amadeus
379   86C8
380   86C8 AF           	xor a
381   86C9 32 C4 85     	ld (Obj_dibujado),a
382   86CC CD 01 87         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
383   86CF              ;														; Obj_dibujado="0".
384   86CF              ; Movemos Amadeus.
385   86CF
386   86CF CD 4B 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
387   86D2 3A C3 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
388   86D5 CB 67        	bit 4,a
389   86D7 C8           	ret z
390   86D8
391   86D8              ; ---------
392   86D8
393   86D8 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
394   86DA 32 C4 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
395   86DD CD 01 87         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
396   86E0 CD 18 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
397   86E3 CD E7 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
398   86E6 C9           	ret													; _de la nave.
399   86E7
400   86E7              ; --------------------------------------------------------------------------------------------------------------
401   86E7              ;
402   86E7              ;	31/01/23
403   86E7              ;
404   86E7              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
405   86E7
406   86E7              Guarda_foto_entidad_a_borrar
407   86E7
408   86E7 CD D1 8C     	call Prepara_draw
409   86EA CD 0B 8C     	call calcula_CColumnass
410   86ED CD 42 8C     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
411   86F0 CD 97 8C     	call Define_rutina_de_impresion
412   86F3 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
413   86F6 C9           	ret
414   86F7
415   86F7              ; --------------------------------------------------------------------------------------------------------------
416   86F7              ;
417   86F7              ;	31/01/23
418   86F7              ;
419   86F7              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
420   86F7              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
421   86F7
422   86F7              Guarda_foto_entidad_a_pintar
423   86F7
424   86F7 CD 24 87     	call Repone_pintar
425   86FA CD F7 89     	call Draw
426   86FD CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
427   8700 C9           	ret
428   8701
429   8701              ; --------------------------------------------------------------------------------------------------------------
430   8701              ;
431   8701              ;
432   8701
433   8701 21 96 85     Prepara_var_pintado_borrado	ld hl,Filas
434   8704 3A C4 85     	ld a,(Obj_dibujado)
435   8707 A7           	and a
436   8708 28 05        	jr z,1F
437   870A 11 B9 85     	ld de,Variables_de_pintado
438   870D 18 03        	jr 2F
439   870F 11 AF 85     1 ld de,Variables_de_borrado
440   8712 01 08 00     2 ld bc,8
441   8715 ED B0        	ldir
442   8717 C9           	ret
443   8718
444   8718              ; --------------------------------------------------------------------------------------------------------------
445   8718
446   8718 21 AF 85     Repone_borrar ld hl,Variables_de_borrado
447   871B 11 96 85     	ld de,Filas
448   871E 01 08 00     	ld bc,8
449   8721 ED B0        	ldir
450   8723 C9           	ret
451   8724
452   8724 21 B9 85     Repone_pintar ld hl,Variables_de_pintado
453   8727 11 96 85     	ld de,Filas
454   872A 01 08 00     	ld bc,8
455   872D ED B0        	ldir
456   872F C9           	ret
457   8730
458   8730              ; *************************************************************************************************************************************************************
459   8730              ;
460   8730              ; 8/1/23
461   8730              ;
462   8730              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
463   8730              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
464   8730              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
465   8730
466   8730              ; Destruye HL y DE !!!!!
467   8730
468   8730              Inicia_punteros_de_entidades
469   8730
470   8730 21 68 84     	ld hl,Indice_de_entidades
471   8733 CD 84 87         call Extrae_address
472   8736 22 D1 85         ld (Puntero_store_entidades),hl
473   8739 21 6A 84     	ld hl,Indice_de_entidades+2
474   873C 22 D5 85     	ld (Indice_restore),hl
475   873F CD 84 87     	call Extrae_address
476   8742 22 D3 85     	ld (Puntero_restore_entidades),hl
477   8745 C9               ret
478   8746
479   8746              ; *************************************************************************************************************************************************************
480   8746              ;
481   8746              ; 8/1/23
482   8746              ;
483   8746              ;	Inicializamos los punteros de selección de los 2 índices de disparo, Amadeus y Entidades.
484   8746
485   8746 21 00 84     Inicia_Puntero_Disparo_Entidades ld hl,Indice_de_disparos_entidades
486   8749 22 E4 85     	ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
487   874C C9           	ret
488   874D 21 E8 83     Inicia_Puntero_Disparo_Amadeus ld hl,Indice_de_disparos_Amadeus
489   8750 22 E6 85     	ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
490   8753 C9           	ret
491   8754
492   8754              ; -------------------------------------------------------------------------------------------------------------
493   8754              ;
494   8754              ; 28/2/23
495   8754              ;
496   8754
497   8754              Calcula_numero_de_malotes
498   8754
499   8754 21 00 70     	ld hl,Album_de_fotos
500   8757 EB           	ex de,hl
501   8758 2A DD 85     	ld hl,(Stack_snapshot)
502   875B
503   875B 06 00        	ld b,0
504   875D 7D           	ld a,l
505   875E 93           	sub e
506   875F 28 07        	jr z,1F
507   8761
508   8761              ; Nº de malotes no es "0".
509   8761
510   8761 D6 06        2 sub 6
511   8763 04           	inc b
512   8764 A7           	and a
513   8765 20 FA        	jr nz,2B
514   8767 78           	ld a,b
515   8768
516   8768 32 D8 85     1 ld (Numero_de_malotes),a
517   876B C9           	ret
518   876C
519   876C              ; -------------------------------------------------------------------------------------------------------------
520   876C              ;
521   876C              ; 28/2/23
522   876C              ;
523   876C
524   876C              Calcula_numero_de_disparotes
525   876C
526   876C 21 60 70     	ld hl,Album_de_fotos_disparos
527   876F EB           	ex de,hl
528   8770 2A DF 85     	ld hl,(Stack_snapshot_disparos)
529   8773
530   8773 06 00        	ld b,0
531   8775 7D           	ld a,l
532   8776 93           	sub e
533   8777 28 07        	jr z,1F
534   8779
535   8779              ; Nº de malotes no es "0".
536   8779
537   8779 D6 06        2 sub 6
538   877B 04           	inc b
539   877C A7           	and a
540   877D 20 FA        	jr nz,2B
541   877F 78           	ld a,b
542   8780
543   8780 32 E1 85     1 ld (Numero_de_disparotes),a
544   8783 C9           	ret
545   8784              ; *************************************************************************************************************************************************************
546   8784              ;
547   8784              ; 20/10/22
548   8784              ;
549   8784              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
550   8784              ;
551   8784              ; Destruye el puntero y DE !!!!!
552   8784
553   8784 5E           Extrae_address ld e,(hl)
554   8785 23           	inc hl
555   8786 56           	ld d,(hl)
556   8787 2B           	dec hl
557   8788 EB           	ex de,hl
558   8789 C9           	ret
559   878A
560   878A              ; *************************************************************************************************************************************************************
561   878A              ;
562   878A              ;	7/2/23
563   878A              ;
564   878A              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
565   878A              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
566   878A              ;
567   878A              ;   Destruye HL y BC !!!!!,
568   878A              ;
569   878A              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
570   878A              ;					"0" ..... Izquierda.
571   878A
572   878A              Inicia_Puntero_objeto
573   878A
574   878A 3A AA 85     	ld a,(Cuad_objeto)
575   878D E6 01        	and 1
576   878F F5           	push af
577   8790 CC AE 87     	call z,Inicia_puntero_objeto_izq
578   8793 F1           	pop af
579   8794 28 2B        	jr z,1F
580   8796 CD 9B 87     	call Inicia_puntero_objeto_der
581   8799 18 26        	jr 1F
582   879B
583   879B              ; Arrancamos desde la parte izquierda de la pantalla.
584   879B              ; Iniciamos (Indice_Sprite_der).
585   879B
586   879B 2A A0 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
587   879E 22 A4 85     	ld (Puntero_DESPLZ_der),hl
588   87A1 CD 84 87     	call Extrae_address
589   87A4 22 9A 85     	ld (Puntero_objeto),hl
590   87A7
591   87A7 2A A2 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
592   87AA              ;	call Extrae_address
593   87AA 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
594   87AD C9           	ret
595   87AE
596   87AE              ; Arrancamos desde la parte derecha de la pantalla.
597   87AE              ; Iniciamos (Indice_Sprite_izq).
598   87AE
599   87AE 2A A2 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
600   87B1 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
601   87B4 CD 84 87     	call Extrae_address
602   87B7 22 9A 85     	ld (Puntero_objeto),hl
603   87BA
604   87BA 2A A0 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
605   87BD              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
606   87BD 22 A4 85     	ld (Puntero_DESPLZ_der),hl
607   87C0 C9           	ret
608   87C1
609   87C1              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
610   87C1
611   87C1 21 38 83     1 ld hl,Amadeus
612   87C4 ED 4B 9A 85  	ld bc,(Puntero_objeto)
613   87C8 B7 ED 42     	sub hl,bc
614   87CB C0           	ret nz
615   87CC 21 C3 85     	ld hl,Ctrl_0
616   87CF CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
617   87D1 C9           	ret 												; _de nuestra nave en los extremos.
618   87D2
619   87D2              ; *************************************************************************************************************************************************************
620   87D2              ;
621   87D2              ;	8/1/23
622   87D2              ;
623   87D2              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
624   87D2              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
625   87D2
626   87D2              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
627   87D2              ;	_de la 2ª y 3ª entidad respectivamente.
628   87D2
629   87D2              Store_Restore_entidades
630   87D2
631   87D2 E5           	push hl
632   87D3 D5           	push de
633   87D4 C5            	push bc
634   87D5
635   87D5              ;	STORE !!!!!
636   87D5              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
637   87D5
638   87D5 21 96 85     	ld hl,Filas
639   87D8 ED 5B D1 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
640   87DC 01 3A 00     	ld bc,58
641   87DF ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
642   87E1
643   87E1              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
644   87E1
645   87E1 2A D3 85     	ld hl,(Puntero_restore_entidades)
646   87E4 22 D1 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
647   87E7 11 96 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
648   87EA 01 3A 00     	ld bc,58
649   87ED ED B0        	ldir
650   87EF
651   87EF              ;	Incrementa RESTORE !!!!!
652   87EF
653   87EF 2A D5 85         ld hl,(Indice_restore)
654   87F2 23           	inc hl
655   87F3 23           	inc hl
656   87F4 22 D5 85     	ld (Indice_restore),hl
657   87F7 CD 84 87         call Extrae_address
658   87FA 22 D3 85         ld (Puntero_restore_entidades),hl
659   87FD C1           	pop bc
660   87FE D1           	pop de
661   87FF E1           	pop hl
662   8800 C9           	ret
663   8801
664   8801              ; **************************************************************************************************
665   8801              ;
666   8801              ;	29/10/22
667   8801              ;
668   8801              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
669   8801
670   8801 E5           Restore_Primera_entidad push hl
671   8802 D5           	push de
672   8803 C5            	push bc
673   8804 2A D1 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
674   8807 11 96 85     	ld de,Filas
675   880A 01 3A 00     	ld bc,58
676   880D ED B0        	ldir
677   880F C1           	pop bc
678   8810 D1           	pop de
679   8811 E1           	pop hl
680   8812 C9           	ret
681   8813
682   8813              ; **************************************************************************************************
683   8813              ;
684   8813              ;	25/01/23
685   8813              ;
686   8813              ;	Restore_Amadeus
687   8813              ;
688   8813              ;	Cargamos en DRAW los parámetros de Amadeus.
689   8813              ;
690   8813
691   8813 E5           Restore_Amadeus	push hl
692   8814 D5           	push de
693   8815 C5            	push bc
694   8816 21 74 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
695   8819 11 96 85     	ld de,Filas
696   881C 01 3A 00     	ld bc,58
697   881F ED B0        	ldir
698   8821 C1           	pop bc
699   8822 D1           	pop de
700   8823 E1           	pop hl
701   8824 C9           	ret
702   8825
703   8825              ; *************************************************************************************************************************************************************
704   8825              ;
705   8825              ;	29/01/23
706   8825              ;
707   8825              ;	Store_Amadeus
708   8825              ;
709   8825              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
710   8825              ;
711   8825
712   8825 E5           Store_Amadeus push hl
713   8826 D5           	push de
714   8827 C5            	push bc
715   8828 21 96 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
716   882B 11 74 84     	ld de,Amadeus_db
717   882E 01 3A 00     	ld bc,58
718   8831 ED B0        	ldir
719   8833 C1           	pop bc
720   8834 D1           	pop de
721   8835 E1           	pop hl
722   8836 C9           	ret
723   8837
724   8837              ; **************************************************************************************************
725   8837
726   8837              ; Teclado.
727   8837
728   8837 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
729   8839 DB FE        	in a,($fe)
730   883B E6 01        	and $01
731   883D 28 02        	jr z,1f
732   883F 18 F6        	jr Pulsa_ENTER
733   8841 C9           1 ret
734   8842
735   8842              ; **************************************************************************************************
736   8842              ;
737   8842              ; Temporización.
738   8842
739   8842              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
740   8842              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
741   8842              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
742   8842              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
743   8842
744   8842              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
745   8842              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
746   8842              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
747   8842
748   8842              ; A partir de $4f61 no hace falta DELAY.
749   8842
750   8842              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
751   8842
752   8842 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
753   8845 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
754   8846 78           	LD A,B
755   8847 A7           	AND A
756   8848 20 FB        	JR NZ,wait
757   884A C9           	RET
758   884B
759   884B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
760   884B              ;
761   884B              ;	5/3/23
762   884B              ;
763   884B              ;	En 1er lugar detectamos disparo (5), seguido de los movimientos a izq. / derecha.
764   884B
765   884B              Movimiento_Amadeus
766   884B
767   884B              ; Disparo.
768   884B
769   884B 3E F7        	ld a,$f7												; "5" para disparar.
770   884D DB FE        	in a,($fe)
771   884F E6 10        	and $10
772   8851 CC A2 88     	call z,Genera_disparo
773   8854
774   8854 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
775   8856 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
776   8858 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
777   885A CC 35 91         call z,Mov_left											;			"			"			"			"			"			"			"			"
778   885D 3E F7        	ld a,$f7
779   885F DB FE        	in a,($fe)
780   8861 E6 01        	and $01
781   8863 C8           	ret z
782   8864
783   8864 3E F7        	ld a,$f7
784   8866 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
785   8868 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
786   886A CC 17 90     	call z,Mov_right										;			"			"			"			"			"			"			"			"
787   886D C9           	ret
788   886E
789   886E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
790   886E              ;
791   886E              ;	Rutina provisional para que los malotes cagen balas.
792   886E
793   886E 3E 7F        Detecta_disparo_entidad ld a,$7f
794   8870 DB FE        	in a,($fe)
795   8872 E6 01        	and 1
796   8874 C0           	ret nz
797   8875 CD A2 88     	call Genera_disparo
798   8878 C9           	ret
799   8879
800   8879              ; Pinta indicadores de FILAS. ------------------------------------------------------
801   8879
802   8879 21 10 40     Pinta_FILAS ld hl,$4010
803   887C              ;	ld b,9
804   887C              ;2 push hl
805   887C              ;	push bc
806   887C 06 BF        	ld b,$bf
807   887E 36 80        1 ld (hl),%10000000
808   8880 CD DD 8C     	call NextScan
809   8883 10 F9        	djnz 1B
810   8885              ;	pop bc
811   8885              ;	pop hl
812   8885              ;	inc l
813   8885              ;	djnz 2B
814   8885 06 03        	ld b,3
815   8887 21 00 47         ld hl,$4700
816   888A CD 90 88     3 call Bucle_1
817   888D 10 FB            djnz 3B
818   888F C9               ret
819   8890
820   8890 C5           Bucle_1 push bc
821   8891 E5                   push hl
822   8892 D1                   pop de
823   8893 13                   inc de
824   8894 01 FF 00             ld bc,255
825   8897 36 FF                ld (hl),255
826   8899 ED B0                ldir
827   889B 23                   inc hl
828   889C 3E 07                ld a,7
829   889E 84                   add a,h
830   889F 67                   ld h,a
831   88A0 C1                   pop bc
832   88A1 C9                   ret
833   88A2
834   88A2              ; ---------------------------------------------------------------
835   88A2
836   88A2              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  88A2              ; ******************************************************************************************************************************************************************************************
  2+  88A2              ;
  3+  88A2              ;   19/02/23
  4+  88A2              ;
  5+  88A2              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  88A2              ;   En el caso de generar disparo la rutina proporciona 4 variables:
  7+  88A2              ;
  8+  88A2              ;
  9+  88A2              ;       -1 .defw ..... Control. %00000001 00000001
 10+  88A2              ;
 11+  88A2              ;           [Bit0] ..... Dirección. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
 12+  88A2              ;               _ hacen las entidades hacia abajo.
 13+  88A2              ;
 14+  88A2              ;           [Bit8] ..... Impacto. "1" Cuando se produce colisión al generar un disparo.
 15+  88A2              ;
 16+  88A2              ;       - 2 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 17+  88A2              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 18+  88A2              ;
 19+  88A2              ;       - 3 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 20+  88A2              ;           _ la bala.
 21+  88A2              ;
 22+  88A2              ;       - 4 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 23+  88A2              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 24+  88A2              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 25+  88A2              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 26+  88A2              ;           _ en el momento de generarse la bala)).
 27+  88A2
 28+  88A2              Genera_disparo
 29+  88A2
 30+  88A2              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 31+  88A2              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 32+  88A2              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 33+  88A2              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 34+  88A2              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 35+  88A2              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga estos valores, $00, $f9, $fb y $fd.
 36+  88A2              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 37+  88A2
 38+  88A2 3A CC 85         ld a,(Columnas)
 39+  88A5 47               ld b,a
 40+  88A6 3A 97 85         ld a,(Columns)
 41+  88A9 B8               cp b
 42+  88AA C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 43+  88AB
 44+  88AB              ; ----- ----- -----
 45+  88AB
 46+  88AB 21 00 80         ld hl,Indice_disparo
 47+  88AE 3A 9E 85         ld a,(CTRL_DESPLZ)
 48+  88B1 4F               ld c,a
 49+  88B2 06 00            ld b,0	                            ; B será 0,1,2 o 3 en función del valor de (CTRL_DESPLZ).
 50+  88B4              ;                                           Cuando (CTRL_DESPLZ)="0", B="0"
 51+  88B4              ;                                            ""        ""       "f9", B="1"
 52+  88B4              ;                                            ""        ""       "fb", B="2"
 53+  88B4              ;                                            ""        ""       "fb", B="3"
 54+  88B4 A7               and a
 55+  88B5 28 10            jr z,1F
 56+  88B7 E6 01            and 1
 57+  88B9 C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 58+  88BA
 59+  88BA 79               ld a,c
 60+  88BB 16 F9            ld d,$f9
 61+  88BD 23           2 inc hl
 62+  88BE 23               inc hl
 63+  88BF 04               inc b
 64+  88C0 BA               cp d
 65+  88C1 28 04            jr z,1F
 66+  88C3 14               inc d
 67+  88C4 14               inc d
 68+  88C5 18 F6            jr 2B
 69+  88C7
 70+  88C7 CD 84 87     1 call Extrae_address
 71+  88CA E5               push hl
 72+  88CB FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 73+  88CD DD 21 70 8F  	ld ix, Pinta_Disparo        		; Rutinas_de_impresion en IX.
 74+  88D1
 75+  88D1              ;	Se cumplen las condiciones necesarias para generar un disparo.
 76+  88D1              ;   Las variables de disparo varían en función del cuadrante en el que se encuentre la entidad/Amadeus.
 77+  88D1
 78+  88D1 3A AA 85     	ld a,(Cuad_objeto)
 79+  88D4 FE 02            cp 2
 80+  88D6 38 60            jr c,3F
 81+  88D8 28 5E            jr z,3F
 82+  88DA
 83+  88DA              ; 	Nos encontramos en la mitad inferior de la pantalla, (3er y 4º cuadrante).
 84+  88DA
 85+  88DA E6 01            and 1
 86+  88DC 28 2D            jr z,4F
 87+  88DE
 88+  88DE              ; 	Estamos en el 3er cuadrante de pantalla.
 89+  88DE              ; 	3er CUAD. ----- ----- ----- ----- -----
 90+  88DE              ;
 91+  88DE              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 92+  88DE              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 93+  88DE              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 94+  88DE
 95+  88DE 2A 98 85     	ld hl,(Posicion_actual)
 96+  88E1
 97+  88E1              ;   Amadeus o entidad ???.
 98+  88E1
 99+  88E1 3A C3 85         ld a,(Ctrl_0)
100+  88E4 CB 77            bit 6,a
101+  88E6 28 0D            jr z,8F
102+  88E8
103+  88E8              ; 	Dispara Amadeus.
104+  88E8
105+  88E8 0E 81            ld c,$81	                                    ; Dirección "$81", hacia arriba.
106+  88EA CD EC 8C         call PreviousScan
107+  88ED CD EC 8C         call PreviousScan
108+  88F0
109+  88F0              ;	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
110+  88F0              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
111+  88F0              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
112+  88F0              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
113+  88F0
114+  88F0 CD 62 89         call Ajusta_disparo_parte_izquierda
115+  88F3 18 0E            jr 10F
116+  88F5
117+  88F5              ; 	Dispara Entidad.
118+  88F5
119+  88F5 0E 80        8 ld c,$80	                                        ; Dirección "$80", hacia abajo.
120+  88F7
121+  88F7              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
122+  88F7              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
123+  88F7
124+  88F7 C5               push bc
125+  88F8 06 10            ld b,16
126+  88FA CD DD 8C     9 call NextScan
127+  88FD 10 FB            djnz 9B
128+  88FF C1               pop bc
129+  8900
130+  8900              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
131+  8900              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
132+  8900              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
133+  8900              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
134+  8900
135+  8900 CD 62 89         call Ajusta_disparo_parte_izquierda
136+  8903
137+  8903 CD D1 89     10 call Comprueba_Colision                          ; Retorna "$81" o "$80" en B indicando si se produce Colisión
138+  8906              ;                                                   ; _al generar el disparo.
139+  8906
140+  8906              ; 	LLegados a este punto tendremos:
141+  8906              ;
142+  8906              ;       Puntero_objeto_disparo en IY.
143+  8906              ;       Rutinas_de_impresion en IX.
144+  8906              ;       Puntero_de_impresion en HL.
145+  8906              ;       Impacto/Dirección en BC.
146+  8906
147+  8906 CD 6A 89         call Almacena_disparo
148+  8909 18 4F            jr 6F                                           ; RET.
149+  890B
150+  890B
151+  890B              ; 	Estamos en el 4º cuadrante de pantalla.
152+  890B              ; 	4º CUAD. ----- ----- ----- ----- -----
153+  890B              ;
154+  890B              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
155+  890B              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
156+  890B              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
157+  890B
158+  890B 2A 98 85     4 ld hl,(Posicion_actual)
159+  890E
160+  890E              ;   Amadeus o entidad ???.
161+  890E
162+  890E 3A C3 85         ld a,(Ctrl_0)
163+  8911 CB 77            bit 6,a
164+  8913 28 0D            jr z,11F
165+  8915
166+  8915              ; 	Dispara Amadeus.
167+  8915
168+  8915 0E 81            ld c,$81                                          ; Dirección "$81", hacia arriba.
169+  8917 CD EC 8C         call PreviousScan
170+  891A CD EC 8C         call PreviousScan
171+  891D
172+  891D              ; 	Ahora HL apunta 2 scanlines por encima de (Posicion_actual).
173+  891D              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
174+  891D              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
175+  891D              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
176+  891D
177+  891D CD 5B 89         call Ajusta_disparo_parte_derecha
178+  8920 18 0E            jr 13F
179+  8922
180+  8922              ; 	Dispara Entidad.
181+  8922
182+  8922 0E 80        11 ld c,$80                                        	  ; Dirección "$80", hacia abajo.
183+  8924
184+  8924              ; 	Guardamos el contenido de BC en la pila pues voy a utilizar el registro B como contador.
185+  8924              ;   B contiene "0,1,2 o 3", dato necesario para fijar el puntero de impresión.
186+  8924
187+  8924 C5               push bc
188+  8925
189+  8925 06 10            ld b,16
190+  8927 CD DD 8C     12 call NextScan
191+  892A 10 FB            djnz 12B
192+  892C
193+  892C C1               pop bc
194+  892D
195+  892D              ; 	Ahora HL apunta un scanline por debajo de (Posicion_actual).
196+  892D              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
197+  892D              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
198+  892D              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
199+  892D
200+  892D CD 5B 89         call Ajusta_disparo_parte_derecha
201+  8930
202+  8930 CD D1 89     13 call Comprueba_Colision                            ; Retorna "$81" o "$80" en B indicando si se produce Colisión
203+  8933              ;                                                     ; _al generar el disparo.
204+  8933
205+  8933              ; LLegados a este punto tendremos:
206+  8933              ;
207+  8933              ;       Puntero_objeto_disparo en IY.
208+  8933              ;       Rutinas_de_impresion en IX.
209+  8933              ;       Puntero_de_impresion en HL.
210+  8933              ;       Impacto/Dirección en BC.
211+  8933
212+  8933 CD 6A 89         call Almacena_disparo
213+  8936 18 22            jr 6F                                           ; RET.
214+  8938
215+  8938              ; 	La entidad que dispara se encuentra en la mitad superior de pantalla, (cuadrantes 1º y 2º).
216+  8938
217+  8938 28 11        3 jr z,5F
218+  893A
219+  893A              ; 	1er CUAD. ----- ----- ----- ----- -----
220+  893A              ;
221+  893A              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
222+  893A              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
223+  893A              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
224+  893A              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
225+  893A
226+  893A              ; 	Cuando (CTRL_DESPLZ)="0", B="0"
227+  893A              ;	   ""        ""       "f9", B="1"
228+  893A              ;	   ""        ""       "fb", B="2"
229+  893A              ; 	   ""        ""       "fb", B="3"
230+  893A
231+  893A 2A 98 85     	ld hl,(Posicion_actual)
232+  893D CD DD 8C     	call NextScan
233+  8940
234+  8940              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
235+  8940              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
236+  8940              ; 	En los cuadrantes 1º y3º de pantalla, sólo cuando (CTRL_DESPLZ)="$f9", B="1" ..... (DEC HL)*2.
237+  8940              ;   _ El resto de combinaciones, B="0","2" o "3" ..... DEC HL.
238+  8940
239+  8940 CD 62 89         call Ajusta_disparo_parte_izquierda
240+  8943
241+  8943              ; 	No se produce impacto. B="$80"
242+  8943              ; 	Dirección del proyectil hacia abajo. C="$80"
243+  8943
244+  8943 01 80 80         ld bc,$8080
245+  8946
246+  8946              ; 	LLegados a este punto tendremos:
247+  8946              ;
248+  8946              ;       Puntero_objeto_disparo en IY.
249+  8946              ;       Rutinas_de_impresion en IX.
250+  8946              ;       Puntero_de_impresion en HL.
251+  8946              ;       Impacto/Dirección en BC.
252+  8946
253+  8946 CD 6A 89         call Almacena_disparo
254+  8949 18 0F            jr 6F                                           ; RET.
255+  894B
256+  894B              ; 	Estamos en el 2º cuadrante de pantalla.
257+  894B              ; 	2º CUAD. ----- ----- ----- ----- -----
258+  894B              ;
259+  894B              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
260+  894B              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
261+  894B              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
262+  894B              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
263+  894B
264+  894B 2A 98 85     5 ld hl,(Posicion_actual)
265+  894E CD DD 8C     	call NextScan
266+  8951
267+  8951              ; 	Ahora HL apunta una FILA por debajo de (Posicion_actual).
268+  8951              ; 	En función de (CTRL-DESPLZ) variará, (en un char., a derecha o izquierda), el puntero de impresión.
269+  8951              ; 	En los cuadrantes 2º y 4º, cuando (CTRL_DESPLZ)="$fb" o "$fd"; B="2" y B="3" ..... (INC HL).
270+  8951              ;	En el resto de combinaciones, B="0" o "1", no se corrige el puntero de impresión.
271+  8951
272+  8951 CD 5B 89         call Ajusta_disparo_parte_derecha
273+  8954
274+  8954              ; 	No se produce impacto. B="$80"
275+  8954              ; 	Dirección del proyectil hacia abajo. C="80"
276+  8954
277+  8954 01 80 80     15 ld bc,$8080
278+  8957
279+  8957              ; 	LLegados a este punto tendremos:
280+  8957              ;
281+  8957              ;       Puntero_objeto_disparo en IY.
282+  8957              ;       Rutinas_de_impresion en IX.
283+  8957              ;       Puntero_de_impresion en HL.
284+  8957              ;       Impacto/Dirección en BC.
285+  8957
286+  8957 CD 6A 89         call Almacena_disparo
287+  895A
288+  895A C9           6 ret
289+  895B
290+  895B              ; ----------------------------------------------------------------
291+  895B              ;
292+  895B              ;	Estas dos subrutinas se encargan de `corregir´, el puntero de impresión del proyectil_
293+  895B              ;	_ en función del valor de la variable (CTRL_DESPLZ) y de la situación en pantalla,_
294+  895B              ;	_ (lado izq. o derecho), de la entidad que lo genera.
295+  895B
296+  895B 78           Ajusta_disparo_parte_derecha ld a,b
297+  895C FE 02            cp 2
298+  895E 38 01            jr c,1F
299+  8960 23               inc hl
300+  8961 C9           1 ret
301+  8962
302+  8962 78           Ajusta_disparo_parte_izquierda ld a,b
303+  8963 FE 01        	cp 1
304+  8965 20 01        	jr nz,1F
305+  8967 2B           	dec hl
306+  8968 2B           1 dec hl
307+  8969 C9               ret
308+  896A
309+  896A              ; ----------------------------------------------------------------
310+  896A              ;
311+  896A              ;   25/02/23
312+  896A              ;
313+  896A              ;   La Rutina va almacenando disparos en sus respectiva bases de datos.
314+  896A              ;   Amadeus dispone de 2 disparos mientras que las entidades disponen de un máximo de 10.
315+  896A
316+  896A              Almacena_disparo
317+  896A
318+  896A E5               push hl  										; HL contiene el puntero de impresión.
319+  896B F1               pop af
320+  896C 08               ex af,af                                        ; Puntero_de_impresion en AF'.
321+  896D
322+  896D 79           3 ld a,c 											; C contiene la "dirección" del proyectil.
323+  896E E6 01            and 1
324+  8970 28 1A            jr z,1F                                         ; Según la `Dirección' del proyectil sabemos si_
325+  8972              ;                                                   ; _ es Amadeus o una entidad la que dispara.
326+  8972              ; 	Dispara AMADEUS.
327+  8972
328+  8972              ;	Comprobamos que a Amadeus aún le quedan disparos.
329+  8972              ;	Si es así, nos situamos en la siguiente dirección del índice de disparos de Amadeus.
330+  8972              ;	Si por el contrario, estamos al final de índice, (no disponemos de más disparos),_
331+  8972              ;	_ iniciamos (Puntero_DESPLZ_DISPARO_AMADEUS) situándolo al comienzo del índice y salimos.
332+  8972
333+  8972 C5               push bc
334+  8973 01 EC 83         ld bc,Indice_de_disparos_Amadeus+4              ; Disparo_3A
335+  8976 2A E6 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
336+  8979 A7               and a
337+  897A ED 42            sbc hl,bc
338+  897C CC 4D 87         call z,Inicia_Puntero_Disparo_Amadeus
339+  897F C1               pop bc
340+  8980 28 4E            jr z,4F
341+  8982
342+  8982 2A E6 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
343+  8985 23               inc hl
344+  8986 23               inc hl
345+  8987 22 E6 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl          ; (Puntero_DESPLZ_DISPARO_AMADEUS) ya apunta al siguiente_
346+  898A              ;                                                   ; _ Disparo_(+1).
347+  898A 18 18            jr 2F
348+  898C
349+  898C              ; Dispara una entidad.
350+  898C
351+  898C C5           1 push bc
352+  898D 01 14 84         ld bc,Indice_de_disparos_entidades+20           ; Disparo_11
353+  8990 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
354+  8993 A7               and a
355+  8994 ED 42            sbc hl,bc
356+  8996 CC 46 87         call z,Inicia_Puntero_Disparo_Entidades
357+  8999 C1               pop bc
358+  899A 28 34            jr z,4F
359+  899C
360+  899C 2A E4 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
361+  899F 23               inc hl
362+  89A0 23               inc hl
363+  89A1 22 E4 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl        ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
364+  89A4              ;                                                   ; _ Disparo_(+1).
365+  89A4 CD 84 87     2 call Extrae_address                               ; HL contiene la dirección donde vamos a almacenar_
366+  89A7              ;                                                   ; _ los 8 bytes que definen el disparo:
367+  89A7              ;
368+  89A7              ;                                                     Puntero_objeto_disparo en IY.
369+  89A7              ;                                                     Rutinas_de_impresion en IX.
370+  89A7              ;                                                     Puntero_de_impresion en HL.
371+  89A7              ;                                                     Impacto/Dirección en BC.
372+  89A7
373+  89A7 2B               dec hl                                          ; Esta parte de la rutina comprueba si este_
374+  89A8 7E               ld a,(hl)                                       ; _ almacén de disparo está vacio. Si no es así, saltamos_
375+  89A9 23               inc hl                                          ; _ al siguiente.
376+  89AA A7               and a
377+  89AB 20 C0            jr nz,3B
378+  89AD
379+  89AD 08               ex af,af
380+  89AE ED 73 D9 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
381+  89B2 F9               ld sp,hl
382+  89B3
383+  89B3 DD E5            push ix                                         ; Rutina de impresión.
384+  89B5 F5               push af                                         ; Puntero de impresión.
385+  89B6 FD E5            push iy                                         ; Puntero objeto.
386+  89B8 C5               push bc                                         ; Control.
387+  89B9
388+  89B9 ED 7B D9 85      ld sp,(Stack)
389+  89BD
390+  89BD              ; Guardamos en Album_de_fotos_disparos los proyectiles generados.
391+  89BD
392+  89BD 21 D0 85     	ld hl,Ctrl_1
393+  89C0 CB C6        	set 0,(hl)
394+  89C2
395+  89C2 DD E5        	push ix
396+  89C4 E1               pop hl
397+  89C5 F5               push af
398+  89C6 DD E1            pop ix
399+  89C8
400+  89C8 CD A0 7F     	call Guarda_foto_registros
401+  89CB
402+  89CB 21 D0 85     	ld hl,Ctrl_1									; Restauramos el indicador de disparo antes de salir.
403+  89CE CB 86        	res 0,(hl)
404+  89D0
405+  89D0 C9           4 ret
406+  89D1
407+  89D1              ; ----------------------------------------------------------------
408+  89D1              ;
409+  89D1              ;   4/3/23
410+  89D1              ;
411+  89D1              ;   Entrega el siguiente dato en el registro B en función de si se produce colisión, o no,_
412+  89D1              ;   _ al generarse el disparo.
413+  89D1              ;       "$80" ..... No se produce colisión.
414+  89D1              ;       "$81" ..... Se produce colisión.
415+  89D1
416+  89D1 E5           Comprueba_Colision push hl
417+  89D2 1E 80            ld e,$80                                       ; E,(Impacto)="0".
418+  89D4 CD E9 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
419+  89D7
420+  89D7 7B               ld a,e
421+  89D8 E6 01            and 1
422+  89DA 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
423+  89DC
424+  89DC              ; Hay impacto.
425+  89DC
426+  89DC 43           2 ld b,e
427+  89DD E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
428+  89DE C9           3 ret
429+  89DF
430+  89DF E1           1 pop hl
431+  89E0 E5               push hl
432+  89E1 CD DD 8C         call NextScan
433+  89E4 CD E9 89         call Bucle_2
434+  89E7 18 F3            jr 2B
435+  89E9
436+  89E9              ; ---------- ----------
437+  89E9
438+  89E9 06 02        Bucle_2 ld b,2
439+  89EB 7E           2 ld a,(hl)
440+  89EC A7               and a
441+  89ED 20 04            jr nz,1F
442+  89EF 23               inc hl
443+  89F0 10 F9            djnz 2B
444+  89F2 C9           3 ret
445+  89F3 1E 81        1 ld e,$81
446+  89F5 18 FB            jr 3B
447+  89F7
448+  89F7              ; -------------------------------------------------------------------------------------------------------------
449+  89F7
450+  89F7
451+  89F7
452+  89F7
453+  89F7
# file closed: Disparo.asm
837   89F7              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  89F7              ; ******************************************************************************************************************************************************************************************
  2+  89F7              ;
  3+  89F7              ; 01/23
  4+  89F7              ;
  5+  89F7              ; DRAW. ************************************************************************************************************************************************************************************
  6+  89F7
  7+  89F7 CD D1 8C     Draw call Prepara_draw
  8+  89FA 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  89FB A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  89FC 28 05        	jr z,2F
 11+  89FE
 12+  89FE 3A AA 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  8A01 18 0C        	jr 1F
 14+  8A03 2A A8 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8A06 22 98 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8A09 CD 98 8B     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8A0C              ;													; _la esquina superior izquierda de la pantalla.
 18+  8A0C CD 06 94     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  8A0F 3A C3 85     1 ld a,(Ctrl_0)
 20+  8A12 CB 6F        	bit 5,a
 21+  8A14 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8A16
 23+  8A16 CD 2E 8A     	call Comprueba_limite_horizontal
 24+  8A19 CD BE 8A     	call Comprueba_limite_vertical
 25+  8A1C
 26+  8A1C              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8A1C
 28+  8A1C CD 0B 8C     3 call calcula_CColumnass
 29+  8A1F CD 42 8C     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  8A22 CD 97 8C     	call Define_rutina_de_impresion
 31+  8A25
 32+  8A25 3A C3 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8A28 CB AF        	res 5,a											; _a ser de utilidad.
 34+  8A2A 32 C3 85     	ld (Ctrl_0),a
 35+  8A2D
 36+  8A2D C9           	ret
 37+  8A2E
 38+  8A2E              ; *******************************************************************************************************************************************************************************************
 39+  8A2E              ;	21/01/23
 40+  8A2E              ;
 41+  8A2E              ; 	Comprueba_limite_horizontal.
 42+  8A2E              ;
 43+  8A2E              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  8A2E              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  8A2E              ;
 46+  8A2E              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  8A2E              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  8A2E              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  8A2E              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  8A2E
 51+  8A2E
 52+  8A2E
 53+  8A2E 3A C3 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  8A31 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8A33 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8A35 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8A37 32 C3 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8A3A 18 09            jr 6F
 59+  8A3C CB 5F        1 bit 3,a
 60+  8A3E 28 0A            jr z,2F
 61+  8A40 E6 F7            and $f7
 62+  8A42 32 C3 85         ld (Ctrl_0),a
 63+  8A45 CD 98 8B     6 call Inicializacion
 64+  8A48 18 5B            jr 5F
 65+  8A4A E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8A4B
 67+  8A4B              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8A4B              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8A4B
 70+  8A4B EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8A4C 2A CD 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  8A4F CD 9D 8F     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8A52 67           	ld h,a
 74+  8A53 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8A54 CD 9D 8F     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8A57 67           	ld h,a
 77+  8A58 A7           	and a
 78+  8A59 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8A5B 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8A5C 3A AA 85     	ld a,(Cuad_objeto)
 81+  8A5F FE 02        	cp 2
 82+  8A61 38 1E        	jr c,3F
 83+  8A63 28 1C        	jr z,3F
 84+  8A65 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8A66 28 23            jr z,7F
 86+  8A68 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8A6A 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8A6C E1           	pop hl
 89+  8A6D
 90+  8A6D              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8A6D              ; _para indicar con E="2" en caso necesario.
 92+  8A6D
 93+  8A6D E5               push hl
 94+  8A6E C5               push bc
 95+  8A6F CD 9D 8F     	call calcula_tercio
 96+  8A72 FE 01        	cp 1
 97+  8A74 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8A76 CD A6 8A         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8A79 28 26            jr z,9F
100+  8A7B 38 24            jr c,9F
101+  8A7D 1E 00        11 ld e,0
102+  8A7F 18 22            jr 8F
103+  8A81 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8A82 28 07        	jr z, 7F
105+  8A84 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8A86 1E 00         	ld e,0
107+  8A88 E1           	pop hl
108+  8A89 18 04        	jr 4F
109+  8A8B 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8A8D 18 15            jr 10F
111+  8A8F
112+  8A8F              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8A8F              ; _para indicar con E="2" en caso necesario.
114+  8A8F
115+  8A8F E5           4 push hl
116+  8A90 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8A91 CD 9D 8F     	call calcula_tercio
118+  8A94 FE 01        	cp 1
119+  8A96 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8A98 CD A6 8A         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8A9B 28 04            jr z,9F
122+  8A9D 30 02            jr nc,9F
123+  8A9F 18 02        	jr 8F
124+  8AA1 1E 02        9 ld e,2
125+  8AA3 C1           8 pop bc
126+  8AA4 E1           10 pop hl
127+  8AA5 C9           5 ret
128+  8AA6
129+  8AA6              ; --------------------
130+  8AA6              ;
131+  8AA6              ; 25/08/22
132+  8AA6
133+  8AA6 CD 9D 8F     Comprueba_centro call calcula_tercio
134+  8AA9 67               ld h,a
135+  8AAA 08           	ex af,af
136+  8AAB FE 02        	cp 2
137+  8AAD 38 07        	jr c,1F
138+  8AAF 28 05        	jr z,1F
139+  8AB1 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8AB4 18 03        	jr 2F
141+  8AB6 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8AB9 08           2 ex af,af
143+  8ABA A7               and a
144+  8ABB ED 42            sbc hl,bc
145+  8ABD C9               ret
146+  8ABE
147+  8ABE              ; *********************************************************************************************************************************************************************************************
148+  8ABE              ;
149+  8ABE              ;   16/8/22
150+  8ABE              ;
151+  8ABE              ;	Comprueba_limite_vertical
152+  8ABE              ;
153+  8ABE              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8ABE              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8ABE              ;
156+  8ABE
157+  8ABE 2A 98 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8AC1 7D           	ld a,l
159+  8AC2 E6 1F        	and $1F
160+  8AC4 57           	ld d,a
161+  8AC5 3A CF 85     	ld a,(Limite_vertical)
162+  8AC8 BA           	cp d 											; Límite - Posición.
163+  8AC9 08           	ex af,af 										; Resultado de CP d en F'.
164+  8ACA 3A AA 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8ACD CB 47        	bit 0,a
166+  8ACF 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8AD1
168+  8AD1              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8AD1
170+  8AD1 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8AD2 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8AD4
173+  8AD4              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8AD4              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8AD4
176+  8AD4 3A 9C 85         ld a,(Coordenada_X)
177+  8AD7 16 0F            ld d,Centro_izquierda
178+  8AD9 A7               and a
179+  8ADA 92               sub d 											 ; Posición - Centro_izquierda.
180+  8ADB 28 1E            jr z,3F
181+  8ADD 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8ADF              ;                                                    ; _salimos sin modificar nada.
183+  8ADF 18 0E            jr 2F
184+  8AE1 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8AE2 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8AE4
187+  8AE4              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8AE4              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8AE4
190+  8AE4 3A 9C 85         ld a,(Coordenada_X)
191+  8AE7 16 10            ld d,Centro_derecha
192+  8AE9 A7               and a
193+  8AEA 92               sub d
194+  8AEB 28 0E            jr z,3F
195+  8AED 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8AEF              ;                                                    ; _salimos sin modificar nada.
197+  8AEF CB 43        2 bit 0,e
198+  8AF1 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8AF3 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8AF4 CD 88 8B         call Modificaccionne
201+  8AF7 C1           	pop bc
202+  8AF8 CD 98 8B         call Inicializacion
203+  8AFB C9           3 ret 				 								 ; Salimos de la rutina.
204+  8AFC
205+  8AFC              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8AFC
207+  8AFC C5           4 push bc
208+  8AFD 01 97 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8B00 0A           	ld a,(bc)
210+  8B01 3D           	dec a
211+  8B02 47           	ld b,a 											 ; Columnas-1 en B.
212+  8B03 7D           	ld a,l
213+  8B04 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8B05 CB 47        	bit 0,a
215+  8B07 28 03        	jr z,5F
216+  8B09 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8B0A 18 2E        	jr 7F
218+  8B0C
219+  8B0C              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8B0C
221+  8B0C 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8B0D F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8B0E 3A C3 85     	ld a,(Ctrl_0)
224+  8B11 CB 4F        	bit 1,a
225+  8B13 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8B15 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8B16
228+  8B16              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8B16
230+  8B16 1C               inc e
231+  8B17 1D               dec e
232+  8B18 20 07            jr nz,12F
233+  8B1A 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8B1B 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8B1C 22 98 85     	ld (Posicion_actual),hl
236+  8B1F 18 44        13 jr 9F
237+  8B21 CB 43        12 bit 0,e
238+  8B23 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8B25              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8B25 C1           	pop bc
241+  8B26 18 D3        	jr 3B
242+  8B28 80           14 add b
243+  8B29 6F               ld l,a
244+  8B2A 22 98 85     	ld (Posicion_actual),hl
245+  8B2D CD 88 8B         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8B30 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8B32 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8B34 32 C3 85         ld (Ctrl_0),a
249+  8B37 F1           	pop af
250+  8B38 18 2B        	jr 9F
251+  8B3A
252+  8B3A              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8B3A
254+  8B3A F5           7 push af
255+  8B3B 3A C3 85     	ld a,(Ctrl_0)
256+  8B3E CB 47        	bit 0,a
257+  8B40 20 1D        	jr nz,8F
258+  8B42 F1           	pop af
259+  8B43
260+  8B43              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8B43
262+  8B43 1C           	inc e
263+  8B44 1D               dec e
264+  8B45 20 07            jr nz,10F
265+  8B47 90           	sub b
266+  8B48 6F               ld l,a
267+  8B49 22 98 85     	ld (Posicion_actual),hl
268+  8B4C 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8B4E              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8B4E CB 43        10 bit 0,e
271+  8B50 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8B52              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8B52 C1           	pop bc
274+  8B53 18 A6        	jr 3B
275+  8B55 90           16 sub b
276+  8B56 6F               ld l,a
277+  8B57 22 98 85     	ld (Posicion_actual),hl
278+  8B5A CD 88 8B         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8B5D 18 06            jr 9F
280+  8B5F E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8B61 32 C3 85         ld (Ctrl_0),a
282+  8B64 F1           	pop af
283+  8B65 C1           9 pop bc
284+  8B66 1E 00        	ld e,0
285+  8B68 CD 98 8B         call Inicializacion
286+  8B6B F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8B6C 08           	ex af,af
288+  8B6D F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8B6E 18 8B            jr 3B
290+  8B70
291+  8B70              ; --------------------
292+  8B70
293+  8B70 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8B72 CD EC 8C     1 call PreviousScan
295+  8B75 10 FB            djnz 1B
296+  8B77 22 98 85     	ld (Posicion_actual),hl
297+  8B7A AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8B7B C9           	ret
299+  8B7C
300+  8B7C              ; --------------------
301+  8B7C
302+  8B7C 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8B7E CD DD 8C     1 call NextScan
304+  8B81 10 FB            djnz 1B
305+  8B83 22 98 85     	ld (Posicion_actual),hl
306+  8B86 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8B87 C9           	ret
308+  8B88
309+  8B88              ; --------------------
310+  8B88              ;
311+  8B88              ;	22/01/23
312+  8B88              ;
313+  8B88              ;	E="1". Hemos cambiado de cuadrante.
314+  8B88              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8B88              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8B88
317+  8B88
318+  8B88              Modificaccionne
319+  8B88
320+  8B88 3A AA 85     	ld a,(Cuad_objeto)
321+  8B8B FE 02        	cp 2
322+  8B8D CC 70 8B         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8B90 DC 70 8B         call c,Modifica_Pos_actual
324+  8B93 C8           	ret z
325+  8B94 CD 7C 8B         call Modifica_Pos_actual2
326+  8B97 C9               ret
327+  8B98
328+  8B98              ; *************************************************************************************************************************************************************************************************
329+  8B98              ;
330+  8B98              ;	13/8/22
331+  8B98              ;
332+  8B98              ;	Inicializacion
333+  8B98              ;
334+  8B98              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8B98              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8B98              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8B98              ;
338+  8B98              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8B98              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8B98              ;	_ desaparece/aparece.
341+  8B98
342+  8B98              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8B98              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8B98              ;
345+  8B98              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8B98              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8B98              ; 		   [E] ="0"
348+  8B98
349+  8B98              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8B98
351+  8B98 CD 9D 8F     Inicializacion call calcula_tercio
352+  8B9B 28 36        	jr z,primit
353+  8B9D E6 02        	and 2
354+  8B9F 20 07        	jr nz,segmit
355+  8BA1 7D           	ld a,l
356+  8BA2 FE 7F        	cp $7f
357+  8BA4 38 2D        	jr c,primit
358+  8BA6 28 2B        	jr z,primit
359+  8BA8 CD 05 8C     segmit call column
360+  8BAB 38 13        	jr c,tercuad
361+  8BAD 3E 04        cuarcuad ld a,4
362+  8BAF 32 AA 85     	ld (Cuad_objeto),a
363+  8BB2 21 20 48     	ld hl,$4820
364+  8BB5 22 CD 85     	ld (Limite_horizontal),hl
365+  8BB8 21 CF 85     	ld hl,Limite_vertical
366+  8BBB 36 0D        	ld (hl),$0d
367+  8BBD 08           	ex af,af
368+  8BBE 18 3C        	jr 1F
369+  8BC0              tercuad
370+  8BC0 3E 03        	ld a,3
371+  8BC2 32 AA 85     	ld (Cuad_objeto),a
372+  8BC5 21 20 48     	ld hl,$4820
373+  8BC8 22 CD 85     	ld (Limite_horizontal),hl
374+  8BCB 21 CF 85     	ld hl,Limite_vertical
375+  8BCE 36 12        	ld (hl),$12
376+  8BD0 08           	ex af,af
377+  8BD1 18 29        	jr 1F
378+  8BD3 CD 05 8C     primit call column
379+  8BD6 38 13        	jr c, primcuad
380+  8BD8              segcuad
381+  8BD8 3E 02        	ld a,2
382+  8BDA 32 AA 85     	ld (Cuad_objeto),a
383+  8BDD 21 C0 4F     	ld hl,$4fc0
384+  8BE0 22 CD 85     	ld (Limite_horizontal),hl
385+  8BE3 21 CF 85     	ld hl,Limite_vertical
386+  8BE6 36 0D        	ld (hl),$0d
387+  8BE8 08           	ex af,af
388+  8BE9 18 11        	jr 1F
389+  8BEB              primcuad
390+  8BEB 3E 01        	ld a,1
391+  8BED 32 AA 85     	ld (Cuad_objeto),a
392+  8BF0 21 C0 4F     	ld hl,$4fc0
393+  8BF3 22 CD 85     	ld (Limite_horizontal),hl
394+  8BF6 21 CF 85     	ld hl,Limite_vertical
395+  8BF9 36 12        	ld (hl),$12
396+  8BFB 08           	ex af,af
397+  8BFC CD CF 92     1 call Genera_coordenadas
398+  8BFF 21 C3 85     	ld hl,Ctrl_0
399+  8C02 CB EE        	set 5,(hl)
400+  8C04 C9           	ret
401+  8C05
402+  8C05              ; ------------------------------------------------------------------------------------------------------------------
403+  8C05
404+  8C05              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8C05              ;
406+  8C05              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8C05
408+  8C05 7D           column ld a,l
409+  8C06 E6 1F        	and $1f
410+  8C08 FE 10         	cp $10
411+  8C0A C9            	ret
412+  8C0B
413+  8C0B              ; --------------------------------------------------------------------------------------------------------------------
414+  8C0B              ;
415+  8C0B              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8C0B              ;
417+  8C0B              ; 14/12/22
418+  8C0B              ;
419+  8C0B              ;	Modifica: A y BC.
420+  8C0B
421+  8C0B 3A AA 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8C0E E6 01        	and 1
423+  8C10 28 17        	jr z,1F
424+  8C12
425+  8C12              ; Nos encontramos en la parte izquierda de la pantalla
426+  8C12
427+  8C12 3A 9C 85     	ld a,(Coordenada_X)
428+  8C15 47           	ld b,a
429+  8C16 04           	inc b											; (Coordenada_X)+1 en B.
430+  8C17 79           	ld a,c
431+  8C18 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8C19 38 08        	jr c,2F
433+  8C1B 47           	ld b,a
434+  8C1C 79           	ld a,c
435+  8C1D 90           	sub b
436+  8C1E 32 CC 85     	ld (Columnas),a
437+  8C21 18 1B        	jr 4F
438+  8C23 79           2 ld a,c
439+  8C24 32 CC 85     	ld (Columnas),a
440+  8C27 18 15        	jr 4F
441+  8C29
442+  8C29              ; Nos encontramos en la parte derecha de la pantalla.
443+  8C29
444+  8C29 3A 9C 85     1 ld a,(Coordenada_X)
445+  8C2C 81           	add c
446+  8C2D 3D           	dec a
447+  8C2E D6 1F        	sub $1f
448+  8C30 38 08        	jr c,3F
449+  8C32 47           	ld b,a
450+  8C33 79           	ld a,c
451+  8C34 90           	sub b
452+  8C35 32 CC 85     	ld (Columnas),a
453+  8C38 18 04        	jr 4F
454+  8C3A 79           3 ld a,c
455+  8C3B 32 CC 85     	ld (Columnas),a
456+  8C3E D9           4 exx
457+  8C3F 4F           	ld c,a
458+  8C40 D9           	exx
459+  8C41 C9            ret
460+  8C42
461+  8C42              ; --------------------------------------------------------------------------------------------------------------------
462+  8C42              ;
463+  8C42              ; 7/1/23
464+  8C42              ;
465+  8C42              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8C42              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8C42              ;
468+  8C42              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8C42              ;	DESTRUYE: HL,B Y A.
470+  8C42
471+  8C42 3A AA 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8C45 FE 02        	cp 2
473+  8C47 38 18        	jr c,1F
474+  8C49 28 16        	jr z,1F
475+  8C4B E6 01        	and 1
476+  8C4D 28 0D        	jr z,3F
477+  8C4F
478+  8C4F              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8C4F
480+  8C4F CD 8B 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8C52
482+  8C52 7D           9 ld a,l
483+  8C53 E6 1F        	and $1f
484+  8C55 28 2A        	jr z,7F
485+  8C57 2B           	dec hl
486+  8C58 10 F8        	djnz 9B
487+  8C5A 18 25        	jr 7F
488+  8C5C
489+  8C5C              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8C5C
491+  8C5C 2A 98 85     3 ld hl,(Posicion_actual)
492+  8C5F 18 20        	jr 7F
493+  8C61
494+  8C61 28 14        1 jr z,2F
495+  8C63
496+  8C63              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8C63
498+  8C63 CD 8B 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8C66 7D           4 ld a,l
500+  8C67 E6 1F        	and $1f
501+  8C69 28 03        	jr z,6F
502+  8C6B 2B           	dec hl
503+  8C6C 10 F8        	djnz 4B
504+  8C6E 06 0F        6 ld b,15
505+  8C70 CD EC 8C     5 call PreviousScan
506+  8C73 10 FB        	djnz 5B
507+  8C75 18 0A        	jr 7F
508+  8C77
509+  8C77              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8C77
511+  8C77 CD 8B 8C     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8C7A 06 0F        	ld b,15
513+  8C7C CD EC 8C     8 call PreviousScan
514+  8C7F 10 FB        	djnz 8B
515+  8C81
516+  8C81 E5           7 push hl
517+  8C82 DD E1        	pop ix
518+  8C84
519+  8C84 2A 9A 85     	ld hl,(Puntero_objeto)
520+  8C87 E5           	push hl
521+  8C88 FD E1        	pop iy
522+  8C8A
523+  8C8A C9           	ret
524+  8C8B
525+  8C8B              ; --------------------------------------------------------------------------------------------------------------------
526+  8C8B              ;
527+  8C8B              ;	2/1/23
528+  8C8B              ;
529+  8C8B              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8C8B              ;
531+  8C8B              ;	Tras esta rutina tenemos:
532+  8C8B              ;
533+  8C8B              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8C8B              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8C8B              ;
536+  8C8B              ;	DESTRUYE!!!!! HL,B y A.
537+  8C8B
538+  8C8B 2A 98 85     Operandos ld hl,(Posicion_actual)
539+  8C8E 3A CC 85     	ld a,(Columnas)
540+  8C91 3D           	dec a
541+  8C92 20 01        	jr nz,1F
542+  8C94 3C           	inc a
543+  8C95 47           1 ld b,a
544+  8C96 C9           	ret
545+  8C97
546+  8C97              ; --------------------------------------------------------------------------------------------------------------------
547+  8C97              ;
548+  8C97              ;	3/1/23
549+  8C97              ;
550+  8C97              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8C97              ;
552+  8C97              ;	Destruye: A,B,HL y DE.
553+  8C97
554+  8C97              Define_rutina_de_impresion
555+  8C97
556+  8C97 3A 97 85     	ld a,(Columns)
557+  8C9A 47           	ld b,a
558+  8C9B 3A CC 85     	ld a,(Columnas)
559+  8C9E B8           	cp b
560+  8C9F 20 0D        	jr nz,2f
561+  8CA1
562+  8CA1              ;	La entidad se imprime entera.
563+  8CA1
564+  8CA1 21 6D 8D     	ld hl, Indice_entidades_completas
565+  8CA4 E6 01        	and 1
566+  8CA6 28 02        	jr z,1F
567+  8CA8
568+  8CA8 23           	inc hl
569+  8CA9 23           	inc hl
570+  8CAA
571+  8CAA CD 84 87     1 call Extrae_address
572+  8CAD C9           	ret		;	ret
573+  8CAE
574+  8CAE              ;	La entidad no se imprime entera en pantalla.
575+  8CAE
576+  8CAE 3A AA 85     2 ld a,(Cuad_objeto)
577+  8CB1 E6 01        	and 1
578+  8CB3 28 17        	jr z,3F
579+  8CB5
580+  8CB5              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8CB5
582+  8CB5 21 71 8D     	ld hl, Indice_entidades_incompletas_izquierda
583+  8CB8 3A 97 85     4 ld a,(Columns)
584+  8CBB E6 01        	and 1
585+  8CBD 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8CBF
587+  8CBF 23           	inc hl
588+  8CC0 23           	inc hl
589+  8CC1
590+  8CC1 3A CC 85     	ld a,(Columnas)
591+  8CC4 E6 01        	and 1
592+  8CC6 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8CC8
594+  8CC8 23           	inc hl
595+  8CC9 23           	inc hl
596+  8CCA
597+  8CCA 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8CCC
599+  8CCC 21 77 8D     3 ld hl, Indice_entidades_incompletas_derecha
600+  8CCF 18 E7        	jr 4B
601+  8CD1
602+  8CD1              ; --------------------------------------------------------------------------------------------------------------------
603+  8CD1              ;
604+  8CD1              ;	Prepara_draw
605+  8CD1              ;
606+  8CD1              ;	Es una rutina de carga.
607+  8CD1              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8CD1              ;
609+  8CD1              ;	FUNCIONAMIENTO:
610+  8CD1              ;
611+  8CD1              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8CD1              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8CD1              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8CD1              ;
615+  8CD1              ;	DESTRUYE:
616+  8CD1              ;
617+  8CD1              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8CD1
619+  8CD1 21 96 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8CD4 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8CD5 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8CD6 4E           	ld c,(hl)
623+  8CD7 2A 98 85     	ld hl,(Posicion_actual)
624+  8CDA 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8CDC C9           	ret
626+  8CDD
627+  8CDD              ;----------------------------------------------------------------------------------------------------------------
628+  8CDD              ;
629+  8CDD              ;	5/08/22
630+  8CDD              ;
631+  8CDD              ;   NextScan.
632+  8CDD              ;
633+  8CDD              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8CDD              ;
635+  8CDD              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8CDD              ;
637+  8CDD              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8CDD              ;
639+  8CDD              ;       DESTRUIDOS: AF y HL !!!
640+  8CDD              ;
641+  8CDD              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8CDD              ;
643+  8CDD
644+  8CDD 24           NextScan inc h          ; Incrementamos el scanline.
645+  8CDE 7C               ld a,h
646+  8CDF E6 07            and 7
647+  8CE1 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8CE2
649+  8CE2 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8CE3 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8CE5 6F               ld l,a
652+  8CE6 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8CE7
654+  8CE7 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8CE8 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8CEA 67               ld h,a
657+  8CEB C9               ret
658+  8CEC
659+  8CEC              ;----------------------------------------------------------------------------------------------------------------
660+  8CEC              ;
661+  8CEC              ;	5/08/22
662+  8CEC              ;
663+  8CEC              ;   PreviousScan.
664+  8CEC              ;
665+  8CEC              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8CEC              ;
667+  8CEC              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8CEC              ;
669+  8CEC              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8CEC              ;
671+  8CEC              ;       DESTRUIDOS: AF y HL !!!
672+  8CEC              ;
673+  8CEC              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8CEC              ;
675+  8CEC
676+  8CEC 7C           PreviousScan ld a,h
677+  8CED 25               dec h               ; Dec H.
678+  8CEE E6 07            and 7
679+  8CF0 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8CF1
681+  8CF1 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8CF2 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8CF4 6F               ld l,a
684+  8CF5 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8CF6
686+  8CF6 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8CF7 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8CF9 67               ld h,a
689+  8CFA C9               ret
690+  8CFB
691+  8CFB              ; -----------------------------------------------------------------------------------
692+  8CFB              ;
693+  8CFB              ;	28/2/23
694+  8CFB              ;
695+  8CFB              ;	Rutina principal de pintado de entidades/Amadeus.
696+  8CFB              ;	Extrae fotos de Album_de_fotos.
697+  8CFB
698+  8CFB 3A D8 85     Extrae_foto_registros ld a,(Numero_de_malotes)
699+  8CFE A7           	and a
700+  8CFF C8           	ret z
701+  8D00 ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
702+  8D04 31 00 70     	ld sp,Album_de_fotos
703+  8D07
704+  8D07 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
705+  8D09 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
706+  8D0A D1           	pop de																	; Dirección de la rutina de impresión en DE.
707+  8D0B
708+  8D0B ED 73 DB 85  	ld (Stack_2),sp
709+  8D0F ED 7B D9 85  	ld sp,(Stack)
710+  8D13
711+  8D13              ; Fabrica la llamada a la correspondiente rutina de impresión.
712+  8D13
713+  8D13 3E CD        	ld a,$cd
714+  8D15 32 1D 8D     	ld (Imprime),a
715+  8D18 EB           	ex de,hl
716+  8D19 22 1E 8D     	ld (Imprime+1),hl
717+  8D1C EB           	ex de,hl
718+  8D1D
719+  8D1D              ; Ejecuta la llamada:	CALL $xx,xx
720+  8D1D
721+  8D1D 00 00 00     Imprime db 0,0,0
722+  8D20
723+  8D20 3A D8 85     	ld a,(Numero_de_malotes)
724+  8D23 3D           	dec a
725+  8D24 28 09        	jr z,1F
726+  8D26 32 D8 85      	ld (Numero_de_malotes),a
727+  8D29
728+  8D29 ED 7B DB 85   	ld sp,(Stack_2)
729+  8D2D 18 D8        	jr 2B
730+  8D2F
731+  8D2F AF           1 xor a
732+  8D30 32 DB 85     	ld (Stack_2),a
733+  8D33 C9           	ret
734+  8D34
735+  8D34              ; -----------------------------------------------------------------------------------
736+  8D34              ;
737+  8D34              ;	28/2/23
738+  8D34              ;
739+  8D34              ;	Rutina principal de pintado de disparos.
740+  8D34
741+  8D34              Extrae_foto_registros_disparos
742+  8D34
743+  8D34 3A E1 85     	ld a,(Numero_de_disparotes)
744+  8D37 A7           	and a
745+  8D38 C8           	ret z
746+  8D39 ED 73 D9 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
747+  8D3D 31 60 70     	ld sp,Album_de_fotos_disparos
748+  8D40
749+  8D40 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
750+  8D42 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
751+  8D43 D1           	pop de																	; Dirección de la rutina de impresión en DE.
752+  8D44
753+  8D44 ED 73 DB 85  	ld (Stack_2),sp
754+  8D48 ED 7B D9 85  	ld sp,(Stack)
755+  8D4C
756+  8D4C              ; Fabrica la llamada a la correspondiente rutina de impresión.
757+  8D4C
758+  8D4C 3E CD        	ld a,$cd
759+  8D4E 32 56 8D     	ld (Imprime2),a
760+  8D51 EB           	ex de,hl
761+  8D52 22 57 8D     	ld (Imprime2+1),hl
762+  8D55 EB           	ex de,hl
763+  8D56
764+  8D56              ; Ejecuta la llamada:	CALL $xx,xx
765+  8D56
766+  8D56 00 00 00     Imprime2 db 0,0,0
767+  8D59
768+  8D59 3A E1 85     	ld a,(Numero_de_disparotes)
769+  8D5C 3D           	dec a
770+  8D5D 28 09        	jr z,1F
771+  8D5F 32 E1 85      	ld (Numero_de_disparotes),a
772+  8D62
773+  8D62 ED 7B DB 85  	ld sp,(Stack_2)
774+  8D66 18 D8        	jr 2B
775+  8D68
776+  8D68 AF           1 xor a
777+  8D69 32 DB 85     	ld (Stack_2),a
778+  8D6C C9           	ret
779+  8D6D
# file closed: Draw_XOR.asm
838   8D6D              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8D6D              ;   índices de Rutinas de impresión.
  2+  8D6D
  3+  8D6D 7D 8D        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8D6F AA 8D            defw Pinta_Amadeus_3x2
  5+  8D71
  6+  8D71 00 8E        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8D73 A0 8E            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8D75 54 8E            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8D77
 10+  8D77 2A 8E        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8D79 2E 8F            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8D7B E2 8E            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8D7D
 14+  8D7D
 15+  8D7D              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8D7D              ;
 17+  8D7D              ;   12/12/22
 18+  8D7D              ;
 19+  8D7D              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8D7D              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8D7D              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8D7D              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8D7D              ;
 24+  8D7D              ;   Modifica: DE y HL.
 25+  8D7D
 26+  8D7D ED 73 D9 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8D81 FD F9        	ld sp,iy
 28+  8D83 06 10            ld b,16
 29+  8D85 D1           1 pop de
 30+  8D86 7B               ld a,e
 31+  8D87 AE               xor (hl)
 32+  8D88 77           	ld (hl),a
 33+  8D89 23           	inc hl
 34+  8D8A 7A               ld a,d
 35+  8D8B AE               xor (hl)
 36+  8D8C 77           	ld (hl),a
 37+  8D8D 2B           	dec hl
 38+  8D8E 24           	inc h
 39+  8D8F 7C               ld a,h
 40+  8D90 E6 07            and 7
 41+  8D92 20 0A            jr nz,2F
 42+  8D94 7D               ld a,l
 43+  8D95 C6 20            add a,$20
 44+  8D97 6F               ld l,a
 45+  8D98 38 04            jr c,2F
 46+  8D9A 7C               ld a,h
 47+  8D9B D6 08            sub 8
 48+  8D9D 67               ld h,a
 49+  8D9E 7C           2 ld a,h
 50+  8D9F FE 58            cp $58
 51+  8DA1 28 02            jr z,3F
 52+  8DA3 10 E0            djnz 1B
 53+  8DA5 ED 7B D9 85  3 ld sp,(Stack)
 54+  8DA9 C9           	ret
 55+  8DAA
 56+  8DAA ED 73 D9 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8DAE FD F9        	ld sp,iy
 58+  8DB0 06 08            ld b,8
 59+  8DB2 D1           1 pop de
 60+  8DB3 7B               ld a,e
 61+  8DB4 AE               xor (hl)
 62+  8DB5 77           	ld (hl),a
 63+  8DB6 23           	inc hl
 64+  8DB7 7A               ld a,d
 65+  8DB8 AE               xor (hl)
 66+  8DB9 77           	ld (hl),a
 67+  8DBA 23           	inc hl
 68+  8DBB D1           	pop de
 69+  8DBC 7B               ld a,e
 70+  8DBD AE               xor (hl)
 71+  8DBE 77           	ld (hl),a
 72+  8DBF 2B           	dec hl
 73+  8DC0 2B           	dec hl
 74+  8DC1 24           	inc h
 75+  8DC2 7C               ld a,h
 76+  8DC3 E6 07            and 7
 77+  8DC5 20 0A            jr nz,2F
 78+  8DC7 7D               ld a,l
 79+  8DC8 C6 20            add a,$20
 80+  8DCA 6F               ld l,a
 81+  8DCB 38 04            jr c,2F
 82+  8DCD 7C               ld a,h
 83+  8DCE D6 08            sub 8
 84+  8DD0 67               ld h,a
 85+  8DD1 7C           2 ld a,h
 86+  8DD2 FE 58            cp $58
 87+  8DD4 28 25            jr z,4F
 88+  8DD6 7A               ld a,d
 89+  8DD7 AE               xor (hl)
 90+  8DD8 77               ld (hl),a
 91+  8DD9 D1           	pop de
 92+  8DDA 23           	inc hl
 93+  8DDB 7B               ld a,e
 94+  8DDC AE               xor (hl)
 95+  8DDD 77           	ld (hl),a
 96+  8DDE 23           	inc hl
 97+  8DDF 7A               ld a,d
 98+  8DE0 AE               xor (hl)
 99+  8DE1 77           	ld (hl),a
100+  8DE2 2B           	dec hl
101+  8DE3 2B           	dec hl
102+  8DE4 24           	inc h
103+  8DE5 7C               ld a,h
104+  8DE6 E6 07            and 7
105+  8DE8 20 0A            jr nz,3F
106+  8DEA 7D               ld a,l
107+  8DEB C6 20            add a,$20
108+  8DED 6F               ld l,a
109+  8DEE 38 04            jr c,3F
110+  8DF0 7C               ld a,h
111+  8DF1 D6 08            sub 8
112+  8DF3 67               ld h,a
113+  8DF4 7C           3 ld a,h
114+  8DF5 FE 58            cp $58
115+  8DF7 28 02            jr z,4F
116+  8DF9 10 B7            djnz 1B
117+  8DFB ED 7B D9 85  4 ld sp,(Stack)
118+  8DFF C9           	ret
119+  8E00
120+  8E00              ; ---------------------------------------------------
121+  8E00
122+  8E00 ED 73 D9 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8E04 FD F9        	ld sp,iy
124+  8E06
125+  8E06              ; >>>
126+  8E06
127+  8E06 06 10            ld b,16
128+  8E08 D1           1 pop de
129+  8E09 7A           	ld a,d
130+  8E0A AE           	xor (hl)
131+  8E0B 77           	ld (hl),a
132+  8E0C 24           	inc h
133+  8E0D 7C               ld a,h
134+  8E0E E6 07            and 7
135+  8E10 20 0C            jr nz,2F
136+  8E12 7D               ld a,l
137+  8E13 C6 20            add a,$20
138+  8E15 6F               ld l,a
139+  8E16 38 06            jr c,2F
140+  8E18 7C               ld a,h
141+  8E19 D6 08            sub 8
142+  8E1B 67               ld h,a
143+  8E1C 18 00            jr 2F
144+  8E1E 7C           2 ld a,h
145+  8E1F FE 58            cp $58
146+  8E21 28 02            jr z,3F
147+  8E23 10 E3            djnz 1B
148+  8E25 ED 7B D9 85  3 ld sp,(Stack)
149+  8E29 C9           	ret
150+  8E2A
151+  8E2A ED 73 D9 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
152+  8E2E FD F9        	ld sp,iy
153+  8E30
154+  8E30              ; >>>
155+  8E30
156+  8E30 06 10            ld b,16
157+  8E32 D1           1 pop de
158+  8E33 7B           	ld a,e
159+  8E34 AE           	xor (hl)
160+  8E35 77           	ld (hl),a
161+  8E36 24           	inc h
162+  8E37 7C               ld a,h
163+  8E38 E6 07            and 7
164+  8E3A 20 0C            jr nz,2F
165+  8E3C 7D               ld a,l
166+  8E3D C6 20            add a,$20
167+  8E3F 6F               ld l,a
168+  8E40 38 06            jr c,2F
169+  8E42 7C               ld a,h
170+  8E43 D6 08            sub 8
171+  8E45 67               ld h,a
172+  8E46 18 00            jr 2F
173+  8E48 7C           2 ld a,h
174+  8E49 FE 58            cp $58
175+  8E4B 28 02            jr z,3F
176+  8E4D 10 E3            djnz 1B
177+  8E4F ED 7B D9 85  3 ld sp,(Stack)
178+  8E53 C9           	ret
179+  8E54
180+  8E54              ; ---------------------------------------------------
181+  8E54
182+  8E54 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
183+  8E58 FD F9        	ld sp,iy
184+  8E5A 06 08            ld b,8
185+  8E5C D1           1 pop de
186+  8E5D 7A           	ld a,d
187+  8E5E AE           	xor (hl)
188+  8E5F 77           	ld (hl),a
189+  8E60 23           	inc hl
190+  8E61 D1           	pop de
191+  8E62 7B           	ld a,e
192+  8E63 AE           	xor (hl)
193+  8E64 77           	ld (hl),a
194+  8E65 2B           	dec hl
195+  8E66 24            	inc h
196+  8E67 7C               ld a,h
197+  8E68 E6 07            and 7
198+  8E6A 20 0A            jr nz,2F
199+  8E6C 7D               ld a,l
200+  8E6D C6 20            add a,$20
201+  8E6F 6F               ld l,a
202+  8E70 38 04            jr c,2F
203+  8E72 7C               ld a,h
204+  8E73 D6 08            sub 8
205+  8E75 67               ld h,a
206+  8E76 7C           2 ld a,h
207+  8E77 FE 58            cp $58
208+  8E79 28 20            jr z,4F
209+  8E7B D1               pop de
210+  8E7C 7B           	ld a,e
211+  8E7D AE           	xor (hl)
212+  8E7E 77           	ld (hl),a
213+  8E7F 23           	inc hl
214+  8E80 7A           	ld a,d
215+  8E81 AE           	xor (hl)
216+  8E82 77           	ld (hl),a
217+  8E83 2B           	dec hl
218+  8E84 24           	inc h
219+  8E85 7C               ld a,h
220+  8E86 E6 07            and 7
221+  8E88 20 0A            jr nz,3F
222+  8E8A 7D               ld a,l
223+  8E8B C6 20            add a,$20
224+  8E8D 6F               ld l,a
225+  8E8E 38 04            jr c,3F
226+  8E90 7C               ld a,h
227+  8E91 D6 08            sub 8
228+  8E93 67               ld h,a
229+  8E94 7C           3 ld a,h
230+  8E95 FE 58            cp $58
231+  8E97 28 02            jr z,4F
232+  8E99 10 C1            djnz 1B
233+  8E9B ED 7B D9 85  4 ld sp,(Stack)
234+  8E9F C9           	ret
235+  8EA0
236+  8EA0 ED 73 D9 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
237+  8EA4 FD F9        	ld sp,iy
238+  8EA6 06 08            ld b,8
239+  8EA8 D1           1 pop de
240+  8EA9 D1           	pop de
241+  8EAA 7B           	ld a,e
242+  8EAB AE           	xor (hl)
243+  8EAC 77           	ld (hl),a
244+  8EAD 24            	inc h
245+  8EAE 7C               ld a,h
246+  8EAF E6 07            and 7
247+  8EB1 20 0A            jr nz,2F
248+  8EB3 7D               ld a,l
249+  8EB4 C6 20            add a,$20
250+  8EB6 6F               ld l,a
251+  8EB7 38 04            jr c,2F
252+  8EB9 7C               ld a,h
253+  8EBA D6 08            sub 8
254+  8EBC 67               ld h,a
255+  8EBD 7C           2 ld a,h
256+  8EBE FE 58            cp $58
257+  8EC0 28 1B            jr z,4F
258+  8EC2 D1               pop de
259+  8EC3 7A           	ld a,d
260+  8EC4 AE           	xor (hl)
261+  8EC5 77           	ld (hl),a
262+  8EC6 24           	inc h
263+  8EC7 7C               ld a,h
264+  8EC8 E6 07            and 7
265+  8ECA 20 0A            jr nz,3F
266+  8ECC 7D               ld a,l
267+  8ECD C6 20            add a,$20
268+  8ECF 6F               ld l,a
269+  8ED0 38 04            jr c,3F
270+  8ED2 7C               ld a,h
271+  8ED3 D6 08            sub 8
272+  8ED5 67               ld h,a
273+  8ED6 7C           3 ld a,h
274+  8ED7 FE 58            cp $58
275+  8ED9 28 02            jr z,4F
276+  8EDB 10 CB            djnz 1B
277+  8EDD ED 7B D9 85  4 ld sp,(Stack)
278+  8EE1 C9           	ret
279+  8EE2
280+  8EE2 ED 73 D9 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
281+  8EE6 FD F9        	ld sp,iy
282+  8EE8 06 08            ld b,8
283+  8EEA D1           1 pop de
284+  8EEB 7B           	ld a,e
285+  8EEC AE           	xor (hl)
286+  8EED 77           	ld (hl),a
287+  8EEE 23           	inc hl
288+  8EEF 7A           	ld a,d
289+  8EF0 AE           	xor (hl)
290+  8EF1 77           	ld (hl),a
291+  8EF2 2B           	dec hl
292+  8EF3 24             	inc h
293+  8EF4 7C               ld a,h
294+  8EF5 E6 07            and 7
295+  8EF7 20 0A            jr nz,2F
296+  8EF9 7D               ld a,l
297+  8EFA C6 20            add a,$20
298+  8EFC 6F               ld l,a
299+  8EFD 38 04            jr c,2F
300+  8EFF 7C               ld a,h
301+  8F00 D6 08            sub 8
302+  8F02 67               ld h,a
303+  8F03 7C           2 ld a,h
304+  8F04 FE 58            cp $58
305+  8F06 28 21            jr z,4F
306+  8F08 D1               pop de
307+  8F09 7A           	ld a,d
308+  8F0A AE           	xor (hl)
309+  8F0B 77           	ld (hl),a
310+  8F0C 23           	inc hl
311+  8F0D D1               pop de
312+  8F0E 7B           	ld a,e
313+  8F0F AE           	xor (hl)
314+  8F10 77           	ld (hl),a
315+  8F11 2B           	dec hl
316+  8F12 24           	inc h
317+  8F13 7C               ld a,h
318+  8F14 E6 07            and 7
319+  8F16 20 0A            jr nz,3F
320+  8F18 7D               ld a,l
321+  8F19 C6 20            add a,$20
322+  8F1B 6F               ld l,a
323+  8F1C 38 04            jr c,3F
324+  8F1E 7C               ld a,h
325+  8F1F D6 08            sub 8
326+  8F21 67               ld h,a
327+  8F22 7C           3 ld a,h
328+  8F23 FE 58            cp $58
329+  8F25 28 02            jr z,4F
330+  8F27 10 C1            djnz 1B
331+  8F29 ED 7B D9 85  4 ld sp,(Stack)
332+  8F2D C9           	ret
333+  8F2E
334+  8F2E ED 73 D9 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
335+  8F32 FD F9        	ld sp,iy
336+  8F34 06 08            ld b,8
337+  8F36 D1           1 pop de
338+  8F37 7B           	ld a,e
339+  8F38 AE           	xor (hl)
340+  8F39 77           	ld (hl),a
341+  8F3A 24            	inc h
342+  8F3B 7C               ld a,h
343+  8F3C E6 07            and 7
344+  8F3E 20 0A            jr nz,2F
345+  8F40 7D               ld a,l
346+  8F41 C6 20            add a,$20
347+  8F43 6F               ld l,a
348+  8F44 38 04            jr c,2F
349+  8F46 7C               ld a,h
350+  8F47 D6 08            sub 8
351+  8F49 67               ld h,a
352+  8F4A 7C           2 ld a,h
353+  8F4B FE 58            cp $58
354+  8F4D 28 1C            jr z,4F
355+  8F4F D1               pop de
356+  8F50 7A           	ld a,d
357+  8F51 AE           	xor (hl)
358+  8F52 77           	ld (hl),a
359+  8F53 24           	inc h
360+  8F54 7C               ld a,h
361+  8F55 E6 07            and 7
362+  8F57 20 0A            jr nz,3F
363+  8F59 7D               ld a,l
364+  8F5A C6 20            add a,$20
365+  8F5C 6F               ld l,a
366+  8F5D 38 04            jr c,3F
367+  8F5F 7C               ld a,h
368+  8F60 D6 08            sub 8
369+  8F62 67               ld h,a
370+  8F63 7C           3 ld a,h
371+  8F64 FE 58            cp $58
372+  8F66 28 03            jr z,4F
373+  8F68 D1               pop de
374+  8F69 10 CB            djnz 1B
375+  8F6B ED 7B D9 85  4 ld sp,(Stack)
376+  8F6F C9           	ret
377+  8F70
378+  8F70              ; ---------------------------------------------------
379+  8F70              ;
380+  8F70              ;   27/02/23
381+  8F70              ;
382+  8F70              ;   Rutina idéntica a Pinta_Amadeus_2x2, sólo difiere de esta en el nº de scanlines_
383+  8F70              ;   _ que imprime. No utilizamos [Pinta_Amadeus_2x2] porque cuando el programa está_
384+  8F70              ;   _ imprimiendo elementos, no discrimina el tipo de Sprite que está pintando.
385+  8F70
386+  8F70 ED 73 D9 85  Pinta_Disparo ld (Stack),sp
387+  8F74 FD F9            ld sp,iy
388+  8F76 06 02            ld b,2
389+  8F78 D1           1 pop de
390+  8F79 7B               ld a,e
391+  8F7A AE               xor (hl)
392+  8F7B 77               ld (hl),a
393+  8F7C 23               inc hl
394+  8F7D 7A               ld a,d
395+  8F7E AE               xor (hl)
396+  8F7F 77               ld (hl),a
397+  8F80 2B               dec hl
398+  8F81 24               inc h
399+  8F82 7C               ld a,h
400+  8F83 E6 07            and 7
401+  8F85 20 0A            jr nz,2F
402+  8F87 7D               ld a,l
403+  8F88 C6 20            add a,$20
404+  8F8A 6F               ld l,a
405+  8F8B 38 04            jr c,2F
406+  8F8D 7C               ld a,h
407+  8F8E D6 08            sub 8
408+  8F90 67               ld h,a
409+  8F91 7C           2 ld a,h
410+  8F92 FE 58            cp $58
411+  8F94 28 02            jr z,3F
412+  8F96 10 E0            djnz 1B
413+  8F98 ED 7B D9 85  3 ld sp,(Stack)
414+  8F9C C9               ret
415+  8F9D
# file closed: Rutinas_de_impresion_sprites.asm
839   8F9D              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8F9D              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8F9D              ;
  3+  8F9D              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8F9D              ;
  5+  8F9D              ; *****************************************************************************************************************************************************************************************
  6+  8F9D              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8F9D
  8+  8F9D 7C           calcula_tercio ld a,h
  9+  8F9E E6 18        	and $18
 10+  8FA0 CB 2F        	sra a
 11+  8FA2 CB 2F        	sra a
 12+  8FA4 CB 2F        	sra a
 13+  8FA6 C9           	ret
 14+  8FA7
# file closed: calcula_tercio.asm
840   8FA7              	include "Cls.asm"
# file opened: Cls.asm
  1+  8FA7              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8FA7              ;
  3+  8FA7              ;
  4+  8FA7              ;	CLS.
  5+  8FA7              ;
  6+  8FA7              ;	Limpia la pantalla y define sus atributos.
  7+  8FA7              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8FA7              ;
  9+  8FA7              ;	COLORES: 0 ..... NEGRO
 10+  8FA7              ;    		 1 ..... AZUL
 11+  8FA7              ; 			 2 ..... ROJO
 12+  8FA7              ;			 3 ..... MAGENTA
 13+  8FA7              ; 			 4 ..... VERDE
 14+  8FA7              ; 			 5 ..... CIAN
 15+  8FA7              ;			 6 ..... AMARILLO
 16+  8FA7              ; 			 7 ..... BLANCO
 17+  8FA7              ;
 18+  8FA7              ;	INPUT: A contiene los atributos de pantalla.
 19+  8FA7              ;
 20+  8FA7              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8FA7
 22+  8FA7
 23+  8FA7 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8FAA 11 01 40     	LD DE,$4001
 25+  8FAD 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8FB0 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8FB2 ED B0        	LDIR
 28+  8FB4 01 FF 02     	LD BC,767
 29+  8FB7 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8FB8 ED B0        	LDIR
 31+  8FBA C9           	ret
 32+  8FBB
# file closed: Cls.asm
841   8FBB              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8FBB              ; ******************************************************************************************************************************************************************************************
  2+  8FBB              ;
  3+  8FBB              ;   22/01/23
  4+  8FBB              ;
  5+  8FBB              ;	Mov_down
  6+  8FBB              ;
  7+  8FBB              ; 	Mueve el Sprite X px hacia abajo.
  8+  8FBB              ;
  9+  8FBB              ;
 10+  8FBB 21 C3 85     Mov_down ld hl,Ctrl_0
 11+  8FBE CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8FC0              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8FC0              ; 																	; _ en el caso de que no lo haya.
 14+  8FC0 3A AE 85     	ld a,(Vel_down)
 15+  8FC3 47           	ld b,a
 16+  8FC4 2A 98 85         ld hl,(Posicion_actual)
 17+  8FC7 CD 9D 8F     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8FCA E6 02        	and 2
 19+  8FCC 28 0F        	jr z,1F
 20+  8FCE
 21+  8FCE              ; Nos encontramos en el último tercio de pantalla.
 22+  8FCE              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8FCE
 24+  8FCE 7C           	ld a,h
 25+  8FCF FE 57        	cp $57
 26+  8FD1 20 0A        	jr nz,1F
 27+  8FD3 7D           	ld a,l
 28+  8FD4 C6 20        	add $20
 29+  8FD6 30 05        	jr nc,1F
 30+  8FD8
 31+  8FD8              ; ------------------------------
 32+  8FD8 CD B9 92     	call Reaparece_arriba
 33+  8FDB              ;	call Reinicio
 34+  8FDB              ; ------------------------------
 35+  8FDB 18 08        	jr 3F
 36+  8FDD CD DD 8C     1 call NextScan
 37+  8FE0 22 98 85     	ld (Posicion_actual),hl
 38+  8FE3 10 E2            djnz 2B
 39+  8FE5 CD CF 92     3 call Genera_coordenadas
 40+  8FE8 C9           	ret
 41+  8FE9
 42+  8FE9
 43+  8FE9              ; ******************************************************************************************************************************************************************************************
 44+  8FE9              ;
 45+  8FE9              ;   22/01/23
 46+  8FE9              ;
 47+  8FE9              ;	Mov_up
 48+  8FE9              ;
 49+  8FE9              ; 	Mueve el Sprite hacia arriba.
 50+  8FE9              ;
 51+  8FE9              ;
 52+  8FE9 21 C3 85     Mov_up ld hl,Ctrl_0
 53+  8FEC CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8FEE              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8FEE              ; 																		; _ en el caso de que no lo haya.
 56+  8FEE 3A AD 85     	ld a,(Vel_up)
 57+  8FF1 47           	ld b,a
 58+  8FF2 2A 98 85     	ld hl,(Posicion_actual)
 59+  8FF5 CD 9D 8F     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8FF8 A7           	and a
 61+  8FF9 20 10        	jr nz,1F
 62+  8FFB
 63+  8FFB              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8FFB              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8FFB
 66+  8FFB 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8FFC FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8FFE 20 0B            jr nz,1F
 69+  9000 7D               ld a,l
 70+  9001 D6 20            sub $20
 71+  9003 30 06            jr nc,1F
 72+  9005 25               dec h
 73+  9006
 74+  9006              ; -----------------------------
 75+  9006 CD A9 92         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  9009              ;	call Reinicio
 77+  9009              ; -----------------------------
 78+  9009
 79+  9009 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  900B CD EC 8C     1 call PreviousScan
 81+  900E 22 98 85     	ld (Posicion_actual),hl
 82+  9011 10 E2            djnz 3B
 83+  9013 CD CF 92     2 call Genera_coordenadas
 84+  9016 C9           	ret
 85+  9017
 86+  9017              ; ******************************************************************************************************************************************************************************************
 87+  9017              ;
 88+  9017              ;	19/10/22
 89+  9017              ;
 90+  9017              ;	Mov_right.
 91+  9017              ;
 92+  9017              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  9017              ;
 94+  9017
 95+  9017 21 C3 85     Mov_right ld hl,Ctrl_0
 96+  901A CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  901C              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  901C              ; 																	; _ en el caso de que no lo haya.
 99+  901C 3A C3 85     	ld a,(Ctrl_0)
100+  901F CB 77        	bit 6,a
101+  9021 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  9023
103+  9023 CD 57 92     	call Stop_Amadeus_right
104+  9026 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  9027 18 4D        	jr 8F
106+  9029
107+  9029 3A 9C 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  902C FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  902E 20 46        	jr nz,8F
110+  9030
111+  9030 3A 9E 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  9033 A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  9034 28 40        	jr z,8F
114+  9036
115+  9036              ; ---------- ---------- ----------
116+  9036              ;
117+  9036              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  9036
119+  9036 3A AC 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  9039 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  903B 28 11        	jr z,1F
122+  903D 38 06        	jr c,6F
123+  903F FE 04        	cp 4
124+  9041 28 14        	jr z,7F
125+  9043 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  9045
127+  9045              ; ---------- ---------- ----------
128+  9045              ;
129+  9045              ; Perfiles de velocidad
130+  9045              ;
131+  9045
132+  9045 3A 9E 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  9048 FE FE        	cp $fe
134+  904A 20 2A        	jr nz,8F
135+  904C 18 10        	jr 3F
136+  904E 3A 9E 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  9051 FE FD        	cp $fd
138+  9053 20 21        	jr nz,8F
139+  9055 18 07        	jr 3F
140+  9057 3A 9E 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  905A FE FB        	cp $fb
142+  905C 20 18        	jr nz,8F
143+  905E
144+  905E              ; ---------- ---------- ----------
145+  905E
146+  905E              3
147+  905E CD 97 92     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  9061              ;	call Reinicio
149+  9061
150+  9061              ; ---------- ---------- ----------
151+  9061              ;
152+  9061              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  9061
154+  9061 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  9063 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  9064 CD 7D 90     	call DESPLZ_DER
157+  9067 C1           	pop bc
158+  9068 10 F9        	djnz 5B
159+  906A 2A 98 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  906D 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  906E 22 98 85     	ld (Posicion_actual),hl
162+  9071 CD CF 92     	call Genera_coordenadas
163+  9074 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  9076
165+  9076              ; ---------- ---------- ----------
166+  9076
167+  9076 2A 98 85     8 ld hl,(Posicion_actual)
168+  9079 CD 7D 90     	call DESPLZ_DER
169+  907C C9           2 ret
170+  907D
171+  907D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  907D              ;
173+  907D              ;	22/9/22
174+  907D              ;
175+  907D
176+  907D CD 8C 90     DESPLZ_DER call Desplaza_derecha
177+  9080 CD D8 90         call modifica_parametros_1er_DESPLZ_2
178+  9083 CD 01 91         call Ciclo_completo
179+  9086 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  9089 CB FE        	set 7,(hl)
181+  908B C9           	ret
182+  908C
183+  908C              ; ******************************************************************************************************************************************************************************************
184+  908C              ;	15/02/23
185+  908C              ;
186+  908C
187+  908C 3A AC 85     Desplaza_derecha ld a,(Vel_right)
188+  908F 47           	ld b,a
189+  9090 2A A4 85     	ld hl,(Puntero_DESPLZ_der)
190+  9093 23           1 inc hl
191+  9094 23           	inc hl
192+  9095 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  9097 22 A4 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  909A CD 84 87     	call Extrae_address
195+  909D 22 9A 85     	ld (Puntero_objeto),hl
196+  90A0
197+  90A0              ; Modifica (Puntero_DESPLZ_izq).
198+  90A0
199+  90A0              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  90A0              ; Cuántos movimientos hemos hecho ??
201+  90A0              ; DE contiene (Puntero_DESPLZ_der).
202+  90A0
203+  90A0 2A A0 85     7 ld hl,(Indice_Sprite_der)
204+  90A3 EB           	ex de,hl
205+  90A4 A7           	and a
206+  90A5 ED 52        	sbc hl,de
207+  90A7 CB 3D        	srl l
208+  90A9 3E 08        6 ld a,8
209+  90AB 95           	sub l
210+  90AC 30 1E        	jr nc,3F
211+  90AE
212+  90AE              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  90AE              ; B="0".
214+  90AE
215+  90AE 04           4 inc b
216+  90AF 3C           	inc a
217+  90B0 20 FC        	jr nz,4B
218+  90B2 78           	ld a,b
219+  90B3 08           	ex af,af
220+  90B4 2A A0 85     	ld hl,(Indice_Sprite_der)
221+  90B7 23           5 inc hl
222+  90B8 23           	inc hl
223+  90B9 10 FC        	djnz 5B
224+  90BB 22 A4 85     	ld (Puntero_DESPLZ_der),hl
225+  90BE CD 84 87     	call Extrae_address
226+  90C1 22 9A 85     	ld (Puntero_objeto),hl
227+  90C4
228+  90C4              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  90C4              ; _(Posicion_actual).
230+  90C4
231+  90C4 21 98 85     	ld hl,Posicion_actual
232+  90C7 34           	inc (hl)
233+  90C8 08               ex af,af
234+  90C9 6F           	ld l,a
235+  90CA 18 DD        	jr 6B
236+  90CC
237+  90CC              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  90CC
239+  90CC 47           3 ld b,a
240+  90CD 2A A2 85     	ld hl,(Indice_Sprite_izq)
241+  90D0 23           2 inc hl
242+  90D1 23           	inc hl
243+  90D2 10 FC        	djnz 2B
244+  90D4 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
245+  90D7 C9           8 ret
246+  90D8
247+  90D8              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  90D8              ;
249+  90D8              ;	24/7/22
250+  90D8              ;
251+  90D8              ;	modifica_parametros_1er_DESPLZ_2
252+  90D8              ;
253+  90D8              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  90D8              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  90D8              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  90D8
257+  90D8 3A 9E 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  90DB A7           	and a
259+  90DC 20 1F        	jr nz,1F
260+  90DE D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  90E0 32 9E 85         ld (CTRL_DESPLZ),a
262+  90E3
263+  90E3 21 97 85     	ld hl,Columns
264+  90E6 34           	inc (hl)
265+  90E7 3A AA 85     	ld a,(Cuad_objeto)
266+  90EA E6 01        	and 1
267+  90EC 28 0F        	jr z,1F
268+  90EE 2A 98 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  90F1 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  90F2 22 98 85     	ld (Posicion_actual),hl
271+  90F5 CD CF 92     	call Genera_coordenadas
272+  90F8 CD 63 92     	call Inc_CTRL_DESPLZ
273+  90FB 18 03        	jr 2F
274+  90FD CD 63 92     1 call Inc_CTRL_DESPLZ
275+  9100 C9           2 ret
276+  9101
277+  9101              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  9101              ;
279+  9101              ;	24/7/22
280+  9101              ;
281+  9101              ;	Ciclo_completo.
282+  9101              ;
283+  9101              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  9101              ;
285+  9101              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  9101              ; 	Decrementamos (Columns).
287+  9101              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  9101              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  9101
290+  9101
291+  9101 3A 9E 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  9104 FE FF        	cp $ff
293+  9106 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  9108 E6 F0        	and $f0
295+  910A 20 28        	jr nz,3F
296+  910C
297+  910C              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  910C
299+  910C 3A 9E 85     	ld a,(CTRL_DESPLZ)
300+  910F 47           	ld b,a
301+  9110 3E F8        	ld a,$f8
302+  9112 80           	add b
303+  9113 32 9E 85     	ld (CTRL_DESPLZ),a
304+  9116 18 1C        	jr 3F
305+  9118 21 97 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  911B 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  911C AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  911D 32 9E 85     	ld (CTRL_DESPLZ),a
309+  9120 3A AA 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  9123 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  9125 20 0A        	jr nz,2F
312+  9127 2A 98 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  912A 23           	inc hl
314+  912B 22 98 85     	ld (Posicion_actual),hl
315+  912E CD CF 92     	call Genera_coordenadas
316+  9131
317+  9131              ; Inicia el puntero de Sprite.
318+  9131
319+  9131 CD 9B 87     2 call Inicia_puntero_objeto_der
320+  9134 C9           3 ret
321+  9135
322+  9135              ; ******************************************************************************************************************************************************************************************
323+  9135              ;
324+  9135              ;	15/02/23
325+  9135              ;
326+  9135              ;	Mov_left.
327+  9135              ;
328+  9135              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  9135              ;
330+  9135              Mov_left
331+  9135
332+  9135 21 C3 85     	ld hl,Ctrl_0
333+  9138 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  913A              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  913A              ; 																	; _ en el caso de que no lo haya.
336+  913A 3A C3 85     	ld a,(Ctrl_0)
337+  913D CB 77        	bit 6,a
338+  913F 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  9141
340+  9141 CD 5D 92     	call Stop_Amadeus_left
341+  9144 C8           	ret z
342+  9145 20 50        	jr nz,8F
343+  9147
344+  9147 3A 9C 85     11 ld a,(Coordenada_X)
345+  914A A7           	and a
346+  914B 20 4A        	jr nz,8F
347+  914D
348+  914D 3A 9E 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  9150 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  9151 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  9153
352+  9153              ; ---------- ---------- ----------
353+  9153
354+  9153 3A AB 85     	ld a,(Vel_left)
355+  9156 FE 02        	cp 2
356+  9158 28 0F        	jr z,1F
357+  915A 38 04        	jr c,6F
358+  915C FE 04        	cp 4
359+  915E 28 12        	jr z,7F
360+  9160
361+  9160              ; ---------- ---------- ----------
362+  9160
363+  9160 3A 9E 85     6 ld a,(CTRL_DESPLZ)
364+  9163 FE F9        	cp $f9
365+  9165 20 30        	jr nz,8F
366+  9167 18 10        	jr 4F
367+  9169 3A 9E 85     1 ld a,(CTRL_DESPLZ)
368+  916C FE FA        	cp $fa
369+  916E 20 27        	jr nz,8F
370+  9170 18 07        	jr 4F
371+  9172 3A 9E 85     7 ld a,(CTRL_DESPLZ)
372+  9175 FE FC        	cp $fc
373+  9177 20 1E        	jr nz,8F
374+  9179
375+  9179              ; ---------- ---------- ----------
376+  9179
377+  9179              4
378+  9179 CD 85 92     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  917C              ;	call Reinicio
380+  917C
381+  917C              ; ---------- ---------- ----------
382+  917C
383+  917C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  917E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  917F
386+  917F 2A A2 85     	ld hl,(Indice_Sprite_izq)
387+  9182 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
388+  9185
389+  9185 CD 9E 91     	call DESPLZ_IZQ
390+  9188 C1           	pop bc
391+  9189 10 F3        	djnz 5B
392+  918B 2A 98 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  918E 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  918F 22 98 85     	ld (Posicion_actual),hl
395+  9192 CD CF 92     	call Genera_coordenadas
396+  9195 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9197
398+  9197              ; ---------- ---------- ----------
399+  9197              ; Movemos, no hay recolocación.
400+  9197
401+  9197 2A 98 85     8 ld hl,(Posicion_actual)
402+  919A CD 9E 91     	call DESPLZ_IZQ
403+  919D C9           2 ret
404+  919E
405+  919E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  919E              ;
407+  919E              ;	22/9/22
408+  919E
409+  919E              DESPLZ_IZQ
410+  919E
411+  919E CD AD 91     	call Desplaza_izquierda
412+  91A1 CD F9 91         call modifica_parametros_1er_DESPLZ
413+  91A4 CD 21 92     	call Ciclo_completo_2
414+  91A7 21 C3 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  91AA CB BE        	res 7,(hl)
416+  91AC C9           	ret
417+  91AD
418+  91AD              Desplaza_izquierda
419+  91AD
420+  91AD 3A AB 85     	ld a,(Vel_left)
421+  91B0 47           	ld b,a
422+  91B1 2A A6 85     	ld hl,(Puntero_DESPLZ_izq)
423+  91B4 23           1 inc hl
424+  91B5 23           	inc hl
425+  91B6 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  91B8 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
427+  91BB CD 84 87     	call Extrae_address
428+  91BE 22 9A 85     	ld (Puntero_objeto),hl
429+  91C1
430+  91C1              ; Modifica (Puntero_DESPLZ_der).
431+  91C1
432+  91C1              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  91C1              ; Cuántos movimientos hemos hecho ??
434+  91C1              ; DE contiene (Puntero_DESPLZ_izq).
435+  91C1
436+  91C1 2A A2 85     7 ld hl,(Indice_Sprite_izq)
437+  91C4 EB           	ex de,hl
438+  91C5 A7           	and a
439+  91C6 ED 52        	sbc hl,de
440+  91C8 CB 3D        	srl l
441+  91CA 3E 08        6 ld a,8
442+  91CC 95           	sub l
443+  91CD 30 1E        	jr nc,3F
444+  91CF
445+  91CF              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  91CF              ; B="0".
447+  91CF
448+  91CF 04           4 inc b
449+  91D0 3C           	inc a
450+  91D1 20 FC        	jr nz,4B
451+  91D3 78           	ld a,b
452+  91D4 08           	ex af,af
453+  91D5 2A A2 85     	ld hl,(Indice_Sprite_izq)
454+  91D8 23           5 inc hl
455+  91D9 23           	inc hl
456+  91DA 10 FC        	djnz 5B
457+  91DC 22 A6 85     	ld (Puntero_DESPLZ_izq),hl
458+  91DF CD 84 87     	call Extrae_address
459+  91E2 22 9A 85     	ld (Puntero_objeto),hl
460+  91E5
461+  91E5              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  91E5              ; _(Posicion_actual).
463+  91E5
464+  91E5 21 98 85     	ld hl,Posicion_actual
465+  91E8 35           	dec (hl)
466+  91E9 08           	ex af,af
467+  91EA 6F           	ld l,a
468+  91EB 18 DD        	jr 6B
469+  91ED
470+  91ED              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  91ED
472+  91ED 47           3 ld b,a
473+  91EE 2A A0 85     	ld hl,(Indice_Sprite_der)
474+  91F1 23           2 inc hl
475+  91F2 23           	inc hl
476+  91F3 10 FC        	djnz 2B
477+  91F5 22 A4 85     	ld (Puntero_DESPLZ_der),hl
478+  91F8 C9           8 ret
479+  91F9
480+  91F9              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  91F9              ;
482+  91F9              ;	modifica_parametros_1er_DESPLZ
483+  91F9              ;
484+  91F9              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  91F9              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  91F9              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  91F9
488+  91F9 3A 9E 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  91FC A7           	and a
490+  91FD 20 1E        	jr nz,1F
491+  91FF 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  9200 32 9E 85         ld (CTRL_DESPLZ),a
493+  9203 21 97 85     	ld hl,Columns
494+  9206 34           	inc (hl)
495+  9207 3A AA 85     	ld a,(Cuad_objeto)
496+  920A E6 01        	and 1
497+  920C 20 0F        	jr nz,1F
498+  920E 2A 98 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  9211 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  9212 22 98 85     	ld (Posicion_actual),hl
501+  9215 CD CF 92     	call Genera_coordenadas
502+  9218 CD 74 92     	call Dec_CTRL_DESPLZ
503+  921B 18 03        	jr 2F
504+  921D CD 74 92     1 call Dec_CTRL_DESPLZ
505+  9220 C9           2 ret
506+  9221
507+  9221              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  9221
509+  9221 3A 9E 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  9224 FE F7        	cp $f7
511+  9226 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  9228 30 2C        	jr nc,3F
513+  922A
514+  922A              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  922A
516+  922A 06 00        	ld b,0
517+  922C 04           4 inc b
518+  922D 3C           	inc a
519+  922E FE F7        	cp $f7
520+  9230 20 FA        	jr nz,4B
521+  9232 3E FF        	ld a,$ff
522+  9234 90           	sub b
523+  9235 32 9E 85     	ld (CTRL_DESPLZ),a
524+  9238 18 1C        	jr 3F
525+  923A
526+  923A              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  923A
528+  923A 21 97 85     1 ld hl,Columns
529+  923D 35           	dec (hl)
530+  923E AF           	xor a
531+  923F 32 9E 85     	ld (CTRL_DESPLZ),a
532+  9242 3A AA 85     	ld a,(Cuad_objeto)
533+  9245 E6 01        	and 1
534+  9247 28 0A        	jr z,2F
535+  9249 2A 98 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  924C 2B           	dec hl
537+  924D 22 98 85     	ld (Posicion_actual),hl
538+  9250 CD CF 92     	call Genera_coordenadas
539+  9253
540+  9253              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  9253
542+  9253 CD AE 87     2 call Inicia_puntero_objeto_izq
543+  9256 C9           3 ret
544+  9257
545+  9257              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9257              ;
547+  9257              ;	19/10/22
548+  9257              ;
549+  9257              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9257              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9257
552+  9257 3A 9C 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  925A FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  925C C9           	ret
555+  925D
556+  925D              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  925D              ;
558+  925D              ;	19/10/22
559+  925D              ;
560+  925D              ;	(cp 2) para un Amadeus de 3 Columns.
561+  925D              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  925D
563+  925D 3A 9C 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  9260 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  9262 C9           	ret
566+  9263
567+  9263              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  9263              ;
569+  9263              ;	24/7/22
570+  9263              ;
571+  9263              ;	Inc_CTRL_DESPLZ
572+  9263              ;
573+  9263              ;
574+  9263              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  9263
576+  9263 21 9E 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  9266 3A AC 85     	ld a,(Vel_right)
578+  9269 A7           	and a
579+  926A 28 06        	jr z,1F
580+  926C 47           	ld b,a
581+  926D 34           3 inc (hl)
582+  926E 10 FD        	djnz 3B
583+  9270 18 01        	jr 2F
584+  9272 34           1 inc (hl)
585+  9273 C9           2 ret
586+  9274
587+  9274              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  9274              ;
589+  9274              ;	5/2/23
590+  9274              ;
591+  9274              ;	Dec_CTRL_DESPLZ
592+  9274              ;
593+  9274              ;
594+  9274              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  9274
596+  9274 21 9E 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9277 3A AB 85     	ld a,(Vel_left)
598+  927A A7           	and a
599+  927B 28 06        	jr z,1F
600+  927D 47           	ld b,a
601+  927E 35           3 dec (hl)
602+  927F 10 FD        	djnz 3B
603+  9281 18 01        	jr 2F
604+  9283 35           1 dec (hl)
605+  9284 C9           2 ret
606+  9285
607+  9285              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9285
609+  9285 2A 98 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9288 01 1F 00     	ld bc,31
611+  928B A7           	and a
612+  928C ED 4A        	adc hl,bc
613+  928E 22 98 85     	ld (Posicion_actual),hl
614+  9291 21 C3 85     	ld hl,Ctrl_0														; $xxx1
615+  9294 CB C6        	set 0,(hl)
616+  9296 C9           	ret
617+  9297
618+  9297              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9297
620+  9297 2A 98 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  929A 01 1F 00     	ld bc,31
622+  929D A7           	and a
623+  929E ED 42        	sbc hl,bc
624+  92A0 22 98 85     	ld (Posicion_actual),hl 											; $xx1x
625+  92A3 21 C3 85     	ld hl,Ctrl_0
626+  92A6 CB CE        	set 1,(hl)
627+  92A8 C9           	ret
628+  92A9
629+  92A9              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  92A9
631+  92A9 24           Reaparece_abajo inc h
632+  92AA 01 E0 17     	ld bc,$17e0
633+  92AD A7           	and a
634+  92AE ED 4A        	adc hl,bc
635+  92B0 22 98 85     	ld (Posicion_actual),hl
636+  92B3 21 C3 85     	ld hl,Ctrl_0
637+  92B6 CB D6        	set 2,(hl)
638+  92B8 C9           	ret
639+  92B9
640+  92B9              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  92B9
642+  92B9 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  92BC A7           	and a
644+  92BD ED 42        	sbc hl,bc
645+  92BF 22 98 85     	ld (Posicion_actual),hl
646+  92C2 21 C3 85     	ld hl,Ctrl_0
647+  92C5 CB DE        	set 3,(hl)
648+  92C7 C9           	ret
649+  92C8
650+  92C8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  92C8
652+  92C8 2A A8 85     Reinicio ld hl,(Posicion_inicio)
653+  92CB 22 98 85     	ld (Posicion_actual),hl
654+  92CE C9           	ret
# file closed: Direcciones.asm
842   92CF              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  92CF              ;	12/12/22
  2+  92CF              ;
  3+  92CF              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  92CF              ;	Fila superior "0", Columna izquierda "0".
  5+  92CF              ;
  6+  92CF              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  92CF              ;
  8+  92CF              ;	Modifica: A
  9+  92CF
 10+  92CF C5           Genera_coordenadas push bc
 11+  92D0 E5           	push hl
 12+  92D1 2A 98 85     	ld hl,(Posicion_actual)
 13+  92D4 7D           	ld a,l
 14+  92D5 E6 1F        	and $1f
 15+  92D7 32 9C 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  92DA CD 9D 8F     	call calcula_tercio
 17+  92DD 47           	ld b,a
 18+  92DE 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  92DF 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  92E1 7D           	ld a,l
 21+  92E2 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  92E4 28 05        	jr z,2F
 23+  92E6 0C           1 inc c
 24+  92E7 D6 20        	sub 32
 25+  92E9 20 FB        	jr nz,1B
 26+  92EB 0C           2 inc c
 27+  92EC 04           	inc b
 28+  92ED 05           	dec b
 29+  92EE 28 04        	jr z,3F
 30+  92F0 3E E0        	ld a,$e0
 31+  92F2 10 F2        	djnz 1B
 32+  92F4 79           3 ld a,c
 33+  92F5 3D           	dec a
 34+  92F6 32 9D 85     	ld (Coordenada_y),a
 35+  92F9 E1           	pop hl
 36+  92FA C1           	pop bc
 37+  92FB C9           	ret
# file closed: Genera_coordenadas.asm
843   92FC              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  92FC
  2+  92FC
  3+  92FC              ;   11/8/22
  4+  92FC              ;
  5+  92FC              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  92FC              ;
  7+  92FC              ;   Mov_obj.asm
  8+  92FC              ;
  9+  92FC              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  92FC              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  92FC              ;
 12+  92FC              ;   Codificación:
 13+  92FC              ;
 14+  92FC              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  92FC
 16+  92FC              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  92FC
 18+  92FC 02 40 00     Arriba db 2,%01000000,0
 19+  92FF 02 80 00     Abajo db 2,%10000000,0
 20+  9302 02 20 00     Derecha db 2,%00100000,0
 21+  9305 02 10 00     Izquierda db 2,%00010000,0
 22+  9308 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  930C 60 42 60 40
 22+  9310 63
 23+  9311 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9315 22 A3 80 A0
 24+  9319 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  931D 84 A0 83 A0
 25+  9321 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9325 80 A3 22 A0
 26+  9329 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  932D 40 60 42 60
 27+  9331 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9335 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  9339 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  933D 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  9341 84
 31+  9342 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  9346 84 00
 32+  9348 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  934C 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  9350 1F 1F 1F 1F
 34+  9354 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9358 1F 1F 1F 1F
 34+  935C 1F
 35+  935D 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  9361 2F 2F 2F 2F
 35+  9365 2F 2F
 36+  9367 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  936B 2F 2F 00
 37+  936E
 38+  936E
 39+  936E              ; ----- ----- ----- ----- -----
 40+  936E
 41+  936E 4C 93        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  9370 48 93        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  9372 05 93        Indice_mov_Izquierda defw Izquierda
 44+  9374 02 93        Indice_mov_Derecha defw Derecha
 45+  9376 FF 92        Indice_mov_Abajo defw Abajo
 46+  9378 FC 92        Indice_mov_Arriba defw Arriba
 47+  937A 39 93        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  937C 3D 93        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  937E 35 93        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  9380 42 93        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  9382 08 93        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  9384              ; ----- ----- ----- ----- -----
 53+  9384
 54+  9384 3A C9 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9387 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9388 28 02            jr z,1F
 57+  938A 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  938C 3A CA 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  938F C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  9391 32 CA 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  9394              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  9394 2A C7 85         ld hl,(Puntero_mov)
 63+  9397 7E               ld a,(hl)
 64+  9398 32 C9 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  939B 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  939C 22 C7 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  939F
 68+  939F 3A CB 85     Decoder ld a,(Repetimos_db)
 69+  93A2 A7               and a
 70+  93A3 20 0C            jr nz,12F
 71+  93A5 2A C7 85         ld hl,(Puntero_mov)
 72+  93A8 7E               ld a,(hl)
 73+  93A9 A7               and a
 74+  93AA 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  93AC E6 0F            and $0f
 76+  93AE 32 CB 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  93B1              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  93B1 2A C7 85     12 ld hl,(Puntero_mov)
 79+  93B4 CB 7E            bit 7,(hl)
 80+  93B6 28 03            jr z,2F
 81+  93B8 CD BB 8F         call Mov_down
 82+  93BB 2A C7 85     2 ld hl, (Puntero_mov)
 83+  93BE CB 76            bit 6,(hl)
 84+  93C0 28 03            jr z,3F
 85+  93C2 CD E9 8F         call Mov_up
 86+  93C5 2A C7 85     3 ld hl, (Puntero_mov)
 87+  93C8 CB 6E            bit 5,(hl)
 88+  93CA 28 03            jr z,4F
 89+  93CC CD 17 90         call Mov_right
 90+  93CF 2A C7 85     4 ld hl, (Puntero_mov)
 91+  93D2 CB 66            bit 4,(hl)
 92+  93D4 28 03            jr z,5F
 93+  93D6 CD 35 91         call Mov_left
 94+  93D9
 95+  93D9              ; ---------- --------- --------- ---------- ----------
 96+  93D9
 97+  93D9 3A CB 85     5 ld a,(Repetimos_db)
 98+  93DC A7               and a
 99+  93DD 28 07            jr z,6F
100+  93DF 3D               dec a
101+  93E0 32 CB 85         ld (Repetimos_db),a
102+  93E3 28 01            jr z,6f
103+  93E5 C9           11 ret
104+  93E6 21 C9 85     6 ld hl,Contador_db_mov
105+  93E9 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  93EA 2A C7 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  93ED 23               inc hl
108+  93EE 22 C7 85         ld (Puntero_mov),hl
109+  93F1 18 F2            jr 11B
110+  93F3 2A C5 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  93F6 3A CA 85         ld a,(Incrementa_puntero)
112+  93F9 47               ld b,a
113+  93FA 23           8 inc hl
114+  93FB 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  93FD 5E               ld e,(hl)
116+  93FE 23               inc hl
117+  93FF 56               ld d,(hl)
118+  9400 EB               ex de,hl
119+  9401 22 C7 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  9404 18 DF            jr 11B
121+  9406
122+  9406              ; ---------- --------- --------- ---------- ----------
123+  9406              ;
124+  9406              ;   11/8/22
125+  9406              ;
126+  9406              ;   Prepara_Puntero_mov
127+  9406
128+  9406 E5           Prepara_Puntero_mov push hl
129+  9407 D5               push de
130+  9408 2A C5 85         ld hl,(Puntero_indice_mov)
131+  940B 5E               ld e,(hl)
132+  940C 23               inc hl
133+  940D 56               ld d,(hl)
134+  940E EB               ex de,hl
135+  940F 22 C7 85         ld (Puntero_mov),hl
136+  9412 D1               pop de
137+  9413 E1               pop hl
138+  9414 C9               ret
139+  9415
140+  9415              ; ---------- --------- --------- ---------- ----------
141+  9415              ;
142+  9415              ;   11/8/22
143+  9415              ;
144+  9415              ;   Reinicia_el_movimiento
145+  9415
146+  9415 CD 06 94     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9418 AF               xor a
148+  9419 32 C9 85         ld (Contador_db_mov),a
149+  941C 32 CA 85         ld (Incrementa_puntero),a
150+  941F
151+  941F              ;    jr $
152+  941F
153+  941F C3 84 93         jp Movimiento
154+  9422 C9               ret
155+  9423              ; ---------- --------- --------- ---------- ----------
156+  9423
157+  9423
158+  9423
159+  9423
160+  9423
161+  9423
162+  9423
163+  9423
164+  9423
165+  9423
166+  9423
167+  9423
168+  9423
169+  9423
170+  9423
171+  9423
172+  9423
173+  9423
# file closed: Patrones_de_mov.asm
844   9423              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9423              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9423              ;
  3+  9423              ;	3/1/23
  4+  9423              ;
  5+  9423              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9423
  7+  9423              ;	ADC HL,SP	LD (addr),SP
  8+  9423              ;	ADD HL,SP	LD SP,(addr)
  9+  9423              ;	ADD IX,SP	LD SP,nn
 10+  9423              ; 	ADD IY,SP	LD SP,HL
 11+  9423              ;				LD SP,IX
 12+  9423              ;	DEC SP		LD SP,IY
 13+  9423
 14+  9423              ;	EX (SP),HL
 15+  9423              ;	EX (SP),IX
 16+  9423              ;	EX (SP),IY
 17+  9423
 18+  9423              ;	INC SP
 19+  9423
 20+  9423
 21+  9423                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero objeto.
 27+  7FA0              ;   $7002 / 03 ..... Puntero de impresion.
 28+  7FA0              ;   $7004 / 05 ..... Rutina de impresión.
 29+  7FA0
 30+  7FA0 ED 73 D9 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 A0 7F         ld sp,Guarda_foto_registros                   ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 3A D0 85         ld a,(Ctrl_1)
 38+  7FAF CB 47            bit 0,a
 39+  7FB1 28 05            jr z,2F
 40+  7FB3
 41+  7FB3 2A DF 85         ld hl,(Stack_snapshot_disparos)
 42+  7FB6
 43+  7FB6 18 03            jr 4F
 44+  7FB8
 45+  7FB8 2A DD 85     2 ld hl,(Stack_snapshot)                          ; Album_de_fotos contiene la imagen de los registros implicados en el_
 46+  7FBB 06 03        4 ld b,3                                          ; _correcto funcionamiento de las distintas rutinas de impresión.
 47+  7FBD
 48+  7FBD D1           1 pop de
 49+  7FBE 73               ld (hl),e
 50+  7FBF 23               inc hl
 51+  7FC0 72               ld (hl),d
 52+  7FC1 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 53+  7FC2 10 F9            djnz 1B
 54+  7FC4
 55+  7FC4 A7               and a
 56+  7FC5 28 05            jr z,5F
 57+  7FC7
 58+  7FC7 22 DF 85         ld (Stack_snapshot_disparos),hl
 59+  7FCA 18 03            jr 6F
 60+  7FCC
 61+  7FCC 22 DD 85     5 ld (Stack_snapshot),hl
 62+  7FCF ED 7B D9 85  6 ld sp,(Stack)
 63+  7FD3
 64+  7FD3 C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 65+  7FD4
 66+  7FD4
# file closed: Guarda_foto_registros.asm
845   7FD4
846   7FD4              	SAVESNA "Pruebas.sna", START
847   7FD4
848   7FD4
849   7FD4
# file closed: Banco_de_pruebas.asm
