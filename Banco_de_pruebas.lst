# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 68 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_der. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 30 80        	defw Badsat_izq_f8
 13+  8004 60 80        	defw Badsat_izq_f9
 14+  8006 90 80        	defw Badsat_izq_fa
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A F0 80        	defw Badsat_izq_fc
 17+  800C 20 81        	defw Badsat_izq_fd
 18+  800E 50 81        	defw Badsat_izq_fe
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 05/11/22
  5+  83C0
  6+  83C0              Indice_de_entidades									; 52 Bytes por entidad.
  7+  83C0
  8+  83C0 00 84        	defw Entidad_1
  9+  83C2 34 84        	defw Entidad_2
 10+  83C4 68 84        	defw Entidad_3
 11+  83C6 9C 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE D0 50        	defw $50d0	 									; (Posicion_actual).
 23+  83D0 10 83        	defw $8310 										; (Puntero_objeto).
 24+  83D2 00 10 16     	db 0,$10,$16									; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite).
 28+  83D8 00 83        	defw $8300	 									; (Puntero_DESPLZ).
 29+  83DA D0 50        	defw $50d0										; (Posicion_inicio).
 30+  83DC 04           	db 4 											; (Cuad_objeto).
 31+  83DD
 32+  83DD 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 33+  83E1
 34+  83E1 00 00        	db 0,0											; Variables_de_borrado
 35+  83E3 00 00        	defw 0											;	" " " " " " "
 36+  83E5 00 00        	defw 0											;	" " " " " " "
 37+  83E7 00 00 00     	db 0,0,0										;	" " " " " " "
 38+  83EA
 39+  83EA 00 00        	db 0,0											; Variables_de_pintado
 40+  83EC 00 00        	defw 0											;	" " " " " " "
 41+  83EE 00 00        	defw 0											;	" " " " " " "
 42+  83F0 00 00 00     	db 0,0,0										;	" " " " " " "
 43+  83F3
 44+  83F3 40 00        	db $40,0										; (Ctrl_0) / (Obj_dibujado).
 45+  83F5
 46+  83F5 00 00 F3 AF  	defw 0,$aff3 									; (Puntero_indice_mov) / (Puntero_mov).
 47+  83F9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 48+  83FC
 49+  83FC 02           	db 2 											; (Columnas).
 50+  83FD 00 00        	defw 0											; (Limite_horizontal).
 51+  83FF 00           	db 0											; (Limite_vertical).
 52+  8400
 53+  8400              ; ---------- ---------- ---------- ---------- ----------
 54+  8400
 55+  8400 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 56+  8402 00 00        	defw 0											; (Posicion_actual).
 57+  8404 00 00        	defw 0 											; (Puntero_objeto).
 58+  8406 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 59+  8409
 60+  8409 00           	db %00000000 									; (Attr).
 61+  840A 00 00        	defw 0											; (Indice_Sprite).
 62+  840C 00 00        	defw 0											; (Puntero_DESPLZ).
 63+  840E 00 00        	defw 0											; (Posicion_inicio).
 64+  8410 00           	db 0											; (Cuad_objeto).
 65+  8411
 66+  8411 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 67+  8415
 68+  8415 00 00        	db 0,0										    ; Variables_de_borrado
 69+  8417 00 00        	defw 0											;	" " " " " " "
 70+  8419 00 00        	defw 0											;	" " " " " " "
 71+  841B 00 00 00     	db 0,0,0										;	" " " " " " "
 72+  841E
 73+  841E 00 00        	db 0,0											; Variables_de_pintado
 74+  8420 00 00        	defw 0											;	" " " " " " "
 75+  8422 00 00        	defw 0											;	" " " " " " "
 76+  8424 00 00 00     	db 0,0,0										;	" " " " " " "
 77+  8427
 78+  8427 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 79+  8429
 80+  8429 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 81+  842D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 82+  8430
 83+  8430 00           	db 0 											; (Columnas).
 84+  8431 00 00        	defw 0											; (Limite_horizontal).
 85+  8433 00           	db 0											; (Limite_vertical).
 86+  8434
 87+  8434              ; ---------- ---------- ---------- ---------- ----------
 88+  8434
 89+  8434 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 90+  8436 00 00        	defw 0                                          ; (Posicion_actual).
 91+  8438 00 00        	defw 0											; (Puntero_objeto).
 92+  843A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 93+  843D
 94+  843D 02           	db %00000010									; (Attr).
 95+  843E 00 80        	defw Indice_Badsat_izq	                        ; (Indice_Sprite).
 96+  8440 00 00        	defw 0                                          ; (Puntero_DESPLZ).
 97+  8442 7E 47        	defw $477e                                      ; (Posicion_inicio).
 98+  8444 02           	db 2											; (Cuad_objeto).
 99+  8445
100+  8445 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
101+  8449
102+  8449 00 00        	db 0,0											; Variables_de_borrado
103+  844B 00 00        	defw 0										 	;	" " " " " " "
104+  844D 00 00        	defw 0											;	" " " " " " "
105+  844F 00 00 00     	db 0,0,0										;	" " " " " " "
106+  8452
107+  8452 00 00        	db 0,0											; Variables_de_pintado
108+  8454 00 00        	defw 0											;	" " " " " " "
109+  8456 00 00        	defw 0											;	" " " " " " "
110+  8458 00 00 00     	db 0,0,0										;	" " " " " " "
111+  845B
112+  845B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
113+  845D
114+  845D F3 8F 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
115+  8461 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
116+  8464
117+  8464 00           	db 0 											; (Columnas).
118+  8465 00 00        	defw 0											; (Limite_horizontal).
119+  8467 00           	db 0											; (Limite_vertical).
120+  8468
121+  8468              ; ---------- ---------- ---------- ---------- ----------
122+  8468
123+  8468 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
124+  846A 00 00        	defw 0                                          ; (Posicion_actual).
125+  846C 00 00        	defw 0											; (Puntero_objeto).
126+  846E 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
127+  8471
128+  8471 04           	db %00000100									; (Attr).
129+  8472 80 81        	defw Indice_Badsat_der                          ; (Indice_Sprite).
130+  8474 00 00        	defw 0                                          ; (Puntero_DESPLZ).
131+  8476 A1 47        	defw $47a1                                      ; (Posicion_inicio).
132+  8478 01           	db 1											; (Cuad_objeto).
133+  8479
134+  8479 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
135+  847D
136+  847D 00 00        	db 0,0											; Variables_de_borrado
137+  847F 00 00        	defw 0										 	;	" " " " " " "
138+  8481 00 00        	defw 0											;	" " " " " " "
139+  8483 00 00 00     	db 0,0,0										;	" " " " " " "
140+  8486
141+  8486 00 00        	db 0,0											; Variables_de_pintado
142+  8488 00 00        	defw 0											;	" " " " " " "
143+  848A 00 00        	defw 0											;	" " " " " " "
144+  848C 00 00 00     	db 0,0,0										;	" " " " " " "
145+  848F
146+  848F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
147+  8491
148+  8491 F5 8F 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
149+  8495 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
150+  8498
151+  8498 00           	db 0 											; (Columnas).
152+  8499 00 00        	defw 0											; (Limite_horizontal).
153+  849B 00           	db 0											; (Limite_vertical).
154+  849C
155+  849C              ; ---------- ---------- ---------- ---------- ----------
156+  849C
157+  849C 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
158+  849E 00 00        	defw 0                                          ; (Posicion_actual).
159+  84A0 00 00        	defw 0 											; (Puntero_objeto).
160+  84A2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
161+  84A5
162+  84A5 01           	db %00000001									; (Attr).
163+  84A6 00 80        	defw Indice_Badsat_izq                          ; (Indice_Sprite).
164+  84A8 00 00        	defw 0                                          ; (Puntero_DESPLZ).
165+  84AA BE 47        	defw $47be                                      ; (Posicion_inicio).
166+  84AC 00           	db 0											; (Cuad_objeto).
167+  84AD
168+  84AD 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
169+  84B1
170+  84B1 00 00        	db 0,0											; Variables_de_borrado
171+  84B3 00 00        	defw 0										 	;	" " " " " " "
172+  84B5 00 00        	defw 0											;	" " " " " " "
173+  84B7 00 00 00     	db 0,0,0										;	" " " " " " "
174+  84BA
175+  84BA 00 00        	db 0,0											; Variables_de_pintado
176+  84BC 00 00        	defw 0											;	" " " " " " "
177+  84BE 00 00        	defw 0											;	" " " " " " "
178+  84C0 00 00 00     	db 0,0,0										;	" " " " " " "
179+  84C3
180+  84C3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
181+  84C5
182+  84C5 E5 8F 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
183+  84C9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
184+  84CC
185+  84CC 00           	db 0 											; (Columnas).
186+  84CD 00 00        	defw 0											; (Limite_horizontal).
187+  84CF 00           	db 0											; (Limite_vertical).
188+  84D0
# file closed: Entidades.asm
 21   84D0
 22   84D0              ; ******************************************************************************************************************************************************************************************
 23   84D0              ; Constantes.
 24   84D0              ; ******************************************************************************************************************************************************************************************
 25   84D0              ;
 26   84D0              ; 8/11/22
 27   84D0              ;
 28   84D0              ; Constantes generales.
 29   84D0              ;
 30   84D0
 31   84D0              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84D0              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84D0              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84D0              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84D0              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84D0
 37   84D0              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84D0              ;                               				        ; De momento situamos este almacén en $7000.
 39   84D0
 40   84D0
 41   84D0              ; ******************************************************************************************************************************************************************************************
 42   84D0              ; Variables.
 43   84D0              ; ******************************************************************************************************************************************************************************************
 44   84D0              ;
 45   84D0              ; 10/11/22
 46   84D0              ;
 47   84D0              ; Variables de DRAW. (Motor principal).
 48   84D0              ;
 49   84D0              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84D0
 51   84D0 02           Filas db 2												; Filas. [DRAW]
 52   84D1 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84D2 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84D4 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84D6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84D7              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84D7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84D7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84D7 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84D8 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84D9
 62   84D9              ; ---------- ---------- ----------
 63   84D9
 64   84D9
 65   84D9 04           Attr db %00000100										; Atributos de la entidad:
 66   84DA
 67   84DA              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84DA              ;
 69   84DA              ;	COLORES: 0 ..... NEGRO
 70   84DA              ;    		 1 ..... AZUL
 71   84DA              ; 			 2 ..... ROJO
 72   84DA              ;			 3 ..... MAGENTA
 73   84DA              ; 			 4 ..... VERDE
 74   84DA              ; 			 5 ..... CIAN
 75   84DA              ;			 6 ..... AMARILLO
 76   84DA              ; 			 7 ..... BLANCO
 77   84DA
 78   84DA 80 81        Indice_Sprite defw Indice_Badsat_der
 79   84DC 00 00        Puntero_DESPLZ defw 0
 80   84DE 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 81   84E0 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 82   84E1
 83   84E1              ; Variables de objeto. (Características).
 84   84E1
 85   84E1 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 86   84E2 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 87   84E3 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 88   84E4 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 89   84E5
 90   84E5 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 91   84E7 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 92   84E9 00 00        	defw 0
 93   84EB 00 00 00     	db 0,0,0
 94   84EE
 95   84EE 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 96   84F0 00 00        	defw 0
 97   84F2 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 98   84F4 00 00 00     	db 0,0,0
 99   84F7
100   84F7              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
101   84F7
102   84F7 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
103   84F8              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
104   84F8              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
105   84F8              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
106   84F8              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
107   84F8              ;
108   84F8              ; 														DESCRIPCIÖN:
109   84F8              ;
110   84F8              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
111   84F8              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
112   84F8              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
113   84F8              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
114   84F8              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
115   84F8              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
116   84F8              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
117   84F8              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
118   84F8              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
119   84F8              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
120   84F8              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
121   84F8              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
122   84F8              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
123   84F8              ;
124   84F8              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
125   84F8              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
126   84F8              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
127   84F8
128   84F8 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
129   84F9
130   84F9              ; Movimiento.
131   84F9
132   84F9 E7 8F        Puntero_indice_mov defw Indice_mov_Derecha
133   84FB 00 00        Puntero_mov defw 0
134   84FD 00           Contador_db_mov db 0
135   84FE 00           Incrementa_puntero db 0
136   84FF 00           Repetimos_db db 0
137   8500
138   8500
139   8500              ; Variables de funcionamiento. [DRAW].
140   8500
141   8500 00           Columnas db 0
142   8501 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8503              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8503 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8504
146   8504              ; 52 Bytes por entidad.
147   8504              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8504              ;					         		---------;      ;---------
149   8504
150   8504
151   8504              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8504              ; Gestión de ENTIDADES.
153   8504
154   8504 00 00        Puntero_store_entidades defw 0
155   8506 00 00        Puntero_restore_entidades defw 0
156   8508 00 00        Indice_restore defw 0
157   850A 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
158   850B 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   850C              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   850C              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   850C              ;														; _ (Numero_de_malotes)="0".
162   850C 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   850E              ;														; _variable para almacenar lo posición del puntero_
164   850E              ; 														; _de pila, SP.
165   850E 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8510              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8510 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8512              ;														; _el snapshot de los registros de la siguiente entidad.
169   8512              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8512
171   8512              ; Gestión de FRAMES.
172   8512
173   8512 00           Switch db 0
174   8513
175   8513              ; Variables de Raster y localización en pantalla.
176   8513
177   8513 00 FF        Temp_Raster defw $ff00
178   8515
179   8515              ; Rutina principal *************************************************************************************************************************************************************************
180   8515              ;
181   8515              ;	14/11/22
182   8515
183   8515 31 FF FF     START ld sp,$ffff
184   8518
185   8518 3E A0        	ld a,$a0
186   851A ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   851C ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   851E F3           	DI
189   851F
190   851F 3E 01        	ld a,1
191   8521 D3 FE        	out ($fe),a
192   8523
193   8523 3E 07        	ld a,%00000111
194   8525 CD 97 8C     	call Cls
195   8528
196   8528              ;	call Pinta_FILAS
197   8528
198   8528 CD C9 86     	call Pulsa_ENTER
199   852B
200   852B 21 0A 85     	ld hl,Numero_de_entidades
201   852E 46           	ld b,(hl)
202   852F 04           	inc b
203   8530 05           	dec b
204   8531 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8533
206   8533              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8533              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8533              ;	Pintamos el resto de entidades:
209   8533
210   8533 CD 2A 86     	call Inicia_punteros_de_entidades
211   8536
212   8536 C5           1 push bc  												; Guardo el contador de entidades.
213   8537 CD 59 86      	call Inicia_Puntero_objeto
214   853A CD 20 87     	call Draw
215   853D CD A0 7F     	call Guarda_foto_registros
216   8540 CD 76 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
217   8543 C1           	pop bc
218   8544 10 F0        	djnz 1B  											; Decremento el contador de entidades.
219   8546
220   8546              ; 	Amadeus.
221   8546
222   8546 CD B7 86     3 call Restore_Amadeus
223   8549 CD FA 89     	call Prepara_draw
224   854C CD 34 89     	call calcula_CColumnass
225   854F CD 6B 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
226   8552 CD C0 89     	call Define_rutina_de_impresion
227   8555 CD A0 7F     	call Guarda_foto_registros
228   8558
229   8558              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
230   8558
231   8558 CD 2A 86     	call Inicia_punteros_de_entidades
232   855B CD A5 86     	call Restore_Primera_entidad
233   855E
234   855E 3A 0A 85     	ld a,(Numero_de_entidades)
235   8561 3C           	inc a
236   8562 32 0B 85     	ld (Numero_de_malotes),a
237   8565
238   8565 FB           2 ei
239   8566 18 FD        	jr 2B
240   8568
241   8568              ; -----------------------------------------------------------------------------------
242   8568
243   8568              Frame
244   8568
245   8568              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
246   8568              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
247   8568
248   8568 3E 07            ld a,7
249   856A D3 FE            out ($fe),a
250   856C
251   856C CD 24 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   856F
253   856F 3E 01            ld a,1
254   8571 D3 FE            out ($fe),a
255   8573
256   8573              ; ----------------------------------------------------------------------
257   8573
258   8573 21 00 70     	ld hl,Album_de_fotos
259   8576 22 10 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
260   8579              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
261   8579 3A 0A 85         ld a,(Numero_de_entidades)
262   857C 47               ld b,a
263   857D
264   857D C5           2 push bc
265   857E
266   857E CD B9 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
267   8581
268   8581 3A F7 84      	ld a,(Ctrl_0)
269   8584 CB 67        	bit 4,a
270   8586 28 08        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
271   8588
272   8588 CD F1 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   858B
274   858B 21 F7 84     	ld hl,Ctrl_0
275   858E CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
276   8590
277   8590 CD 76 86     1 call Store_Restore_entidades
278   8593
279   8593 C1           	pop bc
280   8594 10 E7        	djnz 2B
281   8596
282   8596              ; ----- 27/1/23
283   8596
284   8596 CD B7 86     	call Restore_Amadeus
285   8599 CD B9 85     	call Mov_obj
286   859C 3A F7 84     	ld a,(Ctrl_0)
287   859F CB 67        	bit 4,a
288   85A1 28 08        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
289   85A3 CD F1 85         call Borra_Pinta_obj								; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
290   85A6 21 F7 84     	ld hl,Ctrl_0
291   85A9 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
292   85AB
293   85AB              ; -----
294   85AB
295   85AB CD 2A 86     3 call Inicia_punteros_de_entidades
296   85AE CD A5 86     	call Restore_Primera_entidad
297   85B1 CD 40 86     	call Calcula_numero_de_malotes
298   85B4
299   85B4 3E 00        	ld a,0
300   85B6 D3 FE        	out ($fe),a
301   85B8
302   85B8 C9           	ret
303   85B9
304   85B9              ; --------------------------------------------------------------------------------------------------------------
305   85B9              ;
306   85B9              Mov_obj
307   85B9
308   85B9              ; En este punto Draw tiene cargado los 50 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
309   85B9
310   85B9 AF           	xor a
311   85BA 32 F8 84     	ld (Obj_dibujado),a
312   85BD CD FB 85         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
313   85C0              ;														; Obj_dibujado="0".
314   85C0              ; Movemos Amadeus o enemigos...
315   85C0
316   85C0 3A F7 84     	ld a,(Ctrl_0) 										; Detectamos si el Sprite que vamos a desplazar es AMADEUS,_
317   85C3 CB 77        	bit 6,a 											; _si es así, leeremos el teclado para detectar la dirección.
318   85C5 C4 DD 86     	call nz,Movimiento_Amadeus 							; (Mov_right), (Mov_left).
319   85C8
320   85C8 3A F7 84     	ld a,(Ctrl_0)
321   85CB CB 77        	bit 6,a
322   85CD CC F7 8F     	call z,Movimiento									; Desplazamos el objeto. MOVEMOS !!!!!
323   85D0
324   85D0 3A F7 84     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
325   85D3 CB 67        	bit 4,a
326   85D5 C8           	ret z
327   85D6
328   85D6              ; ---------
329   85D6
330   85D6 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
331   85D8 32 F8 84     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
332   85DB CD FB 85         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
333   85DE
334   85DE CD 12 86         call Repone_borrar
335   85E1
336   85E1              ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
337   85E1
338   85E1 CD FA 89     	call Prepara_draw
339   85E4 CD 34 89     	call calcula_CColumnass
340   85E7 CD 6B 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
341   85EA CD C0 89     	call Define_rutina_de_impresion
342   85ED CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
343   85F0
344   85F0 C9           	ret
345   85F1
346   85F1              ; --------------------------------------------------------------------------------------------------------------
347   85F1              ;
348   85F1 CD 1E 86     Borra_Pinta_obj call Repone_pintar
349   85F4 CD 20 87     	call Draw
350   85F7 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
351   85FA C9           	ret
352   85FB
353   85FB              ; --------------------------------------------------------------------------------------------------------------
354   85FB
355   85FB 21 D0 84     Prepara_var_pintado_borrado	ld hl,Filas
356   85FE 3A F8 84     	ld a,(Obj_dibujado)
357   8601 A7           	and a
358   8602 28 05        	jr z,1F
359   8604 11 EE 84     	ld de,Variables_de_pintado
360   8607 18 03        	jr 2F
361   8609 11 E5 84     1 ld de,Variables_de_borrado
362   860C 01 09 00     2 ld bc,9
363   860F ED B0        	ldir
364   8611 C9           	ret
365   8612
366   8612 21 E5 84     Repone_borrar ld hl,Variables_de_borrado
367   8615 11 D0 84     	ld de,Filas
368   8618 01 09 00     	ld bc,9
369   861B ED B0        	ldir
370   861D C9           	ret
371   861E
372   861E 21 EE 84     Repone_pintar ld hl,Variables_de_pintado
373   8621 11 D0 84     	ld de,Filas
374   8624 01 09 00     	ld bc,9
375   8627 ED B0        	ldir
376   8629 C9           	ret
377   862A
378   862A              ;Prepara_caja_de_borrado ld hl,(Caja_de_DESPLZ)
379   862A              ;	ld (Caja_de_BORRADO),hl
380   862A              ;	ret
381   862A
382   862A              ; *************************************************************************************************************************************************************
383   862A              ;
384   862A              ; 8/1/23
385   862A              ;
386   862A              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
387   862A              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
388   862A              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
389   862A
390   862A              ; Destruye HL y DE !!!!!
391   862A
392   862A 21 C0 83     Inicia_punteros_de_entidades ld hl,Indice_de_entidades
393   862D CD 53 86         call Extrae_address
394   8630 22 04 85         ld (Puntero_store_entidades),hl
395   8633 21 C2 83     	ld hl,Indice_de_entidades+2
396   8636 22 08 85     	ld (Indice_restore),hl
397   8639 CD 53 86     	call Extrae_address
398   863C 22 06 85     	ld (Puntero_restore_entidades),hl
399   863F C9               ret
400   8640
401   8640              ; -------------------------------------------------------------------------------------------------------------
402   8640              ;
403   8640              ; 7/1/23
404   8640              ;
405   8640
406   8640 2A 10 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
407   8643 AF           	xor a
408   8644 67           	ld h,a
409   8645 7D           	ld a,l
410   8646 D6 06        1 sub 6
411   8648 28 03        	jr z,2F
412   864A 24           	inc h
413   864B 18 F9        	jr 1B
414   864D 24           2 inc h
415   864E 7C           	ld a,h
416   864F 32 0B 85     	ld (Numero_de_malotes),a
417   8652 C9           	ret
418   8653
419   8653              ; *************************************************************************************************************************************************************
420   8653              ;
421   8653              ; 20/10/22
422   8653              ;
423   8653              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
424   8653              ;
425   8653              ; Destruye el puntero y DE !!!!!
426   8653
427   8653 5E           Extrae_address ld e,(hl)
428   8654 23           	inc hl
429   8655 56           	ld d,(hl)
430   8656 2B           	dec hl
431   8657 EB           	ex de,hl
432   8658 C9           	ret
433   8659
434   8659              ; *************************************************************************************************************************************************************
435   8659              ;
436   8659              ;	21/9/22
437   8659              ;
438   8659              ;   Destruye HL y BC !!!!!,
439   8659
440   8659 2A DA 84     Inicia_Puntero_objeto ld hl,(Indice_Sprite)
441   865C 22 DC 84     	ld (Puntero_DESPLZ),hl
442   865F CD 53 86     	call Extrae_address
443   8662 22 D4 84     	ld (Puntero_objeto),hl
444   8665
445   8665              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
446   8665
447   8665 21 10 83     	ld hl,Amadeus
448   8668 ED 4B D4 84  	ld bc,(Puntero_objeto)
449   866C B7 ED 42     	sub hl,bc
450   866F C0           	ret nz
451   8670
452   8670 21 F7 84     	ld hl,Ctrl_0
453   8673 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
454   8675
455   8675 C9            	ret 												; _de nuestra nave en los extremos.
456   8676
457   8676              ; *************************************************************************************************************************************************************
458   8676              ;
459   8676              ;	8/1/23
460   8676              ;
461   8676              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
462   8676              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
463   8676
464   8676              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
465   8676              ;	_de la 2ª y 3ª entidad respectivamente.
466   8676
467   8676
468   8676
469   8676              Store_Restore_entidades
470   8676
471   8676 E5           	push hl
472   8677 D5           	push de
473   8678 C5            	push bc
474   8679
475   8679              ;	STORE !!!!!
476   8679              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
477   8679
478   8679 21 D0 84     	ld hl,Filas
479   867C ED 5B 04 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
480   8680 01 34 00     	ld bc,52
481   8683 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
482   8685
483   8685              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
484   8685
485   8685 2A 06 85     	ld hl,(Puntero_restore_entidades)
486   8688 22 04 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
487   868B 11 D0 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
488   868E 01 34 00     	ld bc,52
489   8691 ED B0        	ldir
490   8693
491   8693              ;	Incrementa RESTORE !!!!!
492   8693
493   8693 2A 08 85         ld hl,(Indice_restore)
494   8696 23           	inc hl
495   8697 23           	inc hl
496   8698 22 08 85     	ld (Indice_restore),hl
497   869B CD 53 86         call Extrae_address
498   869E 22 06 85         ld (Puntero_restore_entidades),hl
499   86A1
500   86A1 C1           	pop bc
501   86A2 D1           	pop de
502   86A3 E1           	pop hl
503   86A4
504   86A4 C9           	ret
505   86A5
506   86A5              ; **************************************************************************************************
507   86A5              ;
508   86A5              ;	29/10/22
509   86A5              ;
510   86A5              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
511   86A5
512   86A5 E5           Restore_Primera_entidad push hl
513   86A6 D5           	push de
514   86A7 C5            	push bc
515   86A8 2A 04 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
516   86AB 11 D0 84     	ld de,Filas
517   86AE 01 34 00     	ld bc,52
518   86B1 ED B0        	ldir
519   86B3 C1           	pop bc
520   86B4 D1           	pop de
521   86B5 E1           	pop hl
522   86B6 C9           	ret
523   86B7
524   86B7              ; **************************************************************************************************
525   86B7              ;
526   86B7              ;	25/01/23
527   86B7              ;
528   86B7              ;	Restore_Amadeus
529   86B7              ;
530   86B7              ;	Almacenamos en su base de datos, los parámetros de la entidad contenida en DRAW y cargamos los_
531   86B7              ;	_ parámetros de AMADEUS.
532   86B7
533   86B7 E5           Restore_Amadeus	push hl
534   86B8 D5           	push de
535   86B9 C5            	push bc
536   86BA
537   86BA 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
538   86BD 11 D0 84     	ld de,Filas
539   86C0 01 34 00     	ld bc,52
540   86C3 ED B0        	ldir
541   86C5
542   86C5 C1           	pop bc
543   86C6 D1           	pop de
544   86C7 E1           	pop hl
545   86C8
546   86C8 C9           	ret
547   86C9
548   86C9              ; *************************************************************************************************************************************************************
549   86C9              ;
550   86C9              ; Teclado.
551   86C9
552   86C9 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
553   86CB DB FE        	in a,($fe)
554   86CD E6 01        	and $01
555   86CF 28 02        	jr z,1f
556   86D1 18 F6        	jr Pulsa_ENTER
557   86D3 C9           1 ret
558   86D4
559   86D4              ; **************************************************************************************************
560   86D4              ;
561   86D4              ; Temporización.
562   86D4
563   86D4              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
564   86D4              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
565   86D4              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
566   86D4              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
567   86D4
568   86D4              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
569   86D4              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
570   86D4              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
571   86D4
572   86D4              ; A partir de $4f61 no hace falta DELAY.
573   86D4
574   86D4              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
575   86D4
576   86D4 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
577   86D7 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
578   86D8 78           	LD A,B
579   86D9 A7           	AND A
580   86DA 20 FB        	JR NZ,wait
581   86DC C9           	RET
582   86DD
583   86DD              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
584   86DD              ;
585   86DD              ;	21/4/22
586   86DD
587   86DD              Movimiento_Amadeus
588   86DD
589   86DD 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
590   86DF DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
591   86E1 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
592   86E3 CC FA 8D         call z,Mov_left											;			"			"			"			"			"			"			"			"
593   86E6 3E F7        	ld a,$f7
594   86E8 DB FE        	in a,($fe)
595   86EA E6 01        	and $01
596   86EC C8           	ret z
597   86ED 3E F7        	ld a,$f7
598   86EF DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
599   86F1 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
600   86F3 CC 07 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
601   86F6 C9               ret
602   86F7
603   86F7              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
604   86F7
605   86F7              ; Pinta indicadores de FILAS. ------------------------------------------------------
606   86F7
607   86F7 21 10 40     Pinta_FILAS ld hl,$4010
608   86FA              ;	ld b,9
609   86FA              ;2 push hl
610   86FA              ;	push bc
611   86FA 06 BF        	ld b,$bf
612   86FC 36 80        1 ld (hl),%10000000
613   86FE CD 06 8A     	call NextScan
614   8701 10 F9        	djnz 1B
615   8703              ;	pop bc
616   8703              ;	pop hl
617   8703              ;	inc l
618   8703              ;	djnz 2B
619   8703
620   8703 06 03        	ld b,3
621   8705 21 00 47         ld hl,$4700
622   8708 CD 0E 87     3 call Bucle_1
623   870B 10 FB            djnz 3B
624   870D C9               ret
625   870E
626   870E C5           Bucle_1 push bc
627   870F E5                   push hl
628   8710 D1                   pop de
629   8711 13                   inc de
630   8712 01 FF 00             ld bc,255
631   8715 36 FF                ld (hl),255
632   8717 ED B0                ldir
633   8719 23                   inc hl
634   871A 3E 07                ld a,7
635   871C 84                   add a,h
636   871D 67                   ld h,a
637   871E C1                   pop bc
638   871F C9                   ret
639   8720
640   8720              ; ---------------------------------------------------------------
641   8720
642   8720              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8720              ; ******************************************************************************************************************************************************************************************
  2+  8720              ;
  3+  8720              ; 01/23
  4+  8720              ;
  5+  8720              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8720
  7+  8720 CD FA 89     Draw call Prepara_draw
  8+  8723 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8724 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8725 28 05        	jr z,2F
 11+  8727 3A E0 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  872A 18 0C        	jr 1F
 13+  872C 2A DE 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  872F 22 D2 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  8732 CD C1 88     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  8735              ;													; _la esquina superior izquierda de la pantalla.
 17+  8735 CD 79 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8738 3A F7 84     1 ld a,(Ctrl_0)
 19+  873B CB 6F        	bit 5,a
 20+  873D 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  873F
 22+  873F CD 57 87     	call Comprueba_limite_horizontal
 23+  8742 CD E7 87     	call Comprueba_limite_vertical
 24+  8745
 25+  8745              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  8745
 27+  8745 CD 34 89     3 call calcula_CColumnass
 28+  8748 CD 6B 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  874B CD C0 89     	call Define_rutina_de_impresion
 30+  874E
 31+  874E 3A F7 84     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  8751 CB AF        	res 5,a											; _a ser de utilidad.
 33+  8753 32 F7 84     	ld (Ctrl_0),a
 34+  8756
 35+  8756 C9           	ret
 36+  8757
 37+  8757              ; *******************************************************************************************************************************************************************************************
 38+  8757              ;	21/01/23
 39+  8757              ;
 40+  8757              ; 	Comprueba_limite_horizontal.
 41+  8757              ;
 42+  8757              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  8757              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  8757              ;
 45+  8757              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  8757              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  8757              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  8757              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  8757
 50+  8757
 51+  8757
 52+  8757 3A F7 84     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  875A CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  875C 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  875E E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  8760 32 F7 84     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  8763 18 09            jr 6F
 58+  8765 CB 5F        1 bit 3,a
 59+  8767 28 0A            jr z,2F
 60+  8769 E6 F7            and $f7
 61+  876B 32 F7 84         ld (Ctrl_0),a
 62+  876E CD C1 88     6 call Inicializacion
 63+  8771 18 5B            jr 5F
 64+  8773 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  8774
 66+  8774              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  8774              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  8774
 69+  8774 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  8775 2A 01 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  8778 CD 5F 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  877B 67           	ld h,a
 73+  877C EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  877D CD 5F 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8780 67           	ld h,a
 76+  8781 A7           	and a
 77+  8782 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8784 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8785 3A E0 84     	ld a,(Cuad_objeto)
 80+  8788 FE 02        	cp 2
 81+  878A 38 1E        	jr c,3F
 82+  878C 28 1C        	jr z,3F
 83+  878E 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  878F 28 23            jr z,7F
 85+  8791 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8793 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8795 E1           	pop hl
 88+  8796
 89+  8796              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8796              ; _para indicar con E="2" en caso necesario.
 91+  8796
 92+  8796 E5               push hl
 93+  8797 C5               push bc
 94+  8798 CD 5F 8C     	call calcula_tercio
 95+  879B FE 01        	cp 1
 96+  879D 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  879F CD CF 87         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87A2 28 26            jr z,9F
 99+  87A4 38 24            jr c,9F
100+  87A6 1E 00        11 ld e,0
101+  87A8 18 22            jr 8F
102+  87AA 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  87AB 28 07        	jr z, 7F
104+  87AD 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  87AF 1E 00         	ld e,0
106+  87B1 E1           	pop hl
107+  87B2 18 04        	jr 4F
108+  87B4 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  87B6 18 15            jr 10F
110+  87B8
111+  87B8              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  87B8              ; _para indicar con E="2" en caso necesario.
113+  87B8
114+  87B8 E5           4 push hl
115+  87B9 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  87BA CD 5F 8C     	call calcula_tercio
117+  87BD FE 01        	cp 1
118+  87BF 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  87C1 CD CF 87         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  87C4 28 04            jr z,9F
121+  87C6 30 02            jr nc,9F
122+  87C8 18 02        	jr 8F
123+  87CA 1E 02        9 ld e,2
124+  87CC C1           8 pop bc
125+  87CD E1           10 pop hl
126+  87CE C9           5 ret
127+  87CF
128+  87CF              ; --------------------
129+  87CF              ;
130+  87CF              ; 25/08/22
131+  87CF
132+  87CF CD 5F 8C     Comprueba_centro call calcula_tercio
133+  87D2 67               ld h,a
134+  87D3 08           	ex af,af
135+  87D4 FE 02        	cp 2
136+  87D6 38 07        	jr c,1F
137+  87D8 28 05        	jr z,1F
138+  87DA 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  87DD 18 03        	jr 2F
140+  87DF 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  87E2 08           2 ex af,af
142+  87E3 A7               and a
143+  87E4 ED 42            sbc hl,bc
144+  87E6 C9               ret
145+  87E7
146+  87E7              ; *********************************************************************************************************************************************************************************************
147+  87E7              ;
148+  87E7              ;   16/8/22
149+  87E7              ;
150+  87E7              ;	Comprueba_limite_vertical
151+  87E7              ;
152+  87E7              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  87E7              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  87E7              ;
155+  87E7
156+  87E7 2A D2 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  87EA 7D           	ld a,l
158+  87EB E6 1F        	and $1F
159+  87ED 57           	ld d,a
160+  87EE 3A 03 85     	ld a,(Limite_vertical)
161+  87F1 BA           	cp d 											; Límite - Posición.
162+  87F2 08           	ex af,af 										; Resultado de CP d en F'.
163+  87F3 3A E0 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  87F6 CB 47        	bit 0,a
165+  87F8 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  87FA
167+  87FA              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  87FA
169+  87FA 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  87FB 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  87FD
172+  87FD              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  87FD              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  87FD
175+  87FD 3A D7 84         ld a,(Coordenada_X)
176+  8800 16 0F            ld d,Centro_izquierda
177+  8802 A7               and a
178+  8803 92               sub d 											 ; Posición - Centro_izquierda.
179+  8804 28 1E            jr z,3F
180+  8806 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  8808              ;                                                    ; _salimos sin modificar nada.
182+  8808 18 0E            jr 2F
183+  880A 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  880B 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  880D
186+  880D              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  880D              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  880D
189+  880D 3A D7 84         ld a,(Coordenada_X)
190+  8810 16 10            ld d,Centro_derecha
191+  8812 A7               and a
192+  8813 92               sub d
193+  8814 28 0E            jr z,3F
194+  8816 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  8818              ;                                                    ; _salimos sin modificar nada.
196+  8818 CB 43        2 bit 0,e
197+  881A 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  881C C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  881D CD B1 88         call Modificaccionne
200+  8820 C1           	pop bc
201+  8821 CD C1 88         call Inicializacion
202+  8824 C9           3 ret 				 								 ; Salimos de la rutina.
203+  8825
204+  8825              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  8825
206+  8825 C5           4 push bc
207+  8826 01 D1 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  8829 0A           	ld a,(bc)
209+  882A 3D           	dec a
210+  882B 47           	ld b,a 											 ; Columnas-1 en B.
211+  882C 7D           	ld a,l
212+  882D 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  882E CB 47        	bit 0,a
214+  8830 28 03        	jr z,5F
215+  8832 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  8833 18 2E        	jr 7F
217+  8835
218+  8835              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  8835
220+  8835 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  8836 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  8837 3A F7 84     	ld a,(Ctrl_0)
223+  883A CB 4F        	bit 1,a
224+  883C 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  883E F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  883F
227+  883F              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  883F
229+  883F 1C               inc e
230+  8840 1D               dec e
231+  8841 20 07            jr nz,12F
232+  8843 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  8844 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  8845 22 D2 84     	ld (Posicion_actual),hl
235+  8848 18 44        13 jr 9F
236+  884A CB 43        12 bit 0,e
237+  884C 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  884E              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  884E C1           	pop bc
240+  884F 18 D3        	jr 3B
241+  8851 80           14 add b
242+  8852 6F               ld l,a
243+  8853 22 D2 84     	ld (Posicion_actual),hl
244+  8856 CD B1 88         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  8859 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  885B E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  885D 32 F7 84         ld (Ctrl_0),a
248+  8860 F1           	pop af
249+  8861 18 2B        	jr 9F
250+  8863
251+  8863              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  8863
253+  8863 F5           7 push af
254+  8864 3A F7 84     	ld a,(Ctrl_0)
255+  8867 CB 47        	bit 0,a
256+  8869 20 1D        	jr nz,8F
257+  886B F1           	pop af
258+  886C
259+  886C              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  886C
261+  886C 1C           	inc e
262+  886D 1D               dec e
263+  886E 20 07            jr nz,10F
264+  8870 90           	sub b
265+  8871 6F               ld l,a
266+  8872 22 D2 84     	ld (Posicion_actual),hl
267+  8875 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  8877              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  8877 CB 43        10 bit 0,e
270+  8879 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  887B              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  887B C1           	pop bc
273+  887C 18 A6        	jr 3B
274+  887E 90           16 sub b
275+  887F 6F               ld l,a
276+  8880 22 D2 84     	ld (Posicion_actual),hl
277+  8883 CD B1 88         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  8886 18 06            jr 9F
279+  8888 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  888A 32 F7 84         ld (Ctrl_0),a
281+  888D F1           	pop af
282+  888E C1           9 pop bc
283+  888F 1E 00        	ld e,0
284+  8891 CD C1 88         call Inicializacion
285+  8894 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8895 08           	ex af,af
287+  8896 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  8897 18 8B            jr 3B
289+  8899
290+  8899              ; --------------------
291+  8899
292+  8899 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  889B CD 15 8A     1 call PreviousScan
294+  889E 10 FB            djnz 1B
295+  88A0 22 D2 84     	ld (Posicion_actual),hl
296+  88A3 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88A4 C9           	ret
298+  88A5
299+  88A5              ; --------------------
300+  88A5
301+  88A5 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  88A7 CD 06 8A     1 call NextScan
303+  88AA 10 FB            djnz 1B
304+  88AC 22 D2 84     	ld (Posicion_actual),hl
305+  88AF AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  88B0 C9           	ret
307+  88B1
308+  88B1              ; --------------------
309+  88B1              ;
310+  88B1              ;	22/01/23
311+  88B1              ;
312+  88B1              ;	E="1". Hemos cambiado de cuadrante.
313+  88B1              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  88B1              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  88B1
316+  88B1
317+  88B1              Modificaccionne
318+  88B1
319+  88B1 3A E0 84     	ld a,(Cuad_objeto)
320+  88B4 FE 02        	cp 2
321+  88B6 CC 99 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  88B9 DC 99 88         call c,Modifica_Pos_actual
323+  88BC C8           	ret z
324+  88BD CD A5 88         call Modifica_Pos_actual2
325+  88C0 C9               ret
326+  88C1
327+  88C1              ; *************************************************************************************************************************************************************************************************
328+  88C1              ;
329+  88C1              ;	13/8/22
330+  88C1              ;
331+  88C1              ;	Inicializacion
332+  88C1              ;
333+  88C1              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  88C1              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  88C1              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  88C1              ;
337+  88C1              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  88C1              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  88C1              ;	_ desaparece/aparece.
340+  88C1
341+  88C1              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  88C1              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  88C1              ;
344+  88C1              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  88C1              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  88C1              ; 		   [E] ="0"
347+  88C1
348+  88C1              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  88C1
350+  88C1 CD 5F 8C     Inicializacion call calcula_tercio
351+  88C4 28 36        	jr z,primit
352+  88C6 E6 02        	and 2
353+  88C8 20 07        	jr nz,segmit
354+  88CA 7D           	ld a,l
355+  88CB FE 7F        	cp $7f
356+  88CD 38 2D        	jr c,primit
357+  88CF 28 2B        	jr z,primit
358+  88D1 CD 2E 89     segmit call column
359+  88D4 38 13        	jr c,tercuad
360+  88D6 3E 04        cuarcuad ld a,4
361+  88D8 32 E0 84     	ld (Cuad_objeto),a
362+  88DB 21 20 48     	ld hl,$4820
363+  88DE 22 01 85     	ld (Limite_horizontal),hl
364+  88E1 21 03 85     	ld hl,Limite_vertical
365+  88E4 36 0D        	ld (hl),$0d
366+  88E6 08           	ex af,af
367+  88E7 18 3C        	jr 1F
368+  88E9              tercuad
369+  88E9              ;	call Fija_punteros
370+  88E9 3E 03        	ld a,3
371+  88EB 32 E0 84     	ld (Cuad_objeto),a
372+  88EE 21 20 48     	ld hl,$4820
373+  88F1 22 01 85     	ld (Limite_horizontal),hl
374+  88F4 21 03 85     	ld hl,Limite_vertical
375+  88F7 36 12        	ld (hl),$12
376+  88F9 08           	ex af,af
377+  88FA 18 29        	jr 1F
378+  88FC CD 2E 89     primit call column
379+  88FF 38 13        	jr c, primcuad
380+  8901              segcuad
381+  8901              ;	call Fija_punteros
382+  8901 3E 02        	ld a,2
383+  8903 32 E0 84     	ld (Cuad_objeto),a
384+  8906 21 C0 4F     	ld hl,$4fc0
385+  8909 22 01 85     	ld (Limite_horizontal),hl
386+  890C 21 03 85     	ld hl,Limite_vertical
387+  890F 36 0D        	ld (hl),$0d
388+  8911 08           	ex af,af
389+  8912 18 11        	jr 1F
390+  8914              primcuad
391+  8914              ;	call Fija_punteros
392+  8914 3E 01        	ld a,1
393+  8916 32 E0 84     	ld (Cuad_objeto),a
394+  8919 21 C0 4F     	ld hl,$4fc0
395+  891C 22 01 85     	ld (Limite_horizontal),hl
396+  891F 21 03 85     	ld hl,Limite_vertical
397+  8922 36 12        	ld (hl),$12
398+  8924 08           	ex af,af
399+  8925 CD 6F 8F     1 call Genera_coordenadas
400+  8928 21 F7 84     	ld hl,Ctrl_0
401+  892B CB EE        	set 5,(hl)
402+  892D C9           	ret
403+  892E
404+  892E              ; ------------------------------------------------------------------------------------------------------------------
405+  892E
406+  892E              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  892E              ;
408+  892E              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  892E
410+  892E 7D           column ld a,l
411+  892F E6 1F        	and $1f
412+  8931 FE 10         	cp $10
413+  8933 C9            	ret
414+  8934
415+  8934              ; --------------------------------------------------------------------------------------------------------------------
416+  8934              ;
417+  8934              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  8934              ;
419+  8934              ; 14/12/22
420+  8934              ;
421+  8934              ;	Modifica: A y BC.
422+  8934
423+  8934 3A E0 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  8937 E6 01        	and 1
425+  8939 28 17        	jr z,1F
426+  893B
427+  893B              ; Nos encontramos en la parte izquierda de la pantalla
428+  893B
429+  893B 3A D7 84     	ld a,(Coordenada_X)
430+  893E 47           	ld b,a
431+  893F 04           	inc b											; (Coordenada_X)+1 en B.
432+  8940 79           	ld a,c
433+  8941 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  8942 38 08        	jr c,2F
435+  8944 47           	ld b,a
436+  8945 79           	ld a,c
437+  8946 90           	sub b
438+  8947 32 00 85     	ld (Columnas),a
439+  894A 18 1B        	jr 4F
440+  894C 79           2 ld a,c
441+  894D 32 00 85     	ld (Columnas),a
442+  8950 18 15        	jr 4F
443+  8952
444+  8952              ; Nos encontramos en la parte derecha de la pantalla.
445+  8952
446+  8952 3A D7 84     1 ld a,(Coordenada_X)
447+  8955 81           	add c
448+  8956 3D           	dec a
449+  8957 D6 1F        	sub $1f
450+  8959 38 08        	jr c,3F
451+  895B 47           	ld b,a
452+  895C 79           	ld a,c
453+  895D 90           	sub b
454+  895E 32 00 85     	ld (Columnas),a
455+  8961 18 04        	jr 4F
456+  8963 79           3 ld a,c
457+  8964 32 00 85     	ld (Columnas),a
458+  8967 D9           4 exx
459+  8968 4F           	ld c,a
460+  8969 D9           	exx
461+  896A C9            ret
462+  896B
463+  896B              ; --------------------------------------------------------------------------------------------------------------------
464+  896B              ;
465+  896B              ; 7/1/23
466+  896B              ;
467+  896B              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  896B              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  896B              ;
470+  896B              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  896B              ;	DESTRUYE: HL,B Y A.
472+  896B
473+  896B 3A E0 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  896E FE 02        	cp 2
475+  8970 38 18        	jr c,1F
476+  8972 28 16        	jr z,1F
477+  8974 E6 01        	and 1
478+  8976 28 0D        	jr z,3F
479+  8978
480+  8978              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  8978
482+  8978 CD B4 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  897B
484+  897B 7D           9 ld a,l
485+  897C E6 1F        	and $1f
486+  897E 28 2A        	jr z,7F
487+  8980 2B           	dec hl
488+  8981 10 F8        	djnz 9B
489+  8983 18 25        	jr 7F
490+  8985
491+  8985              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8985
493+  8985 2A D2 84     3 ld hl,(Posicion_actual)
494+  8988 18 20        	jr 7F
495+  898A
496+  898A 28 14        1 jr z,2F
497+  898C
498+  898C              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  898C
500+  898C CD B4 89     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  898F 7D           4 ld a,l
502+  8990 E6 1F        	and $1f
503+  8992 28 03        	jr z,6F
504+  8994 2B           	dec hl
505+  8995 10 F8        	djnz 4B
506+  8997 06 0F        6 ld b,15
507+  8999 CD 15 8A     5 call PreviousScan
508+  899C 10 FB        	djnz 5B
509+  899E 18 0A        	jr 7F
510+  89A0
511+  89A0              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89A0
513+  89A0 CD B4 89     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89A3 06 0F        	ld b,15
515+  89A5 CD 15 8A     8 call PreviousScan
516+  89A8 10 FB        	djnz 8B
517+  89AA
518+  89AA E5           7 push hl
519+  89AB DD E1        	pop ix
520+  89AD
521+  89AD 2A D4 84     	ld hl,(Puntero_objeto)
522+  89B0 E5           	push hl
523+  89B1 FD E1        	pop iy
524+  89B3
525+  89B3 C9           	ret
526+  89B4
527+  89B4              ; --------------------------------------------------------------------------------------------------------------------
528+  89B4              ;
529+  89B4              ;	2/1/23
530+  89B4              ;
531+  89B4              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  89B4              ;
533+  89B4              ;	Tras esta rutina tenemos:
534+  89B4              ;
535+  89B4              ;	OUTPUT: HL contiene (Posicion_actual).
536+  89B4              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  89B4              ;
538+  89B4              ;	DESTRUYE!!!!! HL,B y A.
539+  89B4
540+  89B4 2A D2 84     Operandos ld hl,(Posicion_actual)
541+  89B7 3A 00 85     	ld a,(Columnas)
542+  89BA 3D           	dec a
543+  89BB 20 01        	jr nz,1F
544+  89BD 3C           	inc a
545+  89BE 47           1 ld b,a
546+  89BF C9           	ret
547+  89C0
548+  89C0              ; --------------------------------------------------------------------------------------------------------------------
549+  89C0              ;
550+  89C0              ;	3/1/23
551+  89C0              ;
552+  89C0              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  89C0              ;
554+  89C0              ;	Destruye: A,B,HL y DE.
555+  89C0
556+  89C0              Define_rutina_de_impresion
557+  89C0
558+  89C0 3A D1 84     	ld a,(Columns)
559+  89C3 47           	ld b,a
560+  89C4 3A 00 85     	ld a,(Columnas)
561+  89C7 B8           	cp b
562+  89C8 20 0D        	jr nz,2f
563+  89CA
564+  89CA              ;	La entidad se imprime entera.
565+  89CA
566+  89CA 21 5C 8A     	ld hl, Indice_entidades_completas
567+  89CD E6 01        	and 1
568+  89CF 28 02        	jr z,1F
569+  89D1
570+  89D1 23           	inc hl
571+  89D2 23           	inc hl
572+  89D3
573+  89D3 CD 53 86     1 call Extrae_address
574+  89D6 C9           	ret		;	ret
575+  89D7
576+  89D7              ;	La entidad no se imprime entera en pantalla.
577+  89D7
578+  89D7 3A E0 84     2 ld a,(Cuad_objeto)
579+  89DA E6 01        	and 1
580+  89DC 28 17        	jr z,3F
581+  89DE
582+  89DE              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  89DE
584+  89DE 21 60 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  89E1 3A D1 84     4 ld a,(Columns)
586+  89E4 E6 01        	and 1
587+  89E6 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  89E8
589+  89E8 23           	inc hl
590+  89E9 23           	inc hl
591+  89EA
592+  89EA 3A 00 85     	ld a,(Columnas)
593+  89ED E6 01        	and 1
594+  89EF 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  89F1
596+  89F1 23           	inc hl
597+  89F2 23           	inc hl
598+  89F3
599+  89F3 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  89F5
601+  89F5 21 66 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  89F8 18 E7        	jr 4B
603+  89FA
604+  89FA              ; --------------------------------------------------------------------------------------------------------------------
605+  89FA              ;
606+  89FA              ;	Prepara_draw
607+  89FA              ;
608+  89FA              ;	Es una rutina de carga.
609+  89FA              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  89FA              ;
611+  89FA              ;	FUNCIONAMIENTO:
612+  89FA              ;
613+  89FA              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  89FA              ;	- LD (Posicion_actual) del objeto en [HL].
615+  89FA              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  89FA              ;
617+  89FA              ;	DESTRUYE:
618+  89FA              ;
619+  89FA              ;	Logicamente, BC,HL y E quedan destruidos.
620+  89FA
621+  89FA 21 D0 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  89FD 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  89FE 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  89FF 4E           	ld c,(hl)
625+  8A00 2A D2 84     	ld hl,(Posicion_actual)
626+  8A03 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A05 C9           	ret
628+  8A06
629+  8A06              ;----------------------------------------------------------------------------------------------------------------
630+  8A06              ;
631+  8A06              ;	5/08/22
632+  8A06              ;
633+  8A06              ;   NextScan.
634+  8A06              ;
635+  8A06              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A06              ;
637+  8A06              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A06              ;
639+  8A06              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A06              ;
641+  8A06              ;       DESTRUIDOS: AF y HL !!!
642+  8A06              ;
643+  8A06              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A06              ;
645+  8A06
646+  8A06 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A07 7C               ld a,h
648+  8A08 E6 07            and 7
649+  8A0A C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A0B
651+  8A0B 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A0C C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A0E 6F               ld l,a
654+  8A0F D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A10
656+  8A10 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A11 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A13 67               ld h,a
659+  8A14 C9               ret
660+  8A15
661+  8A15              ;----------------------------------------------------------------------------------------------------------------
662+  8A15              ;
663+  8A15              ;	5/08/22
664+  8A15              ;
665+  8A15              ;   PreviousScan.
666+  8A15              ;
667+  8A15              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A15              ;
669+  8A15              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A15              ;
671+  8A15              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A15              ;
673+  8A15              ;       DESTRUIDOS: AF y HL !!!
674+  8A15              ;
675+  8A15              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A15              ;
677+  8A15
678+  8A15 7C           PreviousScan ld a,h
679+  8A16 25               dec h               ; Dec H.
680+  8A17 E6 07            and 7
681+  8A19 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A1A
683+  8A1A 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A1B D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A1D 6F               ld l,a
686+  8A1E D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A1F
688+  8A1F 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A20 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A22 67               ld h,a
691+  8A23 C9               ret
692+  8A24
693+  8A24              ; -----------------------------------------------------------------------------------
694+  8A24              ;
695+  8A24              ;	15/1/23
696+  8A24
697+  8A24 ED 73 0C 85  Extrae_foto_registros ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
698+  8A28 31 00 70     	ld sp,Album_de_fotos
699+  8A2B
700+  8A2B FD E1        2 pop iy																	; (Puntero_objeto) en IY.
701+  8A2D E1           	pop hl																	; Puntero de impresión de pantalla en HL.
702+  8A2E D1           	pop de																	; Dirección de la rutina de impresión en DE.
703+  8A2F
704+  8A2F ED 73 0E 85  	ld (Stack_2),sp
705+  8A33 ED 7B 0C 85  	ld sp,(Stack)
706+  8A37
707+  8A37              ; Fabrica la llamada a la correspondiente rutina de impresión.
708+  8A37
709+  8A37 3E CD        	ld a,$cd
710+  8A39 32 41 8A     	ld (Imprime),a
711+  8A3C EB           	ex de,hl
712+  8A3D 22 42 8A     	ld (Imprime+1),hl
713+  8A40 EB           	ex de,hl
714+  8A41
715+  8A41              ; Ejecuta la llamada:	CALL $xx,xx
716+  8A41
717+  8A41 00 00 00     Imprime db 0,0,0
718+  8A44
719+  8A44 ED 73 0C 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
720+  8A48
721+  8A48 3A 0B 85     	ld a,(Numero_de_malotes)
722+  8A4B 3D           	dec a
723+  8A4C 28 09        	jr z,1F
724+  8A4E 32 0B 85      	ld (Numero_de_malotes),a
725+  8A51 ED 7B 0E 85  	ld sp,(Stack_2)
726+  8A55 18 D4        	jr 2B
727+  8A57
728+  8A57 AF           1 xor a
729+  8A58 32 0E 85     	ld (Stack_2),a
730+  8A5B C9           	ret
731+  8A5C
732+  8A5C
# file closed: Draw_XOR.asm
643   8A5C              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8A5C              ;   índices de Rutinas de impresión.
  2+  8A5C
  3+  8A5C 6C 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8A5E 99 8A            defw Pinta_Amadeus_3x2
  5+  8A60
  6+  8A60 EF 8A        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8A62 8F 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8A64 43 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8A66
 10+  8A66 19 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8A68 1D 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8A6A D1 8B            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8A6C
 14+  8A6C
 15+  8A6C              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8A6C              ;
 17+  8A6C              ;   12/12/22
 18+  8A6C              ;
 19+  8A6C              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8A6C              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8A6C              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8A6C              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8A6C              ;
 24+  8A6C              ;   Modifica: DE y HL.
 25+  8A6C
 26+  8A6C ED 73 0C 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8A70 FD F9        	ld sp,iy
 28+  8A72 06 10            ld b,16
 29+  8A74 D1           1 pop de
 30+  8A75 7B               ld a,e
 31+  8A76 AE               xor (hl)
 32+  8A77 77           	ld (hl),a
 33+  8A78 23           	inc hl
 34+  8A79 7A               ld a,d
 35+  8A7A AE               xor (hl)
 36+  8A7B 77           	ld (hl),a
 37+  8A7C 2B           	dec hl
 38+  8A7D 24           	inc h
 39+  8A7E 7C               ld a,h
 40+  8A7F E6 07            and 7
 41+  8A81 20 0A            jr nz,2F
 42+  8A83 7D               ld a,l
 43+  8A84 C6 20            add a,$20
 44+  8A86 6F               ld l,a
 45+  8A87 38 04            jr c,2F
 46+  8A89 7C               ld a,h
 47+  8A8A D6 08            sub 8
 48+  8A8C 67               ld h,a
 49+  8A8D 7C           2 ld a,h
 50+  8A8E FE 58            cp $58
 51+  8A90 28 02            jr z,3F
 52+  8A92 10 E0            djnz 1B
 53+  8A94 ED 7B 0C 85  3 ld sp,(Stack)
 54+  8A98 C9           	ret
 55+  8A99
 56+  8A99 ED 73 0C 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8A9D FD F9        	ld sp,iy
 58+  8A9F 06 08            ld b,8
 59+  8AA1 D1           1 pop de
 60+  8AA2 7B               ld a,e
 61+  8AA3 AE               xor (hl)
 62+  8AA4 77           	ld (hl),a
 63+  8AA5 23           	inc hl
 64+  8AA6 7A               ld a,d
 65+  8AA7 AE               xor (hl)
 66+  8AA8 77           	ld (hl),a
 67+  8AA9 23           	inc hl
 68+  8AAA D1           	pop de
 69+  8AAB 7B               ld a,e
 70+  8AAC AE               xor (hl)
 71+  8AAD 77           	ld (hl),a
 72+  8AAE 2B           	dec hl
 73+  8AAF 2B           	dec hl
 74+  8AB0 24           	inc h
 75+  8AB1 7C               ld a,h
 76+  8AB2 E6 07            and 7
 77+  8AB4 20 0A            jr nz,2F
 78+  8AB6 7D               ld a,l
 79+  8AB7 C6 20            add a,$20
 80+  8AB9 6F               ld l,a
 81+  8ABA 38 04            jr c,2F
 82+  8ABC 7C               ld a,h
 83+  8ABD D6 08            sub 8
 84+  8ABF 67               ld h,a
 85+  8AC0 7C           2 ld a,h
 86+  8AC1 FE 58            cp $58
 87+  8AC3 28 25            jr z,4F
 88+  8AC5 7A               ld a,d
 89+  8AC6 AE               xor (hl)
 90+  8AC7 77               ld (hl),a
 91+  8AC8 D1           	pop de
 92+  8AC9 23           	inc hl
 93+  8ACA 7B               ld a,e
 94+  8ACB AE               xor (hl)
 95+  8ACC 77           	ld (hl),a
 96+  8ACD 23           	inc hl
 97+  8ACE 7A               ld a,d
 98+  8ACF AE               xor (hl)
 99+  8AD0 77           	ld (hl),a
100+  8AD1 2B           	dec hl
101+  8AD2 2B           	dec hl
102+  8AD3 24           	inc h
103+  8AD4 7C               ld a,h
104+  8AD5 E6 07            and 7
105+  8AD7 20 0A            jr nz,3F
106+  8AD9 7D               ld a,l
107+  8ADA C6 20            add a,$20
108+  8ADC 6F               ld l,a
109+  8ADD 38 04            jr c,3F
110+  8ADF 7C               ld a,h
111+  8AE0 D6 08            sub 8
112+  8AE2 67               ld h,a
113+  8AE3 7C           3 ld a,h
114+  8AE4 FE 58            cp $58
115+  8AE6 28 02            jr z,4F
116+  8AE8 10 B7            djnz 1B
117+  8AEA ED 7B 0C 85  4 ld sp,(Stack)
118+  8AEE C9           	ret
119+  8AEF
120+  8AEF              ; ---------------------------------------------------
121+  8AEF
122+  8AEF ED 73 0C 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8AF3 FD F9        	ld sp,iy
124+  8AF5 06 10            ld b,16
125+  8AF7 D1           1 pop de
126+  8AF8 7A           	ld a,d
127+  8AF9 AE           	xor (hl)
128+  8AFA 77           	ld (hl),a
129+  8AFB 24           	inc h
130+  8AFC 7C               ld a,h
131+  8AFD E6 07            and 7
132+  8AFF 20 0C            jr nz,2F
133+  8B01 7D               ld a,l
134+  8B02 C6 20            add a,$20
135+  8B04 6F               ld l,a
136+  8B05 38 06            jr c,2F
137+  8B07 7C               ld a,h
138+  8B08 D6 08            sub 8
139+  8B0A 67               ld h,a
140+  8B0B 18 00            jr 2F
141+  8B0D 7C           2 ld a,h
142+  8B0E FE 58            cp $58
143+  8B10 28 02            jr z,3F
144+  8B12 10 E3            djnz 1B
145+  8B14 ED 7B 0C 85  3 ld sp,(Stack)
146+  8B18 C9           	ret
147+  8B19
148+  8B19 ED 73 0C 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B1D FD F9        	ld sp,iy
150+  8B1F 06 10            ld b,16
151+  8B21 D1           1 pop de
152+  8B22 7B           	ld a,e
153+  8B23 AE           	xor (hl)
154+  8B24 77           	ld (hl),a
155+  8B25 24           	inc h
156+  8B26 7C               ld a,h
157+  8B27 E6 07            and 7
158+  8B29 20 0C            jr nz,2F
159+  8B2B 7D               ld a,l
160+  8B2C C6 20            add a,$20
161+  8B2E 6F               ld l,a
162+  8B2F 38 06            jr c,2F
163+  8B31 7C               ld a,h
164+  8B32 D6 08            sub 8
165+  8B34 67               ld h,a
166+  8B35 18 00            jr 2F
167+  8B37 7C           2 ld a,h
168+  8B38 FE 58            cp $58
169+  8B3A 28 02            jr z,3F
170+  8B3C 10 E3            djnz 1B
171+  8B3E ED 7B 0C 85  3 ld sp,(Stack)
172+  8B42 C9           	ret
173+  8B43
174+  8B43              ; ---------------------------------------------------
175+  8B43
176+  8B43 ED 73 0C 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8B47 FD F9        	ld sp,iy
178+  8B49 06 08            ld b,8
179+  8B4B D1           1 pop de
180+  8B4C 7A           	ld a,d
181+  8B4D AE           	xor (hl)
182+  8B4E 77           	ld (hl),a
183+  8B4F 23           	inc hl
184+  8B50 D1           	pop de
185+  8B51 7B           	ld a,e
186+  8B52 AE           	xor (hl)
187+  8B53 77           	ld (hl),a
188+  8B54 2B           	dec hl
189+  8B55 24            	inc h
190+  8B56 7C               ld a,h
191+  8B57 E6 07            and 7
192+  8B59 20 0A            jr nz,2F
193+  8B5B 7D               ld a,l
194+  8B5C C6 20            add a,$20
195+  8B5E 6F               ld l,a
196+  8B5F 38 04            jr c,2F
197+  8B61 7C               ld a,h
198+  8B62 D6 08            sub 8
199+  8B64 67               ld h,a
200+  8B65 7C           2 ld a,h
201+  8B66 FE 58            cp $58
202+  8B68 28 20            jr z,4F
203+  8B6A D1               pop de
204+  8B6B 7B           	ld a,e
205+  8B6C AE           	xor (hl)
206+  8B6D 77           	ld (hl),a
207+  8B6E 23           	inc hl
208+  8B6F 7A           	ld a,d
209+  8B70 AE           	xor (hl)
210+  8B71 77           	ld (hl),a
211+  8B72 2B           	dec hl
212+  8B73 24           	inc h
213+  8B74 7C               ld a,h
214+  8B75 E6 07            and 7
215+  8B77 20 0A            jr nz,3F
216+  8B79 7D               ld a,l
217+  8B7A C6 20            add a,$20
218+  8B7C 6F               ld l,a
219+  8B7D 38 04            jr c,3F
220+  8B7F 7C               ld a,h
221+  8B80 D6 08            sub 8
222+  8B82 67               ld h,a
223+  8B83 7C           3 ld a,h
224+  8B84 FE 58            cp $58
225+  8B86 28 02            jr z,4F
226+  8B88 10 C1            djnz 1B
227+  8B8A ED 7B 0C 85  4 ld sp,(Stack)
228+  8B8E C9           	ret
229+  8B8F
230+  8B8F ED 73 0C 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8B93 FD F9        	ld sp,iy
232+  8B95 06 08            ld b,8
233+  8B97 D1           1 pop de
234+  8B98 D1           	pop de
235+  8B99 7B           	ld a,e
236+  8B9A AE           	xor (hl)
237+  8B9B 77           	ld (hl),a
238+  8B9C 24            	inc h
239+  8B9D 7C               ld a,h
240+  8B9E E6 07            and 7
241+  8BA0 20 0A            jr nz,2F
242+  8BA2 7D               ld a,l
243+  8BA3 C6 20            add a,$20
244+  8BA5 6F               ld l,a
245+  8BA6 38 04            jr c,2F
246+  8BA8 7C               ld a,h
247+  8BA9 D6 08            sub 8
248+  8BAB 67               ld h,a
249+  8BAC 7C           2 ld a,h
250+  8BAD FE 58            cp $58
251+  8BAF 28 1B            jr z,4F
252+  8BB1 D1               pop de
253+  8BB2 7A           	ld a,d
254+  8BB3 AE           	xor (hl)
255+  8BB4 77           	ld (hl),a
256+  8BB5 24           	inc h
257+  8BB6 7C               ld a,h
258+  8BB7 E6 07            and 7
259+  8BB9 20 0A            jr nz,3F
260+  8BBB 7D               ld a,l
261+  8BBC C6 20            add a,$20
262+  8BBE 6F               ld l,a
263+  8BBF 38 04            jr c,3F
264+  8BC1 7C               ld a,h
265+  8BC2 D6 08            sub 8
266+  8BC4 67               ld h,a
267+  8BC5 7C           3 ld a,h
268+  8BC6 FE 58            cp $58
269+  8BC8 28 02            jr z,4F
270+  8BCA 10 CB            djnz 1B
271+  8BCC ED 7B 0C 85  4 ld sp,(Stack)
272+  8BD0 C9           	ret
273+  8BD1
274+  8BD1 ED 73 0C 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8BD5 FD F9        	ld sp,iy
276+  8BD7 06 08            ld b,8
277+  8BD9 D1           1 pop de
278+  8BDA 7B           	ld a,e
279+  8BDB AE           	xor (hl)
280+  8BDC 77           	ld (hl),a
281+  8BDD 23           	inc hl
282+  8BDE 7A           	ld a,d
283+  8BDF AE           	xor (hl)
284+  8BE0 77           	ld (hl),a
285+  8BE1 2B           	dec hl
286+  8BE2 24             	inc h
287+  8BE3 7C               ld a,h
288+  8BE4 E6 07            and 7
289+  8BE6 20 0A            jr nz,2F
290+  8BE8 7D               ld a,l
291+  8BE9 C6 20            add a,$20
292+  8BEB 6F               ld l,a
293+  8BEC 38 04            jr c,2F
294+  8BEE 7C               ld a,h
295+  8BEF D6 08            sub 8
296+  8BF1 67               ld h,a
297+  8BF2 7C           2 ld a,h
298+  8BF3 FE 58            cp $58
299+  8BF5 28 21            jr z,4F
300+  8BF7 D1               pop de
301+  8BF8 7A           	ld a,d
302+  8BF9 AE           	xor (hl)
303+  8BFA 77           	ld (hl),a
304+  8BFB 23           	inc hl
305+  8BFC D1               pop de
306+  8BFD 7B           	ld a,e
307+  8BFE AE           	xor (hl)
308+  8BFF 77           	ld (hl),a
309+  8C00 2B           	dec hl
310+  8C01 24           	inc h
311+  8C02 7C               ld a,h
312+  8C03 E6 07            and 7
313+  8C05 20 0A            jr nz,3F
314+  8C07 7D               ld a,l
315+  8C08 C6 20            add a,$20
316+  8C0A 6F               ld l,a
317+  8C0B 38 04            jr c,3F
318+  8C0D 7C               ld a,h
319+  8C0E D6 08            sub 8
320+  8C10 67               ld h,a
321+  8C11 7C           3 ld a,h
322+  8C12 FE 58            cp $58
323+  8C14 28 02            jr z,4F
324+  8C16 10 C1            djnz 1B
325+  8C18 ED 7B 0C 85  4 ld sp,(Stack)
326+  8C1C C9           	ret
327+  8C1D
328+  8C1D ED 73 0C 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C21 FD F9        	ld sp,iy
330+  8C23 06 08            ld b,8
331+  8C25 D1           1 pop de
332+  8C26 7B           	ld a,e
333+  8C27 AE           	xor (hl)
334+  8C28 77           	ld (hl),a
335+  8C29 24            	inc h
336+  8C2A 7C               ld a,h
337+  8C2B E6 07            and 7
338+  8C2D 20 0A            jr nz,2F
339+  8C2F 7D               ld a,l
340+  8C30 C6 20            add a,$20
341+  8C32 6F               ld l,a
342+  8C33 38 04            jr c,2F
343+  8C35 7C               ld a,h
344+  8C36 D6 08            sub 8
345+  8C38 67               ld h,a
346+  8C39 7C           2 ld a,h
347+  8C3A FE 58            cp $58
348+  8C3C 28 1C            jr z,4F
349+  8C3E D1               pop de
350+  8C3F 7A           	ld a,d
351+  8C40 AE           	xor (hl)
352+  8C41 77           	ld (hl),a
353+  8C42 24           	inc h
354+  8C43 7C               ld a,h
355+  8C44 E6 07            and 7
356+  8C46 20 0A            jr nz,3F
357+  8C48 7D               ld a,l
358+  8C49 C6 20            add a,$20
359+  8C4B 6F               ld l,a
360+  8C4C 38 04            jr c,3F
361+  8C4E 7C               ld a,h
362+  8C4F D6 08            sub 8
363+  8C51 67               ld h,a
364+  8C52 7C           3 ld a,h
365+  8C53 FE 58            cp $58
366+  8C55 28 03            jr z,4F
367+  8C57 D1               pop de
368+  8C58 10 CB            djnz 1B
369+  8C5A ED 7B 0C 85  4 ld sp,(Stack)
370+  8C5E C9           	ret
371+  8C5F
372+  8C5F              ; ---------------------------------------------------
373+  8C5F
# file closed: Rutinas_de_impresion_sprites.asm
644   8C5F              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8C5F              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8C5F              ;
  3+  8C5F              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8C5F              ;
  5+  8C5F              ; *****************************************************************************************************************************************************************************************
  6+  8C5F              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8C5F
  8+  8C5F 7C           calcula_tercio ld a,h
  9+  8C60 E6 18        	and $18
 10+  8C62 CB 2F        	sra a
 11+  8C64 CB 2F        	sra a
 12+  8C66 CB 2F        	sra a
 13+  8C68 C9           	ret
 14+  8C69
# file closed: calcula_tercio.asm
645   8C69              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8C69              ; -----------------------------------------------------------------------------------------
  2+  8C69              ;
  3+  8C69              ;   04/11/22
  4+  8C69              ;
  5+  8C69              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8C69              ;
  7+  8C69              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8C69              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8C69              ;
 10+  8C69              ;   DESTRUYE: HL y A. !!!!!
 11+  8C69
 12+  8C69 CD 5F 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8C6C 26 58            ld h,$58
 14+  8C6E 84               add h
 15+  8C6F 67               ld h,a
 16+  8C70 C9               ret
# file closed: Calcula_direccion_atributos.asm
646   8C71              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8C71              ; ********** **********
  2+  8C71              ;
  3+  8C71              ;   5/11/22
  4+  8C71              ;
  5+  8C71              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8C71              ;
  7+  8C71              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8C71              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8C71              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8C71              ;
 11+  8C71              ;   NO DESTROYERSSSS !!!!!
 12+  8C71
 13+  8C71 E5           Define_atributos push hl
 14+  8C72 C5           	push bc
 15+  8C73 D5           	push de
 16+  8C74
 17+  8C74 CD 69 8C     	call Calcula_direccion_atributos
 18+  8C77
 19+  8C77 D9               exx
 20+  8C78 E5               push hl
 21+  8C79 D9               exx
 22+  8C7A D1               pop de
 23+  8C7B
 24+  8C7B 42               ld b,d
 25+  8C7C 7B               ld a,e 									; (Attr) en A.
 26+  8C7D
 27+  8C7D C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8C7E E5            	push hl 								; Guardo dirección de attr.
 29+  8C7F
 30+  8C7F              ; -----
 31+  8C7F
 32+  8C7F 77           2 ld (hl),a
 33+  8C80 0D           	dec c 									; Decremento (Columnas).
 34+  8C81 28 03        	jr z,1F
 35+  8C83 23           	inc hl
 36+  8C84 18 F9        	jr 2B
 37+  8C86
 38+  8C86 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8C87 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8C88
 41+  8C88 05           	dec b									; Decremento (Filas).
 42+  8C89 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8C8B
 44+  8C8B 11 20 00     	ld de,32
 45+  8C8E A7           	and a
 46+  8C8F ED 5A        	adc hl,de
 47+  8C91 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8C93
 49+  8C93 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8C94 C1           	pop bc
 51+  8C95 E1           	pop hl
 52+  8C96
 53+  8C96 C9           	ret
 54+  8C97
# file closed: Define_atributos.asm
647   8C97              	include "Cls.asm"
# file opened: Cls.asm
  1+  8C97              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8C97              ;
  3+  8C97              ;
  4+  8C97              ;	CLS.
  5+  8C97              ;
  6+  8C97              ;	Limpia la pantalla y define sus atributos.
  7+  8C97              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8C97              ;
  9+  8C97              ;	COLORES: 0 ..... NEGRO
 10+  8C97              ;    		 1 ..... AZUL
 11+  8C97              ; 			 2 ..... ROJO
 12+  8C97              ;			 3 ..... MAGENTA
 13+  8C97              ; 			 4 ..... VERDE
 14+  8C97              ; 			 5 ..... CIAN
 15+  8C97              ;			 6 ..... AMARILLO
 16+  8C97              ; 			 7 ..... BLANCO
 17+  8C97              ;
 18+  8C97              ;	INPUT: A contiene los atributos de pantalla.
 19+  8C97              ;
 20+  8C97              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8C97
 22+  8C97
 23+  8C97 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8C9A 11 01 40     	LD DE,$4001
 25+  8C9D 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CA0 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8CA2 ED B0        	LDIR
 28+  8CA4 01 FF 02     	LD BC,767
 29+  8CA7 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8CA8 ED B0        	LDIR
 31+  8CAA C9           	ret
 32+  8CAB
# file closed: Cls.asm
648   8CAB              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8CAB              ; ******************************************************************************************************************************************************************************************
  2+  8CAB              ;
  3+  8CAB              ;   22/01/23
  4+  8CAB              ;
  5+  8CAB              ;	Mov_down
  6+  8CAB              ;
  7+  8CAB              ; 	Mueve el Sprite X px hacia abajo.
  8+  8CAB              ;
  9+  8CAB              ;
 10+  8CAB 21 F7 84     Mov_down ld hl,Ctrl_0
 11+  8CAE CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8CB0              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8CB0              ; 																	; _ en el caso de que no lo haya.
 14+  8CB0 3A E4 84     	ld a,(Vel_down)
 15+  8CB3 47           	ld b,a
 16+  8CB4 2A D2 84         ld hl,(Posicion_actual)
 17+  8CB7 CD 5F 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8CBA E6 02        	and 2
 19+  8CBC 28 0F        	jr z,1F
 20+  8CBE
 21+  8CBE              ; Nos encontramos en el último tercio de pantalla.
 22+  8CBE              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8CBE
 24+  8CBE 7C           	ld a,h
 25+  8CBF FE 57        	cp $57
 26+  8CC1 20 0A        	jr nz,1F
 27+  8CC3 7D           	ld a,l
 28+  8CC4 C6 20        	add $20
 29+  8CC6 30 05        	jr nc,1F
 30+  8CC8              ; ------------------------------
 31+  8CC8 CD 59 8F     	call Reaparece_arriba
 32+  8CCB              ;	call Reinicio
 33+  8CCB              ; ------------------------------
 34+  8CCB 18 08        	jr 3F
 35+  8CCD CD 06 8A     1 call NextScan
 36+  8CD0 22 D2 84     	ld (Posicion_actual),hl
 37+  8CD3 10 E2            djnz 2B
 38+  8CD5 CD 6F 8F     3 call Genera_coordenadas
 39+  8CD8 C9           	ret
 40+  8CD9
 41+  8CD9
 42+  8CD9              ; ******************************************************************************************************************************************************************************************
 43+  8CD9              ;
 44+  8CD9              ;   22/01/23
 45+  8CD9              ;
 46+  8CD9              ;	Mov_up
 47+  8CD9              ;
 48+  8CD9              ; 	Mueve el Sprite hacia arriba.
 49+  8CD9              ;
 50+  8CD9              ;
 51+  8CD9 21 F7 84     Mov_up ld hl,Ctrl_0
 52+  8CDC CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8CDE              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8CDE              ; 																		; _ en el caso de que no lo haya.
 55+  8CDE 3A E3 84     	ld a,(Vel_up)
 56+  8CE1 47           	ld b,a
 57+  8CE2 2A D2 84     	ld hl,(Posicion_actual)
 58+  8CE5 CD 5F 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8CE8 A7           	and a
 60+  8CE9 20 10        	jr nz,1F
 61+  8CEB
 62+  8CEB              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8CEB              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8CEB
 65+  8CEB 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8CEC FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8CEE 20 0B            jr nz,1F
 68+  8CF0 7D               ld a,l
 69+  8CF1 D6 20            sub $20
 70+  8CF3 30 06            jr nc,1F
 71+  8CF5 25               dec h
 72+  8CF6
 73+  8CF6              ; -----------------------------
 74+  8CF6 CD 49 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8CF9              ;	call Reinicio
 76+  8CF9              ; -----------------------------
 77+  8CF9
 78+  8CF9 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8CFB CD 15 8A     1 call PreviousScan
 80+  8CFE 22 D2 84     	ld (Posicion_actual),hl
 81+  8D01 10 E2            djnz 3B
 82+  8D03 CD 6F 8F     2 call Genera_coordenadas
 83+  8D06 C9           	ret
 84+  8D07
 85+  8D07              ; ******************************************************************************************************************************************************************************************
 86+  8D07              ;
 87+  8D07              ;	19/10/22
 88+  8D07              ;
 89+  8D07              ;	Mov_right.
 90+  8D07              ;
 91+  8D07              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D07              ;
 93+  8D07
 94+  8D07 21 F7 84     Mov_right ld hl,Ctrl_0
 95+  8D0A CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D0C              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D0C              ; 																	; _ en el caso de que no lo haya.
 98+  8D0C 3A D6 84     	ld a,(CTRL_DESPLZ)
 99+  8D0F A7           	and a
100+  8D10 28 0B        	jr z,9F
101+  8D12
102+  8D12 3A F7 84     	ld a,(Ctrl_0)
103+  8D15 CB 7F        	bit 7,a
104+  8D17 20 04        	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D19 21 D6 84     	ld hl,CTRL_DESPLZ
106+  8D1C 35           	dec (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D1D
108+  8D1D 3A F7 84     9 ld a,(Ctrl_0)
109+  8D20 CB 77        	bit 6,a
110+  8D22 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D24
112+  8D24 CD 08 8F     	call Stop_Amadeus_right
113+  8D27 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D28 18 4D        	jr 8F
115+  8D2A
116+  8D2A 3A D7 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D2D FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D2F 20 46        	jr nz,8F
119+  8D31
120+  8D31 3A D6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D34 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D35 28 40        	jr z,8F
123+  8D37
124+  8D37              ; ---------- ---------- ----------
125+  8D37              ;
126+  8D37              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D37
128+  8D37 3A E2 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D3A FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D3C 28 11        	jr z,1F
131+  8D3E 38 06        	jr c,6F
132+  8D40 FE 04        	cp 4
133+  8D42 28 14        	jr z,7F
134+  8D44 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D46
136+  8D46              ; ---------- ---------- ----------
137+  8D46              ;
138+  8D46              ; Perfiles de velocidad
139+  8D46              ;
140+  8D46 3A D6 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
141+  8D49 FE FE        	cp $fe
142+  8D4B 20 2A        	jr nz,8F
143+  8D4D 18 10        	jr 3F
144+  8D4F 3A D6 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
145+  8D52 FE FD        	cp $fd
146+  8D54 20 21        	jr nz,8F
147+  8D56 18 07        	jr 3F
148+  8D58 3A D6 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
149+  8D5B FE FB        	cp $fb
150+  8D5D 20 18        	jr nz,8F
151+  8D5F
152+  8D5F              ; ---------- ---------- ----------
153+  8D5F
154+  8D5F CD 37 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
155+  8D62              ;	call Reinicio
156+  8D62
157+  8D62              ; ---------- ---------- ----------
158+  8D62              ;
159+  8D62              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
160+  8D62
161+  8D62 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
162+  8D64 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
163+  8D65 CD 7E 8D     	call DESPLZ_DER
164+  8D68 C1           	pop bc
165+  8D69 10 F9        	djnz 5B
166+  8D6B 2A D2 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
167+  8D6E 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
168+  8D6F 22 D2 84     	ld (Posicion_actual),hl
169+  8D72 CD 6F 8F     	call Genera_coordenadas
170+  8D75 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
171+  8D77
172+  8D77              ; ---------- ---------- ----------
173+  8D77
174+  8D77 2A D2 84     8 ld hl,(Posicion_actual)
175+  8D7A CD 7E 8D     	call DESPLZ_DER
176+  8D7D C9           2 ret
177+  8D7E
178+  8D7E              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179+  8D7E              ;
180+  8D7E              ;	22/9/22
181+  8D7E              ;
182+  8D7E
183+  8D7E CD 8D 8D     DESPLZ_DER call Desplaza_derecha
184+  8D81 CD A2 8D         call modifica_parametros_1er_DESPLZ_2
185+  8D84 CD CB 8D         call Ciclo_completo
186+  8D87 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
187+  8D8A CB FE        	set 7,(hl)
188+  8D8C C9           	ret
189+  8D8D
190+  8D8D              ; ******************************************************************************************************************************************************************************************
191+  8D8D              ;	14/9/22
192+  8D8D              ;
193+  8D8D
194+  8D8D 3A E2 84     Desplaza_derecha ld a,(Vel_right)
195+  8D90 47           	ld b,a
196+  8D91 2A DC 84     	ld hl,(Puntero_DESPLZ)
197+  8D94 23           1 inc hl
198+  8D95 23           	inc hl
199+  8D96 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
200+  8D98 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _por el índice del Sprite.
201+  8D9B CD 53 86     	call Extrae_address
202+  8D9E 22 D4 84     	ld (Puntero_objeto),hl
203+  8DA1 C9           	ret
204+  8DA2
205+  8DA2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
206+  8DA2              ;
207+  8DA2              ;	24/7/22
208+  8DA2              ;
209+  8DA2              ;	modifica_parametros_1er_DESPLZ_2
210+  8DA2              ;
211+  8DA2              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
212+  8DA2              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
213+  8DA2              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
214+  8DA2
215+  8DA2 3A D6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
216+  8DA5 A7           	and a
217+  8DA6 20 1F        	jr nz,1F
218+  8DA8 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
219+  8DAA 32 D6 84         ld (CTRL_DESPLZ),a
220+  8DAD 21 D1 84     	ld hl,Columns
221+  8DB0 34           	inc (hl)
222+  8DB1 3A E0 84     	ld a,(Cuad_objeto)
223+  8DB4 E6 01        	and 1
224+  8DB6 28 0F        	jr z,1F
225+  8DB8 2A D2 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
226+  8DBB 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
227+  8DBC 22 D2 84     	ld (Posicion_actual),hl
228+  8DBF CD 6F 8F     	call Genera_coordenadas
229+  8DC2 CD 14 8F     	call Inc_CTRL_DESPLZ
230+  8DC5 18 03        	jr 2F
231+  8DC7 CD 14 8F     1 call Inc_CTRL_DESPLZ
232+  8DCA C9           2 ret
233+  8DCB
234+  8DCB              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235+  8DCB              ;
236+  8DCB              ;	24/7/22
237+  8DCB              ;
238+  8DCB              ;	Ciclo_completo.
239+  8DCB              ;
240+  8DCB              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
241+  8DCB              ;
242+  8DCB              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
243+  8DCB              ; 	Decrementamos (Columns).
244+  8DCB              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
245+  8DCB              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
246+  8DCB
247+  8DCB
248+  8DCB 3A D6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
249+  8DCE FE FF        	cp $ff
250+  8DD0 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
251+  8DD2 18 25        	jr 3f
252+  8DD4 21 D1 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
253+  8DD7 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
254+  8DD8 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
255+  8DD9 32 D6 84     	ld (CTRL_DESPLZ),a
256+  8DDC 3A E0 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
257+  8DDF E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
258+  8DE1 20 0A        	jr nz,2F
259+  8DE3 2A D2 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
260+  8DE6 23           	inc hl
261+  8DE7 22 D2 84     	ld (Posicion_actual),hl
262+  8DEA CD 6F 8F     	call Genera_coordenadas
263+  8DED
264+  8DED              ; Inicia el puntero de Sprite.
265+  8DED
266+  8DED 2A DA 84     2 ld hl,(Indice_Sprite)
267+  8DF0 22 DC 84     	ld (Puntero_DESPLZ),hl
268+  8DF3 CD 53 86     	call Extrae_address
269+  8DF6 22 D4 84     	ld (Puntero_objeto),hl
270+  8DF9
271+  8DF9 C9           3 ret
272+  8DFA
273+  8DFA              ; ******************************************************************************************************************************************************************************************
274+  8DFA              ;
275+  8DFA              ;	21/01/23
276+  8DFA              ;
277+  8DFA              ;	Mov_left.
278+  8DFA              ;
279+  8DFA              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
280+  8DFA              ;
281+  8DFA              Mov_left
282+  8DFA
283+  8DFA 21 F7 84     	ld hl,Ctrl_0
284+  8DFD CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
285+  8DFF              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
286+  8DFF              ; 																	; _ en el caso de que no lo haya.
287+  8DFF 3A D6 84     	ld a,(CTRL_DESPLZ)
288+  8E02 A7           	and a
289+  8E03 20 19        	jr nz,10F
290+  8E05
291+  8E05 2A D4 84     	ld hl,(Puntero_objeto)
292+  8E08 22 DC 84     	ld (Puntero_DESPLZ),hl 											; Cuando nos desplazamos a la izquierda, (Puntero_DESPLZ) se sitúa al final del índice del Sprite. El objeto es simétrico.
293+  8E0B
294+  8E0B 3A F7 84     	ld a,(Ctrl_0)
295+  8E0E CB 77        	bit 6,a
296+  8E10 28 67        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
297+  8E12
298+  8E12 CD 0E 8F     	call Stop_Amadeus_left
299+  8E15 20 62        	jr nz,8F
300+  8E17
301+  8E17 2A DA 84     	ld hl,(Indice_Sprite) 											; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
302+  8E1A 22 DC 84     	ld (Puntero_DESPLZ),hl 											; _de movimiento es hacia la derecha.
303+  8E1D C9           	ret
304+  8E1E
305+  8E1E 3A F7 84     10 ld a,(Ctrl_0)
306+  8E21 CB 7F        	bit 7,a
307+  8E23 28 04        	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
308+  8E25 21 D6 84     	ld hl,CTRL_DESPLZ
309+  8E28 34           	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
310+  8E29
311+  8E29 3A D7 84     11 ld a,(Coordenada_X)
312+  8E2C A7           	and a
313+  8E2D 20 4A        	jr nz,8F
314+  8E2F 3A D6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
315+  8E32 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
316+  8E33 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
317+  8E35
318+  8E35              ; ---------- ---------- ----------
319+  8E35
320+  8E35 3A E1 84     	ld a,(Vel_left)
321+  8E38 FE 02        	cp 2
322+  8E3A 28 0F        	jr z,1F
323+  8E3C 38 04        	jr c,6F
324+  8E3E FE 04        	cp 4
325+  8E40 28 12        	jr z,7F
326+  8E42
327+  8E42              ; ---------- ---------- ----------
328+  8E42
329+  8E42 3A D6 84     6 ld a,(CTRL_DESPLZ)
330+  8E45 FE F9        	cp $f9
331+  8E47 20 30        	jr nz,8F
332+  8E49 18 10        	jr 4F
333+  8E4B 3A D6 84     1 ld a,(CTRL_DESPLZ)
334+  8E4E FE FA        	cp $fa
335+  8E50 20 27        	jr nz,8F
336+  8E52 18 07        	jr 4F
337+  8E54 3A D6 84     7 ld a,(CTRL_DESPLZ)
338+  8E57 FE FC        	cp $fc
339+  8E59 20 1E        	jr nz,8F
340+  8E5B
341+  8E5B              ; ---------- ---------- ----------
342+  8E5B
343+  8E5B              4
344+  8E5B CD 25 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
345+  8E5E              ;	call Reinicio
346+  8E5E
347+  8E5E              ; ---------- ---------- ----------
348+  8E5E
349+  8E5E 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
350+  8E60 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
351+  8E61 2A D4 84     	ld hl,(Puntero_objeto)
352+  8E64 22 DC 84     	ld (Puntero_DESPLZ),hl
353+  8E67 CD 80 8E     	call DESPLZ_IZQ
354+  8E6A C1           	pop bc
355+  8E6B 10 F3        	djnz 5B
356+  8E6D 2A D2 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
357+  8E70 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
358+  8E71 22 D2 84     	ld (Posicion_actual),hl
359+  8E74 CD 6F 8F     	call Genera_coordenadas
360+  8E77 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
361+  8E79
362+  8E79              ; ---------- ---------- ----------
363+  8E79
364+  8E79 2A D2 84     8 ld hl,(Posicion_actual)
365+  8E7C CD 80 8E     	call DESPLZ_IZQ
366+  8E7F C9           2 ret
367+  8E80
368+  8E80              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
369+  8E80              ;
370+  8E80              ;	22/9/22
371+  8E80
372+  8E80              DESPLZ_IZQ
373+  8E80
374+  8E80 CD 8F 8E     	call Desplaza_izquierda
375+  8E83 CD A4 8E         call modifica_parametros_1er_DESPLZ
376+  8E86 CD C8 8E     	call Ciclo_completo_2
377+  8E89 21 F7 84     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
378+  8E8C CB BE        	res 7,(hl)
379+  8E8E C9           	ret
380+  8E8F
381+  8E8F 3A E1 84     Desplaza_izquierda ld a,(Vel_left)
382+  8E92 47           	ld b,a
383+  8E93 2A DC 84     	ld hl,(Puntero_DESPLZ)
384+  8E96 2B           1 dec hl
385+  8E97 2B           	dec hl
386+  8E98 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
387+  8E9A 22 DC 84     	ld (Puntero_DESPLZ),hl
388+  8E9D CD 53 86     	call Extrae_address
389+  8EA0 22 D4 84     	ld (Puntero_objeto),hl
390+  8EA3 C9           	ret
391+  8EA4
392+  8EA4              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
393+  8EA4              ;
394+  8EA4              ;	modifica_parametros_1er_DESPLZ
395+  8EA4              ;
396+  8EA4              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
397+  8EA4              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
398+  8EA4              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
399+  8EA4
400+  8EA4 3A D6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
401+  8EA7 A7           	and a
402+  8EA8 20 1A        	jr nz,1F
403+  8EAA 21 D1 84     	ld hl,Columns
404+  8EAD 34           	inc (hl)
405+  8EAE 3A E0 84     	ld a,(Cuad_objeto)
406+  8EB1 E6 01        	and 1
407+  8EB3 20 0F        	jr nz,1F
408+  8EB5 2A D2 84     	ld hl,(Posicion_actual) 									  ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
409+  8EB8 2B           	dec hl 														  ; _ cuadrantes 2 y 4 de pantalla.
410+  8EB9 22 D2 84     	ld (Posicion_actual),hl
411+  8EBC CD 6F 8F     	call Genera_coordenadas
412+  8EBF CD F7 8E     	call Dec_CTRL_DESPLZ
413+  8EC2 18 03        	jr 2F
414+  8EC4 CD F7 8E     1 call Dec_CTRL_DESPLZ
415+  8EC7 C9           2 ret
416+  8EC8
417+  8EC8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
418+  8EC8              ;
419+  8EC8 3A D6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
420+  8ECB FE F8        	cp $f8
421+  8ECD 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
422+  8ECF 18 25        	jr 3f
423+  8ED1 21 D1 84     1 ld hl,Columns
424+  8ED4 35           	dec (hl)
425+  8ED5 AF           	xor a
426+  8ED6 32 D6 84     	ld (CTRL_DESPLZ),a
427+  8ED9 3A E0 84     	ld a,(Cuad_objeto)
428+  8EDC E6 01        	and 1
429+  8EDE 28 0A        	jr z,2F
430+  8EE0 2A D2 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
431+  8EE3 2B           	dec hl
432+  8EE4 22 D2 84     	ld (Posicion_actual),hl
433+  8EE7 CD 6F 8F     	call Genera_coordenadas
434+  8EEA
435+  8EEA              ; Inicia el puntero de Sprite.
436+  8EEA
437+  8EEA 2A DA 84     2 ld hl,(Indice_Sprite)
438+  8EED 22 DC 84     	ld (Puntero_DESPLZ),hl
439+  8EF0 CD 53 86     	call Extrae_address
440+  8EF3 22 D4 84     	ld (Puntero_objeto),hl
441+  8EF6 C9           3 ret
442+  8EF7
443+  8EF7              ; ---------- ---------- ---------- ---------- ---------- ----------
444+  8EF7              ;
445+  8EF7              ;	Dec_CTRL_DESPLZ
446+  8EF7              ;
447+  8EF7              ;	Subrutina de [modifica_punteros].
448+  8EF7              ;
449+  8EF7              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
450+  8EF7
451+  8EF7 21 D6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
452+  8EFA 3A E1 84     	ld a,(Vel_left)
453+  8EFD A7           	and a
454+  8EFE 28 06        	jr z,1F
455+  8F00 47           	ld b,a
456+  8F01 35           3 dec (hl)
457+  8F02 10 FD        	djnz 3B
458+  8F04 18 01        	jr 2F
459+  8F06 35           1 dec (hl)
460+  8F07 C9           2 ret
461+  8F08
462+  8F08              ; ---------- ---------- ---------- ---------- ---------- ----------
463+  8F08              ;
464+  8F08              ;	19/10/22
465+  8F08              ;
466+  8F08              ;	(cp 29) para un Amadeus de 3 Columns.
467+  8F08              ;	(cp 30)   ""  ""    ""     2 Columns.
468+  8F08
469+  8F08 3A D7 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
470+  8F0B FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
471+  8F0D C9           	ret
472+  8F0E
473+  8F0E              ; ---------- ---------- ---------- ---------- ---------- ----------
474+  8F0E              ;
475+  8F0E              ;	19/10/22
476+  8F0E              ;
477+  8F0E              ;	(cp 2) para un Amadeus de 3 Columns.
478+  8F0E              ;	(cp 1)   ""  ""    ""     2 Columns.
479+  8F0E
480+  8F0E 3A D7 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
481+  8F11 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
482+  8F13 C9           	ret
483+  8F14
484+  8F14              ; ---------- ---------- ---------- ---------- ---------- ----------
485+  8F14              ;
486+  8F14              ;	24/7/22
487+  8F14              ;
488+  8F14              ;	Inc_CTRL_DESPLZ
489+  8F14              ;
490+  8F14              ;	Subrutina de [modifica_punteros].
491+  8F14              ;
492+  8F14              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
493+  8F14
494+  8F14 21 D6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
495+  8F17 3A E2 84     	ld a,(Vel_right)
496+  8F1A A7           	and a
497+  8F1B 28 06        	jr z,1F
498+  8F1D 47           	ld b,a
499+  8F1E 34           3 inc (hl)
500+  8F1F 10 FD        	djnz 3B
501+  8F21 18 01        	jr 2F
502+  8F23 34           1 inc (hl)
503+  8F24 C9           2 ret
504+  8F25
505+  8F25              ; ---------- ---------- ---------- ---------- ---------- ----------
506+  8F25
507+  8F25 2A D2 84     Reaparece_derecha ld hl,(Posicion_actual)
508+  8F28 01 1F 00     	ld bc,31
509+  8F2B A7           	and a
510+  8F2C ED 4A        	adc hl,bc
511+  8F2E 22 D2 84     	ld (Posicion_actual),hl
512+  8F31 21 F7 84     	ld hl,Ctrl_0														; $xxx1
513+  8F34 CB C6        	set 0,(hl)
514+  8F36 C9           	ret
515+  8F37
516+  8F37              ; ---------- ---------- ---------- ---------- ---------- ----------
517+  8F37
518+  8F37 2A D2 84     Reaparece_izquierda ld hl,(Posicion_actual)
519+  8F3A 01 1F 00     	ld bc,31
520+  8F3D A7           	and a
521+  8F3E ED 42        	sbc hl,bc
522+  8F40 22 D2 84     	ld (Posicion_actual),hl 											; $xx1x
523+  8F43 21 F7 84     	ld hl,Ctrl_0
524+  8F46 CB CE        	set 1,(hl)
525+  8F48 C9           	ret
526+  8F49
527+  8F49              ; ---------- ---------- ---------- ---------- ---------- ----------
528+  8F49
529+  8F49 24           Reaparece_abajo inc h
530+  8F4A 01 E0 17     	ld bc,$17e0
531+  8F4D A7           	and a
532+  8F4E ED 4A        	adc hl,bc
533+  8F50 22 D2 84     	ld (Posicion_actual),hl
534+  8F53 21 F7 84     	ld hl,Ctrl_0
535+  8F56 CB D6        	set 2,(hl)
536+  8F58 C9           	ret
537+  8F59
538+  8F59              ; ---------- ---------- ---------- ---------- ---------- ----------
539+  8F59
540+  8F59 01 E0 17     Reaparece_arriba ld bc,$17e0
541+  8F5C A7           	and a
542+  8F5D ED 42        	sbc hl,bc
543+  8F5F 22 D2 84     	ld (Posicion_actual),hl
544+  8F62 21 F7 84     	ld hl,Ctrl_0
545+  8F65 CB DE        	set 3,(hl)
546+  8F67 C9           	ret
547+  8F68
548+  8F68              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
549+  8F68
550+  8F68 2A DE 84     Reinicio ld hl,(Posicion_inicio)
551+  8F6B 22 D2 84     	ld (Posicion_actual),hl
552+  8F6E C9           	ret
# file closed: Direcciones.asm
649   8F6F              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8F6F              ;	12/12/22
  2+  8F6F              ;
  3+  8F6F              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8F6F              ;	Fila superior "0", Columna izquierda "0".
  5+  8F6F              ;
  6+  8F6F              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8F6F              ;
  8+  8F6F              ;	Modifica: A
  9+  8F6F
 10+  8F6F C5           Genera_coordenadas push bc
 11+  8F70 E5           	push hl
 12+  8F71 2A D2 84     	ld hl,(Posicion_actual)
 13+  8F74 7D           	ld a,l
 14+  8F75 E6 1F        	and $1f
 15+  8F77 32 D7 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8F7A CD 5F 8C     	call calcula_tercio
 17+  8F7D 47           	ld b,a
 18+  8F7E 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8F7F 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8F81 7D           	ld a,l
 21+  8F82 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8F84 28 05        	jr z,2F
 23+  8F86 0C           1 inc c
 24+  8F87 D6 20        	sub 32
 25+  8F89 20 FB        	jr nz,1B
 26+  8F8B 0C           2 inc c
 27+  8F8C 04           	inc b
 28+  8F8D 05           	dec b
 29+  8F8E 28 04        	jr z,3F
 30+  8F90 3E E0        	ld a,$e0
 31+  8F92 10 F2        	djnz 1B
 32+  8F94 79           3 ld a,c
 33+  8F95 3D           	dec a
 34+  8F96 32 D8 84     	ld (Coordenada_y),a
 35+  8F99 E1           	pop hl
 36+  8F9A C1           	pop bc
 37+  8F9B C9           	ret
# file closed: Genera_coordenadas.asm
650   8F9C              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  8F9C
  2+  8F9C
  3+  8F9C              ;   11/8/22
  4+  8F9C              ;
  5+  8F9C              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  8F9C              ;
  7+  8F9C              ;   Mov_obj.asm
  8+  8F9C              ;
  9+  8F9C              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  8F9C              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  8F9C              ;
 12+  8F9C              ;   Codificación:
 13+  8F9C              ;
 14+  8F9C              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  8F9C
 16+  8F9C 02 10 00     Izquierda db 2,%00010000,0
 17+  8F9F 02 20 00     Derecha db 2,%00100000,0
 18+  8FA2 02 80 00     Abajo db 2,%10000000,0
 19+  8FA5 02 40 00     Arriba db 2,%01000000,0
 20+  8FA8
 21+  8FA8 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 22+  8FAC 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 23+  8FB0 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 24+  8FB4 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 25+  8FB8 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 25+  8FBC 60 42 60 40
 25+  8FC0 63
 26+  8FC1 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 26+  8FC5 22 A3 80 A0
 27+  8FC9 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 27+  8FCD 84 A0 83 A0
 28+  8FD1 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 28+  8FD5 80 A3 22 A0
 29+  8FD9 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 29+  8FDD 40 60 42 60
 30+  8FE1 42 60 44 00      db %01000010,%01100000,%01000100,0
 31+  8FE5
 32+  8FE5 9C 8F        Indice_mov_Izquierda defw Izquierda
 33+  8FE7 9F 8F        Indice_mov_Derecha defw Derecha
 34+  8FE9 A2 8F        Indice_mov_Abajo defw Abajo
 35+  8FEB A5 8F        Indice_mov_Arriba defw Arriba
 36+  8FED AC 8F        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 37+  8FEF B0 8F        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 38+  8FF1 A8 8F        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 39+  8FF3 B4 8F        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 40+  8FF5 B8 8F        Indice_mov_Onda_senoidal defw Onda_senoidal
 41+  8FF7
 42+  8FF7 3A FD 84     Movimiento ld a,(Contador_db_mov)                                      ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 43+  8FFA A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 44+  8FFB 28 02            jr z,1F
 45+  8FFD 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 46+  8FFF 3A FE 84     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 47+  9002 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 48+  9004 32 FE 84         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 49+  9007              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 50+  9007 2A FB 84         ld hl,(Puntero_mov)
 51+  900A 7E               ld a,(hl)
 52+  900B 32 FD 84         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 53+  900E 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 54+  900F 22 FB 84         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 55+  9012
 56+  9012 3A FF 84     Decoder ld a,(Repetimos_db)
 57+  9015 A7               and a
 58+  9016 20 0C            jr nz,12F
 59+  9018 2A FB 84         ld hl,(Puntero_mov)
 60+  901B 7E               ld a,(hl)
 61+  901C A7               and a
 62+  901D 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 63+  901F E6 0F             and $0f
 64+  9021 32 FF 84         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 65+  9024              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 66+  9024 2A FB 84     12 ld hl,(Puntero_mov)
 67+  9027 CB 7E            bit 7,(hl)
 68+  9029 28 03            jr z,2F
 69+  902B CD AB 8C         call Mov_down
 70+  902E 2A FB 84     2 ld hl, (Puntero_mov)
 71+  9031 CB 76            bit 6,(hl)
 72+  9033 28 03            jr z,3F
 73+  9035 CD D9 8C         call Mov_up
 74+  9038 2A FB 84     3 ld hl, (Puntero_mov)
 75+  903B CB 6E            bit 5,(hl)
 76+  903D 28 03            jr z,4F
 77+  903F CD 07 8D         call Mov_right
 78+  9042 2A FB 84     4 ld hl, (Puntero_mov)
 79+  9045 CB 66            bit 4,(hl)
 80+  9047 28 03            jr z,5F
 81+  9049 CD FA 8D         call Mov_left
 82+  904C
 83+  904C              ; ---------- --------- --------- ---------- ----------
 84+  904C
 85+  904C 3A FF 84     5 ld a,(Repetimos_db)
 86+  904F A7               and a
 87+  9050 28 07            jr z,6F
 88+  9052 3D               dec a
 89+  9053 32 FF 84         ld (Repetimos_db),a
 90+  9056 28 01            jr z,6f
 91+  9058 C9           11 ret
 92+  9059 21 FD 84     6 ld hl,Contador_db_mov
 93+  905C 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 94+  905D 2A FB 84         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
 95+  9060 23               inc hl
 96+  9061 22 FB 84         ld (Puntero_mov),hl
 97+  9064 18 F2            jr 11B
 98+  9066 2A F9 84     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
 99+  9069 3A FE 84         ld a,(Incrementa_puntero)
100+  906C 47               ld b,a
101+  906D 23           8 inc hl
102+  906E 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
103+  9070 5E               ld e,(hl)
104+  9071 23               inc hl
105+  9072 56               ld d,(hl)
106+  9073 EB               ex de,hl
107+  9074 22 FB 84         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
108+  9077 18 DF            jr 11B
109+  9079
110+  9079              ; ---------- --------- --------- ---------- ----------
111+  9079              ;
112+  9079              ;   11/8/22
113+  9079              ;
114+  9079              ;   Prepara_Puntero_mov
115+  9079
116+  9079 E5           Prepara_Puntero_mov push hl
117+  907A D5               push de
118+  907B 2A F9 84         ld hl,(Puntero_indice_mov)
119+  907E 5E               ld e,(hl)
120+  907F 23               inc hl
121+  9080 56               ld d,(hl)
122+  9081 EB               ex de,hl
123+  9082 22 FB 84         ld (Puntero_mov),hl
124+  9085 D1               pop de
125+  9086 E1               pop hl
126+  9087 C9               ret
127+  9088
128+  9088              ; ---------- --------- --------- ---------- ----------
129+  9088              ;
130+  9088              ;   11/8/22
131+  9088              ;
132+  9088              ;   Reinicia_el_movimiento
133+  9088
134+  9088 CD 79 90     Reinicia_el_movimiento call Prepara_Puntero_mov
135+  908B AF               xor a
136+  908C 32 FD 84         ld (Contador_db_mov),a
137+  908F 32 FE 84         ld (Incrementa_puntero),a
138+  9092 C3 F7 8F         jp Movimiento
139+  9095
140+  9095              ; ---------- --------- --------- ---------- ----------
141+  9095
142+  9095
143+  9095
144+  9095
145+  9095
146+  9095
147+  9095
148+  9095
149+  9095
150+  9095
151+  9095
152+  9095
153+  9095
154+  9095
155+  9095
156+  9095
157+  9095
158+  9095
# file closed: Patrones_de_mov.asm
651   9095              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9095              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9095              ;
  3+  9095              ;	3/1/23
  4+  9095              ;
  5+  9095              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9095
  7+  9095              ;	ADC HL,SP	LD (addr),SP
  8+  9095              ;	ADD HL,SP	LD SP,(addr)
  9+  9095              ;	ADD IX,SP	LD SP,nn
 10+  9095              ; 	ADD IY,SP	LD SP,HL
 11+  9095              ;				LD SP,IX
 12+  9095              ;	DEC SP		LD SP,IY
 13+  9095
 14+  9095              ;	EX (SP),HL
 15+  9095              ;	EX (SP),IX
 16+  9095              ;	EX (SP),IY
 17+  9095
 18+  9095              ;	INC SP
 19+  9095
 20+  9095
 21+  9095                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 0C 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 10 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 10 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 0C 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
652   7FC0
653   7FC0              	SAVESNA "Pruebas.sna", START
654   7FC0
655   7FC0
656   7FC0
# file closed: Banco_de_pruebas.asm
