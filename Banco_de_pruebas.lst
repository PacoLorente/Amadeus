# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 45 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0              ; Control. %00000001 00000001
  7+  83F0              ;
  8+  83F0              ;     [Bit0] ..... Impacto. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
  9+  83F0              ;               _ hacen las entidades hacia abajo.
 10+  83F0              ;
 11+  83F0              ;     [Bit8] ..... Dirección. "1" Cuando se produce colisión al generar un disparo.
 12+  83F0
 13+  83F0 F6 83        Indice_de_disparos_Amadeus defw Disparo_1A
 14+  83F2 FE 83        	defw Disparo_2A
 15+  83F4 06 84        	defw Disparo_3A
 16+  83F6
 17+  83F6 00 00        Disparo_1A defw 0									; Control.
 18+  83F8 00 00        	defw 0											; Puntero objeto.
 19+  83FA 00 00        	defw 0											; Puntero de impresión.
 20+  83FC 00 00        	defw 0											; Rutina de impresión.
 21+  83FE
 22+  83FE 00 00        Disparo_2A defw 0									; Control.
 23+  8400 00 00        	defw 0											; Puntero objeto.
 24+  8402 00 00        	defw 0											; Puntero de impresión.
 25+  8404 00 00        	defw 0											; Rutina de impresión.
 26+  8406
 27+  8406 00 00        Disparo_3A defw 0
 28+  8408
 29+  8408 1E 84        Indice_de_disparos_entidades defw Disparo_1
 30+  840A 26 84        	defw Disparo_2
 31+  840C 2E 84        	defw Disparo_3
 32+  840E 36 84        	defw Disparo_4
 33+  8410 3E 84        	defw Disparo_5
 34+  8412 46 84        	defw Disparo_6
 35+  8414 4E 84        	defw Disparo_7
 36+  8416 56 84        	defw Disparo_8
 37+  8418 5E 84        	defw Disparo_9
 38+  841A 66 84        	defw Disparo_10
 39+  841C 6E 84        	defw Disparo_11
 40+  841E
 41+  841E 00 00        Disparo_1 defw 0									; Control.
 42+  8420 00 00        	defw 0											; Puntero objeto.
 43+  8422 00 00        	defw 0											; Puntero de impresión.
 44+  8424 00 00        	defw 0											; Rutina de impresión.
 45+  8426
 46+  8426 00 00        Disparo_2 defw 0									; Control.
 47+  8428 00 00        	defw 0											; Puntero objeto.
 48+  842A 00 00        	defw 0											; Puntero de impresión.
 49+  842C 00 00        	defw 0											; Rutina de impresión.
 50+  842E
 51+  842E 00 00        Disparo_3 defw 0									; Control.
 52+  8430 00 00        	defw 0											; Puntero objeto.
 53+  8432 00 00        	defw 0											; Puntero de impresión.
 54+  8434 00 00        	defw 0											; Rutina de impresión.
 55+  8436
 56+  8436 00 00        Disparo_4 defw 0									; Control.
 57+  8438 00 00        	defw 0											; Puntero objeto.
 58+  843A 00 00        	defw 0											; Puntero de impresión.
 59+  843C 00 00        	defw 0											; Rutina de impresión.
 60+  843E
 61+  843E 00 00        Disparo_5 defw 0									; Control.
 62+  8440 00 00        	defw 0											; Puntero objeto.
 63+  8442 00 00        	defw 0											; Puntero de impresión.
 64+  8444 00 00        	defw 0											; Rutina de impresión.
 65+  8446
 66+  8446 00 00        Disparo_6 defw 0									; Control.
 67+  8448 00 00        	defw 0											; Puntero objeto.
 68+  844A 00 00        	defw 0											; Puntero de impresión.
 69+  844C 00 00        	defw 0											; Rutina de impresión.
 70+  844E
 71+  844E 00 00        Disparo_7 defw 0									; Control.
 72+  8450 00 00        	defw 0											; Puntero objeto.
 73+  8452 00 00        	defw 0											; Puntero de impresión.
 74+  8454 00 00        	defw 0											; Rutina de impresión.
 75+  8456
 76+  8456 00 00        Disparo_8 defw 0									; Control.
 77+  8458 00 00        	defw 0											; Puntero objeto.
 78+  845A 00 00        	defw 0											; Puntero de impresión.
 79+  845C 00 00        	defw 0											; Rutina de impresión.
 80+  845E
 81+  845E 00 00        Disparo_9 defw 0									; Control.
 82+  8460 00 00        	defw 0											; Puntero objeto.
 83+  8462 00 00        	defw 0											; Puntero de impresión.
 84+  8464 00 00        	defw 0											; Rutina de impresión.
 85+  8466
 86+  8466 00 00        Disparo_10 defw 0									; Control.
 87+  8468 00 00        	defw 0											; Puntero objeto.
 88+  846A 00 00        	defw 0											; Puntero de impresión.
 89+  846C 00 00        	defw 0											; Rutina de impresión.
 90+  846E
 91+  846E 00 00        Disparo_11 defw 0
 92+  8470
 93+  8470              ; -------------------------------------------------------------------------------------
 94+  8470
 95+  8470              Indice_de_entidades									; 58 Bytes por entidad.
 96+  8470
 97+  8470 B6 84        	defw Entidad_1
 98+  8472 F0 84        	defw Entidad_2
 99+  8474 2A 85        	defw Entidad_3
100+  8476 64 85        	defw Entidad_4
101+  8478              ;	...
102+  8478              ;	...
103+  8478              ;	+ entidades ...
104+  8478
105+  8478 00 00        	defw 0
106+  847A 00 00        	defw 0
107+  847C
108+  847C              ; ---------- ---------- ---------- ---------- ----------
109+  847C
110+  847C 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
111+  847E 00 00        	defw 0		 									; (Posicion_actual).
112+  8480 00 00        	defw 0	 										; (Puntero_objeto).
113+  8482 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
114+  8485
115+  8485 05           	db %00000101									; (Attr).
116+  8486
117+  8486 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
118+  8488 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
119+  848A 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
120+  848C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
121+  848E
122+  848E D0 50        	defw $50d0										; (Posicion_inicio).
123+  8490 04           	db 4 											; (Cuad_objeto).
124+  8491
125+  8491 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
126+  8495
127+  8495 00 00        	db 0,0											; Variables_de_borrado
128+  8497 00 00        	defw 0											;	" " " " " " "
129+  8499 00 00        	defw 0											;	" " " " " " "
130+  849B 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
131+  849F
132+  849F 00 00        	db 0,0											; Variables_de_pintado
133+  84A1 00 00        	defw 0											;	" " " " " " "
134+  84A3 00 00        	defw 0											;	" " " " " " "
135+  84A5 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
136+  84A9
137+  84A9 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
138+  84AB
139+  84AB 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
140+  84AF 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
141+  84B2
142+  84B2 00           	db 0 											; (Columnas).
143+  84B3 00 00        	defw 0											; (Limite_horizontal).
144+  84B5 00           	db 0											; (Limite_vertical).
145+  84B6
146+  84B6              ; ---------- ---------- ---------- ---------- ----------
147+  84B6
148+  84B6 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
149+  84B8 00 00        	defw 0											; (Posicion_actual).
150+  84BA 00 00        	defw 0 											; (Puntero_objeto).
151+  84BC 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
152+  84BF
153+  84BF 00           	db %00000000 									; (Attr).
154+  84C0
155+  84C0 00 00        	defw 0											; (Indice_Sprite_der).
156+  84C2 00 00        	defw 0											; (Indice_Sprite_izq).
157+  84C4 00 00        	defw 0											; (Puntero_DESPLZ_der).
158+  84C6 00 00        	defw 0											; (Puntero_DESPLZ_izq).
159+  84C8
160+  84C8 00 00        	defw 0											; (Posicion_inicio).
161+  84CA 00           	db 0											; (Cuad_objeto).
162+  84CB
163+  84CB 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
164+  84CF
165+  84CF 00 00        	db 0,0										    ; Variables_de_borrado
166+  84D1 00 00        	defw 0											;	" " " " " " "
167+  84D3 00 00        	defw 0											;	" " " " " " "
168+  84D5 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
169+  84D9
170+  84D9 00 00        	db 0,0											; Variables_de_pintado
171+  84DB 00 00        	defw 0											;	" " " " " " "
172+  84DD 00 00        	defw 0											;	" " " " " " "
173+  84DF 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
174+  84E3
175+  84E3 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
176+  84E5
177+  84E5 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
178+  84E9 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
179+  84EC
180+  84EC 00           	db 0 											; (Columnas).
181+  84ED 00 00        	defw 0											; (Limite_horizontal).
182+  84EF 00           	db 0											; (Limite_vertical).
183+  84F0
184+  84F0              ; ---------- ---------- ---------- ---------- ----------
185+  84F0
186+  84F0 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
187+  84F2 00 00        	defw 0                                          ; (Posicion_actual).
188+  84F4 00 00        	defw 0											; (Puntero_objeto).
189+  84F6 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
190+  84F9
191+  84F9 02           	db %00000010									; (Attr).
192+  84FA
193+  84FA A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
194+  84FC 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
195+  84FE 00 00        	defw 0											; (Puntero_DESPLZ_der).
196+  8500 00 00        	defw 0											; (Puntero_DESPLZ_izq).
197+  8502
198+  8502 7E 47        	defw $477e                                      ; (Posicion_inicio).
199+  8504 02           	db 2											; (Cuad_objeto).
200+  8505
201+  8505 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
202+  8509
203+  8509 00 00        	db 0,0											; Variables_de_borrado
204+  850B 00 00        	defw 0										 	;	" " " " " " "
205+  850D 00 00        	defw 0											;	" " " " " " "
206+  850F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
207+  8513
208+  8513 00 00        	db 0,0											; Variables_de_pintado
209+  8515 00 00        	defw 0											;	" " " " " " "
210+  8517 00 00        	defw 0											;	" " " " " " "
211+  8519 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
212+  851D
213+  851D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
214+  851F
215+  851F F9 92 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
216+  8523 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
217+  8526
218+  8526 00           	db 0 											; (Columnas).
219+  8527 00 00        	defw 0											; (Limite_horizontal).
220+  8529 00           	db 0											; (Limite_vertical).
221+  852A
222+  852A              ; ---------- ---------- ---------- ---------- ----------
223+  852A
224+  852A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
225+  852C 00 00        	defw 0                                          ; (Posicion_actual).
226+  852E 00 00        	defw 0											; (Puntero_objeto).
227+  8530 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
228+  8533
229+  8533 04           	db %00000100									; (Attr).
230+  8534
231+  8534 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
232+  8536 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
233+  8538
234+  8538 00 00        	defw 0											; (Puntero_DESPLZ_der).
235+  853A 00 00        	defw 0											; (Puntero_DESPLZ_izq).
236+  853C
237+  853C A1 47        	defw $47a1                                      ; (Posicion_inicio).
238+  853E 01           	db 1											; (Cuad_objeto).
239+  853F
240+  853F 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
241+  8543
242+  8543 00 00        	db 0,0											; Variables_de_borrado
243+  8545 00 00        	defw 0										 	;	" " " " " " "
244+  8547 00 00        	defw 0											;	" " " " " " "
245+  8549 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
246+  854D
247+  854D 00 00        	db 0,0											; Variables_de_pintado
248+  854F 00 00        	defw 0											;	" " " " " " "
249+  8551 00 00        	defw 0											;	" " " " " " "
250+  8553 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
251+  8557
252+  8557 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
253+  8559
254+  8559 FB 92 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
255+  855D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
256+  8560
257+  8560 00           	db 0 											; (Columnas).
258+  8561 00 00        	defw 0											; (Limite_horizontal).
259+  8563 00           	db 0											; (Limite_vertical).
260+  8564
261+  8564              ; ---------- ---------- ---------- ---------- ----------
262+  8564
263+  8564 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
264+  8566 00 00        	defw 0                                          ; (Posicion_actual).
265+  8568 00 00        	defw 0 											; (Puntero_objeto).
266+  856A 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
267+  856D
268+  856D 01           	db %00000001									; (Attr).
269+  856E
270+  856E A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
271+  8570 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
272+  8572
273+  8572 00 00        	defw 0											; (Puntero_DESPLZ_der).
274+  8574 00 00        	defw 0											; (Puntero_DESPLZ_izq).
275+  8576
276+  8576 BE 47        	defw $47be                                      ; (Posicion_inicio).
277+  8578 00           	db 0											; (Cuad_objeto).
278+  8579
279+  8579 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
280+  857D
281+  857D 00 00        	db 0,0											; Variables_de_borrado
282+  857F 00 00        	defw 0										 	;	" " " " " " "
283+  8581 00 00        	defw 0											;	" " " " " " "
284+  8583 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
285+  8587
286+  8587 00 00        	db 0,0											; Variables_de_pintado
287+  8589 00 00        	defw 0											;	" " " " " " "
288+  858B 00 00        	defw 0											;	" " " " " " "
289+  858D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
290+  8591
291+  8591 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
292+  8593
293+  8593 EB 92 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
294+  8597 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
295+  859A
296+  859A 00           	db 0 											; (Columnas).
297+  859B 00 00        	defw 0											; (Limite_horizontal).
298+  859D 00           	db 0											; (Limite_vertical).
299+  859E
# file closed: Entidades_y_disparos.asm
 21   859E
 22   859E              ; ******************************************************************************************************************************************************************************************
 23   859E              ; Constantes.
 24   859E              ; ******************************************************************************************************************************************************************************************
 25   859E              ;
 26   859E              ; 8/11/22
 27   859E              ;
 28   859E              ; Constantes generales.
 29   859E              ;
 30   859E
 31   859E              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   859E              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   859E              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   859E              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   859E              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   859E
 37   859E              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   859E              ;                               				        ; De momento situamos este almacén en $7000.
 39   859E
 40   859E
 41   859E              ; ******************************************************************************************************************************************************************************************
 42   859E              ; Variables.
 43   859E              ; ******************************************************************************************************************************************************************************************
 44   859E              ;
 45   859E              ; 10/11/22
 46   859E              ;
 47   859E              ; Variables de DRAW. (Motor principal).
 48   859E              ;
 49   859E              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   859E
 51   859E 02           Filas db 2												; Filas. [DRAW]
 52   859F 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   85A0 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   85A2 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   85A4 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   85A5 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   85A6
 58   85A6              ; ---------- ---------- ---------- ---------;      ;---------
 59   85A6
 60   85A6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   85A7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   85A7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   85A7 04           Attr db %00000100										; Atributos de la entidad:
 64   85A8
 65   85A8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   85A8              ;
 67   85A8              ;	COLORES: 0 ..... NEGRO
 68   85A8              ;    		 1 ..... AZUL
 69   85A8              ; 			 2 ..... ROJO
 70   85A8              ;			 3 ..... MAGENTA
 71   85A8              ; 			 4 ..... VERDE
 72   85A8              ; 			 5 ..... CIAN
 73   85A8              ;			 6 ..... AMARILLO
 74   85A8              ; 			 7 ..... BLANCO
 75   85A8
 76   85A8 A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   85AA 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   85AC 00 00        Puntero_DESPLZ_der defw 0
 79   85AE 00 00        Puntero_DESPLZ_izq defw 0
 80   85B0
 81   85B0 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   85B2 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   85B3
 84   85B3              ; Variables de objeto. (Características).
 85   85B3
 86   85B3 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   85B4 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   85B5 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   85B6 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   85B7
 91   85B7 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   85B9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   85BB 00 00        	defw 0
 94   85BD 00 00 00 00  	db 0,0,0,0
 95   85C1
 96   85C1 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85C3 00 00        	defw 0
 98   85C5 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85C7 00 00 00 00  	db 0,0,0,0
100   85CB
101   85CB              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85CB
103   85CB 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85CC              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85CC              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85CC              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85CC              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85CC              ;
109   85CC              ; 														DESCRIPCIÖN:
110   85CC              ;
111   85CC              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85CC              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85CC              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85CC              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85CC              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85CC              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85CC              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85CC              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85CC              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85CC              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85CC              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85CC              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85CC              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85CC              ;
125   85CC              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85CC              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85CC              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85CC
129   85CC 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85CD
131   85CD              ; Movimiento.
132   85CD
133   85CD E7 92        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85CF 00 00        Puntero_mov defw 0
135   85D1 00           Contador_db_mov db 0
136   85D2 00           Incrementa_puntero db 0
137   85D3 00           Repetimos_db db 0
138   85D4
139   85D4              ; Variables de funcionamiento. [DRAW].
140   85D4
141   85D4 00           Columnas db 0
142   85D5 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85D7              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85D7 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85D8
146   85D8              ; 59 Bytes por entidad.
147   85D8              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85D8              ;					         		---------;      ;---------
149   85D8
150   85D8
151   85D8              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85D8
153   85D8              ; Gestión de ENTIDADES.
154   85D8
155   85D8 00 00        Puntero_store_entidades defw 0
156   85DA 00 00        Puntero_restore_entidades defw 0
157   85DC 00 00        Indice_restore defw 0
158   85DE 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   85DF 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   85E0              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   85E0              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   85E0              ;														; _ (Numero_de_malotes)="0".
163   85E0 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   85E2              ;														; _variable para almacenar lo posición del puntero_
165   85E2              ; 														; _de pila, SP.
166   85E2 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   85E4              ;														; La utiliza la rutina [Extrae_foto_registros].
168   85E4 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   85E6              ;														; _el snapshot de los registros de la siguiente entidad.
170   85E6              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   85E6
172   85E6              ; Gestión de Disparos.
173   85E6
174   85E6 08 84        Stack_guns defw Indice_de_disparos_entidades			; Este puntero se irá desplazando por el índice de disparos_
175   85E8              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
176   85E8              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
177   85E8 00 00        Puntero_DESPLZ_DISPARO_ENTIDADES defw 0
178   85EA 00 00        Puntero_DESPLZ_DISPARO_AMADEUS defw 0
179   85EC
180   85EC
181   85EC
182   85EC              ; Gestión de FRAMES.
183   85EC
184   85EC 00           Switch db 0
185   85ED
186   85ED              ; Variables de Raster y localización en pantalla.
187   85ED
188   85ED 00 FF        Temp_Raster defw $ff00
189   85EF
190   85EF              ; Rutina principal *************************************************************************************************************************************************************************
191   85EF              ;
192   85EF              ;	14/11/22
193   85EF
194   85EF 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
195   85F2
196   85F2 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
197   85F4 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
198   85F6 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
199   85F8 F3           	DI
200   85F9
201   85F9 3E 01        	ld a,1
202   85FB D3 FE        	out ($fe),a
203   85FD
204   85FD 3E 07        	ld a,%00000111
205   85FF CD 20 8F     	call Cls
206   8602
207   8602              ;	call Pinta_FILAS
208   8602
209   8602 CD 1C 88     	call Pulsa_ENTER
210   8605
211   8605 21 DE 85     	ld hl,Numero_de_entidades
212   8608 46           	ld b,(hl)
213   8609 04           	inc b
214   860A 05           	dec b
215   860B 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
216   860D
217   860D              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
218   860D              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
219   860D              ;	Pintamos el resto de entidades:
220   860D
221   860D CD 2E 87     	call Inicia_punteros_de_entidades
222   8610
223   8610              ;	INICIA ENTIDADES!!!!!
224   8610
225   8610 C5           1 push bc  												; Guardo el contador de entidades.
226   8611 CD 6F 87      	call Inicia_Puntero_objeto
227   8614 CD A5 89     	call Draw
228   8617 CD A0 7F     	call Guarda_foto_registros
229   861A CD B7 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
230   861D C1           	pop bc
231   861E 10 F0        	djnz 1B  											; Decremento el contador de entidades.
232   8620
233   8620              ; 	INICIA AMADEUS!!!!!
234   8620
235   8620 CD F8 87     3 call Restore_Amadeus
236   8623 CD 6F 87     	call Inicia_Puntero_objeto
237   8626 CD A5 89     	call Draw
238   8629 CD A0 7F     	call Guarda_foto_registros
239   862C CD 0A 88     	call Store_Amadeus
240   862F
241   862F              ; Iniciamos los punteros de los índices de las dos bases de datos de disparo, (Amadeus/Entidades).
242   862F
243   862F CD 44 87     	call Inicia_Puntero_Disparo_Entidades
244   8632 CD 4B 87     	call Inicia_Puntero_Disparo_Amadeus
245   8635
246   8635
247   8635              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
248   8635
249   8635 CD 2E 87     	call Inicia_punteros_de_entidades
250   8638 CD E6 87     	call Restore_Primera_entidad
251   863B
252   863B 3A DE 85     	ld a,(Numero_de_entidades)
253   863E 3C           	inc a
254   863F 32 DF 85     	ld (Numero_de_malotes),a
255   8642
256   8642 FB           2 ei
257   8643 18 FD        	jr 2B
258   8645
259   8645              ; -----------------------------------------------------------------------------------
260   8645
261   8645              Frame
262   8645
263   8645              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
264   8645              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
265   8645
266   8645 3E 02            ld a,2
267   8647 D3 FE            out ($fe),a
268   8649 CD A9 8C     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
269   864C 3E 01            ld a,1
270   864E D3 FE            out ($fe),a
271   8650
272   8650              ; ----------------------------------------------------------------------
273   8650
274   8650 21 00 70     	ld hl,Album_de_fotos
275   8653 22 E4 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
276   8656              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
277   8656 3A DE 85         ld a,(Numero_de_entidades)
278   8659 47               ld b,a
279   865A A7           	and a
280   865B 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
281   865D
282   865D C5           2 push bc
283   865E CD A7 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
284   8661 3A CB 85     	ld a,(Ctrl_0)
285   8664 CB 67        	bit 4,a
286   8666 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
287   8668
288   8668              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
289   8668              ; Las entidades sólo generan disparo cuando se mueven.
290   8668              ; 16/02/23.
291   8668              ; [[[
292   8668 CD 53 88     	call Detecta_disparo_entidad
293   866B              ; ]]]
294   866B
295   866B CD F5 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
296   866E
297   866E 21 CB 85     1 ld hl,Ctrl_0
298   8671 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
299   8673 AF           	xor a
300   8674 32 CC 85     	ld (Obj_dibujado),a
301   8677 CD B7 87     	call Store_Restore_entidades
302   867A C1           	pop bc
303   867B 10 E0        	djnz 2B
304   867D
305   867D              ; Tras la gestión de las entidades, ... AMADEUS.
306   867D
307   867D CD F8 87     4 call Restore_Amadeus
308   8680 CD C6 86     	call Mov_Amadeus
309   8683 3A CB 85     	ld a,(Ctrl_0)
310   8686 CB 67        	bit 4,a
311   8688 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
312   868A CD F5 86     	call Guarda_foto_entidad_a_pintar
313   868D
314   868D 21 CB 85     3 ld hl,Ctrl_0
315   8690 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
316   8692 AF           	xor a
317   8693 32 CC 85     	ld (Obj_dibujado),a
318   8696 CD 0A 88     	call Store_Amadeus
319   8699
320   8699              ; -----
321   8699
322   8699 CD 2E 87     	call Inicia_punteros_de_entidades
323   869C CD E6 87     	call Restore_Primera_entidad
324   869F CD 52 87     	call Calcula_numero_de_malotes
325   86A2
326   86A2 3E 04        	ld a,4
327   86A4 D3 FE        	out ($fe),a
328   86A6 C9           	ret
329   86A7
330   86A7              ; --------------------------------------------------------------------------------------------------------------
331   86A7              ;
332   86A7              ;	29/1/23
333   86A7
334   86A7              Mov_obj
335   86A7
336   86A7              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
337   86A7
338   86A7 AF           	xor a
339   86A8 32 CC 85     	ld (Obj_dibujado),a
340   86AB CD FF 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
341   86AE              ;														; Obj_dibujado="0".
342   86AE              ; Movemos Entidades malignas.
343   86AE
344   86AE CD FD 92     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
345   86B1 3A CB 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
346   86B4 CB 67        	bit 4,a
347   86B6 C8           	ret z
348   86B7
349   86B7              ; ---------
350   86B7
351   86B7 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
352   86B9 32 CC 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
353   86BC CD FF 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
354   86BF CD 16 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
355   86C2 CD E5 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
356   86C5 C9           	ret													; _de la misma.
357   86C6
358   86C6              ; --------------------------------------------------------------------------------------------------------------
359   86C6              ;
360   86C6              ;	29/1/23
361   86C6
362   86C6              Mov_Amadeus
363   86C6
364   86C6 AF           	xor a
365   86C7 32 CC 85     	ld (Obj_dibujado),a
366   86CA CD FF 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
367   86CD              ;														; Obj_dibujado="0".
368   86CD              ; Movemos Amadeus.
369   86CD
370   86CD CD 30 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
371   86D0 3A CB 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
372   86D3 CB 67        	bit 4,a
373   86D5 C8           	ret z
374   86D6
375   86D6              ; ---------
376   86D6
377   86D6 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
378   86D8 32 CC 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
379   86DB CD FF 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
380   86DE CD 16 87         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
381   86E1 CD E5 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
382   86E4 C9           	ret													; _de la nave.
383   86E5
384   86E5              ; --------------------------------------------------------------------------------------------------------------
385   86E5              ;
386   86E5              ;	31/01/23
387   86E5              ;
388   86E5              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
389   86E5
390   86E5              Guarda_foto_entidad_a_borrar
391   86E5
392   86E5 CD 7F 8C     	call Prepara_draw
393   86E8 CD B9 8B     	call calcula_CColumnass
394   86EB CD F0 8B     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
395   86EE CD 45 8C     	call Define_rutina_de_impresion
396   86F1 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
397   86F4 C9           	ret
398   86F5
399   86F5              ; --------------------------------------------------------------------------------------------------------------
400   86F5              ;
401   86F5              ;	31/01/23
402   86F5              ;
403   86F5              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
404   86F5              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
405   86F5
406   86F5              Guarda_foto_entidad_a_pintar
407   86F5
408   86F5 CD 22 87     	call Repone_pintar
409   86F8 CD A5 89     	call Draw
410   86FB CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
411   86FE C9           	ret
412   86FF
413   86FF              ; --------------------------------------------------------------------------------------------------------------
414   86FF              ;
415   86FF              ;
416   86FF
417   86FF 21 9E 85     Prepara_var_pintado_borrado	ld hl,Filas
418   8702 3A CC 85     	ld a,(Obj_dibujado)
419   8705 A7           	and a
420   8706 28 05        	jr z,1F
421   8708 11 C1 85     	ld de,Variables_de_pintado
422   870B 18 03        	jr 2F
423   870D 11 B7 85     1 ld de,Variables_de_borrado
424   8710 01 08 00     2 ld bc,8
425   8713 ED B0        	ldir
426   8715 C9           	ret
427   8716
428   8716              ; --------------------------------------------------------------------------------------------------------------
429   8716
430   8716 21 B7 85     Repone_borrar ld hl,Variables_de_borrado
431   8719 11 9E 85     	ld de,Filas
432   871C 01 08 00     	ld bc,8
433   871F ED B0        	ldir
434   8721 C9           	ret
435   8722
436   8722 21 C1 85     Repone_pintar ld hl,Variables_de_pintado
437   8725 11 9E 85     	ld de,Filas
438   8728 01 08 00     	ld bc,8
439   872B ED B0        	ldir
440   872D C9           	ret
441   872E
442   872E              ; *************************************************************************************************************************************************************
443   872E              ;
444   872E              ; 8/1/23
445   872E              ;
446   872E              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
447   872E              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
448   872E              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
449   872E
450   872E              ; Destruye HL y DE !!!!!
451   872E
452   872E              Inicia_punteros_de_entidades
453   872E
454   872E 21 70 84     	ld hl,Indice_de_entidades
455   8731 CD 69 87         call Extrae_address
456   8734 22 D8 85         ld (Puntero_store_entidades),hl
457   8737 21 72 84     	ld hl,Indice_de_entidades+2
458   873A 22 DC 85     	ld (Indice_restore),hl
459   873D CD 69 87     	call Extrae_address
460   8740 22 DA 85     	ld (Puntero_restore_entidades),hl
461   8743 C9               ret
462   8744
463   8744              ; *************************************************************************************************************************************************************
464   8744              ;
465   8744              ; 8/1/23
466   8744              ;
467   8744              ;	Inicializamos los punteros de selección de los 2 índices de disparo, Amadeus y Entidades.
468   8744
469   8744 21 08 84     Inicia_Puntero_Disparo_Entidades ld hl,Indice_de_disparos_entidades
470   8747 22 E8 85     	ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl
471   874A C9           	ret
472   874B 21 F0 83     Inicia_Puntero_Disparo_Amadeus ld hl,Indice_de_disparos_Amadeus
473   874E 22 EA 85     	ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl
474   8751 C9           	ret
475   8752
476   8752              ; -------------------------------------------------------------------------------------------------------------
477   8752              ;
478   8752              ; 30/1/23
479   8752              ;
480   8752
481   8752 2A E4 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
482   8755 7D           	ld a,l
483   8756 A7           	and a
484   8757 28 0C        	jr z,3F
485   8759 AF           	xor a
486   875A 67           	ld h,a
487   875B 7D           	ld a,l
488   875C D6 06        1 sub 6
489   875E 28 03        	jr z,2F
490   8760 24           	inc h
491   8761 18 F9        	jr 1B
492   8763 24           2 inc h
493   8764 7C           	ld a,h
494   8765 32 DF 85     3 ld (Numero_de_malotes),a
495   8768 C9           	ret
496   8769
497   8769              ; *************************************************************************************************************************************************************
498   8769              ;
499   8769              ; 20/10/22
500   8769              ;
501   8769              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
502   8769              ;
503   8769              ; Destruye el puntero y DE !!!!!
504   8769
505   8769 5E           Extrae_address ld e,(hl)
506   876A 23           	inc hl
507   876B 56           	ld d,(hl)
508   876C 2B           	dec hl
509   876D EB           	ex de,hl
510   876E C9           	ret
511   876F
512   876F              ; *************************************************************************************************************************************************************
513   876F              ;
514   876F              ;	7/2/23
515   876F              ;
516   876F              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
517   876F              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
518   876F              ;
519   876F              ;   Destruye HL y BC !!!!!,
520   876F              ;
521   876F              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
522   876F              ;					"0" ..... Izquierda.
523   876F
524   876F              Inicia_Puntero_objeto
525   876F
526   876F 3A B2 85     	ld a,(Cuad_objeto)
527   8772 E6 01        	and 1
528   8774 F5           	push af
529   8775 CC 93 87     	call z,Inicia_puntero_objeto_izq
530   8778 F1           	pop af
531   8779 28 2B        	jr z,1F
532   877B CD 80 87     	call Inicia_puntero_objeto_der
533   877E 18 26        	jr 1F
534   8780
535   8780              ; Arrancamos desde la parte izquierda de la pantalla.
536   8780              ; Iniciamos (Indice_Sprite_der).
537   8780
538   8780 2A A8 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
539   8783 22 AC 85     	ld (Puntero_DESPLZ_der),hl
540   8786 CD 69 87     	call Extrae_address
541   8789 22 A2 85     	ld (Puntero_objeto),hl
542   878C
543   878C 2A AA 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
544   878F              ;	call Extrae_address
545   878F 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
546   8792 C9           	ret
547   8793
548   8793              ; Arrancamos desde la parte derecha de la pantalla.
549   8793              ; Iniciamos (Indice_Sprite_izq).
550   8793
551   8793 2A AA 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
552   8796 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
553   8799 CD 69 87     	call Extrae_address
554   879C 22 A2 85     	ld (Puntero_objeto),hl
555   879F
556   879F 2A A8 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
557   87A2              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
558   87A2 22 AC 85     	ld (Puntero_DESPLZ_der),hl
559   87A5 C9           	ret
560   87A6
561   87A6              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
562   87A6
563   87A6 21 40 83     1 ld hl,Amadeus
564   87A9 ED 4B A2 85  	ld bc,(Puntero_objeto)
565   87AD B7 ED 42     	sub hl,bc
566   87B0 C0           	ret nz
567   87B1 21 CB 85     	ld hl,Ctrl_0
568   87B4 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
569   87B6 C9           	ret 												; _de nuestra nave en los extremos.
570   87B7
571   87B7              ; *************************************************************************************************************************************************************
572   87B7              ;
573   87B7              ;	8/1/23
574   87B7              ;
575   87B7              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
576   87B7              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
577   87B7
578   87B7              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
579   87B7              ;	_de la 2ª y 3ª entidad respectivamente.
580   87B7
581   87B7
582   87B7
583   87B7              Store_Restore_entidades
584   87B7
585   87B7 E5           	push hl
586   87B8 D5           	push de
587   87B9 C5            	push bc
588   87BA
589   87BA              ;	STORE !!!!!
590   87BA              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
591   87BA
592   87BA 21 9E 85     	ld hl,Filas
593   87BD ED 5B D8 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
594   87C1 01 3A 00     	ld bc,58
595   87C4 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
596   87C6
597   87C6              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
598   87C6
599   87C6 2A DA 85     	ld hl,(Puntero_restore_entidades)
600   87C9 22 D8 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
601   87CC 11 9E 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
602   87CF 01 3A 00     	ld bc,58
603   87D2 ED B0        	ldir
604   87D4
605   87D4              ;	Incrementa RESTORE !!!!!
606   87D4
607   87D4 2A DC 85         ld hl,(Indice_restore)
608   87D7 23           	inc hl
609   87D8 23           	inc hl
610   87D9 22 DC 85     	ld (Indice_restore),hl
611   87DC CD 69 87         call Extrae_address
612   87DF 22 DA 85         ld (Puntero_restore_entidades),hl
613   87E2 C1           	pop bc
614   87E3 D1           	pop de
615   87E4 E1           	pop hl
616   87E5 C9           	ret
617   87E6
618   87E6              ; **************************************************************************************************
619   87E6              ;
620   87E6              ;	29/10/22
621   87E6              ;
622   87E6              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
623   87E6
624   87E6 E5           Restore_Primera_entidad push hl
625   87E7 D5           	push de
626   87E8 C5            	push bc
627   87E9 2A D8 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
628   87EC 11 9E 85     	ld de,Filas
629   87EF 01 3A 00     	ld bc,58
630   87F2 ED B0        	ldir
631   87F4 C1           	pop bc
632   87F5 D1           	pop de
633   87F6 E1           	pop hl
634   87F7 C9           	ret
635   87F8
636   87F8              ; **************************************************************************************************
637   87F8              ;
638   87F8              ;	25/01/23
639   87F8              ;
640   87F8              ;	Restore_Amadeus
641   87F8              ;
642   87F8              ;	Cargamos en DRAW los parámetros de Amadeus.
643   87F8              ;
644   87F8
645   87F8 E5           Restore_Amadeus	push hl
646   87F9 D5           	push de
647   87FA C5            	push bc
648   87FB 21 7C 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
649   87FE 11 9E 85     	ld de,Filas
650   8801 01 3A 00     	ld bc,58
651   8804 ED B0        	ldir
652   8806 C1           	pop bc
653   8807 D1           	pop de
654   8808 E1           	pop hl
655   8809 C9           	ret
656   880A
657   880A              ; *************************************************************************************************************************************************************
658   880A              ;
659   880A              ;	29/01/23
660   880A              ;
661   880A              ;	Store_Amadeus
662   880A              ;
663   880A              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
664   880A              ;
665   880A
666   880A E5           Store_Amadeus push hl
667   880B D5           	push de
668   880C C5            	push bc
669   880D 21 9E 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
670   8810 11 7C 84     	ld de,Amadeus_db
671   8813 01 3A 00     	ld bc,58
672   8816 ED B0        	ldir
673   8818 C1           	pop bc
674   8819 D1           	pop de
675   881A E1           	pop hl
676   881B C9           	ret
677   881C
678   881C              ; **************************************************************************************************
679   881C
680   881C              ; Teclado.
681   881C
682   881C 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
683   881E DB FE        	in a,($fe)
684   8820 E6 01        	and $01
685   8822 28 02        	jr z,1f
686   8824 18 F6        	jr Pulsa_ENTER
687   8826 C9           1 ret
688   8827
689   8827              ; **************************************************************************************************
690   8827              ;
691   8827              ; Temporización.
692   8827
693   8827              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
694   8827              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
695   8827              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
696   8827              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
697   8827
698   8827              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
699   8827              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
700   8827              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
701   8827
702   8827              ; A partir de $4f61 no hace falta DELAY.
703   8827
704   8827              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
705   8827
706   8827 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
707   882A 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
708   882B 78           	LD A,B
709   882C A7           	AND A
710   882D 20 FB        	JR NZ,wait
711   882F C9           	RET
712   8830
713   8830              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
714   8830              ;
715   8830              ;	16/02/23
716   8830
717   8830              Movimiento_Amadeus
718   8830
719   8830 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
720   8832 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
721   8834 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
722   8836 CC AE 90         call z,Mov_left											;			"			"			"			"			"			"			"			"
723   8839 3E F7        	ld a,$f7
724   883B DB FE        	in a,($fe)
725   883D E6 01        	and $01
726   883F C8           	ret z
727   8840
728   8840 3E F7        	ld a,$f7
729   8842 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
730   8844 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
731   8846 CC 90 8F     	call z,Mov_right										;			"			"			"			"			"			"			"			"
732   8849
733   8849              ; Disparo.
734   8849
735   8849 3E F7        	ld a,$f7												; "5" para disparar.
736   884B DB FE        	in a,($fe)
737   884D E6 10        	and $10
738   884F CC 87 88     	call z,Genera_disparo
739   8852 C9               ret
740   8853
741   8853              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
742   8853              ;
743   8853              ;	Rutina provisional.
744   8853
745   8853 3E 7F        Detecta_disparo_entidad	ld a,$7f
746   8855 DB FE        	in a,($fe)
747   8857 E6 01        	and 1
748   8859 C0           	ret nz
749   885A CD 87 88     	call Genera_disparo
750   885D C9           	ret
751   885E
752   885E              ; Pinta indicadores de FILAS. ------------------------------------------------------
753   885E
754   885E 21 10 40     Pinta_FILAS ld hl,$4010
755   8861              ;	ld b,9
756   8861              ;2 push hl
757   8861              ;	push bc
758   8861 06 BF        	ld b,$bf
759   8863 36 80        1 ld (hl),%10000000
760   8865 CD 8B 8C     	call NextScan
761   8868 10 F9        	djnz 1B
762   886A              ;	pop bc
763   886A              ;	pop hl
764   886A              ;	inc l
765   886A              ;	djnz 2B
766   886A 06 03        	ld b,3
767   886C 21 00 47         ld hl,$4700
768   886F CD 75 88     3 call Bucle_1
769   8872 10 FB            djnz 3B
770   8874 C9               ret
771   8875
772   8875 C5           Bucle_1 push bc
773   8876 E5                   push hl
774   8877 D1                   pop de
775   8878 13                   inc de
776   8879 01 FF 00             ld bc,255
777   887C 36 FF                ld (hl),255
778   887E ED B0                ldir
779   8880 23                   inc hl
780   8881 3E 07                ld a,7
781   8883 84                   add a,h
782   8884 67                   ld h,a
783   8885 C1                   pop bc
784   8886 C9                   ret
785   8887
786   8887              ; ---------------------------------------------------------------
787   8887
788   8887              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  8887              ; ******************************************************************************************************************************************************************************************
  2+  8887              ;
  3+  8887              ;   19/02/23
  4+  8887              ;
  5+  8887              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  8887              ;   En el caso de generar disparo la rutina proporciona 4 variables:
  7+  8887              ;
  8+  8887              ;
  9+  8887              ;       -1 .defw ..... Control. %00000001 00000001
 10+  8887              ;
 11+  8887              ;           [Bit0] ..... Dirección. "1" Cuando dispara Amadeus, (hacia arriba), "0" cuando lo_
 12+  8887              ;               _ hacen las entidades hacia abajo.
 13+  8887              ;
 14+  8887              ;           [Bit8] ..... Impacto. "1" Cuando se produce colisión al generar un disparo.
 15+  8887              ;
 16+  8887              ;       - 2 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 17+  8887              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 18+  8887              ;
 19+  8887              ;       - 3 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 20+  8887              ;           _ la bala.
 21+  8887              ;
 22+  8887              ;       - 4 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 23+  8887              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 24+  8887              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 25+  8887              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 26+  8887              ;           _ en el momento de generarse la bala)).
 27+  8887
 28+  8887              Genera_disparo
 29+  8887
 30+  8887              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 31+  8887              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 32+  8887              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 33+  8887              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 34+  8887              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 35+  8887              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga dichos valores.
 36+  8887              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 37+  8887
 38+  8887 3A D4 85         ld a,(Columnas)
 39+  888A 47               ld b,a
 40+  888B 3A 9F 85         ld a,(Columns)
 41+  888E B8               cp b
 42+  888F C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 43+  8890
 44+  8890 21 00 80         ld hl,Indice_disparo
 45+  8893 3A A6 85         ld a,(CTRL_DESPLZ)
 46+  8896 4F               ld c,a
 47+  8897 A7               and a
 48+  8898 28 0F            jr z,1F
 49+  889A E6 01            and 1
 50+  889C C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 51+  889D 06 F9            ld b,$f9
 52+  889F 79               ld a,c
 53+  88A0
 54+  88A0 23           2 inc hl
 55+  88A1 23               inc hl
 56+  88A2 B8               cp b
 57+  88A3 28 04            jr z,1F
 58+  88A5 04               inc b
 59+  88A6 04               inc b
 60+  88A7 18 F7            jr 2B
 61+  88A9
 62+  88A9 CD 69 87     1 call Extrae_address
 63+  88AC E5               push hl
 64+  88AD FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 65+  88AF DD 21 E9 8E      ld ix, Pinta_Disparo          		; Rutinas_de_impresion en IX.
 66+  88B3
 67+  88B3              ; --------------- ---------------- ----------------- -------------
 68+  88B3              ;
 69+  88B3              ;   Genera disparo.
 70+  88B3              ;
 71+  88B3              ;   Generamos variables de disparo. Varían en función del cuadrante en el que nos encontramos.
 72+  88B3
 73+  88B3 3A B2 85         ld a,(Cuad_objeto)
 74+  88B6 FE 02            cp 2
 75+  88B8 38 54            jr c,3F
 76+  88BA 28 52            jr z,3F
 77+  88BC
 78+  88BC              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 79+  88BC
 80+  88BC E6 01            and 1
 81+  88BE 28 27            jr z,4F
 82+  88C0
 83+  88C0              ; Estamos en el 3er cuadrante de pantalla.
 84+  88C0              ; 3er CUAD. ----- ----- ----- ----- -----
 85+  88C0              ;
 86+  88C0              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 87+  88C0              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 88+  88C0              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 89+  88C0
 90+  88C0 2A A0 85     	ld hl,(Posicion_actual)
 91+  88C3
 92+  88C3              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
 93+  88C3
 94+  88C3 3A CB 85         ld a,(Ctrl_0)
 95+  88C6 CB 77            bit 6,a
 96+  88C8 28 0B            jr z,8F
 97+  88CA
 98+  88CA              ; Dispara Amadeus.
 99+  88CA
100+  88CA 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
101+  88CC CD 9A 8C         call PreviousScan
102+  88CF CD 9A 8C         call PreviousScan
103+  88D2 2B               dec hl                                          ; Puntero de impresión en HL.
104+  88D3 18 0A            jr 10F
105+  88D5
106+  88D5              ; Dispara Entidad.
107+  88D5
108+  88D5 0E 00        8 ld c,0                                            ; Dirección "0", hacia abajo.
109+  88D7 06 10            ld b,16
110+  88D9 CD 8B 8C     9 call NextScan
111+  88DC 10 FB            djnz 9B
112+  88DE
113+  88DE              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
114+  88DE
115+  88DE 2B               dec hl                                          ; Puntero de impresión en HL.
116+  88DF CD 80 89     10 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
117+  88E2              ;                                                   ; _al generar el disparo.
118+  88E2
119+  88E2              ; LLegados a este punto tendremos:
120+  88E2              ;
121+  88E2              ;       Puntero_objeto_disparo en IY.
122+  88E2              ;       Rutinas_de_impresion en IX.
123+  88E2              ;       Puntero_de_impresion en HL.
124+  88E2              ;       Impacto/Dirección en BC.
125+  88E2
126+  88E2 CD 2D 89         call Almacena_disparo
127+  88E5 18 45            jr 6F                                           ; RET.
128+  88E7
129+  88E7
130+  88E7              ; Estamos en el 4º cuadrante de pantalla.
131+  88E7              ; 4º CUAD. ----- ----- ----- ----- -----
132+  88E7              ;
133+  88E7              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
134+  88E7              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
135+  88E7              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
136+  88E7
137+  88E7 2A A0 85     4 ld hl,(Posicion_actual)
138+  88EA
139+  88EA              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
140+  88EA
141+  88EA 3A CB 85         ld a,(Ctrl_0)
142+  88ED CB 77            bit 6,a
143+  88EF 28 0B            jr z,11F
144+  88F1
145+  88F1              ; Dispara Amadeus.
146+  88F1
147+  88F1 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
148+  88F3 23               inc hl
149+  88F4 CD 9A 8C         call PreviousScan
150+  88F7 CD 9A 8C         call PreviousScan
151+  88FA 18 0A            jr 13F
152+  88FC
153+  88FC              ; Dispara Entidad.
154+  88FC
155+  88FC 0E 00        11 ld c,0                                            ; Dirección "0", hacia abajo.
156+  88FE 06 10            ld b,16
157+  8900 23               inc hl
158+  8901 CD 8B 8C     12 call NextScan
159+  8904 10 FB            djnz 12B
160+  8906
161+  8906              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
162+  8906
163+  8906 CD 80 89     13 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
164+  8909              ;                                                   ; _al generar el disparo.
165+  8909
166+  8909              ; LLegados a este punto tendremos:
167+  8909              ;
168+  8909              ;       Puntero_objeto_disparo en IY.
169+  8909              ;       Rutinas_de_impresion en IX.
170+  8909              ;       Puntero_de_impresion en HL.
171+  8909              ;       Impacto/Dirección en BC.
172+  8909
173+  8909 CD 2D 89         call Almacena_disparo
174+  890C 18 1E            jr 6F                                           ; RET.
175+  890E
176+  890E              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
177+  890E
178+  890E 28 0F        3 jr z,5F
179+  8910
180+  8910              ; 1er CUAD. ----- ----- ----- ----- -----
181+  8910              ;
182+  8910              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
183+  8910              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
184+  8910              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
185+  8910              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
186+  8910
187+  8910 2A A0 85     	ld hl,(Posicion_actual)
188+  8913 CD 8B 8C     	call NextScan
189+  8916
190+  8916              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
191+  8916
192+  8916 2B               dec hl                                          ; Puntero de impresión en HL.
193+  8917 01 00 00         ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
194+  891A
195+  891A              ; LLegados a este punto tendremos:
196+  891A              ;
197+  891A              ;       Puntero_objeto_disparo en IY.
198+  891A              ;       Rutinas_de_impresion en IX.
199+  891A              ;       Puntero_de_impresion en HL.
200+  891A              ;       Impacto/Dirección en BC.
201+  891A
202+  891A CD 2D 89         call Almacena_disparo
203+  891D 18 0D            jr 6F                                           ; RET.
204+  891F
205+  891F              ; Estamos en el 2º cuadrante de pantalla.
206+  891F              ; 2º CUAD. ----- ----- ----- ----- -----
207+  891F              ;
208+  891F              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
209+  891F              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
210+  891F              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
211+  891F              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
212+  891F
213+  891F 2A A0 85     5 ld hl,(Posicion_actual)
214+  8922 23           	inc hl
215+  8923 CD 8B 8C     	call NextScan
216+  8926
217+  8926              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
218+  8926
219+  8926 01 00 00     	ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
220+  8929
221+  8929              ; LLegados a este punto tendremos:
222+  8929              ;
223+  8929              ;       Puntero_objeto_disparo en IY.
224+  8929              ;       Rutinas_de_impresion en IX.
225+  8929              ;       Puntero_de_impresion en HL.
226+  8929              ;       Impacto/Dirección en BC.
227+  8929
228+  8929 CD 2D 89         call Almacena_disparo
229+  892C
230+  892C              ; Preparamos registros para llamar a [Guarda_foto_registros].
231+  892C
232+  892C              6
233+  892C
234+  892C              ;    push ix
235+  892C              ;    pop hl
236+  892C              ;    push af
237+  892C              ;    pop ix
238+  892C
239+  892C              ;    call Guarda_foto_registros
240+  892C
241+  892C C9               ret
242+  892D
243+  892D              ; ----------------------------------------------------------------
244+  892D              ;
245+  892D              ;   25/02/23
246+  892D              ;
247+  892D              ;   La Rutina va almacenando disparos en sus respectivas bases de datos.
248+  892D              ;   Amadeus dispone de 2 disparos mientras que las entidades disponen de un máximo de 10.
249+  892D
250+  892D              Almacena_disparo
251+  892D
252+  892D E5               push hl
253+  892E F1               pop af
254+  892F 08               ex af,af                                        ; Puntero_de_impresion en AF'.
255+  8930
256+  8930 0C           3 inc c
257+  8931 0D               dec c
258+  8932 28 1A            jr z,1F                                         ; Según la `Dirección' del proyectil sabemos si_
259+  8934              ;                                                   ; _ es Amadeus o una entidad la que dispara.
260+  8934
261+  8934              ; Dispara AMADEUS.
262+  8934
263+  8934 C5               push bc
264+  8935 01 F4 83         ld bc,Indice_de_disparos_Amadeus+4              ; Disparo_3A
265+  8938 2A EA 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
266+  893B A7               and a
267+  893C ED 42            sbc hl,bc
268+  893E CC 4B 87         call z,Inicia_Puntero_Disparo_Amadeus
269+  8941 C1               pop bc
270+  8942 28 3B            jr z,4F
271+  8944
272+  8944 2A EA 85         ld hl,(Puntero_DESPLZ_DISPARO_AMADEUS)
273+  8947 23               inc hl
274+  8948 23               inc hl
275+  8949 22 EA 85         ld (Puntero_DESPLZ_DISPARO_AMADEUS),hl          ; (Puntero_DESPLZ_DISPARO_AMADEUS) ya apunta al siguiente_
276+  894C              ;                                                   ; _ Disparo_(+1).
277+  894C 18 18            jr 2F
278+  894E
279+  894E              ; Dispara una entidad.
280+  894E
281+  894E C5           1 push bc
282+  894F 01 1C 84         ld bc,Indice_de_disparos_entidades+20           ; Disparo_11
283+  8952 2A E8 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
284+  8955 A7               and a
285+  8956 ED 42            sbc hl,bc
286+  8958 CC 44 87         call z,Inicia_Puntero_Disparo_Entidades
287+  895B C1               pop bc
288+  895C 28 21            jr z,4F
289+  895E
290+  895E 2A E8 85         ld hl,(Puntero_DESPLZ_DISPARO_ENTIDADES)
291+  8961 23               inc hl
292+  8962 23               inc hl
293+  8963 22 E8 85         ld (Puntero_DESPLZ_DISPARO_ENTIDADES),hl        ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
294+  8966              ;                                                   ; _ Disparo_(+1).
295+  8966 CD 69 87     2 call Extrae_address                               ; HL contiene la dirección donde vamos a almacenar_
296+  8969              ;                                                   ; _ los 8 bytes que definen el disparo:
297+  8969              ;
298+  8969              ;                                                     Puntero_objeto_disparo en IY.
299+  8969              ;                                                     Rutinas_de_impresion en IX.
300+  8969              ;                                                     Puntero_de_impresion en HL.
301+  8969              ;                                                     Impacto/Dirección en BC.
302+  8969
303+  8969 2B               dec hl                                          ; Esta parte de la rutina comprueba si este_
304+  896A 7E               ld a,(hl)                                       ; _ almacén de disparo está vacio. Si no es así, saltamos_
305+  896B 23               inc hl                                          ; _ al siguiente.
306+  896C A7               and a
307+  896D 20 C1            jr nz,3B
308+  896F
309+  896F 08               ex af,af
310+  8970 ED 73 E0 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
311+  8974 F9               ld sp,hl
312+  8975
313+  8975 DD E5            push ix                                         ; Rutina de impresión.
314+  8977 F5               push af                                         ; Puntero de impresión.
315+  8978 FD E5            push iy                                         ; Puntero objeto.
316+  897A C5               push bc                                         ; Control.
317+  897B
318+  897B ED 7B E0 85      ld sp,(Stack)
319+  897F
320+  897F C9           4 ret
321+  8980
322+  8980              ; ----------------------------------------------------------------
323+  8980              ;
324+  8980              ;   20/02/23
325+  8980
326+  8980 E5           Comprueba_Colision push hl
327+  8981 1E 00            ld e,0                                         ; E,(Impacto)="0".
328+  8983 CD 97 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
329+  8986 1C               inc e
330+  8987 1D               dec e
331+  8988 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
332+  898A              ; Hay impacto.
333+  898A 43           2 ld b,e
334+  898B E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
335+  898C C9           3 ret
336+  898D E1           1 pop hl
337+  898E E5               push hl
338+  898F CD 8B 8C         call NextScan
339+  8992 CD 97 89         call Bucle_2
340+  8995 18 F3            jr 2B
341+  8997
342+  8997              ; ---------- ----------
343+  8997
344+  8997 06 02        Bucle_2 ld b,2
345+  8999 7E           2 ld a,(hl)
346+  899A A7               and a
347+  899B 20 04            jr nz,1F
348+  899D 23               inc hl
349+  899E 10 F9            djnz 2B
350+  89A0 C9           3 ret
351+  89A1 1E 01        1 ld e,1
352+  89A3 18 FB            jr 3B
353+  89A5
354+  89A5              ; -------------------------------------------------------------------------------------------------------------
355+  89A5
356+  89A5
357+  89A5
358+  89A5
359+  89A5
# file closed: Disparo.asm
789   89A5              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  89A5              ; ******************************************************************************************************************************************************************************************
  2+  89A5              ;
  3+  89A5              ; 01/23
  4+  89A5              ;
  5+  89A5              ; DRAW. ************************************************************************************************************************************************************************************
  6+  89A5
  7+  89A5 CD 7F 8C     Draw call Prepara_draw
  8+  89A8 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  89A9 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  89AA 28 05        	jr z,2F
 11+  89AC
 12+  89AC 3A B2 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  89AF 18 0C        	jr 1F
 14+  89B1 2A B0 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  89B4 22 A0 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  89B7 CD 46 8B     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  89BA              ;													; _la esquina superior izquierda de la pantalla.
 18+  89BA CD 7F 93     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  89BD 3A CB 85     1 ld a,(Ctrl_0)
 20+  89C0 CB 6F        	bit 5,a
 21+  89C2 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  89C4
 23+  89C4 CD DC 89     	call Comprueba_limite_horizontal
 24+  89C7 CD 6C 8A     	call Comprueba_limite_vertical
 25+  89CA
 26+  89CA              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  89CA
 28+  89CA CD B9 8B     3 call calcula_CColumnass
 29+  89CD CD F0 8B     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  89D0 CD 45 8C     	call Define_rutina_de_impresion
 31+  89D3
 32+  89D3 3A CB 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  89D6 CB AF        	res 5,a											; _a ser de utilidad.
 34+  89D8 32 CB 85     	ld (Ctrl_0),a
 35+  89DB
 36+  89DB C9           	ret
 37+  89DC
 38+  89DC              ; *******************************************************************************************************************************************************************************************
 39+  89DC              ;	21/01/23
 40+  89DC              ;
 41+  89DC              ; 	Comprueba_limite_horizontal.
 42+  89DC              ;
 43+  89DC              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  89DC              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  89DC              ;
 46+  89DC              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  89DC              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  89DC              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  89DC              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  89DC
 51+  89DC
 52+  89DC
 53+  89DC 3A CB 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  89DF CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  89E1 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  89E3 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  89E5 32 CB 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  89E8 18 09            jr 6F
 59+  89EA CB 5F        1 bit 3,a
 60+  89EC 28 0A            jr z,2F
 61+  89EE E6 F7            and $f7
 62+  89F0 32 CB 85         ld (Ctrl_0),a
 63+  89F3 CD 46 8B     6 call Inicializacion
 64+  89F6 18 5B            jr 5F
 65+  89F8 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  89F9
 67+  89F9              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  89F9              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  89F9
 70+  89F9 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  89FA 2A D5 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  89FD CD 16 8F     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8A00 67           	ld h,a
 74+  8A01 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8A02 CD 16 8F     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8A05 67           	ld h,a
 77+  8A06 A7           	and a
 78+  8A07 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8A09 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8A0A 3A B2 85     	ld a,(Cuad_objeto)
 81+  8A0D FE 02        	cp 2
 82+  8A0F 38 1E        	jr c,3F
 83+  8A11 28 1C        	jr z,3F
 84+  8A13 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8A14 28 23            jr z,7F
 86+  8A16 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8A18 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8A1A E1           	pop hl
 89+  8A1B
 90+  8A1B              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  8A1B              ; _para indicar con E="2" en caso necesario.
 92+  8A1B
 93+  8A1B E5               push hl
 94+  8A1C C5               push bc
 95+  8A1D CD 16 8F     	call calcula_tercio
 96+  8A20 FE 01        	cp 1
 97+  8A22 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8A24 CD 54 8A         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8A27 28 26            jr z,9F
100+  8A29 38 24            jr c,9F
101+  8A2B 1E 00        11 ld e,0
102+  8A2D 18 22            jr 8F
103+  8A2F 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8A30 28 07        	jr z, 7F
105+  8A32 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8A34 1E 00         	ld e,0
107+  8A36 E1           	pop hl
108+  8A37 18 04        	jr 4F
109+  8A39 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  8A3B 18 15            jr 10F
111+  8A3D
112+  8A3D              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  8A3D              ; _para indicar con E="2" en caso necesario.
114+  8A3D
115+  8A3D E5           4 push hl
116+  8A3E C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8A3F CD 16 8F     	call calcula_tercio
118+  8A42 FE 01        	cp 1
119+  8A44 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8A46 CD 54 8A         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8A49 28 04            jr z,9F
122+  8A4B 30 02            jr nc,9F
123+  8A4D 18 02        	jr 8F
124+  8A4F 1E 02        9 ld e,2
125+  8A51 C1           8 pop bc
126+  8A52 E1           10 pop hl
127+  8A53 C9           5 ret
128+  8A54
129+  8A54              ; --------------------
130+  8A54              ;
131+  8A54              ; 25/08/22
132+  8A54
133+  8A54 CD 16 8F     Comprueba_centro call calcula_tercio
134+  8A57 67               ld h,a
135+  8A58 08           	ex af,af
136+  8A59 FE 02        	cp 2
137+  8A5B 38 07        	jr c,1F
138+  8A5D 28 05        	jr z,1F
139+  8A5F 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8A62 18 03        	jr 2F
141+  8A64 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8A67 08           2 ex af,af
143+  8A68 A7               and a
144+  8A69 ED 42            sbc hl,bc
145+  8A6B C9               ret
146+  8A6C
147+  8A6C              ; *********************************************************************************************************************************************************************************************
148+  8A6C              ;
149+  8A6C              ;   16/8/22
150+  8A6C              ;
151+  8A6C              ;	Comprueba_limite_vertical
152+  8A6C              ;
153+  8A6C              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8A6C              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8A6C              ;
156+  8A6C
157+  8A6C 2A A0 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8A6F 7D           	ld a,l
159+  8A70 E6 1F        	and $1F
160+  8A72 57           	ld d,a
161+  8A73 3A D7 85     	ld a,(Limite_vertical)
162+  8A76 BA           	cp d 											; Límite - Posición.
163+  8A77 08           	ex af,af 										; Resultado de CP d en F'.
164+  8A78 3A B2 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8A7B CB 47        	bit 0,a
166+  8A7D 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8A7F
168+  8A7F              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8A7F
170+  8A7F 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8A80 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8A82
173+  8A82              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8A82              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8A82
176+  8A82 3A A4 85         ld a,(Coordenada_X)
177+  8A85 16 0F            ld d,Centro_izquierda
178+  8A87 A7               and a
179+  8A88 92               sub d 											 ; Posición - Centro_izquierda.
180+  8A89 28 1E            jr z,3F
181+  8A8B 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8A8D              ;                                                    ; _salimos sin modificar nada.
183+  8A8D 18 0E            jr 2F
184+  8A8F 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8A90 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8A92
187+  8A92              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8A92              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8A92
190+  8A92 3A A4 85         ld a,(Coordenada_X)
191+  8A95 16 10            ld d,Centro_derecha
192+  8A97 A7               and a
193+  8A98 92               sub d
194+  8A99 28 0E            jr z,3F
195+  8A9B 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8A9D              ;                                                    ; _salimos sin modificar nada.
197+  8A9D CB 43        2 bit 0,e
198+  8A9F 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8AA1 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8AA2 CD 36 8B         call Modificaccionne
201+  8AA5 C1           	pop bc
202+  8AA6 CD 46 8B         call Inicializacion
203+  8AA9 C9           3 ret 				 								 ; Salimos de la rutina.
204+  8AAA
205+  8AAA              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8AAA
207+  8AAA C5           4 push bc
208+  8AAB 01 9F 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8AAE 0A           	ld a,(bc)
210+  8AAF 3D           	dec a
211+  8AB0 47           	ld b,a 											 ; Columnas-1 en B.
212+  8AB1 7D           	ld a,l
213+  8AB2 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8AB3 CB 47        	bit 0,a
215+  8AB5 28 03        	jr z,5F
216+  8AB7 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8AB8 18 2E        	jr 7F
218+  8ABA
219+  8ABA              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8ABA
221+  8ABA 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8ABB F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8ABC 3A CB 85     	ld a,(Ctrl_0)
224+  8ABF CB 4F        	bit 1,a
225+  8AC1 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8AC3 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8AC4
228+  8AC4              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8AC4
230+  8AC4 1C               inc e
231+  8AC5 1D               dec e
232+  8AC6 20 07            jr nz,12F
233+  8AC8 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8AC9 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8ACA 22 A0 85     	ld (Posicion_actual),hl
236+  8ACD 18 44        13 jr 9F
237+  8ACF CB 43        12 bit 0,e
238+  8AD1 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8AD3              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8AD3 C1           	pop bc
241+  8AD4 18 D3        	jr 3B
242+  8AD6 80           14 add b
243+  8AD7 6F               ld l,a
244+  8AD8 22 A0 85     	ld (Posicion_actual),hl
245+  8ADB CD 36 8B         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8ADE 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8AE0 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8AE2 32 CB 85         ld (Ctrl_0),a
249+  8AE5 F1           	pop af
250+  8AE6 18 2B        	jr 9F
251+  8AE8
252+  8AE8              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8AE8
254+  8AE8 F5           7 push af
255+  8AE9 3A CB 85     	ld a,(Ctrl_0)
256+  8AEC CB 47        	bit 0,a
257+  8AEE 20 1D        	jr nz,8F
258+  8AF0 F1           	pop af
259+  8AF1
260+  8AF1              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8AF1
262+  8AF1 1C           	inc e
263+  8AF2 1D               dec e
264+  8AF3 20 07            jr nz,10F
265+  8AF5 90           	sub b
266+  8AF6 6F               ld l,a
267+  8AF7 22 A0 85     	ld (Posicion_actual),hl
268+  8AFA 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8AFC              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8AFC CB 43        10 bit 0,e
271+  8AFE 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8B00              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8B00 C1           	pop bc
274+  8B01 18 A6        	jr 3B
275+  8B03 90           16 sub b
276+  8B04 6F               ld l,a
277+  8B05 22 A0 85     	ld (Posicion_actual),hl
278+  8B08 CD 36 8B         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8B0B 18 06            jr 9F
280+  8B0D E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8B0F 32 CB 85         ld (Ctrl_0),a
282+  8B12 F1           	pop af
283+  8B13 C1           9 pop bc
284+  8B14 1E 00        	ld e,0
285+  8B16 CD 46 8B         call Inicializacion
286+  8B19 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8B1A 08           	ex af,af
288+  8B1B F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8B1C 18 8B            jr 3B
290+  8B1E
291+  8B1E              ; --------------------
292+  8B1E
293+  8B1E 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8B20 CD 9A 8C     1 call PreviousScan
295+  8B23 10 FB            djnz 1B
296+  8B25 22 A0 85     	ld (Posicion_actual),hl
297+  8B28 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8B29 C9           	ret
299+  8B2A
300+  8B2A              ; --------------------
301+  8B2A
302+  8B2A 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8B2C CD 8B 8C     1 call NextScan
304+  8B2F 10 FB            djnz 1B
305+  8B31 22 A0 85     	ld (Posicion_actual),hl
306+  8B34 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8B35 C9           	ret
308+  8B36
309+  8B36              ; --------------------
310+  8B36              ;
311+  8B36              ;	22/01/23
312+  8B36              ;
313+  8B36              ;	E="1". Hemos cambiado de cuadrante.
314+  8B36              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8B36              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8B36
317+  8B36
318+  8B36              Modificaccionne
319+  8B36
320+  8B36 3A B2 85     	ld a,(Cuad_objeto)
321+  8B39 FE 02        	cp 2
322+  8B3B CC 1E 8B         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8B3E DC 1E 8B         call c,Modifica_Pos_actual
324+  8B41 C8           	ret z
325+  8B42 CD 2A 8B         call Modifica_Pos_actual2
326+  8B45 C9               ret
327+  8B46
328+  8B46              ; *************************************************************************************************************************************************************************************************
329+  8B46              ;
330+  8B46              ;	13/8/22
331+  8B46              ;
332+  8B46              ;	Inicializacion
333+  8B46              ;
334+  8B46              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8B46              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8B46              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8B46              ;
338+  8B46              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8B46              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8B46              ;	_ desaparece/aparece.
341+  8B46
342+  8B46              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8B46              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8B46              ;
345+  8B46              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8B46              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8B46              ; 		   [E] ="0"
348+  8B46
349+  8B46              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8B46
351+  8B46 CD 16 8F     Inicializacion call calcula_tercio
352+  8B49 28 36        	jr z,primit
353+  8B4B E6 02        	and 2
354+  8B4D 20 07        	jr nz,segmit
355+  8B4F 7D           	ld a,l
356+  8B50 FE 7F        	cp $7f
357+  8B52 38 2D        	jr c,primit
358+  8B54 28 2B        	jr z,primit
359+  8B56 CD B3 8B     segmit call column
360+  8B59 38 13        	jr c,tercuad
361+  8B5B 3E 04        cuarcuad ld a,4
362+  8B5D 32 B2 85     	ld (Cuad_objeto),a
363+  8B60 21 20 48     	ld hl,$4820
364+  8B63 22 D5 85     	ld (Limite_horizontal),hl
365+  8B66 21 D7 85     	ld hl,Limite_vertical
366+  8B69 36 0D        	ld (hl),$0d
367+  8B6B 08           	ex af,af
368+  8B6C 18 3C        	jr 1F
369+  8B6E              tercuad
370+  8B6E 3E 03        	ld a,3
371+  8B70 32 B2 85     	ld (Cuad_objeto),a
372+  8B73 21 20 48     	ld hl,$4820
373+  8B76 22 D5 85     	ld (Limite_horizontal),hl
374+  8B79 21 D7 85     	ld hl,Limite_vertical
375+  8B7C 36 12        	ld (hl),$12
376+  8B7E 08           	ex af,af
377+  8B7F 18 29        	jr 1F
378+  8B81 CD B3 8B     primit call column
379+  8B84 38 13        	jr c, primcuad
380+  8B86              segcuad
381+  8B86 3E 02        	ld a,2
382+  8B88 32 B2 85     	ld (Cuad_objeto),a
383+  8B8B 21 C0 4F     	ld hl,$4fc0
384+  8B8E 22 D5 85     	ld (Limite_horizontal),hl
385+  8B91 21 D7 85     	ld hl,Limite_vertical
386+  8B94 36 0D        	ld (hl),$0d
387+  8B96 08           	ex af,af
388+  8B97 18 11        	jr 1F
389+  8B99              primcuad
390+  8B99 3E 01        	ld a,1
391+  8B9B 32 B2 85     	ld (Cuad_objeto),a
392+  8B9E 21 C0 4F     	ld hl,$4fc0
393+  8BA1 22 D5 85     	ld (Limite_horizontal),hl
394+  8BA4 21 D7 85     	ld hl,Limite_vertical
395+  8BA7 36 12        	ld (hl),$12
396+  8BA9 08           	ex af,af
397+  8BAA CD 48 92     1 call Genera_coordenadas
398+  8BAD 21 CB 85     	ld hl,Ctrl_0
399+  8BB0 CB EE        	set 5,(hl)
400+  8BB2 C9           	ret
401+  8BB3
402+  8BB3              ; ------------------------------------------------------------------------------------------------------------------
403+  8BB3
404+  8BB3              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8BB3              ;
406+  8BB3              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8BB3
408+  8BB3 7D           column ld a,l
409+  8BB4 E6 1F        	and $1f
410+  8BB6 FE 10         	cp $10
411+  8BB8 C9            	ret
412+  8BB9
413+  8BB9              ; --------------------------------------------------------------------------------------------------------------------
414+  8BB9              ;
415+  8BB9              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8BB9              ;
417+  8BB9              ; 14/12/22
418+  8BB9              ;
419+  8BB9              ;	Modifica: A y BC.
420+  8BB9
421+  8BB9 3A B2 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8BBC E6 01        	and 1
423+  8BBE 28 17        	jr z,1F
424+  8BC0
425+  8BC0              ; Nos encontramos en la parte izquierda de la pantalla
426+  8BC0
427+  8BC0 3A A4 85     	ld a,(Coordenada_X)
428+  8BC3 47           	ld b,a
429+  8BC4 04           	inc b											; (Coordenada_X)+1 en B.
430+  8BC5 79           	ld a,c
431+  8BC6 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8BC7 38 08        	jr c,2F
433+  8BC9 47           	ld b,a
434+  8BCA 79           	ld a,c
435+  8BCB 90           	sub b
436+  8BCC 32 D4 85     	ld (Columnas),a
437+  8BCF 18 1B        	jr 4F
438+  8BD1 79           2 ld a,c
439+  8BD2 32 D4 85     	ld (Columnas),a
440+  8BD5 18 15        	jr 4F
441+  8BD7
442+  8BD7              ; Nos encontramos en la parte derecha de la pantalla.
443+  8BD7
444+  8BD7 3A A4 85     1 ld a,(Coordenada_X)
445+  8BDA 81           	add c
446+  8BDB 3D           	dec a
447+  8BDC D6 1F        	sub $1f
448+  8BDE 38 08        	jr c,3F
449+  8BE0 47           	ld b,a
450+  8BE1 79           	ld a,c
451+  8BE2 90           	sub b
452+  8BE3 32 D4 85     	ld (Columnas),a
453+  8BE6 18 04        	jr 4F
454+  8BE8 79           3 ld a,c
455+  8BE9 32 D4 85     	ld (Columnas),a
456+  8BEC D9           4 exx
457+  8BED 4F           	ld c,a
458+  8BEE D9           	exx
459+  8BEF C9            ret
460+  8BF0
461+  8BF0              ; --------------------------------------------------------------------------------------------------------------------
462+  8BF0              ;
463+  8BF0              ; 7/1/23
464+  8BF0              ;
465+  8BF0              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8BF0              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8BF0              ;
468+  8BF0              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8BF0              ;	DESTRUYE: HL,B Y A.
470+  8BF0
471+  8BF0 3A B2 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8BF3 FE 02        	cp 2
473+  8BF5 38 18        	jr c,1F
474+  8BF7 28 16        	jr z,1F
475+  8BF9 E6 01        	and 1
476+  8BFB 28 0D        	jr z,3F
477+  8BFD
478+  8BFD              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8BFD
480+  8BFD CD 39 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8C00
482+  8C00 7D           9 ld a,l
483+  8C01 E6 1F        	and $1f
484+  8C03 28 2A        	jr z,7F
485+  8C05 2B           	dec hl
486+  8C06 10 F8        	djnz 9B
487+  8C08 18 25        	jr 7F
488+  8C0A
489+  8C0A              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8C0A
491+  8C0A 2A A0 85     3 ld hl,(Posicion_actual)
492+  8C0D 18 20        	jr 7F
493+  8C0F
494+  8C0F 28 14        1 jr z,2F
495+  8C11
496+  8C11              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8C11
498+  8C11 CD 39 8C     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8C14 7D           4 ld a,l
500+  8C15 E6 1F        	and $1f
501+  8C17 28 03        	jr z,6F
502+  8C19 2B           	dec hl
503+  8C1A 10 F8        	djnz 4B
504+  8C1C 06 0F        6 ld b,15
505+  8C1E CD 9A 8C     5 call PreviousScan
506+  8C21 10 FB        	djnz 5B
507+  8C23 18 0A        	jr 7F
508+  8C25
509+  8C25              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8C25
511+  8C25 CD 39 8C     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8C28 06 0F        	ld b,15
513+  8C2A CD 9A 8C     8 call PreviousScan
514+  8C2D 10 FB        	djnz 8B
515+  8C2F
516+  8C2F E5           7 push hl
517+  8C30 DD E1        	pop ix
518+  8C32
519+  8C32 2A A2 85     	ld hl,(Puntero_objeto)
520+  8C35 E5           	push hl
521+  8C36 FD E1        	pop iy
522+  8C38
523+  8C38 C9           	ret
524+  8C39
525+  8C39              ; --------------------------------------------------------------------------------------------------------------------
526+  8C39              ;
527+  8C39              ;	2/1/23
528+  8C39              ;
529+  8C39              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8C39              ;
531+  8C39              ;	Tras esta rutina tenemos:
532+  8C39              ;
533+  8C39              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8C39              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8C39              ;
536+  8C39              ;	DESTRUYE!!!!! HL,B y A.
537+  8C39
538+  8C39 2A A0 85     Operandos ld hl,(Posicion_actual)
539+  8C3C 3A D4 85     	ld a,(Columnas)
540+  8C3F 3D           	dec a
541+  8C40 20 01        	jr nz,1F
542+  8C42 3C           	inc a
543+  8C43 47           1 ld b,a
544+  8C44 C9           	ret
545+  8C45
546+  8C45              ; --------------------------------------------------------------------------------------------------------------------
547+  8C45              ;
548+  8C45              ;	3/1/23
549+  8C45              ;
550+  8C45              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8C45              ;
552+  8C45              ;	Destruye: A,B,HL y DE.
553+  8C45
554+  8C45              Define_rutina_de_impresion
555+  8C45
556+  8C45 3A 9F 85     	ld a,(Columns)
557+  8C48 47           	ld b,a
558+  8C49 3A D4 85     	ld a,(Columnas)
559+  8C4C B8           	cp b
560+  8C4D 20 0D        	jr nz,2f
561+  8C4F
562+  8C4F              ;	La entidad se imprime entera.
563+  8C4F
564+  8C4F 21 E6 8C     	ld hl, Indice_entidades_completas
565+  8C52 E6 01        	and 1
566+  8C54 28 02        	jr z,1F
567+  8C56
568+  8C56 23           	inc hl
569+  8C57 23           	inc hl
570+  8C58
571+  8C58 CD 69 87     1 call Extrae_address
572+  8C5B C9           	ret		;	ret
573+  8C5C
574+  8C5C              ;	La entidad no se imprime entera en pantalla.
575+  8C5C
576+  8C5C 3A B2 85     2 ld a,(Cuad_objeto)
577+  8C5F E6 01        	and 1
578+  8C61 28 17        	jr z,3F
579+  8C63
580+  8C63              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8C63
582+  8C63 21 EA 8C     	ld hl, Indice_entidades_incompletas_izquierda
583+  8C66 3A 9F 85     4 ld a,(Columns)
584+  8C69 E6 01        	and 1
585+  8C6B 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8C6D
587+  8C6D 23           	inc hl
588+  8C6E 23           	inc hl
589+  8C6F
590+  8C6F 3A D4 85     	ld a,(Columnas)
591+  8C72 E6 01        	and 1
592+  8C74 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8C76
594+  8C76 23           	inc hl
595+  8C77 23           	inc hl
596+  8C78
597+  8C78 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8C7A
599+  8C7A 21 F0 8C     3 ld hl, Indice_entidades_incompletas_derecha
600+  8C7D 18 E7        	jr 4B
601+  8C7F
602+  8C7F              ; --------------------------------------------------------------------------------------------------------------------
603+  8C7F              ;
604+  8C7F              ;	Prepara_draw
605+  8C7F              ;
606+  8C7F              ;	Es una rutina de carga.
607+  8C7F              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8C7F              ;
609+  8C7F              ;	FUNCIONAMIENTO:
610+  8C7F              ;
611+  8C7F              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8C7F              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8C7F              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8C7F              ;
615+  8C7F              ;	DESTRUYE:
616+  8C7F              ;
617+  8C7F              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8C7F
619+  8C7F 21 9E 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8C82 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8C83 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8C84 4E           	ld c,(hl)
623+  8C85 2A A0 85     	ld hl,(Posicion_actual)
624+  8C88 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8C8A C9           	ret
626+  8C8B
627+  8C8B              ;----------------------------------------------------------------------------------------------------------------
628+  8C8B              ;
629+  8C8B              ;	5/08/22
630+  8C8B              ;
631+  8C8B              ;   NextScan.
632+  8C8B              ;
633+  8C8B              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8C8B              ;
635+  8C8B              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8C8B              ;
637+  8C8B              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8C8B              ;
639+  8C8B              ;       DESTRUIDOS: AF y HL !!!
640+  8C8B              ;
641+  8C8B              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8C8B              ;
643+  8C8B
644+  8C8B 24           NextScan inc h          ; Incrementamos el scanline.
645+  8C8C 7C               ld a,h
646+  8C8D E6 07            and 7
647+  8C8F C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8C90
649+  8C90 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8C91 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8C93 6F               ld l,a
652+  8C94 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8C95
654+  8C95 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8C96 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8C98 67               ld h,a
657+  8C99 C9               ret
658+  8C9A
659+  8C9A              ;----------------------------------------------------------------------------------------------------------------
660+  8C9A              ;
661+  8C9A              ;	5/08/22
662+  8C9A              ;
663+  8C9A              ;   PreviousScan.
664+  8C9A              ;
665+  8C9A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8C9A              ;
667+  8C9A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8C9A              ;
669+  8C9A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8C9A              ;
671+  8C9A              ;       DESTRUIDOS: AF y HL !!!
672+  8C9A              ;
673+  8C9A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8C9A              ;
675+  8C9A
676+  8C9A 7C           PreviousScan ld a,h
677+  8C9B 25               dec h               ; Dec H.
678+  8C9C E6 07            and 7
679+  8C9E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8C9F
681+  8C9F 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8CA0 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8CA2 6F               ld l,a
684+  8CA3 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8CA4
686+  8CA4 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8CA5 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8CA7 67               ld h,a
689+  8CA8 C9               ret
690+  8CA9
691+  8CA9              ; -----------------------------------------------------------------------------------
692+  8CA9              ;
693+  8CA9              ;	15/1/23
694+  8CA9
695+  8CA9              Extrae_foto_registros
696+  8CA9
697+  8CA9 3A DF 85     	ld a,(Numero_de_malotes)
698+  8CAC A7           	and a
699+  8CAD C8           	ret z
700+  8CAE
701+  8CAE
702+  8CAE ED 73 E0 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8CB2 31 00 70     	ld sp,Album_de_fotos
704+  8CB5
705+  8CB5 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8CB7 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8CB8 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8CB9
709+  8CB9 ED 73 E2 85  	ld (Stack_2),sp
710+  8CBD ED 7B E0 85  	ld sp,(Stack)
711+  8CC1
712+  8CC1              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8CC1
714+  8CC1 3E CD        	ld a,$cd
715+  8CC3 32 CB 8C     	ld (Imprime),a
716+  8CC6 EB           	ex de,hl
717+  8CC7 22 CC 8C     	ld (Imprime+1),hl
718+  8CCA EB           	ex de,hl
719+  8CCB
720+  8CCB              ; Ejecuta la llamada:	CALL $xx,xx
721+  8CCB
722+  8CCB 00 00 00     Imprime db 0,0,0
723+  8CCE
724+  8CCE ED 73 E0 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8CD2
726+  8CD2 3A DF 85     	ld a,(Numero_de_malotes)
727+  8CD5 3D           	dec a
728+  8CD6 28 09        	jr z,1F
729+  8CD8 32 DF 85      	ld (Numero_de_malotes),a
730+  8CDB ED 7B E2 85  	ld sp,(Stack_2)
731+  8CDF 18 D4        	jr 2B
732+  8CE1
733+  8CE1 AF           1 xor a
734+  8CE2 32 E2 85     	ld (Stack_2),a
735+  8CE5 C9           	ret
736+  8CE6
737+  8CE6
# file closed: Draw_XOR.asm
790   8CE6              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8CE6              ;   índices de Rutinas de impresión.
  2+  8CE6
  3+  8CE6 F6 8C        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8CE8 23 8D            defw Pinta_Amadeus_3x2
  5+  8CEA
  6+  8CEA 79 8D        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8CEC 19 8E            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8CEE CD 8D            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8CF0
 10+  8CF0 A3 8D        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8CF2 A7 8E            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8CF4 5B 8E            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8CF6
 14+  8CF6
 15+  8CF6              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8CF6              ;
 17+  8CF6              ;   12/12/22
 18+  8CF6              ;
 19+  8CF6              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8CF6              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8CF6              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8CF6              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8CF6              ;
 24+  8CF6              ;   Modifica: DE y HL.
 25+  8CF6
 26+  8CF6 ED 73 E0 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8CFA FD F9        	ld sp,iy
 28+  8CFC 06 10            ld b,16
 29+  8CFE D1           1 pop de
 30+  8CFF 7B               ld a,e
 31+  8D00 AE               xor (hl)
 32+  8D01 77           	ld (hl),a
 33+  8D02 23           	inc hl
 34+  8D03 7A               ld a,d
 35+  8D04 AE               xor (hl)
 36+  8D05 77           	ld (hl),a
 37+  8D06 2B           	dec hl
 38+  8D07 24           	inc h
 39+  8D08 7C               ld a,h
 40+  8D09 E6 07            and 7
 41+  8D0B 20 0A            jr nz,2F
 42+  8D0D 7D               ld a,l
 43+  8D0E C6 20            add a,$20
 44+  8D10 6F               ld l,a
 45+  8D11 38 04            jr c,2F
 46+  8D13 7C               ld a,h
 47+  8D14 D6 08            sub 8
 48+  8D16 67               ld h,a
 49+  8D17 7C           2 ld a,h
 50+  8D18 FE 58            cp $58
 51+  8D1A 28 02            jr z,3F
 52+  8D1C 10 E0            djnz 1B
 53+  8D1E ED 7B E0 85  3 ld sp,(Stack)
 54+  8D22 C9           	ret
 55+  8D23
 56+  8D23 ED 73 E0 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8D27 FD F9        	ld sp,iy
 58+  8D29 06 08            ld b,8
 59+  8D2B D1           1 pop de
 60+  8D2C 7B               ld a,e
 61+  8D2D AE               xor (hl)
 62+  8D2E 77           	ld (hl),a
 63+  8D2F 23           	inc hl
 64+  8D30 7A               ld a,d
 65+  8D31 AE               xor (hl)
 66+  8D32 77           	ld (hl),a
 67+  8D33 23           	inc hl
 68+  8D34 D1           	pop de
 69+  8D35 7B               ld a,e
 70+  8D36 AE               xor (hl)
 71+  8D37 77           	ld (hl),a
 72+  8D38 2B           	dec hl
 73+  8D39 2B           	dec hl
 74+  8D3A 24           	inc h
 75+  8D3B 7C               ld a,h
 76+  8D3C E6 07            and 7
 77+  8D3E 20 0A            jr nz,2F
 78+  8D40 7D               ld a,l
 79+  8D41 C6 20            add a,$20
 80+  8D43 6F               ld l,a
 81+  8D44 38 04            jr c,2F
 82+  8D46 7C               ld a,h
 83+  8D47 D6 08            sub 8
 84+  8D49 67               ld h,a
 85+  8D4A 7C           2 ld a,h
 86+  8D4B FE 58            cp $58
 87+  8D4D 28 25            jr z,4F
 88+  8D4F 7A               ld a,d
 89+  8D50 AE               xor (hl)
 90+  8D51 77               ld (hl),a
 91+  8D52 D1           	pop de
 92+  8D53 23           	inc hl
 93+  8D54 7B               ld a,e
 94+  8D55 AE               xor (hl)
 95+  8D56 77           	ld (hl),a
 96+  8D57 23           	inc hl
 97+  8D58 7A               ld a,d
 98+  8D59 AE               xor (hl)
 99+  8D5A 77           	ld (hl),a
100+  8D5B 2B           	dec hl
101+  8D5C 2B           	dec hl
102+  8D5D 24           	inc h
103+  8D5E 7C               ld a,h
104+  8D5F E6 07            and 7
105+  8D61 20 0A            jr nz,3F
106+  8D63 7D               ld a,l
107+  8D64 C6 20            add a,$20
108+  8D66 6F               ld l,a
109+  8D67 38 04            jr c,3F
110+  8D69 7C               ld a,h
111+  8D6A D6 08            sub 8
112+  8D6C 67               ld h,a
113+  8D6D 7C           3 ld a,h
114+  8D6E FE 58            cp $58
115+  8D70 28 02            jr z,4F
116+  8D72 10 B7            djnz 1B
117+  8D74 ED 7B E0 85  4 ld sp,(Stack)
118+  8D78 C9           	ret
119+  8D79
120+  8D79              ; ---------------------------------------------------
121+  8D79
122+  8D79 ED 73 E0 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8D7D FD F9        	ld sp,iy
124+  8D7F
125+  8D7F              ; >>>
126+  8D7F
127+  8D7F 06 10            ld b,16
128+  8D81 D1           1 pop de
129+  8D82 7A           	ld a,d
130+  8D83 AE           	xor (hl)
131+  8D84 77           	ld (hl),a
132+  8D85 24           	inc h
133+  8D86 7C               ld a,h
134+  8D87 E6 07            and 7
135+  8D89 20 0C            jr nz,2F
136+  8D8B 7D               ld a,l
137+  8D8C C6 20            add a,$20
138+  8D8E 6F               ld l,a
139+  8D8F 38 06            jr c,2F
140+  8D91 7C               ld a,h
141+  8D92 D6 08            sub 8
142+  8D94 67               ld h,a
143+  8D95 18 00            jr 2F
144+  8D97 7C           2 ld a,h
145+  8D98 FE 58            cp $58
146+  8D9A 28 02            jr z,3F
147+  8D9C 10 E3            djnz 1B
148+  8D9E ED 7B E0 85  3 ld sp,(Stack)
149+  8DA2 C9           	ret
150+  8DA3
151+  8DA3 ED 73 E0 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
152+  8DA7 FD F9        	ld sp,iy
153+  8DA9
154+  8DA9              ; >>>
155+  8DA9
156+  8DA9 06 10            ld b,16
157+  8DAB D1           1 pop de
158+  8DAC 7B           	ld a,e
159+  8DAD AE           	xor (hl)
160+  8DAE 77           	ld (hl),a
161+  8DAF 24           	inc h
162+  8DB0 7C               ld a,h
163+  8DB1 E6 07            and 7
164+  8DB3 20 0C            jr nz,2F
165+  8DB5 7D               ld a,l
166+  8DB6 C6 20            add a,$20
167+  8DB8 6F               ld l,a
168+  8DB9 38 06            jr c,2F
169+  8DBB 7C               ld a,h
170+  8DBC D6 08            sub 8
171+  8DBE 67               ld h,a
172+  8DBF 18 00            jr 2F
173+  8DC1 7C           2 ld a,h
174+  8DC2 FE 58            cp $58
175+  8DC4 28 02            jr z,3F
176+  8DC6 10 E3            djnz 1B
177+  8DC8 ED 7B E0 85  3 ld sp,(Stack)
178+  8DCC C9           	ret
179+  8DCD
180+  8DCD              ; ---------------------------------------------------
181+  8DCD
182+  8DCD ED 73 E0 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
183+  8DD1 FD F9        	ld sp,iy
184+  8DD3 06 08            ld b,8
185+  8DD5 D1           1 pop de
186+  8DD6 7A           	ld a,d
187+  8DD7 AE           	xor (hl)
188+  8DD8 77           	ld (hl),a
189+  8DD9 23           	inc hl
190+  8DDA D1           	pop de
191+  8DDB 7B           	ld a,e
192+  8DDC AE           	xor (hl)
193+  8DDD 77           	ld (hl),a
194+  8DDE 2B           	dec hl
195+  8DDF 24            	inc h
196+  8DE0 7C               ld a,h
197+  8DE1 E6 07            and 7
198+  8DE3 20 0A            jr nz,2F
199+  8DE5 7D               ld a,l
200+  8DE6 C6 20            add a,$20
201+  8DE8 6F               ld l,a
202+  8DE9 38 04            jr c,2F
203+  8DEB 7C               ld a,h
204+  8DEC D6 08            sub 8
205+  8DEE 67               ld h,a
206+  8DEF 7C           2 ld a,h
207+  8DF0 FE 58            cp $58
208+  8DF2 28 20            jr z,4F
209+  8DF4 D1               pop de
210+  8DF5 7B           	ld a,e
211+  8DF6 AE           	xor (hl)
212+  8DF7 77           	ld (hl),a
213+  8DF8 23           	inc hl
214+  8DF9 7A           	ld a,d
215+  8DFA AE           	xor (hl)
216+  8DFB 77           	ld (hl),a
217+  8DFC 2B           	dec hl
218+  8DFD 24           	inc h
219+  8DFE 7C               ld a,h
220+  8DFF E6 07            and 7
221+  8E01 20 0A            jr nz,3F
222+  8E03 7D               ld a,l
223+  8E04 C6 20            add a,$20
224+  8E06 6F               ld l,a
225+  8E07 38 04            jr c,3F
226+  8E09 7C               ld a,h
227+  8E0A D6 08            sub 8
228+  8E0C 67               ld h,a
229+  8E0D 7C           3 ld a,h
230+  8E0E FE 58            cp $58
231+  8E10 28 02            jr z,4F
232+  8E12 10 C1            djnz 1B
233+  8E14 ED 7B E0 85  4 ld sp,(Stack)
234+  8E18 C9           	ret
235+  8E19
236+  8E19 ED 73 E0 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
237+  8E1D FD F9        	ld sp,iy
238+  8E1F 06 08            ld b,8
239+  8E21 D1           1 pop de
240+  8E22 D1           	pop de
241+  8E23 7B           	ld a,e
242+  8E24 AE           	xor (hl)
243+  8E25 77           	ld (hl),a
244+  8E26 24            	inc h
245+  8E27 7C               ld a,h
246+  8E28 E6 07            and 7
247+  8E2A 20 0A            jr nz,2F
248+  8E2C 7D               ld a,l
249+  8E2D C6 20            add a,$20
250+  8E2F 6F               ld l,a
251+  8E30 38 04            jr c,2F
252+  8E32 7C               ld a,h
253+  8E33 D6 08            sub 8
254+  8E35 67               ld h,a
255+  8E36 7C           2 ld a,h
256+  8E37 FE 58            cp $58
257+  8E39 28 1B            jr z,4F
258+  8E3B D1               pop de
259+  8E3C 7A           	ld a,d
260+  8E3D AE           	xor (hl)
261+  8E3E 77           	ld (hl),a
262+  8E3F 24           	inc h
263+  8E40 7C               ld a,h
264+  8E41 E6 07            and 7
265+  8E43 20 0A            jr nz,3F
266+  8E45 7D               ld a,l
267+  8E46 C6 20            add a,$20
268+  8E48 6F               ld l,a
269+  8E49 38 04            jr c,3F
270+  8E4B 7C               ld a,h
271+  8E4C D6 08            sub 8
272+  8E4E 67               ld h,a
273+  8E4F 7C           3 ld a,h
274+  8E50 FE 58            cp $58
275+  8E52 28 02            jr z,4F
276+  8E54 10 CB            djnz 1B
277+  8E56 ED 7B E0 85  4 ld sp,(Stack)
278+  8E5A C9           	ret
279+  8E5B
280+  8E5B ED 73 E0 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
281+  8E5F FD F9        	ld sp,iy
282+  8E61 06 08            ld b,8
283+  8E63 D1           1 pop de
284+  8E64 7B           	ld a,e
285+  8E65 AE           	xor (hl)
286+  8E66 77           	ld (hl),a
287+  8E67 23           	inc hl
288+  8E68 7A           	ld a,d
289+  8E69 AE           	xor (hl)
290+  8E6A 77           	ld (hl),a
291+  8E6B 2B           	dec hl
292+  8E6C 24             	inc h
293+  8E6D 7C               ld a,h
294+  8E6E E6 07            and 7
295+  8E70 20 0A            jr nz,2F
296+  8E72 7D               ld a,l
297+  8E73 C6 20            add a,$20
298+  8E75 6F               ld l,a
299+  8E76 38 04            jr c,2F
300+  8E78 7C               ld a,h
301+  8E79 D6 08            sub 8
302+  8E7B 67               ld h,a
303+  8E7C 7C           2 ld a,h
304+  8E7D FE 58            cp $58
305+  8E7F 28 21            jr z,4F
306+  8E81 D1               pop de
307+  8E82 7A           	ld a,d
308+  8E83 AE           	xor (hl)
309+  8E84 77           	ld (hl),a
310+  8E85 23           	inc hl
311+  8E86 D1               pop de
312+  8E87 7B           	ld a,e
313+  8E88 AE           	xor (hl)
314+  8E89 77           	ld (hl),a
315+  8E8A 2B           	dec hl
316+  8E8B 24           	inc h
317+  8E8C 7C               ld a,h
318+  8E8D E6 07            and 7
319+  8E8F 20 0A            jr nz,3F
320+  8E91 7D               ld a,l
321+  8E92 C6 20            add a,$20
322+  8E94 6F               ld l,a
323+  8E95 38 04            jr c,3F
324+  8E97 7C               ld a,h
325+  8E98 D6 08            sub 8
326+  8E9A 67               ld h,a
327+  8E9B 7C           3 ld a,h
328+  8E9C FE 58            cp $58
329+  8E9E 28 02            jr z,4F
330+  8EA0 10 C1            djnz 1B
331+  8EA2 ED 7B E0 85  4 ld sp,(Stack)
332+  8EA6 C9           	ret
333+  8EA7
334+  8EA7 ED 73 E0 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
335+  8EAB FD F9        	ld sp,iy
336+  8EAD 06 08            ld b,8
337+  8EAF D1           1 pop de
338+  8EB0 7B           	ld a,e
339+  8EB1 AE           	xor (hl)
340+  8EB2 77           	ld (hl),a
341+  8EB3 24            	inc h
342+  8EB4 7C               ld a,h
343+  8EB5 E6 07            and 7
344+  8EB7 20 0A            jr nz,2F
345+  8EB9 7D               ld a,l
346+  8EBA C6 20            add a,$20
347+  8EBC 6F               ld l,a
348+  8EBD 38 04            jr c,2F
349+  8EBF 7C               ld a,h
350+  8EC0 D6 08            sub 8
351+  8EC2 67               ld h,a
352+  8EC3 7C           2 ld a,h
353+  8EC4 FE 58            cp $58
354+  8EC6 28 1C            jr z,4F
355+  8EC8 D1               pop de
356+  8EC9 7A           	ld a,d
357+  8ECA AE           	xor (hl)
358+  8ECB 77           	ld (hl),a
359+  8ECC 24           	inc h
360+  8ECD 7C               ld a,h
361+  8ECE E6 07            and 7
362+  8ED0 20 0A            jr nz,3F
363+  8ED2 7D               ld a,l
364+  8ED3 C6 20            add a,$20
365+  8ED5 6F               ld l,a
366+  8ED6 38 04            jr c,3F
367+  8ED8 7C               ld a,h
368+  8ED9 D6 08            sub 8
369+  8EDB 67               ld h,a
370+  8EDC 7C           3 ld a,h
371+  8EDD FE 58            cp $58
372+  8EDF 28 03            jr z,4F
373+  8EE1 D1               pop de
374+  8EE2 10 CB            djnz 1B
375+  8EE4 ED 7B E0 85  4 ld sp,(Stack)
376+  8EE8 C9           	ret
377+  8EE9
378+  8EE9              ; ---------------------------------------------------
379+  8EE9              ;
380+  8EE9              ;   27/02/23
381+  8EE9              ;
382+  8EE9              ;   Rutina idéntica a Pinta_Amadeus_2x2, sólo difiere de esta en el nº de scanlines_
383+  8EE9              ;   _ que imprime. No utilizamos [Pinta_Amadeus_2x2] porque cuando el programa está_
384+  8EE9              ;   _ imprimiendo elementos, no discrimina el tipo de Sprite que está pintando.
385+  8EE9
386+  8EE9 ED 73 E0 85  Pinta_Disparo ld (Stack),sp
387+  8EED FD F9            ld sp,iy
388+  8EEF 06 02            ld b,2
389+  8EF1 D1           1 pop de
390+  8EF2 7B               ld a,e
391+  8EF3 AE               xor (hl)
392+  8EF4 77               ld (hl),a
393+  8EF5 23               inc hl
394+  8EF6 7A               ld a,d
395+  8EF7 AE               xor (hl)
396+  8EF8 77               ld (hl),a
397+  8EF9 2B               dec hl
398+  8EFA 24               inc h
399+  8EFB 7C               ld a,h
400+  8EFC E6 07            and 7
401+  8EFE 20 0A            jr nz,2F
402+  8F00 7D               ld a,l
403+  8F01 C6 20            add a,$20
404+  8F03 6F               ld l,a
405+  8F04 38 04            jr c,2F
406+  8F06 7C               ld a,h
407+  8F07 D6 08            sub 8
408+  8F09 67               ld h,a
409+  8F0A 7C           2 ld a,h
410+  8F0B FE 58            cp $58
411+  8F0D 28 02            jr z,3F
412+  8F0F 10 E0            djnz 1B
413+  8F11 ED 7B E0 85  3 ld sp,(Stack)
414+  8F15 C9               ret
# file closed: Rutinas_de_impresion_sprites.asm
791   8F16              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8F16              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8F16              ;
  3+  8F16              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8F16              ;
  5+  8F16              ; *****************************************************************************************************************************************************************************************
  6+  8F16              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8F16
  8+  8F16 7C           calcula_tercio ld a,h
  9+  8F17 E6 18        	and $18
 10+  8F19 CB 2F        	sra a
 11+  8F1B CB 2F        	sra a
 12+  8F1D CB 2F        	sra a
 13+  8F1F C9           	ret
 14+  8F20
# file closed: calcula_tercio.asm
792   8F20              	include "Cls.asm"
# file opened: Cls.asm
  1+  8F20              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8F20              ;
  3+  8F20              ;
  4+  8F20              ;	CLS.
  5+  8F20              ;
  6+  8F20              ;	Limpia la pantalla y define sus atributos.
  7+  8F20              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8F20              ;
  9+  8F20              ;	COLORES: 0 ..... NEGRO
 10+  8F20              ;    		 1 ..... AZUL
 11+  8F20              ; 			 2 ..... ROJO
 12+  8F20              ;			 3 ..... MAGENTA
 13+  8F20              ; 			 4 ..... VERDE
 14+  8F20              ; 			 5 ..... CIAN
 15+  8F20              ;			 6 ..... AMARILLO
 16+  8F20              ; 			 7 ..... BLANCO
 17+  8F20              ;
 18+  8F20              ;	INPUT: A contiene los atributos de pantalla.
 19+  8F20              ;
 20+  8F20              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8F20
 22+  8F20
 23+  8F20 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8F23 11 01 40     	LD DE,$4001
 25+  8F26 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8F29 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8F2B ED B0        	LDIR
 28+  8F2D 01 FF 02     	LD BC,767
 29+  8F30 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8F31 ED B0        	LDIR
 31+  8F33 C9           	ret
 32+  8F34
# file closed: Cls.asm
793   8F34              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8F34              ; ******************************************************************************************************************************************************************************************
  2+  8F34              ;
  3+  8F34              ;   22/01/23
  4+  8F34              ;
  5+  8F34              ;	Mov_down
  6+  8F34              ;
  7+  8F34              ; 	Mueve el Sprite X px hacia abajo.
  8+  8F34              ;
  9+  8F34              ;
 10+  8F34 21 CB 85     Mov_down ld hl,Ctrl_0
 11+  8F37 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8F39              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8F39              ; 																	; _ en el caso de que no lo haya.
 14+  8F39 3A B6 85     	ld a,(Vel_down)
 15+  8F3C 47           	ld b,a
 16+  8F3D 2A A0 85         ld hl,(Posicion_actual)
 17+  8F40 CD 16 8F     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8F43 E6 02        	and 2
 19+  8F45 28 0F        	jr z,1F
 20+  8F47
 21+  8F47              ; Nos encontramos en el último tercio de pantalla.
 22+  8F47              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8F47
 24+  8F47 7C           	ld a,h
 25+  8F48 FE 57        	cp $57
 26+  8F4A 20 0A        	jr nz,1F
 27+  8F4C 7D           	ld a,l
 28+  8F4D C6 20        	add $20
 29+  8F4F 30 05        	jr nc,1F
 30+  8F51
 31+  8F51              ; ------------------------------
 32+  8F51 CD 32 92     	call Reaparece_arriba
 33+  8F54              ;	call Reinicio
 34+  8F54              ; ------------------------------
 35+  8F54 18 08        	jr 3F
 36+  8F56 CD 8B 8C     1 call NextScan
 37+  8F59 22 A0 85     	ld (Posicion_actual),hl
 38+  8F5C 10 E2            djnz 2B
 39+  8F5E CD 48 92     3 call Genera_coordenadas
 40+  8F61 C9           	ret
 41+  8F62
 42+  8F62
 43+  8F62              ; ******************************************************************************************************************************************************************************************
 44+  8F62              ;
 45+  8F62              ;   22/01/23
 46+  8F62              ;
 47+  8F62              ;	Mov_up
 48+  8F62              ;
 49+  8F62              ; 	Mueve el Sprite hacia arriba.
 50+  8F62              ;
 51+  8F62              ;
 52+  8F62 21 CB 85     Mov_up ld hl,Ctrl_0
 53+  8F65 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8F67              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8F67              ; 																		; _ en el caso de que no lo haya.
 56+  8F67 3A B5 85     	ld a,(Vel_up)
 57+  8F6A 47           	ld b,a
 58+  8F6B 2A A0 85     	ld hl,(Posicion_actual)
 59+  8F6E CD 16 8F     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8F71 A7           	and a
 61+  8F72 20 10        	jr nz,1F
 62+  8F74
 63+  8F74              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8F74              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8F74
 66+  8F74 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8F75 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8F77 20 0B            jr nz,1F
 69+  8F79 7D               ld a,l
 70+  8F7A D6 20            sub $20
 71+  8F7C 30 06            jr nc,1F
 72+  8F7E 25               dec h
 73+  8F7F
 74+  8F7F              ; -----------------------------
 75+  8F7F CD 22 92         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8F82              ;	call Reinicio
 77+  8F82              ; -----------------------------
 78+  8F82
 79+  8F82 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8F84 CD 9A 8C     1 call PreviousScan
 81+  8F87 22 A0 85     	ld (Posicion_actual),hl
 82+  8F8A 10 E2            djnz 3B
 83+  8F8C CD 48 92     2 call Genera_coordenadas
 84+  8F8F C9           	ret
 85+  8F90
 86+  8F90              ; ******************************************************************************************************************************************************************************************
 87+  8F90              ;
 88+  8F90              ;	19/10/22
 89+  8F90              ;
 90+  8F90              ;	Mov_right.
 91+  8F90              ;
 92+  8F90              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8F90              ;
 94+  8F90
 95+  8F90 21 CB 85     Mov_right ld hl,Ctrl_0
 96+  8F93 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8F95              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8F95              ; 																	; _ en el caso de que no lo haya.
 99+  8F95 3A CB 85     	ld a,(Ctrl_0)
100+  8F98 CB 77        	bit 6,a
101+  8F9A 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8F9C
103+  8F9C CD D0 91     	call Stop_Amadeus_right
104+  8F9F C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8FA0 18 4D        	jr 8F
106+  8FA2
107+  8FA2 3A A4 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8FA5 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8FA7 20 46        	jr nz,8F
110+  8FA9
111+  8FA9 3A A6 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8FAC A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8FAD 28 40        	jr z,8F
114+  8FAF
115+  8FAF              ; ---------- ---------- ----------
116+  8FAF              ;
117+  8FAF              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8FAF
119+  8FAF 3A B4 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8FB2 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8FB4 28 11        	jr z,1F
122+  8FB6 38 06        	jr c,6F
123+  8FB8 FE 04        	cp 4
124+  8FBA 28 14        	jr z,7F
125+  8FBC 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8FBE
127+  8FBE              ; ---------- ---------- ----------
128+  8FBE              ;
129+  8FBE              ; Perfiles de velocidad
130+  8FBE              ;
131+  8FBE
132+  8FBE 3A A6 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8FC1 FE FE        	cp $fe
134+  8FC3 20 2A        	jr nz,8F
135+  8FC5 18 10        	jr 3F
136+  8FC7 3A A6 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8FCA FE FD        	cp $fd
138+  8FCC 20 21        	jr nz,8F
139+  8FCE 18 07        	jr 3F
140+  8FD0 3A A6 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8FD3 FE FB        	cp $fb
142+  8FD5 20 18        	jr nz,8F
143+  8FD7
144+  8FD7              ; ---------- ---------- ----------
145+  8FD7
146+  8FD7              3
147+  8FD7 CD 10 92     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8FDA              ;	call Reinicio
149+  8FDA
150+  8FDA              ; ---------- ---------- ----------
151+  8FDA              ;
152+  8FDA              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8FDA
154+  8FDA 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8FDC C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8FDD CD F6 8F     	call DESPLZ_DER
157+  8FE0 C1           	pop bc
158+  8FE1 10 F9        	djnz 5B
159+  8FE3 2A A0 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8FE6 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8FE7 22 A0 85     	ld (Posicion_actual),hl
162+  8FEA CD 48 92     	call Genera_coordenadas
163+  8FED 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8FEF
165+  8FEF              ; ---------- ---------- ----------
166+  8FEF
167+  8FEF 2A A0 85     8 ld hl,(Posicion_actual)
168+  8FF2 CD F6 8F     	call DESPLZ_DER
169+  8FF5 C9           2 ret
170+  8FF6
171+  8FF6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8FF6              ;
173+  8FF6              ;	22/9/22
174+  8FF6              ;
175+  8FF6
176+  8FF6 CD 05 90     DESPLZ_DER call Desplaza_derecha
177+  8FF9 CD 51 90         call modifica_parametros_1er_DESPLZ_2
178+  8FFC CD 7A 90         call Ciclo_completo
179+  8FFF 21 CB 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  9002 CB FE        	set 7,(hl)
181+  9004 C9           	ret
182+  9005
183+  9005              ; ******************************************************************************************************************************************************************************************
184+  9005              ;	15/02/23
185+  9005              ;
186+  9005
187+  9005 3A B4 85     Desplaza_derecha ld a,(Vel_right)
188+  9008 47           	ld b,a
189+  9009 2A AC 85     	ld hl,(Puntero_DESPLZ_der)
190+  900C 23           1 inc hl
191+  900D 23           	inc hl
192+  900E 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  9010 22 AC 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  9013 CD 69 87     	call Extrae_address
195+  9016 22 A2 85     	ld (Puntero_objeto),hl
196+  9019
197+  9019              ; Modifica (Puntero_DESPLZ_izq).
198+  9019
199+  9019              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  9019              ; Cuántos movimientos hemos hecho ??
201+  9019              ; DE contiene (Puntero_DESPLZ_der).
202+  9019
203+  9019 2A A8 85     7 ld hl,(Indice_Sprite_der)
204+  901C EB           	ex de,hl
205+  901D A7           	and a
206+  901E ED 52        	sbc hl,de
207+  9020 CB 3D        	srl l
208+  9022 3E 08        6 ld a,8
209+  9024 95           	sub l
210+  9025 30 1E        	jr nc,3F
211+  9027
212+  9027              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  9027              ; B="0".
214+  9027
215+  9027 04           4 inc b
216+  9028 3C           	inc a
217+  9029 20 FC        	jr nz,4B
218+  902B 78           	ld a,b
219+  902C 08           	ex af,af
220+  902D 2A A8 85     	ld hl,(Indice_Sprite_der)
221+  9030 23           5 inc hl
222+  9031 23           	inc hl
223+  9032 10 FC        	djnz 5B
224+  9034 22 AC 85     	ld (Puntero_DESPLZ_der),hl
225+  9037 CD 69 87     	call Extrae_address
226+  903A 22 A2 85     	ld (Puntero_objeto),hl
227+  903D
228+  903D              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  903D              ; _(Posicion_actual).
230+  903D
231+  903D 21 A0 85     	ld hl,Posicion_actual
232+  9040 34           	inc (hl)
233+  9041 08               ex af,af
234+  9042 6F           	ld l,a
235+  9043 18 DD        	jr 6B
236+  9045
237+  9045              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  9045
239+  9045 47           3 ld b,a
240+  9046 2A AA 85     	ld hl,(Indice_Sprite_izq)
241+  9049 23           2 inc hl
242+  904A 23           	inc hl
243+  904B 10 FC        	djnz 2B
244+  904D 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
245+  9050 C9           8 ret
246+  9051
247+  9051              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  9051              ;
249+  9051              ;	24/7/22
250+  9051              ;
251+  9051              ;	modifica_parametros_1er_DESPLZ_2
252+  9051              ;
253+  9051              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  9051              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  9051              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  9051
257+  9051 3A A6 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  9054 A7           	and a
259+  9055 20 1F        	jr nz,1F
260+  9057 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  9059 32 A6 85         ld (CTRL_DESPLZ),a
262+  905C
263+  905C 21 9F 85     	ld hl,Columns
264+  905F 34           	inc (hl)
265+  9060 3A B2 85     	ld a,(Cuad_objeto)
266+  9063 E6 01        	and 1
267+  9065 28 0F        	jr z,1F
268+  9067 2A A0 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  906A 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  906B 22 A0 85     	ld (Posicion_actual),hl
271+  906E CD 48 92     	call Genera_coordenadas
272+  9071 CD DC 91     	call Inc_CTRL_DESPLZ
273+  9074 18 03        	jr 2F
274+  9076 CD DC 91     1 call Inc_CTRL_DESPLZ
275+  9079 C9           2 ret
276+  907A
277+  907A              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  907A              ;
279+  907A              ;	24/7/22
280+  907A              ;
281+  907A              ;	Ciclo_completo.
282+  907A              ;
283+  907A              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  907A              ;
285+  907A              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  907A              ; 	Decrementamos (Columns).
287+  907A              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  907A              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  907A
290+  907A
291+  907A 3A A6 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  907D FE FF        	cp $ff
293+  907F 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  9081 E6 F0        	and $f0
295+  9083 20 28        	jr nz,3F
296+  9085
297+  9085              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  9085
299+  9085 3A A6 85     	ld a,(CTRL_DESPLZ)
300+  9088 47           	ld b,a
301+  9089 3E F8        	ld a,$f8
302+  908B 80           	add b
303+  908C 32 A6 85     	ld (CTRL_DESPLZ),a
304+  908F 18 1C        	jr 3F
305+  9091 21 9F 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  9094 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  9095 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  9096 32 A6 85     	ld (CTRL_DESPLZ),a
309+  9099 3A B2 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  909C E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  909E 20 0A        	jr nz,2F
312+  90A0 2A A0 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  90A3 23           	inc hl
314+  90A4 22 A0 85     	ld (Posicion_actual),hl
315+  90A7 CD 48 92     	call Genera_coordenadas
316+  90AA
317+  90AA              ; Inicia el puntero de Sprite.
318+  90AA
319+  90AA CD 80 87     2 call Inicia_puntero_objeto_der
320+  90AD C9           3 ret
321+  90AE
322+  90AE              ; ******************************************************************************************************************************************************************************************
323+  90AE              ;
324+  90AE              ;	15/02/23
325+  90AE              ;
326+  90AE              ;	Mov_left.
327+  90AE              ;
328+  90AE              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  90AE              ;
330+  90AE              Mov_left
331+  90AE
332+  90AE 21 CB 85     	ld hl,Ctrl_0
333+  90B1 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  90B3              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  90B3              ; 																	; _ en el caso de que no lo haya.
336+  90B3 3A CB 85     	ld a,(Ctrl_0)
337+  90B6 CB 77        	bit 6,a
338+  90B8 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  90BA
340+  90BA CD D6 91     	call Stop_Amadeus_left
341+  90BD C8           	ret z
342+  90BE 20 50        	jr nz,8F
343+  90C0
344+  90C0 3A A4 85     11 ld a,(Coordenada_X)
345+  90C3 A7           	and a
346+  90C4 20 4A        	jr nz,8F
347+  90C6
348+  90C6 3A A6 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  90C9 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  90CA 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  90CC
352+  90CC              ; ---------- ---------- ----------
353+  90CC
354+  90CC 3A B3 85     	ld a,(Vel_left)
355+  90CF FE 02        	cp 2
356+  90D1 28 0F        	jr z,1F
357+  90D3 38 04        	jr c,6F
358+  90D5 FE 04        	cp 4
359+  90D7 28 12        	jr z,7F
360+  90D9
361+  90D9              ; ---------- ---------- ----------
362+  90D9
363+  90D9 3A A6 85     6 ld a,(CTRL_DESPLZ)
364+  90DC FE F9        	cp $f9
365+  90DE 20 30        	jr nz,8F
366+  90E0 18 10        	jr 4F
367+  90E2 3A A6 85     1 ld a,(CTRL_DESPLZ)
368+  90E5 FE FA        	cp $fa
369+  90E7 20 27        	jr nz,8F
370+  90E9 18 07        	jr 4F
371+  90EB 3A A6 85     7 ld a,(CTRL_DESPLZ)
372+  90EE FE FC        	cp $fc
373+  90F0 20 1E        	jr nz,8F
374+  90F2
375+  90F2              ; ---------- ---------- ----------
376+  90F2
377+  90F2              4
378+  90F2 CD FE 91     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  90F5              ;	call Reinicio
380+  90F5
381+  90F5              ; ---------- ---------- ----------
382+  90F5
383+  90F5 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  90F7 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  90F8
386+  90F8 2A AA 85     	ld hl,(Indice_Sprite_izq)
387+  90FB 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
388+  90FE
389+  90FE CD 17 91     	call DESPLZ_IZQ
390+  9101 C1           	pop bc
391+  9102 10 F3        	djnz 5B
392+  9104 2A A0 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  9107 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  9108 22 A0 85     	ld (Posicion_actual),hl
395+  910B CD 48 92     	call Genera_coordenadas
396+  910E 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9110
398+  9110              ; ---------- ---------- ----------
399+  9110              ; Movemos, no hay recolocación.
400+  9110
401+  9110 2A A0 85     8 ld hl,(Posicion_actual)
402+  9113 CD 17 91     	call DESPLZ_IZQ
403+  9116 C9           2 ret
404+  9117
405+  9117              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  9117              ;
407+  9117              ;	22/9/22
408+  9117
409+  9117              DESPLZ_IZQ
410+  9117
411+  9117 CD 26 91     	call Desplaza_izquierda
412+  911A CD 72 91         call modifica_parametros_1er_DESPLZ
413+  911D CD 9A 91     	call Ciclo_completo_2
414+  9120 21 CB 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  9123 CB BE        	res 7,(hl)
416+  9125 C9           	ret
417+  9126
418+  9126              Desplaza_izquierda
419+  9126
420+  9126 3A B3 85     	ld a,(Vel_left)
421+  9129 47           	ld b,a
422+  912A 2A AE 85     	ld hl,(Puntero_DESPLZ_izq)
423+  912D 23           1 inc hl
424+  912E 23           	inc hl
425+  912F 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  9131 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
427+  9134 CD 69 87     	call Extrae_address
428+  9137 22 A2 85     	ld (Puntero_objeto),hl
429+  913A
430+  913A              ; Modifica (Puntero_DESPLZ_der).
431+  913A
432+  913A              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  913A              ; Cuántos movimientos hemos hecho ??
434+  913A              ; DE contiene (Puntero_DESPLZ_izq).
435+  913A
436+  913A 2A AA 85     7 ld hl,(Indice_Sprite_izq)
437+  913D EB           	ex de,hl
438+  913E A7           	and a
439+  913F ED 52        	sbc hl,de
440+  9141 CB 3D        	srl l
441+  9143 3E 08        6 ld a,8
442+  9145 95           	sub l
443+  9146 30 1E        	jr nc,3F
444+  9148
445+  9148              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  9148              ; B="0".
447+  9148
448+  9148 04           4 inc b
449+  9149 3C           	inc a
450+  914A 20 FC        	jr nz,4B
451+  914C 78           	ld a,b
452+  914D 08           	ex af,af
453+  914E 2A AA 85     	ld hl,(Indice_Sprite_izq)
454+  9151 23           5 inc hl
455+  9152 23           	inc hl
456+  9153 10 FC        	djnz 5B
457+  9155 22 AE 85     	ld (Puntero_DESPLZ_izq),hl
458+  9158 CD 69 87     	call Extrae_address
459+  915B 22 A2 85     	ld (Puntero_objeto),hl
460+  915E
461+  915E              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  915E              ; _(Posicion_actual).
463+  915E
464+  915E 21 A0 85     	ld hl,Posicion_actual
465+  9161 35           	dec (hl)
466+  9162 08           	ex af,af
467+  9163 6F           	ld l,a
468+  9164 18 DD        	jr 6B
469+  9166
470+  9166              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  9166
472+  9166 47           3 ld b,a
473+  9167 2A A8 85     	ld hl,(Indice_Sprite_der)
474+  916A 23           2 inc hl
475+  916B 23           	inc hl
476+  916C 10 FC        	djnz 2B
477+  916E 22 AC 85     	ld (Puntero_DESPLZ_der),hl
478+  9171 C9           8 ret
479+  9172
480+  9172              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  9172              ;
482+  9172              ;	modifica_parametros_1er_DESPLZ
483+  9172              ;
484+  9172              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  9172              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  9172              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  9172
488+  9172 3A A6 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  9175 A7           	and a
490+  9176 20 1E        	jr nz,1F
491+  9178 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  9179 32 A6 85         ld (CTRL_DESPLZ),a
493+  917C 21 9F 85     	ld hl,Columns
494+  917F 34           	inc (hl)
495+  9180 3A B2 85     	ld a,(Cuad_objeto)
496+  9183 E6 01        	and 1
497+  9185 20 0F        	jr nz,1F
498+  9187 2A A0 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  918A 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  918B 22 A0 85     	ld (Posicion_actual),hl
501+  918E CD 48 92     	call Genera_coordenadas
502+  9191 CD ED 91     	call Dec_CTRL_DESPLZ
503+  9194 18 03        	jr 2F
504+  9196 CD ED 91     1 call Dec_CTRL_DESPLZ
505+  9199 C9           2 ret
506+  919A
507+  919A              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  919A
509+  919A 3A A6 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  919D FE F7        	cp $f7
511+  919F 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  91A1 30 2C        	jr nc,3F
513+  91A3
514+  91A3              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  91A3
516+  91A3 06 00        	ld b,0
517+  91A5 04           4 inc b
518+  91A6 3C           	inc a
519+  91A7 FE F7        	cp $f7
520+  91A9 20 FA        	jr nz,4B
521+  91AB 3E FF        	ld a,$ff
522+  91AD 90           	sub b
523+  91AE 32 A6 85     	ld (CTRL_DESPLZ),a
524+  91B1 18 1C        	jr 3F
525+  91B3
526+  91B3              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  91B3
528+  91B3 21 9F 85     1 ld hl,Columns
529+  91B6 35           	dec (hl)
530+  91B7 AF           	xor a
531+  91B8 32 A6 85     	ld (CTRL_DESPLZ),a
532+  91BB 3A B2 85     	ld a,(Cuad_objeto)
533+  91BE E6 01        	and 1
534+  91C0 28 0A        	jr z,2F
535+  91C2 2A A0 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  91C5 2B           	dec hl
537+  91C6 22 A0 85     	ld (Posicion_actual),hl
538+  91C9 CD 48 92     	call Genera_coordenadas
539+  91CC
540+  91CC              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  91CC
542+  91CC CD 93 87     2 call Inicia_puntero_objeto_izq
543+  91CF C9           3 ret
544+  91D0
545+  91D0              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  91D0              ;
547+  91D0              ;	19/10/22
548+  91D0              ;
549+  91D0              ;	(cp 29) para un Amadeus de 3 Columns.
550+  91D0              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  91D0
552+  91D0 3A A4 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  91D3 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  91D5 C9           	ret
555+  91D6
556+  91D6              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  91D6              ;
558+  91D6              ;	19/10/22
559+  91D6              ;
560+  91D6              ;	(cp 2) para un Amadeus de 3 Columns.
561+  91D6              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  91D6
563+  91D6 3A A4 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  91D9 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  91DB C9           	ret
566+  91DC
567+  91DC              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  91DC              ;
569+  91DC              ;	24/7/22
570+  91DC              ;
571+  91DC              ;	Inc_CTRL_DESPLZ
572+  91DC              ;
573+  91DC              ;
574+  91DC              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  91DC
576+  91DC 21 A6 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  91DF 3A B4 85     	ld a,(Vel_right)
578+  91E2 A7           	and a
579+  91E3 28 06        	jr z,1F
580+  91E5 47           	ld b,a
581+  91E6 34           3 inc (hl)
582+  91E7 10 FD        	djnz 3B
583+  91E9 18 01        	jr 2F
584+  91EB 34           1 inc (hl)
585+  91EC C9           2 ret
586+  91ED
587+  91ED              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  91ED              ;
589+  91ED              ;	5/2/23
590+  91ED              ;
591+  91ED              ;	Dec_CTRL_DESPLZ
592+  91ED              ;
593+  91ED              ;
594+  91ED              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  91ED
596+  91ED 21 A6 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  91F0 3A B3 85     	ld a,(Vel_left)
598+  91F3 A7           	and a
599+  91F4 28 06        	jr z,1F
600+  91F6 47           	ld b,a
601+  91F7 35           3 dec (hl)
602+  91F8 10 FD        	djnz 3B
603+  91FA 18 01        	jr 2F
604+  91FC 35           1 dec (hl)
605+  91FD C9           2 ret
606+  91FE
607+  91FE              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  91FE
609+  91FE 2A A0 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9201 01 1F 00     	ld bc,31
611+  9204 A7           	and a
612+  9205 ED 4A        	adc hl,bc
613+  9207 22 A0 85     	ld (Posicion_actual),hl
614+  920A 21 CB 85     	ld hl,Ctrl_0														; $xxx1
615+  920D CB C6        	set 0,(hl)
616+  920F C9           	ret
617+  9210
618+  9210              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9210
620+  9210 2A A0 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9213 01 1F 00     	ld bc,31
622+  9216 A7           	and a
623+  9217 ED 42        	sbc hl,bc
624+  9219 22 A0 85     	ld (Posicion_actual),hl 											; $xx1x
625+  921C 21 CB 85     	ld hl,Ctrl_0
626+  921F CB CE        	set 1,(hl)
627+  9221 C9           	ret
628+  9222
629+  9222              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  9222
631+  9222 24           Reaparece_abajo inc h
632+  9223 01 E0 17     	ld bc,$17e0
633+  9226 A7           	and a
634+  9227 ED 4A        	adc hl,bc
635+  9229 22 A0 85     	ld (Posicion_actual),hl
636+  922C 21 CB 85     	ld hl,Ctrl_0
637+  922F CB D6        	set 2,(hl)
638+  9231 C9           	ret
639+  9232
640+  9232              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  9232
642+  9232 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  9235 A7           	and a
644+  9236 ED 42        	sbc hl,bc
645+  9238 22 A0 85     	ld (Posicion_actual),hl
646+  923B 21 CB 85     	ld hl,Ctrl_0
647+  923E CB DE        	set 3,(hl)
648+  9240 C9           	ret
649+  9241
650+  9241              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9241
652+  9241 2A B0 85     Reinicio ld hl,(Posicion_inicio)
653+  9244 22 A0 85     	ld (Posicion_actual),hl
654+  9247 C9           	ret
# file closed: Direcciones.asm
794   9248              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  9248              ;	12/12/22
  2+  9248              ;
  3+  9248              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  9248              ;	Fila superior "0", Columna izquierda "0".
  5+  9248              ;
  6+  9248              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  9248              ;
  8+  9248              ;	Modifica: A
  9+  9248
 10+  9248 C5           Genera_coordenadas push bc
 11+  9249 E5           	push hl
 12+  924A 2A A0 85     	ld hl,(Posicion_actual)
 13+  924D 7D           	ld a,l
 14+  924E E6 1F        	and $1f
 15+  9250 32 A4 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9253 CD 16 8F     	call calcula_tercio
 17+  9256 47           	ld b,a
 18+  9257 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9258 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  925A 7D           	ld a,l
 21+  925B E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  925D 28 05        	jr z,2F
 23+  925F 0C           1 inc c
 24+  9260 D6 20        	sub 32
 25+  9262 20 FB        	jr nz,1B
 26+  9264 0C           2 inc c
 27+  9265 04           	inc b
 28+  9266 05           	dec b
 29+  9267 28 04        	jr z,3F
 30+  9269 3E E0        	ld a,$e0
 31+  926B 10 F2        	djnz 1B
 32+  926D 79           3 ld a,c
 33+  926E 3D           	dec a
 34+  926F 32 A5 85     	ld (Coordenada_y),a
 35+  9272 E1           	pop hl
 36+  9273 C1           	pop bc
 37+  9274 C9           	ret
# file closed: Genera_coordenadas.asm
795   9275              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9275
  2+  9275
  3+  9275              ;   11/8/22
  4+  9275              ;
  5+  9275              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9275              ;
  7+  9275              ;   Mov_obj.asm
  8+  9275              ;
  9+  9275              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9275              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9275              ;
 12+  9275              ;   Codificación:
 13+  9275              ;
 14+  9275              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9275
 16+  9275              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9275
 18+  9275 02 40 00     Arriba db 2,%01000000,0
 19+  9278 02 80 00     Abajo db 2,%10000000,0
 20+  927B 02 20 00     Derecha db 2,%00100000,0
 21+  927E 02 10 00     Izquierda db 2,%00010000,0
 22+  9281 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9285 60 42 60 40
 22+  9289 63
 23+  928A 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  928E 22 A3 80 A0
 24+  9292 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9296 84 A0 83 A0
 25+  929A 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  929E 80 A3 22 A0
 26+  92A2 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  92A6 40 60 42 60
 27+  92AA 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  92AE 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  92B2 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  92B6 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  92BA 84
 31+  92BB 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  92BF 84 00
 32+  92C1 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  92C5 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  92C9 1F 1F 1F 1F
 34+  92CD 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  92D1 1F 1F 1F 1F
 34+  92D5 1F
 35+  92D6 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  92DA 2F 2F 2F 2F
 35+  92DE 2F 2F
 36+  92E0 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  92E4 2F 2F 00
 37+  92E7
 38+  92E7
 39+  92E7              ; ----- ----- ----- ----- -----
 40+  92E7
 41+  92E7 C5 92        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  92E9 C1 92        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  92EB 7E 92        Indice_mov_Izquierda defw Izquierda
 44+  92ED 7B 92        Indice_mov_Derecha defw Derecha
 45+  92EF 78 92        Indice_mov_Abajo defw Abajo
 46+  92F1 75 92        Indice_mov_Arriba defw Arriba
 47+  92F3 B2 92        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  92F5 B6 92        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  92F7 AE 92        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  92F9 BB 92        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  92FB 81 92        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  92FD              ; ----- ----- ----- ----- -----
 53+  92FD
 54+  92FD 3A D1 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9300 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9301 28 02            jr z,1F
 57+  9303 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  9305 3A D2 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  9308 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  930A 32 D2 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  930D              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  930D 2A CF 85         ld hl,(Puntero_mov)
 63+  9310 7E               ld a,(hl)
 64+  9311 32 D1 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  9314 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  9315 22 CF 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  9318
 68+  9318 3A D3 85     Decoder ld a,(Repetimos_db)
 69+  931B A7               and a
 70+  931C 20 0C            jr nz,12F
 71+  931E 2A CF 85         ld hl,(Puntero_mov)
 72+  9321 7E               ld a,(hl)
 73+  9322 A7               and a
 74+  9323 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  9325 E6 0F            and $0f
 76+  9327 32 D3 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  932A              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  932A 2A CF 85     12 ld hl,(Puntero_mov)
 79+  932D CB 7E            bit 7,(hl)
 80+  932F 28 03            jr z,2F
 81+  9331 CD 34 8F         call Mov_down
 82+  9334 2A CF 85     2 ld hl, (Puntero_mov)
 83+  9337 CB 76            bit 6,(hl)
 84+  9339 28 03            jr z,3F
 85+  933B CD 62 8F         call Mov_up
 86+  933E 2A CF 85     3 ld hl, (Puntero_mov)
 87+  9341 CB 6E            bit 5,(hl)
 88+  9343 28 03            jr z,4F
 89+  9345 CD 90 8F         call Mov_right
 90+  9348 2A CF 85     4 ld hl, (Puntero_mov)
 91+  934B CB 66            bit 4,(hl)
 92+  934D 28 03            jr z,5F
 93+  934F CD AE 90         call Mov_left
 94+  9352
 95+  9352              ; ---------- --------- --------- ---------- ----------
 96+  9352
 97+  9352 3A D3 85     5 ld a,(Repetimos_db)
 98+  9355 A7               and a
 99+  9356 28 07            jr z,6F
100+  9358 3D               dec a
101+  9359 32 D3 85         ld (Repetimos_db),a
102+  935C 28 01            jr z,6f
103+  935E C9           11 ret
104+  935F 21 D1 85     6 ld hl,Contador_db_mov
105+  9362 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  9363 2A CF 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9366 23               inc hl
108+  9367 22 CF 85         ld (Puntero_mov),hl
109+  936A 18 F2            jr 11B
110+  936C 2A CD 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  936F 3A D2 85         ld a,(Incrementa_puntero)
112+  9372 47               ld b,a
113+  9373 23           8 inc hl
114+  9374 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9376 5E               ld e,(hl)
116+  9377 23               inc hl
117+  9378 56               ld d,(hl)
118+  9379 EB               ex de,hl
119+  937A 22 CF 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  937D 18 DF            jr 11B
121+  937F
122+  937F              ; ---------- --------- --------- ---------- ----------
123+  937F              ;
124+  937F              ;   11/8/22
125+  937F              ;
126+  937F              ;   Prepara_Puntero_mov
127+  937F
128+  937F E5           Prepara_Puntero_mov push hl
129+  9380 D5               push de
130+  9381 2A CD 85         ld hl,(Puntero_indice_mov)
131+  9384 5E               ld e,(hl)
132+  9385 23               inc hl
133+  9386 56               ld d,(hl)
134+  9387 EB               ex de,hl
135+  9388 22 CF 85         ld (Puntero_mov),hl
136+  938B D1               pop de
137+  938C E1               pop hl
138+  938D C9               ret
139+  938E
140+  938E              ; ---------- --------- --------- ---------- ----------
141+  938E              ;
142+  938E              ;   11/8/22
143+  938E              ;
144+  938E              ;   Reinicia_el_movimiento
145+  938E
146+  938E CD 7F 93     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9391 AF               xor a
148+  9392 32 D1 85         ld (Contador_db_mov),a
149+  9395 32 D2 85         ld (Incrementa_puntero),a
150+  9398
151+  9398              ;    jr $
152+  9398
153+  9398 C3 FD 92         jp Movimiento
154+  939B C9               ret
155+  939C              ; ---------- --------- --------- ---------- ----------
156+  939C
157+  939C
158+  939C
159+  939C
160+  939C
161+  939C
162+  939C
163+  939C
164+  939C
165+  939C
166+  939C
167+  939C
168+  939C
169+  939C
170+  939C
171+  939C
172+  939C
173+  939C
# file closed: Patrones_de_mov.asm
796   939C              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  939C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  939C              ;
  3+  939C              ;	3/1/23
  4+  939C              ;
  5+  939C              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  939C
  7+  939C              ;	ADC HL,SP	LD (addr),SP
  8+  939C              ;	ADD HL,SP	LD SP,(addr)
  9+  939C              ;	ADD IX,SP	LD SP,nn
 10+  939C              ; 	ADD IY,SP	LD SP,HL
 11+  939C              ;				LD SP,IX
 12+  939C              ;	DEC SP		LD SP,IY
 13+  939C
 14+  939C              ;	EX (SP),HL
 15+  939C              ;	EX (SP),IX
 16+  939C              ;	EX (SP),IY
 17+  939C
 18+  939C              ;	INC SP
 19+  939C
 20+  939C
 21+  939C                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero objeto.
 27+  7FA0              ;   $7002 / 03 ..... Puntero de impresion.
 28+  7FA0              ;   $7004 / 05 ..... Rutina de impresión.
 29+  7FA0
 30+  7FA0 ED 73 E0 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 A0 7F         ld sp,Guarda_foto_registros                   ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A E4 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 E4 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B E0 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
797   7FC0
798   7FC0              	SAVESNA "Pruebas.sna", START
799   7FC0
800   7FC0
801   7FC0
# file closed: Banco_de_pruebas.asm
