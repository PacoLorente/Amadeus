# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 7D 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 31/01/23
  5+  83C0
  6+  83C0              Indice_de_entidades									; 56 Bytes por entidad.
  7+  83C0
  8+  83C0 04 84        	defw Entidad_1
  9+  83C2 3C 84        	defw Entidad_2
 10+  83C4 74 84        	defw Entidad_3
 11+  83C6 AC 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6
 28+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite_der).
 29+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite_izq).
 30+  83DA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83DC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83DE
 33+  83DE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83E0 04           	db 4 											; (Cuad_objeto).
 35+  83E1
 36+  83E1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83E5
 38+  83E5 00 00        	db 0,0											; Variables_de_borrado
 39+  83E7 00 00        	defw 0											;	" " " " " " "
 40+  83E9 00 00        	defw 0											;	" " " " " " "
 41+  83EB 00 00 00     	db 0,0,0										;	" " " " " " "
 42+  83EE
 43+  83EE 00 00        	db 0,0											; Variables_de_pintado
 44+  83F0 00 00        	defw 0											;	" " " " " " "
 45+  83F2 00 00        	defw 0											;	" " " " " " "
 46+  83F4 00 00 00     	db 0,0,0										;	" " " " " " "
 47+  83F7
 48+  83F7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  83F9
 50+  83F9 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  83FD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8400
 53+  8400 00           	db 0 											; (Columnas).
 54+  8401 00 00        	defw 0											; (Limite_horizontal).
 55+  8403 00           	db 0											; (Limite_vertical).
 56+  8404
 57+  8404              ; ---------- ---------- ---------- ---------- ----------
 58+  8404
 59+  8404 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8406 00 00        	defw 0											; (Posicion_actual).
 61+  8408 00 00        	defw 0 											; (Puntero_objeto).
 62+  840A 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 63+  840D
 64+  840D 00           	db %00000000 									; (Attr).
 65+  840E
 66+  840E 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8410 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8412 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8414 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8416
 71+  8416 00 00        	defw 0											; (Posicion_inicio).
 72+  8418 00           	db 0											; (Cuad_objeto).
 73+  8419
 74+  8419 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  841D
 76+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 77+  841F 00 00        	defw 0											;	" " " " " " "
 78+  8421 00 00        	defw 0											;	" " " " " " "
 79+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 80+  8426
 81+  8426 00 00        	db 0,0											; Variables_de_pintado
 82+  8428 00 00        	defw 0											;	" " " " " " "
 83+  842A 00 00        	defw 0											;	" " " " " " "
 84+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 85+  842F
 86+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8431
 88+  8431 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  8438
 91+  8438 00           	db 0 											; (Columnas).
 92+  8439 00 00        	defw 0											; (Limite_horizontal).
 93+  843B 00           	db 0											; (Limite_vertical).
 94+  843C
 95+  843C              ; ---------- ---------- ---------- ---------- ----------
 96+  843C
 97+  843C 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  843E 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8440 00 00        	defw 0											; (Puntero_objeto).
100+  8442 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
101+  8445
102+  8445 02           	db %00000010									; (Attr).
103+  8446
104+  8446 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  8448 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  844A 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  844C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  844E
109+  844E 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8450 02           	db 2											; (Cuad_objeto).
111+  8451
112+  8451 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8455
114+  8455 00 00        	db 0,0											; Variables_de_borrado
115+  8457 00 00        	defw 0										 	;	" " " " " " "
116+  8459 00 00        	defw 0											;	" " " " " " "
117+  845B 00 00 00     	db 0,0,0										;	" " " " " " "
118+  845E
119+  845E 00 00        	db 0,0											; Variables_de_pintado
120+  8460 00 00        	defw 0											;	" " " " " " "
121+  8462 00 00        	defw 0											;	" " " " " " "
122+  8464 00 00 00     	db 0,0,0										;	" " " " " " "
123+  8467
124+  8467 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  8469
126+  8469 70 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  846D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8470
129+  8470 00           	db 0 											; (Columnas).
130+  8471 00 00        	defw 0											; (Limite_horizontal).
131+  8473 00           	db 0											; (Limite_vertical).
132+  8474
133+  8474              ; ---------- ---------- ---------- ---------- ----------
134+  8474
135+  8474 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  8476 00 00        	defw 0                                          ; (Posicion_actual).
137+  8478 00 00        	defw 0											; (Puntero_objeto).
138+  847A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
139+  847D
140+  847D 04           	db %00000100									; (Attr).
141+  847E
142+  847E 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8480 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8482
145+  8482 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  8486
148+  8486 A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  8488 01           	db 1											; (Cuad_objeto).
150+  8489
151+  8489 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  848D
153+  848D 00 00        	db 0,0											; Variables_de_borrado
154+  848F 00 00        	defw 0										 	;	" " " " " " "
155+  8491 00 00        	defw 0											;	" " " " " " "
156+  8493 00 00 00     	db 0,0,0										;	" " " " " " "
157+  8496
158+  8496 00 00        	db 0,0											; Variables_de_pintado
159+  8498 00 00        	defw 0											;	" " " " " " "
160+  849A 00 00        	defw 0											;	" " " " " " "
161+  849C 00 00 00     	db 0,0,0										;	" " " " " " "
162+  849F
163+  849F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84A1
165+  84A1 72 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84A5 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84A8
168+  84A8 00           	db 0 											; (Columnas).
169+  84A9 00 00        	defw 0											; (Limite_horizontal).
170+  84AB 00           	db 0											; (Limite_vertical).
171+  84AC
172+  84AC              ; ---------- ---------- ---------- ---------- ----------
173+  84AC
174+  84AC 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84AE 00 00        	defw 0                                          ; (Posicion_actual).
176+  84B0 00 00        	defw 0 											; (Puntero_objeto).
177+  84B2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
178+  84B5
179+  84B5 01           	db %00000001									; (Attr).
180+  84B6
181+  84B6 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84B8 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84BA
184+  84BA 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84BE
187+  84BE BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84C0 00           	db 0											; (Cuad_objeto).
189+  84C1
190+  84C1 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84C5
192+  84C5 00 00        	db 0,0											; Variables_de_borrado
193+  84C7 00 00        	defw 0										 	;	" " " " " " "
194+  84C9 00 00        	defw 0											;	" " " " " " "
195+  84CB 00 00 00     	db 0,0,0										;	" " " " " " "
196+  84CE
197+  84CE 00 00        	db 0,0											; Variables_de_pintado
198+  84D0 00 00        	defw 0											;	" " " " " " "
199+  84D2 00 00        	defw 0											;	" " " " " " "
200+  84D4 00 00 00     	db 0,0,0										;	" " " " " " "
201+  84D7
202+  84D7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84D9
204+  84D9 62 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84DD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84E0
207+  84E0 00           	db 0 											; (Columnas).
208+  84E1 00 00        	defw 0											; (Limite_horizontal).
209+  84E3 00           	db 0											; (Limite_vertical).
210+  84E4
# file closed: Entidades.asm
 21   84E4
 22   84E4              ; ******************************************************************************************************************************************************************************************
 23   84E4              ; Constantes.
 24   84E4              ; ******************************************************************************************************************************************************************************************
 25   84E4              ;
 26   84E4              ; 8/11/22
 27   84E4              ;
 28   84E4              ; Constantes generales.
 29   84E4              ;
 30   84E4
 31   84E4              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84E4              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84E4              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84E4              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84E4              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84E4
 37   84E4              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84E4              ;                               				        ; De momento situamos este almacén en $7000.
 39   84E4
 40   84E4
 41   84E4              ; ******************************************************************************************************************************************************************************************
 42   84E4              ; Variables.
 43   84E4              ; ******************************************************************************************************************************************************************************************
 44   84E4              ;
 45   84E4              ; 10/11/22
 46   84E4              ;
 47   84E4              ; Variables de DRAW. (Motor principal).
 48   84E4              ;
 49   84E4              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84E4
 51   84E4 02           Filas db 2												; Filas. [DRAW]
 52   84E5 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84E6 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84E8 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84EA 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84EB              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84EB              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84EB              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84EB 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84EC 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84ED
 62   84ED              ; ---------- ---------- ----------
 63   84ED
 64   84ED
 65   84ED 04           Attr db %00000100										; Atributos de la entidad:
 66   84EE
 67   84EE              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84EE              ;
 69   84EE              ;	COLORES: 0 ..... NEGRO
 70   84EE              ;    		 1 ..... AZUL
 71   84EE              ; 			 2 ..... ROJO
 72   84EE              ;			 3 ..... MAGENTA
 73   84EE              ; 			 4 ..... VERDE
 74   84EE              ; 			 5 ..... CIAN
 75   84EE              ;			 6 ..... AMARILLO
 76   84EE              ; 			 7 ..... BLANCO
 77   84EE
 78   84EE 80 81        Indice_Sprite_der defw Indice_Badsat_der
 79   84F0 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   84F2 00 00        Puntero_DESPLZ_der defw 0
 81   84F4 00 00        Puntero_DESPLZ_izq defw 0
 82   84F6
 83   84F6 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   84F8 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   84F9
 86   84F9              ; Variables de objeto. (Características).
 87   84F9
 88   84F9 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   84FA 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   84FB 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   84FC 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   84FD
 93   84FD 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   84FF 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   8501 00 00        	defw 0
 96   8503 00 00 00     	db 0,0,0
 97   8506
 98   8506 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   8508 00 00        	defw 0
100   850A 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   850C 00 00 00     	db 0,0,0
102   850F
103   850F              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   850F
105   850F 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   8510              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   8510              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   8510              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   8510              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   8510              ;
111   8510              ; 														DESCRIPCIÖN:
112   8510              ;
113   8510              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   8510              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   8510              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   8510              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   8510              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   8510              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   8510              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   8510              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   8510              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   8510              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   8510              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   8510              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   8510              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   8510              ;
127   8510              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   8510              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   8510              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   8510
131   8510 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   8511
133   8511              ; Movimiento.
134   8511
135   8511 64 90        Puntero_indice_mov defw Indice_mov_Derecha
136   8513 00 00        Puntero_mov defw 0
137   8515 00           Contador_db_mov db 0
138   8516 00           Incrementa_puntero db 0
139   8517 00           Repetimos_db db 0
140   8518
141   8518
142   8518              ; Variables de funcionamiento. [DRAW].
143   8518
144   8518 00           Columnas db 0
145   8519 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
146   851B              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   851B 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
148   851C
149   851C              ; 52 Bytes por entidad.
150   851C              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
151   851C              ;					         		---------;      ;---------
152   851C
153   851C
154   851C              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
155   851C              ; Gestión de ENTIDADES.
156   851C
157   851C 00 00        Puntero_store_entidades defw 0
158   851E 00 00        Puntero_restore_entidades defw 0
159   8520 00 00        Indice_restore defw 0
160   8522 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
161   8523 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
162   8524              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
163   8524              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
164   8524              ;														; _ (Numero_de_malotes)="0".
165   8524 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
166   8526              ;														; _variable para almacenar lo posición del puntero_
167   8526              ; 														; _de pila, SP.
168   8526 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
169   8528              ;														; La utiliza la rutina [Extrae_foto_registros].
170   8528 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
171   852A              ;														; _el snapshot de los registros de la siguiente entidad.
172   852A              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
173   852A
174   852A              ; Gestión de FRAMES.
175   852A
176   852A 00           Switch db 0
177   852B
178   852B              ; Variables de Raster y localización en pantalla.
179   852B
180   852B 00 FF        Temp_Raster defw $ff00
181   852D
182   852D              ; Rutina principal *************************************************************************************************************************************************************************
183   852D              ;
184   852D              ;	14/11/22
185   852D
186   852D 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
187   8530
188   8530 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
189   8532 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
190   8534 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
191   8536 F3           	DI
192   8537
193   8537 3E 01        	ld a,1
194   8539 D3 FE        	out ($fe),a
195   853B
196   853B 3E 07        	ld a,%00000111
197   853D CD F6 8C     	call Cls
198   8540
199   8540              ;	call Pinta_FILAS
200   8540
201   8540 CD 23 87     	call Pulsa_ENTER
202   8543
203   8543 21 22 85     	ld hl,Numero_de_entidades
204   8546 46           	ld b,(hl)
205   8547 04           	inc b
206   8548 05           	dec b
207   8549 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
208   854B
209   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
210   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
211   854B              ;	Pintamos el resto de entidades:
212   854B
213   854B CD 63 86     	call Inicia_punteros_de_entidades
214   854E
215   854E              ;	INICIA ENTIDADES!!!!!
216   854E
217   854E C5           1 push bc  												; Guardo el contador de entidades.
218   854F CD 96 86      	call Inicia_Puntero_objeto
219   8552 CD 7A 87     	call Draw
220   8555 CD A0 7F     	call Guarda_foto_registros
221   8558 CD BE 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
222   855B C1           	pop bc
223   855C 10 F0        	djnz 1B  											; Decremento el contador de entidades.
224   855E
225   855E              ; 	INICIA AMADEUS!!!!!
226   855E
227   855E CD FF 86     3 call Restore_Amadeus
228   8561 CD 96 86     	call Inicia_Puntero_objeto
229   8564 CD 7A 87     	call Draw
230   8567 CD A0 7F     	call Guarda_foto_registros
231   856A CD 11 87     	call Store_Amadeus
232   856D
233   856D              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
234   856D
235   856D CD 63 86     	call Inicia_punteros_de_entidades
236   8570 CD ED 86     	call Restore_Primera_entidad
237   8573 3A 22 85     	ld a,(Numero_de_entidades)
238   8576 3C           	inc a
239   8577 32 23 85     	ld (Numero_de_malotes),a
240   857A
241   857A FB           2 ei
242   857B 18 FD        	jr 2B
243   857D
244   857D              ; -----------------------------------------------------------------------------------
245   857D
246   857D              Frame
247   857D
248   857D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
249   857D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
250   857D
251   857D 3E 07            ld a,7
252   857F D3 FE            out ($fe),a
253   8581 CD 7E 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
254   8584 3E 01            ld a,1
255   8586 D3 FE            out ($fe),a
256   8588
257   8588              ; ----------------------------------------------------------------------
258   8588
259   8588 21 00 70     	ld hl,Album_de_fotos
260   858B 22 28 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
261   858E              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
262   858E 3A 22 85         ld a,(Numero_de_entidades)
263   8591 47               ld b,a
264   8592 A7           	and a
265   8593 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
266   8595
267   8595 C5           2 push bc
268   8596 CD DC 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
269   8599 3A 0F 85     	ld a,(Ctrl_0)
270   859C CB 67        	bit 4,a
271   859E 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
272   85A0 CD 2A 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   85A3 21 0F 85     1 ld hl,Ctrl_0
274   85A6 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
275   85A8 AF           	xor a
276   85A9 32 10 85     	ld (Obj_dibujado),a
277   85AC CD BE 86     	call Store_Restore_entidades
278   85AF C1           	pop bc
279   85B0 10 E3        	djnz 2B
280   85B2
281   85B2 CD FF 86     4 call Restore_Amadeus
282   85B5 CD FB 85     	call Mov_Amadeus
283   85B8 3A 0F 85     	ld a,(Ctrl_0)
284   85BB CB 67        	bit 4,a
285   85BD 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
286   85BF CD 2A 86     	call Guarda_foto_entidad_a_pintar
287   85C2
288   85C2 21 0F 85     3 ld hl,Ctrl_0
289   85C5 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
290   85C7 AF           	xor a
291   85C8 32 10 85     	ld (Obj_dibujado),a
292   85CB CD 11 87     	call Store_Amadeus
293   85CE
294   85CE              ; -----
295   85CE
296   85CE CD 63 86     	call Inicia_punteros_de_entidades
297   85D1 CD ED 86     	call Restore_Primera_entidad
298   85D4 CD 79 86     	call Calcula_numero_de_malotes
299   85D7
300   85D7 3E 00        	ld a,0
301   85D9 D3 FE        	out ($fe),a
302   85DB C9           	ret
303   85DC
304   85DC              ; --------------------------------------------------------------------------------------------------------------
305   85DC              ;
306   85DC              ;	29/1/23
307   85DC
308   85DC              Mov_obj
309   85DC
310   85DC              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
311   85DC
312   85DC AF           	xor a
313   85DD 32 10 85     	ld (Obj_dibujado),a
314   85E0 CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
315   85E3              ;														; Obj_dibujado="0".
316   85E3              ; Movemos Entidades malignas.
317   85E3
318   85E3 CD 74 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
319   85E6 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
320   85E9 CB 67        	bit 4,a
321   85EB C8           	ret z
322   85EC
323   85EC              ; ---------
324   85EC
325   85EC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
326   85EE 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
327   85F1 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
328   85F4 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
329   85F7 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
330   85FA C9           	ret													; _de la misma.
331   85FB
332   85FB              ; --------------------------------------------------------------------------------------------------------------
333   85FB              ;
334   85FB              ;	29/1/23
335   85FB
336   85FB              Mov_Amadeus
337   85FB
338   85FB AF           	xor a
339   85FC 32 10 85     	ld (Obj_dibujado),a
340   85FF CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
341   8602              ;														; Obj_dibujado="0".
342   8602              ; Movemos Amadeus.
343   8602
344   8602 CD 37 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
345   8605 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
346   8608 CB 67        	bit 4,a
347   860A C8           	ret z
348   860B
349   860B              ; ---------
350   860B
351   860B 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
352   860D 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
353   8610 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
354   8613 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
355   8616 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
356   8619 C9           	ret													; _de la nave.
357   861A
358   861A              ; --------------------------------------------------------------------------------------------------------------
359   861A              ;
360   861A              ;	31/01/23
361   861A              ;
362   861A              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
363   861A
364   861A              Guarda_foto_entidad_a_borrar
365   861A
366   861A CD 54 8A     	call Prepara_draw
367   861D CD 8E 89     	call calcula_CColumnass
368   8620 CD C5 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
369   8623 CD 1A 8A     	call Define_rutina_de_impresion
370   8626 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
371   8629 C9           	ret
372   862A
373   862A              ; --------------------------------------------------------------------------------------------------------------
374   862A              ;
375   862A              ;	31/01/23
376   862A              ;
377   862A              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
378   862A              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
379   862A
380   862A              Guarda_foto_entidad_a_pintar
381   862A
382   862A CD 57 86     	call Repone_pintar
383   862D CD 7A 87     	call Draw
384   8630 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
385   8633 C9           	ret
386   8634
387   8634              ; --------------------------------------------------------------------------------------------------------------
388   8634              ;
389   8634              ;
390   8634
391   8634 21 E4 84     Prepara_var_pintado_borrado	ld hl,Filas
392   8637 3A 10 85     	ld a,(Obj_dibujado)
393   863A A7           	and a
394   863B 28 05        	jr z,1F
395   863D 11 06 85     	ld de,Variables_de_pintado
396   8640 18 03        	jr 2F
397   8642 11 FD 84     1 ld de,Variables_de_borrado
398   8645 01 09 00     2 ld bc,9
399   8648 ED B0        	ldir
400   864A C9           	ret
401   864B
402   864B              ; --------------------------------------------------------------------------------------------------------------
403   864B
404   864B 21 FD 84     Repone_borrar ld hl,Variables_de_borrado
405   864E 11 E4 84     	ld de,Filas
406   8651 01 09 00     	ld bc,9
407   8654 ED B0        	ldir
408   8656 C9           	ret
409   8657
410   8657 21 06 85     Repone_pintar ld hl,Variables_de_pintado
411   865A 11 E4 84     	ld de,Filas
412   865D 01 09 00     	ld bc,9
413   8660 ED B0        	ldir
414   8662 C9           	ret
415   8663
416   8663              ; *************************************************************************************************************************************************************
417   8663              ;
418   8663              ; 8/1/23
419   8663              ;
420   8663              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
421   8663              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
422   8663              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
423   8663
424   8663              ; Destruye HL y DE !!!!!
425   8663
426   8663              Inicia_punteros_de_entidades
427   8663
428   8663 21 C0 83     	ld hl,Indice_de_entidades
429   8666 CD 90 86         call Extrae_address
430   8669 22 1C 85         ld (Puntero_store_entidades),hl
431   866C 21 C2 83     	ld hl,Indice_de_entidades+2
432   866F 22 20 85     	ld (Indice_restore),hl
433   8672 CD 90 86     	call Extrae_address
434   8675 22 1E 85     	ld (Puntero_restore_entidades),hl
435   8678 C9               ret
436   8679
437   8679              ; -------------------------------------------------------------------------------------------------------------
438   8679              ;
439   8679              ; 30/1/23
440   8679              ;
441   8679
442   8679 2A 28 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
443   867C 7D           	ld a,l
444   867D A7           	and a
445   867E 28 0C        	jr z,3F
446   8680 AF           	xor a
447   8681 67           	ld h,a
448   8682 7D           	ld a,l
449   8683 D6 06        1 sub 6
450   8685 28 03        	jr z,2F
451   8687 24           	inc h
452   8688 18 F9        	jr 1B
453   868A 24           2 inc h
454   868B 7C           	ld a,h
455   868C 32 23 85     3 ld (Numero_de_malotes),a
456   868F C9           	ret
457   8690
458   8690              ; *************************************************************************************************************************************************************
459   8690              ;
460   8690              ; 20/10/22
461   8690              ;
462   8690              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
463   8690              ;
464   8690              ; Destruye el puntero y DE !!!!!
465   8690
466   8690 5E           Extrae_address ld e,(hl)
467   8691 23           	inc hl
468   8692 56           	ld d,(hl)
469   8693 2B           	dec hl
470   8694 EB           	ex de,hl
471   8695 C9           	ret
472   8696
473   8696              ; *************************************************************************************************************************************************************
474   8696              ;
475   8696              ;	31/01/23
476   8696              ;
477   8696              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
478   8696              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
479   8696              ;
480   8696              ;   Destruye HL y BC !!!!!,
481   8696              ;
482   8696              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
483   8696              ;					"0" ..... Izquierda.
484   8696
485   8696              Inicia_Puntero_objeto
486   8696
487   8696              ; 2/2/23
488   8696
489   8696              ; Arrancamos desde la parte izquierda de la pantalla.
490   8696              ; Iniciamos (Indice_Sprite_der).
491   8696
492   8696 2A EE 84     	ld hl,(Indice_Sprite_der)
493   8699 22 F2 84     	ld (Puntero_DESPLZ_der),hl
494   869C CD 90 86     	call Extrae_address
495   869F 22 E8 84     	ld (Puntero_objeto),hl
496   86A2
497   86A2 2A F0 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
498   86A5 CD 90 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
499   86A8 2B           	dec hl 												; _del índice.
500   86A9 2B           	dec hl
501   86AA 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
502   86AD
503   86AD              ; Arrancamos desde la parte derecha de la pantalla.
504   86AD              ; Iniciamos (Indice_Sprite_izq).
505   86AD
506   86AD              ;	ld hl,(Indice_Sprite_izq)
507   86AD              ;	ld (Puntero_DESPLZ_izq),hl
508   86AD              ;	call Extrae_address
509   86AD              ;	ld (Puntero_objeto),hl
510   86AD
511   86AD              ;	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
512   86AD              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
513   86AD              ;	dec hl 												; _del índice.
514   86AD              ;	dec hl
515   86AD              ;	ld (Puntero_DESPLZ_der),hl
516   86AD
517   86AD              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
518   86AD
519   86AD 21 10 83     	ld hl,Amadeus
520   86B0 ED 4B E8 84  	ld bc,(Puntero_objeto)
521   86B4 B7 ED 42     	sub hl,bc
522   86B7 C0           	ret nz
523   86B8 21 0F 85     	ld hl,Ctrl_0
524   86BB CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
525   86BD C9           	ret 												; _de nuestra nave en los extremos.
526   86BE
527   86BE              ; *************************************************************************************************************************************************************
528   86BE              ;
529   86BE              ;	8/1/23
530   86BE              ;
531   86BE              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
532   86BE              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
533   86BE
534   86BE              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
535   86BE              ;	_de la 2ª y 3ª entidad respectivamente.
536   86BE
537   86BE
538   86BE
539   86BE              Store_Restore_entidades
540   86BE
541   86BE E5           	push hl
542   86BF D5           	push de
543   86C0 C5            	push bc
544   86C1
545   86C1              ;	STORE !!!!!
546   86C1              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
547   86C1
548   86C1 21 E4 84     	ld hl,Filas
549   86C4 ED 5B 1C 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
550   86C8 01 38 00     	ld bc,56
551   86CB ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
552   86CD
553   86CD              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
554   86CD
555   86CD 2A 1E 85     	ld hl,(Puntero_restore_entidades)
556   86D0 22 1C 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
557   86D3 11 E4 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
558   86D6 01 38 00     	ld bc,56
559   86D9 ED B0        	ldir
560   86DB
561   86DB              ;	Incrementa RESTORE !!!!!
562   86DB
563   86DB 2A 20 85         ld hl,(Indice_restore)
564   86DE 23           	inc hl
565   86DF 23           	inc hl
566   86E0 22 20 85     	ld (Indice_restore),hl
567   86E3 CD 90 86         call Extrae_address
568   86E6 22 1E 85         ld (Puntero_restore_entidades),hl
569   86E9 C1           	pop bc
570   86EA D1           	pop de
571   86EB E1           	pop hl
572   86EC C9           	ret
573   86ED
574   86ED              ; **************************************************************************************************
575   86ED              ;
576   86ED              ;	29/10/22
577   86ED              ;
578   86ED              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
579   86ED
580   86ED E5           Restore_Primera_entidad push hl
581   86EE D5           	push de
582   86EF C5            	push bc
583   86F0 2A 1C 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
584   86F3 11 E4 84     	ld de,Filas
585   86F6 01 38 00     	ld bc,56
586   86F9 ED B0        	ldir
587   86FB C1           	pop bc
588   86FC D1           	pop de
589   86FD E1           	pop hl
590   86FE C9           	ret
591   86FF
592   86FF              ; **************************************************************************************************
593   86FF              ;
594   86FF              ;	25/01/23
595   86FF              ;
596   86FF              ;	Restore_Amadeus
597   86FF              ;
598   86FF              ;	Cargamos en DRAW los parámetros de Amadeus.
599   86FF              ;
600   86FF
601   86FF E5           Restore_Amadeus	push hl
602   8700 D5           	push de
603   8701 C5            	push bc
604   8702 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
605   8705 11 E4 84     	ld de,Filas
606   8708 01 38 00     	ld bc,56
607   870B ED B0        	ldir
608   870D C1           	pop bc
609   870E D1           	pop de
610   870F E1           	pop hl
611   8710 C9           	ret
612   8711
613   8711              ; *************************************************************************************************************************************************************
614   8711              ;
615   8711              ;	29/01/23
616   8711              ;
617   8711              ;	Store_Amadeus
618   8711              ;
619   8711              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
620   8711              ;
621   8711
622   8711 E5           Store_Amadeus push hl
623   8712 D5           	push de
624   8713 C5            	push bc
625   8714 21 E4 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
626   8717 11 CC 83     	ld de,Amadeus_db
627   871A 01 38 00     	ld bc,56
628   871D ED B0        	ldir
629   871F C1           	pop bc
630   8720 D1           	pop de
631   8721 E1           	pop hl
632   8722 C9           	ret
633   8723
634   8723              ; **************************************************************************************************
635   8723
636   8723              ; Teclado.
637   8723
638   8723 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
639   8725 DB FE        	in a,($fe)
640   8727 E6 01        	and $01
641   8729 28 02        	jr z,1f
642   872B 18 F6        	jr Pulsa_ENTER
643   872D C9           1 ret
644   872E
645   872E              ; **************************************************************************************************
646   872E              ;
647   872E              ; Temporización.
648   872E
649   872E              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
650   872E              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
651   872E              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
652   872E              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
653   872E
654   872E              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
655   872E              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
656   872E              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
657   872E
658   872E              ; A partir de $4f61 no hace falta DELAY.
659   872E
660   872E              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
661   872E
662   872E 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
663   8731 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
664   8732 78           	LD A,B
665   8733 A7           	AND A
666   8734 20 FB        	JR NZ,wait
667   8736 C9           	RET
668   8737
669   8737              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
670   8737              ;
671   8737              ;	21/4/22
672   8737
673   8737              Movimiento_Amadeus
674   8737
675   8737 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
676   8739 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
677   873B E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
678   873D CC 67 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
679   8740 3E F7        	ld a,$f7
680   8742 DB FE        	in a,($fe)
681   8744 E6 01        	and $01
682   8746 C8           	ret z
683   8747 3E F7        	ld a,$f7
684   8749 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
685   874B E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
686   874D CC 66 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
687   8750 C9               ret
688   8751
689   8751              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
690   8751
691   8751              ; Pinta indicadores de FILAS. ------------------------------------------------------
692   8751
693   8751 21 10 40     Pinta_FILAS ld hl,$4010
694   8754              ;	ld b,9
695   8754              ;2 push hl
696   8754              ;	push bc
697   8754 06 BF        	ld b,$bf
698   8756 36 80        1 ld (hl),%10000000
699   8758 CD 60 8A     	call NextScan
700   875B 10 F9        	djnz 1B
701   875D              ;	pop bc
702   875D              ;	pop hl
703   875D              ;	inc l
704   875D              ;	djnz 2B
705   875D 06 03        	ld b,3
706   875F 21 00 47         ld hl,$4700
707   8762 CD 68 87     3 call Bucle_1
708   8765 10 FB            djnz 3B
709   8767 C9               ret
710   8768
711   8768 C5           Bucle_1 push bc
712   8769 E5                   push hl
713   876A D1                   pop de
714   876B 13                   inc de
715   876C 01 FF 00             ld bc,255
716   876F 36 FF                ld (hl),255
717   8771 ED B0                ldir
718   8773 23                   inc hl
719   8774 3E 07                ld a,7
720   8776 84                   add a,h
721   8777 67                   ld h,a
722   8778 C1                   pop bc
723   8779 C9                   ret
724   877A
725   877A              ; ---------------------------------------------------------------
726   877A
727   877A              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  877A              ; ******************************************************************************************************************************************************************************************
  2+  877A              ;
  3+  877A              ; 01/23
  4+  877A              ;
  5+  877A              ; DRAW. ************************************************************************************************************************************************************************************
  6+  877A
  7+  877A CD 54 8A     Draw call Prepara_draw
  8+  877D 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  877E A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  877F 28 05        	jr z,2F
 11+  8781 3A F8 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  8784 18 0C        	jr 1F
 13+  8786 2A F6 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  8789 22 E6 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  878C CD 1B 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  878F              ;													; _la esquina superior izquierda de la pantalla.
 17+  878F CD F6 90     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  8792 3A 0F 85     1 ld a,(Ctrl_0)
 19+  8795 CB 6F        	bit 5,a
 20+  8797 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  8799
 22+  8799 CD B1 87     	call Comprueba_limite_horizontal
 23+  879C CD 41 88     	call Comprueba_limite_vertical
 24+  879F
 25+  879F              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  879F
 27+  879F CD 8E 89     3 call calcula_CColumnass
 28+  87A2 CD C5 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  87A5 CD 1A 8A     	call Define_rutina_de_impresion
 30+  87A8
 31+  87A8 3A 0F 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  87AB CB AF        	res 5,a											; _a ser de utilidad.
 33+  87AD 32 0F 85     	ld (Ctrl_0),a
 34+  87B0
 35+  87B0 C9           	ret
 36+  87B1
 37+  87B1              ; *******************************************************************************************************************************************************************************************
 38+  87B1              ;	21/01/23
 39+  87B1              ;
 40+  87B1              ; 	Comprueba_limite_horizontal.
 41+  87B1              ;
 42+  87B1              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  87B1              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  87B1              ;
 45+  87B1              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  87B1              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  87B1              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  87B1              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  87B1
 50+  87B1
 51+  87B1
 52+  87B1 3A 0F 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  87B4 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  87B6 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  87B8 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  87BA 32 0F 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  87BD 18 09            jr 6F
 58+  87BF CB 5F        1 bit 3,a
 59+  87C1 28 0A            jr z,2F
 60+  87C3 E6 F7            and $f7
 61+  87C5 32 0F 85         ld (Ctrl_0),a
 62+  87C8 CD 1B 89     6 call Inicializacion
 63+  87CB 18 5B            jr 5F
 64+  87CD E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87CE
 66+  87CE              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87CE              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87CE
 69+  87CE EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87CF 2A 19 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87D2 CD BE 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87D5 67           	ld h,a
 73+  87D6 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87D7 CD BE 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  87DA 67           	ld h,a
 76+  87DB A7           	and a
 77+  87DC ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  87DE 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  87DF 3A F8 84     	ld a,(Cuad_objeto)
 80+  87E2 FE 02        	cp 2
 81+  87E4 38 1E        	jr c,3F
 82+  87E6 28 1C        	jr z,3F
 83+  87E8 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  87E9 28 23            jr z,7F
 85+  87EB 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  87ED 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  87EF E1           	pop hl
 88+  87F0
 89+  87F0              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  87F0              ; _para indicar con E="2" en caso necesario.
 91+  87F0
 92+  87F0 E5               push hl
 93+  87F1 C5               push bc
 94+  87F2 CD BE 8C     	call calcula_tercio
 95+  87F5 FE 01        	cp 1
 96+  87F7 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  87F9 CD 29 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  87FC 28 26            jr z,9F
 99+  87FE 38 24            jr c,9F
100+  8800 1E 00        11 ld e,0
101+  8802 18 22            jr 8F
102+  8804 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  8805 28 07        	jr z, 7F
104+  8807 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  8809 1E 00         	ld e,0
106+  880B E1           	pop hl
107+  880C 18 04        	jr 4F
108+  880E 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  8810 18 15            jr 10F
110+  8812
111+  8812              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  8812              ; _para indicar con E="2" en caso necesario.
113+  8812
114+  8812 E5           4 push hl
115+  8813 C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  8814 CD BE 8C     	call calcula_tercio
117+  8817 FE 01        	cp 1
118+  8819 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  881B CD 29 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  881E 28 04            jr z,9F
121+  8820 30 02            jr nc,9F
122+  8822 18 02        	jr 8F
123+  8824 1E 02        9 ld e,2
124+  8826 C1           8 pop bc
125+  8827 E1           10 pop hl
126+  8828 C9           5 ret
127+  8829
128+  8829              ; --------------------
129+  8829              ;
130+  8829              ; 25/08/22
131+  8829
132+  8829 CD BE 8C     Comprueba_centro call calcula_tercio
133+  882C 67               ld h,a
134+  882D 08           	ex af,af
135+  882E FE 02        	cp 2
136+  8830 38 07        	jr c,1F
137+  8832 28 05        	jr z,1F
138+  8834 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  8837 18 03        	jr 2F
140+  8839 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  883C 08           2 ex af,af
142+  883D A7               and a
143+  883E ED 42            sbc hl,bc
144+  8840 C9               ret
145+  8841
146+  8841              ; *********************************************************************************************************************************************************************************************
147+  8841              ;
148+  8841              ;   16/8/22
149+  8841              ;
150+  8841              ;	Comprueba_limite_vertical
151+  8841              ;
152+  8841              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  8841              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  8841              ;
155+  8841
156+  8841 2A E6 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  8844 7D           	ld a,l
158+  8845 E6 1F        	and $1F
159+  8847 57           	ld d,a
160+  8848 3A 1B 85     	ld a,(Limite_vertical)
161+  884B BA           	cp d 											; Límite - Posición.
162+  884C 08           	ex af,af 										; Resultado de CP d en F'.
163+  884D 3A F8 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  8850 CB 47        	bit 0,a
165+  8852 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  8854
167+  8854              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  8854
169+  8854 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  8855 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  8857
172+  8857              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  8857              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  8857
175+  8857 3A EB 84         ld a,(Coordenada_X)
176+  885A 16 0F            ld d,Centro_izquierda
177+  885C A7               and a
178+  885D 92               sub d 											 ; Posición - Centro_izquierda.
179+  885E 28 1E            jr z,3F
180+  8860 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  8862              ;                                                    ; _salimos sin modificar nada.
182+  8862 18 0E            jr 2F
183+  8864 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  8865 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  8867
186+  8867              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  8867              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  8867
189+  8867 3A EB 84         ld a,(Coordenada_X)
190+  886A 16 10            ld d,Centro_derecha
191+  886C A7               and a
192+  886D 92               sub d
193+  886E 28 0E            jr z,3F
194+  8870 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  8872              ;                                                    ; _salimos sin modificar nada.
196+  8872 CB 43        2 bit 0,e
197+  8874 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  8876 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  8877 CD 0B 89         call Modificaccionne
200+  887A C1           	pop bc
201+  887B CD 1B 89         call Inicializacion
202+  887E C9           3 ret 				 								 ; Salimos de la rutina.
203+  887F
204+  887F              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  887F
206+  887F C5           4 push bc
207+  8880 01 E5 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  8883 0A           	ld a,(bc)
209+  8884 3D           	dec a
210+  8885 47           	ld b,a 											 ; Columnas-1 en B.
211+  8886 7D           	ld a,l
212+  8887 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  8888 CB 47        	bit 0,a
214+  888A 28 03        	jr z,5F
215+  888C 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  888D 18 2E        	jr 7F
217+  888F
218+  888F              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  888F
220+  888F 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  8890 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  8891 3A 0F 85     	ld a,(Ctrl_0)
223+  8894 CB 4F        	bit 1,a
224+  8896 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  8898 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  8899
227+  8899              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  8899
229+  8899 1C               inc e
230+  889A 1D               dec e
231+  889B 20 07            jr nz,12F
232+  889D 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  889E 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  889F 22 E6 84     	ld (Posicion_actual),hl
235+  88A2 18 44        13 jr 9F
236+  88A4 CB 43        12 bit 0,e
237+  88A6 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  88A8              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  88A8 C1           	pop bc
240+  88A9 18 D3        	jr 3B
241+  88AB 80           14 add b
242+  88AC 6F               ld l,a
243+  88AD 22 E6 84     	ld (Posicion_actual),hl
244+  88B0 CD 0B 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  88B3 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  88B5 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  88B7 32 0F 85         ld (Ctrl_0),a
248+  88BA F1           	pop af
249+  88BB 18 2B        	jr 9F
250+  88BD
251+  88BD              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  88BD
253+  88BD F5           7 push af
254+  88BE 3A 0F 85     	ld a,(Ctrl_0)
255+  88C1 CB 47        	bit 0,a
256+  88C3 20 1D        	jr nz,8F
257+  88C5 F1           	pop af
258+  88C6
259+  88C6              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88C6
261+  88C6 1C           	inc e
262+  88C7 1D               dec e
263+  88C8 20 07            jr nz,10F
264+  88CA 90           	sub b
265+  88CB 6F               ld l,a
266+  88CC 22 E6 84     	ld (Posicion_actual),hl
267+  88CF 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88D1              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88D1 CB 43        10 bit 0,e
270+  88D3 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88D5              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88D5 C1           	pop bc
273+  88D6 18 A6        	jr 3B
274+  88D8 90           16 sub b
275+  88D9 6F               ld l,a
276+  88DA 22 E6 84     	ld (Posicion_actual),hl
277+  88DD CD 0B 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  88E0 18 06            jr 9F
279+  88E2 E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  88E4 32 0F 85         ld (Ctrl_0),a
281+  88E7 F1           	pop af
282+  88E8 C1           9 pop bc
283+  88E9 1E 00        	ld e,0
284+  88EB CD 1B 89         call Inicializacion
285+  88EE F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  88EF 08           	ex af,af
287+  88F0 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  88F1 18 8B            jr 3B
289+  88F3
290+  88F3              ; --------------------
291+  88F3
292+  88F3 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  88F5 CD 6F 8A     1 call PreviousScan
294+  88F8 10 FB            djnz 1B
295+  88FA 22 E6 84     	ld (Posicion_actual),hl
296+  88FD AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  88FE C9           	ret
298+  88FF
299+  88FF              ; --------------------
300+  88FF
301+  88FF 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  8901 CD 60 8A     1 call NextScan
303+  8904 10 FB            djnz 1B
304+  8906 22 E6 84     	ld (Posicion_actual),hl
305+  8909 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  890A C9           	ret
307+  890B
308+  890B              ; --------------------
309+  890B              ;
310+  890B              ;	22/01/23
311+  890B              ;
312+  890B              ;	E="1". Hemos cambiado de cuadrante.
313+  890B              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  890B              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  890B
316+  890B
317+  890B              Modificaccionne
318+  890B
319+  890B 3A F8 84     	ld a,(Cuad_objeto)
320+  890E FE 02        	cp 2
321+  8910 CC F3 88         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  8913 DC F3 88         call c,Modifica_Pos_actual
323+  8916 C8           	ret z
324+  8917 CD FF 88         call Modifica_Pos_actual2
325+  891A C9               ret
326+  891B
327+  891B              ; *************************************************************************************************************************************************************************************************
328+  891B              ;
329+  891B              ;	13/8/22
330+  891B              ;
331+  891B              ;	Inicializacion
332+  891B              ;
333+  891B              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  891B              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  891B              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  891B              ;
337+  891B              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  891B              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  891B              ;	_ desaparece/aparece.
340+  891B
341+  891B              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  891B              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  891B              ;
344+  891B              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  891B              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  891B              ; 		   [E] ="0"
347+  891B
348+  891B              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  891B
350+  891B CD BE 8C     Inicializacion call calcula_tercio
351+  891E 28 36        	jr z,primit
352+  8920 E6 02        	and 2
353+  8922 20 07        	jr nz,segmit
354+  8924 7D           	ld a,l
355+  8925 FE 7F        	cp $7f
356+  8927 38 2D        	jr c,primit
357+  8929 28 2B        	jr z,primit
358+  892B CD 88 89     segmit call column
359+  892E 38 13        	jr c,tercuad
360+  8930 3E 04        cuarcuad ld a,4
361+  8932 32 F8 84     	ld (Cuad_objeto),a
362+  8935 21 20 48     	ld hl,$4820
363+  8938 22 19 85     	ld (Limite_horizontal),hl
364+  893B 21 1B 85     	ld hl,Limite_vertical
365+  893E 36 0D        	ld (hl),$0d
366+  8940 08           	ex af,af
367+  8941 18 3C        	jr 1F
368+  8943              tercuad
369+  8943              ;	call Fija_punteros
370+  8943 3E 03        	ld a,3
371+  8945 32 F8 84     	ld (Cuad_objeto),a
372+  8948 21 20 48     	ld hl,$4820
373+  894B 22 19 85     	ld (Limite_horizontal),hl
374+  894E 21 1B 85     	ld hl,Limite_vertical
375+  8951 36 12        	ld (hl),$12
376+  8953 08           	ex af,af
377+  8954 18 29        	jr 1F
378+  8956 CD 88 89     primit call column
379+  8959 38 13        	jr c, primcuad
380+  895B              segcuad
381+  895B              ;	call Fija_punteros
382+  895B 3E 02        	ld a,2
383+  895D 32 F8 84     	ld (Cuad_objeto),a
384+  8960 21 C0 4F     	ld hl,$4fc0
385+  8963 22 19 85     	ld (Limite_horizontal),hl
386+  8966 21 1B 85     	ld hl,Limite_vertical
387+  8969 36 0D        	ld (hl),$0d
388+  896B 08           	ex af,af
389+  896C 18 11        	jr 1F
390+  896E              primcuad
391+  896E              ;	call Fija_punteros
392+  896E 3E 01        	ld a,1
393+  8970 32 F8 84     	ld (Cuad_objeto),a
394+  8973 21 C0 4F     	ld hl,$4fc0
395+  8976 22 19 85     	ld (Limite_horizontal),hl
396+  8979 21 1B 85     	ld hl,Limite_vertical
397+  897C 36 12        	ld (hl),$12
398+  897E 08           	ex af,af
399+  897F CD DF 8F     1 call Genera_coordenadas
400+  8982 21 0F 85     	ld hl,Ctrl_0
401+  8985 CB EE        	set 5,(hl)
402+  8987 C9           	ret
403+  8988
404+  8988              ; ------------------------------------------------------------------------------------------------------------------
405+  8988
406+  8988              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  8988              ;
408+  8988              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  8988
410+  8988 7D           column ld a,l
411+  8989 E6 1F        	and $1f
412+  898B FE 10         	cp $10
413+  898D C9            	ret
414+  898E
415+  898E              ; --------------------------------------------------------------------------------------------------------------------
416+  898E              ;
417+  898E              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  898E              ;
419+  898E              ; 14/12/22
420+  898E              ;
421+  898E              ;	Modifica: A y BC.
422+  898E
423+  898E 3A F8 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  8991 E6 01        	and 1
425+  8993 28 17        	jr z,1F
426+  8995
427+  8995              ; Nos encontramos en la parte izquierda de la pantalla
428+  8995
429+  8995 3A EB 84     	ld a,(Coordenada_X)
430+  8998 47           	ld b,a
431+  8999 04           	inc b											; (Coordenada_X)+1 en B.
432+  899A 79           	ld a,c
433+  899B 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  899C 38 08        	jr c,2F
435+  899E 47           	ld b,a
436+  899F 79           	ld a,c
437+  89A0 90           	sub b
438+  89A1 32 18 85     	ld (Columnas),a
439+  89A4 18 1B        	jr 4F
440+  89A6 79           2 ld a,c
441+  89A7 32 18 85     	ld (Columnas),a
442+  89AA 18 15        	jr 4F
443+  89AC
444+  89AC              ; Nos encontramos en la parte derecha de la pantalla.
445+  89AC
446+  89AC 3A EB 84     1 ld a,(Coordenada_X)
447+  89AF 81           	add c
448+  89B0 3D           	dec a
449+  89B1 D6 1F        	sub $1f
450+  89B3 38 08        	jr c,3F
451+  89B5 47           	ld b,a
452+  89B6 79           	ld a,c
453+  89B7 90           	sub b
454+  89B8 32 18 85     	ld (Columnas),a
455+  89BB 18 04        	jr 4F
456+  89BD 79           3 ld a,c
457+  89BE 32 18 85     	ld (Columnas),a
458+  89C1 D9           4 exx
459+  89C2 4F           	ld c,a
460+  89C3 D9           	exx
461+  89C4 C9            ret
462+  89C5
463+  89C5              ; --------------------------------------------------------------------------------------------------------------------
464+  89C5              ;
465+  89C5              ; 7/1/23
466+  89C5              ;
467+  89C5              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89C5              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89C5              ;
470+  89C5              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89C5              ;	DESTRUYE: HL,B Y A.
472+  89C5
473+  89C5 3A F8 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89C8 FE 02        	cp 2
475+  89CA 38 18        	jr c,1F
476+  89CC 28 16        	jr z,1F
477+  89CE E6 01        	and 1
478+  89D0 28 0D        	jr z,3F
479+  89D2
480+  89D2              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89D2
482+  89D2 CD 0E 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89D5
484+  89D5 7D           9 ld a,l
485+  89D6 E6 1F        	and $1f
486+  89D8 28 2A        	jr z,7F
487+  89DA 2B           	dec hl
488+  89DB 10 F8        	djnz 9B
489+  89DD 18 25        	jr 7F
490+  89DF
491+  89DF              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  89DF
493+  89DF 2A E6 84     3 ld hl,(Posicion_actual)
494+  89E2 18 20        	jr 7F
495+  89E4
496+  89E4 28 14        1 jr z,2F
497+  89E6
498+  89E6              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  89E6
500+  89E6 CD 0E 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  89E9 7D           4 ld a,l
502+  89EA E6 1F        	and $1f
503+  89EC 28 03        	jr z,6F
504+  89EE 2B           	dec hl
505+  89EF 10 F8        	djnz 4B
506+  89F1 06 0F        6 ld b,15
507+  89F3 CD 6F 8A     5 call PreviousScan
508+  89F6 10 FB        	djnz 5B
509+  89F8 18 0A        	jr 7F
510+  89FA
511+  89FA              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  89FA
513+  89FA CD 0E 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  89FD 06 0F        	ld b,15
515+  89FF CD 6F 8A     8 call PreviousScan
516+  8A02 10 FB        	djnz 8B
517+  8A04
518+  8A04 E5           7 push hl
519+  8A05 DD E1        	pop ix
520+  8A07
521+  8A07 2A E8 84     	ld hl,(Puntero_objeto)
522+  8A0A E5           	push hl
523+  8A0B FD E1        	pop iy
524+  8A0D
525+  8A0D C9           	ret
526+  8A0E
527+  8A0E              ; --------------------------------------------------------------------------------------------------------------------
528+  8A0E              ;
529+  8A0E              ;	2/1/23
530+  8A0E              ;
531+  8A0E              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8A0E              ;
533+  8A0E              ;	Tras esta rutina tenemos:
534+  8A0E              ;
535+  8A0E              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8A0E              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8A0E              ;
538+  8A0E              ;	DESTRUYE!!!!! HL,B y A.
539+  8A0E
540+  8A0E 2A E6 84     Operandos ld hl,(Posicion_actual)
541+  8A11 3A 18 85     	ld a,(Columnas)
542+  8A14 3D           	dec a
543+  8A15 20 01        	jr nz,1F
544+  8A17 3C           	inc a
545+  8A18 47           1 ld b,a
546+  8A19 C9           	ret
547+  8A1A
548+  8A1A              ; --------------------------------------------------------------------------------------------------------------------
549+  8A1A              ;
550+  8A1A              ;	3/1/23
551+  8A1A              ;
552+  8A1A              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  8A1A              ;
554+  8A1A              ;	Destruye: A,B,HL y DE.
555+  8A1A
556+  8A1A              Define_rutina_de_impresion
557+  8A1A
558+  8A1A 3A E5 84     	ld a,(Columns)
559+  8A1D 47           	ld b,a
560+  8A1E 3A 18 85     	ld a,(Columnas)
561+  8A21 B8           	cp b
562+  8A22 20 0D        	jr nz,2f
563+  8A24
564+  8A24              ;	La entidad se imprime entera.
565+  8A24
566+  8A24 21 BB 8A     	ld hl, Indice_entidades_completas
567+  8A27 E6 01        	and 1
568+  8A29 28 02        	jr z,1F
569+  8A2B
570+  8A2B 23           	inc hl
571+  8A2C 23           	inc hl
572+  8A2D
573+  8A2D CD 90 86     1 call Extrae_address
574+  8A30 C9           	ret		;	ret
575+  8A31
576+  8A31              ;	La entidad no se imprime entera en pantalla.
577+  8A31
578+  8A31 3A F8 84     2 ld a,(Cuad_objeto)
579+  8A34 E6 01        	and 1
580+  8A36 28 17        	jr z,3F
581+  8A38
582+  8A38              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A38
584+  8A38 21 BF 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A3B 3A E5 84     4 ld a,(Columns)
586+  8A3E E6 01        	and 1
587+  8A40 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A42
589+  8A42 23           	inc hl
590+  8A43 23           	inc hl
591+  8A44
592+  8A44 3A 18 85     	ld a,(Columnas)
593+  8A47 E6 01        	and 1
594+  8A49 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A4B
596+  8A4B 23           	inc hl
597+  8A4C 23           	inc hl
598+  8A4D
599+  8A4D 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A4F
601+  8A4F 21 C5 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A52 18 E7        	jr 4B
603+  8A54
604+  8A54              ; --------------------------------------------------------------------------------------------------------------------
605+  8A54              ;
606+  8A54              ;	Prepara_draw
607+  8A54              ;
608+  8A54              ;	Es una rutina de carga.
609+  8A54              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A54              ;
611+  8A54              ;	FUNCIONAMIENTO:
612+  8A54              ;
613+  8A54              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A54              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A54              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A54              ;
617+  8A54              ;	DESTRUYE:
618+  8A54              ;
619+  8A54              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A54
621+  8A54 21 E4 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A57 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A58 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A59 4E           	ld c,(hl)
625+  8A5A 2A E6 84     	ld hl,(Posicion_actual)
626+  8A5D 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A5F C9           	ret
628+  8A60
629+  8A60              ;----------------------------------------------------------------------------------------------------------------
630+  8A60              ;
631+  8A60              ;	5/08/22
632+  8A60              ;
633+  8A60              ;   NextScan.
634+  8A60              ;
635+  8A60              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A60              ;
637+  8A60              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A60              ;
639+  8A60              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A60              ;
641+  8A60              ;       DESTRUIDOS: AF y HL !!!
642+  8A60              ;
643+  8A60              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A60              ;
645+  8A60
646+  8A60 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A61 7C               ld a,h
648+  8A62 E6 07            and 7
649+  8A64 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A65
651+  8A65 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A66 C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A68 6F               ld l,a
654+  8A69 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A6A
656+  8A6A 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A6B D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A6D 67               ld h,a
659+  8A6E C9               ret
660+  8A6F
661+  8A6F              ;----------------------------------------------------------------------------------------------------------------
662+  8A6F              ;
663+  8A6F              ;	5/08/22
664+  8A6F              ;
665+  8A6F              ;   PreviousScan.
666+  8A6F              ;
667+  8A6F              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A6F              ;
669+  8A6F              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A6F              ;
671+  8A6F              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A6F              ;
673+  8A6F              ;       DESTRUIDOS: AF y HL !!!
674+  8A6F              ;
675+  8A6F              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A6F              ;
677+  8A6F
678+  8A6F 7C           PreviousScan ld a,h
679+  8A70 25               dec h               ; Dec H.
680+  8A71 E6 07            and 7
681+  8A73 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A74
683+  8A74 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A75 D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A77 6F               ld l,a
686+  8A78 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8A79
688+  8A79 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8A7A C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8A7C 67               ld h,a
691+  8A7D C9               ret
692+  8A7E
693+  8A7E              ; -----------------------------------------------------------------------------------
694+  8A7E              ;
695+  8A7E              ;	15/1/23
696+  8A7E
697+  8A7E              Extrae_foto_registros
698+  8A7E
699+  8A7E 3A 23 85     	ld a,(Numero_de_malotes)
700+  8A81 A7           	and a
701+  8A82 C8           	ret z
702+  8A83
703+  8A83
704+  8A83 ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
705+  8A87 31 00 70     	ld sp,Album_de_fotos
706+  8A8A
707+  8A8A FD E1        2 pop iy																	; (Puntero_objeto) en IY.
708+  8A8C E1           	pop hl																	; Puntero de impresión de pantalla en HL.
709+  8A8D D1           	pop de																	; Dirección de la rutina de impresión en DE.
710+  8A8E
711+  8A8E ED 73 26 85  	ld (Stack_2),sp
712+  8A92 ED 7B 24 85  	ld sp,(Stack)
713+  8A96
714+  8A96              ; Fabrica la llamada a la correspondiente rutina de impresión.
715+  8A96
716+  8A96 3E CD        	ld a,$cd
717+  8A98 32 A0 8A     	ld (Imprime),a
718+  8A9B EB           	ex de,hl
719+  8A9C 22 A1 8A     	ld (Imprime+1),hl
720+  8A9F EB           	ex de,hl
721+  8AA0
722+  8AA0              ; Ejecuta la llamada:	CALL $xx,xx
723+  8AA0
724+  8AA0 00 00 00     Imprime db 0,0,0
725+  8AA3
726+  8AA3 ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
727+  8AA7
728+  8AA7 3A 23 85     	ld a,(Numero_de_malotes)
729+  8AAA 3D           	dec a
730+  8AAB 28 09        	jr z,1F
731+  8AAD 32 23 85      	ld (Numero_de_malotes),a
732+  8AB0 ED 7B 26 85  	ld sp,(Stack_2)
733+  8AB4 18 D4        	jr 2B
734+  8AB6
735+  8AB6 AF           1 xor a
736+  8AB7 32 26 85     	ld (Stack_2),a
737+  8ABA C9           	ret
738+  8ABB
739+  8ABB
# file closed: Draw_XOR.asm
728   8ABB              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8ABB              ;   índices de Rutinas de impresión.
  2+  8ABB
  3+  8ABB CB 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8ABD F8 8A            defw Pinta_Amadeus_3x2
  5+  8ABF
  6+  8ABF 4E 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AC1 EE 8B            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AC3 A2 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AC5
 10+  8AC5 78 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AC7 7C 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AC9 30 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8ACB
 14+  8ACB
 15+  8ACB              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8ACB              ;
 17+  8ACB              ;   12/12/22
 18+  8ACB              ;
 19+  8ACB              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8ACB              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8ACB              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8ACB              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8ACB              ;
 24+  8ACB              ;   Modifica: DE y HL.
 25+  8ACB
 26+  8ACB ED 73 24 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8ACF FD F9        	ld sp,iy
 28+  8AD1 06 10            ld b,16
 29+  8AD3 D1           1 pop de
 30+  8AD4 7B               ld a,e
 31+  8AD5 AE               xor (hl)
 32+  8AD6 77           	ld (hl),a
 33+  8AD7 23           	inc hl
 34+  8AD8 7A               ld a,d
 35+  8AD9 AE               xor (hl)
 36+  8ADA 77           	ld (hl),a
 37+  8ADB 2B           	dec hl
 38+  8ADC 24           	inc h
 39+  8ADD 7C               ld a,h
 40+  8ADE E6 07            and 7
 41+  8AE0 20 0A            jr nz,2F
 42+  8AE2 7D               ld a,l
 43+  8AE3 C6 20            add a,$20
 44+  8AE5 6F               ld l,a
 45+  8AE6 38 04            jr c,2F
 46+  8AE8 7C               ld a,h
 47+  8AE9 D6 08            sub 8
 48+  8AEB 67               ld h,a
 49+  8AEC 7C           2 ld a,h
 50+  8AED FE 58            cp $58
 51+  8AEF 28 02            jr z,3F
 52+  8AF1 10 E0            djnz 1B
 53+  8AF3 ED 7B 24 85  3 ld sp,(Stack)
 54+  8AF7 C9           	ret
 55+  8AF8
 56+  8AF8 ED 73 24 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8AFC FD F9        	ld sp,iy
 58+  8AFE 06 08            ld b,8
 59+  8B00 D1           1 pop de
 60+  8B01 7B               ld a,e
 61+  8B02 AE               xor (hl)
 62+  8B03 77           	ld (hl),a
 63+  8B04 23           	inc hl
 64+  8B05 7A               ld a,d
 65+  8B06 AE               xor (hl)
 66+  8B07 77           	ld (hl),a
 67+  8B08 23           	inc hl
 68+  8B09 D1           	pop de
 69+  8B0A 7B               ld a,e
 70+  8B0B AE               xor (hl)
 71+  8B0C 77           	ld (hl),a
 72+  8B0D 2B           	dec hl
 73+  8B0E 2B           	dec hl
 74+  8B0F 24           	inc h
 75+  8B10 7C               ld a,h
 76+  8B11 E6 07            and 7
 77+  8B13 20 0A            jr nz,2F
 78+  8B15 7D               ld a,l
 79+  8B16 C6 20            add a,$20
 80+  8B18 6F               ld l,a
 81+  8B19 38 04            jr c,2F
 82+  8B1B 7C               ld a,h
 83+  8B1C D6 08            sub 8
 84+  8B1E 67               ld h,a
 85+  8B1F 7C           2 ld a,h
 86+  8B20 FE 58            cp $58
 87+  8B22 28 25            jr z,4F
 88+  8B24 7A               ld a,d
 89+  8B25 AE               xor (hl)
 90+  8B26 77               ld (hl),a
 91+  8B27 D1           	pop de
 92+  8B28 23           	inc hl
 93+  8B29 7B               ld a,e
 94+  8B2A AE               xor (hl)
 95+  8B2B 77           	ld (hl),a
 96+  8B2C 23           	inc hl
 97+  8B2D 7A               ld a,d
 98+  8B2E AE               xor (hl)
 99+  8B2F 77           	ld (hl),a
100+  8B30 2B           	dec hl
101+  8B31 2B           	dec hl
102+  8B32 24           	inc h
103+  8B33 7C               ld a,h
104+  8B34 E6 07            and 7
105+  8B36 20 0A            jr nz,3F
106+  8B38 7D               ld a,l
107+  8B39 C6 20            add a,$20
108+  8B3B 6F               ld l,a
109+  8B3C 38 04            jr c,3F
110+  8B3E 7C               ld a,h
111+  8B3F D6 08            sub 8
112+  8B41 67               ld h,a
113+  8B42 7C           3 ld a,h
114+  8B43 FE 58            cp $58
115+  8B45 28 02            jr z,4F
116+  8B47 10 B7            djnz 1B
117+  8B49 ED 7B 24 85  4 ld sp,(Stack)
118+  8B4D C9           	ret
119+  8B4E
120+  8B4E              ; ---------------------------------------------------
121+  8B4E
122+  8B4E ED 73 24 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B52 FD F9        	ld sp,iy
124+  8B54 06 10            ld b,16
125+  8B56 D1           1 pop de
126+  8B57 7A           	ld a,d
127+  8B58 AE           	xor (hl)
128+  8B59 77           	ld (hl),a
129+  8B5A 24           	inc h
130+  8B5B 7C               ld a,h
131+  8B5C E6 07            and 7
132+  8B5E 20 0C            jr nz,2F
133+  8B60 7D               ld a,l
134+  8B61 C6 20            add a,$20
135+  8B63 6F               ld l,a
136+  8B64 38 06            jr c,2F
137+  8B66 7C               ld a,h
138+  8B67 D6 08            sub 8
139+  8B69 67               ld h,a
140+  8B6A 18 00            jr 2F
141+  8B6C 7C           2 ld a,h
142+  8B6D FE 58            cp $58
143+  8B6F 28 02            jr z,3F
144+  8B71 10 E3            djnz 1B
145+  8B73 ED 7B 24 85  3 ld sp,(Stack)
146+  8B77 C9           	ret
147+  8B78
148+  8B78 ED 73 24 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8B7C FD F9        	ld sp,iy
150+  8B7E 06 10            ld b,16
151+  8B80 D1           1 pop de
152+  8B81 7B           	ld a,e
153+  8B82 AE           	xor (hl)
154+  8B83 77           	ld (hl),a
155+  8B84 24           	inc h
156+  8B85 7C               ld a,h
157+  8B86 E6 07            and 7
158+  8B88 20 0C            jr nz,2F
159+  8B8A 7D               ld a,l
160+  8B8B C6 20            add a,$20
161+  8B8D 6F               ld l,a
162+  8B8E 38 06            jr c,2F
163+  8B90 7C               ld a,h
164+  8B91 D6 08            sub 8
165+  8B93 67               ld h,a
166+  8B94 18 00            jr 2F
167+  8B96 7C           2 ld a,h
168+  8B97 FE 58            cp $58
169+  8B99 28 02            jr z,3F
170+  8B9B 10 E3            djnz 1B
171+  8B9D ED 7B 24 85  3 ld sp,(Stack)
172+  8BA1 C9           	ret
173+  8BA2
174+  8BA2              ; ---------------------------------------------------
175+  8BA2
176+  8BA2 ED 73 24 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BA6 FD F9        	ld sp,iy
178+  8BA8 06 08            ld b,8
179+  8BAA D1           1 pop de
180+  8BAB 7A           	ld a,d
181+  8BAC AE           	xor (hl)
182+  8BAD 77           	ld (hl),a
183+  8BAE 23           	inc hl
184+  8BAF D1           	pop de
185+  8BB0 7B           	ld a,e
186+  8BB1 AE           	xor (hl)
187+  8BB2 77           	ld (hl),a
188+  8BB3 2B           	dec hl
189+  8BB4 24            	inc h
190+  8BB5 7C               ld a,h
191+  8BB6 E6 07            and 7
192+  8BB8 20 0A            jr nz,2F
193+  8BBA 7D               ld a,l
194+  8BBB C6 20            add a,$20
195+  8BBD 6F               ld l,a
196+  8BBE 38 04            jr c,2F
197+  8BC0 7C               ld a,h
198+  8BC1 D6 08            sub 8
199+  8BC3 67               ld h,a
200+  8BC4 7C           2 ld a,h
201+  8BC5 FE 58            cp $58
202+  8BC7 28 20            jr z,4F
203+  8BC9 D1               pop de
204+  8BCA 7B           	ld a,e
205+  8BCB AE           	xor (hl)
206+  8BCC 77           	ld (hl),a
207+  8BCD 23           	inc hl
208+  8BCE 7A           	ld a,d
209+  8BCF AE           	xor (hl)
210+  8BD0 77           	ld (hl),a
211+  8BD1 2B           	dec hl
212+  8BD2 24           	inc h
213+  8BD3 7C               ld a,h
214+  8BD4 E6 07            and 7
215+  8BD6 20 0A            jr nz,3F
216+  8BD8 7D               ld a,l
217+  8BD9 C6 20            add a,$20
218+  8BDB 6F               ld l,a
219+  8BDC 38 04            jr c,3F
220+  8BDE 7C               ld a,h
221+  8BDF D6 08            sub 8
222+  8BE1 67               ld h,a
223+  8BE2 7C           3 ld a,h
224+  8BE3 FE 58            cp $58
225+  8BE5 28 02            jr z,4F
226+  8BE7 10 C1            djnz 1B
227+  8BE9 ED 7B 24 85  4 ld sp,(Stack)
228+  8BED C9           	ret
229+  8BEE
230+  8BEE ED 73 24 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8BF2 FD F9        	ld sp,iy
232+  8BF4 06 08            ld b,8
233+  8BF6 D1           1 pop de
234+  8BF7 D1           	pop de
235+  8BF8 7B           	ld a,e
236+  8BF9 AE           	xor (hl)
237+  8BFA 77           	ld (hl),a
238+  8BFB 24            	inc h
239+  8BFC 7C               ld a,h
240+  8BFD E6 07            and 7
241+  8BFF 20 0A            jr nz,2F
242+  8C01 7D               ld a,l
243+  8C02 C6 20            add a,$20
244+  8C04 6F               ld l,a
245+  8C05 38 04            jr c,2F
246+  8C07 7C               ld a,h
247+  8C08 D6 08            sub 8
248+  8C0A 67               ld h,a
249+  8C0B 7C           2 ld a,h
250+  8C0C FE 58            cp $58
251+  8C0E 28 1B            jr z,4F
252+  8C10 D1               pop de
253+  8C11 7A           	ld a,d
254+  8C12 AE           	xor (hl)
255+  8C13 77           	ld (hl),a
256+  8C14 24           	inc h
257+  8C15 7C               ld a,h
258+  8C16 E6 07            and 7
259+  8C18 20 0A            jr nz,3F
260+  8C1A 7D               ld a,l
261+  8C1B C6 20            add a,$20
262+  8C1D 6F               ld l,a
263+  8C1E 38 04            jr c,3F
264+  8C20 7C               ld a,h
265+  8C21 D6 08            sub 8
266+  8C23 67               ld h,a
267+  8C24 7C           3 ld a,h
268+  8C25 FE 58            cp $58
269+  8C27 28 02            jr z,4F
270+  8C29 10 CB            djnz 1B
271+  8C2B ED 7B 24 85  4 ld sp,(Stack)
272+  8C2F C9           	ret
273+  8C30
274+  8C30 ED 73 24 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C34 FD F9        	ld sp,iy
276+  8C36 06 08            ld b,8
277+  8C38 D1           1 pop de
278+  8C39 7B           	ld a,e
279+  8C3A AE           	xor (hl)
280+  8C3B 77           	ld (hl),a
281+  8C3C 23           	inc hl
282+  8C3D 7A           	ld a,d
283+  8C3E AE           	xor (hl)
284+  8C3F 77           	ld (hl),a
285+  8C40 2B           	dec hl
286+  8C41 24             	inc h
287+  8C42 7C               ld a,h
288+  8C43 E6 07            and 7
289+  8C45 20 0A            jr nz,2F
290+  8C47 7D               ld a,l
291+  8C48 C6 20            add a,$20
292+  8C4A 6F               ld l,a
293+  8C4B 38 04            jr c,2F
294+  8C4D 7C               ld a,h
295+  8C4E D6 08            sub 8
296+  8C50 67               ld h,a
297+  8C51 7C           2 ld a,h
298+  8C52 FE 58            cp $58
299+  8C54 28 21            jr z,4F
300+  8C56 D1               pop de
301+  8C57 7A           	ld a,d
302+  8C58 AE           	xor (hl)
303+  8C59 77           	ld (hl),a
304+  8C5A 23           	inc hl
305+  8C5B D1               pop de
306+  8C5C 7B           	ld a,e
307+  8C5D AE           	xor (hl)
308+  8C5E 77           	ld (hl),a
309+  8C5F 2B           	dec hl
310+  8C60 24           	inc h
311+  8C61 7C               ld a,h
312+  8C62 E6 07            and 7
313+  8C64 20 0A            jr nz,3F
314+  8C66 7D               ld a,l
315+  8C67 C6 20            add a,$20
316+  8C69 6F               ld l,a
317+  8C6A 38 04            jr c,3F
318+  8C6C 7C               ld a,h
319+  8C6D D6 08            sub 8
320+  8C6F 67               ld h,a
321+  8C70 7C           3 ld a,h
322+  8C71 FE 58            cp $58
323+  8C73 28 02            jr z,4F
324+  8C75 10 C1            djnz 1B
325+  8C77 ED 7B 24 85  4 ld sp,(Stack)
326+  8C7B C9           	ret
327+  8C7C
328+  8C7C ED 73 24 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8C80 FD F9        	ld sp,iy
330+  8C82 06 08            ld b,8
331+  8C84 D1           1 pop de
332+  8C85 7B           	ld a,e
333+  8C86 AE           	xor (hl)
334+  8C87 77           	ld (hl),a
335+  8C88 24            	inc h
336+  8C89 7C               ld a,h
337+  8C8A E6 07            and 7
338+  8C8C 20 0A            jr nz,2F
339+  8C8E 7D               ld a,l
340+  8C8F C6 20            add a,$20
341+  8C91 6F               ld l,a
342+  8C92 38 04            jr c,2F
343+  8C94 7C               ld a,h
344+  8C95 D6 08            sub 8
345+  8C97 67               ld h,a
346+  8C98 7C           2 ld a,h
347+  8C99 FE 58            cp $58
348+  8C9B 28 1C            jr z,4F
349+  8C9D D1               pop de
350+  8C9E 7A           	ld a,d
351+  8C9F AE           	xor (hl)
352+  8CA0 77           	ld (hl),a
353+  8CA1 24           	inc h
354+  8CA2 7C               ld a,h
355+  8CA3 E6 07            and 7
356+  8CA5 20 0A            jr nz,3F
357+  8CA7 7D               ld a,l
358+  8CA8 C6 20            add a,$20
359+  8CAA 6F               ld l,a
360+  8CAB 38 04            jr c,3F
361+  8CAD 7C               ld a,h
362+  8CAE D6 08            sub 8
363+  8CB0 67               ld h,a
364+  8CB1 7C           3 ld a,h
365+  8CB2 FE 58            cp $58
366+  8CB4 28 03            jr z,4F
367+  8CB6 D1               pop de
368+  8CB7 10 CB            djnz 1B
369+  8CB9 ED 7B 24 85  4 ld sp,(Stack)
370+  8CBD C9           	ret
371+  8CBE
372+  8CBE              ; ---------------------------------------------------
373+  8CBE
# file closed: Rutinas_de_impresion_sprites.asm
729   8CBE              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CBE              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CBE              ;
  3+  8CBE              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CBE              ;
  5+  8CBE              ; *****************************************************************************************************************************************************************************************
  6+  8CBE              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CBE
  8+  8CBE 7C           calcula_tercio ld a,h
  9+  8CBF E6 18        	and $18
 10+  8CC1 CB 2F        	sra a
 11+  8CC3 CB 2F        	sra a
 12+  8CC5 CB 2F        	sra a
 13+  8CC7 C9           	ret
 14+  8CC8
# file closed: calcula_tercio.asm
730   8CC8              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CC8              ; -----------------------------------------------------------------------------------------
  2+  8CC8              ;
  3+  8CC8              ;   04/11/22
  4+  8CC8              ;
  5+  8CC8              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CC8              ;
  7+  8CC8              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CC8              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CC8              ;
 10+  8CC8              ;   DESTRUYE: HL y A. !!!!!
 11+  8CC8
 12+  8CC8 CD BE 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CCB 26 58            ld h,$58
 14+  8CCD 84               add h
 15+  8CCE 67               ld h,a
 16+  8CCF C9               ret
# file closed: Calcula_direccion_atributos.asm
731   8CD0              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CD0              ; ********** **********
  2+  8CD0              ;
  3+  8CD0              ;   5/11/22
  4+  8CD0              ;
  5+  8CD0              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CD0              ;
  7+  8CD0              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CD0              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CD0              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CD0              ;
 11+  8CD0              ;   NO DESTROYERSSSS !!!!!
 12+  8CD0
 13+  8CD0 E5           Define_atributos push hl
 14+  8CD1 C5           	push bc
 15+  8CD2 D5           	push de
 16+  8CD3
 17+  8CD3 CD C8 8C     	call Calcula_direccion_atributos
 18+  8CD6
 19+  8CD6 D9               exx
 20+  8CD7 E5               push hl
 21+  8CD8 D9               exx
 22+  8CD9 D1               pop de
 23+  8CDA
 24+  8CDA 42               ld b,d
 25+  8CDB 7B               ld a,e 									; (Attr) en A.
 26+  8CDC
 27+  8CDC C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8CDD E5            	push hl 								; Guardo dirección de attr.
 29+  8CDE
 30+  8CDE              ; -----
 31+  8CDE
 32+  8CDE 77           2 ld (hl),a
 33+  8CDF 0D           	dec c 									; Decremento (Columnas).
 34+  8CE0 28 03        	jr z,1F
 35+  8CE2 23           	inc hl
 36+  8CE3 18 F9        	jr 2B
 37+  8CE5
 38+  8CE5 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8CE6 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8CE7
 41+  8CE7 05           	dec b									; Decremento (Filas).
 42+  8CE8 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8CEA
 44+  8CEA 11 20 00     	ld de,32
 45+  8CED A7           	and a
 46+  8CEE ED 5A        	adc hl,de
 47+  8CF0 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8CF2
 49+  8CF2 D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8CF3 C1           	pop bc
 51+  8CF4 E1           	pop hl
 52+  8CF5
 53+  8CF5 C9           	ret
 54+  8CF6
# file closed: Define_atributos.asm
732   8CF6              	include "Cls.asm"
# file opened: Cls.asm
  1+  8CF6              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8CF6              ;
  3+  8CF6              ;
  4+  8CF6              ;	CLS.
  5+  8CF6              ;
  6+  8CF6              ;	Limpia la pantalla y define sus atributos.
  7+  8CF6              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8CF6              ;
  9+  8CF6              ;	COLORES: 0 ..... NEGRO
 10+  8CF6              ;    		 1 ..... AZUL
 11+  8CF6              ; 			 2 ..... ROJO
 12+  8CF6              ;			 3 ..... MAGENTA
 13+  8CF6              ; 			 4 ..... VERDE
 14+  8CF6              ; 			 5 ..... CIAN
 15+  8CF6              ;			 6 ..... AMARILLO
 16+  8CF6              ; 			 7 ..... BLANCO
 17+  8CF6              ;
 18+  8CF6              ;	INPUT: A contiene los atributos de pantalla.
 19+  8CF6              ;
 20+  8CF6              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8CF6
 22+  8CF6
 23+  8CF6 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8CF9 11 01 40     	LD DE,$4001
 25+  8CFC 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8CFF 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D01 ED B0        	LDIR
 28+  8D03 01 FF 02     	LD BC,767
 29+  8D06 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D07 ED B0        	LDIR
 31+  8D09 C9           	ret
 32+  8D0A
# file closed: Cls.asm
733   8D0A              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D0A              ; ******************************************************************************************************************************************************************************************
  2+  8D0A              ;
  3+  8D0A              ;   22/01/23
  4+  8D0A              ;
  5+  8D0A              ;	Mov_down
  6+  8D0A              ;
  7+  8D0A              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D0A              ;
  9+  8D0A              ;
 10+  8D0A 21 0F 85     Mov_down ld hl,Ctrl_0
 11+  8D0D CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D0F              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D0F              ; 																	; _ en el caso de que no lo haya.
 14+  8D0F 3A FC 84     	ld a,(Vel_down)
 15+  8D12 47           	ld b,a
 16+  8D13 2A E6 84         ld hl,(Posicion_actual)
 17+  8D16 CD BE 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D19 E6 02        	and 2
 19+  8D1B 28 0F        	jr z,1F
 20+  8D1D
 21+  8D1D              ; Nos encontramos en el último tercio de pantalla.
 22+  8D1D              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D1D
 24+  8D1D 7C           	ld a,h
 25+  8D1E FE 57        	cp $57
 26+  8D20 20 0A        	jr nz,1F
 27+  8D22 7D           	ld a,l
 28+  8D23 C6 20        	add $20
 29+  8D25 30 05        	jr nc,1F
 30+  8D27              ; ------------------------------
 31+  8D27 CD C9 8F     	call Reaparece_arriba
 32+  8D2A              ;	call Reinicio
 33+  8D2A              ; ------------------------------
 34+  8D2A 18 08        	jr 3F
 35+  8D2C CD 60 8A     1 call NextScan
 36+  8D2F 22 E6 84     	ld (Posicion_actual),hl
 37+  8D32 10 E2            djnz 2B
 38+  8D34 CD DF 8F     3 call Genera_coordenadas
 39+  8D37 C9           	ret
 40+  8D38
 41+  8D38
 42+  8D38              ; ******************************************************************************************************************************************************************************************
 43+  8D38              ;
 44+  8D38              ;   22/01/23
 45+  8D38              ;
 46+  8D38              ;	Mov_up
 47+  8D38              ;
 48+  8D38              ; 	Mueve el Sprite hacia arriba.
 49+  8D38              ;
 50+  8D38              ;
 51+  8D38 21 0F 85     Mov_up ld hl,Ctrl_0
 52+  8D3B CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D3D              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D3D              ; 																		; _ en el caso de que no lo haya.
 55+  8D3D 3A FB 84     	ld a,(Vel_up)
 56+  8D40 47           	ld b,a
 57+  8D41 2A E6 84     	ld hl,(Posicion_actual)
 58+  8D44 CD BE 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D47 A7           	and a
 60+  8D48 20 10        	jr nz,1F
 61+  8D4A
 62+  8D4A              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D4A              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D4A
 65+  8D4A 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D4B FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D4D 20 0B            jr nz,1F
 68+  8D4F 7D               ld a,l
 69+  8D50 D6 20            sub $20
 70+  8D52 30 06            jr nc,1F
 71+  8D54 25               dec h
 72+  8D55
 73+  8D55              ; -----------------------------
 74+  8D55 CD B9 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D58              ;	call Reinicio
 76+  8D58              ; -----------------------------
 77+  8D58
 78+  8D58 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D5A CD 6F 8A     1 call PreviousScan
 80+  8D5D 22 E6 84     	ld (Posicion_actual),hl
 81+  8D60 10 E2            djnz 3B
 82+  8D62 CD DF 8F     2 call Genera_coordenadas
 83+  8D65 C9           	ret
 84+  8D66
 85+  8D66              ; ******************************************************************************************************************************************************************************************
 86+  8D66              ;
 87+  8D66              ;	19/10/22
 88+  8D66              ;
 89+  8D66              ;	Mov_right.
 90+  8D66              ;
 91+  8D66              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D66              ;
 93+  8D66
 94+  8D66 21 0F 85     Mov_right ld hl,Ctrl_0
 95+  8D69 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D6B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D6B              ; 																	; _ en el caso de que no lo haya.
 98+  8D6B 3A EA 84     	ld a,(CTRL_DESPLZ)
 99+  8D6E A7           	and a
100+  8D6F 28 00        	jr z,9F
101+  8D71
102+  8D71              ;	ld a,(Ctrl_0)
103+  8D71              ;	bit 7,a
104+  8D71              ;	jr nz,9F														; Consultamos el último movimiento horizontal del SPRITE.
105+  8D71              ;	ld hl,CTRL_DESPLZ
106+  8D71              ;	dec (hl)														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
107+  8D71
108+  8D71 3A 0F 85     9 ld a,(Ctrl_0)
109+  8D74 CB 77        	bit 6,a
110+  8D76 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
111+  8D78
112+  8D78 CD 78 8F     	call Stop_Amadeus_right
113+  8D7B C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
114+  8D7C 18 4D        	jr 8F
115+  8D7E
116+  8D7E 3A EB 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
117+  8D81 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
118+  8D83 20 46        	jr nz,8F
119+  8D85
120+  8D85 3A EA 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
121+  8D88 A7           	and a 															; _[3] para continuar con el DESPLZ.
122+  8D89 28 40        	jr z,8F
123+  8D8B
124+  8D8B              ; ---------- ---------- ----------
125+  8D8B              ;
126+  8D8B              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
127+  8D8B
128+  8D8B 3A FA 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
129+  8D8E FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
130+  8D90 28 11        	jr z,1F
131+  8D92 38 06        	jr c,6F
132+  8D94 FE 04        	cp 4
133+  8D96 28 14        	jr z,7F
134+  8D98 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
135+  8D9A
136+  8D9A              ; ---------- ---------- ----------
137+  8D9A              ;
138+  8D9A              ; Perfiles de velocidad
139+  8D9A              ;
140+  8D9A
141+  8D9A 3A EA 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
142+  8D9D FE FE        	cp $fe
143+  8D9F 20 2A        	jr nz,8F
144+  8DA1 18 10        	jr 3F
145+  8DA3 3A EA 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
146+  8DA6 FE FD        	cp $fd
147+  8DA8 20 21        	jr nz,8F
148+  8DAA 18 07        	jr 3F
149+  8DAC 3A EA 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
150+  8DAF FE FB        	cp $fb
151+  8DB1 20 18        	jr nz,8F
152+  8DB3
153+  8DB3              ; ---------- ---------- ----------
154+  8DB3
155+  8DB3 CD A7 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
156+  8DB6              ;	call Reinicio
157+  8DB6
158+  8DB6              ; ---------- ---------- ----------
159+  8DB6              ;
160+  8DB6              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
161+  8DB6
162+  8DB6 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
163+  8DB8 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
164+  8DB9 CD D2 8D     	call DESPLZ_DER
165+  8DBC C1           	pop bc
166+  8DBD 10 F9        	djnz 5B
167+  8DBF 2A E6 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
168+  8DC2 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
169+  8DC3 22 E6 84     	ld (Posicion_actual),hl
170+  8DC6 CD DF 8F     	call Genera_coordenadas
171+  8DC9 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
172+  8DCB
173+  8DCB              ; ---------- ---------- ----------
174+  8DCB
175+  8DCB 2A E6 84     8 ld hl,(Posicion_actual)
176+  8DCE CD D2 8D     	call DESPLZ_DER
177+  8DD1 C9           2 ret
178+  8DD2
179+  8DD2              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
180+  8DD2              ;
181+  8DD2              ;	22/9/22
182+  8DD2              ;
183+  8DD2
184+  8DD2 CD E1 8D     DESPLZ_DER call Desplaza_derecha
185+  8DD5 CD 04 8E         call modifica_parametros_1er_DESPLZ_2
186+  8DD8 CD 2D 8E         call Ciclo_completo
187+  8DDB 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
188+  8DDE CB FE        	set 7,(hl)
189+  8DE0 C9           	ret
190+  8DE1
191+  8DE1              ; ******************************************************************************************************************************************************************************************
192+  8DE1              ;	2/2/23
193+  8DE1              ;
194+  8DE1
195+  8DE1 3A FA 84     Desplaza_derecha ld a,(Vel_right)
196+  8DE4 47           	ld b,a
197+  8DE5 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
198+  8DE8
199+  8DE8 23           1 inc hl
200+  8DE9 23           	inc hl
201+  8DEA 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
202+  8DEC 22 F2 84     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
203+  8DEF CD 90 86     	call Extrae_address
204+  8DF2 22 E8 84     	ld (Puntero_objeto),hl
205+  8DF5
206+  8DF5              ; Modifica (Puntero_DESPLZ_izq).
207+  8DF5
208+  8DF5 3A FA 84     	ld a,(Vel_right)
209+  8DF8 47           	ld b,a
210+  8DF9 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
211+  8DFC 2B           1 dec hl
212+  8DFD 2B           	dec hl
213+  8DFE 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
214+  8E00 22 F4 84     	ld (Puntero_DESPLZ_izq),hl 										; _por el índice del Sprite.
215+  8E03 C9           	ret
216+  8E04
217+  8E04              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
218+  8E04              ;
219+  8E04              ;	24/7/22
220+  8E04              ;
221+  8E04              ;	modifica_parametros_1er_DESPLZ_2
222+  8E04              ;
223+  8E04              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
224+  8E04              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
225+  8E04              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
226+  8E04
227+  8E04 3A EA 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
228+  8E07 A7           	and a
229+  8E08 20 1F        	jr nz,1F
230+  8E0A D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
231+  8E0C 32 EA 84         ld (CTRL_DESPLZ),a
232+  8E0F 21 E5 84     	ld hl,Columns
233+  8E12 34           	inc (hl)
234+  8E13 3A F8 84     	ld a,(Cuad_objeto)
235+  8E16 E6 01        	and 1
236+  8E18 28 0F        	jr z,1F
237+  8E1A 2A E6 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
238+  8E1D 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
239+  8E1E 22 E6 84     	ld (Posicion_actual),hl
240+  8E21 CD DF 8F     	call Genera_coordenadas
241+  8E24 CD 84 8F     	call Inc_CTRL_DESPLZ
242+  8E27 18 03        	jr 2F
243+  8E29 CD 84 8F     1 call Inc_CTRL_DESPLZ
244+  8E2C C9           2 ret
245+  8E2D
246+  8E2D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
247+  8E2D              ;
248+  8E2D              ;	24/7/22
249+  8E2D              ;
250+  8E2D              ;	Ciclo_completo.
251+  8E2D              ;
252+  8E2D              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
253+  8E2D              ;
254+  8E2D              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
255+  8E2D              ; 	Decrementamos (Columns).
256+  8E2D              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
257+  8E2D              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
258+  8E2D
259+  8E2D
260+  8E2D 3A EA 84     Ciclo_completo ld a,(CTRL_DESPLZ)
261+  8E30 FE FF        	cp $ff
262+  8E32 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
263+  8E34 18 30        	jr 3f
264+  8E36 21 E5 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
265+  8E39 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
266+  8E3A AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
267+  8E3B 32 EA 84     	ld (CTRL_DESPLZ),a
268+  8E3E 3A F8 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
269+  8E41 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
270+  8E43 20 0A        	jr nz,2F
271+  8E45 2A E6 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
272+  8E48 23           	inc hl
273+  8E49 22 E6 84     	ld (Posicion_actual),hl
274+  8E4C CD DF 8F     	call Genera_coordenadas
275+  8E4F
276+  8E4F              ; Inicia el puntero de Sprite.
277+  8E4F
278+  8E4F              2
279+  8E4F 2A EE 84     	ld hl,(Indice_Sprite_der)
280+  8E52 22 F2 84     	ld (Puntero_DESPLZ_der),hl
281+  8E55 CD 90 86     	call Extrae_address
282+  8E58 22 E8 84     	ld (Puntero_objeto),hl
283+  8E5B
284+  8E5B 2A F0 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
285+  8E5E CD 90 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
286+  8E61 2B           	dec hl 												; _del índice.
287+  8E62 2B           	dec hl
288+  8E63 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
289+  8E66
290+  8E66 C9           3 ret
291+  8E67
292+  8E67              ; ******************************************************************************************************************************************************************************************
293+  8E67              ;
294+  8E67              ;	21/01/23
295+  8E67              ;
296+  8E67              ;	Mov_left.
297+  8E67              ;
298+  8E67              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
299+  8E67              ;
300+  8E67              Mov_left
301+  8E67
302+  8E67 21 0F 85     	ld hl,Ctrl_0
303+  8E6A CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
304+  8E6C              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
305+  8E6C              ; 																	; _ en el caso de que no lo haya.
306+  8E6C 3A EA 84     	ld a,(CTRL_DESPLZ)
307+  8E6F A7           	and a
308+  8E70 20 0C        	jr nz,10F
309+  8E72
310+  8E72              ;	ld hl,(Indice_Sprite_izq) 										; Inicio a Izquierda.
311+  8E72              ;	ld (Puntero_DESPLZ_izq),hl
312+  8E72
313+  8E72 3A 0F 85     	ld a,(Ctrl_0)
314+  8E75 CB 77        	bit 6,a
315+  8E77 28 55        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
316+  8E79
317+  8E79 CD 7E 8F     	call Stop_Amadeus_left
318+  8E7C 20 50        	jr nz,8F
319+  8E7E
320+  8E7E              ;	ld hl,(Indice_Sprite_izq) 										; Hemos llegado al char.1, volvemos a situar (Puntero_DESPLZ) al principio del índice del sprite, pues la única posibilidad_
321+  8E7E              ;	ld (Puntero_DESPLZ_izq),hl 										; _de movimiento es hacia la derecha.
322+  8E7E
323+  8E7E              10
324+  8E7E              ;	ld a,(Ctrl_0)
325+  8E7E              ;	bit 7,a
326+  8E7E              ;	jr z,11F														; Consultamos el último movimiento horizontal del SPRITE.
327+  8E7E              ;	ld hl,CTRL_DESPLZ
328+  8E7E              ;	inc (hl) 														; El último mov. horizontal ha sido a IZQUIERDA, corregimos (CTRL_DESPLZ).
329+  8E7E
330+  8E7E 3A EB 84     11 ld a,(Coordenada_X)
331+  8E81 A7           	and a
332+  8E82 20 4A        	jr nz,8F
333+  8E84 3A EA 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
334+  8E87 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
335+  8E88 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
336+  8E8A
337+  8E8A              ; ---------- ---------- ----------
338+  8E8A
339+  8E8A 3A F9 84     	ld a,(Vel_left)
340+  8E8D FE 02        	cp 2
341+  8E8F 28 0F        	jr z,1F
342+  8E91 38 04        	jr c,6F
343+  8E93 FE 04        	cp 4
344+  8E95 28 12        	jr z,7F
345+  8E97
346+  8E97              ; ---------- ---------- ----------
347+  8E97
348+  8E97 3A EA 84     6 ld a,(CTRL_DESPLZ)
349+  8E9A FE F9        	cp $f9
350+  8E9C 20 30        	jr nz,8F
351+  8E9E 18 10        	jr 4F
352+  8EA0 3A EA 84     1 ld a,(CTRL_DESPLZ)
353+  8EA3 FE FA        	cp $fa
354+  8EA5 20 27        	jr nz,8F
355+  8EA7 18 07        	jr 4F
356+  8EA9 3A EA 84     7 ld a,(CTRL_DESPLZ)
357+  8EAC FE FC        	cp $fc
358+  8EAE 20 1E        	jr nz,8F
359+  8EB0
360+  8EB0              ; ---------- ---------- ----------
361+  8EB0
362+  8EB0              4
363+  8EB0 CD 95 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
364+  8EB3              ;	call Reinicio
365+  8EB3
366+  8EB3              ; ---------- ---------- ----------
367+  8EB3
368+  8EB3 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
369+  8EB5 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
370+  8EB6
371+  8EB6              ;	ld hl,(Puntero_objeto)
372+  8EB6              ;	ld (Puntero_DESPLZ_izq),hl
373+  8EB6
374+  8EB6 2A F0 84     	ld hl,(Indice_Sprite_izq)
375+  8EB9 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
376+  8EBC
377+  8EBC
378+  8EBC CD D7 8E     	call DESPLZ_IZQ
379+  8EBF C1           	pop bc
380+  8EC0 10 F3        	djnz 5B
381+  8EC2 2A E6 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
382+  8EC5 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
383+  8EC6 22 E6 84     	ld (Posicion_actual),hl
384+  8EC9 CD DF 8F     	call Genera_coordenadas
385+  8ECC 18 08        	jr 2F 															; Salimos para pintar la nueva posición.
386+  8ECE
387+  8ECE              ; ---------- ---------- ----------
388+  8ECE
389+  8ECE 2A E6 84     8 ld hl,(Posicion_actual)
390+  8ED1 CD D7 8E     	call DESPLZ_IZQ
391+  8ED4
392+  8ED4
393+  8ED4 18 FE        	jr $
394+  8ED6
395+  8ED6
396+  8ED6 C9           2 ret
397+  8ED7
398+  8ED7              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
399+  8ED7              ;
400+  8ED7              ;	22/9/22
401+  8ED7
402+  8ED7              DESPLZ_IZQ
403+  8ED7
404+  8ED7 CD E6 8E     	call Desplaza_izquierda
405+  8EDA CD 09 8F         call modifica_parametros_1er_DESPLZ
406+  8EDD CD 2D 8F     	call Ciclo_completo_2
407+  8EE0 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
408+  8EE3 CB BE        	res 7,(hl)
409+  8EE5 C9           	ret
410+  8EE6
411+  8EE6              Desplaza_izquierda
412+  8EE6
413+  8EE6 3A F9 84     	ld a,(Vel_left)
414+  8EE9 47           	ld b,a
415+  8EEA 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
416+  8EED 23           1 inc hl
417+  8EEE 23           	inc hl
418+  8EEF 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
419+  8EF1 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
420+  8EF4 CD 90 86     	call Extrae_address
421+  8EF7 22 E8 84     	ld (Puntero_objeto),hl
422+  8EFA
423+  8EFA              ; Modifica (Puntero_DESPLZ_der).
424+  8EFA
425+  8EFA 3A F9 84     	ld a,(Vel_left)
426+  8EFD 47           	ld b,a
427+  8EFE 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
428+  8F01 2B           1 dec hl
429+  8F02 2B           	dec hl
430+  8F03 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
431+  8F05 22 F2 84     	ld (Puntero_DESPLZ_der),hl
432+  8F08
433+  8F08 C9           	ret
434+  8F09
435+  8F09              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
436+  8F09              ;
437+  8F09              ;	modifica_parametros_1er_DESPLZ
438+  8F09              ;
439+  8F09              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
440+  8F09              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
441+  8F09              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
442+  8F09
443+  8F09 3A EA 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
444+  8F0C A7           	and a
445+  8F0D 20 1A        	jr nz,1F
446+  8F0F 21 E5 84     	ld hl,Columns
447+  8F12 34           	inc (hl)
448+  8F13 3A F8 84     	ld a,(Cuad_objeto)
449+  8F16 E6 01        	and 1
450+  8F18 20 0F        	jr nz,1F
451+  8F1A 2A E6 84     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
452+  8F1D 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
453+  8F1E 22 E6 84     	ld (Posicion_actual),hl
454+  8F21 CD DF 8F     	call Genera_coordenadas
455+  8F24 CD 67 8F     	call Dec_CTRL_DESPLZ
456+  8F27 18 03        	jr 2F
457+  8F29 CD 67 8F     1 call Dec_CTRL_DESPLZ
458+  8F2C C9           2 ret
459+  8F2D
460+  8F2D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
461+  8F2D              ;
462+  8F2D
463+  8F2D 3A EA 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
464+  8F30 FE F8        	cp $f8
465+  8F32 28 02        	jr z,1F 												        ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
466+  8F34 18 30        	jr 3f
467+  8F36 21 E5 84     1 ld hl,Columns
468+  8F39 35           	dec (hl)
469+  8F3A AF           	xor a
470+  8F3B 32 EA 84     	ld (CTRL_DESPLZ),a
471+  8F3E 3A F8 84     	ld a,(Cuad_objeto)
472+  8F41 E6 01        	and 1
473+  8F43 28 0A        	jr z,2F
474+  8F45 2A E6 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
475+  8F48 2B           	dec hl
476+  8F49 22 E6 84     	ld (Posicion_actual),hl
477+  8F4C CD DF 8F     	call Genera_coordenadas
478+  8F4F
479+  8F4F              ; Inicia el puntero de Sprite.
480+  8F4F
481+  8F4F              2
482+  8F4F
483+  8F4F              ;	call Inicia_Puntero_objeto
484+  8F4F
485+  8F4F 2A F0 84     	ld hl,(Indice_Sprite_izq)
486+  8F52 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
487+  8F55 CD 90 86     	call Extrae_address
488+  8F58 22 E8 84     	ld (Puntero_objeto),hl
489+  8F5B
490+  8F5B 2A EE 84     	ld hl,(Indice_Sprite_der)										; Cuando "Iniciamos el Sprite a Izquierdas",_
491+  8F5E CD 90 86     	call Extrae_address												; _situamos (Puntero_DESPLZ_der) en el último defw_
492+  8F61 2B           	dec hl 															; _del índice.
493+  8F62 2B           	dec hl
494+  8F63 22 F2 84     	ld (Puntero_DESPLZ_der),hl
495+  8F66
496+  8F66 C9           3 ret
497+  8F67
498+  8F67              ; ---------- ---------- ---------- ---------- ---------- ----------
499+  8F67              ;
500+  8F67              ;	Dec_CTRL_DESPLZ
501+  8F67              ;
502+  8F67              ;	Subrutina de [modifica_punteros].
503+  8F67              ;
504+  8F67              ;	Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_left).
505+  8F67
506+  8F67              Dec_CTRL_DESPLZ
507+  8F67
508+  8F67 21 EA 84     	ld hl,CTRL_DESPLZ
509+  8F6A 3A F9 84     	ld a,(Vel_left)
510+  8F6D A7           	and a
511+  8F6E 28 06        	jr z,1F
512+  8F70 47           	ld b,a
513+  8F71 35           3 dec (hl)
514+  8F72 10 FD        	djnz 3B
515+  8F74 18 01        	jr 2F
516+  8F76 35           1 dec (hl)
517+  8F77 C9           2 ret
518+  8F78
519+  8F78              ; ---------- ---------- ---------- ---------- ---------- ----------
520+  8F78              ;
521+  8F78              ;	19/10/22
522+  8F78              ;
523+  8F78              ;	(cp 29) para un Amadeus de 3 Columns.
524+  8F78              ;	(cp 30)   ""  ""    ""     2 Columns.
525+  8F78
526+  8F78 3A EB 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
527+  8F7B FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
528+  8F7D C9           	ret
529+  8F7E
530+  8F7E              ; ---------- ---------- ---------- ---------- ---------- ----------
531+  8F7E              ;
532+  8F7E              ;	19/10/22
533+  8F7E              ;
534+  8F7E              ;	(cp 2) para un Amadeus de 3 Columns.
535+  8F7E              ;	(cp 1)   ""  ""    ""     2 Columns.
536+  8F7E
537+  8F7E 3A EB 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
538+  8F81 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
539+  8F83 C9           	ret
540+  8F84
541+  8F84              ; ---------- ---------- ---------- ---------- ---------- ----------
542+  8F84              ;
543+  8F84              ;	24/7/22
544+  8F84              ;
545+  8F84              ;	Inc_CTRL_DESPLZ
546+  8F84              ;
547+  8F84              ;	Subrutina de [modifica_punteros].
548+  8F84              ;
549+  8F84              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
550+  8F84
551+  8F84 21 EA 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
552+  8F87 3A FA 84     	ld a,(Vel_right)
553+  8F8A A7           	and a
554+  8F8B 28 06        	jr z,1F
555+  8F8D 47           	ld b,a
556+  8F8E 34           3 inc (hl)
557+  8F8F 10 FD        	djnz 3B
558+  8F91 18 01        	jr 2F
559+  8F93 34           1 inc (hl)
560+  8F94 C9           2 ret
561+  8F95
562+  8F95              ; ---------- ---------- ---------- ---------- ---------- ----------
563+  8F95
564+  8F95 2A E6 84     Reaparece_derecha ld hl,(Posicion_actual)
565+  8F98 01 1F 00     	ld bc,31
566+  8F9B A7           	and a
567+  8F9C ED 4A        	adc hl,bc
568+  8F9E 22 E6 84     	ld (Posicion_actual),hl
569+  8FA1 21 0F 85     	ld hl,Ctrl_0														; $xxx1
570+  8FA4 CB C6        	set 0,(hl)
571+  8FA6 C9           	ret
572+  8FA7
573+  8FA7              ; ---------- ---------- ---------- ---------- ---------- ----------
574+  8FA7
575+  8FA7 2A E6 84     Reaparece_izquierda ld hl,(Posicion_actual)
576+  8FAA 01 1F 00     	ld bc,31
577+  8FAD A7           	and a
578+  8FAE ED 42        	sbc hl,bc
579+  8FB0 22 E6 84     	ld (Posicion_actual),hl 											; $xx1x
580+  8FB3 21 0F 85     	ld hl,Ctrl_0
581+  8FB6 CB CE        	set 1,(hl)
582+  8FB8 C9           	ret
583+  8FB9
584+  8FB9              ; ---------- ---------- ---------- ---------- ---------- ----------
585+  8FB9
586+  8FB9 24           Reaparece_abajo inc h
587+  8FBA 01 E0 17     	ld bc,$17e0
588+  8FBD A7           	and a
589+  8FBE ED 4A        	adc hl,bc
590+  8FC0 22 E6 84     	ld (Posicion_actual),hl
591+  8FC3 21 0F 85     	ld hl,Ctrl_0
592+  8FC6 CB D6        	set 2,(hl)
593+  8FC8 C9           	ret
594+  8FC9
595+  8FC9              ; ---------- ---------- ---------- ---------- ---------- ----------
596+  8FC9
597+  8FC9 01 E0 17     Reaparece_arriba ld bc,$17e0
598+  8FCC A7           	and a
599+  8FCD ED 42        	sbc hl,bc
600+  8FCF 22 E6 84     	ld (Posicion_actual),hl
601+  8FD2 21 0F 85     	ld hl,Ctrl_0
602+  8FD5 CB DE        	set 3,(hl)
603+  8FD7 C9           	ret
604+  8FD8
605+  8FD8              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
606+  8FD8
607+  8FD8 2A F6 84     Reinicio ld hl,(Posicion_inicio)
608+  8FDB 22 E6 84     	ld (Posicion_actual),hl
609+  8FDE C9           	ret
# file closed: Direcciones.asm
734   8FDF              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FDF              ;	12/12/22
  2+  8FDF              ;
  3+  8FDF              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FDF              ;	Fila superior "0", Columna izquierda "0".
  5+  8FDF              ;
  6+  8FDF              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FDF              ;
  8+  8FDF              ;	Modifica: A
  9+  8FDF
 10+  8FDF C5           Genera_coordenadas push bc
 11+  8FE0 E5           	push hl
 12+  8FE1 2A E6 84     	ld hl,(Posicion_actual)
 13+  8FE4 7D           	ld a,l
 14+  8FE5 E6 1F        	and $1f
 15+  8FE7 32 EB 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FEA CD BE 8C     	call calcula_tercio
 17+  8FED 47           	ld b,a
 18+  8FEE 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  8FEF 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  8FF1 7D           	ld a,l
 21+  8FF2 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  8FF4 28 05        	jr z,2F
 23+  8FF6 0C           1 inc c
 24+  8FF7 D6 20        	sub 32
 25+  8FF9 20 FB        	jr nz,1B
 26+  8FFB 0C           2 inc c
 27+  8FFC 04           	inc b
 28+  8FFD 05           	dec b
 29+  8FFE 28 04        	jr z,3F
 30+  9000 3E E0        	ld a,$e0
 31+  9002 10 F2        	djnz 1B
 32+  9004 79           3 ld a,c
 33+  9005 3D           	dec a
 34+  9006 32 EC 84     	ld (Coordenada_y),a
 35+  9009 E1           	pop hl
 36+  900A C1           	pop bc
 37+  900B C9           	ret
# file closed: Genera_coordenadas.asm
735   900C              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  900C
  2+  900C
  3+  900C              ;   11/8/22
  4+  900C              ;
  5+  900C              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  900C              ;
  7+  900C              ;   Mov_obj.asm
  8+  900C              ;
  9+  900C              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  900C              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  900C              ;
 12+  900C              ;   Codificación:
 13+  900C              ;
 14+  900C              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  900C
 16+  900C
 17+  900C
 18+  900C 02 10 00     Izquierda db 2,%00010000,0
 19+  900F 02 20 00     Derecha db 2,%00100000,0
 20+  9012 02 80 00     Abajo db 2,%10000000,0
 21+  9015 02 40 00     Arriba db 2,%01000000,0
 22+  9018
 23+  9018 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 24+  901C 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 25+  9020 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 26+  9024 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 27+  9028 2B 44 60 42  Onda_senoidal db 43,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 27+  902C 60 42 60 40
 27+  9030 63
 28+  9031 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 28+  9035 22 A3 80 A0
 29+  9039 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 29+  903D 84 A0 83 A0
 30+  9041 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 30+  9045 80 A3 22 A0
 31+  9049 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 31+  904D 40 60 42 60
 32+  9051 42 60 44         db %01000010,%01100000,%01000100
 33+  9054 0B 2F 2F 2F  Derecha_e_izquierda db 11,%00101111,%00101111,%00101111,%00101111,%00101111,%00011111,%00011111,%00011111,%00011111,%000111110,0
 33+  9058 2F 2F 1F 1F
 33+  905C 1F 1F 3E 00
 34+  9060
 35+  9060
 36+  9060 54 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 37+  9062 0C 90        Indice_mov_Izquierda defw Izquierda
 38+  9064 0F 90        Indice_mov_Derecha defw Derecha
 39+  9066 12 90        Indice_mov_Abajo defw Abajo
 40+  9068 15 90        Indice_mov_Arriba defw Arriba
 41+  906A 1C 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 42+  906C 20 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 43+  906E 18 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 44+  9070 24 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 45+  9072 28 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 46+  9074
 47+  9074 3A 15 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 48+  9077 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 49+  9078 28 02            jr z,1F
 50+  907A 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 51+  907C 3A 16 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 52+  907F C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 53+  9081 32 16 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 54+  9084              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 55+  9084 2A 13 85         ld hl,(Puntero_mov)
 56+  9087 7E               ld a,(hl)
 57+  9088 32 15 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 58+  908B 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 59+  908C 22 13 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 60+  908F
 61+  908F 3A 17 85     Decoder ld a,(Repetimos_db)
 62+  9092 A7               and a
 63+  9093 20 0C            jr nz,12F
 64+  9095 2A 13 85         ld hl,(Puntero_mov)
 65+  9098 7E               ld a,(hl)
 66+  9099 A7               and a
 67+  909A 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 68+  909C E6 0F             and $0f
 69+  909E 32 17 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 70+  90A1              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 71+  90A1 2A 13 85     12 ld hl,(Puntero_mov)
 72+  90A4 CB 7E            bit 7,(hl)
 73+  90A6 28 03            jr z,2F
 74+  90A8 CD 0A 8D         call Mov_down
 75+  90AB 2A 13 85     2 ld hl, (Puntero_mov)
 76+  90AE CB 76            bit 6,(hl)
 77+  90B0 28 03            jr z,3F
 78+  90B2 CD 38 8D         call Mov_up
 79+  90B5 2A 13 85     3 ld hl, (Puntero_mov)
 80+  90B8 CB 6E            bit 5,(hl)
 81+  90BA 28 03            jr z,4F
 82+  90BC CD 66 8D         call Mov_right
 83+  90BF 2A 13 85     4 ld hl, (Puntero_mov)
 84+  90C2 CB 66            bit 4,(hl)
 85+  90C4 28 03            jr z,5F
 86+  90C6 CD 67 8E         call Mov_left
 87+  90C9
 88+  90C9              ; ---------- --------- --------- ---------- ----------
 89+  90C9
 90+  90C9 3A 17 85     5 ld a,(Repetimos_db)
 91+  90CC A7               and a
 92+  90CD 28 07            jr z,6F
 93+  90CF 3D               dec a
 94+  90D0 32 17 85         ld (Repetimos_db),a
 95+  90D3 28 01            jr z,6f
 96+  90D5 C9           11 ret
 97+  90D6 21 15 85     6 ld hl,Contador_db_mov
 98+  90D9 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
 99+  90DA 2A 13 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
100+  90DD 23               inc hl
101+  90DE 22 13 85         ld (Puntero_mov),hl
102+  90E1 18 F2            jr 11B
103+  90E3 2A 11 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
104+  90E6 3A 16 85         ld a,(Incrementa_puntero)
105+  90E9 47               ld b,a
106+  90EA 23           8 inc hl
107+  90EB 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
108+  90ED 5E               ld e,(hl)
109+  90EE 23               inc hl
110+  90EF 56               ld d,(hl)
111+  90F0 EB               ex de,hl
112+  90F1 22 13 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
113+  90F4 18 DF            jr 11B
114+  90F6
115+  90F6              ; ---------- --------- --------- ---------- ----------
116+  90F6              ;
117+  90F6              ;   11/8/22
118+  90F6              ;
119+  90F6              ;   Prepara_Puntero_mov
120+  90F6
121+  90F6 E5           Prepara_Puntero_mov push hl
122+  90F7 D5               push de
123+  90F8 2A 11 85         ld hl,(Puntero_indice_mov)
124+  90FB 5E               ld e,(hl)
125+  90FC 23               inc hl
126+  90FD 56               ld d,(hl)
127+  90FE EB               ex de,hl
128+  90FF 22 13 85         ld (Puntero_mov),hl
129+  9102 D1               pop de
130+  9103 E1               pop hl
131+  9104 C9               ret
132+  9105
133+  9105              ; ---------- --------- --------- ---------- ----------
134+  9105              ;
135+  9105              ;   11/8/22
136+  9105              ;
137+  9105              ;   Reinicia_el_movimiento
138+  9105
139+  9105 CD F6 90     Reinicia_el_movimiento call Prepara_Puntero_mov
140+  9108 AF               xor a
141+  9109 32 15 85         ld (Contador_db_mov),a
142+  910C 32 16 85         ld (Incrementa_puntero),a
143+  910F C3 74 90         jp Movimiento
144+  9112
145+  9112              ; ---------- --------- --------- ---------- ----------
146+  9112
147+  9112
148+  9112
149+  9112
150+  9112
151+  9112
152+  9112
153+  9112
154+  9112
155+  9112
156+  9112
157+  9112
158+  9112
159+  9112
160+  9112
161+  9112
162+  9112
163+  9112
# file closed: Patrones_de_mov.asm
736   9112              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9112              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9112              ;
  3+  9112              ;	3/1/23
  4+  9112              ;
  5+  9112              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9112
  7+  9112              ;	ADC HL,SP	LD (addr),SP
  8+  9112              ;	ADD HL,SP	LD SP,(addr)
  9+  9112              ;	ADD IX,SP	LD SP,nn
 10+  9112              ; 	ADD IY,SP	LD SP,HL
 11+  9112              ;				LD SP,IX
 12+  9112              ;	DEC SP		LD SP,IY
 13+  9112
 14+  9112              ;	EX (SP),HL
 15+  9112              ;	EX (SP),IX
 16+  9112              ;	EX (SP),IY
 17+  9112
 18+  9112              ;	INC SP
 19+  9112
 20+  9112
 21+  9112                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 24 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 28 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 28 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 24 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
737   7FC0
738   7FC0              	SAVESNA "Pruebas.sna", START
739   7FC0
740   7FC0
741   7FC0
# file closed: Banco_de_pruebas.asm
