# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 24 86     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	17/02/23
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Disparo.
 10+  8000              ;
 11+  8000              ; Constan de 2Columns y 2scanlines.
 12+  8000
 13+  8000 08 80        Indice_disparo defw Disparo_0
 14+  8002 0C 80        	defw Disparo_f9
 15+  8004 10 80        	defw Disparo_fb
 16+  8006 18 80        	defw Disparo_fd
 17+  8008
 18+  8008              ; Disparo (CTRL_DESPLZ)="0".
 19+  8008 01 80 01 80  Disparo_0 DEFB $01,$80,$01,$80
 20+  800C              ; Disparo (CTRL_DESPLZ)="f9"
 21+  800C 60 00 60 00  Disparo_f9 DEFB $60,$00,$60,$00
 22+  8010              ; Disparo (CTRL_DESPLZ)="fb"
 23+  8010 18 00 00 00  Disparo_fb DEFW $18,$00,$18,$00
 23+  8014 18 00 00 00
 24+  8018              ; Disparo (CTRL_DESPLZ)="fd"
 25+  8018 06 00 00 00  Disparo_fd DEFW $06,$00,$06,$00
 25+  801C 06 00 00 00
 26+  8020
 27+  8020              ; ----------------------------------------------------------------------------------------
 28+  8020
 29+  8020              ; Badsat_izq. 2x2.
 30+  8020
 31+  8020 30 80        Indice_Badsat_izq defw Badsat_izquierda
 32+  8022 70 81        	defw Badsat_izq_fe
 33+  8024 40 81        	defw Badsat_izq_fd
 34+  8026 10 81        	defw Badsat_izq_fc
 35+  8028 E0 80        	defw Badsat_izq_fb
 36+  802A B0 80        	defw Badsat_izq_fa
 37+  802C 80 80        	defw Badsat_izq_f9
 38+  802E 50 80        	defw Badsat_izq_f8
 39+  8030
 40+  8030 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 40+  8034 02 2A 02 55
 41+  8038 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 41+  803C 7F E8 03 60
 42+  8040 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 42+  8044 2B E8 54 40
 43+  8048 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 43+  804C 28 00 10 00
 44+  8050
 45+  8050 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 45+  8054 0A 00 01 15
 46+  8058 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 46+  805C 01 55 00 01
 47+  8060 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 47+  8064 00 01 B0 00
 48+  8068 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 48+  806C FC 00 15 F4
 49+  8070 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 49+  8074 55 30 00 2A
 50+  8078 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 50+  807C 00 08 00 00
 51+  8080
 52+  8080 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 52+  8084 85 00 00 8A
 53+  8088 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 53+  808C 00 AA 80 00
 54+  8090 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 54+  8094 00 00 D8 00
 55+  8098 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 55+  809C FE 00 0A FA
 56+  80A0 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 56+  80A4 2A 98 00 15
 57+  80A8 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 57+  80AC 00 04 00 00
 58+  80B0
 59+  80B0 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 59+  80B4 42 80 00 45
 60+  80B8 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 60+  80BC 00 55 40 00
 61+  80C0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 61+  80C4 00 00 6C 00
 62+  80C8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 62+  80CC FF 00 05 7D
 63+  80D0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 63+  80D4 15 4C 00 0A
 64+  80D8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 64+  80DC 00 02 00 00
 65+  80E0
 66+  80E0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 66+  80E4 21 40 00 22
 67+  80E8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 67+  80EC 00 2A A0 00
 68+  80F0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 68+  80F4 80 00 36 00
 69+  80F8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 69+  80FC 7F 80 02 BE
 70+  8100 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 70+  8104 0A A6 00 05
 71+  8108 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 71+  810C 00 01 00 00
 72+  8110
 73+  8110 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 73+  8114 10 A0 00 11
 74+  8118 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 74+  811C 00 15 50 00
 75+  8120 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 75+  8124 40 00 1B 00
 76+  8128 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 76+  812C BF C0 01 5F
 77+  8130 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 77+  8134 05 53 00 02
 78+  8138 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 78+  813C 00 00 80 00
 79+  8140
 80+  8140 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 80+  8144 08 50 00 08
 81+  8148 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 81+  814C 00 0A A8 00
 82+  8150 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 82+  8154 A0 00 0D 80
 83+  8158 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 83+  815C 5F F8 00 AF
 84+  8160 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 84+  8164 02 A9 00 01
 85+  8168 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 85+  816C 00 00 40 00
 86+  8170
 87+  8170 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 87+  8174 04 28 00 04
 88+  8178 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 88+  817C 00 05 54 00
 89+  8180 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 89+  8184 D0 00 06 C0
 90+  8188 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 90+  818C 2F FC 00 57
 91+  8190 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 91+  8194 01 54 80 00
 92+  8198 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 92+  819C 00 00 20 00
 93+  81A0
 94+  81A0
 95+  81A0 B0 81        Indice_Badsat_der defw Badsat_derecha
 96+  81A2 D0 81        	defw Badsat_der_f8
 97+  81A4 00 82        	defw Badsat_der_f9
 98+  81A6 30 82        	defw Badsat_der_fa
 99+  81A8 60 82        	defw Badsat_der_fb
100+  81AA 90 82        	defw Badsat_der_fc
101+  81AC C0 82        	defw Badsat_der_fd
102+  81AE F0 82        	defw Badsat_der_fe
103+  81B0
104+  81B0 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
104+  81B4 54 40 AA 40
105+  81B8 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
105+  81BC 17 FE 06 C0
106+  81C0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
106+  81C4 17 D4 02 2A
107+  81C8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
107+  81CC 00 14 00 08
108+  81D0
109+  81D0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
109+  81D4 20 00 2A 20
110+  81D8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
110+  81DC 2A A0 00 15
111+  81E0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
111+  81E4 00 03 60 00
112+  81E8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
112+  81EC F4 00 0B EA
113+  81F0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
113+  81F4 03 2A 80 00
114+  81F8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
114+  81FC 00 00 04 00
115+  8200
116+  8200 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
116+  8204 10 00 15 10
117+  8208 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
117+  820C 15 50 00 0A
118+  8210 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
118+  8214 80 01 B0 00
119+  8218 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
119+  821C FA 00 05 F5
120+  8220 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
120+  8224 01 95 40 00
121+  8228 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
121+  822C 00 00 02 00
122+  8230
123+  8230 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
123+  8234 08 00 0A 88
124+  8238 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
124+  823C 0A A8 00 05
125+  8240 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
125+  8244 C0 00 D8 00
126+  8248 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
126+  824C FD 00 02 FA
127+  8250 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
127+  8254 00 CA A0 00
128+  8258 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
128+  825C 80 00 01 00
129+  8260
130+  8260 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
130+  8264 84 00 05 44
131+  8268 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
131+  826C 05 54 00 02
132+  8270 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
132+  8274 E0 00 6C 00
133+  8278 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
133+  827C FE 80 01 7D
134+  8280 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
134+  8284 00 65 50 00
135+  8288 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
135+  828C 40 00 00 80
136+  8290
137+  8290 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
137+  8294 42 00 02 A2
138+  8298 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
138+  829C 02 AA 00 01
139+  82A0 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
139+  82A4 F0 00 36 00
140+  82A8 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
140+  82AC FF 40 00 BE
141+  82B0 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
141+  82B4 00 32 A8 00
142+  82B8 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
142+  82BC A0 00 00 40
143+  82C0
144+  82C0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
144+  82C4 A1 00 01 51
145+  82C8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
145+  82CC 01 55 00 00
146+  82D0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
146+  82D4 F8 00 1B 00
147+  82D8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
147+  82DC FF A0 00 1F
148+  82E0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
148+  82E4 00 09 54 00
149+  82E8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
149+  82EC 50 00 00 20
150+  82F0
151+  82F0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
151+  82F4 50 80 00 A8
152+  82F8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
152+  82FC 00 AA 80 00
153+  8300 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
153+  8304 FC 00 0D 80
154+  8308 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
154+  830C FF D0 00 0F
155+  8310 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
155+  8314 00 04 AA 00
156+  8318 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
156+  831C 28 00 00 10
157+  8320
158+  8320              ; ----------------------------------------------------------------------------------------
159+  8320
160+  8320              ; Amadeus. 2x2.
161+  8320
162+  8320 40 83        Indice_Amadeus_der defw Amadeus
163+  8322 00 00        	defw 0
164+  8324 60 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
165+  8326 00 00        	defw 0
166+  8328 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
167+  832A 00 00        	defw 0
168+  832C C0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
169+  832E 00 00        	defw 0	 								; (Fín de índice).
170+  8330
171+  8330 40 83        Indice_Amadeus_izq defw Amadeus
172+  8332 00 00        	defw 0
173+  8334 C0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
174+  8336 00 00        	defw 0
175+  8338 90 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
176+  833A 00 00        	defw 0
177+  833C 60 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
178+  833E 00 00        	defw 0	 								; (Fín de índice).
179+  8340
180+  8340 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
180+  8344 26 64 24 24
181+  8348 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
181+  834C 6F F6 67 E6
182+  8350 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
182+  8354 F7 EF FF FF
183+  8358 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
183+  835C 8B D1 71 8E
184+  8360
185+  8360 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
185+  8364 F1 00 09 99
186+  8368 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
186+  836C 0B 0D 00 1B
187+  8370 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
187+  8374 80 19 F9 80
188+  8378 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
188+  837C F3 C0 3D FB
189+  8380 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
189+  8384 3E F7 C0 3E
190+  8388 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
190+  838C 40 1C 63 80
191+  8390
192+  8390 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
192+  8394 3C 40 02 66
193+  8398 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
193+  839C 02 C3 40 06
194+  83A0 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
194+  83A4 60 06 7E 60
195+  83A8 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
195+  83AC 3C F0 0F 7E
196+  83B0 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
196+  83B4 0F BD F0 0F
197+  83B8 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
197+  83BC 10 07 18 E0
198+  83C0
199+  83C0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
199+  83C4 8F 10 00 99
200+  83C8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
200+  83CC 00 B0 D0 01
201+  83D0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
201+  83D4 D8 01 9F 98
202+  83D8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
202+  83DC CF 3C 03 DF
203+  83E0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
203+  83E4 03 EF 7C 03
204+  83E8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
204+  83EC 44 01 C6 38
205+  83F0
206+  83F0              ; ----------------------------------------------------------------------------------------
# file closed: Sprites_e_indices.asm
 20   83F0              	include "Entidades_y_disparos.asm"
# file opened: Entidades_y_disparos.asm
  1+  83F0
  2+  83F0              ; Base de datos de entidades e Índice.
  3+  83F0              ;
  4+  83F0              ; 17/02/23
  5+  83F0
  6+  83F0 04 84        Indice_de_disparos defw Disparo_1
  7+  83F2 0C 84        	defw Disparo_2
  8+  83F4 14 84        	defw Disparo_3
  9+  83F6 1C 84        	defw Disparo_4
 10+  83F8 24 84        	defw Disparo_5
 11+  83FA 2C 84        	defw Disparo_6
 12+  83FC 34 84        	defw Disparo_7
 13+  83FE 3C 84        	defw Disparo_8
 14+  8400 44 84        	defw Disparo_9
 15+  8402 4C 84        	defw Disparo_10
 16+  8404
 17+  8404 00 00        Disparo_1 db 0,0									; Impacto / Dirección.
 18+  8406 00 00        	defw 0											; Puntero de_impresión.
 19+  8408 00 00        	defw 0											; Puntero objeto.
 20+  840A 00 00        	defw 0											; Rutina de impresión.
 21+  840C
 22+  840C 00 00        Disparo_2 db 0,0									; Impacto / Dirección.
 23+  840E 00 00        	defw 0											; Puntero de_impresión.
 24+  8410 00 00        	defw 0											; Puntero objeto.
 25+  8412 00 00        	defw 0											; Rutina de impresión.
 26+  8414
 27+  8414 00 00        Disparo_3 db 0,0									; Impacto / Dirección.
 28+  8416 00 00        	defw 0											; Puntero de_impresión.
 29+  8418 00 00        	defw 0											; Puntero objeto.
 30+  841A 00 00        	defw 0											; Rutina de impresión.
 31+  841C
 32+  841C 00 00        Disparo_4 db 0,0									; Impacto / Dirección.
 33+  841E 00 00        	defw 0											; Puntero de_impresión.
 34+  8420 00 00        	defw 0											; Puntero objeto.
 35+  8422 00 00        	defw 0											; Rutina de impresión.
 36+  8424
 37+  8424 00 00        Disparo_5 db 0,0									; Impacto / Dirección.
 38+  8426 00 00        	defw 0											; Puntero de_impresión.
 39+  8428 00 00        	defw 0											; Puntero objeto.
 40+  842A 00 00        	defw 0											; Rutina de impresión.
 41+  842C
 42+  842C 00 00        Disparo_6 db 0,0									; Impacto / Dirección.
 43+  842E 00 00        	defw 0											; Puntero de_impresión.
 44+  8430 00 00        	defw 0											; Puntero objeto.
 45+  8432 00 00        	defw 0											; Rutina de impresión.
 46+  8434
 47+  8434 00 00        Disparo_7 db 0,0									; Impacto / Dirección.
 48+  8436 00 00        	defw 0											; Puntero de_impresión.
 49+  8438 00 00        	defw 0											; Puntero objeto.
 50+  843A 00 00        	defw 0											; Rutina de impresión.
 51+  843C
 52+  843C 00 00        Disparo_8 db 0,0									; Impacto / Dirección.
 53+  843E 00 00        	defw 0											; Puntero de_impresión.
 54+  8440 00 00        	defw 0											; Puntero objeto.
 55+  8442 00 00        	defw 0											; Rutina de impresión.
 56+  8444
 57+  8444 00 00        Disparo_9 db 0,0									; Impacto / Dirección.
 58+  8446 00 00        	defw 0											; Puntero de_impresión.
 59+  8448 00 00        	defw 0											; Puntero objeto.
 60+  844A 00 00        	defw 0											; Rutina de impresión.
 61+  844C
 62+  844C 00 00        Disparo_10 db 0,0									; Impacto / Dirección.
 63+  844E 00 00        	defw 0											; Puntero de_impresión.
 64+  8450 00 00        	defw 0											; Puntero objeto.
 65+  8452 00 00        	defw 0											; Rutina de impresión.
 66+  8454
 67+  8454              ; -------------------------------------------------------------------------------------
 68+  8454
 69+  8454              Indice_de_entidades									; 58 Bytes por entidad.
 70+  8454
 71+  8454 9A 84        	defw Entidad_1
 72+  8456 D4 84        	defw Entidad_2
 73+  8458 0E 85        	defw Entidad_3
 74+  845A 48 85        	defw Entidad_4
 75+  845C              ;	...
 76+  845C              ;	...
 77+  845C              ;	+ entidades ...
 78+  845C
 79+  845C 00 00        	defw 0
 80+  845E 00 00        	defw 0
 81+  8460
 82+  8460              ; ---------- ---------- ---------- ---------- ----------
 83+  8460
 84+  8460 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 85+  8462 00 00        	defw 0		 									; (Posicion_actual).
 86+  8464 00 00        	defw 0	 										; (Puntero_objeto).
 87+  8466 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 88+  8469
 89+  8469 05           	db %00000101									; (Attr).
 90+  846A
 91+  846A 20 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 92+  846C 30 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 93+  846E 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 94+  8470 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 95+  8472
 96+  8472 D0 50        	defw $50d0										; (Posicion_inicio).
 97+  8474 04           	db 4 											; (Cuad_objeto).
 98+  8475
 99+  8475 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
100+  8479
101+  8479 00 00        	db 0,0											; Variables_de_borrado
102+  847B 00 00        	defw 0											;	" " " " " " "
103+  847D 00 00        	defw 0											;	" " " " " " "
104+  847F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
105+  8483
106+  8483 00 00        	db 0,0											; Variables_de_pintado
107+  8485 00 00        	defw 0											;	" " " " " " "
108+  8487 00 00        	defw 0											;	" " " " " " "
109+  8489 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
110+  848D
111+  848D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
112+  848F
113+  848F 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
114+  8493 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
115+  8496
116+  8496 00           	db 0 											; (Columnas).
117+  8497 00 00        	defw 0											; (Limite_horizontal).
118+  8499 00           	db 0											; (Limite_vertical).
119+  849A
120+  849A              ; ---------- ---------- ---------- ---------- ----------
121+  849A
122+  849A 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
123+  849C 00 00        	defw 0											; (Posicion_actual).
124+  849E 00 00        	defw 0 											; (Puntero_objeto).
125+  84A0 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
126+  84A3
127+  84A3 00           	db %00000000 									; (Attr).
128+  84A4
129+  84A4 00 00        	defw 0											; (Indice_Sprite_der).
130+  84A6 00 00        	defw 0											; (Indice_Sprite_izq).
131+  84A8 00 00        	defw 0											; (Puntero_DESPLZ_der).
132+  84AA 00 00        	defw 0											; (Puntero_DESPLZ_izq).
133+  84AC
134+  84AC 00 00        	defw 0											; (Posicion_inicio).
135+  84AE 00           	db 0											; (Cuad_objeto).
136+  84AF
137+  84AF 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
138+  84B3
139+  84B3 00 00        	db 0,0										    ; Variables_de_borrado
140+  84B5 00 00        	defw 0											;	" " " " " " "
141+  84B7 00 00        	defw 0											;	" " " " " " "
142+  84B9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
143+  84BD
144+  84BD 00 00        	db 0,0											; Variables_de_pintado
145+  84BF 00 00        	defw 0											;	" " " " " " "
146+  84C1 00 00        	defw 0											;	" " " " " " "
147+  84C3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
148+  84C7
149+  84C7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
150+  84C9
151+  84C9 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
152+  84CD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
153+  84D0
154+  84D0 00           	db 0 											; (Columnas).
155+  84D1 00 00        	defw 0											; (Limite_horizontal).
156+  84D3 00           	db 0											; (Limite_vertical).
157+  84D4
158+  84D4              ; ---------- ---------- ---------- ---------- ----------
159+  84D4
160+  84D4 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
161+  84D6 00 00        	defw 0                                          ; (Posicion_actual).
162+  84D8 00 00        	defw 0											; (Puntero_objeto).
163+  84DA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
164+  84DD
165+  84DD 02           	db %00000010									; (Attr).
166+  84DE
167+  84DE A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
168+  84E0 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
169+  84E2 00 00        	defw 0											; (Puntero_DESPLZ_der).
170+  84E4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
171+  84E6
172+  84E6 7E 47        	defw $477e                                      ; (Posicion_inicio).
173+  84E8 02           	db 2											; (Cuad_objeto).
174+  84E9
175+  84E9 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
176+  84ED
177+  84ED 00 00        	db 0,0											; Variables_de_borrado
178+  84EF 00 00        	defw 0										 	;	" " " " " " "
179+  84F1 00 00        	defw 0											;	" " " " " " "
180+  84F3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
181+  84F7
182+  84F7 00 00        	db 0,0											; Variables_de_pintado
183+  84F9 00 00        	defw 0											;	" " " " " " "
184+  84FB 00 00        	defw 0											;	" " " " " " "
185+  84FD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
186+  8501
187+  8501 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
188+  8503
189+  8503 7B 92 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
190+  8507 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
191+  850A
192+  850A 00           	db 0 											; (Columnas).
193+  850B 00 00        	defw 0											; (Limite_horizontal).
194+  850D 00           	db 0											; (Limite_vertical).
195+  850E
196+  850E              ; ---------- ---------- ---------- ---------- ----------
197+  850E
198+  850E 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
199+  8510 00 00        	defw 0                                          ; (Posicion_actual).
200+  8512 00 00        	defw 0											; (Puntero_objeto).
201+  8514 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
202+  8517
203+  8517 04           	db %00000100									; (Attr).
204+  8518
205+  8518 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
206+  851A 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
207+  851C
208+  851C 00 00        	defw 0											; (Puntero_DESPLZ_der).
209+  851E 00 00        	defw 0											; (Puntero_DESPLZ_izq).
210+  8520
211+  8520 A1 47        	defw $47a1                                      ; (Posicion_inicio).
212+  8522 01           	db 1											; (Cuad_objeto).
213+  8523
214+  8523 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
215+  8527
216+  8527 00 00        	db 0,0											; Variables_de_borrado
217+  8529 00 00        	defw 0										 	;	" " " " " " "
218+  852B 00 00        	defw 0											;	" " " " " " "
219+  852D 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
220+  8531
221+  8531 00 00        	db 0,0											; Variables_de_pintado
222+  8533 00 00        	defw 0											;	" " " " " " "
223+  8535 00 00        	defw 0											;	" " " " " " "
224+  8537 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
225+  853B
226+  853B 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
227+  853D
228+  853D 7D 92 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
229+  8541 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
230+  8544
231+  8544 00           	db 0 											; (Columnas).
232+  8545 00 00        	defw 0											; (Limite_horizontal).
233+  8547 00           	db 0											; (Limite_vertical).
234+  8548
235+  8548              ; ---------- ---------- ---------- ---------- ----------
236+  8548
237+  8548 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
238+  854A 00 00        	defw 0                                          ; (Posicion_actual).
239+  854C 00 00        	defw 0 											; (Puntero_objeto).
240+  854E 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
241+  8551
242+  8551 01           	db %00000001									; (Attr).
243+  8552
244+  8552 A0 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
245+  8554 20 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
246+  8556
247+  8556 00 00        	defw 0											; (Puntero_DESPLZ_der).
248+  8558 00 00        	defw 0											; (Puntero_DESPLZ_izq).
249+  855A
250+  855A BE 47        	defw $47be                                      ; (Posicion_inicio).
251+  855C 00           	db 0											; (Cuad_objeto).
252+  855D
253+  855D 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
254+  8561
255+  8561 00 00        	db 0,0											; Variables_de_borrado
256+  8563 00 00        	defw 0										 	;	" " " " " " "
257+  8565 00 00        	defw 0											;	" " " " " " "
258+  8567 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
259+  856B
260+  856B 00 00        	db 0,0											; Variables_de_pintado
261+  856D 00 00        	defw 0											;	" " " " " " "
262+  856F 00 00        	defw 0											;	" " " " " " "
263+  8571 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
264+  8575
265+  8575 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
266+  8577
267+  8577 6D 92 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
268+  857B 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
269+  857E
270+  857E 00           	db 0 											; (Columnas).
271+  857F 00 00        	defw 0											; (Limite_horizontal).
272+  8581 00           	db 0											; (Limite_vertical).
273+  8582
# file closed: Entidades_y_disparos.asm
 21   8582
 22   8582              ; ******************************************************************************************************************************************************************************************
 23   8582              ; Constantes.
 24   8582              ; ******************************************************************************************************************************************************************************************
 25   8582              ;
 26   8582              ; 8/11/22
 27   8582              ;
 28   8582              ; Constantes generales.
 29   8582              ;
 30   8582
 31   8582              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   8582              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   8582              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   8582              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   8582              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   8582
 37   8582              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   8582              ;                               				        ; De momento situamos este almacén en $7000.
 39   8582
 40   8582
 41   8582              ; ******************************************************************************************************************************************************************************************
 42   8582              ; Variables.
 43   8582              ; ******************************************************************************************************************************************************************************************
 44   8582              ;
 45   8582              ; 10/11/22
 46   8582              ;
 47   8582              ; Variables de DRAW. (Motor principal).
 48   8582              ;
 49   8582              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   8582
 51   8582 02           Filas db 2												; Filas. [DRAW]
 52   8583 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8584 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8586 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8588 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8589 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   858A
 58   858A              ; ---------- ---------- ---------- ---------;      ;---------
 59   858A
 60   858A 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   858B              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   858B              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   858B 04           Attr db %00000100										; Atributos de la entidad:
 64   858C
 65   858C              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   858C              ;
 67   858C              ;	COLORES: 0 ..... NEGRO
 68   858C              ;    		 1 ..... AZUL
 69   858C              ; 			 2 ..... ROJO
 70   858C              ;			 3 ..... MAGENTA
 71   858C              ; 			 4 ..... VERDE
 72   858C              ; 			 5 ..... CIAN
 73   858C              ;			 6 ..... AMARILLO
 74   858C              ; 			 7 ..... BLANCO
 75   858C
 76   858C A0 81        Indice_Sprite_der defw Indice_Badsat_der
 77   858E 20 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   8590 00 00        Puntero_DESPLZ_der defw 0
 79   8592 00 00        Puntero_DESPLZ_izq defw 0
 80   8594
 81   8594 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8596 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8597
 84   8597              ; Variables de objeto. (Características).
 85   8597
 86   8597 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8598 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8599 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   859A 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   859B
 91   859B 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   859D 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   859F 00 00        	defw 0
 94   85A1 00 00 00 00  	db 0,0,0,0
 95   85A5
 96   85A5 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   85A7 00 00        	defw 0
 98   85A9 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   85AB 00 00 00 00  	db 0,0,0,0
100   85AF
101   85AF              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   85AF
103   85AF 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   85B0              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   85B0              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   85B0              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   85B0              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   85B0              ;
109   85B0              ; 														DESCRIPCIÖN:
110   85B0              ;
111   85B0              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   85B0              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   85B0              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   85B0              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   85B0              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   85B0              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   85B0              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   85B0              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   85B0              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   85B0              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   85B0              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   85B0              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   85B0              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   85B0              ;
125   85B0              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   85B0              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   85B0              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   85B0
129   85B0 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   85B1
131   85B1              ; Movimiento.
132   85B1
133   85B1 69 92        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   85B3 00 00        Puntero_mov defw 0
135   85B5 00           Contador_db_mov db 0
136   85B6 00           Incrementa_puntero db 0
137   85B7 00           Repetimos_db db 0
138   85B8
139   85B8              ; Variables de funcionamiento. [DRAW].
140   85B8
141   85B8 00           Columnas db 0
142   85B9 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   85BB              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   85BB 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   85BC
146   85BC              ; 59 Bytes por entidad.
147   85BC              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   85BC              ;					         		---------;      ;---------
149   85BC
150   85BC
151   85BC              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   85BC
153   85BC              ; Gestión de ENTIDADES.
154   85BC
155   85BC 00 00        Puntero_store_entidades defw 0
156   85BE 00 00        Puntero_restore_entidades defw 0
157   85C0 00 00        Indice_restore defw 0
158   85C2 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
159   85C3 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
160   85C4              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
161   85C4              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
162   85C4              ;														; _ (Numero_de_malotes)="0".
163   85C4 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
164   85C6              ;														; _variable para almacenar lo posición del puntero_
165   85C6              ; 														; _de pila, SP.
166   85C6 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
167   85C8              ;														; La utiliza la rutina [Extrae_foto_registros].
168   85C8 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
169   85CA              ;														; _el snapshot de los registros de la siguiente entidad.
170   85CA              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
171   85CA
172   85CA              ; Gestión de Disparos.
173   85CA
174   85CA F0 83        Stack_guns defw Indice_de_disparos						; Este puntero se irá desplazando por el índice de disparos_
175   85CC              ;														; _a medida que estos se van creando. Se sitúa en el siguiente_
176   85CC              ;														; _campo "vacio" del índice para alojar un nuevo disparo.
177   85CC 00 00        Puntero_DESPLZ_IND_DISPARO defw 0
178   85CE
179   85CE
180   85CE
181   85CE
182   85CE              ; Gestión de FRAMES.
183   85CE
184   85CE 00           Switch db 0
185   85CF
186   85CF              ; Variables de Raster y localización en pantalla.
187   85CF
188   85CF 00 FF        Temp_Raster defw $ff00
189   85D1
190   85D1              ; Rutina principal *************************************************************************************************************************************************************************
191   85D1              ;
192   85D1              ;	14/11/22
193   85D1
194   85D1 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
195   85D4
196   85D4 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
197   85D6 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
198   85D8 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
199   85DA F3           	DI
200   85DB
201   85DB 3E 01        	ld a,1
202   85DD D3 FE        	out ($fe),a
203   85DF
204   85DF 3E 07        	ld a,%00000111
205   85E1 CD A2 8E     	call Cls
206   85E4
207   85E4              ;	call Pinta_FILAS
208   85E4
209   85E4 CD F4 87     	call Pulsa_ENTER
210   85E7
211   85E7 21 C2 85     	ld hl,Numero_de_entidades
212   85EA 46           	ld b,(hl)
213   85EB 04           	inc b
214   85EC 05           	dec b
215   85ED 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
216   85EF
217   85EF              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
218   85EF              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
219   85EF              ;	Pintamos el resto de entidades:
220   85EF
221   85EF CD 0D 87     	call Inicia_punteros_de_entidades
222   85F2
223   85F2              ;	INICIA ENTIDADES!!!!!
224   85F2
225   85F2 C5           1 push bc  												; Guardo el contador de entidades.
226   85F3 CD 47 87      	call Inicia_Puntero_objeto
227   85F6 CD 54 89     	call Draw
228   85F9 CD A0 7F     	call Guarda_foto_registros
229   85FC CD 8F 87     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
230   85FF C1           	pop bc
231   8600 10 F0        	djnz 1B  											; Decremento el contador de entidades.
232   8602
233   8602              ; 	INICIA AMADEUS!!!!!
234   8602
235   8602 CD D0 87     3 call Restore_Amadeus
236   8605 CD 47 87     	call Inicia_Puntero_objeto
237   8608 CD 54 89     	call Draw
238   860B CD A0 7F     	call Guarda_foto_registros
239   860E CD E2 87     	call Store_Amadeus
240   8611
241   8611              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
242   8611
243   8611 CD 23 87     	call Inicia_Puntero_Disparo
244   8614
245   8614 CD 0D 87     	call Inicia_punteros_de_entidades
246   8617 CD BE 87     	call Restore_Primera_entidad
247   861A
248   861A 3A C2 85     	ld a,(Numero_de_entidades)
249   861D 3C           	inc a
250   861E 32 C3 85     	ld (Numero_de_malotes),a
251   8621
252   8621 FB           2 ei
253   8622 18 FD        	jr 2B
254   8624
255   8624              ; -----------------------------------------------------------------------------------
256   8624
257   8624              Frame
258   8624
259   8624              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
260   8624              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
261   8624
262   8624 3E 02            ld a,2
263   8626 D3 FE            out ($fe),a
264   8628 CD 58 8C     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
265   862B 3E 01            ld a,1
266   862D D3 FE            out ($fe),a
267   862F
268   862F              ; ----------------------------------------------------------------------
269   862F
270   862F 21 00 70     	ld hl,Album_de_fotos
271   8632 22 C8 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
272   8635              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
273   8635 3A C2 85         ld a,(Numero_de_entidades)
274   8638 47               ld b,a
275   8639 A7           	and a
276   863A 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
277   863C
278   863C C5           2 push bc
279   863D CD 86 86     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
280   8640 3A AF 85     	ld a,(Ctrl_0)
281   8643 CB 67        	bit 4,a
282   8645 28 06        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
283   8647
284   8647              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
285   8647              ; Las entidades sólo generan disparo cuando se mueven.
286   8647              ; 16/02/23.
287   8647              ; [[[
288   8647 CD 2B 88     	call Detecta_disparo_entidad
289   864A              ; ]]]
290   864A
291   864A CD D4 86     	call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!
292   864D
293   864D 21 AF 85     1 ld hl,Ctrl_0
294   8650 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
295   8652 AF           	xor a
296   8653 32 B0 85     	ld (Obj_dibujado),a
297   8656 CD 8F 87     	call Store_Restore_entidades
298   8659 C1           	pop bc
299   865A 10 E0        	djnz 2B
300   865C
301   865C CD D0 87     4 call Restore_Amadeus
302   865F CD A5 86     	call Mov_Amadeus
303   8662 3A AF 85     	ld a,(Ctrl_0)
304   8665 CB 67        	bit 4,a
305   8667 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
306   8669 CD D4 86     	call Guarda_foto_entidad_a_pintar
307   866C
308   866C 21 AF 85     3 ld hl,Ctrl_0
309   866F CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
310   8671 AF           	xor a
311   8672 32 B0 85     	ld (Obj_dibujado),a
312   8675 CD E2 87     	call Store_Amadeus
313   8678
314   8678              ; -----
315   8678
316   8678 CD 0D 87     	call Inicia_punteros_de_entidades
317   867B CD BE 87     	call Restore_Primera_entidad
318   867E CD 2A 87     	call Calcula_numero_de_malotes
319   8681
320   8681 3E 04        	ld a,4
321   8683 D3 FE        	out ($fe),a
322   8685 C9           	ret
323   8686
324   8686              ; --------------------------------------------------------------------------------------------------------------
325   8686              ;
326   8686              ;	29/1/23
327   8686
328   8686              Mov_obj
329   8686
330   8686              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
331   8686
332   8686 AF           	xor a
333   8687 32 B0 85     	ld (Obj_dibujado),a
334   868A CD DE 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
335   868D              ;														; Obj_dibujado="0".
336   868D              ; Movemos Entidades malignas.
337   868D
338   868D CD 7F 92     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
339   8690 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
340   8693 CB 67        	bit 4,a
341   8695 C8           	ret z
342   8696
343   8696              ; ---------
344   8696
345   8696 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
346   8698 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
347   869B CD DE 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
348   869E CD F5 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
349   86A1 CD C4 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
350   86A4 C9           	ret													; _de la misma.
351   86A5
352   86A5              ; --------------------------------------------------------------------------------------------------------------
353   86A5              ;
354   86A5              ;	29/1/23
355   86A5
356   86A5              Mov_Amadeus
357   86A5
358   86A5 AF           	xor a
359   86A6 32 B0 85     	ld (Obj_dibujado),a
360   86A9 CD DE 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
361   86AC              ;														; Obj_dibujado="0".
362   86AC              ; Movemos Amadeus.
363   86AC
364   86AC CD 08 88     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
365   86AF 3A AF 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
366   86B2 CB 67        	bit 4,a
367   86B4 C8           	ret z
368   86B5
369   86B5              ; ---------
370   86B5
371   86B5 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
372   86B7 32 B0 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
373   86BA CD DE 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
374   86BD CD F5 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
375   86C0 CD C4 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
376   86C3 C9           	ret													; _de la nave.
377   86C4
378   86C4              ; --------------------------------------------------------------------------------------------------------------
379   86C4              ;
380   86C4              ;	31/01/23
381   86C4              ;
382   86C4              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
383   86C4
384   86C4              Guarda_foto_entidad_a_borrar
385   86C4
386   86C4 CD 2E 8C     	call Prepara_draw
387   86C7 CD 68 8B     	call calcula_CColumnass
388   86CA CD 9F 8B     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
389   86CD CD F4 8B     	call Define_rutina_de_impresion
390   86D0 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
391   86D3 C9           	ret
392   86D4
393   86D4              ; --------------------------------------------------------------------------------------------------------------
394   86D4              ;
395   86D4              ;	31/01/23
396   86D4              ;
397   86D4              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
398   86D4              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
399   86D4
400   86D4              Guarda_foto_entidad_a_pintar
401   86D4
402   86D4 CD 01 87     	call Repone_pintar
403   86D7 CD 54 89     	call Draw
404   86DA CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
405   86DD C9           	ret
406   86DE
407   86DE              ; --------------------------------------------------------------------------------------------------------------
408   86DE              ;
409   86DE              ;
410   86DE
411   86DE 21 82 85     Prepara_var_pintado_borrado	ld hl,Filas
412   86E1 3A B0 85     	ld a,(Obj_dibujado)
413   86E4 A7           	and a
414   86E5 28 05        	jr z,1F
415   86E7 11 A5 85     	ld de,Variables_de_pintado
416   86EA 18 03        	jr 2F
417   86EC 11 9B 85     1 ld de,Variables_de_borrado
418   86EF 01 08 00     2 ld bc,8
419   86F2 ED B0        	ldir
420   86F4 C9           	ret
421   86F5
422   86F5              ; --------------------------------------------------------------------------------------------------------------
423   86F5
424   86F5 21 9B 85     Repone_borrar ld hl,Variables_de_borrado
425   86F8 11 82 85     	ld de,Filas
426   86FB 01 08 00     	ld bc,8
427   86FE ED B0        	ldir
428   8700 C9           	ret
429   8701
430   8701 21 A5 85     Repone_pintar ld hl,Variables_de_pintado
431   8704 11 82 85     	ld de,Filas
432   8707 01 08 00     	ld bc,8
433   870A ED B0        	ldir
434   870C C9           	ret
435   870D
436   870D              ; *************************************************************************************************************************************************************
437   870D              ;
438   870D              ; 8/1/23
439   870D              ;
440   870D              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
441   870D              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
442   870D              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
443   870D
444   870D              ; Destruye HL y DE !!!!!
445   870D
446   870D              Inicia_punteros_de_entidades
447   870D
448   870D 21 54 84     	ld hl,Indice_de_entidades
449   8710 CD 41 87         call Extrae_address
450   8713 22 BC 85         ld (Puntero_store_entidades),hl
451   8716 21 56 84     	ld hl,Indice_de_entidades+2
452   8719 22 C0 85     	ld (Indice_restore),hl
453   871C CD 41 87     	call Extrae_address
454   871F 22 BE 85     	ld (Puntero_restore_entidades),hl
455   8722 C9               ret
456   8723
457   8723              ; *************************************************************************************************************************************************************
458   8723              ;
459   8723              ; 8/1/23
460   8723              ;
461   8723              ;	Inicializamos (Puntero_DESPLZ_IND_DISPARO).
462   8723
463   8723 21 F0 83     Inicia_Puntero_Disparo ld hl,Indice_de_disparos
464   8726 22 CC 85     	ld (Puntero_DESPLZ_IND_DISPARO),hl
465   8729 C9           	ret
466   872A
467   872A              ; -------------------------------------------------------------------------------------------------------------
468   872A              ;
469   872A              ; 30/1/23
470   872A              ;
471   872A
472   872A 2A C8 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
473   872D 7D           	ld a,l
474   872E A7           	and a
475   872F 28 0C        	jr z,3F
476   8731 AF           	xor a
477   8732 67           	ld h,a
478   8733 7D           	ld a,l
479   8734 D6 06        1 sub 6
480   8736 28 03        	jr z,2F
481   8738 24           	inc h
482   8739 18 F9        	jr 1B
483   873B 24           2 inc h
484   873C 7C           	ld a,h
485   873D 32 C3 85     3 ld (Numero_de_malotes),a
486   8740 C9           	ret
487   8741
488   8741              ; *************************************************************************************************************************************************************
489   8741              ;
490   8741              ; 20/10/22
491   8741              ;
492   8741              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
493   8741              ;
494   8741              ; Destruye el puntero y DE !!!!!
495   8741
496   8741 5E           Extrae_address ld e,(hl)
497   8742 23           	inc hl
498   8743 56           	ld d,(hl)
499   8744 2B           	dec hl
500   8745 EB           	ex de,hl
501   8746 C9           	ret
502   8747
503   8747              ; *************************************************************************************************************************************************************
504   8747              ;
505   8747              ;	7/2/23
506   8747              ;
507   8747              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
508   8747              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
509   8747              ;
510   8747              ;   Destruye HL y BC !!!!!,
511   8747              ;
512   8747              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
513   8747              ;					"0" ..... Izquierda.
514   8747
515   8747              Inicia_Puntero_objeto
516   8747
517   8747 3A 96 85     	ld a,(Cuad_objeto)
518   874A E6 01        	and 1
519   874C F5           	push af
520   874D CC 6B 87     	call z,Inicia_puntero_objeto_izq
521   8750 F1           	pop af
522   8751 28 2B        	jr z,1F
523   8753 CD 58 87     	call Inicia_puntero_objeto_der
524   8756 18 26        	jr 1F
525   8758
526   8758              ; Arrancamos desde la parte izquierda de la pantalla.
527   8758              ; Iniciamos (Indice_Sprite_der).
528   8758
529   8758 2A 8C 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
530   875B 22 90 85     	ld (Puntero_DESPLZ_der),hl
531   875E CD 41 87     	call Extrae_address
532   8761 22 86 85     	ld (Puntero_objeto),hl
533   8764
534   8764 2A 8E 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
535   8767              ;	call Extrae_address
536   8767 22 92 85     	ld (Puntero_DESPLZ_izq),hl
537   876A C9           	ret
538   876B
539   876B              ; Arrancamos desde la parte derecha de la pantalla.
540   876B              ; Iniciamos (Indice_Sprite_izq).
541   876B
542   876B 2A 8E 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
543   876E 22 92 85     	ld (Puntero_DESPLZ_izq),hl
544   8771 CD 41 87     	call Extrae_address
545   8774 22 86 85     	ld (Puntero_objeto),hl
546   8777
547   8777 2A 8C 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
548   877A              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
549   877A 22 90 85     	ld (Puntero_DESPLZ_der),hl
550   877D C9           	ret
551   877E
552   877E              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
553   877E
554   877E 21 40 83     1 ld hl,Amadeus
555   8781 ED 4B 86 85  	ld bc,(Puntero_objeto)
556   8785 B7 ED 42     	sub hl,bc
557   8788 C0           	ret nz
558   8789 21 AF 85     	ld hl,Ctrl_0
559   878C CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
560   878E C9           	ret 												; _de nuestra nave en los extremos.
561   878F
562   878F              ; *************************************************************************************************************************************************************
563   878F              ;
564   878F              ;	8/1/23
565   878F              ;
566   878F              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
567   878F              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
568   878F
569   878F              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
570   878F              ;	_de la 2ª y 3ª entidad respectivamente.
571   878F
572   878F
573   878F
574   878F              Store_Restore_entidades
575   878F
576   878F E5           	push hl
577   8790 D5           	push de
578   8791 C5            	push bc
579   8792
580   8792              ;	STORE !!!!!
581   8792              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
582   8792
583   8792 21 82 85     	ld hl,Filas
584   8795 ED 5B BC 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
585   8799 01 3A 00     	ld bc,58
586   879C ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
587   879E
588   879E              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
589   879E
590   879E 2A BE 85     	ld hl,(Puntero_restore_entidades)
591   87A1 22 BC 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
592   87A4 11 82 85     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
593   87A7 01 3A 00     	ld bc,58
594   87AA ED B0        	ldir
595   87AC
596   87AC              ;	Incrementa RESTORE !!!!!
597   87AC
598   87AC 2A C0 85         ld hl,(Indice_restore)
599   87AF 23           	inc hl
600   87B0 23           	inc hl
601   87B1 22 C0 85     	ld (Indice_restore),hl
602   87B4 CD 41 87         call Extrae_address
603   87B7 22 BE 85         ld (Puntero_restore_entidades),hl
604   87BA C1           	pop bc
605   87BB D1           	pop de
606   87BC E1           	pop hl
607   87BD C9           	ret
608   87BE
609   87BE              ; **************************************************************************************************
610   87BE              ;
611   87BE              ;	29/10/22
612   87BE              ;
613   87BE              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
614   87BE
615   87BE E5           Restore_Primera_entidad push hl
616   87BF D5           	push de
617   87C0 C5            	push bc
618   87C1 2A BC 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
619   87C4 11 82 85     	ld de,Filas
620   87C7 01 3A 00     	ld bc,58
621   87CA ED B0        	ldir
622   87CC C1           	pop bc
623   87CD D1           	pop de
624   87CE E1           	pop hl
625   87CF C9           	ret
626   87D0
627   87D0              ; **************************************************************************************************
628   87D0              ;
629   87D0              ;	25/01/23
630   87D0              ;
631   87D0              ;	Restore_Amadeus
632   87D0              ;
633   87D0              ;	Cargamos en DRAW los parámetros de Amadeus.
634   87D0              ;
635   87D0
636   87D0 E5           Restore_Amadeus	push hl
637   87D1 D5           	push de
638   87D2 C5            	push bc
639   87D3 21 60 84     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
640   87D6 11 82 85     	ld de,Filas
641   87D9 01 3A 00     	ld bc,58
642   87DC ED B0        	ldir
643   87DE C1           	pop bc
644   87DF D1           	pop de
645   87E0 E1           	pop hl
646   87E1 C9           	ret
647   87E2
648   87E2              ; *************************************************************************************************************************************************************
649   87E2              ;
650   87E2              ;	29/01/23
651   87E2              ;
652   87E2              ;	Store_Amadeus
653   87E2              ;
654   87E2              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
655   87E2              ;
656   87E2
657   87E2 E5           Store_Amadeus push hl
658   87E3 D5           	push de
659   87E4 C5            	push bc
660   87E5 21 82 85     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
661   87E8 11 60 84     	ld de,Amadeus_db
662   87EB 01 3A 00     	ld bc,58
663   87EE ED B0        	ldir
664   87F0 C1           	pop bc
665   87F1 D1           	pop de
666   87F2 E1           	pop hl
667   87F3 C9           	ret
668   87F4
669   87F4              ; **************************************************************************************************
670   87F4
671   87F4              ; Teclado.
672   87F4
673   87F4 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
674   87F6 DB FE        	in a,($fe)
675   87F8 E6 01        	and $01
676   87FA 28 02        	jr z,1f
677   87FC 18 F6        	jr Pulsa_ENTER
678   87FE C9           1 ret
679   87FF
680   87FF              ; **************************************************************************************************
681   87FF              ;
682   87FF              ; Temporización.
683   87FF
684   87FF              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
685   87FF              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
686   87FF              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
687   87FF              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
688   87FF
689   87FF              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
690   87FF              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
691   87FF              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
692   87FF
693   87FF              ; A partir de $4f61 no hace falta DELAY.
694   87FF
695   87FF              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
696   87FF
697   87FF 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
698   8802 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
699   8803 78           	LD A,B
700   8804 A7           	AND A
701   8805 20 FB        	JR NZ,wait
702   8807 C9           	RET
703   8808
704   8808              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
705   8808              ;
706   8808              ;	16/02/23
707   8808
708   8808              Movimiento_Amadeus
709   8808
710   8808 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
711   880A DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
712   880C E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
713   880E CC 30 90         call z,Mov_left											;			"			"			"			"			"			"			"			"
714   8811 3E F7        	ld a,$f7
715   8813 DB FE        	in a,($fe)
716   8815 E6 01        	and $01
717   8817 C8           	ret z
718   8818
719   8818 3E F7        	ld a,$f7
720   881A DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
721   881C E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
722   881E CC 12 8F     	call z,Mov_right										;			"			"			"			"			"			"			"			"
723   8821
724   8821              ; Disparo.
725   8821
726   8821 3E F7        	ld a,$f7												; "5" para disparar.
727   8823 DB FE        	in a,($fe)
728   8825 E6 10        	and $10
729   8827 CC 5F 88     	call z,Genera_disparo
730   882A C9               ret
731   882B
732   882B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
733   882B              ;
734   882B              ;	Rutina provisional.
735   882B
736   882B 3E 7F        Detecta_disparo_entidad	ld a,$7f
737   882D DB FE        	in a,($fe)
738   882F E6 01        	and 1
739   8831 C0           	ret nz
740   8832 CD 5F 88     	call Genera_disparo
741   8835 C9           	ret
742   8836
743   8836              ; Pinta indicadores de FILAS. ------------------------------------------------------
744   8836
745   8836 21 10 40     Pinta_FILAS ld hl,$4010
746   8839              ;	ld b,9
747   8839              ;2 push hl
748   8839              ;	push bc
749   8839 06 BF        	ld b,$bf
750   883B 36 80        1 ld (hl),%10000000
751   883D CD 3A 8C     	call NextScan
752   8840 10 F9        	djnz 1B
753   8842              ;	pop bc
754   8842              ;	pop hl
755   8842              ;	inc l
756   8842              ;	djnz 2B
757   8842 06 03        	ld b,3
758   8844 21 00 47         ld hl,$4700
759   8847 CD 4D 88     3 call Bucle_1
760   884A 10 FB            djnz 3B
761   884C C9               ret
762   884D
763   884D C5           Bucle_1 push bc
764   884E E5                   push hl
765   884F D1                   pop de
766   8850 13                   inc de
767   8851 01 FF 00             ld bc,255
768   8854 36 FF                ld (hl),255
769   8856 ED B0                ldir
770   8858 23                   inc hl
771   8859 3E 07                ld a,7
772   885B 84                   add a,h
773   885C 67                   ld h,a
774   885D C1                   pop bc
775   885E C9                   ret
776   885F
777   885F              ; ---------------------------------------------------------------
778   885F
779   885F              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  885F              ; ******************************************************************************************************************************************************************************************
  2+  885F              ;
  3+  885F              ;   19/02/23
  4+  885F              ;
  5+  885F              ; 	La rutina determina si es factible, o no, `generar' un disparo.
  6+  885F              ;   En el caso de generar disparo la rutina proporciona 5 variables:
  7+  885F              ;
  8+  885F              ;       - 1 .db ..... Impacto. "1" si se produce impacto. (Cuando el disparo se genera en los_
  9+  885F              ;           _ cuadrantes 1º y 2º su valor será "0" por defecto ya que Amadeus nunca abandona_
 10+  885F              ;           _ los cuadrantes 3º y 4º).
 11+  885F              ;
 12+  885F              ;       - 2 .db ..... Dirección. "1" si el proyectil lo dispara Amadeus, (hacia arriba). "0" _
 13+  885F              ;           _ si es lanzado por las entidades, (hacia abajo).
 14+  885F              ;
 15+  885F              ;       - 3 .defw ..... Direccíón de memoria de la rutina que imprime el disparo en pantalla.
 16+  885F              ;           Siempre será la misma: [Pinta_Amadeus_2x2].
 17+  885F              ;
 18+  885F              ;       - 4 .defw ..... Puntero de impresión. Dirección de pantalla donde empezamos a pintar_
 19+  885F              ;           _ la bala.
 20+  885F              ;
 21+  885F              ;       - 5 .defw ..... Puntero_objeto_disparo. Dirección donde se encuentran los .db que pintan_
 22+  885F              ;           _ la bala. El Sprite de la bala consta de 2 columnas y 2 scanlines. Una vez que se_
 23+  885F              ;           _ genera el proyectil esta dirección permanece inalterable. Esta dirección puede tener_
 24+  885F              ;           _ 4 valores distintos, ((el valor dependerá del que tenga la variable (CTRL_DESPLZ)_
 25+  885F              ;           _ en el momento de generarse la bala)).
 26+  885F
 27+  885F              Genera_disparo
 28+  885F
 29+  885F              ;   Esta parte de la rutina se encarga de `RETORNAR' sin generar disparo cuando (CTRL_DESPLZ)_
 30+  885F              ;   _ tenga valores distintos de $00, $f9, $fb y $fd.
 31+  885F              ;   NO SE GENERA disparo cuando la entidad no está impresa en su totalidad en pantalla, (está_
 32+  885F              ;   _ apareciendo o desapareciendo). (Columns)<>(Columnas).
 33+  885F              ;   Amadeus al desplazarse a 2 pixels, podrá generar disparo en cualquier situación pero las Entidades_
 34+  885F              ;   _ sólo podran generar disparo cuando (CTRL_DESPLZ) tenga dichos valores.
 35+  885F              ;   IY contendrá la dirección de Puntero_objeto_disparo.
 36+  885F
 37+  885F 3A B8 85         ld a,(Columnas)
 38+  8862 47               ld b,a
 39+  8863 3A 83 85         ld a,(Columns)
 40+  8866 B8               cp b
 41+  8867 C0               ret nz                              ; Salimos si la entidad no está completa en pantalla.
 42+  8868
 43+  8868 21 00 80         ld hl,Indice_disparo
 44+  886B 3A 8A 85         ld a,(CTRL_DESPLZ)
 45+  886E 4F               ld c,a
 46+  886F A7               and a
 47+  8870 28 0F            jr z,1F
 48+  8872 E6 01            and 1
 49+  8874 C8               ret z                               ; Salimos si (CTRL_DESPLZ) es distinto de $00, $f9, $fb y $fd.
 50+  8875 06 F9            ld b,$f9
 51+  8877 79               ld a,c
 52+  8878
 53+  8878 23           2 inc hl
 54+  8879 23               inc hl
 55+  887A B8               cp b
 56+  887B 28 04            jr z,1F
 57+  887D 04               inc b
 58+  887E 04               inc b
 59+  887F 18 F7            jr 2B
 60+  8881
 61+  8881 CD 41 87     1 call Extrae_address
 62+  8884 E5               push hl
 63+  8885 FD E1            pop iy                              ; Puntero_objeto_disparo en IY.
 64+  8887 DD 21 A5 8C      ld ix,Pinta_Amadeus_2x2             ; Rutinas_de_impresion en IX.
 65+  888B
 66+  888B              ; --------------- ---------------- ----------------- -------------
 67+  888B              ;
 68+  888B              ;   Genera disparo.
 69+  888B              ;
 70+  888B              ;   Generamos variables de disparo. Varían en función del cuadrante en el que nos encontramos.
 71+  888B
 72+  888B 3A 96 85         ld a,(Cuad_objeto)
 73+  888E FE 02            cp 2
 74+  8890 38 59            jr c,3F
 75+  8892 28 57            jr z,3F
 76+  8894
 77+  8894              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 78+  8894
 79+  8894 E6 01            and 1
 80+  8896 28 27            jr z,4F
 81+  8898
 82+  8898              ; Estamos en el 3er cuadrante de pantalla.
 83+  8898              ; 3er CUAD. ----- ----- ----- ----- -----
 84+  8898              ;
 85+  8898              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
 86+  8898              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
 87+  8898              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
 88+  8898
 89+  8898 2A 84 85     	ld hl,(Posicion_actual)
 90+  889B
 91+  889B              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
 92+  889B
 93+  889B 3A AF 85         ld a,(Ctrl_0)
 94+  889E CB 77            bit 6,a
 95+  88A0 28 0B            jr z,8F
 96+  88A2
 97+  88A2              ; Dispara Amadeus.
 98+  88A2
 99+  88A2 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
100+  88A4 CD 49 8C         call PreviousScan
101+  88A7 CD 49 8C         call PreviousScan
102+  88AA 2B               dec hl                                          ; Puntero de impresión en HL.
103+  88AB 18 0A            jr 10F
104+  88AD
105+  88AD              ; Dispara Entidad.
106+  88AD
107+  88AD 0E 00        8 ld c,0                                            ; Dirección "0", hacia abajo.
108+  88AF 06 10            ld b,16
109+  88B1 CD 3A 8C     9 call NextScan
110+  88B4 10 FB            djnz 9B
111+  88B6
112+  88B6              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
113+  88B6
114+  88B6 2B               dec hl                                          ; Puntero de impresión en HL.
115+  88B7 CD 2F 89     10 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
116+  88BA              ;                                                   ; _al generar el disparo.
117+  88BA
118+  88BA              ; LLegados a este punto tendremos:
119+  88BA              ;
120+  88BA              ;       Puntero_objeto_disparo en IY.
121+  88BA              ;       Rutinas_de_impresion en IX.
122+  88BA              ;       Puntero_de_impresion en HL.
123+  88BA              ;       Impacto/Dirección en BC.
124+  88BA
125+  88BA CD 10 89         call Almacena_disparo
126+  88BD 18 50            jr 6F                                           ; RET.
127+  88BF
128+  88BF
129+  88BF              ; Estamos en el 4º cuadrante de pantalla.
130+  88BF              ; 4º CUAD. ----- ----- ----- ----- -----
131+  88BF              ;
132+  88BF              ;	En el 3er y 4º cuadrante de pantalla, cabe la posibilidad de que sea una entidad o Amadeus el que dispara.
133+  88BF              ;	En función del elemento que dispare variara el Puntero_de_impresión y su `Dirección'.
134+  88BF              ;   En estos cuadrantes también es posible que se genere `Colisión', hay que comprobarlo.
135+  88BF
136+  88BF 2A 84 85     4 ld hl,(Posicion_actual)
137+  88C2
138+  88C2              ;   Compruebo si el disparo lo efectúa Amadeus o una entidad para poder calcular el puntero de impresión.
139+  88C2
140+  88C2 3A AF 85         ld a,(Ctrl_0)
141+  88C5 CB 77            bit 6,a
142+  88C7 28 0A            jr z,11F
143+  88C9
144+  88C9              ; Dispara Amadeus.
145+  88C9
146+  88C9 0E 01            ld c,1                                          ; Dirección "1", hacia arriba.
147+  88CB CD 49 8C         call PreviousScan
148+  88CE CD 49 8C         call PreviousScan
149+  88D1 18 09            jr 14F
150+  88D3
151+  88D3              ; Dispara Entidad.
152+  88D3
153+  88D3 0E 00        11 ld c,0                                            ; Dirección "0", hacia abajo.
154+  88D5 06 10            ld b,16
155+  88D7 CD 3A 8C     12 call NextScan
156+  88DA 10 FB            djnz 12B
157+  88DC
158+  88DC              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
159+  88DC
160+  88DC 3A 8A 85     14 ld a,(CTRL_DESPLZ)
161+  88DF A7               and a
162+  88E0 28 01            jr z,13F
163+  88E2 2B               dec hl                                          ; Puntero de impresión en HL.
164+  88E3 CD 2F 89     13 call Comprueba_Colision                          ; Retorna "1" o "0" en B indicando si se produce Colisión
165+  88E6              ;                                                   ; _al generar el disparo.
166+  88E6
167+  88E6              ; LLegados a este punto tendremos:
168+  88E6              ;
169+  88E6              ;       Puntero_objeto_disparo en IY.
170+  88E6              ;       Rutinas_de_impresion en IX.
171+  88E6              ;       Puntero_de_impresion en HL.
172+  88E6              ;       Impacto/Dirección en BC.
173+  88E6
174+  88E6 CD 10 89         call Almacena_disparo
175+  88E9 18 24            jr 6F                                           ; RET.
176+  88EB
177+  88EB              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
178+  88EB
179+  88EB 28 0F        3 jr z,5F
180+  88ED
181+  88ED              ; 1er CUAD. ----- ----- ----- ----- -----
182+  88ED              ;
183+  88ED              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
184+  88ED              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
185+  88ED              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
186+  88ED              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
187+  88ED
188+  88ED 2A 84 85     	ld hl,(Posicion_actual)
189+  88F0 CD 3A 8C     	call NextScan
190+  88F3
191+  88F3              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
192+  88F3
193+  88F3 2B               dec hl                                          ; Puntero de impresión en HL.
194+  88F4 01 00 00         ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
195+  88F7
196+  88F7              ; LLegados a este punto tendremos:
197+  88F7              ;
198+  88F7              ;       Puntero_objeto_disparo en IY.
199+  88F7              ;       Rutinas_de_impresion en IX.
200+  88F7              ;       Puntero_de_impresion en HL.
201+  88F7              ;       Impacto/Dirección en BC.
202+  88F7
203+  88F7 CD 10 89         call Almacena_disparo
204+  88FA 18 13            jr 6F                                           ; RET.
205+  88FC
206+  88FC              ; Estamos en el 2º cuadrante de pantalla.
207+  88FC              ; 2º CUAD. ----- ----- ----- ----- -----
208+  88FC              ;
209+  88FC              ;	En el 1er y 2º cuadrante de pantalla, sólo cabe la posibilidad de que sea una entidad la que dispare,_
210+  88FC              ;	_ por lo tanto siempre se iniciara el disparo en la parte `baja´ del sprite.
211+  88FC              ;   La dirección del proyectil siempre será hacia abajo. En los cuadrante 1º y 2º no se comprueba colision_
212+  88FC              ;   _ pues sabemos que Amadeus sólo puede estar situado en los cuadrantes 3º y 4º.
213+  88FC
214+  88FC 2A 84 85     5 ld hl,(Posicion_actual)
215+  88FF CD 3A 8C     	call NextScan
216+  8902
217+  8902              ; Ahora HL apunta una FILA por debajo de (Posicion_actual).
218+  8902
219+  8902 3A 8A 85         ld a,(CTRL_DESPLZ)
220+  8905 A7               and a
221+  8906 28 01            jr z,7F
222+  8908 2B               dec hl
223+  8909 01 00 00     7 ld bc,0                                         ; Impacto,(B)="0". Dirección,(C)="0".
224+  890C
225+  890C              ; LLegados a este punto tendremos:
226+  890C              ;
227+  890C              ;       Puntero_objeto_disparo en IY.
228+  890C              ;       Rutinas_de_impresion en IX.
229+  890C              ;       Puntero_de_impresion en HL.
230+  890C              ;       Impacto/Dirección en BC.
231+  890C
232+  890C CD 10 89         call Almacena_disparo
233+  890F C9           6 ret
234+  8910
235+  8910              ; ----------------------------------------------------------------
236+  8910              ;
237+  8910              ;   23/02/23
238+  8910
239+  8910              Almacena_disparo
240+  8910
241+  8910 E5               push hl
242+  8911 F1               pop af                                          ; Puntero_de_impresion en AF.
243+  8912
244+  8912 2A CC 85         ld hl,(Puntero_DESPLZ_IND_DISPARO)
245+  8915 23               inc hl
246+  8916 23               inc hl
247+  8917 22 CC 85         ld (Puntero_DESPLZ_IND_DISPARO),hl              ; El (Puntero_DESPLZ_IND_DISPARO) ya apunta al siguiente_
248+  891A              ;                                                   ; _ Disparo_(+1).
249+  891A CD 41 87         call Extrae_address                             ; HL contiene la dirección donde vamos a almacenar_
250+  891D
251+  891D
252+  891D              ;                                                   ; _ los 8 bytes que definen el disparo:
253+  891D              ;
254+  891D              ;                                                     Puntero_objeto_disparo en IY.
255+  891D              ;                                                     Rutinas_de_impresion en IX.
256+  891D              ;                                                     Puntero_de_impresion en HL.
257+  891D              ;                                                     Impacto/Dirección en BC.
258+  891D ED 73 C4 85      ld (Stack),sp                                   ; Guardo SP en (Stack).)
259+  8921 F9               ld sp,hl
260+  8922
261+  8922 DD E5            push ix
262+  8924 F5               push af
263+  8925 FD E5            push iy
264+  8927 C5               push bc
265+  8928
266+  8928 ED 7B C4 85      ld sp,(Stack)
267+  892C
268+  892C 18 FE            jr $
269+  892E
270+  892E
271+  892E C9               ret
272+  892F
273+  892F              ; ----------------------------------------------------------------
274+  892F              ;
275+  892F              ;   20/02/23
276+  892F
277+  892F E5           Comprueba_Colision push hl
278+  8930 1E 00            ld e,0                                         ; E,(Impacto)="0".
279+  8932 CD 46 89         call Bucle_2                                   ; Comprobamos el 1er scanline.
280+  8935 1C               inc e
281+  8936 1D               dec e
282+  8937 28 03            jr z,1F                                        ; Si no se produce impacto comprobamos el 2º scanline.
283+  8939              ; Hay impacto.
284+  8939 43           2 ld b,e
285+  893A E1               pop hl                                         ; Puntero de impresión en HL e indicador de Impacto en B.
286+  893B C9           3 ret
287+  893C E1           1 pop hl
288+  893D E5               push hl
289+  893E CD 3A 8C         call NextScan
290+  8941 CD 46 89         call Bucle_2
291+  8944 18 F3            jr 2B
292+  8946
293+  8946              ; ---------- ----------
294+  8946
295+  8946 06 02        Bucle_2 ld b,2
296+  8948 7E           2 ld a,(hl)
297+  8949 A7               and a
298+  894A 20 04            jr nz,1F
299+  894C 23               inc hl
300+  894D 10 F9            djnz 2B
301+  894F C9           3 ret
302+  8950 1E 01        1 ld e,1
303+  8952 18 FB            jr 3B
304+  8954
305+  8954              ; -------------------------------------------------------------------------------------------------------------
306+  8954
307+  8954
308+  8954
309+  8954
310+  8954
# file closed: Disparo.asm
780   8954              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  8954              ; ******************************************************************************************************************************************************************************************
  2+  8954              ;
  3+  8954              ; 01/23
  4+  8954              ;
  5+  8954              ; DRAW. ************************************************************************************************************************************************************************************
  6+  8954
  7+  8954 CD 2E 8C     Draw call Prepara_draw
  8+  8957 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  8958 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  8959 28 05        	jr z,2F
 11+  895B
 12+  895B 3A 96 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  895E 18 0C        	jr 1F
 14+  8960 2A 94 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  8963 22 84 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  8966 CD F5 8A     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  8969              ;													; _la esquina superior izquierda de la pantalla.
 18+  8969 CD 01 93     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  896C 3A AF 85     1 ld a,(Ctrl_0)
 20+  896F CB 6F        	bit 5,a
 21+  8971 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8973
 23+  8973 CD 8B 89     	call Comprueba_limite_horizontal
 24+  8976 CD 1B 8A     	call Comprueba_limite_vertical
 25+  8979
 26+  8979              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8979
 28+  8979 CD 68 8B     3 call calcula_CColumnass
 29+  897C CD 9F 8B     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  897F CD F4 8B     	call Define_rutina_de_impresion
 31+  8982
 32+  8982 3A AF 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8985 CB AF        	res 5,a											; _a ser de utilidad.
 34+  8987 32 AF 85     	ld (Ctrl_0),a
 35+  898A
 36+  898A C9           	ret
 37+  898B
 38+  898B              ; *******************************************************************************************************************************************************************************************
 39+  898B              ;	21/01/23
 40+  898B              ;
 41+  898B              ; 	Comprueba_limite_horizontal.
 42+  898B              ;
 43+  898B              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  898B              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  898B              ;
 46+  898B              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  898B              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  898B              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  898B              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  898B
 51+  898B
 52+  898B
 53+  898B 3A AF 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  898E CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8990 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8992 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8994 32 AF 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8997 18 09            jr 6F
 59+  8999 CB 5F        1 bit 3,a
 60+  899B 28 0A            jr z,2F
 61+  899D E6 F7            and $f7
 62+  899F 32 AF 85         ld (Ctrl_0),a
 63+  89A2 CD F5 8A     6 call Inicializacion
 64+  89A5 18 5B            jr 5F
 65+  89A7 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  89A8
 67+  89A8              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  89A8              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  89A8
 70+  89A8 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  89A9 2A B9 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  89AC CD 98 8E     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  89AF 67           	ld h,a
 74+  89B0 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  89B1 CD 98 8E     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  89B4 67           	ld h,a
 77+  89B5 A7           	and a
 78+  89B6 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  89B8 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  89B9 3A 96 85     	ld a,(Cuad_objeto)
 81+  89BC FE 02        	cp 2
 82+  89BE 38 1E        	jr c,3F
 83+  89C0 28 1C        	jr z,3F
 84+  89C2 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  89C3 28 23            jr z,7F
 86+  89C5 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  89C7 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  89C9 E1           	pop hl
 89+  89CA
 90+  89CA              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  89CA              ; _para indicar con E="2" en caso necesario.
 92+  89CA
 93+  89CA E5               push hl
 94+  89CB C5               push bc
 95+  89CC CD 98 8E     	call calcula_tercio
 96+  89CF FE 01        	cp 1
 97+  89D1 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  89D3 CD 03 8A         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  89D6 28 26            jr z,9F
100+  89D8 38 24            jr c,9F
101+  89DA 1E 00        11 ld e,0
102+  89DC 18 22            jr 8F
103+  89DE 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  89DF 28 07        	jr z, 7F
105+  89E1 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  89E3 1E 00         	ld e,0
107+  89E5 E1           	pop hl
108+  89E6 18 04        	jr 4F
109+  89E8 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  89EA 18 15            jr 10F
111+  89EC
112+  89EC              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  89EC              ; _para indicar con E="2" en caso necesario.
114+  89EC
115+  89EC E5           4 push hl
116+  89ED C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  89EE CD 98 8E     	call calcula_tercio
118+  89F1 FE 01        	cp 1
119+  89F3 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  89F5 CD 03 8A         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  89F8 28 04            jr z,9F
122+  89FA 30 02            jr nc,9F
123+  89FC 18 02        	jr 8F
124+  89FE 1E 02        9 ld e,2
125+  8A00 C1           8 pop bc
126+  8A01 E1           10 pop hl
127+  8A02 C9           5 ret
128+  8A03
129+  8A03              ; --------------------
130+  8A03              ;
131+  8A03              ; 25/08/22
132+  8A03
133+  8A03 CD 98 8E     Comprueba_centro call calcula_tercio
134+  8A06 67               ld h,a
135+  8A07 08           	ex af,af
136+  8A08 FE 02        	cp 2
137+  8A0A 38 07        	jr c,1F
138+  8A0C 28 05        	jr z,1F
139+  8A0E 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8A11 18 03        	jr 2F
141+  8A13 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8A16 08           2 ex af,af
143+  8A17 A7               and a
144+  8A18 ED 42            sbc hl,bc
145+  8A1A C9               ret
146+  8A1B
147+  8A1B              ; *********************************************************************************************************************************************************************************************
148+  8A1B              ;
149+  8A1B              ;   16/8/22
150+  8A1B              ;
151+  8A1B              ;	Comprueba_limite_vertical
152+  8A1B              ;
153+  8A1B              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  8A1B              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  8A1B              ;
156+  8A1B
157+  8A1B 2A 84 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8A1E 7D           	ld a,l
159+  8A1F E6 1F        	and $1F
160+  8A21 57           	ld d,a
161+  8A22 3A BB 85     	ld a,(Limite_vertical)
162+  8A25 BA           	cp d 											; Límite - Posición.
163+  8A26 08           	ex af,af 										; Resultado de CP d en F'.
164+  8A27 3A 96 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  8A2A CB 47        	bit 0,a
166+  8A2C 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8A2E
168+  8A2E              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8A2E
170+  8A2E 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8A2F 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8A31
173+  8A31              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8A31              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8A31
176+  8A31 3A 88 85         ld a,(Coordenada_X)
177+  8A34 16 0F            ld d,Centro_izquierda
178+  8A36 A7               and a
179+  8A37 92               sub d 											 ; Posición - Centro_izquierda.
180+  8A38 28 1E            jr z,3F
181+  8A3A 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  8A3C              ;                                                    ; _salimos sin modificar nada.
183+  8A3C 18 0E            jr 2F
184+  8A3E 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  8A3F 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8A41
187+  8A41              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8A41              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8A41
190+  8A41 3A 88 85         ld a,(Coordenada_X)
191+  8A44 16 10            ld d,Centro_derecha
192+  8A46 A7               and a
193+  8A47 92               sub d
194+  8A48 28 0E            jr z,3F
195+  8A4A 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  8A4C              ;                                                    ; _salimos sin modificar nada.
197+  8A4C CB 43        2 bit 0,e
198+  8A4E 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  8A50 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  8A51 CD E5 8A         call Modificaccionne
201+  8A54 C1           	pop bc
202+  8A55 CD F5 8A         call Inicializacion
203+  8A58 C9           3 ret 				 								 ; Salimos de la rutina.
204+  8A59
205+  8A59              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  8A59
207+  8A59 C5           4 push bc
208+  8A5A 01 83 85     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  8A5D 0A           	ld a,(bc)
210+  8A5E 3D           	dec a
211+  8A5F 47           	ld b,a 											 ; Columnas-1 en B.
212+  8A60 7D           	ld a,l
213+  8A61 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  8A62 CB 47        	bit 0,a
215+  8A64 28 03        	jr z,5F
216+  8A66 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  8A67 18 2E        	jr 7F
218+  8A69
219+  8A69              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  8A69
221+  8A69 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  8A6A F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  8A6B 3A AF 85     	ld a,(Ctrl_0)
224+  8A6E CB 4F        	bit 1,a
225+  8A70 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8A72 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8A73
228+  8A73              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8A73
230+  8A73 1C               inc e
231+  8A74 1D               dec e
232+  8A75 20 07            jr nz,12F
233+  8A77 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8A78 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8A79 22 84 85     	ld (Posicion_actual),hl
236+  8A7C 18 44        13 jr 9F
237+  8A7E CB 43        12 bit 0,e
238+  8A80 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8A82              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8A82 C1           	pop bc
241+  8A83 18 D3        	jr 3B
242+  8A85 80           14 add b
243+  8A86 6F               ld l,a
244+  8A87 22 84 85     	ld (Posicion_actual),hl
245+  8A8A CD E5 8A         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  8A8D 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  8A8F E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8A91 32 AF 85         ld (Ctrl_0),a
249+  8A94 F1           	pop af
250+  8A95 18 2B        	jr 9F
251+  8A97
252+  8A97              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8A97
254+  8A97 F5           7 push af
255+  8A98 3A AF 85     	ld a,(Ctrl_0)
256+  8A9B CB 47        	bit 0,a
257+  8A9D 20 1D        	jr nz,8F
258+  8A9F F1           	pop af
259+  8AA0
260+  8AA0              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8AA0
262+  8AA0 1C           	inc e
263+  8AA1 1D               dec e
264+  8AA2 20 07            jr nz,10F
265+  8AA4 90           	sub b
266+  8AA5 6F               ld l,a
267+  8AA6 22 84 85     	ld (Posicion_actual),hl
268+  8AA9 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  8AAB              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  8AAB CB 43        10 bit 0,e
271+  8AAD 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8AAF              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8AAF C1           	pop bc
274+  8AB0 18 A6        	jr 3B
275+  8AB2 90           16 sub b
276+  8AB3 6F               ld l,a
277+  8AB4 22 84 85     	ld (Posicion_actual),hl
278+  8AB7 CD E5 8A         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  8ABA 18 06            jr 9F
280+  8ABC E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8ABE 32 AF 85         ld (Ctrl_0),a
282+  8AC1 F1           	pop af
283+  8AC2 C1           9 pop bc
284+  8AC3 1E 00        	ld e,0
285+  8AC5 CD F5 8A         call Inicializacion
286+  8AC8 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8AC9 08           	ex af,af
288+  8ACA F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  8ACB 18 8B            jr 3B
290+  8ACD
291+  8ACD              ; --------------------
292+  8ACD
293+  8ACD 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8ACF CD 49 8C     1 call PreviousScan
295+  8AD2 10 FB            djnz 1B
296+  8AD4 22 84 85     	ld (Posicion_actual),hl
297+  8AD7 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8AD8 C9           	ret
299+  8AD9
300+  8AD9              ; --------------------
301+  8AD9
302+  8AD9 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  8ADB CD 3A 8C     1 call NextScan
304+  8ADE 10 FB            djnz 1B
305+  8AE0 22 84 85     	ld (Posicion_actual),hl
306+  8AE3 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8AE4 C9           	ret
308+  8AE5
309+  8AE5              ; --------------------
310+  8AE5              ;
311+  8AE5              ;	22/01/23
312+  8AE5              ;
313+  8AE5              ;	E="1". Hemos cambiado de cuadrante.
314+  8AE5              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8AE5              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8AE5
317+  8AE5
318+  8AE5              Modificaccionne
319+  8AE5
320+  8AE5 3A 96 85     	ld a,(Cuad_objeto)
321+  8AE8 FE 02        	cp 2
322+  8AEA CC CD 8A         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  8AED DC CD 8A         call c,Modifica_Pos_actual
324+  8AF0 C8           	ret z
325+  8AF1 CD D9 8A         call Modifica_Pos_actual2
326+  8AF4 C9               ret
327+  8AF5
328+  8AF5              ; *************************************************************************************************************************************************************************************************
329+  8AF5              ;
330+  8AF5              ;	13/8/22
331+  8AF5              ;
332+  8AF5              ;	Inicializacion
333+  8AF5              ;
334+  8AF5              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8AF5              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8AF5              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8AF5              ;
338+  8AF5              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8AF5              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8AF5              ;	_ desaparece/aparece.
341+  8AF5
342+  8AF5              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8AF5              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8AF5              ;
345+  8AF5              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8AF5              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8AF5              ; 		   [E] ="0"
348+  8AF5
349+  8AF5              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8AF5
351+  8AF5 CD 98 8E     Inicializacion call calcula_tercio
352+  8AF8 28 36        	jr z,primit
353+  8AFA E6 02        	and 2
354+  8AFC 20 07        	jr nz,segmit
355+  8AFE 7D           	ld a,l
356+  8AFF FE 7F        	cp $7f
357+  8B01 38 2D        	jr c,primit
358+  8B03 28 2B        	jr z,primit
359+  8B05 CD 62 8B     segmit call column
360+  8B08 38 13        	jr c,tercuad
361+  8B0A 3E 04        cuarcuad ld a,4
362+  8B0C 32 96 85     	ld (Cuad_objeto),a
363+  8B0F 21 20 48     	ld hl,$4820
364+  8B12 22 B9 85     	ld (Limite_horizontal),hl
365+  8B15 21 BB 85     	ld hl,Limite_vertical
366+  8B18 36 0D        	ld (hl),$0d
367+  8B1A 08           	ex af,af
368+  8B1B 18 3C        	jr 1F
369+  8B1D              tercuad
370+  8B1D 3E 03        	ld a,3
371+  8B1F 32 96 85     	ld (Cuad_objeto),a
372+  8B22 21 20 48     	ld hl,$4820
373+  8B25 22 B9 85     	ld (Limite_horizontal),hl
374+  8B28 21 BB 85     	ld hl,Limite_vertical
375+  8B2B 36 12        	ld (hl),$12
376+  8B2D 08           	ex af,af
377+  8B2E 18 29        	jr 1F
378+  8B30 CD 62 8B     primit call column
379+  8B33 38 13        	jr c, primcuad
380+  8B35              segcuad
381+  8B35 3E 02        	ld a,2
382+  8B37 32 96 85     	ld (Cuad_objeto),a
383+  8B3A 21 C0 4F     	ld hl,$4fc0
384+  8B3D 22 B9 85     	ld (Limite_horizontal),hl
385+  8B40 21 BB 85     	ld hl,Limite_vertical
386+  8B43 36 0D        	ld (hl),$0d
387+  8B45 08           	ex af,af
388+  8B46 18 11        	jr 1F
389+  8B48              primcuad
390+  8B48 3E 01        	ld a,1
391+  8B4A 32 96 85     	ld (Cuad_objeto),a
392+  8B4D 21 C0 4F     	ld hl,$4fc0
393+  8B50 22 B9 85     	ld (Limite_horizontal),hl
394+  8B53 21 BB 85     	ld hl,Limite_vertical
395+  8B56 36 12        	ld (hl),$12
396+  8B58 08           	ex af,af
397+  8B59 CD CA 91     1 call Genera_coordenadas
398+  8B5C 21 AF 85     	ld hl,Ctrl_0
399+  8B5F CB EE        	set 5,(hl)
400+  8B61 C9           	ret
401+  8B62
402+  8B62              ; ------------------------------------------------------------------------------------------------------------------
403+  8B62
404+  8B62              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  8B62              ;
406+  8B62              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  8B62
408+  8B62 7D           column ld a,l
409+  8B63 E6 1F        	and $1f
410+  8B65 FE 10         	cp $10
411+  8B67 C9            	ret
412+  8B68
413+  8B68              ; --------------------------------------------------------------------------------------------------------------------
414+  8B68              ;
415+  8B68              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  8B68              ;
417+  8B68              ; 14/12/22
418+  8B68              ;
419+  8B68              ;	Modifica: A y BC.
420+  8B68
421+  8B68 3A 96 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  8B6B E6 01        	and 1
423+  8B6D 28 17        	jr z,1F
424+  8B6F
425+  8B6F              ; Nos encontramos en la parte izquierda de la pantalla
426+  8B6F
427+  8B6F 3A 88 85     	ld a,(Coordenada_X)
428+  8B72 47           	ld b,a
429+  8B73 04           	inc b											; (Coordenada_X)+1 en B.
430+  8B74 79           	ld a,c
431+  8B75 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8B76 38 08        	jr c,2F
433+  8B78 47           	ld b,a
434+  8B79 79           	ld a,c
435+  8B7A 90           	sub b
436+  8B7B 32 B8 85     	ld (Columnas),a
437+  8B7E 18 1B        	jr 4F
438+  8B80 79           2 ld a,c
439+  8B81 32 B8 85     	ld (Columnas),a
440+  8B84 18 15        	jr 4F
441+  8B86
442+  8B86              ; Nos encontramos en la parte derecha de la pantalla.
443+  8B86
444+  8B86 3A 88 85     1 ld a,(Coordenada_X)
445+  8B89 81           	add c
446+  8B8A 3D           	dec a
447+  8B8B D6 1F        	sub $1f
448+  8B8D 38 08        	jr c,3F
449+  8B8F 47           	ld b,a
450+  8B90 79           	ld a,c
451+  8B91 90           	sub b
452+  8B92 32 B8 85     	ld (Columnas),a
453+  8B95 18 04        	jr 4F
454+  8B97 79           3 ld a,c
455+  8B98 32 B8 85     	ld (Columnas),a
456+  8B9B D9           4 exx
457+  8B9C 4F           	ld c,a
458+  8B9D D9           	exx
459+  8B9E C9            ret
460+  8B9F
461+  8B9F              ; --------------------------------------------------------------------------------------------------------------------
462+  8B9F              ;
463+  8B9F              ; 7/1/23
464+  8B9F              ;
465+  8B9F              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8B9F              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8B9F              ;
468+  8B9F              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8B9F              ;	DESTRUYE: HL,B Y A.
470+  8B9F
471+  8B9F 3A 96 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8BA2 FE 02        	cp 2
473+  8BA4 38 18        	jr c,1F
474+  8BA6 28 16        	jr z,1F
475+  8BA8 E6 01        	and 1
476+  8BAA 28 0D        	jr z,3F
477+  8BAC
478+  8BAC              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8BAC
480+  8BAC CD E8 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8BAF
482+  8BAF 7D           9 ld a,l
483+  8BB0 E6 1F        	and $1f
484+  8BB2 28 2A        	jr z,7F
485+  8BB4 2B           	dec hl
486+  8BB5 10 F8        	djnz 9B
487+  8BB7 18 25        	jr 7F
488+  8BB9
489+  8BB9              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8BB9
491+  8BB9 2A 84 85     3 ld hl,(Posicion_actual)
492+  8BBC 18 20        	jr 7F
493+  8BBE
494+  8BBE 28 14        1 jr z,2F
495+  8BC0
496+  8BC0              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8BC0
498+  8BC0 CD E8 8B     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8BC3 7D           4 ld a,l
500+  8BC4 E6 1F        	and $1f
501+  8BC6 28 03        	jr z,6F
502+  8BC8 2B           	dec hl
503+  8BC9 10 F8        	djnz 4B
504+  8BCB 06 0F        6 ld b,15
505+  8BCD CD 49 8C     5 call PreviousScan
506+  8BD0 10 FB        	djnz 5B
507+  8BD2 18 0A        	jr 7F
508+  8BD4
509+  8BD4              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8BD4
511+  8BD4 CD E8 8B     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8BD7 06 0F        	ld b,15
513+  8BD9 CD 49 8C     8 call PreviousScan
514+  8BDC 10 FB        	djnz 8B
515+  8BDE
516+  8BDE E5           7 push hl
517+  8BDF DD E1        	pop ix
518+  8BE1
519+  8BE1 2A 86 85     	ld hl,(Puntero_objeto)
520+  8BE4 E5           	push hl
521+  8BE5 FD E1        	pop iy
522+  8BE7
523+  8BE7 C9           	ret
524+  8BE8
525+  8BE8              ; --------------------------------------------------------------------------------------------------------------------
526+  8BE8              ;
527+  8BE8              ;	2/1/23
528+  8BE8              ;
529+  8BE8              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8BE8              ;
531+  8BE8              ;	Tras esta rutina tenemos:
532+  8BE8              ;
533+  8BE8              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8BE8              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8BE8              ;
536+  8BE8              ;	DESTRUYE!!!!! HL,B y A.
537+  8BE8
538+  8BE8 2A 84 85     Operandos ld hl,(Posicion_actual)
539+  8BEB 3A B8 85     	ld a,(Columnas)
540+  8BEE 3D           	dec a
541+  8BEF 20 01        	jr nz,1F
542+  8BF1 3C           	inc a
543+  8BF2 47           1 ld b,a
544+  8BF3 C9           	ret
545+  8BF4
546+  8BF4              ; --------------------------------------------------------------------------------------------------------------------
547+  8BF4              ;
548+  8BF4              ;	3/1/23
549+  8BF4              ;
550+  8BF4              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8BF4              ;
552+  8BF4              ;	Destruye: A,B,HL y DE.
553+  8BF4
554+  8BF4              Define_rutina_de_impresion
555+  8BF4
556+  8BF4 3A 83 85     	ld a,(Columns)
557+  8BF7 47           	ld b,a
558+  8BF8 3A B8 85     	ld a,(Columnas)
559+  8BFB B8           	cp b
560+  8BFC 20 0D        	jr nz,2f
561+  8BFE
562+  8BFE              ;	La entidad se imprime entera.
563+  8BFE
564+  8BFE 21 95 8C     	ld hl, Indice_entidades_completas
565+  8C01 E6 01        	and 1
566+  8C03 28 02        	jr z,1F
567+  8C05
568+  8C05 23           	inc hl
569+  8C06 23           	inc hl
570+  8C07
571+  8C07 CD 41 87     1 call Extrae_address
572+  8C0A C9           	ret		;	ret
573+  8C0B
574+  8C0B              ;	La entidad no se imprime entera en pantalla.
575+  8C0B
576+  8C0B 3A 96 85     2 ld a,(Cuad_objeto)
577+  8C0E E6 01        	and 1
578+  8C10 28 17        	jr z,3F
579+  8C12
580+  8C12              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8C12
582+  8C12 21 99 8C     	ld hl, Indice_entidades_incompletas_izquierda
583+  8C15 3A 83 85     4 ld a,(Columns)
584+  8C18 E6 01        	and 1
585+  8C1A 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8C1C
587+  8C1C 23           	inc hl
588+  8C1D 23           	inc hl
589+  8C1E
590+  8C1E 3A B8 85     	ld a,(Columnas)
591+  8C21 E6 01        	and 1
592+  8C23 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8C25
594+  8C25 23           	inc hl
595+  8C26 23           	inc hl
596+  8C27
597+  8C27 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8C29
599+  8C29 21 9F 8C     3 ld hl, Indice_entidades_incompletas_derecha
600+  8C2C 18 E7        	jr 4B
601+  8C2E
602+  8C2E              ; --------------------------------------------------------------------------------------------------------------------
603+  8C2E              ;
604+  8C2E              ;	Prepara_draw
605+  8C2E              ;
606+  8C2E              ;	Es una rutina de carga.
607+  8C2E              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8C2E              ;
609+  8C2E              ;	FUNCIONAMIENTO:
610+  8C2E              ;
611+  8C2E              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8C2E              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8C2E              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8C2E              ;
615+  8C2E              ;	DESTRUYE:
616+  8C2E              ;
617+  8C2E              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8C2E
619+  8C2E 21 82 85     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8C31 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8C32 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8C33 4E           	ld c,(hl)
623+  8C34 2A 84 85     	ld hl,(Posicion_actual)
624+  8C37 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8C39 C9           	ret
626+  8C3A
627+  8C3A              ;----------------------------------------------------------------------------------------------------------------
628+  8C3A              ;
629+  8C3A              ;	5/08/22
630+  8C3A              ;
631+  8C3A              ;   NextScan.
632+  8C3A              ;
633+  8C3A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8C3A              ;
635+  8C3A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8C3A              ;
637+  8C3A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8C3A              ;
639+  8C3A              ;       DESTRUIDOS: AF y HL !!!
640+  8C3A              ;
641+  8C3A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8C3A              ;
643+  8C3A
644+  8C3A 24           NextScan inc h          ; Incrementamos el scanline.
645+  8C3B 7C               ld a,h
646+  8C3C E6 07            and 7
647+  8C3E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8C3F
649+  8C3F 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8C40 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8C42 6F               ld l,a
652+  8C43 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8C44
654+  8C44 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8C45 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8C47 67               ld h,a
657+  8C48 C9               ret
658+  8C49
659+  8C49              ;----------------------------------------------------------------------------------------------------------------
660+  8C49              ;
661+  8C49              ;	5/08/22
662+  8C49              ;
663+  8C49              ;   PreviousScan.
664+  8C49              ;
665+  8C49              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8C49              ;
667+  8C49              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8C49              ;
669+  8C49              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8C49              ;
671+  8C49              ;       DESTRUIDOS: AF y HL !!!
672+  8C49              ;
673+  8C49              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8C49              ;
675+  8C49
676+  8C49 7C           PreviousScan ld a,h
677+  8C4A 25               dec h               ; Dec H.
678+  8C4B E6 07            and 7
679+  8C4D C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8C4E
681+  8C4E 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8C4F D6 20            sub $20             ; Vamos a comprobarlo...
683+  8C51 6F               ld l,a
684+  8C52 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8C53
686+  8C53 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8C54 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8C56 67               ld h,a
689+  8C57 C9               ret
690+  8C58
691+  8C58              ; -----------------------------------------------------------------------------------
692+  8C58              ;
693+  8C58              ;	15/1/23
694+  8C58
695+  8C58              Extrae_foto_registros
696+  8C58
697+  8C58 3A C3 85     	ld a,(Numero_de_malotes)
698+  8C5B A7           	and a
699+  8C5C C8           	ret z
700+  8C5D
701+  8C5D
702+  8C5D ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8C61 31 00 70     	ld sp,Album_de_fotos
704+  8C64
705+  8C64 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8C66 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8C67 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8C68
709+  8C68 ED 73 C6 85  	ld (Stack_2),sp
710+  8C6C ED 7B C4 85  	ld sp,(Stack)
711+  8C70
712+  8C70              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8C70
714+  8C70 3E CD        	ld a,$cd
715+  8C72 32 7A 8C     	ld (Imprime),a
716+  8C75 EB           	ex de,hl
717+  8C76 22 7B 8C     	ld (Imprime+1),hl
718+  8C79 EB           	ex de,hl
719+  8C7A
720+  8C7A              ; Ejecuta la llamada:	CALL $xx,xx
721+  8C7A
722+  8C7A 00 00 00     Imprime db 0,0,0
723+  8C7D
724+  8C7D ED 73 C4 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8C81
726+  8C81 3A C3 85     	ld a,(Numero_de_malotes)
727+  8C84 3D           	dec a
728+  8C85 28 09        	jr z,1F
729+  8C87 32 C3 85      	ld (Numero_de_malotes),a
730+  8C8A ED 7B C6 85  	ld sp,(Stack_2)
731+  8C8E 18 D4        	jr 2B
732+  8C90
733+  8C90 AF           1 xor a
734+  8C91 32 C6 85     	ld (Stack_2),a
735+  8C94 C9           	ret
736+  8C95
737+  8C95
# file closed: Draw_XOR.asm
781   8C95              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8C95              ;   índices de Rutinas de impresión.
  2+  8C95
  3+  8C95 A5 8C        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8C97 D2 8C            defw Pinta_Amadeus_3x2
  5+  8C99
  6+  8C99 28 8D        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8C9B C8 8D            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8C9D 7C 8D            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8C9F
 10+  8C9F 52 8D        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8CA1 56 8E            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8CA3 0A 8E            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8CA5
 14+  8CA5
 15+  8CA5              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8CA5              ;
 17+  8CA5              ;   12/12/22
 18+  8CA5              ;
 19+  8CA5              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8CA5              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8CA5              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8CA5              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8CA5              ;
 24+  8CA5              ;   Modifica: DE y HL.
 25+  8CA5
 26+  8CA5 ED 73 C4 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8CA9 FD F9        	ld sp,iy
 28+  8CAB
 29+  8CAB              ; >>>
 30+  8CAB
 31+  8CAB 06 10            ld b,16
 32+  8CAD D1           1 pop de
 33+  8CAE 7B               ld a,e
 34+  8CAF AE               xor (hl)
 35+  8CB0 77           	ld (hl),a
 36+  8CB1 23           	inc hl
 37+  8CB2 7A               ld a,d
 38+  8CB3 AE               xor (hl)
 39+  8CB4 77           	ld (hl),a
 40+  8CB5 2B           	dec hl
 41+  8CB6 24           	inc h
 42+  8CB7 7C               ld a,h
 43+  8CB8 E6 07            and 7
 44+  8CBA 20 0A            jr nz,2F
 45+  8CBC 7D               ld a,l
 46+  8CBD C6 20            add a,$20
 47+  8CBF 6F               ld l,a
 48+  8CC0 38 04            jr c,2F
 49+  8CC2 7C               ld a,h
 50+  8CC3 D6 08            sub 8
 51+  8CC5 67               ld h,a
 52+  8CC6 7C           2 ld a,h
 53+  8CC7 FE 58            cp $58
 54+  8CC9 28 02            jr z,3F
 55+  8CCB 10 E0            djnz 1B
 56+  8CCD ED 7B C4 85  3 ld sp,(Stack)
 57+  8CD1 C9           	ret
 58+  8CD2
 59+  8CD2 ED 73 C4 85  Pinta_Amadeus_3x2 ld (Stack),sp
 60+  8CD6 FD F9        	ld sp,iy
 61+  8CD8 06 08            ld b,8
 62+  8CDA D1           1 pop de
 63+  8CDB 7B               ld a,e
 64+  8CDC AE               xor (hl)
 65+  8CDD 77           	ld (hl),a
 66+  8CDE 23           	inc hl
 67+  8CDF 7A               ld a,d
 68+  8CE0 AE               xor (hl)
 69+  8CE1 77           	ld (hl),a
 70+  8CE2 23           	inc hl
 71+  8CE3 D1           	pop de
 72+  8CE4 7B               ld a,e
 73+  8CE5 AE               xor (hl)
 74+  8CE6 77           	ld (hl),a
 75+  8CE7 2B           	dec hl
 76+  8CE8 2B           	dec hl
 77+  8CE9 24           	inc h
 78+  8CEA 7C               ld a,h
 79+  8CEB E6 07            and 7
 80+  8CED 20 0A            jr nz,2F
 81+  8CEF 7D               ld a,l
 82+  8CF0 C6 20            add a,$20
 83+  8CF2 6F               ld l,a
 84+  8CF3 38 04            jr c,2F
 85+  8CF5 7C               ld a,h
 86+  8CF6 D6 08            sub 8
 87+  8CF8 67               ld h,a
 88+  8CF9 7C           2 ld a,h
 89+  8CFA FE 58            cp $58
 90+  8CFC 28 25            jr z,4F
 91+  8CFE 7A               ld a,d
 92+  8CFF AE               xor (hl)
 93+  8D00 77               ld (hl),a
 94+  8D01 D1           	pop de
 95+  8D02 23           	inc hl
 96+  8D03 7B               ld a,e
 97+  8D04 AE               xor (hl)
 98+  8D05 77           	ld (hl),a
 99+  8D06 23           	inc hl
100+  8D07 7A               ld a,d
101+  8D08 AE               xor (hl)
102+  8D09 77           	ld (hl),a
103+  8D0A 2B           	dec hl
104+  8D0B 2B           	dec hl
105+  8D0C 24           	inc h
106+  8D0D 7C               ld a,h
107+  8D0E E6 07            and 7
108+  8D10 20 0A            jr nz,3F
109+  8D12 7D               ld a,l
110+  8D13 C6 20            add a,$20
111+  8D15 6F               ld l,a
112+  8D16 38 04            jr c,3F
113+  8D18 7C               ld a,h
114+  8D19 D6 08            sub 8
115+  8D1B 67               ld h,a
116+  8D1C 7C           3 ld a,h
117+  8D1D FE 58            cp $58
118+  8D1F 28 02            jr z,4F
119+  8D21 10 B7            djnz 1B
120+  8D23 ED 7B C4 85  4 ld sp,(Stack)
121+  8D27 C9           	ret
122+  8D28
123+  8D28              ; ---------------------------------------------------
124+  8D28
125+  8D28 ED 73 C4 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
126+  8D2C FD F9        	ld sp,iy
127+  8D2E
128+  8D2E              ; >>>
129+  8D2E
130+  8D2E 06 10            ld b,16
131+  8D30 D1           1 pop de
132+  8D31 7A           	ld a,d
133+  8D32 AE           	xor (hl)
134+  8D33 77           	ld (hl),a
135+  8D34 24           	inc h
136+  8D35 7C               ld a,h
137+  8D36 E6 07            and 7
138+  8D38 20 0C            jr nz,2F
139+  8D3A 7D               ld a,l
140+  8D3B C6 20            add a,$20
141+  8D3D 6F               ld l,a
142+  8D3E 38 06            jr c,2F
143+  8D40 7C               ld a,h
144+  8D41 D6 08            sub 8
145+  8D43 67               ld h,a
146+  8D44 18 00            jr 2F
147+  8D46 7C           2 ld a,h
148+  8D47 FE 58            cp $58
149+  8D49 28 02            jr z,3F
150+  8D4B 10 E3            djnz 1B
151+  8D4D ED 7B C4 85  3 ld sp,(Stack)
152+  8D51 C9           	ret
153+  8D52
154+  8D52 ED 73 C4 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
155+  8D56 FD F9        	ld sp,iy
156+  8D58
157+  8D58              ; >>>
158+  8D58
159+  8D58 06 10            ld b,16
160+  8D5A D1           1 pop de
161+  8D5B 7B           	ld a,e
162+  8D5C AE           	xor (hl)
163+  8D5D 77           	ld (hl),a
164+  8D5E 24           	inc h
165+  8D5F 7C               ld a,h
166+  8D60 E6 07            and 7
167+  8D62 20 0C            jr nz,2F
168+  8D64 7D               ld a,l
169+  8D65 C6 20            add a,$20
170+  8D67 6F               ld l,a
171+  8D68 38 06            jr c,2F
172+  8D6A 7C               ld a,h
173+  8D6B D6 08            sub 8
174+  8D6D 67               ld h,a
175+  8D6E 18 00            jr 2F
176+  8D70 7C           2 ld a,h
177+  8D71 FE 58            cp $58
178+  8D73 28 02            jr z,3F
179+  8D75 10 E3            djnz 1B
180+  8D77 ED 7B C4 85  3 ld sp,(Stack)
181+  8D7B C9           	ret
182+  8D7C
183+  8D7C              ; ---------------------------------------------------
184+  8D7C
185+  8D7C ED 73 C4 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
186+  8D80 FD F9        	ld sp,iy
187+  8D82 06 08            ld b,8
188+  8D84 D1           1 pop de
189+  8D85 7A           	ld a,d
190+  8D86 AE           	xor (hl)
191+  8D87 77           	ld (hl),a
192+  8D88 23           	inc hl
193+  8D89 D1           	pop de
194+  8D8A 7B           	ld a,e
195+  8D8B AE           	xor (hl)
196+  8D8C 77           	ld (hl),a
197+  8D8D 2B           	dec hl
198+  8D8E 24            	inc h
199+  8D8F 7C               ld a,h
200+  8D90 E6 07            and 7
201+  8D92 20 0A            jr nz,2F
202+  8D94 7D               ld a,l
203+  8D95 C6 20            add a,$20
204+  8D97 6F               ld l,a
205+  8D98 38 04            jr c,2F
206+  8D9A 7C               ld a,h
207+  8D9B D6 08            sub 8
208+  8D9D 67               ld h,a
209+  8D9E 7C           2 ld a,h
210+  8D9F FE 58            cp $58
211+  8DA1 28 20            jr z,4F
212+  8DA3 D1               pop de
213+  8DA4 7B           	ld a,e
214+  8DA5 AE           	xor (hl)
215+  8DA6 77           	ld (hl),a
216+  8DA7 23           	inc hl
217+  8DA8 7A           	ld a,d
218+  8DA9 AE           	xor (hl)
219+  8DAA 77           	ld (hl),a
220+  8DAB 2B           	dec hl
221+  8DAC 24           	inc h
222+  8DAD 7C               ld a,h
223+  8DAE E6 07            and 7
224+  8DB0 20 0A            jr nz,3F
225+  8DB2 7D               ld a,l
226+  8DB3 C6 20            add a,$20
227+  8DB5 6F               ld l,a
228+  8DB6 38 04            jr c,3F
229+  8DB8 7C               ld a,h
230+  8DB9 D6 08            sub 8
231+  8DBB 67               ld h,a
232+  8DBC 7C           3 ld a,h
233+  8DBD FE 58            cp $58
234+  8DBF 28 02            jr z,4F
235+  8DC1 10 C1            djnz 1B
236+  8DC3 ED 7B C4 85  4 ld sp,(Stack)
237+  8DC7 C9           	ret
238+  8DC8
239+  8DC8 ED 73 C4 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
240+  8DCC FD F9        	ld sp,iy
241+  8DCE 06 08            ld b,8
242+  8DD0 D1           1 pop de
243+  8DD1 D1           	pop de
244+  8DD2 7B           	ld a,e
245+  8DD3 AE           	xor (hl)
246+  8DD4 77           	ld (hl),a
247+  8DD5 24            	inc h
248+  8DD6 7C               ld a,h
249+  8DD7 E6 07            and 7
250+  8DD9 20 0A            jr nz,2F
251+  8DDB 7D               ld a,l
252+  8DDC C6 20            add a,$20
253+  8DDE 6F               ld l,a
254+  8DDF 38 04            jr c,2F
255+  8DE1 7C               ld a,h
256+  8DE2 D6 08            sub 8
257+  8DE4 67               ld h,a
258+  8DE5 7C           2 ld a,h
259+  8DE6 FE 58            cp $58
260+  8DE8 28 1B            jr z,4F
261+  8DEA D1               pop de
262+  8DEB 7A           	ld a,d
263+  8DEC AE           	xor (hl)
264+  8DED 77           	ld (hl),a
265+  8DEE 24           	inc h
266+  8DEF 7C               ld a,h
267+  8DF0 E6 07            and 7
268+  8DF2 20 0A            jr nz,3F
269+  8DF4 7D               ld a,l
270+  8DF5 C6 20            add a,$20
271+  8DF7 6F               ld l,a
272+  8DF8 38 04            jr c,3F
273+  8DFA 7C               ld a,h
274+  8DFB D6 08            sub 8
275+  8DFD 67               ld h,a
276+  8DFE 7C           3 ld a,h
277+  8DFF FE 58            cp $58
278+  8E01 28 02            jr z,4F
279+  8E03 10 CB            djnz 1B
280+  8E05 ED 7B C4 85  4 ld sp,(Stack)
281+  8E09 C9           	ret
282+  8E0A
283+  8E0A ED 73 C4 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
284+  8E0E FD F9        	ld sp,iy
285+  8E10 06 08            ld b,8
286+  8E12 D1           1 pop de
287+  8E13 7B           	ld a,e
288+  8E14 AE           	xor (hl)
289+  8E15 77           	ld (hl),a
290+  8E16 23           	inc hl
291+  8E17 7A           	ld a,d
292+  8E18 AE           	xor (hl)
293+  8E19 77           	ld (hl),a
294+  8E1A 2B           	dec hl
295+  8E1B 24             	inc h
296+  8E1C 7C               ld a,h
297+  8E1D E6 07            and 7
298+  8E1F 20 0A            jr nz,2F
299+  8E21 7D               ld a,l
300+  8E22 C6 20            add a,$20
301+  8E24 6F               ld l,a
302+  8E25 38 04            jr c,2F
303+  8E27 7C               ld a,h
304+  8E28 D6 08            sub 8
305+  8E2A 67               ld h,a
306+  8E2B 7C           2 ld a,h
307+  8E2C FE 58            cp $58
308+  8E2E 28 21            jr z,4F
309+  8E30 D1               pop de
310+  8E31 7A           	ld a,d
311+  8E32 AE           	xor (hl)
312+  8E33 77           	ld (hl),a
313+  8E34 23           	inc hl
314+  8E35 D1               pop de
315+  8E36 7B           	ld a,e
316+  8E37 AE           	xor (hl)
317+  8E38 77           	ld (hl),a
318+  8E39 2B           	dec hl
319+  8E3A 24           	inc h
320+  8E3B 7C               ld a,h
321+  8E3C E6 07            and 7
322+  8E3E 20 0A            jr nz,3F
323+  8E40 7D               ld a,l
324+  8E41 C6 20            add a,$20
325+  8E43 6F               ld l,a
326+  8E44 38 04            jr c,3F
327+  8E46 7C               ld a,h
328+  8E47 D6 08            sub 8
329+  8E49 67               ld h,a
330+  8E4A 7C           3 ld a,h
331+  8E4B FE 58            cp $58
332+  8E4D 28 02            jr z,4F
333+  8E4F 10 C1            djnz 1B
334+  8E51 ED 7B C4 85  4 ld sp,(Stack)
335+  8E55 C9           	ret
336+  8E56
337+  8E56 ED 73 C4 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
338+  8E5A FD F9        	ld sp,iy
339+  8E5C 06 08            ld b,8
340+  8E5E D1           1 pop de
341+  8E5F 7B           	ld a,e
342+  8E60 AE           	xor (hl)
343+  8E61 77           	ld (hl),a
344+  8E62 24            	inc h
345+  8E63 7C               ld a,h
346+  8E64 E6 07            and 7
347+  8E66 20 0A            jr nz,2F
348+  8E68 7D               ld a,l
349+  8E69 C6 20            add a,$20
350+  8E6B 6F               ld l,a
351+  8E6C 38 04            jr c,2F
352+  8E6E 7C               ld a,h
353+  8E6F D6 08            sub 8
354+  8E71 67               ld h,a
355+  8E72 7C           2 ld a,h
356+  8E73 FE 58            cp $58
357+  8E75 28 1C            jr z,4F
358+  8E77 D1               pop de
359+  8E78 7A           	ld a,d
360+  8E79 AE           	xor (hl)
361+  8E7A 77           	ld (hl),a
362+  8E7B 24           	inc h
363+  8E7C 7C               ld a,h
364+  8E7D E6 07            and 7
365+  8E7F 20 0A            jr nz,3F
366+  8E81 7D               ld a,l
367+  8E82 C6 20            add a,$20
368+  8E84 6F               ld l,a
369+  8E85 38 04            jr c,3F
370+  8E87 7C               ld a,h
371+  8E88 D6 08            sub 8
372+  8E8A 67               ld h,a
373+  8E8B 7C           3 ld a,h
374+  8E8C FE 58            cp $58
375+  8E8E 28 03            jr z,4F
376+  8E90 D1               pop de
377+  8E91 10 CB            djnz 1B
378+  8E93 ED 7B C4 85  4 ld sp,(Stack)
379+  8E97 C9           	ret
380+  8E98
381+  8E98              ; ---------------------------------------------------
382+  8E98
# file closed: Rutinas_de_impresion_sprites.asm
782   8E98              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8E98              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8E98              ;
  3+  8E98              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8E98              ;
  5+  8E98              ; *****************************************************************************************************************************************************************************************
  6+  8E98              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8E98
  8+  8E98 7C           calcula_tercio ld a,h
  9+  8E99 E6 18        	and $18
 10+  8E9B CB 2F        	sra a
 11+  8E9D CB 2F        	sra a
 12+  8E9F CB 2F        	sra a
 13+  8EA1 C9           	ret
 14+  8EA2
# file closed: calcula_tercio.asm
783   8EA2              	include "Cls.asm"
# file opened: Cls.asm
  1+  8EA2              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8EA2              ;
  3+  8EA2              ;
  4+  8EA2              ;	CLS.
  5+  8EA2              ;
  6+  8EA2              ;	Limpia la pantalla y define sus atributos.
  7+  8EA2              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8EA2              ;
  9+  8EA2              ;	COLORES: 0 ..... NEGRO
 10+  8EA2              ;    		 1 ..... AZUL
 11+  8EA2              ; 			 2 ..... ROJO
 12+  8EA2              ;			 3 ..... MAGENTA
 13+  8EA2              ; 			 4 ..... VERDE
 14+  8EA2              ; 			 5 ..... CIAN
 15+  8EA2              ;			 6 ..... AMARILLO
 16+  8EA2              ; 			 7 ..... BLANCO
 17+  8EA2              ;
 18+  8EA2              ;	INPUT: A contiene los atributos de pantalla.
 19+  8EA2              ;
 20+  8EA2              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8EA2
 22+  8EA2
 23+  8EA2 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8EA5 11 01 40     	LD DE,$4001
 25+  8EA8 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8EAB 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8EAD ED B0        	LDIR
 28+  8EAF 01 FF 02     	LD BC,767
 29+  8EB2 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8EB3 ED B0        	LDIR
 31+  8EB5 C9           	ret
 32+  8EB6
# file closed: Cls.asm
784   8EB6              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8EB6              ; ******************************************************************************************************************************************************************************************
  2+  8EB6              ;
  3+  8EB6              ;   22/01/23
  4+  8EB6              ;
  5+  8EB6              ;	Mov_down
  6+  8EB6              ;
  7+  8EB6              ; 	Mueve el Sprite X px hacia abajo.
  8+  8EB6              ;
  9+  8EB6              ;
 10+  8EB6 21 AF 85     Mov_down ld hl,Ctrl_0
 11+  8EB9 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8EBB              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8EBB              ; 																	; _ en el caso de que no lo haya.
 14+  8EBB 3A 9A 85     	ld a,(Vel_down)
 15+  8EBE 47           	ld b,a
 16+  8EBF 2A 84 85         ld hl,(Posicion_actual)
 17+  8EC2 CD 98 8E     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8EC5 E6 02        	and 2
 19+  8EC7 28 0F        	jr z,1F
 20+  8EC9
 21+  8EC9              ; Nos encontramos en el último tercio de pantalla.
 22+  8EC9              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8EC9
 24+  8EC9 7C           	ld a,h
 25+  8ECA FE 57        	cp $57
 26+  8ECC 20 0A        	jr nz,1F
 27+  8ECE 7D           	ld a,l
 28+  8ECF C6 20        	add $20
 29+  8ED1 30 05        	jr nc,1F
 30+  8ED3
 31+  8ED3              ; ------------------------------
 32+  8ED3 CD B4 91     	call Reaparece_arriba
 33+  8ED6              ;	call Reinicio
 34+  8ED6              ; ------------------------------
 35+  8ED6 18 08        	jr 3F
 36+  8ED8 CD 3A 8C     1 call NextScan
 37+  8EDB 22 84 85     	ld (Posicion_actual),hl
 38+  8EDE 10 E2            djnz 2B
 39+  8EE0 CD CA 91     3 call Genera_coordenadas
 40+  8EE3 C9           	ret
 41+  8EE4
 42+  8EE4
 43+  8EE4              ; ******************************************************************************************************************************************************************************************
 44+  8EE4              ;
 45+  8EE4              ;   22/01/23
 46+  8EE4              ;
 47+  8EE4              ;	Mov_up
 48+  8EE4              ;
 49+  8EE4              ; 	Mueve el Sprite hacia arriba.
 50+  8EE4              ;
 51+  8EE4              ;
 52+  8EE4 21 AF 85     Mov_up ld hl,Ctrl_0
 53+  8EE7 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8EE9              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8EE9              ; 																		; _ en el caso de que no lo haya.
 56+  8EE9 3A 99 85     	ld a,(Vel_up)
 57+  8EEC 47           	ld b,a
 58+  8EED 2A 84 85     	ld hl,(Posicion_actual)
 59+  8EF0 CD 98 8E     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8EF3 A7           	and a
 61+  8EF4 20 10        	jr nz,1F
 62+  8EF6
 63+  8EF6              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8EF6              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8EF6
 66+  8EF6 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8EF7 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8EF9 20 0B            jr nz,1F
 69+  8EFB 7D               ld a,l
 70+  8EFC D6 20            sub $20
 71+  8EFE 30 06            jr nc,1F
 72+  8F00 25               dec h
 73+  8F01
 74+  8F01              ; -----------------------------
 75+  8F01 CD A4 91         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8F04              ;	call Reinicio
 77+  8F04              ; -----------------------------
 78+  8F04
 79+  8F04 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8F06 CD 49 8C     1 call PreviousScan
 81+  8F09 22 84 85     	ld (Posicion_actual),hl
 82+  8F0C 10 E2            djnz 3B
 83+  8F0E CD CA 91     2 call Genera_coordenadas
 84+  8F11 C9           	ret
 85+  8F12
 86+  8F12              ; ******************************************************************************************************************************************************************************************
 87+  8F12              ;
 88+  8F12              ;	19/10/22
 89+  8F12              ;
 90+  8F12              ;	Mov_right.
 91+  8F12              ;
 92+  8F12              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8F12              ;
 94+  8F12
 95+  8F12 21 AF 85     Mov_right ld hl,Ctrl_0
 96+  8F15 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8F17              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8F17              ; 																	; _ en el caso de que no lo haya.
 99+  8F17 3A AF 85     	ld a,(Ctrl_0)
100+  8F1A CB 77        	bit 6,a
101+  8F1C 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8F1E
103+  8F1E CD 52 91     	call Stop_Amadeus_right
104+  8F21 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8F22 18 4D        	jr 8F
106+  8F24
107+  8F24 3A 88 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8F27 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8F29 20 46        	jr nz,8F
110+  8F2B
111+  8F2B 3A 8A 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8F2E A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8F2F 28 40        	jr z,8F
114+  8F31
115+  8F31              ; ---------- ---------- ----------
116+  8F31              ;
117+  8F31              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8F31
119+  8F31 3A 98 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8F34 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8F36 28 11        	jr z,1F
122+  8F38 38 06        	jr c,6F
123+  8F3A FE 04        	cp 4
124+  8F3C 28 14        	jr z,7F
125+  8F3E 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8F40
127+  8F40              ; ---------- ---------- ----------
128+  8F40              ;
129+  8F40              ; Perfiles de velocidad
130+  8F40              ;
131+  8F40
132+  8F40 3A 8A 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8F43 FE FE        	cp $fe
134+  8F45 20 2A        	jr nz,8F
135+  8F47 18 10        	jr 3F
136+  8F49 3A 8A 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8F4C FE FD        	cp $fd
138+  8F4E 20 21        	jr nz,8F
139+  8F50 18 07        	jr 3F
140+  8F52 3A 8A 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8F55 FE FB        	cp $fb
142+  8F57 20 18        	jr nz,8F
143+  8F59
144+  8F59              ; ---------- ---------- ----------
145+  8F59
146+  8F59              3
147+  8F59 CD 92 91     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8F5C              ;	call Reinicio
149+  8F5C
150+  8F5C              ; ---------- ---------- ----------
151+  8F5C              ;
152+  8F5C              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8F5C
154+  8F5C 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8F5E C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8F5F CD 78 8F     	call DESPLZ_DER
157+  8F62 C1           	pop bc
158+  8F63 10 F9        	djnz 5B
159+  8F65 2A 84 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8F68 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8F69 22 84 85     	ld (Posicion_actual),hl
162+  8F6C CD CA 91     	call Genera_coordenadas
163+  8F6F 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8F71
165+  8F71              ; ---------- ---------- ----------
166+  8F71
167+  8F71 2A 84 85     8 ld hl,(Posicion_actual)
168+  8F74 CD 78 8F     	call DESPLZ_DER
169+  8F77 C9           2 ret
170+  8F78
171+  8F78              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8F78              ;
173+  8F78              ;	22/9/22
174+  8F78              ;
175+  8F78
176+  8F78 CD 87 8F     DESPLZ_DER call Desplaza_derecha
177+  8F7B CD D3 8F         call modifica_parametros_1er_DESPLZ_2
178+  8F7E CD FC 8F         call Ciclo_completo
179+  8F81 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8F84 CB FE        	set 7,(hl)
181+  8F86 C9           	ret
182+  8F87
183+  8F87              ; ******************************************************************************************************************************************************************************************
184+  8F87              ;	15/02/23
185+  8F87              ;
186+  8F87
187+  8F87 3A 98 85     Desplaza_derecha ld a,(Vel_right)
188+  8F8A 47           	ld b,a
189+  8F8B 2A 90 85     	ld hl,(Puntero_DESPLZ_der)
190+  8F8E 23           1 inc hl
191+  8F8F 23           	inc hl
192+  8F90 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8F92 22 90 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8F95 CD 41 87     	call Extrae_address
195+  8F98 22 86 85     	ld (Puntero_objeto),hl
196+  8F9B
197+  8F9B              ; Modifica (Puntero_DESPLZ_izq).
198+  8F9B
199+  8F9B              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8F9B              ; Cuántos movimientos hemos hecho ??
201+  8F9B              ; DE contiene (Puntero_DESPLZ_der).
202+  8F9B
203+  8F9B 2A 8C 85     7 ld hl,(Indice_Sprite_der)
204+  8F9E EB           	ex de,hl
205+  8F9F A7           	and a
206+  8FA0 ED 52        	sbc hl,de
207+  8FA2 CB 3D        	srl l
208+  8FA4 3E 08        6 ld a,8
209+  8FA6 95           	sub l
210+  8FA7 30 1E        	jr nc,3F
211+  8FA9
212+  8FA9              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8FA9              ; B="0".
214+  8FA9
215+  8FA9 04           4 inc b
216+  8FAA 3C           	inc a
217+  8FAB 20 FC        	jr nz,4B
218+  8FAD 78           	ld a,b
219+  8FAE 08           	ex af,af
220+  8FAF 2A 8C 85     	ld hl,(Indice_Sprite_der)
221+  8FB2 23           5 inc hl
222+  8FB3 23           	inc hl
223+  8FB4 10 FC        	djnz 5B
224+  8FB6 22 90 85     	ld (Puntero_DESPLZ_der),hl
225+  8FB9 CD 41 87     	call Extrae_address
226+  8FBC 22 86 85     	ld (Puntero_objeto),hl
227+  8FBF
228+  8FBF              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8FBF              ; _(Posicion_actual).
230+  8FBF
231+  8FBF 21 84 85     	ld hl,Posicion_actual
232+  8FC2 34           	inc (hl)
233+  8FC3 08               ex af,af
234+  8FC4 6F           	ld l,a
235+  8FC5 18 DD        	jr 6B
236+  8FC7
237+  8FC7              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8FC7
239+  8FC7 47           3 ld b,a
240+  8FC8 2A 8E 85     	ld hl,(Indice_Sprite_izq)
241+  8FCB 23           2 inc hl
242+  8FCC 23           	inc hl
243+  8FCD 10 FC        	djnz 2B
244+  8FCF 22 92 85     	ld (Puntero_DESPLZ_izq),hl
245+  8FD2 C9           8 ret
246+  8FD3
247+  8FD3              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8FD3              ;
249+  8FD3              ;	24/7/22
250+  8FD3              ;
251+  8FD3              ;	modifica_parametros_1er_DESPLZ_2
252+  8FD3              ;
253+  8FD3              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8FD3              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8FD3              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8FD3
257+  8FD3 3A 8A 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8FD6 A7           	and a
259+  8FD7 20 1F        	jr nz,1F
260+  8FD9 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8FDB 32 8A 85         ld (CTRL_DESPLZ),a
262+  8FDE
263+  8FDE 21 83 85     	ld hl,Columns
264+  8FE1 34           	inc (hl)
265+  8FE2 3A 96 85     	ld a,(Cuad_objeto)
266+  8FE5 E6 01        	and 1
267+  8FE7 28 0F        	jr z,1F
268+  8FE9 2A 84 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8FEC 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8FED 22 84 85     	ld (Posicion_actual),hl
271+  8FF0 CD CA 91     	call Genera_coordenadas
272+  8FF3 CD 5E 91     	call Inc_CTRL_DESPLZ
273+  8FF6 18 03        	jr 2F
274+  8FF8 CD 5E 91     1 call Inc_CTRL_DESPLZ
275+  8FFB C9           2 ret
276+  8FFC
277+  8FFC              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8FFC              ;
279+  8FFC              ;	24/7/22
280+  8FFC              ;
281+  8FFC              ;	Ciclo_completo.
282+  8FFC              ;
283+  8FFC              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8FFC              ;
285+  8FFC              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8FFC              ; 	Decrementamos (Columns).
287+  8FFC              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8FFC              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8FFC
290+  8FFC
291+  8FFC 3A 8A 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8FFF FE FF        	cp $ff
293+  9001 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  9003 E6 F0        	and $f0
295+  9005 20 28        	jr nz,3F
296+  9007
297+  9007              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  9007
299+  9007 3A 8A 85     	ld a,(CTRL_DESPLZ)
300+  900A 47           	ld b,a
301+  900B 3E F8        	ld a,$f8
302+  900D 80           	add b
303+  900E 32 8A 85     	ld (CTRL_DESPLZ),a
304+  9011 18 1C        	jr 3F
305+  9013 21 83 85     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  9016 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  9017 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  9018 32 8A 85     	ld (CTRL_DESPLZ),a
309+  901B 3A 96 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  901E E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  9020 20 0A        	jr nz,2F
312+  9022 2A 84 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  9025 23           	inc hl
314+  9026 22 84 85     	ld (Posicion_actual),hl
315+  9029 CD CA 91     	call Genera_coordenadas
316+  902C
317+  902C              ; Inicia el puntero de Sprite.
318+  902C
319+  902C CD 58 87     2 call Inicia_puntero_objeto_der
320+  902F C9           3 ret
321+  9030
322+  9030              ; ******************************************************************************************************************************************************************************************
323+  9030              ;
324+  9030              ;	15/02/23
325+  9030              ;
326+  9030              ;	Mov_left.
327+  9030              ;
328+  9030              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  9030              ;
330+  9030              Mov_left
331+  9030
332+  9030 21 AF 85     	ld hl,Ctrl_0
333+  9033 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  9035              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  9035              ; 																	; _ en el caso de que no lo haya.
336+  9035 3A AF 85     	ld a,(Ctrl_0)
337+  9038 CB 77        	bit 6,a
338+  903A 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  903C
340+  903C CD 58 91     	call Stop_Amadeus_left
341+  903F C8           	ret z
342+  9040 20 50        	jr nz,8F
343+  9042
344+  9042 3A 88 85     11 ld a,(Coordenada_X)
345+  9045 A7           	and a
346+  9046 20 4A        	jr nz,8F
347+  9048
348+  9048 3A 8A 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  904B A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  904C 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  904E
352+  904E              ; ---------- ---------- ----------
353+  904E
354+  904E 3A 97 85     	ld a,(Vel_left)
355+  9051 FE 02        	cp 2
356+  9053 28 0F        	jr z,1F
357+  9055 38 04        	jr c,6F
358+  9057 FE 04        	cp 4
359+  9059 28 12        	jr z,7F
360+  905B
361+  905B              ; ---------- ---------- ----------
362+  905B
363+  905B 3A 8A 85     6 ld a,(CTRL_DESPLZ)
364+  905E FE F9        	cp $f9
365+  9060 20 30        	jr nz,8F
366+  9062 18 10        	jr 4F
367+  9064 3A 8A 85     1 ld a,(CTRL_DESPLZ)
368+  9067 FE FA        	cp $fa
369+  9069 20 27        	jr nz,8F
370+  906B 18 07        	jr 4F
371+  906D 3A 8A 85     7 ld a,(CTRL_DESPLZ)
372+  9070 FE FC        	cp $fc
373+  9072 20 1E        	jr nz,8F
374+  9074
375+  9074              ; ---------- ---------- ----------
376+  9074
377+  9074              4
378+  9074 CD 80 91     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  9077              ;	call Reinicio
380+  9077
381+  9077              ; ---------- ---------- ----------
382+  9077
383+  9077 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  9079 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  907A
386+  907A 2A 8E 85     	ld hl,(Indice_Sprite_izq)
387+  907D 22 92 85     	ld (Puntero_DESPLZ_izq),hl
388+  9080
389+  9080 CD 99 90     	call DESPLZ_IZQ
390+  9083 C1           	pop bc
391+  9084 10 F3        	djnz 5B
392+  9086 2A 84 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  9089 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  908A 22 84 85     	ld (Posicion_actual),hl
395+  908D CD CA 91     	call Genera_coordenadas
396+  9090 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  9092
398+  9092              ; ---------- ---------- ----------
399+  9092              ; Movemos, no hay recolocación.
400+  9092
401+  9092 2A 84 85     8 ld hl,(Posicion_actual)
402+  9095 CD 99 90     	call DESPLZ_IZQ
403+  9098 C9           2 ret
404+  9099
405+  9099              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  9099              ;
407+  9099              ;	22/9/22
408+  9099
409+  9099              DESPLZ_IZQ
410+  9099
411+  9099 CD A8 90     	call Desplaza_izquierda
412+  909C CD F4 90         call modifica_parametros_1er_DESPLZ
413+  909F CD 1C 91     	call Ciclo_completo_2
414+  90A2 21 AF 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  90A5 CB BE        	res 7,(hl)
416+  90A7 C9           	ret
417+  90A8
418+  90A8              Desplaza_izquierda
419+  90A8
420+  90A8 3A 97 85     	ld a,(Vel_left)
421+  90AB 47           	ld b,a
422+  90AC 2A 92 85     	ld hl,(Puntero_DESPLZ_izq)
423+  90AF 23           1 inc hl
424+  90B0 23           	inc hl
425+  90B1 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  90B3 22 92 85     	ld (Puntero_DESPLZ_izq),hl
427+  90B6 CD 41 87     	call Extrae_address
428+  90B9 22 86 85     	ld (Puntero_objeto),hl
429+  90BC
430+  90BC              ; Modifica (Puntero_DESPLZ_der).
431+  90BC
432+  90BC              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  90BC              ; Cuántos movimientos hemos hecho ??
434+  90BC              ; DE contiene (Puntero_DESPLZ_izq).
435+  90BC
436+  90BC 2A 8E 85     7 ld hl,(Indice_Sprite_izq)
437+  90BF EB           	ex de,hl
438+  90C0 A7           	and a
439+  90C1 ED 52        	sbc hl,de
440+  90C3 CB 3D        	srl l
441+  90C5 3E 08        6 ld a,8
442+  90C7 95           	sub l
443+  90C8 30 1E        	jr nc,3F
444+  90CA
445+  90CA              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  90CA              ; B="0".
447+  90CA
448+  90CA 04           4 inc b
449+  90CB 3C           	inc a
450+  90CC 20 FC        	jr nz,4B
451+  90CE 78           	ld a,b
452+  90CF 08           	ex af,af
453+  90D0 2A 8E 85     	ld hl,(Indice_Sprite_izq)
454+  90D3 23           5 inc hl
455+  90D4 23           	inc hl
456+  90D5 10 FC        	djnz 5B
457+  90D7 22 92 85     	ld (Puntero_DESPLZ_izq),hl
458+  90DA CD 41 87     	call Extrae_address
459+  90DD 22 86 85     	ld (Puntero_objeto),hl
460+  90E0
461+  90E0              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  90E0              ; _(Posicion_actual).
463+  90E0
464+  90E0 21 84 85     	ld hl,Posicion_actual
465+  90E3 35           	dec (hl)
466+  90E4 08           	ex af,af
467+  90E5 6F           	ld l,a
468+  90E6 18 DD        	jr 6B
469+  90E8
470+  90E8              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  90E8
472+  90E8 47           3 ld b,a
473+  90E9 2A 8C 85     	ld hl,(Indice_Sprite_der)
474+  90EC 23           2 inc hl
475+  90ED 23           	inc hl
476+  90EE 10 FC        	djnz 2B
477+  90F0 22 90 85     	ld (Puntero_DESPLZ_der),hl
478+  90F3 C9           8 ret
479+  90F4
480+  90F4              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  90F4              ;
482+  90F4              ;	modifica_parametros_1er_DESPLZ
483+  90F4              ;
484+  90F4              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  90F4              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  90F4              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  90F4
488+  90F4 3A 8A 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  90F7 A7           	and a
490+  90F8 20 1E        	jr nz,1F
491+  90FA 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  90FB 32 8A 85         ld (CTRL_DESPLZ),a
493+  90FE 21 83 85     	ld hl,Columns
494+  9101 34           	inc (hl)
495+  9102 3A 96 85     	ld a,(Cuad_objeto)
496+  9105 E6 01        	and 1
497+  9107 20 0F        	jr nz,1F
498+  9109 2A 84 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  910C 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  910D 22 84 85     	ld (Posicion_actual),hl
501+  9110 CD CA 91     	call Genera_coordenadas
502+  9113 CD 6F 91     	call Dec_CTRL_DESPLZ
503+  9116 18 03        	jr 2F
504+  9118 CD 6F 91     1 call Dec_CTRL_DESPLZ
505+  911B C9           2 ret
506+  911C
507+  911C              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  911C
509+  911C 3A 8A 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  911F FE F7        	cp $f7
511+  9121 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  9123 30 2C        	jr nc,3F
513+  9125
514+  9125              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  9125
516+  9125 06 00        	ld b,0
517+  9127 04           4 inc b
518+  9128 3C           	inc a
519+  9129 FE F7        	cp $f7
520+  912B 20 FA        	jr nz,4B
521+  912D 3E FF        	ld a,$ff
522+  912F 90           	sub b
523+  9130 32 8A 85     	ld (CTRL_DESPLZ),a
524+  9133 18 1C        	jr 3F
525+  9135
526+  9135              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  9135
528+  9135 21 83 85     1 ld hl,Columns
529+  9138 35           	dec (hl)
530+  9139 AF           	xor a
531+  913A 32 8A 85     	ld (CTRL_DESPLZ),a
532+  913D 3A 96 85     	ld a,(Cuad_objeto)
533+  9140 E6 01        	and 1
534+  9142 28 0A        	jr z,2F
535+  9144 2A 84 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  9147 2B           	dec hl
537+  9148 22 84 85     	ld (Posicion_actual),hl
538+  914B CD CA 91     	call Genera_coordenadas
539+  914E
540+  914E              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  914E
542+  914E CD 6B 87     2 call Inicia_puntero_objeto_izq
543+  9151 C9           3 ret
544+  9152
545+  9152              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  9152              ;
547+  9152              ;	19/10/22
548+  9152              ;
549+  9152              ;	(cp 29) para un Amadeus de 3 Columns.
550+  9152              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  9152
552+  9152 3A 88 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  9155 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  9157 C9           	ret
555+  9158
556+  9158              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  9158              ;
558+  9158              ;	19/10/22
559+  9158              ;
560+  9158              ;	(cp 2) para un Amadeus de 3 Columns.
561+  9158              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  9158
563+  9158 3A 88 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  915B FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  915D C9           	ret
566+  915E
567+  915E              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  915E              ;
569+  915E              ;	24/7/22
570+  915E              ;
571+  915E              ;	Inc_CTRL_DESPLZ
572+  915E              ;
573+  915E              ;
574+  915E              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  915E
576+  915E 21 8A 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  9161 3A 98 85     	ld a,(Vel_right)
578+  9164 A7           	and a
579+  9165 28 06        	jr z,1F
580+  9167 47           	ld b,a
581+  9168 34           3 inc (hl)
582+  9169 10 FD        	djnz 3B
583+  916B 18 01        	jr 2F
584+  916D 34           1 inc (hl)
585+  916E C9           2 ret
586+  916F
587+  916F              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  916F              ;
589+  916F              ;	5/2/23
590+  916F              ;
591+  916F              ;	Dec_CTRL_DESPLZ
592+  916F              ;
593+  916F              ;
594+  916F              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  916F
596+  916F 21 8A 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9172 3A 97 85     	ld a,(Vel_left)
598+  9175 A7           	and a
599+  9176 28 06        	jr z,1F
600+  9178 47           	ld b,a
601+  9179 35           3 dec (hl)
602+  917A 10 FD        	djnz 3B
603+  917C 18 01        	jr 2F
604+  917E 35           1 dec (hl)
605+  917F C9           2 ret
606+  9180
607+  9180              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9180
609+  9180 2A 84 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9183 01 1F 00     	ld bc,31
611+  9186 A7           	and a
612+  9187 ED 4A        	adc hl,bc
613+  9189 22 84 85     	ld (Posicion_actual),hl
614+  918C 21 AF 85     	ld hl,Ctrl_0														; $xxx1
615+  918F CB C6        	set 0,(hl)
616+  9191 C9           	ret
617+  9192
618+  9192              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9192
620+  9192 2A 84 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9195 01 1F 00     	ld bc,31
622+  9198 A7           	and a
623+  9199 ED 42        	sbc hl,bc
624+  919B 22 84 85     	ld (Posicion_actual),hl 											; $xx1x
625+  919E 21 AF 85     	ld hl,Ctrl_0
626+  91A1 CB CE        	set 1,(hl)
627+  91A3 C9           	ret
628+  91A4
629+  91A4              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  91A4
631+  91A4 24           Reaparece_abajo inc h
632+  91A5 01 E0 17     	ld bc,$17e0
633+  91A8 A7           	and a
634+  91A9 ED 4A        	adc hl,bc
635+  91AB 22 84 85     	ld (Posicion_actual),hl
636+  91AE 21 AF 85     	ld hl,Ctrl_0
637+  91B1 CB D6        	set 2,(hl)
638+  91B3 C9           	ret
639+  91B4
640+  91B4              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  91B4
642+  91B4 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  91B7 A7           	and a
644+  91B8 ED 42        	sbc hl,bc
645+  91BA 22 84 85     	ld (Posicion_actual),hl
646+  91BD 21 AF 85     	ld hl,Ctrl_0
647+  91C0 CB DE        	set 3,(hl)
648+  91C2 C9           	ret
649+  91C3
650+  91C3              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  91C3
652+  91C3 2A 94 85     Reinicio ld hl,(Posicion_inicio)
653+  91C6 22 84 85     	ld (Posicion_actual),hl
654+  91C9 C9           	ret
# file closed: Direcciones.asm
785   91CA              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  91CA              ;	12/12/22
  2+  91CA              ;
  3+  91CA              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  91CA              ;	Fila superior "0", Columna izquierda "0".
  5+  91CA              ;
  6+  91CA              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  91CA              ;
  8+  91CA              ;	Modifica: A
  9+  91CA
 10+  91CA C5           Genera_coordenadas push bc
 11+  91CB E5           	push hl
 12+  91CC 2A 84 85     	ld hl,(Posicion_actual)
 13+  91CF 7D           	ld a,l
 14+  91D0 E6 1F        	and $1f
 15+  91D2 32 88 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  91D5 CD 98 8E     	call calcula_tercio
 17+  91D8 47           	ld b,a
 18+  91D9 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  91DA 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  91DC 7D           	ld a,l
 21+  91DD E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  91DF 28 05        	jr z,2F
 23+  91E1 0C           1 inc c
 24+  91E2 D6 20        	sub 32
 25+  91E4 20 FB        	jr nz,1B
 26+  91E6 0C           2 inc c
 27+  91E7 04           	inc b
 28+  91E8 05           	dec b
 29+  91E9 28 04        	jr z,3F
 30+  91EB 3E E0        	ld a,$e0
 31+  91ED 10 F2        	djnz 1B
 32+  91EF 79           3 ld a,c
 33+  91F0 3D           	dec a
 34+  91F1 32 89 85     	ld (Coordenada_y),a
 35+  91F4 E1           	pop hl
 36+  91F5 C1           	pop bc
 37+  91F6 C9           	ret
# file closed: Genera_coordenadas.asm
786   91F7              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  91F7
  2+  91F7
  3+  91F7              ;   11/8/22
  4+  91F7              ;
  5+  91F7              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  91F7              ;
  7+  91F7              ;   Mov_obj.asm
  8+  91F7              ;
  9+  91F7              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  91F7              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  91F7              ;
 12+  91F7              ;   Codificación:
 13+  91F7              ;
 14+  91F7              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  91F7
 16+  91F7              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  91F7
 18+  91F7 02 40 00     Arriba db 2,%01000000,0
 19+  91FA 02 80 00     Abajo db 2,%10000000,0
 20+  91FD 02 20 00     Derecha db 2,%00100000,0
 21+  9200 02 10 00     Izquierda db 2,%00010000,0
 22+  9203 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9207 60 42 60 40
 22+  920B 63
 23+  920C 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  9210 22 A3 80 A0
 24+  9214 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9218 84 A0 83 A0
 25+  921C 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  9220 80 A3 22 A0
 26+  9224 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  9228 40 60 42 60
 27+  922C 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  9230 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  9234 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  9238 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  923C 84
 31+  923D 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  9241 84 00
 32+  9243 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  9247 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  924B 1F 1F 1F 1F
 34+  924F 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  9253 1F 1F 1F 1F
 34+  9257 1F
 35+  9258 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  925C 2F 2F 2F 2F
 35+  9260 2F 2F
 36+  9262 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  9266 2F 2F 00
 37+  9269
 38+  9269
 39+  9269              ; ----- ----- ----- ----- -----
 40+  9269
 41+  9269 47 92        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  926B 43 92        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  926D 00 92        Indice_mov_Izquierda defw Izquierda
 44+  926F FD 91        Indice_mov_Derecha defw Derecha
 45+  9271 FA 91        Indice_mov_Abajo defw Abajo
 46+  9273 F7 91        Indice_mov_Arriba defw Arriba
 47+  9275 34 92        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  9277 38 92        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  9279 30 92        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  927B 3D 92        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  927D 03 92        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  927F              ; ----- ----- ----- ----- -----
 53+  927F
 54+  927F 3A B5 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9282 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9283 28 02            jr z,1F
 57+  9285 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  9287 3A B6 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  928A C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  928C 32 B6 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  928F              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  928F 2A B3 85         ld hl,(Puntero_mov)
 63+  9292 7E               ld a,(hl)
 64+  9293 32 B5 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  9296 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  9297 22 B3 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  929A
 68+  929A 3A B7 85     Decoder ld a,(Repetimos_db)
 69+  929D A7               and a
 70+  929E 20 0C            jr nz,12F
 71+  92A0 2A B3 85         ld hl,(Puntero_mov)
 72+  92A3 7E               ld a,(hl)
 73+  92A4 A7               and a
 74+  92A5 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  92A7 E6 0F            and $0f
 76+  92A9 32 B7 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  92AC              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  92AC 2A B3 85     12 ld hl,(Puntero_mov)
 79+  92AF CB 7E            bit 7,(hl)
 80+  92B1 28 03            jr z,2F
 81+  92B3 CD B6 8E         call Mov_down
 82+  92B6 2A B3 85     2 ld hl, (Puntero_mov)
 83+  92B9 CB 76            bit 6,(hl)
 84+  92BB 28 03            jr z,3F
 85+  92BD CD E4 8E         call Mov_up
 86+  92C0 2A B3 85     3 ld hl, (Puntero_mov)
 87+  92C3 CB 6E            bit 5,(hl)
 88+  92C5 28 03            jr z,4F
 89+  92C7 CD 12 8F         call Mov_right
 90+  92CA 2A B3 85     4 ld hl, (Puntero_mov)
 91+  92CD CB 66            bit 4,(hl)
 92+  92CF 28 03            jr z,5F
 93+  92D1 CD 30 90         call Mov_left
 94+  92D4
 95+  92D4              ; ---------- --------- --------- ---------- ----------
 96+  92D4
 97+  92D4 3A B7 85     5 ld a,(Repetimos_db)
 98+  92D7 A7               and a
 99+  92D8 28 07            jr z,6F
100+  92DA 3D               dec a
101+  92DB 32 B7 85         ld (Repetimos_db),a
102+  92DE 28 01            jr z,6f
103+  92E0 C9           11 ret
104+  92E1 21 B5 85     6 ld hl,Contador_db_mov
105+  92E4 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  92E5 2A B3 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  92E8 23               inc hl
108+  92E9 22 B3 85         ld (Puntero_mov),hl
109+  92EC 18 F2            jr 11B
110+  92EE 2A B1 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  92F1 3A B6 85         ld a,(Incrementa_puntero)
112+  92F4 47               ld b,a
113+  92F5 23           8 inc hl
114+  92F6 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  92F8 5E               ld e,(hl)
116+  92F9 23               inc hl
117+  92FA 56               ld d,(hl)
118+  92FB EB               ex de,hl
119+  92FC 22 B3 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  92FF 18 DF            jr 11B
121+  9301
122+  9301              ; ---------- --------- --------- ---------- ----------
123+  9301              ;
124+  9301              ;   11/8/22
125+  9301              ;
126+  9301              ;   Prepara_Puntero_mov
127+  9301
128+  9301 E5           Prepara_Puntero_mov push hl
129+  9302 D5               push de
130+  9303 2A B1 85         ld hl,(Puntero_indice_mov)
131+  9306 5E               ld e,(hl)
132+  9307 23               inc hl
133+  9308 56               ld d,(hl)
134+  9309 EB               ex de,hl
135+  930A 22 B3 85         ld (Puntero_mov),hl
136+  930D D1               pop de
137+  930E E1               pop hl
138+  930F C9               ret
139+  9310
140+  9310              ; ---------- --------- --------- ---------- ----------
141+  9310              ;
142+  9310              ;   11/8/22
143+  9310              ;
144+  9310              ;   Reinicia_el_movimiento
145+  9310
146+  9310 CD 01 93     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  9313 AF               xor a
148+  9314 32 B5 85         ld (Contador_db_mov),a
149+  9317 32 B6 85         ld (Incrementa_puntero),a
150+  931A
151+  931A              ;    jr $
152+  931A
153+  931A C3 7F 92         jp Movimiento
154+  931D C9               ret
155+  931E              ; ---------- --------- --------- ---------- ----------
156+  931E
157+  931E
158+  931E
159+  931E
160+  931E
161+  931E
162+  931E
163+  931E
164+  931E
165+  931E
166+  931E
167+  931E
168+  931E
169+  931E
170+  931E
171+  931E
172+  931E
173+  931E
# file closed: Patrones_de_mov.asm
787   931E              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  931E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  931E              ;
  3+  931E              ;	3/1/23
  4+  931E              ;
  5+  931E              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  931E
  7+  931E              ;	ADC HL,SP	LD (addr),SP
  8+  931E              ;	ADD HL,SP	LD SP,(addr)
  9+  931E              ;	ADD IX,SP	LD SP,nn
 10+  931E              ; 	ADD IY,SP	LD SP,HL
 11+  931E              ;				LD SP,IX
 12+  931E              ;	DEC SP		LD SP,IY
 13+  931E
 14+  931E              ;	EX (SP),HL
 15+  931E              ;	EX (SP),IX
 16+  931E              ;	EX (SP),IY
 17+  931E
 18+  931E              ;	INC SP
 19+  931E
 20+  931E
 21+  931E                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 C4 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A C8 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 C8 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B C4 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
788   7FC0
789   7FC0              	SAVESNA "Pruebas.sna", START
790   7FC0
791   7FC0
792   7FC0
# file closed: Banco_de_pruebas.asm
