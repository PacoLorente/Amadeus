# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 89 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 31/01/23
  5+  83C0
  6+  83C0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83C0
  8+  83C0 06 84        	defw Entidad_1
  9+  83C2 40 84        	defw Entidad_2
 10+  83C4 7A 84        	defw Entidad_3
 11+  83C6 B4 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6
 28+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite_der).
 29+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite_izq).
 30+  83DA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83DC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83DE
 33+  83DE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83E0 04           	db 4 											; (Cuad_objeto).
 35+  83E1
 36+  83E1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83E5
 38+  83E5 00 00        	db 0,0											; Variables_de_borrado
 39+  83E7 00 00        	defw 0											;	" " " " " " "
 40+  83E9 00 00        	defw 0											;	" " " " " " "
 41+  83EB 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 42+  83EF
 43+  83EF 00 00        	db 0,0											; Variables_de_pintado
 44+  83F1 00 00        	defw 0											;	" " " " " " "
 45+  83F3 00 00        	defw 0											;	" " " " " " "
 46+  83F5 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 47+  83F9
 48+  83F9 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  83FB
 50+  83FB 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  83FF 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8402
 53+  8402 00           	db 0 											; (Columnas).
 54+  8403 00 00        	defw 0											; (Limite_horizontal).
 55+  8405 00           	db 0											; (Limite_vertical).
 56+  8406
 57+  8406              ; ---------- ---------- ---------- ---------- ----------
 58+  8406
 59+  8406 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8408 00 00        	defw 0											; (Posicion_actual).
 61+  840A 00 00        	defw 0 											; (Puntero_objeto).
 62+  840C 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 63+  840F
 64+  840F 00           	db %00000000 									; (Attr).
 65+  8410
 66+  8410 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8412 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8414 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8416 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8418
 71+  8418 00 00        	defw 0											; (Posicion_inicio).
 72+  841A 00           	db 0											; (Cuad_objeto).
 73+  841B
 74+  841B 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  841F
 76+  841F 00 00        	db 0,0										    ; Variables_de_borrado
 77+  8421 00 00        	defw 0											;	" " " " " " "
 78+  8423 00 00        	defw 0											;	" " " " " " "
 79+  8425 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 80+  8429
 81+  8429 00 00        	db 0,0											; Variables_de_pintado
 82+  842B 00 00        	defw 0											;	" " " " " " "
 83+  842D 00 00        	defw 0											;	" " " " " " "
 84+  842F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 85+  8433
 86+  8433 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8435
 88+  8435 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8439 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  843C
 91+  843C 00           	db 0 											; (Columnas).
 92+  843D 00 00        	defw 0											; (Limite_horizontal).
 93+  843F 00           	db 0											; (Limite_vertical).
 94+  8440
 95+  8440              ; ---------- ---------- ---------- ---------- ----------
 96+  8440
 97+  8440 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  8442 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8444 00 00        	defw 0											; (Puntero_objeto).
100+  8446 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
101+  8449
102+  8449 02           	db %00000010									; (Attr).
103+  844A
104+  844A 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  844C 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  844E 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  8450 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  8452
109+  8452 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8454 02           	db 2											; (Cuad_objeto).
111+  8455
112+  8455 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8459
114+  8459 00 00        	db 0,0											; Variables_de_borrado
115+  845B 00 00        	defw 0										 	;	" " " " " " "
116+  845D 00 00        	defw 0											;	" " " " " " "
117+  845F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
118+  8463
119+  8463 00 00        	db 0,0											; Variables_de_pintado
120+  8465 00 00        	defw 0											;	" " " " " " "
121+  8467 00 00        	defw 0											;	" " " " " " "
122+  8469 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
123+  846D
124+  846D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  846F
126+  846F D8 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  8473 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8476
129+  8476 00           	db 0 											; (Columnas).
130+  8477 00 00        	defw 0											; (Limite_horizontal).
131+  8479 00           	db 0											; (Limite_vertical).
132+  847A
133+  847A              ; ---------- ---------- ---------- ---------- ----------
134+  847A
135+  847A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  847C 00 00        	defw 0                                          ; (Posicion_actual).
137+  847E 00 00        	defw 0											; (Puntero_objeto).
138+  8480 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
139+  8483
140+  8483 04           	db %00000100									; (Attr).
141+  8484
142+  8484 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8486 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8488
145+  8488 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  848A 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  848C
148+  848C A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  848E 01           	db 1											; (Cuad_objeto).
150+  848F
151+  848F 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  8493
153+  8493 00 00        	db 0,0											; Variables_de_borrado
154+  8495 00 00        	defw 0										 	;	" " " " " " "
155+  8497 00 00        	defw 0											;	" " " " " " "
156+  8499 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
157+  849D
158+  849D 00 00        	db 0,0											; Variables_de_pintado
159+  849F 00 00        	defw 0											;	" " " " " " "
160+  84A1 00 00        	defw 0											;	" " " " " " "
161+  84A3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
162+  84A7
163+  84A7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84A9
165+  84A9 DA 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84AD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84B0
168+  84B0 00           	db 0 											; (Columnas).
169+  84B1 00 00        	defw 0											; (Limite_horizontal).
170+  84B3 00           	db 0											; (Limite_vertical).
171+  84B4
172+  84B4              ; ---------- ---------- ---------- ---------- ----------
173+  84B4
174+  84B4 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84B6 00 00        	defw 0                                          ; (Posicion_actual).
176+  84B8 00 00        	defw 0 											; (Puntero_objeto).
177+  84BA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
178+  84BD
179+  84BD 01           	db %00000001									; (Attr).
180+  84BE
181+  84BE 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84C0 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84C2
184+  84C2 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84C4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84C6
187+  84C6 BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84C8 00           	db 0											; (Cuad_objeto).
189+  84C9
190+  84C9 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84CD
192+  84CD 00 00        	db 0,0											; Variables_de_borrado
193+  84CF 00 00        	defw 0										 	;	" " " " " " "
194+  84D1 00 00        	defw 0											;	" " " " " " "
195+  84D3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
196+  84D7
197+  84D7 00 00        	db 0,0											; Variables_de_pintado
198+  84D9 00 00        	defw 0											;	" " " " " " "
199+  84DB 00 00        	defw 0											;	" " " " " " "
200+  84DD 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
201+  84E1
202+  84E1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84E3
204+  84E3 CA 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84E7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84EA
207+  84EA 00           	db 0 											; (Columnas).
208+  84EB 00 00        	defw 0											; (Limite_horizontal).
209+  84ED 00           	db 0											; (Limite_vertical).
210+  84EE
# file closed: Entidades.asm
 21   84EE
 22   84EE              ; ******************************************************************************************************************************************************************************************
 23   84EE              ; Constantes.
 24   84EE              ; ******************************************************************************************************************************************************************************************
 25   84EE              ;
 26   84EE              ; 8/11/22
 27   84EE              ;
 28   84EE              ; Constantes generales.
 29   84EE              ;
 30   84EE
 31   84EE              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84EE              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84EE              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84EE              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84EE              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84EE
 37   84EE              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84EE              ;                               				        ; De momento situamos este almacén en $7000.
 39   84EE
 40   84EE
 41   84EE              ; ******************************************************************************************************************************************************************************************
 42   84EE              ; Variables.
 43   84EE              ; ******************************************************************************************************************************************************************************************
 44   84EE              ;
 45   84EE              ; 10/11/22
 46   84EE              ;
 47   84EE              ; Variables de DRAW. (Motor principal).
 48   84EE              ;
 49   84EE              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   84EE
 51   84EE 02           Filas db 2												; Filas. [DRAW]
 52   84EF 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84F0 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84F2 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84F4 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   84F5 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   84F6
 58   84F6              ; ---------- ---------- ----------
 59   84F6
 60   84F6 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   84F7              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   84F7              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   84F7 04           Attr db %00000100										; Atributos de la entidad:
 64   84F8
 65   84F8              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   84F8              ;
 67   84F8              ;	COLORES: 0 ..... NEGRO
 68   84F8              ;    		 1 ..... AZUL
 69   84F8              ; 			 2 ..... ROJO
 70   84F8              ;			 3 ..... MAGENTA
 71   84F8              ; 			 4 ..... VERDE
 72   84F8              ; 			 5 ..... CIAN
 73   84F8              ;			 6 ..... AMARILLO
 74   84F8              ; 			 7 ..... BLANCO
 75   84F8
 76   84F8 80 81        Indice_Sprite_der defw Indice_Badsat_der
 77   84FA 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   84FC 00 00        Puntero_DESPLZ_der defw 0
 79   84FE 00 00        Puntero_DESPLZ_izq defw 0
 80   8500
 81   8500 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8502 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8503
 84   8503              ; Variables de objeto. (Características).
 85   8503
 86   8503 04           Vel_left db 4 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8504 04           Vel_right db 4 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8505 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   8506 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   8507
 91   8507 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   8509 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   850B 00 00        	defw 0
 94   850D 00 00 00 00  	db 0,0,0,0
 95   8511
 96   8511 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   8513 00 00        	defw 0
 98   8515 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   8517 00 00 00 00  	db 0,0,0,0
100   851B
101   851B              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   851B
103   851B 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   851C              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   851C              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   851C              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   851C              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   851C              ;
109   851C              ; 														DESCRIPCIÖN:
110   851C              ;
111   851C              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   851C              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   851C              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   851C              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   851C              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   851C              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   851C              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   851C              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   851C              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   851C              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   851C              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   851C              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   851C              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   851C              ;
125   851C              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   851C              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   851C              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   851C
129   851C 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   851D
131   851D              ; Movimiento.
132   851D
133   851D C8 90        Puntero_indice_mov defw Indice_mov_Derecha_e_izquierda
134   851F 00 00        Puntero_mov defw 0
135   8521 00           Contador_db_mov db 0
136   8522 00           Incrementa_puntero db 0
137   8523 00           Repetimos_db db 0
138   8524
139   8524              ; Variables de funcionamiento. [DRAW].
140   8524
141   8524 00           Columnas db 0
142   8525 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8527              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8527 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8528
146   8528              ; 59 Bytes por entidad.
147   8528              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8528              ;					         		---------;      ;---------
149   8528
150   8528
151   8528              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8528              ; Gestión de ENTIDADES.
153   8528
154   8528 00 00        Puntero_store_entidades defw 0
155   852A 00 00        Puntero_restore_entidades defw 0
156   852C 00 00        Indice_restore defw 0
157   852E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   852F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8530              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8530              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8530              ;														; _ (Numero_de_malotes)="0".
162   8530 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8532              ;														; _variable para almacenar lo posición del puntero_
164   8532              ; 														; _de pila, SP.
165   8532 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8534              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8534 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8536              ;														; _el snapshot de los registros de la siguiente entidad.
169   8536              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8536
171   8536              ; Gestión de FRAMES.
172   8536
173   8536 00           Switch db 0
174   8537
175   8537              ; Variables de Raster y localización en pantalla.
176   8537
177   8537 00 FF        Temp_Raster defw $ff00
178   8539
179   8539              ; Rutina principal *************************************************************************************************************************************************************************
180   8539              ;
181   8539              ;	14/11/22
182   8539
183   8539 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   853C
185   853C 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   853E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8540 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8542 F3           	DI
189   8543
190   8543 3E 01        	ld a,1
191   8545 D3 FE        	out ($fe),a
192   8547
193   8547 3E 07        	ld a,%00000111
194   8549 CD 20 8D     	call Cls
195   854C
196   854C              ;	call Pinta_FILAS
197   854C
198   854C CD 4D 87     	call Pulsa_ENTER
199   854F
200   854F 21 2E 85     	ld hl,Numero_de_entidades
201   8552 46           	ld b,(hl)
202   8553 04           	inc b
203   8554 05           	dec b
204   8555 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8557
206   8557              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8557              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8557              ;	Pintamos el resto de entidades:
209   8557
210   8557 CD 6F 86     	call Inicia_punteros_de_entidades
211   855A
212   855A              ;	INICIA ENTIDADES!!!!!
213   855A
214   855A C5           1 push bc  												; Guardo el contador de entidades.
215   855B CD A2 86      	call Inicia_Puntero_objeto
216   855E CD A4 87     	call Draw
217   8561 CD A0 7F     	call Guarda_foto_registros
218   8564 CD E8 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8567 C1           	pop bc
220   8568 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   856A
222   856A              ; 	INICIA AMADEUS!!!!!
223   856A
224   856A CD 29 87     3 call Restore_Amadeus
225   856D CD A2 86     	call Inicia_Puntero_objeto
226   8570 CD A4 87     	call Draw
227   8573 CD A0 7F     	call Guarda_foto_registros
228   8576 CD 3B 87     	call Store_Amadeus
229   8579
230   8579              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   8579
232   8579 CD 6F 86     	call Inicia_punteros_de_entidades
233   857C CD 17 87     	call Restore_Primera_entidad
234   857F
235   857F 3A 2E 85     	ld a,(Numero_de_entidades)
236   8582 3C           	inc a
237   8583 32 2F 85     	ld (Numero_de_malotes),a
238   8586
239   8586 FB           2 ei
240   8587 18 FD        	jr 2B
241   8589
242   8589              ; -----------------------------------------------------------------------------------
243   8589
244   8589              Frame
245   8589
246   8589              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   8589              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   8589
249   8589 3E 07            ld a,7
250   858B D3 FE            out ($fe),a
251   858D CD A8 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   8590 3E 01            ld a,1
253   8592 D3 FE            out ($fe),a
254   8594
255   8594              ;	jr $
256   8594
257   8594              ; ----------------------------------------------------------------------
258   8594
259   8594 21 00 70     	ld hl,Album_de_fotos
260   8597 22 34 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
261   859A              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
262   859A 3A 2E 85         ld a,(Numero_de_entidades)
263   859D 47               ld b,a
264   859E A7           	and a
265   859F 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
266   85A1
267   85A1 C5           2 push bc
268   85A2 CD E8 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
269   85A5 3A 1B 85     	ld a,(Ctrl_0)
270   85A8 CB 67        	bit 4,a
271   85AA 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
272   85AC CD 36 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   85AF 21 1B 85     1 ld hl,Ctrl_0
274   85B2 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
275   85B4 AF           	xor a
276   85B5 32 1C 85     	ld (Obj_dibujado),a
277   85B8 CD E8 86     	call Store_Restore_entidades
278   85BB C1           	pop bc
279   85BC 10 E3        	djnz 2B
280   85BE
281   85BE CD 29 87     4 call Restore_Amadeus
282   85C1 CD 07 86     	call Mov_Amadeus
283   85C4 3A 1B 85     	ld a,(Ctrl_0)
284   85C7 CB 67        	bit 4,a
285   85C9 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
286   85CB CD 36 86     	call Guarda_foto_entidad_a_pintar
287   85CE
288   85CE 21 1B 85     3 ld hl,Ctrl_0
289   85D1 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
290   85D3 AF           	xor a
291   85D4 32 1C 85     	ld (Obj_dibujado),a
292   85D7 CD 3B 87     	call Store_Amadeus
293   85DA
294   85DA              ; -----
295   85DA
296   85DA CD 6F 86     	call Inicia_punteros_de_entidades
297   85DD CD 17 87     	call Restore_Primera_entidad
298   85E0 CD 85 86     	call Calcula_numero_de_malotes
299   85E3
300   85E3 3E 00        	ld a,0
301   85E5 D3 FE        	out ($fe),a
302   85E7 C9           	ret
303   85E8
304   85E8              ; --------------------------------------------------------------------------------------------------------------
305   85E8              ;
306   85E8              ;	29/1/23
307   85E8
308   85E8              Mov_obj
309   85E8
310   85E8              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
311   85E8
312   85E8 AF           	xor a
313   85E9 32 1C 85     	ld (Obj_dibujado),a
314   85EC CD 40 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
315   85EF              ;														; Obj_dibujado="0".
316   85EF              ; Movemos Entidades malignas.
317   85EF
318   85EF CD DC 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
319   85F2 3A 1B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
320   85F5 CB 67        	bit 4,a
321   85F7 C8           	ret z
322   85F8
323   85F8              ; ---------
324   85F8
325   85F8 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
326   85FA 32 1C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
327   85FD CD 40 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
328   8600 CD 57 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
329   8603 CD 26 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
330   8606 C9           	ret													; _de la misma.
331   8607
332   8607              ; --------------------------------------------------------------------------------------------------------------
333   8607              ;
334   8607              ;	29/1/23
335   8607
336   8607              Mov_Amadeus
337   8607
338   8607 AF           	xor a
339   8608 32 1C 85     	ld (Obj_dibujado),a
340   860B CD 40 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
341   860E              ;														; Obj_dibujado="0".
342   860E              ; Movemos Amadeus.
343   860E
344   860E CD 61 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
345   8611 3A 1B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
346   8614 CB 67        	bit 4,a
347   8616 C8           	ret z
348   8617
349   8617              ; ---------
350   8617
351   8617 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
352   8619 32 1C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
353   861C CD 40 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
354   861F CD 57 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
355   8622 CD 26 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
356   8625 C9           	ret													; _de la nave.
357   8626
358   8626              ; --------------------------------------------------------------------------------------------------------------
359   8626              ;
360   8626              ;	31/01/23
361   8626              ;
362   8626              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
363   8626
364   8626              Guarda_foto_entidad_a_borrar
365   8626
366   8626 CD 7E 8A     	call Prepara_draw
367   8629 CD B8 89     	call calcula_CColumnass
368   862C CD EF 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
369   862F CD 44 8A     	call Define_rutina_de_impresion
370   8632 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
371   8635 C9           	ret
372   8636
373   8636              ; --------------------------------------------------------------------------------------------------------------
374   8636              ;
375   8636              ;	31/01/23
376   8636              ;
377   8636              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
378   8636              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
379   8636
380   8636              Guarda_foto_entidad_a_pintar
381   8636
382   8636 CD 63 86     	call Repone_pintar
383   8639 CD A4 87     	call Draw
384   863C CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
385   863F C9           	ret
386   8640
387   8640              ; --------------------------------------------------------------------------------------------------------------
388   8640              ;
389   8640              ;
390   8640
391   8640 21 EE 84     Prepara_var_pintado_borrado	ld hl,Filas
392   8643 3A 1C 85     	ld a,(Obj_dibujado)
393   8646 A7           	and a
394   8647 28 05        	jr z,1F
395   8649 11 11 85     	ld de,Variables_de_pintado
396   864C 18 03        	jr 2F
397   864E 11 07 85     1 ld de,Variables_de_borrado
398   8651 01 08 00     2 ld bc,8
399   8654 ED B0        	ldir
400   8656 C9           	ret
401   8657
402   8657              ; --------------------------------------------------------------------------------------------------------------
403   8657
404   8657 21 07 85     Repone_borrar ld hl,Variables_de_borrado
405   865A 11 EE 84     	ld de,Filas
406   865D 01 08 00     	ld bc,8
407   8660 ED B0        	ldir
408   8662 C9           	ret
409   8663
410   8663 21 11 85     Repone_pintar ld hl,Variables_de_pintado
411   8666 11 EE 84     	ld de,Filas
412   8669 01 08 00     	ld bc,8
413   866C ED B0        	ldir
414   866E C9           	ret
415   866F
416   866F              ; *************************************************************************************************************************************************************
417   866F              ;
418   866F              ; 8/1/23
419   866F              ;
420   866F              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
421   866F              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
422   866F              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
423   866F
424   866F              ; Destruye HL y DE !!!!!
425   866F
426   866F              Inicia_punteros_de_entidades
427   866F
428   866F 21 C0 83     	ld hl,Indice_de_entidades
429   8672 CD 9C 86         call Extrae_address
430   8675 22 28 85         ld (Puntero_store_entidades),hl
431   8678 21 C2 83     	ld hl,Indice_de_entidades+2
432   867B 22 2C 85     	ld (Indice_restore),hl
433   867E CD 9C 86     	call Extrae_address
434   8681 22 2A 85     	ld (Puntero_restore_entidades),hl
435   8684 C9               ret
436   8685
437   8685              ; -------------------------------------------------------------------------------------------------------------
438   8685              ;
439   8685              ; 30/1/23
440   8685              ;
441   8685
442   8685 2A 34 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
443   8688 7D           	ld a,l
444   8689 A7           	and a
445   868A 28 0C        	jr z,3F
446   868C AF           	xor a
447   868D 67           	ld h,a
448   868E 7D           	ld a,l
449   868F D6 06        1 sub 6
450   8691 28 03        	jr z,2F
451   8693 24           	inc h
452   8694 18 F9        	jr 1B
453   8696 24           2 inc h
454   8697 7C           	ld a,h
455   8698 32 2F 85     3 ld (Numero_de_malotes),a
456   869B C9           	ret
457   869C
458   869C              ; *************************************************************************************************************************************************************
459   869C              ;
460   869C              ; 20/10/22
461   869C              ;
462   869C              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
463   869C              ;
464   869C              ; Destruye el puntero y DE !!!!!
465   869C
466   869C 5E           Extrae_address ld e,(hl)
467   869D 23           	inc hl
468   869E 56           	ld d,(hl)
469   869F 2B           	dec hl
470   86A0 EB           	ex de,hl
471   86A1 C9           	ret
472   86A2
473   86A2              ; *************************************************************************************************************************************************************
474   86A2              ;
475   86A2              ;	7/2/23
476   86A2              ;
477   86A2              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
478   86A2              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
479   86A2              ;
480   86A2              ;   Destruye HL y BC !!!!!,
481   86A2              ;
482   86A2              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
483   86A2              ;					"0" ..... Izquierda.
484   86A2
485   86A2              Inicia_Puntero_objeto
486   86A2
487   86A2 3A 02 85     	ld a,(Cuad_objeto)
488   86A5 E6 01        	and 1
489   86A7 F5           	push af
490   86A8 CC C4 86     	call z,Inicia_puntero_objeto_izq
491   86AB F1           	pop af
492   86AC C8           	ret z
493   86AD CD B1 86     	call Inicia_puntero_objeto_der
494   86B0 C9           	ret
495   86B1
496   86B1              ; Arrancamos desde la parte izquierda de la pantalla.
497   86B1              ; Iniciamos (Indice_Sprite_der).
498   86B1
499   86B1 2A F8 84     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
500   86B4 22 FC 84     	ld (Puntero_DESPLZ_der),hl
501   86B7 CD 9C 86     	call Extrae_address
502   86BA 22 F2 84     	ld (Puntero_objeto),hl
503   86BD
504   86BD 2A FA 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
505   86C0              ;	call Extrae_address
506   86C0 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
507   86C3 C9           	ret
508   86C4
509   86C4              ; Arrancamos desde la parte derecha de la pantalla.
510   86C4              ; Iniciamos (Indice_Sprite_izq).
511   86C4
512   86C4 2A FA 84     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
513   86C7 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
514   86CA CD 9C 86     	call Extrae_address
515   86CD 22 F2 84     	ld (Puntero_objeto),hl
516   86D0
517   86D0 2A F8 84     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
518   86D3              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
519   86D3 22 FC 84     	ld (Puntero_DESPLZ_der),hl
520   86D6 C9           	ret
521   86D7
522   86D7              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
523   86D7
524   86D7 21 10 83     	ld hl,Amadeus
525   86DA ED 4B F2 84  	ld bc,(Puntero_objeto)
526   86DE B7 ED 42     	sub hl,bc
527   86E1 C0           	ret nz
528   86E2 21 1B 85     	ld hl,Ctrl_0
529   86E5 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
530   86E7 C9           	ret 												; _de nuestra nave en los extremos.
531   86E8
532   86E8              ; *************************************************************************************************************************************************************
533   86E8              ;
534   86E8              ;	8/1/23
535   86E8              ;
536   86E8              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
537   86E8              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
538   86E8
539   86E8              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
540   86E8              ;	_de la 2ª y 3ª entidad respectivamente.
541   86E8
542   86E8
543   86E8
544   86E8              Store_Restore_entidades
545   86E8
546   86E8 E5           	push hl
547   86E9 D5           	push de
548   86EA C5            	push bc
549   86EB
550   86EB              ;	STORE !!!!!
551   86EB              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
552   86EB
553   86EB 21 EE 84     	ld hl,Filas
554   86EE ED 5B 28 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
555   86F2 01 3A 00     	ld bc,58
556   86F5 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
557   86F7
558   86F7              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
559   86F7
560   86F7 2A 2A 85     	ld hl,(Puntero_restore_entidades)
561   86FA 22 28 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
562   86FD 11 EE 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
563   8700 01 3A 00     	ld bc,58
564   8703 ED B0        	ldir
565   8705
566   8705              ;	Incrementa RESTORE !!!!!
567   8705
568   8705 2A 2C 85         ld hl,(Indice_restore)
569   8708 23           	inc hl
570   8709 23           	inc hl
571   870A 22 2C 85     	ld (Indice_restore),hl
572   870D CD 9C 86         call Extrae_address
573   8710 22 2A 85         ld (Puntero_restore_entidades),hl
574   8713 C1           	pop bc
575   8714 D1           	pop de
576   8715 E1           	pop hl
577   8716 C9           	ret
578   8717
579   8717              ; **************************************************************************************************
580   8717              ;
581   8717              ;	29/10/22
582   8717              ;
583   8717              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
584   8717
585   8717 E5           Restore_Primera_entidad push hl
586   8718 D5           	push de
587   8719 C5            	push bc
588   871A 2A 28 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
589   871D 11 EE 84     	ld de,Filas
590   8720 01 3A 00     	ld bc,58
591   8723 ED B0        	ldir
592   8725 C1           	pop bc
593   8726 D1           	pop de
594   8727 E1           	pop hl
595   8728 C9           	ret
596   8729
597   8729              ; **************************************************************************************************
598   8729              ;
599   8729              ;	25/01/23
600   8729              ;
601   8729              ;	Restore_Amadeus
602   8729              ;
603   8729              ;	Cargamos en DRAW los parámetros de Amadeus.
604   8729              ;
605   8729
606   8729 E5           Restore_Amadeus	push hl
607   872A D5           	push de
608   872B C5            	push bc
609   872C 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
610   872F 11 EE 84     	ld de,Filas
611   8732 01 3A 00     	ld bc,58
612   8735 ED B0        	ldir
613   8737 C1           	pop bc
614   8738 D1           	pop de
615   8739 E1           	pop hl
616   873A C9           	ret
617   873B
618   873B              ; *************************************************************************************************************************************************************
619   873B              ;
620   873B              ;	29/01/23
621   873B              ;
622   873B              ;	Store_Amadeus
623   873B              ;
624   873B              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
625   873B              ;
626   873B
627   873B E5           Store_Amadeus push hl
628   873C D5           	push de
629   873D C5            	push bc
630   873E 21 EE 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
631   8741 11 CC 83     	ld de,Amadeus_db
632   8744 01 3A 00     	ld bc,58
633   8747 ED B0        	ldir
634   8749 C1           	pop bc
635   874A D1           	pop de
636   874B E1           	pop hl
637   874C C9           	ret
638   874D
639   874D              ; **************************************************************************************************
640   874D
641   874D              ; Teclado.
642   874D
643   874D 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
644   874F DB FE        	in a,($fe)
645   8751 E6 01        	and $01
646   8753 28 02        	jr z,1f
647   8755 18 F6        	jr Pulsa_ENTER
648   8757 C9           1 ret
649   8758
650   8758              ; **************************************************************************************************
651   8758              ;
652   8758              ; Temporización.
653   8758
654   8758              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
655   8758              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
656   8758              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
657   8758              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
658   8758
659   8758              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
660   8758              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
661   8758              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
662   8758
663   8758              ; A partir de $4f61 no hace falta DELAY.
664   8758
665   8758              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
666   8758
667   8758 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
668   875B 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
669   875C 78           	LD A,B
670   875D A7           	AND A
671   875E 20 FB        	JR NZ,wait
672   8760 C9           	RET
673   8761
674   8761              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
675   8761              ;
676   8761              ;	21/4/22
677   8761
678   8761              Movimiento_Amadeus
679   8761
680   8761 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
681   8763 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
682   8765 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
683   8767 CC AA 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
684   876A 3E F7        	ld a,$f7
685   876C DB FE        	in a,($fe)
686   876E E6 01        	and $01
687   8770 C8           	ret z
688   8771 3E F7        	ld a,$f7
689   8773 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
690   8775 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
691   8777 CC 90 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
692   877A C9               ret
693   877B
694   877B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
695   877B
696   877B              ; Pinta indicadores de FILAS. ------------------------------------------------------
697   877B
698   877B 21 10 40     Pinta_FILAS ld hl,$4010
699   877E              ;	ld b,9
700   877E              ;2 push hl
701   877E              ;	push bc
702   877E 06 BF        	ld b,$bf
703   8780 36 80        1 ld (hl),%10000000
704   8782 CD 8A 8A     	call NextScan
705   8785 10 F9        	djnz 1B
706   8787              ;	pop bc
707   8787              ;	pop hl
708   8787              ;	inc l
709   8787              ;	djnz 2B
710   8787 06 03        	ld b,3
711   8789 21 00 47         ld hl,$4700
712   878C CD 92 87     3 call Bucle_1
713   878F 10 FB            djnz 3B
714   8791 C9               ret
715   8792
716   8792 C5           Bucle_1 push bc
717   8793 E5                   push hl
718   8794 D1                   pop de
719   8795 13                   inc de
720   8796 01 FF 00             ld bc,255
721   8799 36 FF                ld (hl),255
722   879B ED B0                ldir
723   879D 23                   inc hl
724   879E 3E 07                ld a,7
725   87A0 84                   add a,h
726   87A1 67                   ld h,a
727   87A2 C1                   pop bc
728   87A3 C9                   ret
729   87A4
730   87A4              ; ---------------------------------------------------------------
731   87A4
732   87A4              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  87A4              ; ******************************************************************************************************************************************************************************************
  2+  87A4              ;
  3+  87A4              ; 01/23
  4+  87A4              ;
  5+  87A4              ; DRAW. ************************************************************************************************************************************************************************************
  6+  87A4
  7+  87A4 CD 7E 8A     Draw call Prepara_draw
  8+  87A7 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  87A8 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  87A9 28 05        	jr z,2F
 11+  87AB
 12+  87AB 3A 02 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  87AE 18 0C        	jr 1F
 14+  87B0 2A 00 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  87B3 22 F0 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  87B6 CD 45 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  87B9              ;													; _la esquina superior izquierda de la pantalla.
 18+  87B9 CD 5E 91     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  87BC 3A 1B 85     1 ld a,(Ctrl_0)
 20+  87BF CB 6F        	bit 5,a
 21+  87C1 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  87C3
 23+  87C3 CD DB 87     	call Comprueba_limite_horizontal
 24+  87C6 CD 6B 88     	call Comprueba_limite_vertical
 25+  87C9
 26+  87C9              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  87C9
 28+  87C9 CD B8 89     3 call calcula_CColumnass
 29+  87CC CD EF 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  87CF CD 44 8A     	call Define_rutina_de_impresion
 31+  87D2
 32+  87D2 3A 1B 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  87D5 CB AF        	res 5,a											; _a ser de utilidad.
 34+  87D7 32 1B 85     	ld (Ctrl_0),a
 35+  87DA
 36+  87DA C9           	ret
 37+  87DB
 38+  87DB              ; *******************************************************************************************************************************************************************************************
 39+  87DB              ;	21/01/23
 40+  87DB              ;
 41+  87DB              ; 	Comprueba_limite_horizontal.
 42+  87DB              ;
 43+  87DB              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  87DB              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  87DB              ;
 46+  87DB              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  87DB              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  87DB              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  87DB              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  87DB
 51+  87DB
 52+  87DB
 53+  87DB 3A 1B 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  87DE CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  87E0 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  87E2 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  87E4 32 1B 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  87E7 18 09            jr 6F
 59+  87E9 CB 5F        1 bit 3,a
 60+  87EB 28 0A            jr z,2F
 61+  87ED E6 F7            and $f7
 62+  87EF 32 1B 85         ld (Ctrl_0),a
 63+  87F2 CD 45 89     6 call Inicializacion
 64+  87F5 18 5B            jr 5F
 65+  87F7 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  87F8
 67+  87F8              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  87F8              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  87F8
 70+  87F8 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  87F9 2A 25 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  87FC CD E8 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  87FF 67           	ld h,a
 74+  8800 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8801 CD E8 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8804 67           	ld h,a
 77+  8805 A7           	and a
 78+  8806 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8808 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8809 3A 02 85     	ld a,(Cuad_objeto)
 81+  880C FE 02        	cp 2
 82+  880E 38 1E        	jr c,3F
 83+  8810 28 1C        	jr z,3F
 84+  8812 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8813 28 23            jr z,7F
 86+  8815 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8817 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8819 E1           	pop hl
 89+  881A
 90+  881A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  881A              ; _para indicar con E="2" en caso necesario.
 92+  881A
 93+  881A E5               push hl
 94+  881B C5               push bc
 95+  881C CD E8 8C     	call calcula_tercio
 96+  881F FE 01        	cp 1
 97+  8821 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8823 CD 53 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8826 28 26            jr z,9F
100+  8828 38 24            jr c,9F
101+  882A 1E 00        11 ld e,0
102+  882C 18 22            jr 8F
103+  882E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  882F 28 07        	jr z, 7F
105+  8831 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8833 1E 00         	ld e,0
107+  8835 E1           	pop hl
108+  8836 18 04        	jr 4F
109+  8838 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  883A 18 15            jr 10F
111+  883C
112+  883C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  883C              ; _para indicar con E="2" en caso necesario.
114+  883C
115+  883C E5           4 push hl
116+  883D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  883E CD E8 8C     	call calcula_tercio
118+  8841 FE 01        	cp 1
119+  8843 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8845 CD 53 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8848 28 04            jr z,9F
122+  884A 30 02            jr nc,9F
123+  884C 18 02        	jr 8F
124+  884E 1E 02        9 ld e,2
125+  8850 C1           8 pop bc
126+  8851 E1           10 pop hl
127+  8852 C9           5 ret
128+  8853
129+  8853              ; --------------------
130+  8853              ;
131+  8853              ; 25/08/22
132+  8853
133+  8853 CD E8 8C     Comprueba_centro call calcula_tercio
134+  8856 67               ld h,a
135+  8857 08           	ex af,af
136+  8858 FE 02        	cp 2
137+  885A 38 07        	jr c,1F
138+  885C 28 05        	jr z,1F
139+  885E 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8861 18 03        	jr 2F
141+  8863 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8866 08           2 ex af,af
143+  8867 A7               and a
144+  8868 ED 42            sbc hl,bc
145+  886A C9               ret
146+  886B
147+  886B              ; *********************************************************************************************************************************************************************************************
148+  886B              ;
149+  886B              ;   16/8/22
150+  886B              ;
151+  886B              ;	Comprueba_limite_vertical
152+  886B              ;
153+  886B              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  886B              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  886B              ;
156+  886B
157+  886B 2A F0 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  886E 7D           	ld a,l
159+  886F E6 1F        	and $1F
160+  8871 57           	ld d,a
161+  8872 3A 27 85     	ld a,(Limite_vertical)
162+  8875 BA           	cp d 											; Límite - Posición.
163+  8876 08           	ex af,af 										; Resultado de CP d en F'.
164+  8877 3A 02 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  887A CB 47        	bit 0,a
166+  887C 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  887E
168+  887E              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  887E
170+  887E 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  887F 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8881
173+  8881              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8881              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8881
176+  8881 3A F4 84         ld a,(Coordenada_X)
177+  8884 16 0F            ld d,Centro_izquierda
178+  8886 A7               and a
179+  8887 92               sub d 											 ; Posición - Centro_izquierda.
180+  8888 28 1E            jr z,3F
181+  888A 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  888C              ;                                                    ; _salimos sin modificar nada.
183+  888C 18 0E            jr 2F
184+  888E 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  888F 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  8891
187+  8891              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  8891              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  8891
190+  8891 3A F4 84         ld a,(Coordenada_X)
191+  8894 16 10            ld d,Centro_derecha
192+  8896 A7               and a
193+  8897 92               sub d
194+  8898 28 0E            jr z,3F
195+  889A 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  889C              ;                                                    ; _salimos sin modificar nada.
197+  889C CB 43        2 bit 0,e
198+  889E 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  88A0 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  88A1 CD 35 89         call Modificaccionne
201+  88A4 C1           	pop bc
202+  88A5 CD 45 89         call Inicializacion
203+  88A8 C9           3 ret 				 								 ; Salimos de la rutina.
204+  88A9
205+  88A9              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  88A9
207+  88A9 C5           4 push bc
208+  88AA 01 EF 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  88AD 0A           	ld a,(bc)
210+  88AE 3D           	dec a
211+  88AF 47           	ld b,a 											 ; Columnas-1 en B.
212+  88B0 7D           	ld a,l
213+  88B1 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  88B2 CB 47        	bit 0,a
215+  88B4 28 03        	jr z,5F
216+  88B6 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  88B7 18 2E        	jr 7F
218+  88B9
219+  88B9              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  88B9
221+  88B9 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  88BA F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  88BB 3A 1B 85     	ld a,(Ctrl_0)
224+  88BE CB 4F        	bit 1,a
225+  88C0 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  88C2 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  88C3
228+  88C3              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  88C3
230+  88C3 1C               inc e
231+  88C4 1D               dec e
232+  88C5 20 07            jr nz,12F
233+  88C7 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  88C8 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  88C9 22 F0 84     	ld (Posicion_actual),hl
236+  88CC 18 44        13 jr 9F
237+  88CE CB 43        12 bit 0,e
238+  88D0 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  88D2              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  88D2 C1           	pop bc
241+  88D3 18 D3        	jr 3B
242+  88D5 80           14 add b
243+  88D6 6F               ld l,a
244+  88D7 22 F0 84     	ld (Posicion_actual),hl
245+  88DA CD 35 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  88DD 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  88DF E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  88E1 32 1B 85         ld (Ctrl_0),a
249+  88E4 F1           	pop af
250+  88E5 18 2B        	jr 9F
251+  88E7
252+  88E7              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  88E7
254+  88E7 F5           7 push af
255+  88E8 3A 1B 85     	ld a,(Ctrl_0)
256+  88EB CB 47        	bit 0,a
257+  88ED 20 1D        	jr nz,8F
258+  88EF F1           	pop af
259+  88F0
260+  88F0              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  88F0
262+  88F0 1C           	inc e
263+  88F1 1D               dec e
264+  88F2 20 07            jr nz,10F
265+  88F4 90           	sub b
266+  88F5 6F               ld l,a
267+  88F6 22 F0 84     	ld (Posicion_actual),hl
268+  88F9 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  88FB              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  88FB CB 43        10 bit 0,e
271+  88FD 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  88FF              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  88FF C1           	pop bc
274+  8900 18 A6        	jr 3B
275+  8902 90           16 sub b
276+  8903 6F               ld l,a
277+  8904 22 F0 84     	ld (Posicion_actual),hl
278+  8907 CD 35 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  890A 18 06            jr 9F
280+  890C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  890E 32 1B 85         ld (Ctrl_0),a
282+  8911 F1           	pop af
283+  8912 C1           9 pop bc
284+  8913 1E 00        	ld e,0
285+  8915 CD 45 89         call Inicializacion
286+  8918 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8919 08           	ex af,af
288+  891A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  891B 18 8B            jr 3B
290+  891D
291+  891D              ; --------------------
292+  891D
293+  891D 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  891F CD 99 8A     1 call PreviousScan
295+  8922 10 FB            djnz 1B
296+  8924 22 F0 84     	ld (Posicion_actual),hl
297+  8927 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8928 C9           	ret
299+  8929
300+  8929              ; --------------------
301+  8929
302+  8929 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  892B CD 8A 8A     1 call NextScan
304+  892E 10 FB            djnz 1B
305+  8930 22 F0 84     	ld (Posicion_actual),hl
306+  8933 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8934 C9           	ret
308+  8935
309+  8935              ; --------------------
310+  8935              ;
311+  8935              ;	22/01/23
312+  8935              ;
313+  8935              ;	E="1". Hemos cambiado de cuadrante.
314+  8935              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8935              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8935
317+  8935
318+  8935              Modificaccionne
319+  8935
320+  8935 3A 02 85     	ld a,(Cuad_objeto)
321+  8938 FE 02        	cp 2
322+  893A CC 1D 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  893D DC 1D 89         call c,Modifica_Pos_actual
324+  8940 C8           	ret z
325+  8941 CD 29 89         call Modifica_Pos_actual2
326+  8944 C9               ret
327+  8945
328+  8945              ; *************************************************************************************************************************************************************************************************
329+  8945              ;
330+  8945              ;	13/8/22
331+  8945              ;
332+  8945              ;	Inicializacion
333+  8945              ;
334+  8945              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8945              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8945              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8945              ;
338+  8945              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8945              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8945              ;	_ desaparece/aparece.
341+  8945
342+  8945              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8945              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8945              ;
345+  8945              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8945              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8945              ; 		   [E] ="0"
348+  8945
349+  8945              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8945
351+  8945 CD E8 8C     Inicializacion call calcula_tercio
352+  8948 28 36        	jr z,primit
353+  894A E6 02        	and 2
354+  894C 20 07        	jr nz,segmit
355+  894E 7D           	ld a,l
356+  894F FE 7F        	cp $7f
357+  8951 38 2D        	jr c,primit
358+  8953 28 2B        	jr z,primit
359+  8955 CD B2 89     segmit call column
360+  8958 38 13        	jr c,tercuad
361+  895A 3E 04        cuarcuad ld a,4
362+  895C 32 02 85     	ld (Cuad_objeto),a
363+  895F 21 20 48     	ld hl,$4820
364+  8962 22 25 85     	ld (Limite_horizontal),hl
365+  8965 21 27 85     	ld hl,Limite_vertical
366+  8968 36 0D        	ld (hl),$0d
367+  896A 08           	ex af,af
368+  896B 18 3C        	jr 1F
369+  896D              tercuad
370+  896D 3E 03        	ld a,3
371+  896F 32 02 85     	ld (Cuad_objeto),a
372+  8972 21 20 48     	ld hl,$4820
373+  8975 22 25 85     	ld (Limite_horizontal),hl
374+  8978 21 27 85     	ld hl,Limite_vertical
375+  897B 36 12        	ld (hl),$12
376+  897D 08           	ex af,af
377+  897E 18 29        	jr 1F
378+  8980 CD B2 89     primit call column
379+  8983 38 13        	jr c, primcuad
380+  8985              segcuad
381+  8985 3E 02        	ld a,2
382+  8987 32 02 85     	ld (Cuad_objeto),a
383+  898A 21 C0 4F     	ld hl,$4fc0
384+  898D 22 25 85     	ld (Limite_horizontal),hl
385+  8990 21 27 85     	ld hl,Limite_vertical
386+  8993 36 0D        	ld (hl),$0d
387+  8995 08           	ex af,af
388+  8996 18 11        	jr 1F
389+  8998              primcuad
390+  8998 3E 01        	ld a,1
391+  899A 32 02 85     	ld (Cuad_objeto),a
392+  899D 21 C0 4F     	ld hl,$4fc0
393+  89A0 22 25 85     	ld (Limite_horizontal),hl
394+  89A3 21 27 85     	ld hl,Limite_vertical
395+  89A6 36 12        	ld (hl),$12
396+  89A8 08           	ex af,af
397+  89A9 CD 45 90     1 call Genera_coordenadas
398+  89AC 21 1B 85     	ld hl,Ctrl_0
399+  89AF CB EE        	set 5,(hl)
400+  89B1 C9           	ret
401+  89B2
402+  89B2              ; ------------------------------------------------------------------------------------------------------------------
403+  89B2
404+  89B2              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  89B2              ;
406+  89B2              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  89B2
408+  89B2 7D           column ld a,l
409+  89B3 E6 1F        	and $1f
410+  89B5 FE 10         	cp $10
411+  89B7 C9            	ret
412+  89B8
413+  89B8              ; --------------------------------------------------------------------------------------------------------------------
414+  89B8              ;
415+  89B8              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  89B8              ;
417+  89B8              ; 14/12/22
418+  89B8              ;
419+  89B8              ;	Modifica: A y BC.
420+  89B8
421+  89B8 3A 02 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  89BB E6 01        	and 1
423+  89BD 28 17        	jr z,1F
424+  89BF
425+  89BF              ; Nos encontramos en la parte izquierda de la pantalla
426+  89BF
427+  89BF 3A F4 84     	ld a,(Coordenada_X)
428+  89C2 47           	ld b,a
429+  89C3 04           	inc b											; (Coordenada_X)+1 en B.
430+  89C4 79           	ld a,c
431+  89C5 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  89C6 38 08        	jr c,2F
433+  89C8 47           	ld b,a
434+  89C9 79           	ld a,c
435+  89CA 90           	sub b
436+  89CB 32 24 85     	ld (Columnas),a
437+  89CE 18 1B        	jr 4F
438+  89D0 79           2 ld a,c
439+  89D1 32 24 85     	ld (Columnas),a
440+  89D4 18 15        	jr 4F
441+  89D6
442+  89D6              ; Nos encontramos en la parte derecha de la pantalla.
443+  89D6
444+  89D6 3A F4 84     1 ld a,(Coordenada_X)
445+  89D9 81           	add c
446+  89DA 3D           	dec a
447+  89DB D6 1F        	sub $1f
448+  89DD 38 08        	jr c,3F
449+  89DF 47           	ld b,a
450+  89E0 79           	ld a,c
451+  89E1 90           	sub b
452+  89E2 32 24 85     	ld (Columnas),a
453+  89E5 18 04        	jr 4F
454+  89E7 79           3 ld a,c
455+  89E8 32 24 85     	ld (Columnas),a
456+  89EB D9           4 exx
457+  89EC 4F           	ld c,a
458+  89ED D9           	exx
459+  89EE C9            ret
460+  89EF
461+  89EF              ; --------------------------------------------------------------------------------------------------------------------
462+  89EF              ;
463+  89EF              ; 7/1/23
464+  89EF              ;
465+  89EF              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  89EF              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  89EF              ;
468+  89EF              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  89EF              ;	DESTRUYE: HL,B Y A.
470+  89EF
471+  89EF 3A 02 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  89F2 FE 02        	cp 2
473+  89F4 38 18        	jr c,1F
474+  89F6 28 16        	jr z,1F
475+  89F8 E6 01        	and 1
476+  89FA 28 0D        	jr z,3F
477+  89FC
478+  89FC              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  89FC
480+  89FC CD 38 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  89FF
482+  89FF 7D           9 ld a,l
483+  8A00 E6 1F        	and $1f
484+  8A02 28 2A        	jr z,7F
485+  8A04 2B           	dec hl
486+  8A05 10 F8        	djnz 9B
487+  8A07 18 25        	jr 7F
488+  8A09
489+  8A09              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8A09
491+  8A09 2A F0 84     3 ld hl,(Posicion_actual)
492+  8A0C 18 20        	jr 7F
493+  8A0E
494+  8A0E 28 14        1 jr z,2F
495+  8A10
496+  8A10              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8A10
498+  8A10 CD 38 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8A13 7D           4 ld a,l
500+  8A14 E6 1F        	and $1f
501+  8A16 28 03        	jr z,6F
502+  8A18 2B           	dec hl
503+  8A19 10 F8        	djnz 4B
504+  8A1B 06 0F        6 ld b,15
505+  8A1D CD 99 8A     5 call PreviousScan
506+  8A20 10 FB        	djnz 5B
507+  8A22 18 0A        	jr 7F
508+  8A24
509+  8A24              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8A24
511+  8A24 CD 38 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8A27 06 0F        	ld b,15
513+  8A29 CD 99 8A     8 call PreviousScan
514+  8A2C 10 FB        	djnz 8B
515+  8A2E
516+  8A2E E5           7 push hl
517+  8A2F DD E1        	pop ix
518+  8A31
519+  8A31 2A F2 84     	ld hl,(Puntero_objeto)
520+  8A34 E5           	push hl
521+  8A35 FD E1        	pop iy
522+  8A37
523+  8A37 C9           	ret
524+  8A38
525+  8A38              ; --------------------------------------------------------------------------------------------------------------------
526+  8A38              ;
527+  8A38              ;	2/1/23
528+  8A38              ;
529+  8A38              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8A38              ;
531+  8A38              ;	Tras esta rutina tenemos:
532+  8A38              ;
533+  8A38              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8A38              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8A38              ;
536+  8A38              ;	DESTRUYE!!!!! HL,B y A.
537+  8A38
538+  8A38 2A F0 84     Operandos ld hl,(Posicion_actual)
539+  8A3B 3A 24 85     	ld a,(Columnas)
540+  8A3E 3D           	dec a
541+  8A3F 20 01        	jr nz,1F
542+  8A41 3C           	inc a
543+  8A42 47           1 ld b,a
544+  8A43 C9           	ret
545+  8A44
546+  8A44              ; --------------------------------------------------------------------------------------------------------------------
547+  8A44              ;
548+  8A44              ;	3/1/23
549+  8A44              ;
550+  8A44              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8A44              ;
552+  8A44              ;	Destruye: A,B,HL y DE.
553+  8A44
554+  8A44              Define_rutina_de_impresion
555+  8A44
556+  8A44 3A EF 84     	ld a,(Columns)
557+  8A47 47           	ld b,a
558+  8A48 3A 24 85     	ld a,(Columnas)
559+  8A4B B8           	cp b
560+  8A4C 20 0D        	jr nz,2f
561+  8A4E
562+  8A4E              ;	La entidad se imprime entera.
563+  8A4E
564+  8A4E 21 E5 8A     	ld hl, Indice_entidades_completas
565+  8A51 E6 01        	and 1
566+  8A53 28 02        	jr z,1F
567+  8A55
568+  8A55 23           	inc hl
569+  8A56 23           	inc hl
570+  8A57
571+  8A57 CD 9C 86     1 call Extrae_address
572+  8A5A C9           	ret		;	ret
573+  8A5B
574+  8A5B              ;	La entidad no se imprime entera en pantalla.
575+  8A5B
576+  8A5B 3A 02 85     2 ld a,(Cuad_objeto)
577+  8A5E E6 01        	and 1
578+  8A60 28 17        	jr z,3F
579+  8A62
580+  8A62              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8A62
582+  8A62 21 E9 8A     	ld hl, Indice_entidades_incompletas_izquierda
583+  8A65 3A EF 84     4 ld a,(Columns)
584+  8A68 E6 01        	and 1
585+  8A6A 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8A6C
587+  8A6C 23           	inc hl
588+  8A6D 23           	inc hl
589+  8A6E
590+  8A6E 3A 24 85     	ld a,(Columnas)
591+  8A71 E6 01        	and 1
592+  8A73 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8A75
594+  8A75 23           	inc hl
595+  8A76 23           	inc hl
596+  8A77
597+  8A77 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8A79
599+  8A79 21 EF 8A     3 ld hl, Indice_entidades_incompletas_derecha
600+  8A7C 18 E7        	jr 4B
601+  8A7E
602+  8A7E              ; --------------------------------------------------------------------------------------------------------------------
603+  8A7E              ;
604+  8A7E              ;	Prepara_draw
605+  8A7E              ;
606+  8A7E              ;	Es una rutina de carga.
607+  8A7E              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8A7E              ;
609+  8A7E              ;	FUNCIONAMIENTO:
610+  8A7E              ;
611+  8A7E              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8A7E              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8A7E              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8A7E              ;
615+  8A7E              ;	DESTRUYE:
616+  8A7E              ;
617+  8A7E              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8A7E
619+  8A7E 21 EE 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8A81 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8A82 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8A83 4E           	ld c,(hl)
623+  8A84 2A F0 84     	ld hl,(Posicion_actual)
624+  8A87 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8A89 C9           	ret
626+  8A8A
627+  8A8A              ;----------------------------------------------------------------------------------------------------------------
628+  8A8A              ;
629+  8A8A              ;	5/08/22
630+  8A8A              ;
631+  8A8A              ;   NextScan.
632+  8A8A              ;
633+  8A8A              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8A8A              ;
635+  8A8A              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8A8A              ;
637+  8A8A              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8A8A              ;
639+  8A8A              ;       DESTRUIDOS: AF y HL !!!
640+  8A8A              ;
641+  8A8A              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8A8A              ;
643+  8A8A
644+  8A8A 24           NextScan inc h          ; Incrementamos el scanline.
645+  8A8B 7C               ld a,h
646+  8A8C E6 07            and 7
647+  8A8E C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8A8F
649+  8A8F 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8A90 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8A92 6F               ld l,a
652+  8A93 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8A94
654+  8A94 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8A95 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8A97 67               ld h,a
657+  8A98 C9               ret
658+  8A99
659+  8A99              ;----------------------------------------------------------------------------------------------------------------
660+  8A99              ;
661+  8A99              ;	5/08/22
662+  8A99              ;
663+  8A99              ;   PreviousScan.
664+  8A99              ;
665+  8A99              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8A99              ;
667+  8A99              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8A99              ;
669+  8A99              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8A99              ;
671+  8A99              ;       DESTRUIDOS: AF y HL !!!
672+  8A99              ;
673+  8A99              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8A99              ;
675+  8A99
676+  8A99 7C           PreviousScan ld a,h
677+  8A9A 25               dec h               ; Dec H.
678+  8A9B E6 07            and 7
679+  8A9D C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8A9E
681+  8A9E 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8A9F D6 20            sub $20             ; Vamos a comprobarlo...
683+  8AA1 6F               ld l,a
684+  8AA2 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8AA3
686+  8AA3 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8AA4 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8AA6 67               ld h,a
689+  8AA7 C9               ret
690+  8AA8
691+  8AA8              ; -----------------------------------------------------------------------------------
692+  8AA8              ;
693+  8AA8              ;	15/1/23
694+  8AA8
695+  8AA8              Extrae_foto_registros
696+  8AA8
697+  8AA8 3A 2F 85     	ld a,(Numero_de_malotes)
698+  8AAB A7           	and a
699+  8AAC C8           	ret z
700+  8AAD
701+  8AAD
702+  8AAD ED 73 30 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8AB1 31 00 70     	ld sp,Album_de_fotos
704+  8AB4
705+  8AB4 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8AB6 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8AB7 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8AB8
709+  8AB8 ED 73 32 85  	ld (Stack_2),sp
710+  8ABC ED 7B 30 85  	ld sp,(Stack)
711+  8AC0
712+  8AC0              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8AC0
714+  8AC0 3E CD        	ld a,$cd
715+  8AC2 32 CA 8A     	ld (Imprime),a
716+  8AC5 EB           	ex de,hl
717+  8AC6 22 CB 8A     	ld (Imprime+1),hl
718+  8AC9 EB           	ex de,hl
719+  8ACA
720+  8ACA              ; Ejecuta la llamada:	CALL $xx,xx
721+  8ACA
722+  8ACA 00 00 00     Imprime db 0,0,0
723+  8ACD
724+  8ACD ED 73 30 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8AD1
726+  8AD1 3A 2F 85     	ld a,(Numero_de_malotes)
727+  8AD4 3D           	dec a
728+  8AD5 28 09        	jr z,1F
729+  8AD7 32 2F 85      	ld (Numero_de_malotes),a
730+  8ADA ED 7B 32 85  	ld sp,(Stack_2)
731+  8ADE 18 D4        	jr 2B
732+  8AE0
733+  8AE0 AF           1 xor a
734+  8AE1 32 32 85     	ld (Stack_2),a
735+  8AE4 C9           	ret
736+  8AE5
737+  8AE5
# file closed: Draw_XOR.asm
733   8AE5              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8AE5              ;   índices de Rutinas de impresión.
  2+  8AE5
  3+  8AE5 F5 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AE7 22 8B            defw Pinta_Amadeus_3x2
  5+  8AE9
  6+  8AE9 78 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AEB 18 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AED CC 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AEF
 10+  8AEF A2 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AF1 A6 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AF3 5A 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AF5
 14+  8AF5
 15+  8AF5              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AF5              ;
 17+  8AF5              ;   12/12/22
 18+  8AF5              ;
 19+  8AF5              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AF5              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AF5              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AF5              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AF5              ;
 24+  8AF5              ;   Modifica: DE y HL.
 25+  8AF5
 26+  8AF5 ED 73 30 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AF9 FD F9        	ld sp,iy
 28+  8AFB 06 10            ld b,16
 29+  8AFD D1           1 pop de
 30+  8AFE 7B               ld a,e
 31+  8AFF AE               xor (hl)
 32+  8B00 77           	ld (hl),a
 33+  8B01 23           	inc hl
 34+  8B02 7A               ld a,d
 35+  8B03 AE               xor (hl)
 36+  8B04 77           	ld (hl),a
 37+  8B05 2B           	dec hl
 38+  8B06 24           	inc h
 39+  8B07 7C               ld a,h
 40+  8B08 E6 07            and 7
 41+  8B0A 20 0A            jr nz,2F
 42+  8B0C 7D               ld a,l
 43+  8B0D C6 20            add a,$20
 44+  8B0F 6F               ld l,a
 45+  8B10 38 04            jr c,2F
 46+  8B12 7C               ld a,h
 47+  8B13 D6 08            sub 8
 48+  8B15 67               ld h,a
 49+  8B16 7C           2 ld a,h
 50+  8B17 FE 58            cp $58
 51+  8B19 28 02            jr z,3F
 52+  8B1B 10 E0            djnz 1B
 53+  8B1D ED 7B 30 85  3 ld sp,(Stack)
 54+  8B21 C9           	ret
 55+  8B22
 56+  8B22 ED 73 30 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B26 FD F9        	ld sp,iy
 58+  8B28 06 08            ld b,8
 59+  8B2A D1           1 pop de
 60+  8B2B 7B               ld a,e
 61+  8B2C AE               xor (hl)
 62+  8B2D 77           	ld (hl),a
 63+  8B2E 23           	inc hl
 64+  8B2F 7A               ld a,d
 65+  8B30 AE               xor (hl)
 66+  8B31 77           	ld (hl),a
 67+  8B32 23           	inc hl
 68+  8B33 D1           	pop de
 69+  8B34 7B               ld a,e
 70+  8B35 AE               xor (hl)
 71+  8B36 77           	ld (hl),a
 72+  8B37 2B           	dec hl
 73+  8B38 2B           	dec hl
 74+  8B39 24           	inc h
 75+  8B3A 7C               ld a,h
 76+  8B3B E6 07            and 7
 77+  8B3D 20 0A            jr nz,2F
 78+  8B3F 7D               ld a,l
 79+  8B40 C6 20            add a,$20
 80+  8B42 6F               ld l,a
 81+  8B43 38 04            jr c,2F
 82+  8B45 7C               ld a,h
 83+  8B46 D6 08            sub 8
 84+  8B48 67               ld h,a
 85+  8B49 7C           2 ld a,h
 86+  8B4A FE 58            cp $58
 87+  8B4C 28 25            jr z,4F
 88+  8B4E 7A               ld a,d
 89+  8B4F AE               xor (hl)
 90+  8B50 77               ld (hl),a
 91+  8B51 D1           	pop de
 92+  8B52 23           	inc hl
 93+  8B53 7B               ld a,e
 94+  8B54 AE               xor (hl)
 95+  8B55 77           	ld (hl),a
 96+  8B56 23           	inc hl
 97+  8B57 7A               ld a,d
 98+  8B58 AE               xor (hl)
 99+  8B59 77           	ld (hl),a
100+  8B5A 2B           	dec hl
101+  8B5B 2B           	dec hl
102+  8B5C 24           	inc h
103+  8B5D 7C               ld a,h
104+  8B5E E6 07            and 7
105+  8B60 20 0A            jr nz,3F
106+  8B62 7D               ld a,l
107+  8B63 C6 20            add a,$20
108+  8B65 6F               ld l,a
109+  8B66 38 04            jr c,3F
110+  8B68 7C               ld a,h
111+  8B69 D6 08            sub 8
112+  8B6B 67               ld h,a
113+  8B6C 7C           3 ld a,h
114+  8B6D FE 58            cp $58
115+  8B6F 28 02            jr z,4F
116+  8B71 10 B7            djnz 1B
117+  8B73 ED 7B 30 85  4 ld sp,(Stack)
118+  8B77 C9           	ret
119+  8B78
120+  8B78              ; ---------------------------------------------------
121+  8B78
122+  8B78 ED 73 30 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B7C FD F9        	ld sp,iy
124+  8B7E 06 10            ld b,16
125+  8B80 D1           1 pop de
126+  8B81 7A           	ld a,d
127+  8B82 AE           	xor (hl)
128+  8B83 77           	ld (hl),a
129+  8B84 24           	inc h
130+  8B85 7C               ld a,h
131+  8B86 E6 07            and 7
132+  8B88 20 0C            jr nz,2F
133+  8B8A 7D               ld a,l
134+  8B8B C6 20            add a,$20
135+  8B8D 6F               ld l,a
136+  8B8E 38 06            jr c,2F
137+  8B90 7C               ld a,h
138+  8B91 D6 08            sub 8
139+  8B93 67               ld h,a
140+  8B94 18 00            jr 2F
141+  8B96 7C           2 ld a,h
142+  8B97 FE 58            cp $58
143+  8B99 28 02            jr z,3F
144+  8B9B 10 E3            djnz 1B
145+  8B9D ED 7B 30 85  3 ld sp,(Stack)
146+  8BA1 C9           	ret
147+  8BA2
148+  8BA2 ED 73 30 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8BA6 FD F9        	ld sp,iy
150+  8BA8 06 10            ld b,16
151+  8BAA D1           1 pop de
152+  8BAB 7B           	ld a,e
153+  8BAC AE           	xor (hl)
154+  8BAD 77           	ld (hl),a
155+  8BAE 24           	inc h
156+  8BAF 7C               ld a,h
157+  8BB0 E6 07            and 7
158+  8BB2 20 0C            jr nz,2F
159+  8BB4 7D               ld a,l
160+  8BB5 C6 20            add a,$20
161+  8BB7 6F               ld l,a
162+  8BB8 38 06            jr c,2F
163+  8BBA 7C               ld a,h
164+  8BBB D6 08            sub 8
165+  8BBD 67               ld h,a
166+  8BBE 18 00            jr 2F
167+  8BC0 7C           2 ld a,h
168+  8BC1 FE 58            cp $58
169+  8BC3 28 02            jr z,3F
170+  8BC5 10 E3            djnz 1B
171+  8BC7 ED 7B 30 85  3 ld sp,(Stack)
172+  8BCB C9           	ret
173+  8BCC
174+  8BCC              ; ---------------------------------------------------
175+  8BCC
176+  8BCC ED 73 30 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BD0 FD F9        	ld sp,iy
178+  8BD2 06 08            ld b,8
179+  8BD4 D1           1 pop de
180+  8BD5 7A           	ld a,d
181+  8BD6 AE           	xor (hl)
182+  8BD7 77           	ld (hl),a
183+  8BD8 23           	inc hl
184+  8BD9 D1           	pop de
185+  8BDA 7B           	ld a,e
186+  8BDB AE           	xor (hl)
187+  8BDC 77           	ld (hl),a
188+  8BDD 2B           	dec hl
189+  8BDE 24            	inc h
190+  8BDF 7C               ld a,h
191+  8BE0 E6 07            and 7
192+  8BE2 20 0A            jr nz,2F
193+  8BE4 7D               ld a,l
194+  8BE5 C6 20            add a,$20
195+  8BE7 6F               ld l,a
196+  8BE8 38 04            jr c,2F
197+  8BEA 7C               ld a,h
198+  8BEB D6 08            sub 8
199+  8BED 67               ld h,a
200+  8BEE 7C           2 ld a,h
201+  8BEF FE 58            cp $58
202+  8BF1 28 20            jr z,4F
203+  8BF3 D1               pop de
204+  8BF4 7B           	ld a,e
205+  8BF5 AE           	xor (hl)
206+  8BF6 77           	ld (hl),a
207+  8BF7 23           	inc hl
208+  8BF8 7A           	ld a,d
209+  8BF9 AE           	xor (hl)
210+  8BFA 77           	ld (hl),a
211+  8BFB 2B           	dec hl
212+  8BFC 24           	inc h
213+  8BFD 7C               ld a,h
214+  8BFE E6 07            and 7
215+  8C00 20 0A            jr nz,3F
216+  8C02 7D               ld a,l
217+  8C03 C6 20            add a,$20
218+  8C05 6F               ld l,a
219+  8C06 38 04            jr c,3F
220+  8C08 7C               ld a,h
221+  8C09 D6 08            sub 8
222+  8C0B 67               ld h,a
223+  8C0C 7C           3 ld a,h
224+  8C0D FE 58            cp $58
225+  8C0F 28 02            jr z,4F
226+  8C11 10 C1            djnz 1B
227+  8C13 ED 7B 30 85  4 ld sp,(Stack)
228+  8C17 C9           	ret
229+  8C18
230+  8C18 ED 73 30 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C1C FD F9        	ld sp,iy
232+  8C1E 06 08            ld b,8
233+  8C20 D1           1 pop de
234+  8C21 D1           	pop de
235+  8C22 7B           	ld a,e
236+  8C23 AE           	xor (hl)
237+  8C24 77           	ld (hl),a
238+  8C25 24            	inc h
239+  8C26 7C               ld a,h
240+  8C27 E6 07            and 7
241+  8C29 20 0A            jr nz,2F
242+  8C2B 7D               ld a,l
243+  8C2C C6 20            add a,$20
244+  8C2E 6F               ld l,a
245+  8C2F 38 04            jr c,2F
246+  8C31 7C               ld a,h
247+  8C32 D6 08            sub 8
248+  8C34 67               ld h,a
249+  8C35 7C           2 ld a,h
250+  8C36 FE 58            cp $58
251+  8C38 28 1B            jr z,4F
252+  8C3A D1               pop de
253+  8C3B 7A           	ld a,d
254+  8C3C AE           	xor (hl)
255+  8C3D 77           	ld (hl),a
256+  8C3E 24           	inc h
257+  8C3F 7C               ld a,h
258+  8C40 E6 07            and 7
259+  8C42 20 0A            jr nz,3F
260+  8C44 7D               ld a,l
261+  8C45 C6 20            add a,$20
262+  8C47 6F               ld l,a
263+  8C48 38 04            jr c,3F
264+  8C4A 7C               ld a,h
265+  8C4B D6 08            sub 8
266+  8C4D 67               ld h,a
267+  8C4E 7C           3 ld a,h
268+  8C4F FE 58            cp $58
269+  8C51 28 02            jr z,4F
270+  8C53 10 CB            djnz 1B
271+  8C55 ED 7B 30 85  4 ld sp,(Stack)
272+  8C59 C9           	ret
273+  8C5A
274+  8C5A ED 73 30 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C5E FD F9        	ld sp,iy
276+  8C60 06 08            ld b,8
277+  8C62 D1           1 pop de
278+  8C63 7B           	ld a,e
279+  8C64 AE           	xor (hl)
280+  8C65 77           	ld (hl),a
281+  8C66 23           	inc hl
282+  8C67 7A           	ld a,d
283+  8C68 AE           	xor (hl)
284+  8C69 77           	ld (hl),a
285+  8C6A 2B           	dec hl
286+  8C6B 24             	inc h
287+  8C6C 7C               ld a,h
288+  8C6D E6 07            and 7
289+  8C6F 20 0A            jr nz,2F
290+  8C71 7D               ld a,l
291+  8C72 C6 20            add a,$20
292+  8C74 6F               ld l,a
293+  8C75 38 04            jr c,2F
294+  8C77 7C               ld a,h
295+  8C78 D6 08            sub 8
296+  8C7A 67               ld h,a
297+  8C7B 7C           2 ld a,h
298+  8C7C FE 58            cp $58
299+  8C7E 28 21            jr z,4F
300+  8C80 D1               pop de
301+  8C81 7A           	ld a,d
302+  8C82 AE           	xor (hl)
303+  8C83 77           	ld (hl),a
304+  8C84 23           	inc hl
305+  8C85 D1               pop de
306+  8C86 7B           	ld a,e
307+  8C87 AE           	xor (hl)
308+  8C88 77           	ld (hl),a
309+  8C89 2B           	dec hl
310+  8C8A 24           	inc h
311+  8C8B 7C               ld a,h
312+  8C8C E6 07            and 7
313+  8C8E 20 0A            jr nz,3F
314+  8C90 7D               ld a,l
315+  8C91 C6 20            add a,$20
316+  8C93 6F               ld l,a
317+  8C94 38 04            jr c,3F
318+  8C96 7C               ld a,h
319+  8C97 D6 08            sub 8
320+  8C99 67               ld h,a
321+  8C9A 7C           3 ld a,h
322+  8C9B FE 58            cp $58
323+  8C9D 28 02            jr z,4F
324+  8C9F 10 C1            djnz 1B
325+  8CA1 ED 7B 30 85  4 ld sp,(Stack)
326+  8CA5 C9           	ret
327+  8CA6
328+  8CA6 ED 73 30 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8CAA FD F9        	ld sp,iy
330+  8CAC 06 08            ld b,8
331+  8CAE D1           1 pop de
332+  8CAF 7B           	ld a,e
333+  8CB0 AE           	xor (hl)
334+  8CB1 77           	ld (hl),a
335+  8CB2 24            	inc h
336+  8CB3 7C               ld a,h
337+  8CB4 E6 07            and 7
338+  8CB6 20 0A            jr nz,2F
339+  8CB8 7D               ld a,l
340+  8CB9 C6 20            add a,$20
341+  8CBB 6F               ld l,a
342+  8CBC 38 04            jr c,2F
343+  8CBE 7C               ld a,h
344+  8CBF D6 08            sub 8
345+  8CC1 67               ld h,a
346+  8CC2 7C           2 ld a,h
347+  8CC3 FE 58            cp $58
348+  8CC5 28 1C            jr z,4F
349+  8CC7 D1               pop de
350+  8CC8 7A           	ld a,d
351+  8CC9 AE           	xor (hl)
352+  8CCA 77           	ld (hl),a
353+  8CCB 24           	inc h
354+  8CCC 7C               ld a,h
355+  8CCD E6 07            and 7
356+  8CCF 20 0A            jr nz,3F
357+  8CD1 7D               ld a,l
358+  8CD2 C6 20            add a,$20
359+  8CD4 6F               ld l,a
360+  8CD5 38 04            jr c,3F
361+  8CD7 7C               ld a,h
362+  8CD8 D6 08            sub 8
363+  8CDA 67               ld h,a
364+  8CDB 7C           3 ld a,h
365+  8CDC FE 58            cp $58
366+  8CDE 28 03            jr z,4F
367+  8CE0 D1               pop de
368+  8CE1 10 CB            djnz 1B
369+  8CE3 ED 7B 30 85  4 ld sp,(Stack)
370+  8CE7 C9           	ret
371+  8CE8
372+  8CE8              ; ---------------------------------------------------
373+  8CE8
# file closed: Rutinas_de_impresion_sprites.asm
734   8CE8              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CE8              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CE8              ;
  3+  8CE8              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CE8              ;
  5+  8CE8              ; *****************************************************************************************************************************************************************************************
  6+  8CE8              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CE8
  8+  8CE8 7C           calcula_tercio ld a,h
  9+  8CE9 E6 18        	and $18
 10+  8CEB CB 2F        	sra a
 11+  8CED CB 2F        	sra a
 12+  8CEF CB 2F        	sra a
 13+  8CF1 C9           	ret
 14+  8CF2
# file closed: calcula_tercio.asm
735   8CF2              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CF2              ; -----------------------------------------------------------------------------------------
  2+  8CF2              ;
  3+  8CF2              ;   04/11/22
  4+  8CF2              ;
  5+  8CF2              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CF2              ;
  7+  8CF2              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CF2              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CF2              ;
 10+  8CF2              ;   DESTRUYE: HL y A. !!!!!
 11+  8CF2
 12+  8CF2 CD E8 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CF5 26 58            ld h,$58
 14+  8CF7 84               add h
 15+  8CF8 67               ld h,a
 16+  8CF9 C9               ret
# file closed: Calcula_direccion_atributos.asm
736   8CFA              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CFA              ; ********** **********
  2+  8CFA              ;
  3+  8CFA              ;   5/11/22
  4+  8CFA              ;
  5+  8CFA              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CFA              ;
  7+  8CFA              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CFA              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CFA              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CFA              ;
 11+  8CFA              ;   NO DESTROYERSSSS !!!!!
 12+  8CFA
 13+  8CFA E5           Define_atributos push hl
 14+  8CFB C5           	push bc
 15+  8CFC D5           	push de
 16+  8CFD
 17+  8CFD CD F2 8C     	call Calcula_direccion_atributos
 18+  8D00
 19+  8D00 D9               exx
 20+  8D01 E5               push hl
 21+  8D02 D9               exx
 22+  8D03 D1               pop de
 23+  8D04
 24+  8D04 42               ld b,d
 25+  8D05 7B               ld a,e 									; (Attr) en A.
 26+  8D06
 27+  8D06 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8D07 E5            	push hl 								; Guardo dirección de attr.
 29+  8D08
 30+  8D08              ; -----
 31+  8D08
 32+  8D08 77           2 ld (hl),a
 33+  8D09 0D           	dec c 									; Decremento (Columnas).
 34+  8D0A 28 03        	jr z,1F
 35+  8D0C 23           	inc hl
 36+  8D0D 18 F9        	jr 2B
 37+  8D0F
 38+  8D0F E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8D10 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8D11
 41+  8D11 05           	dec b									; Decremento (Filas).
 42+  8D12 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8D14
 44+  8D14 11 20 00     	ld de,32
 45+  8D17 A7           	and a
 46+  8D18 ED 5A        	adc hl,de
 47+  8D1A 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8D1C
 49+  8D1C D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8D1D C1           	pop bc
 51+  8D1E E1           	pop hl
 52+  8D1F
 53+  8D1F C9           	ret
 54+  8D20
# file closed: Define_atributos.asm
737   8D20              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D20              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D20              ;
  3+  8D20              ;
  4+  8D20              ;	CLS.
  5+  8D20              ;
  6+  8D20              ;	Limpia la pantalla y define sus atributos.
  7+  8D20              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D20              ;
  9+  8D20              ;	COLORES: 0 ..... NEGRO
 10+  8D20              ;    		 1 ..... AZUL
 11+  8D20              ; 			 2 ..... ROJO
 12+  8D20              ;			 3 ..... MAGENTA
 13+  8D20              ; 			 4 ..... VERDE
 14+  8D20              ; 			 5 ..... CIAN
 15+  8D20              ;			 6 ..... AMARILLO
 16+  8D20              ; 			 7 ..... BLANCO
 17+  8D20              ;
 18+  8D20              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D20              ;
 20+  8D20              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D20
 22+  8D20
 23+  8D20 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D23 11 01 40     	LD DE,$4001
 25+  8D26 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D29 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D2B ED B0        	LDIR
 28+  8D2D 01 FF 02     	LD BC,767
 29+  8D30 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D31 ED B0        	LDIR
 31+  8D33 C9           	ret
 32+  8D34
# file closed: Cls.asm
738   8D34              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D34              ; ******************************************************************************************************************************************************************************************
  2+  8D34              ;
  3+  8D34              ;   22/01/23
  4+  8D34              ;
  5+  8D34              ;	Mov_down
  6+  8D34              ;
  7+  8D34              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D34              ;
  9+  8D34              ;
 10+  8D34 21 1B 85     Mov_down ld hl,Ctrl_0
 11+  8D37 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D39              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D39              ; 																	; _ en el caso de que no lo haya.
 14+  8D39 3A 06 85     	ld a,(Vel_down)
 15+  8D3C 47           	ld b,a
 16+  8D3D 2A F0 84         ld hl,(Posicion_actual)
 17+  8D40 CD E8 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D43 E6 02        	and 2
 19+  8D45 28 0F        	jr z,1F
 20+  8D47
 21+  8D47              ; Nos encontramos en el último tercio de pantalla.
 22+  8D47              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D47
 24+  8D47 7C           	ld a,h
 25+  8D48 FE 57        	cp $57
 26+  8D4A 20 0A        	jr nz,1F
 27+  8D4C 7D           	ld a,l
 28+  8D4D C6 20        	add $20
 29+  8D4F 30 05        	jr nc,1F
 30+  8D51
 31+  8D51              ; ------------------------------
 32+  8D51 CD 2F 90     	call Reaparece_arriba
 33+  8D54              ;	call Reinicio
 34+  8D54              ; ------------------------------
 35+  8D54 18 08        	jr 3F
 36+  8D56 CD 8A 8A     1 call NextScan
 37+  8D59 22 F0 84     	ld (Posicion_actual),hl
 38+  8D5C 10 E2            djnz 2B
 39+  8D5E CD 45 90     3 call Genera_coordenadas
 40+  8D61 C9           	ret
 41+  8D62
 42+  8D62
 43+  8D62              ; ******************************************************************************************************************************************************************************************
 44+  8D62              ;
 45+  8D62              ;   22/01/23
 46+  8D62              ;
 47+  8D62              ;	Mov_up
 48+  8D62              ;
 49+  8D62              ; 	Mueve el Sprite hacia arriba.
 50+  8D62              ;
 51+  8D62              ;
 52+  8D62 21 1B 85     Mov_up ld hl,Ctrl_0
 53+  8D65 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8D67              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8D67              ; 																		; _ en el caso de que no lo haya.
 56+  8D67 3A 05 85     	ld a,(Vel_up)
 57+  8D6A 47           	ld b,a
 58+  8D6B 2A F0 84     	ld hl,(Posicion_actual)
 59+  8D6E CD E8 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8D71 A7           	and a
 61+  8D72 20 10        	jr nz,1F
 62+  8D74
 63+  8D74              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8D74              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8D74
 66+  8D74 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8D75 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8D77 20 0B            jr nz,1F
 69+  8D79 7D               ld a,l
 70+  8D7A D6 20            sub $20
 71+  8D7C 30 06            jr nc,1F
 72+  8D7E 25               dec h
 73+  8D7F
 74+  8D7F              ; -----------------------------
 75+  8D7F CD 1F 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8D82              ;	call Reinicio
 77+  8D82              ; -----------------------------
 78+  8D82
 79+  8D82 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8D84 CD 99 8A     1 call PreviousScan
 81+  8D87 22 F0 84     	ld (Posicion_actual),hl
 82+  8D8A 10 E2            djnz 3B
 83+  8D8C CD 45 90     2 call Genera_coordenadas
 84+  8D8F C9           	ret
 85+  8D90
 86+  8D90              ; ******************************************************************************************************************************************************************************************
 87+  8D90              ;
 88+  8D90              ;	19/10/22
 89+  8D90              ;
 90+  8D90              ;	Mov_right.
 91+  8D90              ;
 92+  8D90              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8D90              ;
 94+  8D90
 95+  8D90 21 1B 85     Mov_right ld hl,Ctrl_0
 96+  8D93 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8D95              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8D95              ; 																	; _ en el caso de que no lo haya.
 99+  8D95 3A 1B 85     	ld a,(Ctrl_0)
100+  8D98 CB 77        	bit 6,a
101+  8D9A 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8D9C
103+  8D9C CD CD 8F     	call Stop_Amadeus_right
104+  8D9F C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8DA0 18 4D        	jr 8F
106+  8DA2
107+  8DA2 3A F4 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8DA5 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8DA7 20 46        	jr nz,8F
110+  8DA9
111+  8DA9 3A F6 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8DAC A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8DAD 28 40        	jr z,8F
114+  8DAF
115+  8DAF              ; ---------- ---------- ----------
116+  8DAF              ;
117+  8DAF              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8DAF
119+  8DAF 3A 04 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8DB2 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8DB4 28 11        	jr z,1F
122+  8DB6 38 06        	jr c,6F
123+  8DB8 FE 04        	cp 4
124+  8DBA 28 14        	jr z,7F
125+  8DBC 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8DBE
127+  8DBE              ; ---------- ---------- ----------
128+  8DBE              ;
129+  8DBE              ; Perfiles de velocidad
130+  8DBE              ;
131+  8DBE
132+  8DBE 3A F6 84     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8DC1 FE FE        	cp $fe
134+  8DC3 20 2A        	jr nz,8F
135+  8DC5 18 10        	jr 3F
136+  8DC7 3A F6 84     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8DCA FE FD        	cp $fd
138+  8DCC 20 21        	jr nz,8F
139+  8DCE 18 07        	jr 3F
140+  8DD0 3A F6 84     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8DD3 FE FB        	cp $fb
142+  8DD5 20 18        	jr nz,8F
143+  8DD7
144+  8DD7              ; ---------- ---------- ----------
145+  8DD7
146+  8DD7              3
147+  8DD7              ;	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8DD7 CD 3E 90     	call Reinicio
149+  8DDA
150+  8DDA              ; ---------- ---------- ----------
151+  8DDA              ;
152+  8DDA              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8DDA
154+  8DDA 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8DDC C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8DDD CD F6 8D     	call DESPLZ_DER
157+  8DE0 C1           	pop bc
158+  8DE1 10 F9        	djnz 5B
159+  8DE3 2A F0 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8DE6 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8DE7 22 F0 84     	ld (Posicion_actual),hl
162+  8DEA CD 45 90     	call Genera_coordenadas
163+  8DED 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8DEF
165+  8DEF              ; ---------- ---------- ----------
166+  8DEF
167+  8DEF 2A F0 84     8 ld hl,(Posicion_actual)
168+  8DF2 CD F6 8D     	call DESPLZ_DER
169+  8DF5 C9           2 ret
170+  8DF6
171+  8DF6              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8DF6              ;
173+  8DF6              ;	22/9/22
174+  8DF6              ;
175+  8DF6
176+  8DF6 CD 05 8E     DESPLZ_DER call Desplaza_derecha
177+  8DF9 CD 4D 8E         call modifica_parametros_1er_DESPLZ_2
178+  8DFC CD 76 8E         call Ciclo_completo
179+  8DFF 21 1B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8E02 CB FE        	set 7,(hl)
181+  8E04 C9           	ret
182+  8E05
183+  8E05              ; ******************************************************************************************************************************************************************************************
184+  8E05              ;	2/2/23
185+  8E05              ;
186+  8E05
187+  8E05 3A 04 85     Desplaza_derecha ld a,(Vel_right)
188+  8E08 47           	ld b,a
189+  8E09 2A FC 84     	ld hl,(Puntero_DESPLZ_der)
190+  8E0C 23           1 inc hl
191+  8E0D 23           	inc hl
192+  8E0E 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8E10 22 FC 84     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8E13 CD 9C 86     	call Extrae_address
195+  8E16 22 F2 84     	ld (Puntero_objeto),hl
196+  8E19
197+  8E19              ; Modifica (Puntero_DESPLZ_izq).
198+  8E19
199+  8E19              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8E19              ; Cuántos movimientos hemos hecho ??
201+  8E19              ; DE contiene (Puntero_DESPLZ_der).
202+  8E19
203+  8E19 2A F8 84     	ld hl,(Indice_Sprite_der)
204+  8E1C EB           	ex de,hl
205+  8E1D A7           	and a
206+  8E1E ED 52        	sbc hl,de
207+  8E20 CB 3D        	srl l
208+  8E22 3E 08        6 ld a,8
209+  8E24 95           	sub l
210+  8E25 30 1A        	jr nc,3F
211+  8E27
212+  8E27              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8E27              ; B="0".
214+  8E27
215+  8E27 04           4 inc b
216+  8E28 3C           	inc a
217+  8E29 20 FC        	jr nz,4B
218+  8E2B 78           	ld a,b
219+  8E2C 08           	ex af,af
220+  8E2D 2A F8 84     	ld hl,(Indice_Sprite_der)
221+  8E30 23           5 inc hl
222+  8E31 23           	inc hl
223+  8E32 10 FC        	djnz 5B
224+  8E34 22 FC 84     	ld (Puntero_DESPLZ_der),hl
225+  8E37 CD 9C 86     	call Extrae_address
226+  8E3A 22 F2 84     	ld (Puntero_objeto),hl
227+  8E3D 08           	ex af,af
228+  8E3E 6F           	ld l,a
229+  8E3F 18 E1        	jr 6B
230+  8E41
231+  8E41
232+  8E41              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
233+  8E41
234+  8E41 47           3 ld b,a
235+  8E42 2A FA 84     	ld hl,(Indice_Sprite_izq)
236+  8E45 23           2 inc hl
237+  8E46 23           	inc hl
238+  8E47 10 FC        	djnz 2B
239+  8E49 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
240+  8E4C C9           	ret
241+  8E4D
242+  8E4D              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
243+  8E4D              ;
244+  8E4D              ;	24/7/22
245+  8E4D              ;
246+  8E4D              ;	modifica_parametros_1er_DESPLZ_2
247+  8E4D              ;
248+  8E4D              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
249+  8E4D              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
250+  8E4D              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
251+  8E4D
252+  8E4D 3A F6 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
253+  8E50 A7           	and a
254+  8E51 20 1F        	jr nz,1F
255+  8E53 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
256+  8E55 32 F6 84         ld (CTRL_DESPLZ),a
257+  8E58
258+  8E58 21 EF 84     	ld hl,Columns
259+  8E5B 34           	inc (hl)
260+  8E5C 3A 02 85     	ld a,(Cuad_objeto)
261+  8E5F E6 01        	and 1
262+  8E61 28 0F        	jr z,1F
263+  8E63 2A F0 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
264+  8E66 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
265+  8E67 22 F0 84     	ld (Posicion_actual),hl
266+  8E6A CD 45 90     	call Genera_coordenadas
267+  8E6D CD D9 8F     	call Inc_CTRL_DESPLZ
268+  8E70 18 03        	jr 2F
269+  8E72 CD D9 8F     1 call Inc_CTRL_DESPLZ
270+  8E75 C9           2 ret
271+  8E76
272+  8E76              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
273+  8E76              ;
274+  8E76              ;	24/7/22
275+  8E76              ;
276+  8E76              ;	Ciclo_completo.
277+  8E76              ;
278+  8E76              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
279+  8E76              ;
280+  8E76              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
281+  8E76              ; 	Decrementamos (Columns).
282+  8E76              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
283+  8E76              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
284+  8E76
285+  8E76
286+  8E76 3A F6 84     Ciclo_completo ld a,(CTRL_DESPLZ)
287+  8E79 FE FF        	cp $ff
288+  8E7B 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
289+  8E7D E6 F0        	and $f0
290+  8E7F 20 28        	jr nz,3F
291+  8E81
292+  8E81              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
293+  8E81
294+  8E81 3A F6 84     	ld a,(CTRL_DESPLZ)
295+  8E84 47           	ld b,a
296+  8E85 3E F8        	ld a,$f8
297+  8E87 80           	add b
298+  8E88 32 F6 84     	ld (CTRL_DESPLZ),a
299+  8E8B 18 1C        	jr 3F
300+  8E8D 21 EF 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
301+  8E90 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
302+  8E91 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
303+  8E92 32 F6 84     	ld (CTRL_DESPLZ),a
304+  8E95 3A 02 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
305+  8E98 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
306+  8E9A 20 0A        	jr nz,2F
307+  8E9C 2A F0 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
308+  8E9F 23           	inc hl
309+  8EA0 22 F0 84     	ld (Posicion_actual),hl
310+  8EA3 CD 45 90     	call Genera_coordenadas
311+  8EA6
312+  8EA6              ; Inicia el puntero de Sprite.
313+  8EA6
314+  8EA6 CD B1 86     2 call Inicia_puntero_objeto_der
315+  8EA9 C9           3 ret
316+  8EAA
317+  8EAA              ; ******************************************************************************************************************************************************************************************
318+  8EAA              ;
319+  8EAA              ;	21/01/23
320+  8EAA              ;
321+  8EAA              ;	Mov_left.
322+  8EAA              ;
323+  8EAA              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
324+  8EAA              ;
325+  8EAA              Mov_left
326+  8EAA
327+  8EAA 21 1B 85     	ld hl,Ctrl_0
328+  8EAD CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
329+  8EAF              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
330+  8EAF              ; 																	; _ en el caso de que no lo haya.
331+  8EAF 3A F6 84     	ld a,(CTRL_DESPLZ)
332+  8EB2 A7           	and a
333+  8EB3 20 0C        	jr nz,11F
334+  8EB5
335+  8EB5 3A 1B 85     	ld a,(Ctrl_0)
336+  8EB8 CB 77        	bit 6,a
337+  8EBA 28 55        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
338+  8EBC
339+  8EBC CD D3 8F     	call Stop_Amadeus_left
340+  8EBF 20 50        	jr nz,8F
341+  8EC1
342+  8EC1 3A F4 84     11 ld a,(Coordenada_X)
343+  8EC4 A7           	and a
344+  8EC5 20 4A        	jr nz,8F
345+  8EC7 3A F6 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
346+  8ECA A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
347+  8ECB 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
348+  8ECD
349+  8ECD              ; ---------- ---------- ----------
350+  8ECD
351+  8ECD 3A 03 85     	ld a,(Vel_left)
352+  8ED0 FE 02        	cp 2
353+  8ED2 28 0F        	jr z,1F
354+  8ED4 38 04        	jr c,6F
355+  8ED6 FE 04        	cp 4
356+  8ED8 28 12        	jr z,7F
357+  8EDA
358+  8EDA              ; ---------- ---------- ----------
359+  8EDA
360+  8EDA 3A F6 84     6 ld a,(CTRL_DESPLZ)
361+  8EDD FE F9        	cp $f9
362+  8EDF 20 30        	jr nz,8F
363+  8EE1 18 10        	jr 4F
364+  8EE3 3A F6 84     1 ld a,(CTRL_DESPLZ)
365+  8EE6 FE FA        	cp $fa
366+  8EE8 20 27        	jr nz,8F
367+  8EEA 18 07        	jr 4F
368+  8EEC 3A F6 84     7 ld a,(CTRL_DESPLZ)
369+  8EEF FE FC        	cp $fc
370+  8EF1 20 1E        	jr nz,8F
371+  8EF3
372+  8EF3              ; ---------- ---------- ----------
373+  8EF3
374+  8EF3              4
375+  8EF3              ;	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
376+  8EF3 CD 3E 90     	call Reinicio
377+  8EF6
378+  8EF6              ; ---------- ---------- ----------
379+  8EF6
380+  8EF6 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
381+  8EF8 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
382+  8EF9
383+  8EF9 2A FA 84     	ld hl,(Indice_Sprite_izq)
384+  8EFC 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
385+  8EFF
386+  8EFF CD 18 8F     	call DESPLZ_IZQ
387+  8F02 C1           	pop bc
388+  8F03 10 F3        	djnz 5B
389+  8F05 2A F0 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
390+  8F08 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
391+  8F09 22 F0 84     	ld (Posicion_actual),hl
392+  8F0C CD 45 90     	call Genera_coordenadas
393+  8F0F 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
394+  8F11
395+  8F11              ; ---------- ---------- ----------
396+  8F11              ; Movemos, no hay recolocación.
397+  8F11
398+  8F11 2A F0 84     8 ld hl,(Posicion_actual)
399+  8F14 CD 18 8F     	call DESPLZ_IZQ
400+  8F17 C9           2 ret
401+  8F18
402+  8F18              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
403+  8F18              ;
404+  8F18              ;	22/9/22
405+  8F18
406+  8F18              DESPLZ_IZQ
407+  8F18
408+  8F18 CD 27 8F     	call Desplaza_izquierda
409+  8F1B CD 6F 8F         call modifica_parametros_1er_DESPLZ
410+  8F1E CD 97 8F     	call Ciclo_completo_2
411+  8F21 21 1B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
412+  8F24 CB BE        	res 7,(hl)
413+  8F26 C9           	ret
414+  8F27
415+  8F27 3A 03 85     Desplaza_izquierda ld a,(Vel_left)
416+  8F2A 47           	ld b,a
417+  8F2B 2A FE 84     	ld hl,(Puntero_DESPLZ_izq)
418+  8F2E 23           1 inc hl
419+  8F2F 23           	inc hl
420+  8F30 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
421+  8F32 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
422+  8F35 CD 9C 86     	call Extrae_address
423+  8F38 22 F2 84     	ld (Puntero_objeto),hl
424+  8F3B
425+  8F3B              ; Modifica (Puntero_DESPLZ_der).
426+  8F3B
427+  8F3B              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
428+  8F3B              ; Cuántos movimientos hemos hecho ??
429+  8F3B              ; DE contiene (Puntero_DESPLZ_izq).
430+  8F3B
431+  8F3B 2A FA 84     	ld hl,(Indice_Sprite_izq)
432+  8F3E EB           	ex de,hl
433+  8F3F A7           	and a
434+  8F40 ED 52        	sbc hl,de
435+  8F42 CB 3D        	srl l
436+  8F44 3E 08        6 ld a,8
437+  8F46 95           	sub l
438+  8F47 30 1A        	jr nc,3F
439+  8F49
440+  8F49              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
441+  8F49              ; B="0".
442+  8F49
443+  8F49 04           4 inc b
444+  8F4A 3C           	inc a
445+  8F4B 20 FC        	jr nz,4B
446+  8F4D 78           	ld a,b
447+  8F4E 08           	ex af,af
448+  8F4F 2A FA 84     	ld hl,(Indice_Sprite_izq)
449+  8F52 23           5 inc hl
450+  8F53 23           	inc hl
451+  8F54 10 FC        	djnz 5B
452+  8F56 22 FE 84     	ld (Puntero_DESPLZ_izq),hl
453+  8F59 CD 9C 86     	call Extrae_address
454+  8F5C 22 F2 84     	ld (Puntero_objeto),hl
455+  8F5F 08           	ex af,af
456+  8F60 6F           	ld l,a
457+  8F61 18 E1        	jr 6B
458+  8F63
459+  8F63              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
460+  8F63
461+  8F63 47           3 ld b,a
462+  8F64 2A F8 84     	ld hl,(Indice_Sprite_der)
463+  8F67 23           2 inc hl
464+  8F68 23           	inc hl
465+  8F69 10 FC        	djnz 2B
466+  8F6B 22 FC 84     	ld (Puntero_DESPLZ_der),hl
467+  8F6E C9           	ret
468+  8F6F
469+  8F6F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
470+  8F6F              ;
471+  8F6F              ;	modifica_parametros_1er_DESPLZ
472+  8F6F              ;
473+  8F6F              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
474+  8F6F              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
475+  8F6F              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
476+  8F6F
477+  8F6F 3A F6 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
478+  8F72 A7           	and a
479+  8F73 20 1E        	jr nz,1F
480+  8F75 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
481+  8F76 32 F6 84         ld (CTRL_DESPLZ),a
482+  8F79 21 EF 84     	ld hl,Columns
483+  8F7C 34           	inc (hl)
484+  8F7D 3A 02 85     	ld a,(Cuad_objeto)
485+  8F80 E6 01        	and 1
486+  8F82 20 0F        	jr nz,1F
487+  8F84 2A F0 84     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
488+  8F87 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
489+  8F88 22 F0 84     	ld (Posicion_actual),hl
490+  8F8B CD 45 90     	call Genera_coordenadas
491+  8F8E CD EA 8F     	call Dec_CTRL_DESPLZ
492+  8F91 18 03        	jr 2F
493+  8F93 CD EA 8F     1 call Dec_CTRL_DESPLZ
494+  8F96 C9           2 ret
495+  8F97
496+  8F97              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
497+  8F97
498+  8F97 3A F6 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
499+  8F9A FE F7        	cp $f7
500+  8F9C 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
501+  8F9E 30 2C        	jr nc,3F
502+  8FA0
503+  8FA0              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
504+  8FA0
505+  8FA0 06 00        	ld b,0
506+  8FA2 04           4 inc b
507+  8FA3 3C           	inc a
508+  8FA4 FE F7        	cp $f7
509+  8FA6 20 FA        	jr nz,4B
510+  8FA8 3E FF        	ld a,$ff
511+  8FAA 90           	sub b
512+  8FAB 32 F6 84     	ld (CTRL_DESPLZ),a
513+  8FAE 18 1C        	jr 3F
514+  8FB0
515+  8FB0              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
516+  8FB0
517+  8FB0 21 EF 84     1 ld hl,Columns
518+  8FB3 35           	dec (hl)
519+  8FB4 AF           	xor a
520+  8FB5 32 F6 84     	ld (CTRL_DESPLZ),a
521+  8FB8 3A 02 85     	ld a,(Cuad_objeto)
522+  8FBB E6 01        	and 1
523+  8FBD 28 0A        	jr z,2F
524+  8FBF 2A F0 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
525+  8FC2 2B           	dec hl
526+  8FC3 22 F0 84     	ld (Posicion_actual),hl
527+  8FC6 CD 45 90     	call Genera_coordenadas
528+  8FC9
529+  8FC9              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
530+  8FC9
531+  8FC9 CD C4 86     2 call Inicia_puntero_objeto_izq
532+  8FCC C9           3 ret
533+  8FCD
534+  8FCD              ; ---------- ---------- ---------- ---------- ---------- ----------
535+  8FCD              ;
536+  8FCD              ;	19/10/22
537+  8FCD              ;
538+  8FCD              ;	(cp 29) para un Amadeus de 3 Columns.
539+  8FCD              ;	(cp 30)   ""  ""    ""     2 Columns.
540+  8FCD
541+  8FCD 3A F4 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
542+  8FD0 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
543+  8FD2 C9           	ret
544+  8FD3
545+  8FD3              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  8FD3              ;
547+  8FD3              ;	19/10/22
548+  8FD3              ;
549+  8FD3              ;	(cp 2) para un Amadeus de 3 Columns.
550+  8FD3              ;	(cp 1)   ""  ""    ""     2 Columns.
551+  8FD3
552+  8FD3 3A F4 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  8FD6 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
554+  8FD8 C9           	ret
555+  8FD9
556+  8FD9              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  8FD9              ;
558+  8FD9              ;	24/7/22
559+  8FD9              ;
560+  8FD9              ;	Inc_CTRL_DESPLZ
561+  8FD9              ;
562+  8FD9              ;
563+  8FD9              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
564+  8FD9
565+  8FD9 21 F6 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
566+  8FDC 3A 04 85     	ld a,(Vel_right)
567+  8FDF A7           	and a
568+  8FE0 28 06        	jr z,1F
569+  8FE2 47           	ld b,a
570+  8FE3 34           3 inc (hl)
571+  8FE4 10 FD        	djnz 3B
572+  8FE6 18 01        	jr 2F
573+  8FE8 34           1 inc (hl)
574+  8FE9 C9           2 ret
575+  8FEA
576+  8FEA              ; ---------- ---------- ---------- ---------- ---------- ----------
577+  8FEA              ;
578+  8FEA              ;	5/2/23
579+  8FEA              ;
580+  8FEA              ;	Dec_CTRL_DESPLZ
581+  8FEA              ;
582+  8FEA              ;
583+  8FEA              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
584+  8FEA
585+  8FEA 21 F6 84     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
586+  8FED 3A 03 85     	ld a,(Vel_left)
587+  8FF0 A7           	and a
588+  8FF1 28 06        	jr z,1F
589+  8FF3 47           	ld b,a
590+  8FF4 35           3 dec (hl)
591+  8FF5 10 FD        	djnz 3B
592+  8FF7 18 01        	jr 2F
593+  8FF9 35           1 dec (hl)
594+  8FFA C9           2 ret
595+  8FFB
596+  8FFB              ; ---------- ---------- ---------- ---------- ---------- ----------
597+  8FFB
598+  8FFB 2A F0 84     Reaparece_derecha ld hl,(Posicion_actual)
599+  8FFE 01 1F 00     	ld bc,31
600+  9001 A7           	and a
601+  9002 ED 4A        	adc hl,bc
602+  9004 22 F0 84     	ld (Posicion_actual),hl
603+  9007 21 1B 85     	ld hl,Ctrl_0														; $xxx1
604+  900A CB C6        	set 0,(hl)
605+  900C C9           	ret
606+  900D
607+  900D              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  900D
609+  900D 2A F0 84     Reaparece_izquierda ld hl,(Posicion_actual)
610+  9010 01 1F 00     	ld bc,31
611+  9013 A7           	and a
612+  9014 ED 42        	sbc hl,bc
613+  9016 22 F0 84     	ld (Posicion_actual),hl 											; $xx1x
614+  9019 21 1B 85     	ld hl,Ctrl_0
615+  901C CB CE        	set 1,(hl)
616+  901E C9           	ret
617+  901F
618+  901F              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  901F
620+  901F 24           Reaparece_abajo inc h
621+  9020 01 E0 17     	ld bc,$17e0
622+  9023 A7           	and a
623+  9024 ED 4A        	adc hl,bc
624+  9026 22 F0 84     	ld (Posicion_actual),hl
625+  9029 21 1B 85     	ld hl,Ctrl_0
626+  902C CB D6        	set 2,(hl)
627+  902E C9           	ret
628+  902F
629+  902F              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  902F
631+  902F 01 E0 17     Reaparece_arriba ld bc,$17e0
632+  9032 A7           	and a
633+  9033 ED 42        	sbc hl,bc
634+  9035 22 F0 84     	ld (Posicion_actual),hl
635+  9038 21 1B 85     	ld hl,Ctrl_0
636+  903B CB DE        	set 3,(hl)
637+  903D C9           	ret
638+  903E
639+  903E              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
640+  903E
641+  903E 2A 00 85     Reinicio ld hl,(Posicion_inicio)
642+  9041 22 F0 84     	ld (Posicion_actual),hl
643+  9044 C9           	ret
# file closed: Direcciones.asm
739   9045              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  9045              ;	12/12/22
  2+  9045              ;
  3+  9045              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  9045              ;	Fila superior "0", Columna izquierda "0".
  5+  9045              ;
  6+  9045              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  9045              ;
  8+  9045              ;	Modifica: A
  9+  9045
 10+  9045 C5           Genera_coordenadas push bc
 11+  9046 E5           	push hl
 12+  9047 2A F0 84     	ld hl,(Posicion_actual)
 13+  904A 7D           	ld a,l
 14+  904B E6 1F        	and $1f
 15+  904D 32 F4 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9050 CD E8 8C     	call calcula_tercio
 17+  9053 47           	ld b,a
 18+  9054 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9055 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  9057 7D           	ld a,l
 21+  9058 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  905A 28 05        	jr z,2F
 23+  905C 0C           1 inc c
 24+  905D D6 20        	sub 32
 25+  905F 20 FB        	jr nz,1B
 26+  9061 0C           2 inc c
 27+  9062 04           	inc b
 28+  9063 05           	dec b
 29+  9064 28 04        	jr z,3F
 30+  9066 3E E0        	ld a,$e0
 31+  9068 10 F2        	djnz 1B
 32+  906A 79           3 ld a,c
 33+  906B 3D           	dec a
 34+  906C 32 F5 84     	ld (Coordenada_y),a
 35+  906F E1           	pop hl
 36+  9070 C1           	pop bc
 37+  9071 C9           	ret
# file closed: Genera_coordenadas.asm
740   9072              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9072
  2+  9072
  3+  9072              ;   11/8/22
  4+  9072              ;
  5+  9072              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9072              ;
  7+  9072              ;   Mov_obj.asm
  8+  9072              ;
  9+  9072              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9072              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9072              ;
 12+  9072              ;   Codificación:
 13+  9072              ;
 14+  9072              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9072
 16+  9072              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9072
 18+  9072 02 40 00     Arriba db 2,%01000000,0
 19+  9075 02 80 00     Abajo db 2,%10000000,0
 20+  9078 02 20 00     Derecha db 2,%00100000,0
 21+  907B 02 10 00     Izquierda db 2,%00010000,0
 22+  907E 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9082 60 42 60 40
 22+  9086 63
 23+  9087 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  908B 22 A3 80 A0
 24+  908F 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  9093 84 A0 83 A0
 25+  9097 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  909B 80 A3 22 A0
 26+  909F 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  90A3 40 60 42 60
 27+  90A7 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  90AB 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  90AF 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  90B3 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  90B7 84
 31+  90B8 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  90BC 84 00
 32+  90BE 03 2F 18 00  Derecha_e_izquierda db 3,%00101111,%00011000,0
 33+  90C2 03 1F 28 00  Izquierda_y_derecha db 3,%00011111,%00101000,0
 34+  90C6
 35+  90C6
 36+  90C6              ; ----- ----- ----- ----- -----
 37+  90C6 C2 90        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 38+  90C8 BE 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 39+  90CA 7B 90        Indice_mov_Izquierda defw Izquierda
 40+  90CC 78 90        Indice_mov_Derecha defw Derecha
 41+  90CE 75 90        Indice_mov_Abajo defw Abajo
 42+  90D0 72 90        Indice_mov_Arriba defw Arriba
 43+  90D2 AF 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 44+  90D4 B3 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 45+  90D6 AB 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 46+  90D8 B8 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 47+  90DA 7E 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 48+  90DC              ; ----- ----- ----- ----- -----
 49+  90DC
 50+  90DC 3A 21 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 51+  90DF A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 52+  90E0 28 02            jr z,1F
 53+  90E2 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 54+  90E4 3A 22 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 55+  90E7 C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 56+  90E9 32 22 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 57+  90EC              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 58+  90EC 2A 1F 85         ld hl,(Puntero_mov)
 59+  90EF 7E               ld a,(hl)
 60+  90F0 32 21 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 61+  90F3 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 62+  90F4 22 1F 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 63+  90F7
 64+  90F7 3A 23 85     Decoder ld a,(Repetimos_db)
 65+  90FA A7               and a
 66+  90FB 20 0C            jr nz,12F
 67+  90FD 2A 1F 85         ld hl,(Puntero_mov)
 68+  9100 7E               ld a,(hl)
 69+  9101 A7               and a
 70+  9102 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 71+  9104 E6 0F            and $0f
 72+  9106 32 23 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 73+  9109              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 74+  9109 2A 1F 85     12 ld hl,(Puntero_mov)
 75+  910C CB 7E            bit 7,(hl)
 76+  910E 28 03            jr z,2F
 77+  9110 CD 34 8D         call Mov_down
 78+  9113 2A 1F 85     2 ld hl, (Puntero_mov)
 79+  9116 CB 76            bit 6,(hl)
 80+  9118 28 03            jr z,3F
 81+  911A CD 62 8D         call Mov_up
 82+  911D 2A 1F 85     3 ld hl, (Puntero_mov)
 83+  9120 CB 6E            bit 5,(hl)
 84+  9122 28 03            jr z,4F
 85+  9124 CD 90 8D         call Mov_right
 86+  9127 2A 1F 85     4 ld hl, (Puntero_mov)
 87+  912A CB 66            bit 4,(hl)
 88+  912C 28 03            jr z,5F
 89+  912E CD AA 8E         call Mov_left
 90+  9131
 91+  9131              ; ---------- --------- --------- ---------- ----------
 92+  9131
 93+  9131 3A 23 85     5 ld a,(Repetimos_db)
 94+  9134 A7               and a
 95+  9135 28 07            jr z,6F
 96+  9137 3D               dec a
 97+  9138 32 23 85         ld (Repetimos_db),a
 98+  913B 28 01            jr z,6f
 99+  913D C9           11 ret
100+  913E 21 21 85     6 ld hl,Contador_db_mov
101+  9141 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
102+  9142 2A 1F 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
103+  9145 23               inc hl
104+  9146 22 1F 85         ld (Puntero_mov),hl
105+  9149 18 F2            jr 11B
106+  914B 2A 1D 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
107+  914E 3A 22 85         ld a,(Incrementa_puntero)
108+  9151 47               ld b,a
109+  9152 23           8 inc hl
110+  9153 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
111+  9155 5E               ld e,(hl)
112+  9156 23               inc hl
113+  9157 56               ld d,(hl)
114+  9158 EB               ex de,hl
115+  9159 22 1F 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
116+  915C 18 DF            jr 11B
117+  915E
118+  915E              ; ---------- --------- --------- ---------- ----------
119+  915E              ;
120+  915E              ;   11/8/22
121+  915E              ;
122+  915E              ;   Prepara_Puntero_mov
123+  915E
124+  915E E5           Prepara_Puntero_mov push hl
125+  915F D5               push de
126+  9160 2A 1D 85         ld hl,(Puntero_indice_mov)
127+  9163 5E               ld e,(hl)
128+  9164 23               inc hl
129+  9165 56               ld d,(hl)
130+  9166 EB               ex de,hl
131+  9167 22 1F 85         ld (Puntero_mov),hl
132+  916A D1               pop de
133+  916B E1               pop hl
134+  916C C9               ret
135+  916D
136+  916D              ; ---------- --------- --------- ---------- ----------
137+  916D              ;
138+  916D              ;   11/8/22
139+  916D              ;
140+  916D              ;   Reinicia_el_movimiento
141+  916D
142+  916D CD 5E 91     Reinicia_el_movimiento call Prepara_Puntero_mov
143+  9170 AF               xor a
144+  9171 32 21 85         ld (Contador_db_mov),a
145+  9174 32 22 85         ld (Incrementa_puntero),a
146+  9177
147+  9177              ;    jr $
148+  9177
149+  9177 C3 DC 90         jp Movimiento
150+  917A C9               ret
151+  917B              ; ---------- --------- --------- ---------- ----------
152+  917B
153+  917B
154+  917B
155+  917B
156+  917B
157+  917B
158+  917B
159+  917B
160+  917B
161+  917B
162+  917B
163+  917B
164+  917B
165+  917B
166+  917B
167+  917B
168+  917B
169+  917B
# file closed: Patrones_de_mov.asm
741   917B              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  917B              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  917B              ;
  3+  917B              ;	3/1/23
  4+  917B              ;
  5+  917B              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  917B
  7+  917B              ;	ADC HL,SP	LD (addr),SP
  8+  917B              ;	ADD HL,SP	LD SP,(addr)
  9+  917B              ;	ADD IX,SP	LD SP,nn
 10+  917B              ; 	ADD IY,SP	LD SP,HL
 11+  917B              ;				LD SP,IX
 12+  917B              ;	DEC SP		LD SP,IY
 13+  917B
 14+  917B              ;	EX (SP),HL
 15+  917B              ;	EX (SP),IX
 16+  917B              ;	EX (SP),IY
 17+  917B
 18+  917B              ;	INC SP
 19+  917B
 20+  917B
 21+  917B                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 30 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 34 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 34 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 30 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
742   7FC0
743   7FC0              	SAVESNA "Pruebas.sna", START
744   7FC0
745   7FC0
746   7FC0
# file closed: Banco_de_pruebas.asm
