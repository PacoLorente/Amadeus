# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 7D 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 10 83        Indice_Amadeus defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 30 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 60 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C 90 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
150+  8314 26 64 24 24
151+  8318 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
151+  831C 6F F6 67 E6
152+  8320 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
152+  8324 F7 EF FF FF
153+  8328 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
153+  832C 8B D1 71 8E
154+  8330
155+  8330 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
155+  8334 F1 00 09 99
156+  8338 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
156+  833C 0B 0D 00 1B
157+  8340 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
157+  8344 80 19 F9 80
158+  8348 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
158+  834C F3 C0 3D FB
159+  8350 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
159+  8354 3E F7 C0 3E
160+  8358 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
160+  835C 40 1C 63 80
161+  8360
162+  8360 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
162+  8364 3C 40 02 66
163+  8368 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
163+  836C 02 C3 40 06
164+  8370 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
164+  8374 60 06 7E 60
165+  8378 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
165+  837C 3C F0 0F 7E
166+  8380 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
166+  8384 0F BD F0 0F
167+  8388 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
167+  838C 10 07 18 E0
168+  8390
169+  8390 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
169+  8394 8F 10 00 99
170+  8398 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
170+  839C 00 B0 D0 01
171+  83A0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
171+  83A4 D8 01 9F 98
172+  83A8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
172+  83AC CF 3C 03 DF
173+  83B0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
173+  83B4 03 EF 7C 03
174+  83B8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
174+  83BC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83C0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83C0
  2+  83C0              ; Base de datos de entidades e Índice.
  3+  83C0              ;
  4+  83C0              ; 31/01/23
  5+  83C0
  6+  83C0              Indice_de_entidades									; 56 Bytes por entidad.
  7+  83C0
  8+  83C0 04 84        	defw Entidad_1
  9+  83C2 3C 84        	defw Entidad_2
 10+  83C4 74 84        	defw Entidad_3
 11+  83C6 AC 84        	defw Entidad_4
 12+  83C8              ;	...
 13+  83C8              ;	...
 14+  83C8              ;	+ entidades ...
 15+  83C8
 16+  83C8 00 00        	defw 0
 17+  83CA 00 00        	defw 0
 18+  83CC
 19+  83CC              ; ---------- ---------- ---------- ---------- ----------
 20+  83CC
 21+  83CC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83CE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83D0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83D2 00 00 00     	db 0,0,0										; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 25+  83D5
 26+  83D5 05           	db %00000101									; (Attr).
 27+  83D6
 28+  83D6 00 83        	defw Indice_Amadeus								; (Indice_Sprite_der).
 29+  83D8 00 83        	defw Indice_Amadeus								; (Indice_Sprite_izq).
 30+  83DA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83DC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83DE
 33+  83DE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83E0 04           	db 4 											; (Cuad_objeto).
 35+  83E1
 36+  83E1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83E5
 38+  83E5 00 00        	db 0,0											; Variables_de_borrado
 39+  83E7 00 00        	defw 0											;	" " " " " " "
 40+  83E9 00 00        	defw 0											;	" " " " " " "
 41+  83EB 00 00 00     	db 0,0,0										;	" " " " " " "
 42+  83EE
 43+  83EE 00 00        	db 0,0											; Variables_de_pintado
 44+  83F0 00 00        	defw 0											;	" " " " " " "
 45+  83F2 00 00        	defw 0											;	" " " " " " "
 46+  83F4 00 00 00     	db 0,0,0										;	" " " " " " "
 47+  83F7
 48+  83F7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  83F9
 50+  83F9 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  83FD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8400
 53+  8400 00           	db 0 											; (Columnas).
 54+  8401 00 00        	defw 0											; (Limite_horizontal).
 55+  8403 00           	db 0											; (Limite_vertical).
 56+  8404
 57+  8404              ; ---------- ---------- ---------- ---------- ----------
 58+  8404
 59+  8404 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8406 00 00        	defw 0											; (Posicion_actual).
 61+  8408 00 00        	defw 0 											; (Puntero_objeto).
 62+  840A 00 00 00     	db 0,0,0 									    ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
 63+  840D
 64+  840D 00           	db %00000000 									; (Attr).
 65+  840E
 66+  840E 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8410 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8412 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8414 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8416
 71+  8416 00 00        	defw 0											; (Posicion_inicio).
 72+  8418 00           	db 0											; (Cuad_objeto).
 73+  8419
 74+  8419 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  841D
 76+  841D 00 00        	db 0,0										    ; Variables_de_borrado
 77+  841F 00 00        	defw 0											;	" " " " " " "
 78+  8421 00 00        	defw 0											;	" " " " " " "
 79+  8423 00 00 00     	db 0,0,0										;	" " " " " " "
 80+  8426
 81+  8426 00 00        	db 0,0											; Variables_de_pintado
 82+  8428 00 00        	defw 0											;	" " " " " " "
 83+  842A 00 00        	defw 0											;	" " " " " " "
 84+  842C 00 00 00     	db 0,0,0										;	" " " " " " "
 85+  842F
 86+  842F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8431
 88+  8431 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8435 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  8438
 91+  8438 00           	db 0 											; (Columnas).
 92+  8439 00 00        	defw 0											; (Limite_horizontal).
 93+  843B 00           	db 0											; (Limite_vertical).
 94+  843C
 95+  843C              ; ---------- ---------- ---------- ---------- ----------
 96+  843C
 97+  843C 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  843E 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8440 00 00        	defw 0											; (Puntero_objeto).
100+  8442 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
101+  8445
102+  8445 02           	db %00000010									; (Attr).
103+  8446
104+  8446 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  8448 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  844A 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  844C 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  844E
109+  844E 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8450 02           	db 2											; (Cuad_objeto).
111+  8451
112+  8451 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8455
114+  8455 00 00        	db 0,0											; Variables_de_borrado
115+  8457 00 00        	defw 0										 	;	" " " " " " "
116+  8459 00 00        	defw 0											;	" " " " " " "
117+  845B 00 00 00     	db 0,0,0										;	" " " " " " "
118+  845E
119+  845E 00 00        	db 0,0											; Variables_de_pintado
120+  8460 00 00        	defw 0											;	" " " " " " "
121+  8462 00 00        	defw 0											;	" " " " " " "
122+  8464 00 00 00     	db 0,0,0										;	" " " " " " "
123+  8467
124+  8467 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  8469
126+  8469 90 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  846D 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8470
129+  8470 00           	db 0 											; (Columnas).
130+  8471 00 00        	defw 0											; (Limite_horizontal).
131+  8473 00           	db 0											; (Limite_vertical).
132+  8474
133+  8474              ; ---------- ---------- ---------- ---------- ----------
134+  8474
135+  8474 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  8476 00 00        	defw 0                                          ; (Posicion_actual).
137+  8478 00 00        	defw 0											; (Puntero_objeto).
138+  847A 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
139+  847D
140+  847D 04           	db %00000100									; (Attr).
141+  847E
142+  847E 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8480 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8482
145+  8482 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  8484 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  8486
148+  8486 A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  8488 01           	db 1											; (Cuad_objeto).
150+  8489
151+  8489 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  848D
153+  848D 00 00        	db 0,0											; Variables_de_borrado
154+  848F 00 00        	defw 0										 	;	" " " " " " "
155+  8491 00 00        	defw 0											;	" " " " " " "
156+  8493 00 00 00     	db 0,0,0										;	" " " " " " "
157+  8496
158+  8496 00 00        	db 0,0											; Variables_de_pintado
159+  8498 00 00        	defw 0											;	" " " " " " "
160+  849A 00 00        	defw 0											;	" " " " " " "
161+  849C 00 00 00     	db 0,0,0										;	" " " " " " "
162+  849F
163+  849F 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84A1
165+  84A1 92 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84A5 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84A8
168+  84A8 00           	db 0 											; (Columnas).
169+  84A9 00 00        	defw 0											; (Limite_horizontal).
170+  84AB 00           	db 0											; (Limite_vertical).
171+  84AC
172+  84AC              ; ---------- ---------- ---------- ---------- ----------
173+  84AC
174+  84AC 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84AE 00 00        	defw 0                                          ; (Posicion_actual).
176+  84B0 00 00        	defw 0 											; (Puntero_objeto).
177+  84B2 00 00 00     	db 0,0,0                                        ; (CTRL_DESPLZ) / (Coordenada_X) / (Coordenada_Y).
178+  84B5
179+  84B5 01           	db %00000001									; (Attr).
180+  84B6
181+  84B6 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84B8 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84BA
184+  84BA 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84BC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84BE
187+  84BE BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84C0 00           	db 0											; (Cuad_objeto).
189+  84C1
190+  84C1 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84C5
192+  84C5 00 00        	db 0,0											; Variables_de_borrado
193+  84C7 00 00        	defw 0										 	;	" " " " " " "
194+  84C9 00 00        	defw 0											;	" " " " " " "
195+  84CB 00 00 00     	db 0,0,0										;	" " " " " " "
196+  84CE
197+  84CE 00 00        	db 0,0											; Variables_de_pintado
198+  84D0 00 00        	defw 0											;	" " " " " " "
199+  84D2 00 00        	defw 0											;	" " " " " " "
200+  84D4 00 00 00     	db 0,0,0										;	" " " " " " "
201+  84D7
202+  84D7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84D9
204+  84D9 82 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84DD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84E0
207+  84E0 00           	db 0 											; (Columnas).
208+  84E1 00 00        	defw 0											; (Limite_horizontal).
209+  84E3 00           	db 0											; (Limite_vertical).
210+  84E4
# file closed: Entidades.asm
 21   84E4
 22   84E4              ; ******************************************************************************************************************************************************************************************
 23   84E4              ; Constantes.
 24   84E4              ; ******************************************************************************************************************************************************************************************
 25   84E4              ;
 26   84E4              ; 8/11/22
 27   84E4              ;
 28   84E4              ; Constantes generales.
 29   84E4              ;
 30   84E4
 31   84E4              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84E4              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84E4              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84E4              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84E4              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84E4
 37   84E4              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84E4              ;                               				        ; De momento situamos este almacén en $7000.
 39   84E4
 40   84E4
 41   84E4              ; ******************************************************************************************************************************************************************************************
 42   84E4              ; Variables.
 43   84E4              ; ******************************************************************************************************************************************************************************************
 44   84E4              ;
 45   84E4              ; 10/11/22
 46   84E4              ;
 47   84E4              ; Variables de DRAW. (Motor principal).
 48   84E4              ;
 49   84E4              ; (Variables_de_borrado) *** (Variables_de_pintado).
 50   84E4
 51   84E4 02           Filas db 2												; Filas. [DRAW]
 52   84E5 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   84E6 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   84E8 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   84EA 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos. Si el valor es negativo,_
 56   84EB              ; 														; _ estamos desplazados hacia la izquierda y si es positivo, hacia la derecha.
 57   84EB              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 58   84EB              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 59   84EB 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 60   84EC 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 61   84ED
 62   84ED              ; ---------- ---------- ----------
 63   84ED
 64   84ED
 65   84ED 04           Attr db %00000100										; Atributos de la entidad:
 66   84EE
 67   84EE              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 68   84EE              ;
 69   84EE              ;	COLORES: 0 ..... NEGRO
 70   84EE              ;    		 1 ..... AZUL
 71   84EE              ; 			 2 ..... ROJO
 72   84EE              ;			 3 ..... MAGENTA
 73   84EE              ; 			 4 ..... VERDE
 74   84EE              ; 			 5 ..... CIAN
 75   84EE              ;			 6 ..... AMARILLO
 76   84EE              ; 			 7 ..... BLANCO
 77   84EE
 78   84EE 80 81        Indice_Sprite_der defw Indice_Badsat_der
 79   84F0 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 80   84F2 00 00        Puntero_DESPLZ_der defw 0
 81   84F4 00 00        Puntero_DESPLZ_izq defw 0
 82   84F6
 83   84F6 21 47        Posicion_inicio defw $4721								; Dirección de pantalla donde aparece el objeto. [DRAW].
 84   84F8 01           Cuad_objeto db 1			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 85   84F9
 86   84F9              ; Variables de objeto. (Características).
 87   84F9
 88   84F9 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 89   84FA 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 90   84FB 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 91   84FC 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 92   84FD
 93   84FD 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 94   84FF 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 95   8501 00 00        	defw 0
 96   8503 00 00 00     	db 0,0,0
 97   8506
 98   8506 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 99   8508 00 00        	defw 0
100   850A 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
101   850C 00 00 00     	db 0,0,0
102   850F
103   850F              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
104   850F
105   850F 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
106   8510              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
107   8510              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
108   8510              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
109   8510              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
110   8510              ;
111   8510              ; 														DESCRIPCIÖN:
112   8510              ;
113   8510              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
114   8510              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
115   8510              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
116   8510              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
117   8510              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
118   8510              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
119   8510              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
120   8510              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
121   8510              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
122   8510              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
123   8510              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
124   8510              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
125   8510              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
126   8510              ;
127   8510              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
128   8510              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
129   8510              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
130   8510
131   8510 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
132   8511
133   8511              ; Movimiento.
134   8511
135   8511 8C 90        Puntero_indice_mov defw Indice_mov_Escaloncitos_derecha_abajo
136   8513 00 00        Puntero_mov defw 0
137   8515 00           Contador_db_mov db 0
138   8516 00           Incrementa_puntero db 0
139   8517 00           Repetimos_db db 0
140   8518
141   8518
142   8518              ; Variables de funcionamiento. [DRAW].
143   8518
144   8518 00           Columnas db 0
145   8519 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
146   851B              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
147   851B 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
148   851C
149   851C              ; 52 Bytes por entidad.
150   851C              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
151   851C              ;					         		---------;      ;---------
152   851C
153   851C
154   851C              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
155   851C              ; Gestión de ENTIDADES.
156   851C
157   851C 00 00        Puntero_store_entidades defw 0
158   851E 00 00        Puntero_restore_entidades defw 0
159   8520 00 00        Indice_restore defw 0
160   8522 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
161   8523 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
162   8524              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
163   8524              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
164   8524              ;														; _ (Numero_de_malotes)="0".
165   8524 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
166   8526              ;														; _variable para almacenar lo posición del puntero_
167   8526              ; 														; _de pila, SP.
168   8526 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
169   8528              ;														; La utiliza la rutina [Extrae_foto_registros].
170   8528 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
171   852A              ;														; _el snapshot de los registros de la siguiente entidad.
172   852A              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
173   852A
174   852A              ; Gestión de FRAMES.
175   852A
176   852A 00           Switch db 0
177   852B
178   852B              ; Variables de Raster y localización en pantalla.
179   852B
180   852B 00 FF        Temp_Raster defw $ff00
181   852D
182   852D              ; Rutina principal *************************************************************************************************************************************************************************
183   852D              ;
184   852D              ;	14/11/22
185   852D
186   852D 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
187   8530
188   8530 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
189   8532 ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
190   8534 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
191   8536 F3           	DI
192   8537
193   8537 3E 01        	ld a,1
194   8539 D3 FE        	out ($fe),a
195   853B
196   853B 3E 07        	ld a,%00000111
197   853D CD 1E 8D     	call Cls
198   8540
199   8540              ;	call Pinta_FILAS
200   8540
201   8540 CD 4B 87     	call Pulsa_ENTER
202   8543
203   8543 21 22 85     	ld hl,Numero_de_entidades
204   8546 46           	ld b,(hl)
205   8547 04           	inc b
206   8548 05           	dec b
207   8549 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
208   854B
209   854B              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
210   854B              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
211   854B              ;	Pintamos el resto de entidades:
212   854B
213   854B CD 63 86     	call Inicia_punteros_de_entidades
214   854E
215   854E              ;	INICIA ENTIDADES!!!!!
216   854E
217   854E C5           1 push bc  												; Guardo el contador de entidades.
218   854F CD 96 86      	call Inicia_Puntero_objeto
219   8552 CD A2 87     	call Draw
220   8555 CD A0 7F     	call Guarda_foto_registros
221   8558 CD E6 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
222   855B C1           	pop bc
223   855C 10 F0        	djnz 1B  											; Decremento el contador de entidades.
224   855E
225   855E              ; 	INICIA AMADEUS!!!!!
226   855E
227   855E CD 27 87     3 call Restore_Amadeus
228   8561 CD 96 86     	call Inicia_Puntero_objeto
229   8564 CD A2 87     	call Draw
230   8567 CD A0 7F     	call Guarda_foto_registros
231   856A CD 39 87     	call Store_Amadeus
232   856D
233   856D              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
234   856D
235   856D CD 63 86     	call Inicia_punteros_de_entidades
236   8570 CD 15 87     	call Restore_Primera_entidad
237   8573 3A 22 85     	ld a,(Numero_de_entidades)
238   8576 3C           	inc a
239   8577 32 23 85     	ld (Numero_de_malotes),a
240   857A
241   857A FB           2 ei
242   857B 18 FD        	jr 2B
243   857D
244   857D              ; -----------------------------------------------------------------------------------
245   857D
246   857D              Frame
247   857D
248   857D              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
249   857D              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
250   857D
251   857D 3E 07            ld a,7
252   857F D3 FE            out ($fe),a
253   8581 CD A6 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
254   8584 3E 01            ld a,1
255   8586 D3 FE            out ($fe),a
256   8588
257   8588              ; ----------------------------------------------------------------------
258   8588
259   8588 21 00 70     	ld hl,Album_de_fotos
260   858B 22 28 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
261   858E              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
262   858E 3A 22 85         ld a,(Numero_de_entidades)
263   8591 47               ld b,a
264   8592 A7           	and a
265   8593 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
266   8595
267   8595 C5           2 push bc
268   8596 CD DC 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
269   8599 3A 0F 85     	ld a,(Ctrl_0)
270   859C CB 67        	bit 4,a
271   859E 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
272   85A0 CD 2A 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   85A3 21 0F 85     1 ld hl,Ctrl_0
274   85A6 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
275   85A8 AF           	xor a
276   85A9 32 10 85     	ld (Obj_dibujado),a
277   85AC CD E6 86     	call Store_Restore_entidades
278   85AF C1           	pop bc
279   85B0 10 E3        	djnz 2B
280   85B2
281   85B2 CD 27 87     4 call Restore_Amadeus
282   85B5 CD FB 85     	call Mov_Amadeus
283   85B8 3A 0F 85     	ld a,(Ctrl_0)
284   85BB CB 67        	bit 4,a
285   85BD 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
286   85BF CD 2A 86     	call Guarda_foto_entidad_a_pintar
287   85C2
288   85C2 21 0F 85     3 ld hl,Ctrl_0
289   85C5 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
290   85C7 AF           	xor a
291   85C8 32 10 85     	ld (Obj_dibujado),a
292   85CB CD 39 87     	call Store_Amadeus
293   85CE
294   85CE              ; -----
295   85CE
296   85CE CD 63 86     	call Inicia_punteros_de_entidades
297   85D1 CD 15 87     	call Restore_Primera_entidad
298   85D4 CD 79 86     	call Calcula_numero_de_malotes
299   85D7
300   85D7 3E 00        	ld a,0
301   85D9 D3 FE        	out ($fe),a
302   85DB C9           	ret
303   85DC
304   85DC              ; --------------------------------------------------------------------------------------------------------------
305   85DC              ;
306   85DC              ;	29/1/23
307   85DC
308   85DC              Mov_obj
309   85DC
310   85DC              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
311   85DC
312   85DC AF           	xor a
313   85DD 32 10 85     	ld (Obj_dibujado),a
314   85E0 CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
315   85E3              ;														; Obj_dibujado="0".
316   85E3              ; Movemos Entidades malignas.
317   85E3
318   85E3 CD 94 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
319   85E6 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
320   85E9 CB 67        	bit 4,a
321   85EB C8           	ret z
322   85EC
323   85EC              ; ---------
324   85EC
325   85EC 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
326   85EE 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
327   85F1 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
328   85F4 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
329   85F7 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
330   85FA C9           	ret													; _de la misma.
331   85FB
332   85FB              ; --------------------------------------------------------------------------------------------------------------
333   85FB              ;
334   85FB              ;	29/1/23
335   85FB
336   85FB              Mov_Amadeus
337   85FB
338   85FB AF           	xor a
339   85FC 32 10 85     	ld (Obj_dibujado),a
340   85FF CD 34 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
341   8602              ;														; Obj_dibujado="0".
342   8602              ; Movemos Amadeus.
343   8602
344   8602 CD 5F 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
345   8605 3A 0F 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
346   8608 CB 67        	bit 4,a
347   860A C8           	ret z
348   860B
349   860B              ; ---------
350   860B
351   860B 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
352   860D 32 10 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
353   8610 CD 34 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
354   8613 CD 4B 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
355   8616 CD 1A 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
356   8619 C9           	ret													; _de la nave.
357   861A
358   861A              ; --------------------------------------------------------------------------------------------------------------
359   861A              ;
360   861A              ;	31/01/23
361   861A              ;
362   861A              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
363   861A
364   861A              Guarda_foto_entidad_a_borrar
365   861A
366   861A CD 7C 8A     	call Prepara_draw
367   861D CD B6 89     	call calcula_CColumnass
368   8620 CD ED 89     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
369   8623 CD 42 8A     	call Define_rutina_de_impresion
370   8626 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
371   8629 C9           	ret
372   862A
373   862A              ; --------------------------------------------------------------------------------------------------------------
374   862A              ;
375   862A              ;	31/01/23
376   862A              ;
377   862A              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
378   862A              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
379   862A
380   862A              Guarda_foto_entidad_a_pintar
381   862A
382   862A CD 57 86     	call Repone_pintar
383   862D CD A2 87     	call Draw
384   8630 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
385   8633 C9           	ret
386   8634
387   8634              ; --------------------------------------------------------------------------------------------------------------
388   8634              ;
389   8634              ;
390   8634
391   8634 21 E4 84     Prepara_var_pintado_borrado	ld hl,Filas
392   8637 3A 10 85     	ld a,(Obj_dibujado)
393   863A A7           	and a
394   863B 28 05        	jr z,1F
395   863D 11 06 85     	ld de,Variables_de_pintado
396   8640 18 03        	jr 2F
397   8642 11 FD 84     1 ld de,Variables_de_borrado
398   8645 01 09 00     2 ld bc,9
399   8648 ED B0        	ldir
400   864A C9           	ret
401   864B
402   864B              ; --------------------------------------------------------------------------------------------------------------
403   864B
404   864B 21 FD 84     Repone_borrar ld hl,Variables_de_borrado
405   864E 11 E4 84     	ld de,Filas
406   8651 01 09 00     	ld bc,9
407   8654 ED B0        	ldir
408   8656 C9           	ret
409   8657
410   8657 21 06 85     Repone_pintar ld hl,Variables_de_pintado
411   865A 11 E4 84     	ld de,Filas
412   865D 01 09 00     	ld bc,9
413   8660 ED B0        	ldir
414   8662 C9           	ret
415   8663
416   8663              ; *************************************************************************************************************************************************************
417   8663              ;
418   8663              ; 8/1/23
419   8663              ;
420   8663              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
421   8663              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
422   8663              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
423   8663
424   8663              ; Destruye HL y DE !!!!!
425   8663
426   8663              Inicia_punteros_de_entidades
427   8663
428   8663 21 C0 83     	ld hl,Indice_de_entidades
429   8666 CD 90 86         call Extrae_address
430   8669 22 1C 85         ld (Puntero_store_entidades),hl
431   866C 21 C2 83     	ld hl,Indice_de_entidades+2
432   866F 22 20 85     	ld (Indice_restore),hl
433   8672 CD 90 86     	call Extrae_address
434   8675 22 1E 85     	ld (Puntero_restore_entidades),hl
435   8678 C9               ret
436   8679
437   8679              ; -------------------------------------------------------------------------------------------------------------
438   8679              ;
439   8679              ; 30/1/23
440   8679              ;
441   8679
442   8679 2A 28 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
443   867C 7D           	ld a,l
444   867D A7           	and a
445   867E 28 0C        	jr z,3F
446   8680 AF           	xor a
447   8681 67           	ld h,a
448   8682 7D           	ld a,l
449   8683 D6 06        1 sub 6
450   8685 28 03        	jr z,2F
451   8687 24           	inc h
452   8688 18 F9        	jr 1B
453   868A 24           2 inc h
454   868B 7C           	ld a,h
455   868C 32 23 85     3 ld (Numero_de_malotes),a
456   868F C9           	ret
457   8690
458   8690              ; *************************************************************************************************************************************************************
459   8690              ;
460   8690              ; 20/10/22
461   8690              ;
462   8690              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
463   8690              ;
464   8690              ; Destruye el puntero y DE !!!!!
465   8690
466   8690 5E           Extrae_address ld e,(hl)
467   8691 23           	inc hl
468   8692 56           	ld d,(hl)
469   8693 2B           	dec hl
470   8694 EB           	ex de,hl
471   8695 C9           	ret
472   8696
473   8696              ; *************************************************************************************************************************************************************
474   8696              ;
475   8696              ;	3/2/23
476   8696              ;
477   8696              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
478   8696              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
479   8696              ;
480   8696              ;   Destruye HL y BC !!!!!,
481   8696              ;
482   8696              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
483   8696              ;					"0" ..... Izquierda.
484   8696
485   8696              Inicia_Puntero_objeto
486   8696
487   8696 3A F8 84     	ld a,(Cuad_objeto)
488   8699 E6 01        	and 1
489   869B F5           	push af
490   869C CC BD 86     	call z,Inicia_puntero_objeto_izq
491   869F F1           	pop af
492   86A0 C8           	ret z
493   86A1 CD A5 86     	call Inicia_puntero_objeto_der
494   86A4 C9           	ret
495   86A5
496   86A5              ; Arrancamos desde la parte izquierda de la pantalla.
497   86A5              ; Iniciamos (Indice_Sprite_der).
498   86A5
499   86A5 2A EE 84     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
500   86A8 22 F2 84     	ld (Puntero_DESPLZ_der),hl
501   86AB CD 90 86     	call Extrae_address
502   86AE 22 E8 84     	ld (Puntero_objeto),hl
503   86B1 2A F0 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
504   86B4 CD 90 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
505   86B7 2B           	dec hl 												; _del índice.
506   86B8 2B           	dec hl
507   86B9 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
508   86BC C9           	ret
509   86BD
510   86BD              ; Arrancamos desde la parte derecha de la pantalla.
511   86BD              ; Iniciamos (Indice_Sprite_izq).
512   86BD
513   86BD 2A F0 84     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
514   86C0 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
515   86C3 CD 90 86     	call Extrae_address
516   86C6 22 E8 84     	ld (Puntero_objeto),hl
517   86C9 2A EE 84     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
518   86CC CD 90 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
519   86CF 2B           	dec hl 												; _del índice.
520   86D0 2B           	dec hl
521   86D1 22 F2 84     	ld (Puntero_DESPLZ_der),hl
522   86D4 C9           	ret
523   86D5
524   86D5              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
525   86D5
526   86D5 21 10 83     	ld hl,Amadeus
527   86D8 ED 4B E8 84  	ld bc,(Puntero_objeto)
528   86DC B7 ED 42     	sub hl,bc
529   86DF C0           	ret nz
530   86E0 21 0F 85     	ld hl,Ctrl_0
531   86E3 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
532   86E5 C9           	ret 												; _de nuestra nave en los extremos.
533   86E6
534   86E6              ; *************************************************************************************************************************************************************
535   86E6              ;
536   86E6              ;	8/1/23
537   86E6              ;
538   86E6              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
539   86E6              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
540   86E6
541   86E6              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
542   86E6              ;	_de la 2ª y 3ª entidad respectivamente.
543   86E6
544   86E6
545   86E6
546   86E6              Store_Restore_entidades
547   86E6
548   86E6 E5           	push hl
549   86E7 D5           	push de
550   86E8 C5            	push bc
551   86E9
552   86E9              ;	STORE !!!!!
553   86E9              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
554   86E9
555   86E9 21 E4 84     	ld hl,Filas
556   86EC ED 5B 1C 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
557   86F0 01 38 00     	ld bc,56
558   86F3 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
559   86F5
560   86F5              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
561   86F5
562   86F5 2A 1E 85     	ld hl,(Puntero_restore_entidades)
563   86F8 22 1C 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
564   86FB 11 E4 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
565   86FE 01 38 00     	ld bc,56
566   8701 ED B0        	ldir
567   8703
568   8703              ;	Incrementa RESTORE !!!!!
569   8703
570   8703 2A 20 85         ld hl,(Indice_restore)
571   8706 23           	inc hl
572   8707 23           	inc hl
573   8708 22 20 85     	ld (Indice_restore),hl
574   870B CD 90 86         call Extrae_address
575   870E 22 1E 85         ld (Puntero_restore_entidades),hl
576   8711 C1           	pop bc
577   8712 D1           	pop de
578   8713 E1           	pop hl
579   8714 C9           	ret
580   8715
581   8715              ; **************************************************************************************************
582   8715              ;
583   8715              ;	29/10/22
584   8715              ;
585   8715              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
586   8715
587   8715 E5           Restore_Primera_entidad push hl
588   8716 D5           	push de
589   8717 C5            	push bc
590   8718 2A 1C 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
591   871B 11 E4 84     	ld de,Filas
592   871E 01 38 00     	ld bc,56
593   8721 ED B0        	ldir
594   8723 C1           	pop bc
595   8724 D1           	pop de
596   8725 E1           	pop hl
597   8726 C9           	ret
598   8727
599   8727              ; **************************************************************************************************
600   8727              ;
601   8727              ;	25/01/23
602   8727              ;
603   8727              ;	Restore_Amadeus
604   8727              ;
605   8727              ;	Cargamos en DRAW los parámetros de Amadeus.
606   8727              ;
607   8727
608   8727 E5           Restore_Amadeus	push hl
609   8728 D5           	push de
610   8729 C5            	push bc
611   872A 21 CC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
612   872D 11 E4 84     	ld de,Filas
613   8730 01 38 00     	ld bc,56
614   8733 ED B0        	ldir
615   8735 C1           	pop bc
616   8736 D1           	pop de
617   8737 E1           	pop hl
618   8738 C9           	ret
619   8739
620   8739              ; *************************************************************************************************************************************************************
621   8739              ;
622   8739              ;	29/01/23
623   8739              ;
624   8739              ;	Store_Amadeus
625   8739              ;
626   8739              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
627   8739              ;
628   8739
629   8739 E5           Store_Amadeus push hl
630   873A D5           	push de
631   873B C5            	push bc
632   873C 21 E4 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
633   873F 11 CC 83     	ld de,Amadeus_db
634   8742 01 38 00     	ld bc,56
635   8745 ED B0        	ldir
636   8747 C1           	pop bc
637   8748 D1           	pop de
638   8749 E1           	pop hl
639   874A C9           	ret
640   874B
641   874B              ; **************************************************************************************************
642   874B
643   874B              ; Teclado.
644   874B
645   874B 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
646   874D DB FE        	in a,($fe)
647   874F E6 01        	and $01
648   8751 28 02        	jr z,1f
649   8753 18 F6        	jr Pulsa_ENTER
650   8755 C9           1 ret
651   8756
652   8756              ; **************************************************************************************************
653   8756              ;
654   8756              ; Temporización.
655   8756
656   8756              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
657   8756              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
658   8756              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
659   8756              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
660   8756
661   8756              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
662   8756              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
663   8756              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
664   8756
665   8756              ; A partir de $4f61 no hace falta DELAY.
666   8756
667   8756              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
668   8756
669   8756 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
670   8759 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
671   875A 78           	LD A,B
672   875B A7           	AND A
673   875C 20 FB        	JR NZ,wait
674   875E C9           	RET
675   875F
676   875F              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
677   875F              ;
678   875F              ;	21/4/22
679   875F
680   875F              Movimiento_Amadeus
681   875F
682   875F 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
683   8761 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
684   8763 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
685   8765 CC 89 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
686   8768 3E F7        	ld a,$f7
687   876A DB FE        	in a,($fe)
688   876C E6 01        	and $01
689   876E C8           	ret z
690   876F 3E F7        	ld a,$f7
691   8771 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
692   8773 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
693   8775 CC 8E 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
694   8778 C9               ret
695   8779
696   8779              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
697   8779
698   8779              ; Pinta indicadores de FILAS. ------------------------------------------------------
699   8779
700   8779 21 10 40     Pinta_FILAS ld hl,$4010
701   877C              ;	ld b,9
702   877C              ;2 push hl
703   877C              ;	push bc
704   877C 06 BF        	ld b,$bf
705   877E 36 80        1 ld (hl),%10000000
706   8780 CD 88 8A     	call NextScan
707   8783 10 F9        	djnz 1B
708   8785              ;	pop bc
709   8785              ;	pop hl
710   8785              ;	inc l
711   8785              ;	djnz 2B
712   8785 06 03        	ld b,3
713   8787 21 00 47         ld hl,$4700
714   878A CD 90 87     3 call Bucle_1
715   878D 10 FB            djnz 3B
716   878F C9               ret
717   8790
718   8790 C5           Bucle_1 push bc
719   8791 E5                   push hl
720   8792 D1                   pop de
721   8793 13                   inc de
722   8794 01 FF 00             ld bc,255
723   8797 36 FF                ld (hl),255
724   8799 ED B0                ldir
725   879B 23                   inc hl
726   879C 3E 07                ld a,7
727   879E 84                   add a,h
728   879F 67                   ld h,a
729   87A0 C1                   pop bc
730   87A1 C9                   ret
731   87A2
732   87A2              ; ---------------------------------------------------------------
733   87A2
734   87A2              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  87A2              ; ******************************************************************************************************************************************************************************************
  2+  87A2              ;
  3+  87A2              ; 01/23
  4+  87A2              ;
  5+  87A2              ; DRAW. ************************************************************************************************************************************************************************************
  6+  87A2
  7+  87A2 CD 7C 8A     Draw call Prepara_draw
  8+  87A5 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  87A6 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  87A7 28 05        	jr z,2F
 11+  87A9 3A F8 84     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 12+  87AC 18 0C        	jr 1F
 13+  87AE 2A F6 84     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 14+  87B1 22 E6 84     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 15+  87B4 CD 43 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 16+  87B7              ;													; _la esquina superior izquierda de la pantalla.
 17+  87B7 CD 16 91     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 18+  87BA 3A 0F 85     1 ld a,(Ctrl_0)
 19+  87BD CB 6F        	bit 5,a
 20+  87BF 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 21+  87C1
 22+  87C1 CD D9 87     	call Comprueba_limite_horizontal
 23+  87C4 CD 69 88     	call Comprueba_limite_vertical
 24+  87C7
 25+  87C7              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 26+  87C7
 27+  87C7 CD B6 89     3 call calcula_CColumnass
 28+  87CA CD ED 89     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 29+  87CD CD 42 8A     	call Define_rutina_de_impresion
 30+  87D0
 31+  87D0 3A 0F 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 32+  87D3 CB AF        	res 5,a											; _a ser de utilidad.
 33+  87D5 32 0F 85     	ld (Ctrl_0),a
 34+  87D8
 35+  87D8 C9           	ret
 36+  87D9
 37+  87D9              ; *******************************************************************************************************************************************************************************************
 38+  87D9              ;	21/01/23
 39+  87D9              ;
 40+  87D9              ; 	Comprueba_limite_horizontal.
 41+  87D9              ;
 42+  87D9              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 43+  87D9              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 44+  87D9              ;
 45+  87D9              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 46+  87D9              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 47+  87D9              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 48+  87D9              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 49+  87D9
 50+  87D9
 51+  87D9
 52+  87D9 3A 0F 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 53+  87DC CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 54+  87DE 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 55+  87E0 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 56+  87E2 32 0F 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 57+  87E5 18 09            jr 6F
 58+  87E7 CB 5F        1 bit 3,a
 59+  87E9 28 0A            jr z,2F
 60+  87EB E6 F7            and $f7
 61+  87ED 32 0F 85         ld (Ctrl_0),a
 62+  87F0 CD 43 89     6 call Inicializacion
 63+  87F3 18 5B            jr 5F
 64+  87F5 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 65+  87F6
 66+  87F6              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 67+  87F6              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 68+  87F6
 69+  87F6 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 70+  87F7 2A 19 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 71+  87FA CD E6 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 72+  87FD 67           	ld h,a
 73+  87FE EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 74+  87FF CD E6 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 75+  8802 67           	ld h,a
 76+  8803 A7           	and a
 77+  8804 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 78+  8806 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 79+  8807 3A F8 84     	ld a,(Cuad_objeto)
 80+  880A FE 02        	cp 2
 81+  880C 38 1E        	jr c,3F
 82+  880E 28 1C        	jr z,3F
 83+  8810 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 84+  8811 28 23            jr z,7F
 85+  8813 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 86+  8815 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 87+  8817 E1           	pop hl
 88+  8818
 89+  8818              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 90+  8818              ; _para indicar con E="2" en caso necesario.
 91+  8818
 92+  8818 E5               push hl
 93+  8819 C5               push bc
 94+  881A CD E6 8C     	call calcula_tercio
 95+  881D FE 01        	cp 1
 96+  881F 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 97+  8821 CD 51 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 98+  8824 28 26            jr z,9F
 99+  8826 38 24            jr c,9F
100+  8828 1E 00        11 ld e,0
101+  882A 18 22            jr 8F
102+  882C 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
103+  882D 28 07        	jr z, 7F
104+  882F 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
105+  8831 1E 00         	ld e,0
106+  8833 E1           	pop hl
107+  8834 18 04        	jr 4F
108+  8836 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
109+  8838 18 15            jr 10F
110+  883A
111+  883A              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
112+  883A              ; _para indicar con E="2" en caso necesario.
113+  883A
114+  883A E5           4 push hl
115+  883B C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
116+  883C CD E6 8C     	call calcula_tercio
117+  883F FE 01        	cp 1
118+  8841 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
119+  8843 CD 51 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
120+  8846 28 04            jr z,9F
121+  8848 30 02            jr nc,9F
122+  884A 18 02        	jr 8F
123+  884C 1E 02        9 ld e,2
124+  884E C1           8 pop bc
125+  884F E1           10 pop hl
126+  8850 C9           5 ret
127+  8851
128+  8851              ; --------------------
129+  8851              ;
130+  8851              ; 25/08/22
131+  8851
132+  8851 CD E6 8C     Comprueba_centro call calcula_tercio
133+  8854 67               ld h,a
134+  8855 08           	ex af,af
135+  8856 FE 02        	cp 2
136+  8858 38 07        	jr c,1F
137+  885A 28 05        	jr z,1F
138+  885C 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
139+  885F 18 03        	jr 2F
140+  8861 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
141+  8864 08           2 ex af,af
142+  8865 A7               and a
143+  8866 ED 42            sbc hl,bc
144+  8868 C9               ret
145+  8869
146+  8869              ; *********************************************************************************************************************************************************************************************
147+  8869              ;
148+  8869              ;   16/8/22
149+  8869              ;
150+  8869              ;	Comprueba_limite_vertical
151+  8869              ;
152+  8869              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
153+  8869              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
154+  8869              ;
155+  8869
156+  8869 2A E6 84     Comprueba_limite_vertical ld hl,(Posicion_actual)
157+  886C 7D           	ld a,l
158+  886D E6 1F        	and $1F
159+  886F 57           	ld d,a
160+  8870 3A 1B 85     	ld a,(Limite_vertical)
161+  8873 BA           	cp d 											; Límite - Posición.
162+  8874 08           	ex af,af 										; Resultado de CP d en F'.
163+  8875 3A F8 84     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
164+  8878 CB 47        	bit 0,a
165+  887A 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
166+  887C
167+  887C              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
168+  887C
169+  887C 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
170+  887D 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
171+  887F
172+  887F              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
173+  887F              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
174+  887F
175+  887F 3A EB 84         ld a,(Coordenada_X)
176+  8882 16 0F            ld d,Centro_izquierda
177+  8884 A7               and a
178+  8885 92               sub d 											 ; Posición - Centro_izquierda.
179+  8886 28 1E            jr z,3F
180+  8888 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
181+  888A              ;                                                    ; _salimos sin modificar nada.
182+  888A 18 0E            jr 2F
183+  888C 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
184+  888D 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
185+  888F
186+  888F              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
187+  888F              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
188+  888F
189+  888F 3A EB 84         ld a,(Coordenada_X)
190+  8892 16 10            ld d,Centro_derecha
191+  8894 A7               and a
192+  8895 92               sub d
193+  8896 28 0E            jr z,3F
194+  8898 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
195+  889A              ;                                                    ; _salimos sin modificar nada.
196+  889A CB 43        2 bit 0,e
197+  889C 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
198+  889E C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
199+  889F CD 33 89         call Modificaccionne
200+  88A2 C1           	pop bc
201+  88A3 CD 43 89         call Inicializacion
202+  88A6 C9           3 ret 				 								 ; Salimos de la rutina.
203+  88A7
204+  88A7              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
205+  88A7
206+  88A7 C5           4 push bc
207+  88A8 01 E5 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
208+  88AB 0A           	ld a,(bc)
209+  88AC 3D           	dec a
210+  88AD 47           	ld b,a 											 ; Columnas-1 en B.
211+  88AE 7D           	ld a,l
212+  88AF 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
213+  88B0 CB 47        	bit 0,a
214+  88B2 28 03        	jr z,5F
215+  88B4 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
216+  88B5 18 2E        	jr 7F
217+  88B7
218+  88B7              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
219+  88B7
220+  88B7 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
221+  88B8 F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
222+  88B9 3A 0F 85     	ld a,(Ctrl_0)
223+  88BC CB 4F        	bit 1,a
224+  88BE 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
225+  88C0 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
226+  88C1
227+  88C1              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
228+  88C1
229+  88C1 1C               inc e
230+  88C2 1D               dec e
231+  88C3 20 07            jr nz,12F
232+  88C5 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
233+  88C6 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
234+  88C7 22 E6 84     	ld (Posicion_actual),hl
235+  88CA 18 44        13 jr 9F
236+  88CC CB 43        12 bit 0,e
237+  88CE 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
238+  88D0              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
239+  88D0 C1           	pop bc
240+  88D1 18 D3        	jr 3B
241+  88D3 80           14 add b
242+  88D4 6F               ld l,a
243+  88D5 22 E6 84     	ld (Posicion_actual),hl
244+  88D8 CD 33 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
245+  88DB 18 33            jr 9F 											 ; _inicializamos y salimos.
246+  88DD E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
247+  88DF 32 0F 85         ld (Ctrl_0),a
248+  88E2 F1           	pop af
249+  88E3 18 2B        	jr 9F
250+  88E5
251+  88E5              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
252+  88E5
253+  88E5 F5           7 push af
254+  88E6 3A 0F 85     	ld a,(Ctrl_0)
255+  88E9 CB 47        	bit 0,a
256+  88EB 20 1D        	jr nz,8F
257+  88ED F1           	pop af
258+  88EE
259+  88EE              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
260+  88EE
261+  88EE 1C           	inc e
262+  88EF 1D               dec e
263+  88F0 20 07            jr nz,10F
264+  88F2 90           	sub b
265+  88F3 6F               ld l,a
266+  88F4 22 E6 84     	ld (Posicion_actual),hl
267+  88F7 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
268+  88F9              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
269+  88F9 CB 43        10 bit 0,e
270+  88FB 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
271+  88FD              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
272+  88FD C1           	pop bc
273+  88FE 18 A6        	jr 3B
274+  8900 90           16 sub b
275+  8901 6F               ld l,a
276+  8902 22 E6 84     	ld (Posicion_actual),hl
277+  8905 CD 33 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
278+  8908 18 06            jr 9F
279+  890A E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
280+  890C 32 0F 85         ld (Ctrl_0),a
281+  890F F1           	pop af
282+  8910 C1           9 pop bc
283+  8911 1E 00        	ld e,0
284+  8913 CD 43 89         call Inicializacion
285+  8916 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
286+  8917 08           	ex af,af
287+  8918 F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
288+  8919 18 8B            jr 3B
289+  891B
290+  891B              ; --------------------
291+  891B
292+  891B 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
293+  891D CD 97 8A     1 call PreviousScan
294+  8920 10 FB            djnz 1B
295+  8922 22 E6 84     	ld (Posicion_actual),hl
296+  8925 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
297+  8926 C9           	ret
298+  8927
299+  8927              ; --------------------
300+  8927
301+  8927 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
302+  8929 CD 88 8A     1 call NextScan
303+  892C 10 FB            djnz 1B
304+  892E 22 E6 84     	ld (Posicion_actual),hl
305+  8931 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
306+  8932 C9           	ret
307+  8933
308+  8933              ; --------------------
309+  8933              ;
310+  8933              ;	22/01/23
311+  8933              ;
312+  8933              ;	E="1". Hemos cambiado de cuadrante.
313+  8933              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
314+  8933              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
315+  8933
316+  8933
317+  8933              Modificaccionne
318+  8933
319+  8933 3A F8 84     	ld a,(Cuad_objeto)
320+  8936 FE 02        	cp 2
321+  8938 CC 1B 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
322+  893B DC 1B 89         call c,Modifica_Pos_actual
323+  893E C8           	ret z
324+  893F CD 27 89         call Modifica_Pos_actual2
325+  8942 C9               ret
326+  8943
327+  8943              ; *************************************************************************************************************************************************************************************************
328+  8943              ;
329+  8943              ;	13/8/22
330+  8943              ;
331+  8943              ;	Inicializacion
332+  8943              ;
333+  8943              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
334+  8943              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
335+  8943              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
336+  8943              ;
337+  8943              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
338+  8943              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
339+  8943              ;	_ desaparece/aparece.
340+  8943
341+  8943              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
342+  8943              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
343+  8943              ;
344+  8943              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
345+  8943              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
346+  8943              ; 		   [E] ="0"
347+  8943
348+  8943              ; 	OUTPUT: DESTRUYE [AF] y [D].
349+  8943
350+  8943 CD E6 8C     Inicializacion call calcula_tercio
351+  8946 28 36        	jr z,primit
352+  8948 E6 02        	and 2
353+  894A 20 07        	jr nz,segmit
354+  894C 7D           	ld a,l
355+  894D FE 7F        	cp $7f
356+  894F 38 2D        	jr c,primit
357+  8951 28 2B        	jr z,primit
358+  8953 CD B0 89     segmit call column
359+  8956 38 13        	jr c,tercuad
360+  8958 3E 04        cuarcuad ld a,4
361+  895A 32 F8 84     	ld (Cuad_objeto),a
362+  895D 21 20 48     	ld hl,$4820
363+  8960 22 19 85     	ld (Limite_horizontal),hl
364+  8963 21 1B 85     	ld hl,Limite_vertical
365+  8966 36 0D        	ld (hl),$0d
366+  8968 08           	ex af,af
367+  8969 18 3C        	jr 1F
368+  896B              tercuad
369+  896B              ;	call Fija_punteros
370+  896B 3E 03        	ld a,3
371+  896D 32 F8 84     	ld (Cuad_objeto),a
372+  8970 21 20 48     	ld hl,$4820
373+  8973 22 19 85     	ld (Limite_horizontal),hl
374+  8976 21 1B 85     	ld hl,Limite_vertical
375+  8979 36 12        	ld (hl),$12
376+  897B 08           	ex af,af
377+  897C 18 29        	jr 1F
378+  897E CD B0 89     primit call column
379+  8981 38 13        	jr c, primcuad
380+  8983              segcuad
381+  8983              ;	call Fija_punteros
382+  8983 3E 02        	ld a,2
383+  8985 32 F8 84     	ld (Cuad_objeto),a
384+  8988 21 C0 4F     	ld hl,$4fc0
385+  898B 22 19 85     	ld (Limite_horizontal),hl
386+  898E 21 1B 85     	ld hl,Limite_vertical
387+  8991 36 0D        	ld (hl),$0d
388+  8993 08           	ex af,af
389+  8994 18 11        	jr 1F
390+  8996              primcuad
391+  8996              ;	call Fija_punteros
392+  8996 3E 01        	ld a,1
393+  8998 32 F8 84     	ld (Cuad_objeto),a
394+  899B 21 C0 4F     	ld hl,$4fc0
395+  899E 22 19 85     	ld (Limite_horizontal),hl
396+  89A1 21 1B 85     	ld hl,Limite_vertical
397+  89A4 36 12        	ld (hl),$12
398+  89A6 08           	ex af,af
399+  89A7 CD F3 8F     1 call Genera_coordenadas
400+  89AA 21 0F 85     	ld hl,Ctrl_0
401+  89AD CB EE        	set 5,(hl)
402+  89AF C9           	ret
403+  89B0
404+  89B0              ; ------------------------------------------------------------------------------------------------------------------
405+  89B0
406+  89B0              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
407+  89B0              ;
408+  89B0              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
409+  89B0
410+  89B0 7D           column ld a,l
411+  89B1 E6 1F        	and $1f
412+  89B3 FE 10         	cp $10
413+  89B5 C9            	ret
414+  89B6
415+  89B6              ; --------------------------------------------------------------------------------------------------------------------
416+  89B6              ;
417+  89B6              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
418+  89B6              ;
419+  89B6              ; 14/12/22
420+  89B6              ;
421+  89B6              ;	Modifica: A y BC.
422+  89B6
423+  89B6 3A F8 84     calcula_CColumnass ld a,(Cuad_objeto)
424+  89B9 E6 01        	and 1
425+  89BB 28 17        	jr z,1F
426+  89BD
427+  89BD              ; Nos encontramos en la parte izquierda de la pantalla
428+  89BD
429+  89BD 3A EB 84     	ld a,(Coordenada_X)
430+  89C0 47           	ld b,a
431+  89C1 04           	inc b											; (Coordenada_X)+1 en B.
432+  89C2 79           	ld a,c
433+  89C3 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
434+  89C4 38 08        	jr c,2F
435+  89C6 47           	ld b,a
436+  89C7 79           	ld a,c
437+  89C8 90           	sub b
438+  89C9 32 18 85     	ld (Columnas),a
439+  89CC 18 1B        	jr 4F
440+  89CE 79           2 ld a,c
441+  89CF 32 18 85     	ld (Columnas),a
442+  89D2 18 15        	jr 4F
443+  89D4
444+  89D4              ; Nos encontramos en la parte derecha de la pantalla.
445+  89D4
446+  89D4 3A EB 84     1 ld a,(Coordenada_X)
447+  89D7 81           	add c
448+  89D8 3D           	dec a
449+  89D9 D6 1F        	sub $1f
450+  89DB 38 08        	jr c,3F
451+  89DD 47           	ld b,a
452+  89DE 79           	ld a,c
453+  89DF 90           	sub b
454+  89E0 32 18 85     	ld (Columnas),a
455+  89E3 18 04        	jr 4F
456+  89E5 79           3 ld a,c
457+  89E6 32 18 85     	ld (Columnas),a
458+  89E9 D9           4 exx
459+  89EA 4F           	ld c,a
460+  89EB D9           	exx
461+  89EC C9            ret
462+  89ED
463+  89ED              ; --------------------------------------------------------------------------------------------------------------------
464+  89ED              ;
465+  89ED              ; 7/1/23
466+  89ED              ;
467+  89ED              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
468+  89ED              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
469+  89ED              ;
470+  89ED              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
471+  89ED              ;	DESTRUYE: HL,B Y A.
472+  89ED
473+  89ED 3A F8 84     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
474+  89F0 FE 02        	cp 2
475+  89F2 38 18        	jr c,1F
476+  89F4 28 16        	jr z,1F
477+  89F6 E6 01        	and 1
478+  89F8 28 0D        	jr z,3F
479+  89FA
480+  89FA              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
481+  89FA
482+  89FA CD 36 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
483+  89FD
484+  89FD 7D           9 ld a,l
485+  89FE E6 1F        	and $1f
486+  8A00 28 2A        	jr z,7F
487+  8A02 2B           	dec hl
488+  8A03 10 F8        	djnz 9B
489+  8A05 18 25        	jr 7F
490+  8A07
491+  8A07              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
492+  8A07
493+  8A07 2A E6 84     3 ld hl,(Posicion_actual)
494+  8A0A 18 20        	jr 7F
495+  8A0C
496+  8A0C 28 14        1 jr z,2F
497+  8A0E
498+  8A0E              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
499+  8A0E
500+  8A0E CD 36 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
501+  8A11 7D           4 ld a,l
502+  8A12 E6 1F        	and $1f
503+  8A14 28 03        	jr z,6F
504+  8A16 2B           	dec hl
505+  8A17 10 F8        	djnz 4B
506+  8A19 06 0F        6 ld b,15
507+  8A1B CD 97 8A     5 call PreviousScan
508+  8A1E 10 FB        	djnz 5B
509+  8A20 18 0A        	jr 7F
510+  8A22
511+  8A22              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
512+  8A22
513+  8A22 CD 36 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
514+  8A25 06 0F        	ld b,15
515+  8A27 CD 97 8A     8 call PreviousScan
516+  8A2A 10 FB        	djnz 8B
517+  8A2C
518+  8A2C E5           7 push hl
519+  8A2D DD E1        	pop ix
520+  8A2F
521+  8A2F 2A E8 84     	ld hl,(Puntero_objeto)
522+  8A32 E5           	push hl
523+  8A33 FD E1        	pop iy
524+  8A35
525+  8A35 C9           	ret
526+  8A36
527+  8A36              ; --------------------------------------------------------------------------------------------------------------------
528+  8A36              ;
529+  8A36              ;	2/1/23
530+  8A36              ;
531+  8A36              ;	Sub-rutina de [Calcula_puntero_de_impresion].
532+  8A36              ;
533+  8A36              ;	Tras esta rutina tenemos:
534+  8A36              ;
535+  8A36              ;	OUTPUT: HL contiene (Posicion_actual).
536+  8A36              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
537+  8A36              ;
538+  8A36              ;	DESTRUYE!!!!! HL,B y A.
539+  8A36
540+  8A36 2A E6 84     Operandos ld hl,(Posicion_actual)
541+  8A39 3A 18 85     	ld a,(Columnas)
542+  8A3C 3D           	dec a
543+  8A3D 20 01        	jr nz,1F
544+  8A3F 3C           	inc a
545+  8A40 47           1 ld b,a
546+  8A41 C9           	ret
547+  8A42
548+  8A42              ; --------------------------------------------------------------------------------------------------------------------
549+  8A42              ;
550+  8A42              ;	3/1/23
551+  8A42              ;
552+  8A42              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
553+  8A42              ;
554+  8A42              ;	Destruye: A,B,HL y DE.
555+  8A42
556+  8A42              Define_rutina_de_impresion
557+  8A42
558+  8A42 3A E5 84     	ld a,(Columns)
559+  8A45 47           	ld b,a
560+  8A46 3A 18 85     	ld a,(Columnas)
561+  8A49 B8           	cp b
562+  8A4A 20 0D        	jr nz,2f
563+  8A4C
564+  8A4C              ;	La entidad se imprime entera.
565+  8A4C
566+  8A4C 21 E3 8A     	ld hl, Indice_entidades_completas
567+  8A4F E6 01        	and 1
568+  8A51 28 02        	jr z,1F
569+  8A53
570+  8A53 23           	inc hl
571+  8A54 23           	inc hl
572+  8A55
573+  8A55 CD 90 86     1 call Extrae_address
574+  8A58 C9           	ret		;	ret
575+  8A59
576+  8A59              ;	La entidad no se imprime entera en pantalla.
577+  8A59
578+  8A59 3A F8 84     2 ld a,(Cuad_objeto)
579+  8A5C E6 01        	and 1
580+  8A5E 28 17        	jr z,3F
581+  8A60
582+  8A60              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
583+  8A60
584+  8A60 21 E7 8A     	ld hl, Indice_entidades_incompletas_izquierda
585+  8A63 3A E5 84     4 ld a,(Columns)
586+  8A66 E6 01        	and 1
587+  8A68 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
588+  8A6A
589+  8A6A 23           	inc hl
590+  8A6B 23           	inc hl
591+  8A6C
592+  8A6C 3A 18 85     	ld a,(Columnas)
593+  8A6F E6 01        	and 1
594+  8A71 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
595+  8A73
596+  8A73 23           	inc hl
597+  8A74 23           	inc hl
598+  8A75
599+  8A75 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
600+  8A77
601+  8A77 21 ED 8A     3 ld hl, Indice_entidades_incompletas_derecha
602+  8A7A 18 E7        	jr 4B
603+  8A7C
604+  8A7C              ; --------------------------------------------------------------------------------------------------------------------
605+  8A7C              ;
606+  8A7C              ;	Prepara_draw
607+  8A7C              ;
608+  8A7C              ;	Es una rutina de carga.
609+  8A7C              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
610+  8A7C              ;
611+  8A7C              ;	FUNCIONAMIENTO:
612+  8A7C              ;
613+  8A7C              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
614+  8A7C              ;	- LD (Posicion_actual) del objeto en [HL].
615+  8A7C              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
616+  8A7C              ;
617+  8A7C              ;	DESTRUYE:
618+  8A7C              ;
619+  8A7C              ;	Logicamente, BC,HL y E quedan destruidos.
620+  8A7C
621+  8A7C 21 E4 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
622+  8A7F 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
623+  8A80 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
624+  8A81 4E           	ld c,(hl)
625+  8A82 2A E6 84     	ld hl,(Posicion_actual)
626+  8A85 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
627+  8A87 C9           	ret
628+  8A88
629+  8A88              ;----------------------------------------------------------------------------------------------------------------
630+  8A88              ;
631+  8A88              ;	5/08/22
632+  8A88              ;
633+  8A88              ;   NextScan.
634+  8A88              ;
635+  8A88              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
636+  8A88              ;
637+  8A88              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
638+  8A88              ;
639+  8A88              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
640+  8A88              ;
641+  8A88              ;       DESTRUIDOS: AF y HL !!!
642+  8A88              ;
643+  8A88              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
644+  8A88              ;
645+  8A88
646+  8A88 24           NextScan inc h          ; Incrementamos el scanline.
647+  8A89 7C               ld a,h
648+  8A8A E6 07            and 7
649+  8A8C C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
650+  8A8D
651+  8A8D 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
652+  8A8E C6 20            add a,$20           ; Vamos a comprobarlo...
653+  8A90 6F               ld l,a
654+  8A91 D8               ret c               ; Salimos si se produce el cambio de tercio.
655+  8A92
656+  8A92 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
657+  8A93 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
658+  8A95 67               ld h,a
659+  8A96 C9               ret
660+  8A97
661+  8A97              ;----------------------------------------------------------------------------------------------------------------
662+  8A97              ;
663+  8A97              ;	5/08/22
664+  8A97              ;
665+  8A97              ;   PreviousScan.
666+  8A97              ;
667+  8A97              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
668+  8A97              ;
669+  8A97              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
670+  8A97              ;
671+  8A97              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
672+  8A97              ;
673+  8A97              ;       DESTRUIDOS: AF y HL !!!
674+  8A97              ;
675+  8A97              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
676+  8A97              ;
677+  8A97
678+  8A97 7C           PreviousScan ld a,h
679+  8A98 25               dec h               ; Dec H.
680+  8A99 E6 07            and 7
681+  8A9B C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
682+  8A9C
683+  8A9C 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
684+  8A9D D6 20            sub $20             ; Vamos a comprobarlo...
685+  8A9F 6F               ld l,a
686+  8AA0 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
687+  8AA1
688+  8AA1 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
689+  8AA2 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
690+  8AA4 67               ld h,a
691+  8AA5 C9               ret
692+  8AA6
693+  8AA6              ; -----------------------------------------------------------------------------------
694+  8AA6              ;
695+  8AA6              ;	15/1/23
696+  8AA6
697+  8AA6              Extrae_foto_registros
698+  8AA6
699+  8AA6 3A 23 85     	ld a,(Numero_de_malotes)
700+  8AA9 A7           	and a
701+  8AAA C8           	ret z
702+  8AAB
703+  8AAB
704+  8AAB ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
705+  8AAF 31 00 70     	ld sp,Album_de_fotos
706+  8AB2
707+  8AB2 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
708+  8AB4 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
709+  8AB5 D1           	pop de																	; Dirección de la rutina de impresión en DE.
710+  8AB6
711+  8AB6 ED 73 26 85  	ld (Stack_2),sp
712+  8ABA ED 7B 24 85  	ld sp,(Stack)
713+  8ABE
714+  8ABE              ; Fabrica la llamada a la correspondiente rutina de impresión.
715+  8ABE
716+  8ABE 3E CD        	ld a,$cd
717+  8AC0 32 C8 8A     	ld (Imprime),a
718+  8AC3 EB           	ex de,hl
719+  8AC4 22 C9 8A     	ld (Imprime+1),hl
720+  8AC7 EB           	ex de,hl
721+  8AC8
722+  8AC8              ; Ejecuta la llamada:	CALL $xx,xx
723+  8AC8
724+  8AC8 00 00 00     Imprime db 0,0,0
725+  8ACB
726+  8ACB ED 73 24 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
727+  8ACF
728+  8ACF 3A 23 85     	ld a,(Numero_de_malotes)
729+  8AD2 3D           	dec a
730+  8AD3 28 09        	jr z,1F
731+  8AD5 32 23 85      	ld (Numero_de_malotes),a
732+  8AD8 ED 7B 26 85  	ld sp,(Stack_2)
733+  8ADC 18 D4        	jr 2B
734+  8ADE
735+  8ADE AF           1 xor a
736+  8ADF 32 26 85     	ld (Stack_2),a
737+  8AE2 C9           	ret
738+  8AE3
739+  8AE3
# file closed: Draw_XOR.asm
735   8AE3              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8AE3              ;   índices de Rutinas de impresión.
  2+  8AE3
  3+  8AE3 F3 8A        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AE5 20 8B            defw Pinta_Amadeus_3x2
  5+  8AE7
  6+  8AE7 76 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AE9 16 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AEB CA 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8AED
 10+  8AED A0 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8AEF A4 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8AF1 58 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8AF3
 14+  8AF3
 15+  8AF3              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8AF3              ;
 17+  8AF3              ;   12/12/22
 18+  8AF3              ;
 19+  8AF3              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8AF3              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8AF3              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8AF3              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8AF3              ;
 24+  8AF3              ;   Modifica: DE y HL.
 25+  8AF3
 26+  8AF3 ED 73 24 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8AF7 FD F9        	ld sp,iy
 28+  8AF9 06 10            ld b,16
 29+  8AFB D1           1 pop de
 30+  8AFC 7B               ld a,e
 31+  8AFD AE               xor (hl)
 32+  8AFE 77           	ld (hl),a
 33+  8AFF 23           	inc hl
 34+  8B00 7A               ld a,d
 35+  8B01 AE               xor (hl)
 36+  8B02 77           	ld (hl),a
 37+  8B03 2B           	dec hl
 38+  8B04 24           	inc h
 39+  8B05 7C               ld a,h
 40+  8B06 E6 07            and 7
 41+  8B08 20 0A            jr nz,2F
 42+  8B0A 7D               ld a,l
 43+  8B0B C6 20            add a,$20
 44+  8B0D 6F               ld l,a
 45+  8B0E 38 04            jr c,2F
 46+  8B10 7C               ld a,h
 47+  8B11 D6 08            sub 8
 48+  8B13 67               ld h,a
 49+  8B14 7C           2 ld a,h
 50+  8B15 FE 58            cp $58
 51+  8B17 28 02            jr z,3F
 52+  8B19 10 E0            djnz 1B
 53+  8B1B ED 7B 24 85  3 ld sp,(Stack)
 54+  8B1F C9           	ret
 55+  8B20
 56+  8B20 ED 73 24 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B24 FD F9        	ld sp,iy
 58+  8B26 06 08            ld b,8
 59+  8B28 D1           1 pop de
 60+  8B29 7B               ld a,e
 61+  8B2A AE               xor (hl)
 62+  8B2B 77           	ld (hl),a
 63+  8B2C 23           	inc hl
 64+  8B2D 7A               ld a,d
 65+  8B2E AE               xor (hl)
 66+  8B2F 77           	ld (hl),a
 67+  8B30 23           	inc hl
 68+  8B31 D1           	pop de
 69+  8B32 7B               ld a,e
 70+  8B33 AE               xor (hl)
 71+  8B34 77           	ld (hl),a
 72+  8B35 2B           	dec hl
 73+  8B36 2B           	dec hl
 74+  8B37 24           	inc h
 75+  8B38 7C               ld a,h
 76+  8B39 E6 07            and 7
 77+  8B3B 20 0A            jr nz,2F
 78+  8B3D 7D               ld a,l
 79+  8B3E C6 20            add a,$20
 80+  8B40 6F               ld l,a
 81+  8B41 38 04            jr c,2F
 82+  8B43 7C               ld a,h
 83+  8B44 D6 08            sub 8
 84+  8B46 67               ld h,a
 85+  8B47 7C           2 ld a,h
 86+  8B48 FE 58            cp $58
 87+  8B4A 28 25            jr z,4F
 88+  8B4C 7A               ld a,d
 89+  8B4D AE               xor (hl)
 90+  8B4E 77               ld (hl),a
 91+  8B4F D1           	pop de
 92+  8B50 23           	inc hl
 93+  8B51 7B               ld a,e
 94+  8B52 AE               xor (hl)
 95+  8B53 77           	ld (hl),a
 96+  8B54 23           	inc hl
 97+  8B55 7A               ld a,d
 98+  8B56 AE               xor (hl)
 99+  8B57 77           	ld (hl),a
100+  8B58 2B           	dec hl
101+  8B59 2B           	dec hl
102+  8B5A 24           	inc h
103+  8B5B 7C               ld a,h
104+  8B5C E6 07            and 7
105+  8B5E 20 0A            jr nz,3F
106+  8B60 7D               ld a,l
107+  8B61 C6 20            add a,$20
108+  8B63 6F               ld l,a
109+  8B64 38 04            jr c,3F
110+  8B66 7C               ld a,h
111+  8B67 D6 08            sub 8
112+  8B69 67               ld h,a
113+  8B6A 7C           3 ld a,h
114+  8B6B FE 58            cp $58
115+  8B6D 28 02            jr z,4F
116+  8B6F 10 B7            djnz 1B
117+  8B71 ED 7B 24 85  4 ld sp,(Stack)
118+  8B75 C9           	ret
119+  8B76
120+  8B76              ; ---------------------------------------------------
121+  8B76
122+  8B76 ED 73 24 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B7A FD F9        	ld sp,iy
124+  8B7C 06 10            ld b,16
125+  8B7E D1           1 pop de
126+  8B7F 7A           	ld a,d
127+  8B80 AE           	xor (hl)
128+  8B81 77           	ld (hl),a
129+  8B82 24           	inc h
130+  8B83 7C               ld a,h
131+  8B84 E6 07            and 7
132+  8B86 20 0C            jr nz,2F
133+  8B88 7D               ld a,l
134+  8B89 C6 20            add a,$20
135+  8B8B 6F               ld l,a
136+  8B8C 38 06            jr c,2F
137+  8B8E 7C               ld a,h
138+  8B8F D6 08            sub 8
139+  8B91 67               ld h,a
140+  8B92 18 00            jr 2F
141+  8B94 7C           2 ld a,h
142+  8B95 FE 58            cp $58
143+  8B97 28 02            jr z,3F
144+  8B99 10 E3            djnz 1B
145+  8B9B ED 7B 24 85  3 ld sp,(Stack)
146+  8B9F C9           	ret
147+  8BA0
148+  8BA0 ED 73 24 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8BA4 FD F9        	ld sp,iy
150+  8BA6 06 10            ld b,16
151+  8BA8 D1           1 pop de
152+  8BA9 7B           	ld a,e
153+  8BAA AE           	xor (hl)
154+  8BAB 77           	ld (hl),a
155+  8BAC 24           	inc h
156+  8BAD 7C               ld a,h
157+  8BAE E6 07            and 7
158+  8BB0 20 0C            jr nz,2F
159+  8BB2 7D               ld a,l
160+  8BB3 C6 20            add a,$20
161+  8BB5 6F               ld l,a
162+  8BB6 38 06            jr c,2F
163+  8BB8 7C               ld a,h
164+  8BB9 D6 08            sub 8
165+  8BBB 67               ld h,a
166+  8BBC 18 00            jr 2F
167+  8BBE 7C           2 ld a,h
168+  8BBF FE 58            cp $58
169+  8BC1 28 02            jr z,3F
170+  8BC3 10 E3            djnz 1B
171+  8BC5 ED 7B 24 85  3 ld sp,(Stack)
172+  8BC9 C9           	ret
173+  8BCA
174+  8BCA              ; ---------------------------------------------------
175+  8BCA
176+  8BCA ED 73 24 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BCE FD F9        	ld sp,iy
178+  8BD0 06 08            ld b,8
179+  8BD2 D1           1 pop de
180+  8BD3 7A           	ld a,d
181+  8BD4 AE           	xor (hl)
182+  8BD5 77           	ld (hl),a
183+  8BD6 23           	inc hl
184+  8BD7 D1           	pop de
185+  8BD8 7B           	ld a,e
186+  8BD9 AE           	xor (hl)
187+  8BDA 77           	ld (hl),a
188+  8BDB 2B           	dec hl
189+  8BDC 24            	inc h
190+  8BDD 7C               ld a,h
191+  8BDE E6 07            and 7
192+  8BE0 20 0A            jr nz,2F
193+  8BE2 7D               ld a,l
194+  8BE3 C6 20            add a,$20
195+  8BE5 6F               ld l,a
196+  8BE6 38 04            jr c,2F
197+  8BE8 7C               ld a,h
198+  8BE9 D6 08            sub 8
199+  8BEB 67               ld h,a
200+  8BEC 7C           2 ld a,h
201+  8BED FE 58            cp $58
202+  8BEF 28 20            jr z,4F
203+  8BF1 D1               pop de
204+  8BF2 7B           	ld a,e
205+  8BF3 AE           	xor (hl)
206+  8BF4 77           	ld (hl),a
207+  8BF5 23           	inc hl
208+  8BF6 7A           	ld a,d
209+  8BF7 AE           	xor (hl)
210+  8BF8 77           	ld (hl),a
211+  8BF9 2B           	dec hl
212+  8BFA 24           	inc h
213+  8BFB 7C               ld a,h
214+  8BFC E6 07            and 7
215+  8BFE 20 0A            jr nz,3F
216+  8C00 7D               ld a,l
217+  8C01 C6 20            add a,$20
218+  8C03 6F               ld l,a
219+  8C04 38 04            jr c,3F
220+  8C06 7C               ld a,h
221+  8C07 D6 08            sub 8
222+  8C09 67               ld h,a
223+  8C0A 7C           3 ld a,h
224+  8C0B FE 58            cp $58
225+  8C0D 28 02            jr z,4F
226+  8C0F 10 C1            djnz 1B
227+  8C11 ED 7B 24 85  4 ld sp,(Stack)
228+  8C15 C9           	ret
229+  8C16
230+  8C16 ED 73 24 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C1A FD F9        	ld sp,iy
232+  8C1C 06 08            ld b,8
233+  8C1E D1           1 pop de
234+  8C1F D1           	pop de
235+  8C20 7B           	ld a,e
236+  8C21 AE           	xor (hl)
237+  8C22 77           	ld (hl),a
238+  8C23 24            	inc h
239+  8C24 7C               ld a,h
240+  8C25 E6 07            and 7
241+  8C27 20 0A            jr nz,2F
242+  8C29 7D               ld a,l
243+  8C2A C6 20            add a,$20
244+  8C2C 6F               ld l,a
245+  8C2D 38 04            jr c,2F
246+  8C2F 7C               ld a,h
247+  8C30 D6 08            sub 8
248+  8C32 67               ld h,a
249+  8C33 7C           2 ld a,h
250+  8C34 FE 58            cp $58
251+  8C36 28 1B            jr z,4F
252+  8C38 D1               pop de
253+  8C39 7A           	ld a,d
254+  8C3A AE           	xor (hl)
255+  8C3B 77           	ld (hl),a
256+  8C3C 24           	inc h
257+  8C3D 7C               ld a,h
258+  8C3E E6 07            and 7
259+  8C40 20 0A            jr nz,3F
260+  8C42 7D               ld a,l
261+  8C43 C6 20            add a,$20
262+  8C45 6F               ld l,a
263+  8C46 38 04            jr c,3F
264+  8C48 7C               ld a,h
265+  8C49 D6 08            sub 8
266+  8C4B 67               ld h,a
267+  8C4C 7C           3 ld a,h
268+  8C4D FE 58            cp $58
269+  8C4F 28 02            jr z,4F
270+  8C51 10 CB            djnz 1B
271+  8C53 ED 7B 24 85  4 ld sp,(Stack)
272+  8C57 C9           	ret
273+  8C58
274+  8C58 ED 73 24 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C5C FD F9        	ld sp,iy
276+  8C5E 06 08            ld b,8
277+  8C60 D1           1 pop de
278+  8C61 7B           	ld a,e
279+  8C62 AE           	xor (hl)
280+  8C63 77           	ld (hl),a
281+  8C64 23           	inc hl
282+  8C65 7A           	ld a,d
283+  8C66 AE           	xor (hl)
284+  8C67 77           	ld (hl),a
285+  8C68 2B           	dec hl
286+  8C69 24             	inc h
287+  8C6A 7C               ld a,h
288+  8C6B E6 07            and 7
289+  8C6D 20 0A            jr nz,2F
290+  8C6F 7D               ld a,l
291+  8C70 C6 20            add a,$20
292+  8C72 6F               ld l,a
293+  8C73 38 04            jr c,2F
294+  8C75 7C               ld a,h
295+  8C76 D6 08            sub 8
296+  8C78 67               ld h,a
297+  8C79 7C           2 ld a,h
298+  8C7A FE 58            cp $58
299+  8C7C 28 21            jr z,4F
300+  8C7E D1               pop de
301+  8C7F 7A           	ld a,d
302+  8C80 AE           	xor (hl)
303+  8C81 77           	ld (hl),a
304+  8C82 23           	inc hl
305+  8C83 D1               pop de
306+  8C84 7B           	ld a,e
307+  8C85 AE           	xor (hl)
308+  8C86 77           	ld (hl),a
309+  8C87 2B           	dec hl
310+  8C88 24           	inc h
311+  8C89 7C               ld a,h
312+  8C8A E6 07            and 7
313+  8C8C 20 0A            jr nz,3F
314+  8C8E 7D               ld a,l
315+  8C8F C6 20            add a,$20
316+  8C91 6F               ld l,a
317+  8C92 38 04            jr c,3F
318+  8C94 7C               ld a,h
319+  8C95 D6 08            sub 8
320+  8C97 67               ld h,a
321+  8C98 7C           3 ld a,h
322+  8C99 FE 58            cp $58
323+  8C9B 28 02            jr z,4F
324+  8C9D 10 C1            djnz 1B
325+  8C9F ED 7B 24 85  4 ld sp,(Stack)
326+  8CA3 C9           	ret
327+  8CA4
328+  8CA4 ED 73 24 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8CA8 FD F9        	ld sp,iy
330+  8CAA 06 08            ld b,8
331+  8CAC D1           1 pop de
332+  8CAD 7B           	ld a,e
333+  8CAE AE           	xor (hl)
334+  8CAF 77           	ld (hl),a
335+  8CB0 24            	inc h
336+  8CB1 7C               ld a,h
337+  8CB2 E6 07            and 7
338+  8CB4 20 0A            jr nz,2F
339+  8CB6 7D               ld a,l
340+  8CB7 C6 20            add a,$20
341+  8CB9 6F               ld l,a
342+  8CBA 38 04            jr c,2F
343+  8CBC 7C               ld a,h
344+  8CBD D6 08            sub 8
345+  8CBF 67               ld h,a
346+  8CC0 7C           2 ld a,h
347+  8CC1 FE 58            cp $58
348+  8CC3 28 1C            jr z,4F
349+  8CC5 D1               pop de
350+  8CC6 7A           	ld a,d
351+  8CC7 AE           	xor (hl)
352+  8CC8 77           	ld (hl),a
353+  8CC9 24           	inc h
354+  8CCA 7C               ld a,h
355+  8CCB E6 07            and 7
356+  8CCD 20 0A            jr nz,3F
357+  8CCF 7D               ld a,l
358+  8CD0 C6 20            add a,$20
359+  8CD2 6F               ld l,a
360+  8CD3 38 04            jr c,3F
361+  8CD5 7C               ld a,h
362+  8CD6 D6 08            sub 8
363+  8CD8 67               ld h,a
364+  8CD9 7C           3 ld a,h
365+  8CDA FE 58            cp $58
366+  8CDC 28 03            jr z,4F
367+  8CDE D1               pop de
368+  8CDF 10 CB            djnz 1B
369+  8CE1 ED 7B 24 85  4 ld sp,(Stack)
370+  8CE5 C9           	ret
371+  8CE6
372+  8CE6              ; ---------------------------------------------------
373+  8CE6
# file closed: Rutinas_de_impresion_sprites.asm
736   8CE6              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CE6              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CE6              ;
  3+  8CE6              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CE6              ;
  5+  8CE6              ; *****************************************************************************************************************************************************************************************
  6+  8CE6              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CE6
  8+  8CE6 7C           calcula_tercio ld a,h
  9+  8CE7 E6 18        	and $18
 10+  8CE9 CB 2F        	sra a
 11+  8CEB CB 2F        	sra a
 12+  8CED CB 2F        	sra a
 13+  8CEF C9           	ret
 14+  8CF0
# file closed: calcula_tercio.asm
737   8CF0              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8CF0              ; -----------------------------------------------------------------------------------------
  2+  8CF0              ;
  3+  8CF0              ;   04/11/22
  4+  8CF0              ;
  5+  8CF0              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8CF0              ;
  7+  8CF0              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8CF0              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8CF0              ;
 10+  8CF0              ;   DESTRUYE: HL y A. !!!!!
 11+  8CF0
 12+  8CF0 CD E6 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8CF3 26 58            ld h,$58
 14+  8CF5 84               add h
 15+  8CF6 67               ld h,a
 16+  8CF7 C9               ret
# file closed: Calcula_direccion_atributos.asm
738   8CF8              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8CF8              ; ********** **********
  2+  8CF8              ;
  3+  8CF8              ;   5/11/22
  4+  8CF8              ;
  5+  8CF8              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8CF8              ;
  7+  8CF8              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8CF8              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8CF8              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8CF8              ;
 11+  8CF8              ;   NO DESTROYERSSSS !!!!!
 12+  8CF8
 13+  8CF8 E5           Define_atributos push hl
 14+  8CF9 C5           	push bc
 15+  8CFA D5           	push de
 16+  8CFB
 17+  8CFB CD F0 8C     	call Calcula_direccion_atributos
 18+  8CFE
 19+  8CFE D9               exx
 20+  8CFF E5               push hl
 21+  8D00 D9               exx
 22+  8D01 D1               pop de
 23+  8D02
 24+  8D02 42               ld b,d
 25+  8D03 7B               ld a,e 									; (Attr) en A.
 26+  8D04
 27+  8D04 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8D05 E5            	push hl 								; Guardo dirección de attr.
 29+  8D06
 30+  8D06              ; -----
 31+  8D06
 32+  8D06 77           2 ld (hl),a
 33+  8D07 0D           	dec c 									; Decremento (Columnas).
 34+  8D08 28 03        	jr z,1F
 35+  8D0A 23           	inc hl
 36+  8D0B 18 F9        	jr 2B
 37+  8D0D
 38+  8D0D E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8D0E C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8D0F
 41+  8D0F 05           	dec b									; Decremento (Filas).
 42+  8D10 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8D12
 44+  8D12 11 20 00     	ld de,32
 45+  8D15 A7           	and a
 46+  8D16 ED 5A        	adc hl,de
 47+  8D18 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8D1A
 49+  8D1A D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8D1B C1           	pop bc
 51+  8D1C E1           	pop hl
 52+  8D1D
 53+  8D1D C9           	ret
 54+  8D1E
# file closed: Define_atributos.asm
739   8D1E              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D1E              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D1E              ;
  3+  8D1E              ;
  4+  8D1E              ;	CLS.
  5+  8D1E              ;
  6+  8D1E              ;	Limpia la pantalla y define sus atributos.
  7+  8D1E              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D1E              ;
  9+  8D1E              ;	COLORES: 0 ..... NEGRO
 10+  8D1E              ;    		 1 ..... AZUL
 11+  8D1E              ; 			 2 ..... ROJO
 12+  8D1E              ;			 3 ..... MAGENTA
 13+  8D1E              ; 			 4 ..... VERDE
 14+  8D1E              ; 			 5 ..... CIAN
 15+  8D1E              ;			 6 ..... AMARILLO
 16+  8D1E              ; 			 7 ..... BLANCO
 17+  8D1E              ;
 18+  8D1E              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D1E              ;
 20+  8D1E              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D1E
 22+  8D1E
 23+  8D1E 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D21 11 01 40     	LD DE,$4001
 25+  8D24 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D27 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D29 ED B0        	LDIR
 28+  8D2B 01 FF 02     	LD BC,767
 29+  8D2E 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D2F ED B0        	LDIR
 31+  8D31 C9           	ret
 32+  8D32
# file closed: Cls.asm
740   8D32              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D32              ; ******************************************************************************************************************************************************************************************
  2+  8D32              ;
  3+  8D32              ;   22/01/23
  4+  8D32              ;
  5+  8D32              ;	Mov_down
  6+  8D32              ;
  7+  8D32              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D32              ;
  9+  8D32              ;
 10+  8D32 21 0F 85     Mov_down ld hl,Ctrl_0
 11+  8D35 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D37              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D37              ; 																	; _ en el caso de que no lo haya.
 14+  8D37 3A FC 84     	ld a,(Vel_down)
 15+  8D3A 47           	ld b,a
 16+  8D3B 2A E6 84         ld hl,(Posicion_actual)
 17+  8D3E CD E6 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D41 E6 02        	and 2
 19+  8D43 28 0F        	jr z,1F
 20+  8D45
 21+  8D45              ; Nos encontramos en el último tercio de pantalla.
 22+  8D45              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D45
 24+  8D45 7C           	ld a,h
 25+  8D46 FE 57        	cp $57
 26+  8D48 20 0A        	jr nz,1F
 27+  8D4A 7D           	ld a,l
 28+  8D4B C6 20        	add $20
 29+  8D4D 30 05        	jr nc,1F
 30+  8D4F              ; ------------------------------
 31+  8D4F CD DD 8F     	call Reaparece_arriba
 32+  8D52              ;	call Reinicio
 33+  8D52              ; ------------------------------
 34+  8D52 18 08        	jr 3F
 35+  8D54 CD 88 8A     1 call NextScan
 36+  8D57 22 E6 84     	ld (Posicion_actual),hl
 37+  8D5A 10 E2            djnz 2B
 38+  8D5C CD F3 8F     3 call Genera_coordenadas
 39+  8D5F C9           	ret
 40+  8D60
 41+  8D60
 42+  8D60              ; ******************************************************************************************************************************************************************************************
 43+  8D60              ;
 44+  8D60              ;   22/01/23
 45+  8D60              ;
 46+  8D60              ;	Mov_up
 47+  8D60              ;
 48+  8D60              ; 	Mueve el Sprite hacia arriba.
 49+  8D60              ;
 50+  8D60              ;
 51+  8D60 21 0F 85     Mov_up ld hl,Ctrl_0
 52+  8D63 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 53+  8D65              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 54+  8D65              ; 																		; _ en el caso de que no lo haya.
 55+  8D65 3A FB 84     	ld a,(Vel_up)
 56+  8D68 47           	ld b,a
 57+  8D69 2A E6 84     	ld hl,(Posicion_actual)
 58+  8D6C CD E6 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 59+  8D6F A7           	and a
 60+  8D70 20 10        	jr nz,1F
 61+  8D72
 62+  8D72              ; Nos encontramos en el 1er tercio de pantalla.
 63+  8D72              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 64+  8D72
 65+  8D72 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 66+  8D73 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 67+  8D75 20 0B            jr nz,1F
 68+  8D77 7D               ld a,l
 69+  8D78 D6 20            sub $20
 70+  8D7A 30 06            jr nc,1F
 71+  8D7C 25               dec h
 72+  8D7D
 73+  8D7D              ; -----------------------------
 74+  8D7D CD CD 8F         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 75+  8D80              ;	call Reinicio
 76+  8D80              ; -----------------------------
 77+  8D80
 78+  8D80 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 79+  8D82 CD 97 8A     1 call PreviousScan
 80+  8D85 22 E6 84     	ld (Posicion_actual),hl
 81+  8D88 10 E2            djnz 3B
 82+  8D8A CD F3 8F     2 call Genera_coordenadas
 83+  8D8D C9           	ret
 84+  8D8E
 85+  8D8E              ; ******************************************************************************************************************************************************************************************
 86+  8D8E              ;
 87+  8D8E              ;	19/10/22
 88+  8D8E              ;
 89+  8D8E              ;	Mov_right.
 90+  8D8E              ;
 91+  8D8E              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 92+  8D8E              ;
 93+  8D8E
 94+  8D8E 21 0F 85     Mov_right ld hl,Ctrl_0
 95+  8D91 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 96+  8D93              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 97+  8D93              ; 																	; _ en el caso de que no lo haya.
 98+  8D93 3A 0F 85     	ld a,(Ctrl_0)
 99+  8D96 CB 77        	bit 6,a
100+  8D98 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
101+  8D9A
102+  8D9A CD 8C 8F     	call Stop_Amadeus_right
103+  8D9D C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
104+  8D9E 18 4D        	jr 8F
105+  8DA0
106+  8DA0 3A EB 84     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
107+  8DA3 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
108+  8DA5 20 46        	jr nz,8F
109+  8DA7
110+  8DA7 3A EA 84     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
111+  8DAA A7           	and a 															; _[3] para continuar con el DESPLZ.
112+  8DAB 28 40        	jr z,8F
113+  8DAD
114+  8DAD              ; ---------- ---------- ----------
115+  8DAD              ;
116+  8DAD              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
117+  8DAD
118+  8DAD 3A FA 84     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
119+  8DB0 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
120+  8DB2 28 11        	jr z,1F
121+  8DB4 38 06        	jr c,6F
122+  8DB6 FE 04        	cp 4
123+  8DB8 28 14        	jr z,7F
124+  8DBA 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
125+  8DBC
126+  8DBC              ; ---------- ---------- ----------
127+  8DBC              ;
128+  8DBC              ; Perfiles de velocidad
129+  8DBC              ;
130+  8DBC
131+  8DBC 3A EA 84     6 ld a,(CTRL_DESPLZ) 												; Velocidad 1
132+  8DBF FE FE        	cp $fe
133+  8DC1 20 2A        	jr nz,8F
134+  8DC3 18 10        	jr 3F
135+  8DC5 3A EA 84     1 ld a,(CTRL_DESPLZ) 												; Velocidad 2
136+  8DC8 FE FD        	cp $fd
137+  8DCA 20 21        	jr nz,8F
138+  8DCC 18 07        	jr 3F
139+  8DCE 3A EA 84     7 ld a,(CTRL_DESPLZ) 												; Velocidad 4
140+  8DD1 FE FB        	cp $fb
141+  8DD3 20 18        	jr nz,8F
142+  8DD5
143+  8DD5              ; ---------- ---------- ----------
144+  8DD5
145+  8DD5 CD BB 8F     3 call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
146+  8DD8              ;	call Reinicio
147+  8DD8
148+  8DD8              ; ---------- ---------- ----------
149+  8DD8              ;
150+  8DD8              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
151+  8DD8
152+  8DD8 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
153+  8DDA C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
154+  8DDB CD F4 8D     	call DESPLZ_DER
155+  8DDE C1           	pop bc
156+  8DDF 10 F9        	djnz 5B
157+  8DE1 2A E6 84     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
158+  8DE4 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
159+  8DE5 22 E6 84     	ld (Posicion_actual),hl
160+  8DE8 CD F3 8F     	call Genera_coordenadas
161+  8DEB 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
162+  8DED
163+  8DED              ; ---------- ---------- ----------
164+  8DED
165+  8DED 2A E6 84     8 ld hl,(Posicion_actual)
166+  8DF0 CD F4 8D     	call DESPLZ_DER
167+  8DF3 C9           2 ret
168+  8DF4
169+  8DF4              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
170+  8DF4              ;
171+  8DF4              ;	22/9/22
172+  8DF4              ;
173+  8DF4
174+  8DF4 CD 03 8E     DESPLZ_DER call Desplaza_derecha
175+  8DF7 CD 26 8E         call modifica_parametros_1er_DESPLZ_2
176+  8DFA CD 4F 8E         call Ciclo_completo
177+  8DFD 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
178+  8E00 CB FE        	set 7,(hl)
179+  8E02 C9           	ret
180+  8E03
181+  8E03              ; ******************************************************************************************************************************************************************************************
182+  8E03              ;	2/2/23
183+  8E03              ;
184+  8E03
185+  8E03 3A FA 84     Desplaza_derecha ld a,(Vel_right)
186+  8E06 47           	ld b,a
187+  8E07 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
188+  8E0A
189+  8E0A 23           1 inc hl
190+  8E0B 23           	inc hl
191+  8E0C 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
192+  8E0E 22 F2 84     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
193+  8E11 CD 90 86     	call Extrae_address
194+  8E14 22 E8 84     	ld (Puntero_objeto),hl
195+  8E17
196+  8E17              ; Modifica (Puntero_DESPLZ_izq).
197+  8E17
198+  8E17 3A FA 84     	ld a,(Vel_right)
199+  8E1A 47           	ld b,a
200+  8E1B 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
201+  8E1E 2B           1 dec hl
202+  8E1F 2B           	dec hl
203+  8E20 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
204+  8E22 22 F4 84     	ld (Puntero_DESPLZ_izq),hl 										; _por el índice del Sprite.
205+  8E25 C9           	ret
206+  8E26
207+  8E26              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
208+  8E26              ;
209+  8E26              ;	24/7/22
210+  8E26              ;
211+  8E26              ;	modifica_parametros_1er_DESPLZ_2
212+  8E26              ;
213+  8E26              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
214+  8E26              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
215+  8E26              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
216+  8E26
217+  8E26 3A EA 84     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ) 			  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
218+  8E29 A7           	and a
219+  8E2A 20 1F        	jr nz,1F
220+  8E2C D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
221+  8E2E 32 EA 84         ld (CTRL_DESPLZ),a
222+  8E31 21 E5 84     	ld hl,Columns
223+  8E34 34           	inc (hl)
224+  8E35 3A F8 84     	ld a,(Cuad_objeto)
225+  8E38 E6 01        	and 1
226+  8E3A 28 0F        	jr z,1F
227+  8E3C 2A E6 84     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
228+  8E3F 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
229+  8E40 22 E6 84     	ld (Posicion_actual),hl
230+  8E43 CD F3 8F     	call Genera_coordenadas
231+  8E46 CD 98 8F     	call Inc_CTRL_DESPLZ
232+  8E49 18 03        	jr 2F
233+  8E4B CD 98 8F     1 call Inc_CTRL_DESPLZ
234+  8E4E C9           2 ret
235+  8E4F
236+  8E4F              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
237+  8E4F              ;
238+  8E4F              ;	24/7/22
239+  8E4F              ;
240+  8E4F              ;	Ciclo_completo.
241+  8E4F              ;
242+  8E4F              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
243+  8E4F              ;
244+  8E4F              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
245+  8E4F              ; 	Decrementamos (Columns).
246+  8E4F              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
247+  8E4F              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
248+  8E4F
249+  8E4F
250+  8E4F 3A EA 84     Ciclo_completo ld a,(CTRL_DESPLZ)
251+  8E52 FE FF        	cp $ff
252+  8E54 28 02        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
253+  8E56 18 30        	jr 3f
254+  8E58 21 E5 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
255+  8E5B 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
256+  8E5C AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
257+  8E5D 32 EA 84     	ld (CTRL_DESPLZ),a
258+  8E60 3A F8 84     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
259+  8E63 E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
260+  8E65 20 0A        	jr nz,2F
261+  8E67 2A E6 84     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
262+  8E6A 23           	inc hl
263+  8E6B 22 E6 84     	ld (Posicion_actual),hl
264+  8E6E CD F3 8F     	call Genera_coordenadas
265+  8E71
266+  8E71              ; Inicia el puntero de Sprite.
267+  8E71
268+  8E71              2
269+  8E71 2A EE 84     	ld hl,(Indice_Sprite_der)
270+  8E74 22 F2 84     	ld (Puntero_DESPLZ_der),hl
271+  8E77 CD 90 86     	call Extrae_address
272+  8E7A 22 E8 84     	ld (Puntero_objeto),hl
273+  8E7D
274+  8E7D 2A F0 84     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
275+  8E80 CD 90 86     	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
276+  8E83 2B           	dec hl 												; _del índice.
277+  8E84 2B           	dec hl
278+  8E85 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
279+  8E88
280+  8E88 C9           3 ret
281+  8E89
282+  8E89              ; ******************************************************************************************************************************************************************************************
283+  8E89              ;
284+  8E89              ;	21/01/23
285+  8E89              ;
286+  8E89              ;	Mov_left.
287+  8E89              ;
288+  8E89              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
289+  8E89              ;
290+  8E89              Mov_left
291+  8E89
292+  8E89 21 0F 85     	ld hl,Ctrl_0
293+  8E8C CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
294+  8E8E              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
295+  8E8E              ; 																	; _ en el caso de que no lo haya.
296+  8E8E 3A EA 84     	ld a,(CTRL_DESPLZ)
297+  8E91 A7           	and a
298+  8E92 20 0C        	jr nz,11F
299+  8E94
300+  8E94 3A 0F 85     	ld a,(Ctrl_0)
301+  8E97 CB 77        	bit 6,a
302+  8E99 28 55        	jr z,8F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
303+  8E9B
304+  8E9B CD 92 8F     	call Stop_Amadeus_left
305+  8E9E 20 50        	jr nz,8F
306+  8EA0
307+  8EA0 3A EB 84     11 ld a,(Coordenada_X)
308+  8EA3 A7           	and a
309+  8EA4 20 4A        	jr nz,8F
310+  8EA6 3A EA 84     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
311+  8EA9 A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
312+  8EAA 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
313+  8EAC
314+  8EAC              ; ---------- ---------- ----------
315+  8EAC
316+  8EAC 3A F9 84     	ld a,(Vel_left)
317+  8EAF FE 02        	cp 2
318+  8EB1 28 0F        	jr z,1F
319+  8EB3 38 04        	jr c,6F
320+  8EB5 FE 04        	cp 4
321+  8EB7 28 12        	jr z,7F
322+  8EB9
323+  8EB9              ; ---------- ---------- ----------
324+  8EB9
325+  8EB9 3A EA 84     6 ld a,(CTRL_DESPLZ)
326+  8EBC FE F9        	cp $f9
327+  8EBE 20 30        	jr nz,8F
328+  8EC0 18 10        	jr 4F
329+  8EC2 3A EA 84     1 ld a,(CTRL_DESPLZ)
330+  8EC5 FE FA        	cp $fa
331+  8EC7 20 27        	jr nz,8F
332+  8EC9 18 07        	jr 4F
333+  8ECB 3A EA 84     7 ld a,(CTRL_DESPLZ)
334+  8ECE FE FC        	cp $fc
335+  8ED0 20 1E        	jr nz,8F
336+  8ED2
337+  8ED2              ; ---------- ---------- ----------
338+  8ED2
339+  8ED2              4
340+  8ED2 CD A9 8F     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
341+  8ED5              ;	call Reinicio
342+  8ED5
343+  8ED5              ; ---------- ---------- ----------
344+  8ED5
345+  8ED5 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
346+  8ED7 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
347+  8ED8
348+  8ED8 2A F0 84     	ld hl,(Indice_Sprite_izq)
349+  8EDB 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
350+  8EDE
351+  8EDE CD F7 8E     	call DESPLZ_IZQ
352+  8EE1 C1           	pop bc
353+  8EE2 10 F3        	djnz 5B
354+  8EE4 2A E6 84     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
355+  8EE7 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
356+  8EE8 22 E6 84     	ld (Posicion_actual),hl
357+  8EEB CD F3 8F     	call Genera_coordenadas
358+  8EEE 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
359+  8EF0
360+  8EF0              ; ---------- ---------- ----------
361+  8EF0              ; Movemos, no hay recolocación.
362+  8EF0
363+  8EF0 2A E6 84     8 ld hl,(Posicion_actual)
364+  8EF3 CD F7 8E     	call DESPLZ_IZQ
365+  8EF6 C9           2 ret
366+  8EF7
367+  8EF7              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
368+  8EF7              ;
369+  8EF7              ;	22/9/22
370+  8EF7
371+  8EF7              DESPLZ_IZQ
372+  8EF7
373+  8EF7 CD 06 8F     	call Desplaza_izquierda
374+  8EFA CD 29 8F         call modifica_parametros_1er_DESPLZ
375+  8EFD CD 52 8F     	call Ciclo_completo_2
376+  8F00 21 0F 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
377+  8F03 CB BE        	res 7,(hl)
378+  8F05 C9           	ret
379+  8F06
380+  8F06              Desplaza_izquierda
381+  8F06
382+  8F06 3A F9 84     	ld a,(Vel_left)
383+  8F09 47           	ld b,a
384+  8F0A 2A F4 84     	ld hl,(Puntero_DESPLZ_izq)
385+  8F0D 23           1 inc hl
386+  8F0E 23           	inc hl
387+  8F0F 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
388+  8F11 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
389+  8F14 CD 90 86     	call Extrae_address
390+  8F17 22 E8 84     	ld (Puntero_objeto),hl
391+  8F1A
392+  8F1A              ; Modifica (Puntero_DESPLZ_der).
393+  8F1A
394+  8F1A 3A F9 84     	ld a,(Vel_left)
395+  8F1D 47           	ld b,a
396+  8F1E 2A F2 84     	ld hl,(Puntero_DESPLZ_der)
397+  8F21 2B           1 dec hl
398+  8F22 2B           	dec hl
399+  8F23 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
400+  8F25 22 F2 84     	ld (Puntero_DESPLZ_der),hl
401+  8F28
402+  8F28 C9           	ret
403+  8F29
404+  8F29              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
405+  8F29              ;
406+  8F29              ;	modifica_parametros_1er_DESPLZ
407+  8F29              ;
408+  8F29              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
409+  8F29              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
410+  8F29              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
411+  8F29
412+  8F29 3A EA 84     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
413+  8F2C A7           	and a
414+  8F2D 20 1F        	jr nz,1F
415+  8F2F D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
416+  8F31 32 EA 84         ld (CTRL_DESPLZ),a
417+  8F34
418+  8F34 21 E5 84     	ld hl,Columns
419+  8F37 34           	inc (hl)
420+  8F38 3A F8 84     	ld a,(Cuad_objeto)
421+  8F3B E6 01        	and 1
422+  8F3D 20 0F        	jr nz,1F
423+  8F3F 2A E6 84     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
424+  8F42 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
425+  8F43 22 E6 84     	ld (Posicion_actual),hl
426+  8F46 CD F3 8F     	call Genera_coordenadas
427+  8F49 CD 98 8F     	call Inc_CTRL_DESPLZ
428+  8F4C 18 03        	jr 2F
429+  8F4E CD 98 8F     1 call Inc_CTRL_DESPLZ
430+  8F51
431+  8F51 C9           2 ret
432+  8F52
433+  8F52              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
434+  8F52              ;
435+  8F52
436+  8F52 3A EA 84     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
437+  8F55 FE FF        	cp $ff
438+  8F57 28 02        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
439+  8F59 18 30        	jr 3f
440+  8F5B
441+  8F5B 21 E5 84     1 ld hl,Columns
442+  8F5E 35           	dec (hl)
443+  8F5F AF           	xor a
444+  8F60 32 EA 84     	ld (CTRL_DESPLZ),a;
445+  8F63 3A F8 84     	ld a,(Cuad_objeto)
446+  8F66 E6 01        	and 1
447+  8F68 28 0A        	jr z,2F
448+  8F6A 2A E6 84     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
449+  8F6D 2B           	dec hl
450+  8F6E 22 E6 84     	ld (Posicion_actual),hl
451+  8F71 CD F3 8F     	call Genera_coordenadas
452+  8F74
453+  8F74              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
454+  8F74
455+  8F74 2A F0 84     2 ld hl,(Indice_Sprite_izq)
456+  8F77 22 F4 84     	ld (Puntero_DESPLZ_izq),hl
457+  8F7A CD 90 86     	call Extrae_address
458+  8F7D 22 E8 84     	ld (Puntero_objeto),hl
459+  8F80
460+  8F80 2A EE 84     	ld hl,(Indice_Sprite_der)										; Cuando "Iniciamos el Sprite a Izquierdas",_
461+  8F83 CD 90 86     	call Extrae_address												; _situamos (Puntero_DESPLZ_der) en el último defw_
462+  8F86 2B           	dec hl 															; _del índice.
463+  8F87 2B           	dec hl
464+  8F88 22 F2 84     	ld (Puntero_DESPLZ_der),hl
465+  8F8B
466+  8F8B C9           3 ret
467+  8F8C
468+  8F8C              ; ---------- ---------- ---------- ---------- ---------- ----------
469+  8F8C              ;
470+  8F8C              ;	19/10/22
471+  8F8C              ;
472+  8F8C              ;	(cp 29) para un Amadeus de 3 Columns.
473+  8F8C              ;	(cp 30)   ""  ""    ""     2 Columns.
474+  8F8C
475+  8F8C 3A EB 84     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
476+  8F8F FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
477+  8F91 C9           	ret
478+  8F92
479+  8F92              ; ---------- ---------- ---------- ---------- ---------- ----------
480+  8F92              ;
481+  8F92              ;	19/10/22
482+  8F92              ;
483+  8F92              ;	(cp 2) para un Amadeus de 3 Columns.
484+  8F92              ;	(cp 1)   ""  ""    ""     2 Columns.
485+  8F92
486+  8F92 3A EB 84     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
487+  8F95 FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
488+  8F97 C9           	ret
489+  8F98
490+  8F98              ; ---------- ---------- ---------- ---------- ---------- ----------
491+  8F98              ;
492+  8F98              ;	24/7/22
493+  8F98              ;
494+  8F98              ;	Inc_CTRL_DESPLZ
495+  8F98              ;
496+  8F98              ;	Subrutina de [modifica_punteros].
497+  8F98              ;
498+  8F98              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
499+  8F98
500+  8F98 21 EA 84     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
501+  8F9B 3A FA 84     	ld a,(Vel_right)
502+  8F9E A7           	and a
503+  8F9F 28 06        	jr z,1F
504+  8FA1 47           	ld b,a
505+  8FA2 34           3 inc (hl)
506+  8FA3 10 FD        	djnz 3B
507+  8FA5 18 01        	jr 2F
508+  8FA7 34           1 inc (hl)
509+  8FA8 C9           2 ret
510+  8FA9
511+  8FA9              ; ---------- ---------- ---------- ---------- ---------- ----------
512+  8FA9
513+  8FA9 2A E6 84     Reaparece_derecha ld hl,(Posicion_actual)
514+  8FAC 01 1F 00     	ld bc,31
515+  8FAF A7           	and a
516+  8FB0 ED 4A        	adc hl,bc
517+  8FB2 22 E6 84     	ld (Posicion_actual),hl
518+  8FB5 21 0F 85     	ld hl,Ctrl_0														; $xxx1
519+  8FB8 CB C6        	set 0,(hl)
520+  8FBA C9           	ret
521+  8FBB
522+  8FBB              ; ---------- ---------- ---------- ---------- ---------- ----------
523+  8FBB
524+  8FBB 2A E6 84     Reaparece_izquierda ld hl,(Posicion_actual)
525+  8FBE 01 1F 00     	ld bc,31
526+  8FC1 A7           	and a
527+  8FC2 ED 42        	sbc hl,bc
528+  8FC4 22 E6 84     	ld (Posicion_actual),hl 											; $xx1x
529+  8FC7 21 0F 85     	ld hl,Ctrl_0
530+  8FCA CB CE        	set 1,(hl)
531+  8FCC C9           	ret
532+  8FCD
533+  8FCD              ; ---------- ---------- ---------- ---------- ---------- ----------
534+  8FCD
535+  8FCD 24           Reaparece_abajo inc h
536+  8FCE 01 E0 17     	ld bc,$17e0
537+  8FD1 A7           	and a
538+  8FD2 ED 4A        	adc hl,bc
539+  8FD4 22 E6 84     	ld (Posicion_actual),hl
540+  8FD7 21 0F 85     	ld hl,Ctrl_0
541+  8FDA CB D6        	set 2,(hl)
542+  8FDC C9           	ret
543+  8FDD
544+  8FDD              ; ---------- ---------- ---------- ---------- ---------- ----------
545+  8FDD
546+  8FDD 01 E0 17     Reaparece_arriba ld bc,$17e0
547+  8FE0 A7           	and a
548+  8FE1 ED 42        	sbc hl,bc
549+  8FE3 22 E6 84     	ld (Posicion_actual),hl
550+  8FE6 21 0F 85     	ld hl,Ctrl_0
551+  8FE9 CB DE        	set 3,(hl)
552+  8FEB C9           	ret
553+  8FEC
554+  8FEC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
555+  8FEC
556+  8FEC 2A F6 84     Reinicio ld hl,(Posicion_inicio)
557+  8FEF 22 E6 84     	ld (Posicion_actual),hl
558+  8FF2 C9           	ret
# file closed: Direcciones.asm
741   8FF3              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  8FF3              ;	12/12/22
  2+  8FF3              ;
  3+  8FF3              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  8FF3              ;	Fila superior "0", Columna izquierda "0".
  5+  8FF3              ;
  6+  8FF3              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  8FF3              ;
  8+  8FF3              ;	Modifica: A
  9+  8FF3
 10+  8FF3 C5           Genera_coordenadas push bc
 11+  8FF4 E5           	push hl
 12+  8FF5 2A E6 84     	ld hl,(Posicion_actual)
 13+  8FF8 7D           	ld a,l
 14+  8FF9 E6 1F        	and $1f
 15+  8FFB 32 EB 84     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  8FFE CD E6 8C     	call calcula_tercio
 17+  9001 47           	ld b,a
 18+  9002 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  9003 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  9005 7D           	ld a,l
 21+  9006 E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  9008 28 05        	jr z,2F
 23+  900A 0C           1 inc c
 24+  900B D6 20        	sub 32
 25+  900D 20 FB        	jr nz,1B
 26+  900F 0C           2 inc c
 27+  9010 04           	inc b
 28+  9011 05           	dec b
 29+  9012 28 04        	jr z,3F
 30+  9014 3E E0        	ld a,$e0
 31+  9016 10 F2        	djnz 1B
 32+  9018 79           3 ld a,c
 33+  9019 3D           	dec a
 34+  901A 32 EC 84     	ld (Coordenada_y),a
 35+  901D E1           	pop hl
 36+  901E C1           	pop bc
 37+  901F C9           	ret
# file closed: Genera_coordenadas.asm
742   9020              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9020
  2+  9020
  3+  9020              ;   11/8/22
  4+  9020              ;
  5+  9020              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9020              ;
  7+  9020              ;   Mov_obj.asm
  8+  9020              ;
  9+  9020              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9020              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9020              ;
 12+  9020              ;   Codificación:
 13+  9020              ;
 14+  9020              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9020
 16+  9020
 17+  9020
 18+  9020 02 10 00     Izquierda db 2,%00010000,0
 19+  9023 02 20 00     Derecha db 2,%00100000,0
 20+  9026 02 80 00     Abajo db 2,%10000000,0
 21+  9029 02 40 00     Arriba db 2,%01000000,0
 22+  902C
 23+  902C 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 24+  9030 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 25+  9034 03 24 84 00  Escaloncitos_derecha_abajo db 3,%00100100,%10000100,0
 26+  9038 03 14 84 00  Escaloncitos_izquierda_abajo db 3,%00010100,%10000100,0                ; El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 27+  903C 2B 44 60 42  Onda_senoidal db 43,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 27+  9040 60 42 60 40
 27+  9044 63
 28+  9045 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 28+  9049 22 A3 80 A0
 29+  904D 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 29+  9051 84 A0 83 A0
 30+  9055 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 30+  9059 80 A3 22 A0
 31+  905D 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 31+  9061 40 60 42 60
 32+  9065 42 60 44         db %01000010,%01100000,%01000100
 33+  9068 0B 2F 2F 2F  Derecha_e_izquierda db 11,%00101111,%00101111,%00101111,%00101111,%00101111,%00011111,%00011111,%00011111,%00011111,%00011111,0
 33+  906C 2F 2F 1F 1F
 33+  9070 1F 1F 1F 00
 34+  9074 09 1F 1F 1F  Izquierda_y_derecha db 9,%00011111,%00011111,%00011111,%00011111,%00101111,%00101111,%00101111,%00101111,0
 34+  9078 1F 2F 2F 2F
 34+  907C 2F 00
 35+  907E
 36+  907E
 37+  907E 74 90        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 38+  9080 68 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 39+  9082 20 90        Indice_mov_Izquierda defw Izquierda
 40+  9084 23 90        Indice_mov_Derecha defw Derecha
 41+  9086 26 90        Indice_mov_Abajo defw Abajo
 42+  9088 29 90        Indice_mov_Arriba defw Arriba
 43+  908A 30 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 44+  908C 34 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 45+  908E 2C 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 46+  9090 38 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 47+  9092 3C 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 48+  9094
 49+  9094 3A 15 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 50+  9097 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 51+  9098 28 02            jr z,1F
 52+  909A 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 53+  909C 3A 16 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 54+  909F C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 55+  90A1 32 16 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 56+  90A4              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 57+  90A4 2A 13 85         ld hl,(Puntero_mov)
 58+  90A7 7E               ld a,(hl)
 59+  90A8 32 15 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 60+  90AB 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 61+  90AC 22 13 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 62+  90AF
 63+  90AF 3A 17 85     Decoder ld a,(Repetimos_db)
 64+  90B2 A7               and a
 65+  90B3 20 0C            jr nz,12F
 66+  90B5 2A 13 85         ld hl,(Puntero_mov)
 67+  90B8 7E               ld a,(hl)
 68+  90B9 A7               and a
 69+  90BA 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 70+  90BC E6 0F             and $0f
 71+  90BE 32 17 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 72+  90C1              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 73+  90C1 2A 13 85     12 ld hl,(Puntero_mov)
 74+  90C4 CB 7E            bit 7,(hl)
 75+  90C6 28 03            jr z,2F
 76+  90C8 CD 32 8D         call Mov_down
 77+  90CB 2A 13 85     2 ld hl, (Puntero_mov)
 78+  90CE CB 76            bit 6,(hl)
 79+  90D0 28 03            jr z,3F
 80+  90D2 CD 60 8D         call Mov_up
 81+  90D5 2A 13 85     3 ld hl, (Puntero_mov)
 82+  90D8 CB 6E            bit 5,(hl)
 83+  90DA 28 03            jr z,4F
 84+  90DC CD 8E 8D         call Mov_right
 85+  90DF 2A 13 85     4 ld hl, (Puntero_mov)
 86+  90E2 CB 66            bit 4,(hl)
 87+  90E4 28 03            jr z,5F
 88+  90E6 CD 89 8E         call Mov_left
 89+  90E9
 90+  90E9              ; ---------- --------- --------- ---------- ----------
 91+  90E9
 92+  90E9 3A 17 85     5 ld a,(Repetimos_db)
 93+  90EC A7               and a
 94+  90ED 28 07            jr z,6F
 95+  90EF 3D               dec a
 96+  90F0 32 17 85         ld (Repetimos_db),a
 97+  90F3 28 01            jr z,6f
 98+  90F5 C9           11 ret
 99+  90F6 21 15 85     6 ld hl,Contador_db_mov
100+  90F9 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
101+  90FA 2A 13 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
102+  90FD 23               inc hl
103+  90FE 22 13 85         ld (Puntero_mov),hl
104+  9101 18 F2            jr 11B
105+  9103 2A 11 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
106+  9106 3A 16 85         ld a,(Incrementa_puntero)
107+  9109 47               ld b,a
108+  910A 23           8 inc hl
109+  910B 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
110+  910D 5E               ld e,(hl)
111+  910E 23               inc hl
112+  910F 56               ld d,(hl)
113+  9110 EB               ex de,hl
114+  9111 22 13 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
115+  9114 18 DF            jr 11B
116+  9116
117+  9116              ; ---------- --------- --------- ---------- ----------
118+  9116              ;
119+  9116              ;   11/8/22
120+  9116              ;
121+  9116              ;   Prepara_Puntero_mov
122+  9116
123+  9116 E5           Prepara_Puntero_mov push hl
124+  9117 D5               push de
125+  9118 2A 11 85         ld hl,(Puntero_indice_mov)
126+  911B 5E               ld e,(hl)
127+  911C 23               inc hl
128+  911D 56               ld d,(hl)
129+  911E EB               ex de,hl
130+  911F 22 13 85         ld (Puntero_mov),hl
131+  9122 D1               pop de
132+  9123 E1               pop hl
133+  9124 C9               ret
134+  9125
135+  9125              ; ---------- --------- --------- ---------- ----------
136+  9125              ;
137+  9125              ;   11/8/22
138+  9125              ;
139+  9125              ;   Reinicia_el_movimiento
140+  9125
141+  9125 CD 16 91     Reinicia_el_movimiento call Prepara_Puntero_mov
142+  9128 AF               xor a
143+  9129 32 15 85         ld (Contador_db_mov),a
144+  912C 32 16 85         ld (Incrementa_puntero),a
145+  912F C3 94 90         jp Movimiento
146+  9132
147+  9132              ; ---------- --------- --------- ---------- ----------
148+  9132
149+  9132
150+  9132
151+  9132
152+  9132
153+  9132
154+  9132
155+  9132
156+  9132
157+  9132
158+  9132
159+  9132
160+  9132
161+  9132
162+  9132
163+  9132
164+  9132
165+  9132
# file closed: Patrones_de_mov.asm
743   9132              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9132              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9132              ;
  3+  9132              ;	3/1/23
  4+  9132              ;
  5+  9132              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9132
  7+  9132              ;	ADC HL,SP	LD (addr),SP
  8+  9132              ;	ADD HL,SP	LD SP,(addr)
  9+  9132              ;	ADD IX,SP	LD SP,nn
 10+  9132              ; 	ADD IY,SP	LD SP,HL
 11+  9132              ;				LD SP,IX
 12+  9132              ;	DEC SP		LD SP,IY
 13+  9132
 14+  9132              ;	EX (SP),HL
 15+  9132              ;	EX (SP),IX
 16+  9132              ;	EX (SP),IY
 17+  9132
 18+  9132              ;	INC SP
 19+  9132
 20+  9132
 21+  9132                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 24 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 28 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 28 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 24 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
744   7FC0
745   7FC0              	SAVESNA "Pruebas.sna", START
746   7FC0
747   7FC0
748   7FC0
# file closed: Banco_de_pruebas.asm
