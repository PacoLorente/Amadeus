# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 99 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 20 83        Indice_Amadeus_der defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 40 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 70 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C A0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 20 83        Indice_Amadeus_izq defw Amadeus
151+  8312 00 00        	defw 0
152+  8314 A0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
153+  8316 00 00        	defw 0
154+  8318 70 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
155+  831A 00 00        	defw 0
156+  831C 40 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
157+  831E 00 00        	defw 0	 								; (Fín de índice).
158+  8320
159+  8320 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
159+  8324 26 64 24 24
160+  8328 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
160+  832C 6F F6 67 E6
161+  8330 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
161+  8334 F7 EF FF FF
162+  8338 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
162+  833C 8B D1 71 8E
163+  8340
164+  8340 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
164+  8344 F1 00 09 99
165+  8348 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
165+  834C 0B 0D 00 1B
166+  8350 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
166+  8354 80 19 F9 80
167+  8358 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
167+  835C F3 C0 3D FB
168+  8360 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
168+  8364 3E F7 C0 3E
169+  8368 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
169+  836C 40 1C 63 80
170+  8370
171+  8370 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
171+  8374 3C 40 02 66
172+  8378 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
172+  837C 02 C3 40 06
173+  8380 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
173+  8384 60 06 7E 60
174+  8388 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
174+  838C 3C F0 0F 7E
175+  8390 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
175+  8394 0F BD F0 0F
176+  8398 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
176+  839C 10 07 18 E0
177+  83A0
178+  83A0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
178+  83A4 8F 10 00 99
179+  83A8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
179+  83AC 00 B0 D0 01
180+  83B0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
180+  83B4 D8 01 9F 98
181+  83B8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
181+  83BC CF 3C 03 DF
182+  83C0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
182+  83C4 03 EF 7C 03
183+  83C8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
183+  83CC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83D0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83D0
  2+  83D0              ; Base de datos de entidades e Índice.
  3+  83D0              ;
  4+  83D0              ; 31/01/23
  5+  83D0
  6+  83D0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83D0
  8+  83D0 16 84        	defw Entidad_1
  9+  83D2 50 84        	defw Entidad_2
 10+  83D4 8A 84        	defw Entidad_3
 11+  83D6 C4 84        	defw Entidad_4
 12+  83D8              ;	...
 13+  83D8              ;	...
 14+  83D8              ;	+ entidades ...
 15+  83D8
 16+  83D8 00 00        	defw 0
 17+  83DA 00 00        	defw 0
 18+  83DC
 19+  83DC              ; ---------- ---------- ---------- ---------- ----------
 20+  83DC
 21+  83DC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83DE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83E0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83E2 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 25+  83E5
 26+  83E5 05           	db %00000101									; (Attr).
 27+  83E6
 28+  83E6 00 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 29+  83E8 10 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 30+  83EA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83EC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83EE
 33+  83EE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83F0 04           	db 4 											; (Cuad_objeto).
 35+  83F1
 36+  83F1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83F5
 38+  83F5 00 00        	db 0,0											; Variables_de_borrado
 39+  83F7 00 00        	defw 0											;	" " " " " " "
 40+  83F9 00 00        	defw 0											;	" " " " " " "
 41+  83FB 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 42+  83FF
 43+  83FF 00 00        	db 0,0											; Variables_de_pintado
 44+  8401 00 00        	defw 0											;	" " " " " " "
 45+  8403 00 00        	defw 0											;	" " " " " " "
 46+  8405 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 47+  8409
 48+  8409 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  840B
 50+  840B 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  840F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8412
 53+  8412 00           	db 0 											; (Columnas).
 54+  8413 00 00        	defw 0											; (Limite_horizontal).
 55+  8415 00           	db 0											; (Limite_vertical).
 56+  8416
 57+  8416              ; ---------- ---------- ---------- ---------- ----------
 58+  8416
 59+  8416 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8418 00 00        	defw 0											; (Posicion_actual).
 61+  841A 00 00        	defw 0 											; (Puntero_objeto).
 62+  841C 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 63+  841F
 64+  841F 00           	db %00000000 									; (Attr).
 65+  8420
 66+  8420 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8422 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8424 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8426 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8428
 71+  8428 00 00        	defw 0											; (Posicion_inicio).
 72+  842A 00           	db 0											; (Cuad_objeto).
 73+  842B
 74+  842B 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  842F
 76+  842F 00 00        	db 0,0										    ; Variables_de_borrado
 77+  8431 00 00        	defw 0											;	" " " " " " "
 78+  8433 00 00        	defw 0											;	" " " " " " "
 79+  8435 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 80+  8439
 81+  8439 00 00        	db 0,0											; Variables_de_pintado
 82+  843B 00 00        	defw 0											;	" " " " " " "
 83+  843D 00 00        	defw 0											;	" " " " " " "
 84+  843F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 85+  8443
 86+  8443 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8445
 88+  8445 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8449 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  844C
 91+  844C 00           	db 0 											; (Columnas).
 92+  844D 00 00        	defw 0											; (Limite_horizontal).
 93+  844F 00           	db 0											; (Limite_vertical).
 94+  8450
 95+  8450              ; ---------- ---------- ---------- ---------- ----------
 96+  8450
 97+  8450 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  8452 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8454 00 00        	defw 0											; (Puntero_objeto).
100+  8456 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
101+  8459
102+  8459 02           	db %00000010									; (Attr).
103+  845A
104+  845A 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  845C 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  845E 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  8460 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  8462
109+  8462 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8464 02           	db 2											; (Cuad_objeto).
111+  8465
112+  8465 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8469
114+  8469 00 00        	db 0,0											; Variables_de_borrado
115+  846B 00 00        	defw 0										 	;	" " " " " " "
116+  846D 00 00        	defw 0											;	" " " " " " "
117+  846F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
118+  8473
119+  8473 00 00        	db 0,0											; Variables_de_pintado
120+  8475 00 00        	defw 0											;	" " " " " " "
121+  8477 00 00        	defw 0											;	" " " " " " "
122+  8479 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
123+  847D
124+  847D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  847F
126+  847F ED 90 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  8483 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8486
129+  8486 00           	db 0 											; (Columnas).
130+  8487 00 00        	defw 0											; (Limite_horizontal).
131+  8489 00           	db 0											; (Limite_vertical).
132+  848A
133+  848A              ; ---------- ---------- ---------- ---------- ----------
134+  848A
135+  848A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  848C 00 00        	defw 0                                          ; (Posicion_actual).
137+  848E 00 00        	defw 0											; (Puntero_objeto).
138+  8490 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
139+  8493
140+  8493 04           	db %00000100									; (Attr).
141+  8494
142+  8494 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8496 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8498
145+  8498 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  849A 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  849C
148+  849C A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  849E 01           	db 1											; (Cuad_objeto).
150+  849F
151+  849F 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  84A3
153+  84A3 00 00        	db 0,0											; Variables_de_borrado
154+  84A5 00 00        	defw 0										 	;	" " " " " " "
155+  84A7 00 00        	defw 0											;	" " " " " " "
156+  84A9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
157+  84AD
158+  84AD 00 00        	db 0,0											; Variables_de_pintado
159+  84AF 00 00        	defw 0											;	" " " " " " "
160+  84B1 00 00        	defw 0											;	" " " " " " "
161+  84B3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
162+  84B7
163+  84B7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84B9
165+  84B9 EF 90 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84BD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84C0
168+  84C0 00           	db 0 											; (Columnas).
169+  84C1 00 00        	defw 0											; (Limite_horizontal).
170+  84C3 00           	db 0											; (Limite_vertical).
171+  84C4
172+  84C4              ; ---------- ---------- ---------- ---------- ----------
173+  84C4
174+  84C4 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84C6 00 00        	defw 0                                          ; (Posicion_actual).
176+  84C8 00 00        	defw 0 											; (Puntero_objeto).
177+  84CA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
178+  84CD
179+  84CD 01           	db %00000001									; (Attr).
180+  84CE
181+  84CE 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84D0 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84D2
184+  84D2 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84D4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84D6
187+  84D6 BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84D8 00           	db 0											; (Cuad_objeto).
189+  84D9
190+  84D9 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84DD
192+  84DD 00 00        	db 0,0											; Variables_de_borrado
193+  84DF 00 00        	defw 0										 	;	" " " " " " "
194+  84E1 00 00        	defw 0											;	" " " " " " "
195+  84E3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
196+  84E7
197+  84E7 00 00        	db 0,0											; Variables_de_pintado
198+  84E9 00 00        	defw 0											;	" " " " " " "
199+  84EB 00 00        	defw 0											;	" " " " " " "
200+  84ED 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
201+  84F1
202+  84F1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84F3
204+  84F3 DF 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84F7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84FA
207+  84FA 00           	db 0 											; (Columnas).
208+  84FB 00 00        	defw 0											; (Limite_horizontal).
209+  84FD 00           	db 0											; (Limite_vertical).
210+  84FE
# file closed: Entidades.asm
 21   84FE
 22   84FE              ; ******************************************************************************************************************************************************************************************
 23   84FE              ; Constantes.
 24   84FE              ; ******************************************************************************************************************************************************************************************
 25   84FE              ;
 26   84FE              ; 8/11/22
 27   84FE              ;
 28   84FE              ; Constantes generales.
 29   84FE              ;
 30   84FE
 31   84FE              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84FE              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84FE              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84FE              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84FE              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84FE
 37   84FE              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84FE              ;                               				        ; De momento situamos este almacén en $7000.
 39   84FE
 40   84FE
 41   84FE              ; ******************************************************************************************************************************************************************************************
 42   84FE              ; Variables.
 43   84FE              ; ******************************************************************************************************************************************************************************************
 44   84FE              ;
 45   84FE              ; 10/11/22
 46   84FE              ;
 47   84FE              ; Variables de DRAW. (Motor principal).
 48   84FE              ;
 49   84FE              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   84FE
 51   84FE 02           Filas db 2												; Filas. [DRAW]
 52   84FF 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8500 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8502 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8504 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8505 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   8506
 58   8506              ; ---------- ---------- ---------- ---------;      ;---------
 59   8506
 60   8506 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   8507              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   8507              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   8507 04           Attr db %00000100										; Atributos de la entidad:
 64   8508
 65   8508              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   8508              ;
 67   8508              ;	COLORES: 0 ..... NEGRO
 68   8508              ;    		 1 ..... AZUL
 69   8508              ; 			 2 ..... ROJO
 70   8508              ;			 3 ..... MAGENTA
 71   8508              ; 			 4 ..... VERDE
 72   8508              ; 			 5 ..... CIAN
 73   8508              ;			 6 ..... AMARILLO
 74   8508              ; 			 7 ..... BLANCO
 75   8508
 76   8508 80 81        Indice_Sprite_der defw Indice_Badsat_der
 77   850A 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   850C 00 00        Puntero_DESPLZ_der defw 0
 79   850E 00 00        Puntero_DESPLZ_izq defw 0
 80   8510
 81   8510 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8512 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8513
 84   8513              ; Variables de objeto. (Características).
 85   8513
 86   8513 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8514 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8515 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   8516 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   8517
 91   8517 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   8519 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   851B 00 00        	defw 0
 94   851D 00 00 00 00  	db 0,0,0,0
 95   8521
 96   8521 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   8523 00 00        	defw 0
 98   8525 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   8527 00 00 00 00  	db 0,0,0,0
100   852B
101   852B              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   852B
103   852B 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   852C              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   852C              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   852C              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   852C              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   852C              ;
109   852C              ; 														DESCRIPCIÖN:
110   852C              ;
111   852C              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   852C              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   852C              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   852C              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   852C              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   852C              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   852C              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   852C              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   852C              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   852C              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   852C              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   852C              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   852C              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   852C              ;
125   852C              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   852C              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   852C              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   852C
129   852C 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   852D
131   852D              ; Movimiento.
132   852D
133   852D DB 90        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   852F 00 00        Puntero_mov defw 0
135   8531 00           Contador_db_mov db 0
136   8532 00           Incrementa_puntero db 0
137   8533 00           Repetimos_db db 0
138   8534
139   8534              ; Variables de funcionamiento. [DRAW].
140   8534
141   8534 00           Columnas db 0
142   8535 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8537              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8537 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8538
146   8538              ; 59 Bytes por entidad.
147   8538              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8538              ;					         		---------;      ;---------
149   8538
150   8538
151   8538              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8538              ; Gestión de ENTIDADES.
153   8538
154   8538 00 00        Puntero_store_entidades defw 0
155   853A 00 00        Puntero_restore_entidades defw 0
156   853C 00 00        Indice_restore defw 0
157   853E 02           Numero_de_entidades db 2								; Nº de objetos en pantalla, (contando con Amadeus).
158   853F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8540              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8540              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8540              ;														; _ (Numero_de_malotes)="0".
162   8540 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8542              ;														; _variable para almacenar lo posición del puntero_
164   8542              ; 														; _de pila, SP.
165   8542 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8544              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8544 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8546              ;														; _el snapshot de los registros de la siguiente entidad.
169   8546              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8546
171   8546              ; Gestión de FRAMES.
172   8546
173   8546 00           Switch db 0
174   8547
175   8547              ; Variables de Raster y localización en pantalla.
176   8547
177   8547 00 FF        Temp_Raster defw $ff00
178   8549
179   8549              ; Rutina principal *************************************************************************************************************************************************************************
180   8549              ;
181   8549              ;	14/11/22
182   8549
183   8549 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   854C
185   854C 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   854E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8550 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8552 F3           	DI
189   8553
190   8553 3E 01        	ld a,1
191   8555 D3 FE        	out ($fe),a
192   8557
193   8557 3E 07        	ld a,%00000111
194   8559 CD 32 8D     	call Cls
195   855C
196   855C              ;	call Pinta_FILAS
197   855C
198   855C CD 5F 87     	call Pulsa_ENTER
199   855F
200   855F 21 3E 85     	ld hl,Numero_de_entidades
201   8562 46           	ld b,(hl)
202   8563 04           	inc b
203   8564 05           	dec b
204   8565 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8567
206   8567              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8567              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8567              ;	Pintamos el resto de entidades:
209   8567
210   8567 CD 7F 86     	call Inicia_punteros_de_entidades
211   856A
212   856A              ;	INICIA ENTIDADES!!!!!
213   856A
214   856A C5           1 push bc  												; Guardo el contador de entidades.
215   856B CD B2 86      	call Inicia_Puntero_objeto
216   856E CD B6 87     	call Draw
217   8571 CD A0 7F     	call Guarda_foto_registros
218   8574 CD FA 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8577 C1           	pop bc
220   8578 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   857A
222   857A              ; 	INICIA AMADEUS!!!!!
223   857A
224   857A CD 3B 87     3 call Restore_Amadeus
225   857D CD B2 86     	call Inicia_Puntero_objeto
226   8580 CD B6 87     	call Draw
227   8583 CD A0 7F     	call Guarda_foto_registros
228   8586 CD 4D 87     	call Store_Amadeus
229   8589
230   8589              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   8589
232   8589 CD 7F 86     	call Inicia_punteros_de_entidades
233   858C CD 29 87     	call Restore_Primera_entidad
234   858F
235   858F 3A 3E 85     	ld a,(Numero_de_entidades)
236   8592 3C           	inc a
237   8593 32 3F 85     	ld (Numero_de_malotes),a
238   8596
239   8596 FB           2 ei
240   8597 18 FD        	jr 2B
241   8599
242   8599              ; -----------------------------------------------------------------------------------
243   8599
244   8599              Frame
245   8599
246   8599              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   8599              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   8599
249   8599 3E 07            ld a,7
250   859B D3 FE            out ($fe),a
251   859D CD BA 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   85A0 3E 01            ld a,1
253   85A2 D3 FE            out ($fe),a
254   85A4
255   85A4              ;	jr $
256   85A4
257   85A4              ; ----------------------------------------------------------------------
258   85A4
259   85A4 21 00 70     	ld hl,Album_de_fotos
260   85A7 22 44 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
261   85AA              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
262   85AA 3A 3E 85         ld a,(Numero_de_entidades)
263   85AD 47               ld b,a
264   85AE A7           	and a
265   85AF 28 1D        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
266   85B1
267   85B1 C5           2 push bc
268   85B2 CD F8 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
269   85B5 3A 2B 85     	ld a,(Ctrl_0)
270   85B8 CB 67        	bit 4,a
271   85BA 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
272   85BC CD 46 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
273   85BF 21 2B 85     1 ld hl,Ctrl_0
274   85C2 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
275   85C4 AF           	xor a
276   85C5 32 2C 85     	ld (Obj_dibujado),a
277   85C8 CD FA 86     	call Store_Restore_entidades
278   85CB C1           	pop bc
279   85CC 10 E3        	djnz 2B
280   85CE
281   85CE CD 3B 87     4 call Restore_Amadeus
282   85D1 CD 17 86     	call Mov_Amadeus
283   85D4 3A 2B 85     	ld a,(Ctrl_0)
284   85D7 CB 67        	bit 4,a
285   85D9 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
286   85DB CD 46 86     	call Guarda_foto_entidad_a_pintar
287   85DE
288   85DE 21 2B 85     3 ld hl,Ctrl_0
289   85E1 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
290   85E3 AF           	xor a
291   85E4 32 2C 85     	ld (Obj_dibujado),a
292   85E7 CD 4D 87     	call Store_Amadeus
293   85EA
294   85EA              ; -----
295   85EA
296   85EA CD 7F 86     	call Inicia_punteros_de_entidades
297   85ED CD 29 87     	call Restore_Primera_entidad
298   85F0 CD 95 86     	call Calcula_numero_de_malotes
299   85F3
300   85F3 3E 00        	ld a,0
301   85F5 D3 FE        	out ($fe),a
302   85F7 C9           	ret
303   85F8
304   85F8              ; --------------------------------------------------------------------------------------------------------------
305   85F8              ;
306   85F8              ;	29/1/23
307   85F8
308   85F8              Mov_obj
309   85F8
310   85F8              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
311   85F8
312   85F8 AF           	xor a
313   85F9 32 2C 85     	ld (Obj_dibujado),a
314   85FC CD 50 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
315   85FF              ;														; Obj_dibujado="0".
316   85FF              ; Movemos Entidades malignas.
317   85FF
318   85FF CD F1 90     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
319   8602 3A 2B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
320   8605 CB 67        	bit 4,a
321   8607 C8           	ret z
322   8608
323   8608              ; ---------
324   8608
325   8608 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
326   860A 32 2C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
327   860D CD 50 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
328   8610 CD 67 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
329   8613 CD 36 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
330   8616 C9           	ret													; _de la misma.
331   8617
332   8617              ; --------------------------------------------------------------------------------------------------------------
333   8617              ;
334   8617              ;	29/1/23
335   8617
336   8617              Mov_Amadeus
337   8617
338   8617 AF           	xor a
339   8618 32 2C 85     	ld (Obj_dibujado),a
340   861B CD 50 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
341   861E              ;														; Obj_dibujado="0".
342   861E              ; Movemos Amadeus.
343   861E
344   861E CD 73 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
345   8621 3A 2B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
346   8624 CB 67        	bit 4,a
347   8626 C8           	ret z
348   8627
349   8627              ; ---------
350   8627
351   8627 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
352   8629 32 2C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
353   862C CD 50 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
354   862F CD 67 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
355   8632 CD 36 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
356   8635 C9           	ret													; _de la nave.
357   8636
358   8636              ; --------------------------------------------------------------------------------------------------------------
359   8636              ;
360   8636              ;	31/01/23
361   8636              ;
362   8636              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
363   8636
364   8636              Guarda_foto_entidad_a_borrar
365   8636
366   8636 CD 90 8A     	call Prepara_draw
367   8639 CD CA 89     	call calcula_CColumnass
368   863C CD 01 8A     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
369   863F CD 56 8A     	call Define_rutina_de_impresion
370   8642 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
371   8645 C9           	ret
372   8646
373   8646              ; --------------------------------------------------------------------------------------------------------------
374   8646              ;
375   8646              ;	31/01/23
376   8646              ;
377   8646              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
378   8646              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
379   8646
380   8646              Guarda_foto_entidad_a_pintar
381   8646
382   8646 CD 73 86     	call Repone_pintar
383   8649 CD B6 87     	call Draw
384   864C CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
385   864F C9           	ret
386   8650
387   8650              ; --------------------------------------------------------------------------------------------------------------
388   8650              ;
389   8650              ;
390   8650
391   8650 21 FE 84     Prepara_var_pintado_borrado	ld hl,Filas
392   8653 3A 2C 85     	ld a,(Obj_dibujado)
393   8656 A7           	and a
394   8657 28 05        	jr z,1F
395   8659 11 21 85     	ld de,Variables_de_pintado
396   865C 18 03        	jr 2F
397   865E 11 17 85     1 ld de,Variables_de_borrado
398   8661 01 08 00     2 ld bc,8
399   8664 ED B0        	ldir
400   8666 C9           	ret
401   8667
402   8667              ; --------------------------------------------------------------------------------------------------------------
403   8667
404   8667 21 17 85     Repone_borrar ld hl,Variables_de_borrado
405   866A 11 FE 84     	ld de,Filas
406   866D 01 08 00     	ld bc,8
407   8670 ED B0        	ldir
408   8672 C9           	ret
409   8673
410   8673 21 21 85     Repone_pintar ld hl,Variables_de_pintado
411   8676 11 FE 84     	ld de,Filas
412   8679 01 08 00     	ld bc,8
413   867C ED B0        	ldir
414   867E C9           	ret
415   867F
416   867F              ; *************************************************************************************************************************************************************
417   867F              ;
418   867F              ; 8/1/23
419   867F              ;
420   867F              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
421   867F              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
422   867F              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
423   867F
424   867F              ; Destruye HL y DE !!!!!
425   867F
426   867F              Inicia_punteros_de_entidades
427   867F
428   867F 21 D0 83     	ld hl,Indice_de_entidades
429   8682 CD AC 86         call Extrae_address
430   8685 22 38 85         ld (Puntero_store_entidades),hl
431   8688 21 D2 83     	ld hl,Indice_de_entidades+2
432   868B 22 3C 85     	ld (Indice_restore),hl
433   868E CD AC 86     	call Extrae_address
434   8691 22 3A 85     	ld (Puntero_restore_entidades),hl
435   8694 C9               ret
436   8695
437   8695              ; -------------------------------------------------------------------------------------------------------------
438   8695              ;
439   8695              ; 30/1/23
440   8695              ;
441   8695
442   8695 2A 44 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
443   8698 7D           	ld a,l
444   8699 A7           	and a
445   869A 28 0C        	jr z,3F
446   869C AF           	xor a
447   869D 67           	ld h,a
448   869E 7D           	ld a,l
449   869F D6 06        1 sub 6
450   86A1 28 03        	jr z,2F
451   86A3 24           	inc h
452   86A4 18 F9        	jr 1B
453   86A6 24           2 inc h
454   86A7 7C           	ld a,h
455   86A8 32 3F 85     3 ld (Numero_de_malotes),a
456   86AB C9           	ret
457   86AC
458   86AC              ; *************************************************************************************************************************************************************
459   86AC              ;
460   86AC              ; 20/10/22
461   86AC              ;
462   86AC              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
463   86AC              ;
464   86AC              ; Destruye el puntero y DE !!!!!
465   86AC
466   86AC 5E           Extrae_address ld e,(hl)
467   86AD 23           	inc hl
468   86AE 56           	ld d,(hl)
469   86AF 2B           	dec hl
470   86B0 EB           	ex de,hl
471   86B1 C9           	ret
472   86B2
473   86B2              ; *************************************************************************************************************************************************************
474   86B2              ;
475   86B2              ;	7/2/23
476   86B2              ;
477   86B2              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
478   86B2              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
479   86B2              ;
480   86B2              ;   Destruye HL y BC !!!!!,
481   86B2              ;
482   86B2              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
483   86B2              ;					"0" ..... Izquierda.
484   86B2
485   86B2              Inicia_Puntero_objeto
486   86B2
487   86B2 3A 12 85     	ld a,(Cuad_objeto)
488   86B5 E6 01        	and 1
489   86B7 F5           	push af
490   86B8 CC D6 86     	call z,Inicia_puntero_objeto_izq
491   86BB F1           	pop af
492   86BC 28 2B        	jr z,1F
493   86BE CD C3 86     	call Inicia_puntero_objeto_der
494   86C1 18 26        	jr 1F
495   86C3
496   86C3              ; Arrancamos desde la parte izquierda de la pantalla.
497   86C3              ; Iniciamos (Indice_Sprite_der).
498   86C3
499   86C3 2A 08 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
500   86C6 22 0C 85     	ld (Puntero_DESPLZ_der),hl
501   86C9 CD AC 86     	call Extrae_address
502   86CC 22 02 85     	ld (Puntero_objeto),hl
503   86CF
504   86CF 2A 0A 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
505   86D2              ;	call Extrae_address
506   86D2 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
507   86D5 C9           	ret
508   86D6
509   86D6              ; Arrancamos desde la parte derecha de la pantalla.
510   86D6              ; Iniciamos (Indice_Sprite_izq).
511   86D6
512   86D6 2A 0A 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
513   86D9 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
514   86DC CD AC 86     	call Extrae_address
515   86DF 22 02 85     	ld (Puntero_objeto),hl
516   86E2
517   86E2 2A 08 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
518   86E5              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
519   86E5 22 0C 85     	ld (Puntero_DESPLZ_der),hl
520   86E8 C9           	ret
521   86E9
522   86E9              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
523   86E9
524   86E9 21 20 83     1 ld hl,Amadeus
525   86EC ED 4B 02 85  	ld bc,(Puntero_objeto)
526   86F0 B7 ED 42     	sub hl,bc
527   86F3 C0           	ret nz
528   86F4 21 2B 85     	ld hl,Ctrl_0
529   86F7 CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
530   86F9 C9           	ret 												; _de nuestra nave en los extremos.
531   86FA
532   86FA              ; *************************************************************************************************************************************************************
533   86FA              ;
534   86FA              ;	8/1/23
535   86FA              ;
536   86FA              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
537   86FA              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
538   86FA
539   86FA              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
540   86FA              ;	_de la 2ª y 3ª entidad respectivamente.
541   86FA
542   86FA
543   86FA
544   86FA              Store_Restore_entidades
545   86FA
546   86FA E5           	push hl
547   86FB D5           	push de
548   86FC C5            	push bc
549   86FD
550   86FD              ;	STORE !!!!!
551   86FD              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
552   86FD
553   86FD 21 FE 84     	ld hl,Filas
554   8700 ED 5B 38 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
555   8704 01 3A 00     	ld bc,58
556   8707 ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
557   8709
558   8709              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
559   8709
560   8709 2A 3A 85     	ld hl,(Puntero_restore_entidades)
561   870C 22 38 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
562   870F 11 FE 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
563   8712 01 3A 00     	ld bc,58
564   8715 ED B0        	ldir
565   8717
566   8717              ;	Incrementa RESTORE !!!!!
567   8717
568   8717 2A 3C 85         ld hl,(Indice_restore)
569   871A 23           	inc hl
570   871B 23           	inc hl
571   871C 22 3C 85     	ld (Indice_restore),hl
572   871F CD AC 86         call Extrae_address
573   8722 22 3A 85         ld (Puntero_restore_entidades),hl
574   8725 C1           	pop bc
575   8726 D1           	pop de
576   8727 E1           	pop hl
577   8728 C9           	ret
578   8729
579   8729              ; **************************************************************************************************
580   8729              ;
581   8729              ;	29/10/22
582   8729              ;
583   8729              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
584   8729
585   8729 E5           Restore_Primera_entidad push hl
586   872A D5           	push de
587   872B C5            	push bc
588   872C 2A 38 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
589   872F 11 FE 84     	ld de,Filas
590   8732 01 3A 00     	ld bc,58
591   8735 ED B0        	ldir
592   8737 C1           	pop bc
593   8738 D1           	pop de
594   8739 E1           	pop hl
595   873A C9           	ret
596   873B
597   873B              ; **************************************************************************************************
598   873B              ;
599   873B              ;	25/01/23
600   873B              ;
601   873B              ;	Restore_Amadeus
602   873B              ;
603   873B              ;	Cargamos en DRAW los parámetros de Amadeus.
604   873B              ;
605   873B
606   873B E5           Restore_Amadeus	push hl
607   873C D5           	push de
608   873D C5            	push bc
609   873E 21 DC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
610   8741 11 FE 84     	ld de,Filas
611   8744 01 3A 00     	ld bc,58
612   8747 ED B0        	ldir
613   8749 C1           	pop bc
614   874A D1           	pop de
615   874B E1           	pop hl
616   874C C9           	ret
617   874D
618   874D              ; *************************************************************************************************************************************************************
619   874D              ;
620   874D              ;	29/01/23
621   874D              ;
622   874D              ;	Store_Amadeus
623   874D              ;
624   874D              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
625   874D              ;
626   874D
627   874D E5           Store_Amadeus push hl
628   874E D5           	push de
629   874F C5            	push bc
630   8750 21 FE 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
631   8753 11 DC 83     	ld de,Amadeus_db
632   8756 01 3A 00     	ld bc,58
633   8759 ED B0        	ldir
634   875B C1           	pop bc
635   875C D1           	pop de
636   875D E1           	pop hl
637   875E C9           	ret
638   875F
639   875F              ; **************************************************************************************************
640   875F
641   875F              ; Teclado.
642   875F
643   875F 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
644   8761 DB FE        	in a,($fe)
645   8763 E6 01        	and $01
646   8765 28 02        	jr z,1f
647   8767 18 F6        	jr Pulsa_ENTER
648   8769 C9           1 ret
649   876A
650   876A              ; **************************************************************************************************
651   876A              ;
652   876A              ; Temporización.
653   876A
654   876A              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
655   876A              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
656   876A              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
657   876A              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
658   876A
659   876A              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
660   876A              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
661   876A              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
662   876A
663   876A              ; A partir de $4f61 no hace falta DELAY.
664   876A
665   876A              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
666   876A
667   876A 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
668   876D 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
669   876E 78           	LD A,B
670   876F A7           	AND A
671   8770 20 FB        	JR NZ,wait
672   8772 C9           	RET
673   8773
674   8773              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
675   8773              ;
676   8773              ;	21/4/22
677   8773
678   8773              Movimiento_Amadeus
679   8773
680   8773 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
681   8775 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
682   8777 E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
683   8779 CC C0 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
684   877C 3E F7        	ld a,$f7
685   877E DB FE        	in a,($fe)
686   8780 E6 01        	and $01
687   8782 C8           	ret z
688   8783 3E F7        	ld a,$f7
689   8785 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
690   8787 E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
691   8789 CC A2 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
692   878C C9               ret
693   878D
694   878D              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
695   878D
696   878D              ; Pinta indicadores de FILAS. ------------------------------------------------------
697   878D
698   878D 21 10 40     Pinta_FILAS ld hl,$4010
699   8790              ;	ld b,9
700   8790              ;2 push hl
701   8790              ;	push bc
702   8790 06 BF        	ld b,$bf
703   8792 36 80        1 ld (hl),%10000000
704   8794 CD 9C 8A     	call NextScan
705   8797 10 F9        	djnz 1B
706   8799              ;	pop bc
707   8799              ;	pop hl
708   8799              ;	inc l
709   8799              ;	djnz 2B
710   8799 06 03        	ld b,3
711   879B 21 00 47         ld hl,$4700
712   879E CD A4 87     3 call Bucle_1
713   87A1 10 FB            djnz 3B
714   87A3 C9               ret
715   87A4
716   87A4 C5           Bucle_1 push bc
717   87A5 E5                   push hl
718   87A6 D1                   pop de
719   87A7 13                   inc de
720   87A8 01 FF 00             ld bc,255
721   87AB 36 FF                ld (hl),255
722   87AD ED B0                ldir
723   87AF 23                   inc hl
724   87B0 3E 07                ld a,7
725   87B2 84                   add a,h
726   87B3 67                   ld h,a
727   87B4 C1                   pop bc
728   87B5 C9                   ret
729   87B6
730   87B6              ; ---------------------------------------------------------------
731   87B6
732   87B6              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  87B6              ; ******************************************************************************************************************************************************************************************
  2+  87B6              ;
  3+  87B6              ; 01/23
  4+  87B6              ;
  5+  87B6              ; DRAW. ************************************************************************************************************************************************************************************
  6+  87B6
  7+  87B6 CD 90 8A     Draw call Prepara_draw
  8+  87B9 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  87BA A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  87BB 28 05        	jr z,2F
 11+  87BD
 12+  87BD 3A 12 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  87C0 18 0C        	jr 1F
 14+  87C2 2A 10 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  87C5 22 00 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  87C8 CD 57 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  87CB              ;													; _la esquina superior izquierda de la pantalla.
 18+  87CB CD 73 91     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  87CE 3A 2B 85     1 ld a,(Ctrl_0)
 20+  87D1 CB 6F        	bit 5,a
 21+  87D3 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  87D5
 23+  87D5 CD ED 87     	call Comprueba_limite_horizontal
 24+  87D8 CD 7D 88     	call Comprueba_limite_vertical
 25+  87DB
 26+  87DB              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  87DB
 28+  87DB CD CA 89     3 call calcula_CColumnass
 29+  87DE CD 01 8A     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  87E1 CD 56 8A     	call Define_rutina_de_impresion
 31+  87E4
 32+  87E4 3A 2B 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  87E7 CB AF        	res 5,a											; _a ser de utilidad.
 34+  87E9 32 2B 85     	ld (Ctrl_0),a
 35+  87EC
 36+  87EC C9           	ret
 37+  87ED
 38+  87ED              ; *******************************************************************************************************************************************************************************************
 39+  87ED              ;	21/01/23
 40+  87ED              ;
 41+  87ED              ; 	Comprueba_limite_horizontal.
 42+  87ED              ;
 43+  87ED              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  87ED              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  87ED              ;
 46+  87ED              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  87ED              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  87ED              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  87ED              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  87ED
 51+  87ED
 52+  87ED
 53+  87ED 3A 2B 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  87F0 CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  87F2 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  87F4 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  87F6 32 2B 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  87F9 18 09            jr 6F
 59+  87FB CB 5F        1 bit 3,a
 60+  87FD 28 0A            jr z,2F
 61+  87FF E6 F7            and $f7
 62+  8801 32 2B 85         ld (Ctrl_0),a
 63+  8804 CD 57 89     6 call Inicializacion
 64+  8807 18 5B            jr 5F
 65+  8809 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  880A
 67+  880A              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  880A              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  880A
 70+  880A EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  880B 2A 35 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  880E CD FA 8C     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  8811 67           	ld h,a
 74+  8812 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8813 CD FA 8C     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8816 67           	ld h,a
 77+  8817 A7           	and a
 78+  8818 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  881A 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  881B 3A 12 85     	ld a,(Cuad_objeto)
 81+  881E FE 02        	cp 2
 82+  8820 38 1E        	jr c,3F
 83+  8822 28 1C        	jr z,3F
 84+  8824 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8825 28 23            jr z,7F
 86+  8827 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8829 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  882B E1           	pop hl
 89+  882C
 90+  882C              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  882C              ; _para indicar con E="2" en caso necesario.
 92+  882C
 93+  882C E5               push hl
 94+  882D C5               push bc
 95+  882E CD FA 8C     	call calcula_tercio
 96+  8831 FE 01        	cp 1
 97+  8833 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8835 CD 65 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8838 28 26            jr z,9F
100+  883A 38 24            jr c,9F
101+  883C 1E 00        11 ld e,0
102+  883E 18 22            jr 8F
103+  8840 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  8841 28 07        	jr z, 7F
105+  8843 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8845 1E 00         	ld e,0
107+  8847 E1           	pop hl
108+  8848 18 04        	jr 4F
109+  884A 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  884C 18 15            jr 10F
111+  884E
112+  884E              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  884E              ; _para indicar con E="2" en caso necesario.
114+  884E
115+  884E E5           4 push hl
116+  884F C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  8850 CD FA 8C     	call calcula_tercio
118+  8853 FE 01        	cp 1
119+  8855 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8857 CD 65 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  885A 28 04            jr z,9F
122+  885C 30 02            jr nc,9F
123+  885E 18 02        	jr 8F
124+  8860 1E 02        9 ld e,2
125+  8862 C1           8 pop bc
126+  8863 E1           10 pop hl
127+  8864 C9           5 ret
128+  8865
129+  8865              ; --------------------
130+  8865              ;
131+  8865              ; 25/08/22
132+  8865
133+  8865 CD FA 8C     Comprueba_centro call calcula_tercio
134+  8868 67               ld h,a
135+  8869 08           	ex af,af
136+  886A FE 02        	cp 2
137+  886C 38 07        	jr c,1F
138+  886E 28 05        	jr z,1F
139+  8870 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  8873 18 03        	jr 2F
141+  8875 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  8878 08           2 ex af,af
143+  8879 A7               and a
144+  887A ED 42            sbc hl,bc
145+  887C C9               ret
146+  887D
147+  887D              ; *********************************************************************************************************************************************************************************************
148+  887D              ;
149+  887D              ;   16/8/22
150+  887D              ;
151+  887D              ;	Comprueba_limite_vertical
152+  887D              ;
153+  887D              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  887D              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  887D              ;
156+  887D
157+  887D 2A 00 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  8880 7D           	ld a,l
159+  8881 E6 1F        	and $1F
160+  8883 57           	ld d,a
161+  8884 3A 37 85     	ld a,(Limite_vertical)
162+  8887 BA           	cp d 											; Límite - Posición.
163+  8888 08           	ex af,af 										; Resultado de CP d en F'.
164+  8889 3A 12 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  888C CB 47        	bit 0,a
166+  888E 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  8890
168+  8890              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  8890
170+  8890 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  8891 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  8893
173+  8893              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  8893              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  8893
176+  8893 3A 04 85         ld a,(Coordenada_X)
177+  8896 16 0F            ld d,Centro_izquierda
178+  8898 A7               and a
179+  8899 92               sub d 											 ; Posición - Centro_izquierda.
180+  889A 28 1E            jr z,3F
181+  889C 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  889E              ;                                                    ; _salimos sin modificar nada.
183+  889E 18 0E            jr 2F
184+  88A0 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  88A1 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  88A3
187+  88A3              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  88A3              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  88A3
190+  88A3 3A 04 85         ld a,(Coordenada_X)
191+  88A6 16 10            ld d,Centro_derecha
192+  88A8 A7               and a
193+  88A9 92               sub d
194+  88AA 28 0E            jr z,3F
195+  88AC 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  88AE              ;                                                    ; _salimos sin modificar nada.
197+  88AE CB 43        2 bit 0,e
198+  88B0 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  88B2 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  88B3 CD 47 89         call Modificaccionne
201+  88B6 C1           	pop bc
202+  88B7 CD 57 89         call Inicializacion
203+  88BA C9           3 ret 				 								 ; Salimos de la rutina.
204+  88BB
205+  88BB              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  88BB
207+  88BB C5           4 push bc
208+  88BC 01 FF 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  88BF 0A           	ld a,(bc)
210+  88C0 3D           	dec a
211+  88C1 47           	ld b,a 											 ; Columnas-1 en B.
212+  88C2 7D           	ld a,l
213+  88C3 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  88C4 CB 47        	bit 0,a
215+  88C6 28 03        	jr z,5F
216+  88C8 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  88C9 18 2E        	jr 7F
218+  88CB
219+  88CB              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  88CB
221+  88CB 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  88CC F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  88CD 3A 2B 85     	ld a,(Ctrl_0)
224+  88D0 CB 4F        	bit 1,a
225+  88D2 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  88D4 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  88D5
228+  88D5              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  88D5
230+  88D5 1C               inc e
231+  88D6 1D               dec e
232+  88D7 20 07            jr nz,12F
233+  88D9 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  88DA 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  88DB 22 00 85     	ld (Posicion_actual),hl
236+  88DE 18 44        13 jr 9F
237+  88E0 CB 43        12 bit 0,e
238+  88E2 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  88E4              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  88E4 C1           	pop bc
241+  88E5 18 D3        	jr 3B
242+  88E7 80           14 add b
243+  88E8 6F               ld l,a
244+  88E9 22 00 85     	ld (Posicion_actual),hl
245+  88EC CD 47 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  88EF 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  88F1 E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  88F3 32 2B 85         ld (Ctrl_0),a
249+  88F6 F1           	pop af
250+  88F7 18 2B        	jr 9F
251+  88F9
252+  88F9              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  88F9
254+  88F9 F5           7 push af
255+  88FA 3A 2B 85     	ld a,(Ctrl_0)
256+  88FD CB 47        	bit 0,a
257+  88FF 20 1D        	jr nz,8F
258+  8901 F1           	pop af
259+  8902
260+  8902              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8902
262+  8902 1C           	inc e
263+  8903 1D               dec e
264+  8904 20 07            jr nz,10F
265+  8906 90           	sub b
266+  8907 6F               ld l,a
267+  8908 22 00 85     	ld (Posicion_actual),hl
268+  890B 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  890D              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  890D CB 43        10 bit 0,e
271+  890F 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  8911              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  8911 C1           	pop bc
274+  8912 18 A6        	jr 3B
275+  8914 90           16 sub b
276+  8915 6F               ld l,a
277+  8916 22 00 85     	ld (Posicion_actual),hl
278+  8919 CD 47 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  891C 18 06            jr 9F
280+  891E E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  8920 32 2B 85         ld (Ctrl_0),a
282+  8923 F1           	pop af
283+  8924 C1           9 pop bc
284+  8925 1E 00        	ld e,0
285+  8927 CD 57 89         call Inicializacion
286+  892A F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  892B 08           	ex af,af
288+  892C F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  892D 18 8B            jr 3B
290+  892F
291+  892F              ; --------------------
292+  892F
293+  892F 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  8931 CD AB 8A     1 call PreviousScan
295+  8934 10 FB            djnz 1B
296+  8936 22 00 85     	ld (Posicion_actual),hl
297+  8939 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  893A C9           	ret
299+  893B
300+  893B              ; --------------------
301+  893B
302+  893B 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  893D CD 9C 8A     1 call NextScan
304+  8940 10 FB            djnz 1B
305+  8942 22 00 85     	ld (Posicion_actual),hl
306+  8945 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8946 C9           	ret
308+  8947
309+  8947              ; --------------------
310+  8947              ;
311+  8947              ;	22/01/23
312+  8947              ;
313+  8947              ;	E="1". Hemos cambiado de cuadrante.
314+  8947              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8947              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8947
317+  8947
318+  8947              Modificaccionne
319+  8947
320+  8947 3A 12 85     	ld a,(Cuad_objeto)
321+  894A FE 02        	cp 2
322+  894C CC 2F 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  894F DC 2F 89         call c,Modifica_Pos_actual
324+  8952 C8           	ret z
325+  8953 CD 3B 89         call Modifica_Pos_actual2
326+  8956 C9               ret
327+  8957
328+  8957              ; *************************************************************************************************************************************************************************************************
329+  8957              ;
330+  8957              ;	13/8/22
331+  8957              ;
332+  8957              ;	Inicializacion
333+  8957              ;
334+  8957              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8957              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8957              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8957              ;
338+  8957              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8957              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8957              ;	_ desaparece/aparece.
341+  8957
342+  8957              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8957              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8957              ;
345+  8957              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8957              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8957              ; 		   [E] ="0"
348+  8957
349+  8957              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8957
351+  8957 CD FA 8C     Inicializacion call calcula_tercio
352+  895A 28 36        	jr z,primit
353+  895C E6 02        	and 2
354+  895E 20 07        	jr nz,segmit
355+  8960 7D           	ld a,l
356+  8961 FE 7F        	cp $7f
357+  8963 38 2D        	jr c,primit
358+  8965 28 2B        	jr z,primit
359+  8967 CD C4 89     segmit call column
360+  896A 38 13        	jr c,tercuad
361+  896C 3E 04        cuarcuad ld a,4
362+  896E 32 12 85     	ld (Cuad_objeto),a
363+  8971 21 20 48     	ld hl,$4820
364+  8974 22 35 85     	ld (Limite_horizontal),hl
365+  8977 21 37 85     	ld hl,Limite_vertical
366+  897A 36 0D        	ld (hl),$0d
367+  897C 08           	ex af,af
368+  897D 18 3C        	jr 1F
369+  897F              tercuad
370+  897F 3E 03        	ld a,3
371+  8981 32 12 85     	ld (Cuad_objeto),a
372+  8984 21 20 48     	ld hl,$4820
373+  8987 22 35 85     	ld (Limite_horizontal),hl
374+  898A 21 37 85     	ld hl,Limite_vertical
375+  898D 36 12        	ld (hl),$12
376+  898F 08           	ex af,af
377+  8990 18 29        	jr 1F
378+  8992 CD C4 89     primit call column
379+  8995 38 13        	jr c, primcuad
380+  8997              segcuad
381+  8997 3E 02        	ld a,2
382+  8999 32 12 85     	ld (Cuad_objeto),a
383+  899C 21 C0 4F     	ld hl,$4fc0
384+  899F 22 35 85     	ld (Limite_horizontal),hl
385+  89A2 21 37 85     	ld hl,Limite_vertical
386+  89A5 36 0D        	ld (hl),$0d
387+  89A7 08           	ex af,af
388+  89A8 18 11        	jr 1F
389+  89AA              primcuad
390+  89AA 3E 01        	ld a,1
391+  89AC 32 12 85     	ld (Cuad_objeto),a
392+  89AF 21 C0 4F     	ld hl,$4fc0
393+  89B2 22 35 85     	ld (Limite_horizontal),hl
394+  89B5 21 37 85     	ld hl,Limite_vertical
395+  89B8 36 12        	ld (hl),$12
396+  89BA 08           	ex af,af
397+  89BB CD 5A 90     1 call Genera_coordenadas
398+  89BE 21 2B 85     	ld hl,Ctrl_0
399+  89C1 CB EE        	set 5,(hl)
400+  89C3 C9           	ret
401+  89C4
402+  89C4              ; ------------------------------------------------------------------------------------------------------------------
403+  89C4
404+  89C4              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  89C4              ;
406+  89C4              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  89C4
408+  89C4 7D           column ld a,l
409+  89C5 E6 1F        	and $1f
410+  89C7 FE 10         	cp $10
411+  89C9 C9            	ret
412+  89CA
413+  89CA              ; --------------------------------------------------------------------------------------------------------------------
414+  89CA              ;
415+  89CA              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  89CA              ;
417+  89CA              ; 14/12/22
418+  89CA              ;
419+  89CA              ;	Modifica: A y BC.
420+  89CA
421+  89CA 3A 12 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  89CD E6 01        	and 1
423+  89CF 28 17        	jr z,1F
424+  89D1
425+  89D1              ; Nos encontramos en la parte izquierda de la pantalla
426+  89D1
427+  89D1 3A 04 85     	ld a,(Coordenada_X)
428+  89D4 47           	ld b,a
429+  89D5 04           	inc b											; (Coordenada_X)+1 en B.
430+  89D6 79           	ld a,c
431+  89D7 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  89D8 38 08        	jr c,2F
433+  89DA 47           	ld b,a
434+  89DB 79           	ld a,c
435+  89DC 90           	sub b
436+  89DD 32 34 85     	ld (Columnas),a
437+  89E0 18 1B        	jr 4F
438+  89E2 79           2 ld a,c
439+  89E3 32 34 85     	ld (Columnas),a
440+  89E6 18 15        	jr 4F
441+  89E8
442+  89E8              ; Nos encontramos en la parte derecha de la pantalla.
443+  89E8
444+  89E8 3A 04 85     1 ld a,(Coordenada_X)
445+  89EB 81           	add c
446+  89EC 3D           	dec a
447+  89ED D6 1F        	sub $1f
448+  89EF 38 08        	jr c,3F
449+  89F1 47           	ld b,a
450+  89F2 79           	ld a,c
451+  89F3 90           	sub b
452+  89F4 32 34 85     	ld (Columnas),a
453+  89F7 18 04        	jr 4F
454+  89F9 79           3 ld a,c
455+  89FA 32 34 85     	ld (Columnas),a
456+  89FD D9           4 exx
457+  89FE 4F           	ld c,a
458+  89FF D9           	exx
459+  8A00 C9            ret
460+  8A01
461+  8A01              ; --------------------------------------------------------------------------------------------------------------------
462+  8A01              ;
463+  8A01              ; 7/1/23
464+  8A01              ;
465+  8A01              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8A01              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8A01              ;
468+  8A01              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8A01              ;	DESTRUYE: HL,B Y A.
470+  8A01
471+  8A01 3A 12 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8A04 FE 02        	cp 2
473+  8A06 38 18        	jr c,1F
474+  8A08 28 16        	jr z,1F
475+  8A0A E6 01        	and 1
476+  8A0C 28 0D        	jr z,3F
477+  8A0E
478+  8A0E              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8A0E
480+  8A0E CD 4A 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8A11
482+  8A11 7D           9 ld a,l
483+  8A12 E6 1F        	and $1f
484+  8A14 28 2A        	jr z,7F
485+  8A16 2B           	dec hl
486+  8A17 10 F8        	djnz 9B
487+  8A19 18 25        	jr 7F
488+  8A1B
489+  8A1B              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8A1B
491+  8A1B 2A 00 85     3 ld hl,(Posicion_actual)
492+  8A1E 18 20        	jr 7F
493+  8A20
494+  8A20 28 14        1 jr z,2F
495+  8A22
496+  8A22              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8A22
498+  8A22 CD 4A 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8A25 7D           4 ld a,l
500+  8A26 E6 1F        	and $1f
501+  8A28 28 03        	jr z,6F
502+  8A2A 2B           	dec hl
503+  8A2B 10 F8        	djnz 4B
504+  8A2D 06 0F        6 ld b,15
505+  8A2F CD AB 8A     5 call PreviousScan
506+  8A32 10 FB        	djnz 5B
507+  8A34 18 0A        	jr 7F
508+  8A36
509+  8A36              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8A36
511+  8A36 CD 4A 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8A39 06 0F        	ld b,15
513+  8A3B CD AB 8A     8 call PreviousScan
514+  8A3E 10 FB        	djnz 8B
515+  8A40
516+  8A40 E5           7 push hl
517+  8A41 DD E1        	pop ix
518+  8A43
519+  8A43 2A 02 85     	ld hl,(Puntero_objeto)
520+  8A46 E5           	push hl
521+  8A47 FD E1        	pop iy
522+  8A49
523+  8A49 C9           	ret
524+  8A4A
525+  8A4A              ; --------------------------------------------------------------------------------------------------------------------
526+  8A4A              ;
527+  8A4A              ;	2/1/23
528+  8A4A              ;
529+  8A4A              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8A4A              ;
531+  8A4A              ;	Tras esta rutina tenemos:
532+  8A4A              ;
533+  8A4A              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8A4A              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8A4A              ;
536+  8A4A              ;	DESTRUYE!!!!! HL,B y A.
537+  8A4A
538+  8A4A 2A 00 85     Operandos ld hl,(Posicion_actual)
539+  8A4D 3A 34 85     	ld a,(Columnas)
540+  8A50 3D           	dec a
541+  8A51 20 01        	jr nz,1F
542+  8A53 3C           	inc a
543+  8A54 47           1 ld b,a
544+  8A55 C9           	ret
545+  8A56
546+  8A56              ; --------------------------------------------------------------------------------------------------------------------
547+  8A56              ;
548+  8A56              ;	3/1/23
549+  8A56              ;
550+  8A56              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8A56              ;
552+  8A56              ;	Destruye: A,B,HL y DE.
553+  8A56
554+  8A56              Define_rutina_de_impresion
555+  8A56
556+  8A56 3A FF 84     	ld a,(Columns)
557+  8A59 47           	ld b,a
558+  8A5A 3A 34 85     	ld a,(Columnas)
559+  8A5D B8           	cp b
560+  8A5E 20 0D        	jr nz,2f
561+  8A60
562+  8A60              ;	La entidad se imprime entera.
563+  8A60
564+  8A60 21 F7 8A     	ld hl, Indice_entidades_completas
565+  8A63 E6 01        	and 1
566+  8A65 28 02        	jr z,1F
567+  8A67
568+  8A67 23           	inc hl
569+  8A68 23           	inc hl
570+  8A69
571+  8A69 CD AC 86     1 call Extrae_address
572+  8A6C C9           	ret		;	ret
573+  8A6D
574+  8A6D              ;	La entidad no se imprime entera en pantalla.
575+  8A6D
576+  8A6D 3A 12 85     2 ld a,(Cuad_objeto)
577+  8A70 E6 01        	and 1
578+  8A72 28 17        	jr z,3F
579+  8A74
580+  8A74              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8A74
582+  8A74 21 FB 8A     	ld hl, Indice_entidades_incompletas_izquierda
583+  8A77 3A FF 84     4 ld a,(Columns)
584+  8A7A E6 01        	and 1
585+  8A7C 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8A7E
587+  8A7E 23           	inc hl
588+  8A7F 23           	inc hl
589+  8A80
590+  8A80 3A 34 85     	ld a,(Columnas)
591+  8A83 E6 01        	and 1
592+  8A85 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8A87
594+  8A87 23           	inc hl
595+  8A88 23           	inc hl
596+  8A89
597+  8A89 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8A8B
599+  8A8B 21 01 8B     3 ld hl, Indice_entidades_incompletas_derecha
600+  8A8E 18 E7        	jr 4B
601+  8A90
602+  8A90              ; --------------------------------------------------------------------------------------------------------------------
603+  8A90              ;
604+  8A90              ;	Prepara_draw
605+  8A90              ;
606+  8A90              ;	Es una rutina de carga.
607+  8A90              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8A90              ;
609+  8A90              ;	FUNCIONAMIENTO:
610+  8A90              ;
611+  8A90              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8A90              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8A90              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8A90              ;
615+  8A90              ;	DESTRUYE:
616+  8A90              ;
617+  8A90              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8A90
619+  8A90 21 FE 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8A93 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8A94 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8A95 4E           	ld c,(hl)
623+  8A96 2A 00 85     	ld hl,(Posicion_actual)
624+  8A99 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8A9B C9           	ret
626+  8A9C
627+  8A9C              ;----------------------------------------------------------------------------------------------------------------
628+  8A9C              ;
629+  8A9C              ;	5/08/22
630+  8A9C              ;
631+  8A9C              ;   NextScan.
632+  8A9C              ;
633+  8A9C              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8A9C              ;
635+  8A9C              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8A9C              ;
637+  8A9C              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8A9C              ;
639+  8A9C              ;       DESTRUIDOS: AF y HL !!!
640+  8A9C              ;
641+  8A9C              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8A9C              ;
643+  8A9C
644+  8A9C 24           NextScan inc h          ; Incrementamos el scanline.
645+  8A9D 7C               ld a,h
646+  8A9E E6 07            and 7
647+  8AA0 C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8AA1
649+  8AA1 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8AA2 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8AA4 6F               ld l,a
652+  8AA5 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8AA6
654+  8AA6 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8AA7 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8AA9 67               ld h,a
657+  8AAA C9               ret
658+  8AAB
659+  8AAB              ;----------------------------------------------------------------------------------------------------------------
660+  8AAB              ;
661+  8AAB              ;	5/08/22
662+  8AAB              ;
663+  8AAB              ;   PreviousScan.
664+  8AAB              ;
665+  8AAB              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8AAB              ;
667+  8AAB              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8AAB              ;
669+  8AAB              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8AAB              ;
671+  8AAB              ;       DESTRUIDOS: AF y HL !!!
672+  8AAB              ;
673+  8AAB              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8AAB              ;
675+  8AAB
676+  8AAB 7C           PreviousScan ld a,h
677+  8AAC 25               dec h               ; Dec H.
678+  8AAD E6 07            and 7
679+  8AAF C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8AB0
681+  8AB0 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8AB1 D6 20            sub $20             ; Vamos a comprobarlo...
683+  8AB3 6F               ld l,a
684+  8AB4 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8AB5
686+  8AB5 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8AB6 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8AB8 67               ld h,a
689+  8AB9 C9               ret
690+  8ABA
691+  8ABA              ; -----------------------------------------------------------------------------------
692+  8ABA              ;
693+  8ABA              ;	15/1/23
694+  8ABA
695+  8ABA              Extrae_foto_registros
696+  8ABA
697+  8ABA 3A 3F 85     	ld a,(Numero_de_malotes)
698+  8ABD A7           	and a
699+  8ABE C8           	ret z
700+  8ABF
701+  8ABF
702+  8ABF ED 73 40 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8AC3 31 00 70     	ld sp,Album_de_fotos
704+  8AC6
705+  8AC6 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8AC8 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8AC9 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8ACA
709+  8ACA ED 73 42 85  	ld (Stack_2),sp
710+  8ACE ED 7B 40 85  	ld sp,(Stack)
711+  8AD2
712+  8AD2              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8AD2
714+  8AD2 3E CD        	ld a,$cd
715+  8AD4 32 DC 8A     	ld (Imprime),a
716+  8AD7 EB           	ex de,hl
717+  8AD8 22 DD 8A     	ld (Imprime+1),hl
718+  8ADB EB           	ex de,hl
719+  8ADC
720+  8ADC              ; Ejecuta la llamada:	CALL $xx,xx
721+  8ADC
722+  8ADC 00 00 00     Imprime db 0,0,0
723+  8ADF
724+  8ADF ED 73 40 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8AE3
726+  8AE3 3A 3F 85     	ld a,(Numero_de_malotes)
727+  8AE6 3D           	dec a
728+  8AE7 28 09        	jr z,1F
729+  8AE9 32 3F 85      	ld (Numero_de_malotes),a
730+  8AEC ED 7B 42 85  	ld sp,(Stack_2)
731+  8AF0 18 D4        	jr 2B
732+  8AF2
733+  8AF2 AF           1 xor a
734+  8AF3 32 42 85     	ld (Stack_2),a
735+  8AF6 C9           	ret
736+  8AF7
737+  8AF7
# file closed: Draw_XOR.asm
733   8AF7              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8AF7              ;   índices de Rutinas de impresión.
  2+  8AF7
  3+  8AF7 07 8B        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8AF9 34 8B            defw Pinta_Amadeus_3x2
  5+  8AFB
  6+  8AFB 8A 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8AFD 2A 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8AFF DE 8B            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8B01
 10+  8B01 B4 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8B03 B8 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8B05 6C 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8B07
 14+  8B07
 15+  8B07              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8B07              ;
 17+  8B07              ;   12/12/22
 18+  8B07              ;
 19+  8B07              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8B07              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8B07              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8B07              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8B07              ;
 24+  8B07              ;   Modifica: DE y HL.
 25+  8B07
 26+  8B07 ED 73 40 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8B0B FD F9        	ld sp,iy
 28+  8B0D 06 10            ld b,16
 29+  8B0F D1           1 pop de
 30+  8B10 7B               ld a,e
 31+  8B11 AE               xor (hl)
 32+  8B12 77           	ld (hl),a
 33+  8B13 23           	inc hl
 34+  8B14 7A               ld a,d
 35+  8B15 AE               xor (hl)
 36+  8B16 77           	ld (hl),a
 37+  8B17 2B           	dec hl
 38+  8B18 24           	inc h
 39+  8B19 7C               ld a,h
 40+  8B1A E6 07            and 7
 41+  8B1C 20 0A            jr nz,2F
 42+  8B1E 7D               ld a,l
 43+  8B1F C6 20            add a,$20
 44+  8B21 6F               ld l,a
 45+  8B22 38 04            jr c,2F
 46+  8B24 7C               ld a,h
 47+  8B25 D6 08            sub 8
 48+  8B27 67               ld h,a
 49+  8B28 7C           2 ld a,h
 50+  8B29 FE 58            cp $58
 51+  8B2B 28 02            jr z,3F
 52+  8B2D 10 E0            djnz 1B
 53+  8B2F ED 7B 40 85  3 ld sp,(Stack)
 54+  8B33 C9           	ret
 55+  8B34
 56+  8B34 ED 73 40 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B38 FD F9        	ld sp,iy
 58+  8B3A 06 08            ld b,8
 59+  8B3C D1           1 pop de
 60+  8B3D 7B               ld a,e
 61+  8B3E AE               xor (hl)
 62+  8B3F 77           	ld (hl),a
 63+  8B40 23           	inc hl
 64+  8B41 7A               ld a,d
 65+  8B42 AE               xor (hl)
 66+  8B43 77           	ld (hl),a
 67+  8B44 23           	inc hl
 68+  8B45 D1           	pop de
 69+  8B46 7B               ld a,e
 70+  8B47 AE               xor (hl)
 71+  8B48 77           	ld (hl),a
 72+  8B49 2B           	dec hl
 73+  8B4A 2B           	dec hl
 74+  8B4B 24           	inc h
 75+  8B4C 7C               ld a,h
 76+  8B4D E6 07            and 7
 77+  8B4F 20 0A            jr nz,2F
 78+  8B51 7D               ld a,l
 79+  8B52 C6 20            add a,$20
 80+  8B54 6F               ld l,a
 81+  8B55 38 04            jr c,2F
 82+  8B57 7C               ld a,h
 83+  8B58 D6 08            sub 8
 84+  8B5A 67               ld h,a
 85+  8B5B 7C           2 ld a,h
 86+  8B5C FE 58            cp $58
 87+  8B5E 28 25            jr z,4F
 88+  8B60 7A               ld a,d
 89+  8B61 AE               xor (hl)
 90+  8B62 77               ld (hl),a
 91+  8B63 D1           	pop de
 92+  8B64 23           	inc hl
 93+  8B65 7B               ld a,e
 94+  8B66 AE               xor (hl)
 95+  8B67 77           	ld (hl),a
 96+  8B68 23           	inc hl
 97+  8B69 7A               ld a,d
 98+  8B6A AE               xor (hl)
 99+  8B6B 77           	ld (hl),a
100+  8B6C 2B           	dec hl
101+  8B6D 2B           	dec hl
102+  8B6E 24           	inc h
103+  8B6F 7C               ld a,h
104+  8B70 E6 07            and 7
105+  8B72 20 0A            jr nz,3F
106+  8B74 7D               ld a,l
107+  8B75 C6 20            add a,$20
108+  8B77 6F               ld l,a
109+  8B78 38 04            jr c,3F
110+  8B7A 7C               ld a,h
111+  8B7B D6 08            sub 8
112+  8B7D 67               ld h,a
113+  8B7E 7C           3 ld a,h
114+  8B7F FE 58            cp $58
115+  8B81 28 02            jr z,4F
116+  8B83 10 B7            djnz 1B
117+  8B85 ED 7B 40 85  4 ld sp,(Stack)
118+  8B89 C9           	ret
119+  8B8A
120+  8B8A              ; ---------------------------------------------------
121+  8B8A
122+  8B8A ED 73 40 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8B8E FD F9        	ld sp,iy
124+  8B90 06 10            ld b,16
125+  8B92 D1           1 pop de
126+  8B93 7A           	ld a,d
127+  8B94 AE           	xor (hl)
128+  8B95 77           	ld (hl),a
129+  8B96 24           	inc h
130+  8B97 7C               ld a,h
131+  8B98 E6 07            and 7
132+  8B9A 20 0C            jr nz,2F
133+  8B9C 7D               ld a,l
134+  8B9D C6 20            add a,$20
135+  8B9F 6F               ld l,a
136+  8BA0 38 06            jr c,2F
137+  8BA2 7C               ld a,h
138+  8BA3 D6 08            sub 8
139+  8BA5 67               ld h,a
140+  8BA6 18 00            jr 2F
141+  8BA8 7C           2 ld a,h
142+  8BA9 FE 58            cp $58
143+  8BAB 28 02            jr z,3F
144+  8BAD 10 E3            djnz 1B
145+  8BAF ED 7B 40 85  3 ld sp,(Stack)
146+  8BB3 C9           	ret
147+  8BB4
148+  8BB4 ED 73 40 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8BB8 FD F9        	ld sp,iy
150+  8BBA 06 10            ld b,16
151+  8BBC D1           1 pop de
152+  8BBD 7B           	ld a,e
153+  8BBE AE           	xor (hl)
154+  8BBF 77           	ld (hl),a
155+  8BC0 24           	inc h
156+  8BC1 7C               ld a,h
157+  8BC2 E6 07            and 7
158+  8BC4 20 0C            jr nz,2F
159+  8BC6 7D               ld a,l
160+  8BC7 C6 20            add a,$20
161+  8BC9 6F               ld l,a
162+  8BCA 38 06            jr c,2F
163+  8BCC 7C               ld a,h
164+  8BCD D6 08            sub 8
165+  8BCF 67               ld h,a
166+  8BD0 18 00            jr 2F
167+  8BD2 7C           2 ld a,h
168+  8BD3 FE 58            cp $58
169+  8BD5 28 02            jr z,3F
170+  8BD7 10 E3            djnz 1B
171+  8BD9 ED 7B 40 85  3 ld sp,(Stack)
172+  8BDD C9           	ret
173+  8BDE
174+  8BDE              ; ---------------------------------------------------
175+  8BDE
176+  8BDE ED 73 40 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8BE2 FD F9        	ld sp,iy
178+  8BE4 06 08            ld b,8
179+  8BE6 D1           1 pop de
180+  8BE7 7A           	ld a,d
181+  8BE8 AE           	xor (hl)
182+  8BE9 77           	ld (hl),a
183+  8BEA 23           	inc hl
184+  8BEB D1           	pop de
185+  8BEC 7B           	ld a,e
186+  8BED AE           	xor (hl)
187+  8BEE 77           	ld (hl),a
188+  8BEF 2B           	dec hl
189+  8BF0 24            	inc h
190+  8BF1 7C               ld a,h
191+  8BF2 E6 07            and 7
192+  8BF4 20 0A            jr nz,2F
193+  8BF6 7D               ld a,l
194+  8BF7 C6 20            add a,$20
195+  8BF9 6F               ld l,a
196+  8BFA 38 04            jr c,2F
197+  8BFC 7C               ld a,h
198+  8BFD D6 08            sub 8
199+  8BFF 67               ld h,a
200+  8C00 7C           2 ld a,h
201+  8C01 FE 58            cp $58
202+  8C03 28 20            jr z,4F
203+  8C05 D1               pop de
204+  8C06 7B           	ld a,e
205+  8C07 AE           	xor (hl)
206+  8C08 77           	ld (hl),a
207+  8C09 23           	inc hl
208+  8C0A 7A           	ld a,d
209+  8C0B AE           	xor (hl)
210+  8C0C 77           	ld (hl),a
211+  8C0D 2B           	dec hl
212+  8C0E 24           	inc h
213+  8C0F 7C               ld a,h
214+  8C10 E6 07            and 7
215+  8C12 20 0A            jr nz,3F
216+  8C14 7D               ld a,l
217+  8C15 C6 20            add a,$20
218+  8C17 6F               ld l,a
219+  8C18 38 04            jr c,3F
220+  8C1A 7C               ld a,h
221+  8C1B D6 08            sub 8
222+  8C1D 67               ld h,a
223+  8C1E 7C           3 ld a,h
224+  8C1F FE 58            cp $58
225+  8C21 28 02            jr z,4F
226+  8C23 10 C1            djnz 1B
227+  8C25 ED 7B 40 85  4 ld sp,(Stack)
228+  8C29 C9           	ret
229+  8C2A
230+  8C2A ED 73 40 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C2E FD F9        	ld sp,iy
232+  8C30 06 08            ld b,8
233+  8C32 D1           1 pop de
234+  8C33 D1           	pop de
235+  8C34 7B           	ld a,e
236+  8C35 AE           	xor (hl)
237+  8C36 77           	ld (hl),a
238+  8C37 24            	inc h
239+  8C38 7C               ld a,h
240+  8C39 E6 07            and 7
241+  8C3B 20 0A            jr nz,2F
242+  8C3D 7D               ld a,l
243+  8C3E C6 20            add a,$20
244+  8C40 6F               ld l,a
245+  8C41 38 04            jr c,2F
246+  8C43 7C               ld a,h
247+  8C44 D6 08            sub 8
248+  8C46 67               ld h,a
249+  8C47 7C           2 ld a,h
250+  8C48 FE 58            cp $58
251+  8C4A 28 1B            jr z,4F
252+  8C4C D1               pop de
253+  8C4D 7A           	ld a,d
254+  8C4E AE           	xor (hl)
255+  8C4F 77           	ld (hl),a
256+  8C50 24           	inc h
257+  8C51 7C               ld a,h
258+  8C52 E6 07            and 7
259+  8C54 20 0A            jr nz,3F
260+  8C56 7D               ld a,l
261+  8C57 C6 20            add a,$20
262+  8C59 6F               ld l,a
263+  8C5A 38 04            jr c,3F
264+  8C5C 7C               ld a,h
265+  8C5D D6 08            sub 8
266+  8C5F 67               ld h,a
267+  8C60 7C           3 ld a,h
268+  8C61 FE 58            cp $58
269+  8C63 28 02            jr z,4F
270+  8C65 10 CB            djnz 1B
271+  8C67 ED 7B 40 85  4 ld sp,(Stack)
272+  8C6B C9           	ret
273+  8C6C
274+  8C6C ED 73 40 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C70 FD F9        	ld sp,iy
276+  8C72 06 08            ld b,8
277+  8C74 D1           1 pop de
278+  8C75 7B           	ld a,e
279+  8C76 AE           	xor (hl)
280+  8C77 77           	ld (hl),a
281+  8C78 23           	inc hl
282+  8C79 7A           	ld a,d
283+  8C7A AE           	xor (hl)
284+  8C7B 77           	ld (hl),a
285+  8C7C 2B           	dec hl
286+  8C7D 24             	inc h
287+  8C7E 7C               ld a,h
288+  8C7F E6 07            and 7
289+  8C81 20 0A            jr nz,2F
290+  8C83 7D               ld a,l
291+  8C84 C6 20            add a,$20
292+  8C86 6F               ld l,a
293+  8C87 38 04            jr c,2F
294+  8C89 7C               ld a,h
295+  8C8A D6 08            sub 8
296+  8C8C 67               ld h,a
297+  8C8D 7C           2 ld a,h
298+  8C8E FE 58            cp $58
299+  8C90 28 21            jr z,4F
300+  8C92 D1               pop de
301+  8C93 7A           	ld a,d
302+  8C94 AE           	xor (hl)
303+  8C95 77           	ld (hl),a
304+  8C96 23           	inc hl
305+  8C97 D1               pop de
306+  8C98 7B           	ld a,e
307+  8C99 AE           	xor (hl)
308+  8C9A 77           	ld (hl),a
309+  8C9B 2B           	dec hl
310+  8C9C 24           	inc h
311+  8C9D 7C               ld a,h
312+  8C9E E6 07            and 7
313+  8CA0 20 0A            jr nz,3F
314+  8CA2 7D               ld a,l
315+  8CA3 C6 20            add a,$20
316+  8CA5 6F               ld l,a
317+  8CA6 38 04            jr c,3F
318+  8CA8 7C               ld a,h
319+  8CA9 D6 08            sub 8
320+  8CAB 67               ld h,a
321+  8CAC 7C           3 ld a,h
322+  8CAD FE 58            cp $58
323+  8CAF 28 02            jr z,4F
324+  8CB1 10 C1            djnz 1B
325+  8CB3 ED 7B 40 85  4 ld sp,(Stack)
326+  8CB7 C9           	ret
327+  8CB8
328+  8CB8 ED 73 40 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8CBC FD F9        	ld sp,iy
330+  8CBE 06 08            ld b,8
331+  8CC0 D1           1 pop de
332+  8CC1 7B           	ld a,e
333+  8CC2 AE           	xor (hl)
334+  8CC3 77           	ld (hl),a
335+  8CC4 24            	inc h
336+  8CC5 7C               ld a,h
337+  8CC6 E6 07            and 7
338+  8CC8 20 0A            jr nz,2F
339+  8CCA 7D               ld a,l
340+  8CCB C6 20            add a,$20
341+  8CCD 6F               ld l,a
342+  8CCE 38 04            jr c,2F
343+  8CD0 7C               ld a,h
344+  8CD1 D6 08            sub 8
345+  8CD3 67               ld h,a
346+  8CD4 7C           2 ld a,h
347+  8CD5 FE 58            cp $58
348+  8CD7 28 1C            jr z,4F
349+  8CD9 D1               pop de
350+  8CDA 7A           	ld a,d
351+  8CDB AE           	xor (hl)
352+  8CDC 77           	ld (hl),a
353+  8CDD 24           	inc h
354+  8CDE 7C               ld a,h
355+  8CDF E6 07            and 7
356+  8CE1 20 0A            jr nz,3F
357+  8CE3 7D               ld a,l
358+  8CE4 C6 20            add a,$20
359+  8CE6 6F               ld l,a
360+  8CE7 38 04            jr c,3F
361+  8CE9 7C               ld a,h
362+  8CEA D6 08            sub 8
363+  8CEC 67               ld h,a
364+  8CED 7C           3 ld a,h
365+  8CEE FE 58            cp $58
366+  8CF0 28 03            jr z,4F
367+  8CF2 D1               pop de
368+  8CF3 10 CB            djnz 1B
369+  8CF5 ED 7B 40 85  4 ld sp,(Stack)
370+  8CF9 C9           	ret
371+  8CFA
372+  8CFA              ; ---------------------------------------------------
373+  8CFA
# file closed: Rutinas_de_impresion_sprites.asm
734   8CFA              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8CFA              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8CFA              ;
  3+  8CFA              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8CFA              ;
  5+  8CFA              ; *****************************************************************************************************************************************************************************************
  6+  8CFA              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8CFA
  8+  8CFA 7C           calcula_tercio ld a,h
  9+  8CFB E6 18        	and $18
 10+  8CFD CB 2F        	sra a
 11+  8CFF CB 2F        	sra a
 12+  8D01 CB 2F        	sra a
 13+  8D03 C9           	ret
 14+  8D04
# file closed: calcula_tercio.asm
735   8D04              	include "Calcula_direccion_atributos.asm"
# file opened: Calcula_direccion_atributos.asm
  1+  8D04              ; -----------------------------------------------------------------------------------------
  2+  8D04              ;
  3+  8D04              ;   04/11/22
  4+  8D04              ;
  5+  8D04              ;   Entrega una dirección de ATRIBUTOS de pantalla en HL a partir de una dirección de pantalla, dada en HL.
  6+  8D04              ;
  7+  8D04              ;   INPUT: HL contiene la dirección de memoria de pantalla.
  8+  8D04              ;   OUTPUT: HL contiene la dirección de ATRIBUTOS de pantalla de la dirección que contenía HL.
  9+  8D04              ;
 10+  8D04              ;   DESTRUYE: HL y A. !!!!!
 11+  8D04
 12+  8D04 CD FA 8C     Calcula_direccion_atributos call calcula_tercio
 13+  8D07 26 58            ld h,$58
 14+  8D09 84               add h
 15+  8D0A 67               ld h,a
 16+  8D0B C9               ret
# file closed: Calcula_direccion_atributos.asm
736   8D0C              	include "Define_atributos.asm"
# file opened: Define_atributos.asm
  1+  8D0C              ; ********** **********
  2+  8D0C              ;
  3+  8D0C              ;   5/11/22
  4+  8D0C              ;
  5+  8D0C              ;   Define los atributos de un area de pantalla de X(Filas) por Y(Columnas).
  6+  8D0C              ;
  7+  8D0C              ;   INPUTS: HL contendrá la dirección de mem. de pantalla del 1er byte del objeto, (arriba-izquierda).
  8+  8D0C              ;           C contendrá el nº de (Columnas) que vamos a imprimir del objeto.
  9+  8D0C              ;           HL´ contendrán: Nº de (Filas) del objeto. / (attr) del objeto.
 10+  8D0C              ;
 11+  8D0C              ;   NO DESTROYERSSSS !!!!!
 12+  8D0C
 13+  8D0C E5           Define_atributos push hl
 14+  8D0D C5           	push bc
 15+  8D0E D5           	push de
 16+  8D0F
 17+  8D0F CD 04 8D     	call Calcula_direccion_atributos
 18+  8D12
 19+  8D12 D9               exx
 20+  8D13 E5               push hl
 21+  8D14 D9               exx
 22+  8D15 D1               pop de
 23+  8D16
 24+  8D16 42               ld b,d
 25+  8D17 7B               ld a,e 									; (Attr) en A.
 26+  8D18
 27+  8D18 C5           4 push bc 									; FBPPPIII (Flash, Brillo, Papel, Tinta).
 28+  8D19 E5            	push hl 								; Guardo dirección de attr.
 29+  8D1A
 30+  8D1A              ; -----
 31+  8D1A
 32+  8D1A 77           2 ld (hl),a
 33+  8D1B 0D           	dec c 									; Decremento (Columnas).
 34+  8D1C 28 03        	jr z,1F
 35+  8D1E 23           	inc hl
 36+  8D1F 18 F9        	jr 2B
 37+  8D21
 38+  8D21 E1           1 pop hl 									; Recuperamos la dirección de attr. inicial, (arriba-izq).
 39+  8D22 C1           	pop bc									; Recuperamos (Filas)/(Columnas) en BC.
 40+  8D23
 41+  8D23 05           	dec b									; Decremento (Filas).
 42+  8D24 28 08        	jr z,3F                                 ; Si no quedan más (Filas), salimos. (JR 16F).
 43+  8D26
 44+  8D26 11 20 00     	ld de,32
 45+  8D29 A7           	and a
 46+  8D2A ED 5A        	adc hl,de
 47+  8D2C 18 EA        	jr 4B									; HL situado en la siguiente (Fila) de mem. de attr.
 48+  8D2E
 49+  8D2E D1           3 pop de									; No quedan más Filas, Restauramos registros y RET!!!
 50+  8D2F C1           	pop bc
 51+  8D30 E1           	pop hl
 52+  8D31
 53+  8D31 C9           	ret
 54+  8D32
# file closed: Define_atributos.asm
737   8D32              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D32              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D32              ;
  3+  8D32              ;
  4+  8D32              ;	CLS.
  5+  8D32              ;
  6+  8D32              ;	Limpia la pantalla y define sus atributos.
  7+  8D32              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D32              ;
  9+  8D32              ;	COLORES: 0 ..... NEGRO
 10+  8D32              ;    		 1 ..... AZUL
 11+  8D32              ; 			 2 ..... ROJO
 12+  8D32              ;			 3 ..... MAGENTA
 13+  8D32              ; 			 4 ..... VERDE
 14+  8D32              ; 			 5 ..... CIAN
 15+  8D32              ;			 6 ..... AMARILLO
 16+  8D32              ; 			 7 ..... BLANCO
 17+  8D32              ;
 18+  8D32              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D32              ;
 20+  8D32              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D32
 22+  8D32
 23+  8D32 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D35 11 01 40     	LD DE,$4001
 25+  8D38 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D3B 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D3D ED B0        	LDIR
 28+  8D3F 01 FF 02     	LD BC,767
 29+  8D42 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D43 ED B0        	LDIR
 31+  8D45 C9           	ret
 32+  8D46
# file closed: Cls.asm
738   8D46              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D46              ; ******************************************************************************************************************************************************************************************
  2+  8D46              ;
  3+  8D46              ;   22/01/23
  4+  8D46              ;
  5+  8D46              ;	Mov_down
  6+  8D46              ;
  7+  8D46              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D46              ;
  9+  8D46              ;
 10+  8D46 21 2B 85     Mov_down ld hl,Ctrl_0
 11+  8D49 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D4B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D4B              ; 																	; _ en el caso de que no lo haya.
 14+  8D4B 3A 16 85     	ld a,(Vel_down)
 15+  8D4E 47           	ld b,a
 16+  8D4F 2A 00 85         ld hl,(Posicion_actual)
 17+  8D52 CD FA 8C     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D55 E6 02        	and 2
 19+  8D57 28 0F        	jr z,1F
 20+  8D59
 21+  8D59              ; Nos encontramos en el último tercio de pantalla.
 22+  8D59              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D59
 24+  8D59 7C           	ld a,h
 25+  8D5A FE 57        	cp $57
 26+  8D5C 20 0A        	jr nz,1F
 27+  8D5E 7D           	ld a,l
 28+  8D5F C6 20        	add $20
 29+  8D61 30 05        	jr nc,1F
 30+  8D63
 31+  8D63              ; ------------------------------
 32+  8D63 CD 44 90     	call Reaparece_arriba
 33+  8D66              ;	call Reinicio
 34+  8D66              ; ------------------------------
 35+  8D66 18 08        	jr 3F
 36+  8D68 CD 9C 8A     1 call NextScan
 37+  8D6B 22 00 85     	ld (Posicion_actual),hl
 38+  8D6E 10 E2            djnz 2B
 39+  8D70 CD 5A 90     3 call Genera_coordenadas
 40+  8D73 C9           	ret
 41+  8D74
 42+  8D74
 43+  8D74              ; ******************************************************************************************************************************************************************************************
 44+  8D74              ;
 45+  8D74              ;   22/01/23
 46+  8D74              ;
 47+  8D74              ;	Mov_up
 48+  8D74              ;
 49+  8D74              ; 	Mueve el Sprite hacia arriba.
 50+  8D74              ;
 51+  8D74              ;
 52+  8D74 21 2B 85     Mov_up ld hl,Ctrl_0
 53+  8D77 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8D79              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8D79              ; 																		; _ en el caso de que no lo haya.
 56+  8D79 3A 15 85     	ld a,(Vel_up)
 57+  8D7C 47           	ld b,a
 58+  8D7D 2A 00 85     	ld hl,(Posicion_actual)
 59+  8D80 CD FA 8C     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8D83 A7           	and a
 61+  8D84 20 10        	jr nz,1F
 62+  8D86
 63+  8D86              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8D86              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8D86
 66+  8D86 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8D87 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8D89 20 0B            jr nz,1F
 69+  8D8B 7D               ld a,l
 70+  8D8C D6 20            sub $20
 71+  8D8E 30 06            jr nc,1F
 72+  8D90 25               dec h
 73+  8D91
 74+  8D91              ; -----------------------------
 75+  8D91 CD 34 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8D94              ;	call Reinicio
 77+  8D94              ; -----------------------------
 78+  8D94
 79+  8D94 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8D96 CD AB 8A     1 call PreviousScan
 81+  8D99 22 00 85     	ld (Posicion_actual),hl
 82+  8D9C 10 E2            djnz 3B
 83+  8D9E CD 5A 90     2 call Genera_coordenadas
 84+  8DA1 C9           	ret
 85+  8DA2
 86+  8DA2              ; ******************************************************************************************************************************************************************************************
 87+  8DA2              ;
 88+  8DA2              ;	19/10/22
 89+  8DA2              ;
 90+  8DA2              ;	Mov_right.
 91+  8DA2              ;
 92+  8DA2              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8DA2              ;
 94+  8DA2
 95+  8DA2 21 2B 85     Mov_right ld hl,Ctrl_0
 96+  8DA5 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8DA7              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8DA7              ; 																	; _ en el caso de que no lo haya.
 99+  8DA7 3A 2B 85     	ld a,(Ctrl_0)
100+  8DAA CB 77        	bit 6,a
101+  8DAC 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8DAE
103+  8DAE CD E2 8F     	call Stop_Amadeus_right
104+  8DB1 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8DB2 18 4D        	jr 8F
106+  8DB4
107+  8DB4 3A 04 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8DB7 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8DB9 20 46        	jr nz,8F
110+  8DBB
111+  8DBB 3A 06 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8DBE A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8DBF 28 40        	jr z,8F
114+  8DC1
115+  8DC1              ; ---------- ---------- ----------
116+  8DC1              ;
117+  8DC1              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8DC1
119+  8DC1 3A 14 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8DC4 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8DC6 28 11        	jr z,1F
122+  8DC8 38 06        	jr c,6F
123+  8DCA FE 04        	cp 4
124+  8DCC 28 14        	jr z,7F
125+  8DCE 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8DD0
127+  8DD0              ; ---------- ---------- ----------
128+  8DD0              ;
129+  8DD0              ; Perfiles de velocidad
130+  8DD0              ;
131+  8DD0
132+  8DD0 3A 06 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8DD3 FE FE        	cp $fe
134+  8DD5 20 2A        	jr nz,8F
135+  8DD7 18 10        	jr 3F
136+  8DD9 3A 06 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8DDC FE FD        	cp $fd
138+  8DDE 20 21        	jr nz,8F
139+  8DE0 18 07        	jr 3F
140+  8DE2 3A 06 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8DE5 FE FB        	cp $fb
142+  8DE7 20 18        	jr nz,8F
143+  8DE9
144+  8DE9              ; ---------- ---------- ----------
145+  8DE9
146+  8DE9              3
147+  8DE9 CD 22 90     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8DEC              ;	call Reinicio
149+  8DEC
150+  8DEC              ; ---------- ---------- ----------
151+  8DEC              ;
152+  8DEC              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8DEC
154+  8DEC 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8DEE C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8DEF CD 08 8E     	call DESPLZ_DER
157+  8DF2 C1           	pop bc
158+  8DF3 10 F9        	djnz 5B
159+  8DF5 2A 00 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8DF8 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8DF9 22 00 85     	ld (Posicion_actual),hl
162+  8DFC CD 5A 90     	call Genera_coordenadas
163+  8DFF 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8E01
165+  8E01              ; ---------- ---------- ----------
166+  8E01
167+  8E01 2A 00 85     8 ld hl,(Posicion_actual)
168+  8E04 CD 08 8E     	call DESPLZ_DER
169+  8E07 C9           2 ret
170+  8E08
171+  8E08              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8E08              ;
173+  8E08              ;	22/9/22
174+  8E08              ;
175+  8E08
176+  8E08 CD 17 8E     DESPLZ_DER call Desplaza_derecha
177+  8E0B CD 63 8E         call modifica_parametros_1er_DESPLZ_2
178+  8E0E CD 8C 8E         call Ciclo_completo
179+  8E11 21 2B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8E14 CB FE        	set 7,(hl)
181+  8E16 C9           	ret
182+  8E17
183+  8E17              ; ******************************************************************************************************************************************************************************************
184+  8E17              ;	15/02/23
185+  8E17              ;
186+  8E17
187+  8E17 3A 14 85     Desplaza_derecha ld a,(Vel_right)
188+  8E1A 47           	ld b,a
189+  8E1B 2A 0C 85     	ld hl,(Puntero_DESPLZ_der)
190+  8E1E 23           1 inc hl
191+  8E1F 23           	inc hl
192+  8E20 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8E22 22 0C 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8E25 CD AC 86     	call Extrae_address
195+  8E28 22 02 85     	ld (Puntero_objeto),hl
196+  8E2B
197+  8E2B              ; Modifica (Puntero_DESPLZ_izq).
198+  8E2B
199+  8E2B              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8E2B              ; Cuántos movimientos hemos hecho ??
201+  8E2B              ; DE contiene (Puntero_DESPLZ_der).
202+  8E2B
203+  8E2B 2A 08 85     7 ld hl,(Indice_Sprite_der)
204+  8E2E EB           	ex de,hl
205+  8E2F A7           	and a
206+  8E30 ED 52        	sbc hl,de
207+  8E32 CB 3D        	srl l
208+  8E34 3E 08        6 ld a,8
209+  8E36 95           	sub l
210+  8E37 30 1E        	jr nc,3F
211+  8E39
212+  8E39              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8E39              ; B="0".
214+  8E39
215+  8E39 04           4 inc b
216+  8E3A 3C           	inc a
217+  8E3B 20 FC        	jr nz,4B
218+  8E3D 78           	ld a,b
219+  8E3E 08           	ex af,af
220+  8E3F 2A 08 85     	ld hl,(Indice_Sprite_der)
221+  8E42 23           5 inc hl
222+  8E43 23           	inc hl
223+  8E44 10 FC        	djnz 5B
224+  8E46 22 0C 85     	ld (Puntero_DESPLZ_der),hl
225+  8E49 CD AC 86     	call Extrae_address
226+  8E4C 22 02 85     	ld (Puntero_objeto),hl
227+  8E4F
228+  8E4F              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8E4F              ; _(Posicion_actual).
230+  8E4F
231+  8E4F 21 00 85     	ld hl,Posicion_actual
232+  8E52 34           	inc (hl)
233+  8E53 08               ex af,af
234+  8E54 6F           	ld l,a
235+  8E55 18 DD        	jr 6B
236+  8E57
237+  8E57              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8E57
239+  8E57 47           3 ld b,a
240+  8E58 2A 0A 85     	ld hl,(Indice_Sprite_izq)
241+  8E5B 23           2 inc hl
242+  8E5C 23           	inc hl
243+  8E5D 10 FC        	djnz 2B
244+  8E5F 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
245+  8E62 C9           8 ret
246+  8E63
247+  8E63              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8E63              ;
249+  8E63              ;	24/7/22
250+  8E63              ;
251+  8E63              ;	modifica_parametros_1er_DESPLZ_2
252+  8E63              ;
253+  8E63              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8E63              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8E63              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8E63
257+  8E63 3A 06 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8E66 A7           	and a
259+  8E67 20 1F        	jr nz,1F
260+  8E69 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8E6B 32 06 85         ld (CTRL_DESPLZ),a
262+  8E6E
263+  8E6E 21 FF 84     	ld hl,Columns
264+  8E71 34           	inc (hl)
265+  8E72 3A 12 85     	ld a,(Cuad_objeto)
266+  8E75 E6 01        	and 1
267+  8E77 28 0F        	jr z,1F
268+  8E79 2A 00 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8E7C 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8E7D 22 00 85     	ld (Posicion_actual),hl
271+  8E80 CD 5A 90     	call Genera_coordenadas
272+  8E83 CD EE 8F     	call Inc_CTRL_DESPLZ
273+  8E86 18 03        	jr 2F
274+  8E88 CD EE 8F     1 call Inc_CTRL_DESPLZ
275+  8E8B C9           2 ret
276+  8E8C
277+  8E8C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8E8C              ;
279+  8E8C              ;	24/7/22
280+  8E8C              ;
281+  8E8C              ;	Ciclo_completo.
282+  8E8C              ;
283+  8E8C              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8E8C              ;
285+  8E8C              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8E8C              ; 	Decrementamos (Columns).
287+  8E8C              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8E8C              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8E8C
290+  8E8C
291+  8E8C 3A 06 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8E8F FE FF        	cp $ff
293+  8E91 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8E93 E6 F0        	and $f0
295+  8E95 20 28        	jr nz,3F
296+  8E97
297+  8E97              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8E97
299+  8E97 3A 06 85     	ld a,(CTRL_DESPLZ)
300+  8E9A 47           	ld b,a
301+  8E9B 3E F8        	ld a,$f8
302+  8E9D 80           	add b
303+  8E9E 32 06 85     	ld (CTRL_DESPLZ),a
304+  8EA1 18 1C        	jr 3F
305+  8EA3 21 FF 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8EA6 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8EA7 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8EA8 32 06 85     	ld (CTRL_DESPLZ),a
309+  8EAB 3A 12 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8EAE E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8EB0 20 0A        	jr nz,2F
312+  8EB2 2A 00 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8EB5 23           	inc hl
314+  8EB6 22 00 85     	ld (Posicion_actual),hl
315+  8EB9 CD 5A 90     	call Genera_coordenadas
316+  8EBC
317+  8EBC              ; Inicia el puntero de Sprite.
318+  8EBC
319+  8EBC CD C3 86     2 call Inicia_puntero_objeto_der
320+  8EBF C9           3 ret
321+  8EC0
322+  8EC0              ; ******************************************************************************************************************************************************************************************
323+  8EC0              ;
324+  8EC0              ;	15/02/23
325+  8EC0              ;
326+  8EC0              ;	Mov_left.
327+  8EC0              ;
328+  8EC0              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8EC0              ;
330+  8EC0              Mov_left
331+  8EC0
332+  8EC0 21 2B 85     	ld hl,Ctrl_0
333+  8EC3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8EC5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8EC5              ; 																	; _ en el caso de que no lo haya.
336+  8EC5 3A 2B 85     	ld a,(Ctrl_0)
337+  8EC8 CB 77        	bit 6,a
338+  8ECA 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8ECC
340+  8ECC CD E8 8F     	call Stop_Amadeus_left
341+  8ECF C8           	ret z
342+  8ED0 20 50        	jr nz,8F
343+  8ED2
344+  8ED2 3A 04 85     11 ld a,(Coordenada_X)
345+  8ED5 A7           	and a
346+  8ED6 20 4A        	jr nz,8F
347+  8ED8
348+  8ED8 3A 06 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8EDB A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8EDC 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8EDE
352+  8EDE              ; ---------- ---------- ----------
353+  8EDE
354+  8EDE 3A 13 85     	ld a,(Vel_left)
355+  8EE1 FE 02        	cp 2
356+  8EE3 28 0F        	jr z,1F
357+  8EE5 38 04        	jr c,6F
358+  8EE7 FE 04        	cp 4
359+  8EE9 28 12        	jr z,7F
360+  8EEB
361+  8EEB              ; ---------- ---------- ----------
362+  8EEB
363+  8EEB 3A 06 85     6 ld a,(CTRL_DESPLZ)
364+  8EEE FE F9        	cp $f9
365+  8EF0 20 30        	jr nz,8F
366+  8EF2 18 10        	jr 4F
367+  8EF4 3A 06 85     1 ld a,(CTRL_DESPLZ)
368+  8EF7 FE FA        	cp $fa
369+  8EF9 20 27        	jr nz,8F
370+  8EFB 18 07        	jr 4F
371+  8EFD 3A 06 85     7 ld a,(CTRL_DESPLZ)
372+  8F00 FE FC        	cp $fc
373+  8F02 20 1E        	jr nz,8F
374+  8F04
375+  8F04              ; ---------- ---------- ----------
376+  8F04
377+  8F04              4
378+  8F04 CD 10 90     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8F07              ;	call Reinicio
380+  8F07
381+  8F07              ; ---------- ---------- ----------
382+  8F07
383+  8F07 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  8F09 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  8F0A
386+  8F0A 2A 0A 85     	ld hl,(Indice_Sprite_izq)
387+  8F0D 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
388+  8F10
389+  8F10 CD 29 8F     	call DESPLZ_IZQ
390+  8F13 C1           	pop bc
391+  8F14 10 F3        	djnz 5B
392+  8F16 2A 00 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  8F19 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  8F1A 22 00 85     	ld (Posicion_actual),hl
395+  8F1D CD 5A 90     	call Genera_coordenadas
396+  8F20 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  8F22
398+  8F22              ; ---------- ---------- ----------
399+  8F22              ; Movemos, no hay recolocación.
400+  8F22
401+  8F22 2A 00 85     8 ld hl,(Posicion_actual)
402+  8F25 CD 29 8F     	call DESPLZ_IZQ
403+  8F28 C9           2 ret
404+  8F29
405+  8F29              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  8F29              ;
407+  8F29              ;	22/9/22
408+  8F29
409+  8F29              DESPLZ_IZQ
410+  8F29
411+  8F29 CD 38 8F     	call Desplaza_izquierda
412+  8F2C CD 84 8F         call modifica_parametros_1er_DESPLZ
413+  8F2F CD AC 8F     	call Ciclo_completo_2
414+  8F32 21 2B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  8F35 CB BE        	res 7,(hl)
416+  8F37 C9           	ret
417+  8F38
418+  8F38              Desplaza_izquierda
419+  8F38
420+  8F38 3A 13 85     	ld a,(Vel_left)
421+  8F3B 47           	ld b,a
422+  8F3C 2A 0E 85     	ld hl,(Puntero_DESPLZ_izq)
423+  8F3F 23           1 inc hl
424+  8F40 23           	inc hl
425+  8F41 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  8F43 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
427+  8F46 CD AC 86     	call Extrae_address
428+  8F49 22 02 85     	ld (Puntero_objeto),hl
429+  8F4C
430+  8F4C              ; Modifica (Puntero_DESPLZ_der).
431+  8F4C
432+  8F4C              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  8F4C              ; Cuántos movimientos hemos hecho ??
434+  8F4C              ; DE contiene (Puntero_DESPLZ_izq).
435+  8F4C
436+  8F4C 2A 0A 85     7 ld hl,(Indice_Sprite_izq)
437+  8F4F EB           	ex de,hl
438+  8F50 A7           	and a
439+  8F51 ED 52        	sbc hl,de
440+  8F53 CB 3D        	srl l
441+  8F55 3E 08        6 ld a,8
442+  8F57 95           	sub l
443+  8F58 30 1E        	jr nc,3F
444+  8F5A
445+  8F5A              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  8F5A              ; B="0".
447+  8F5A
448+  8F5A 04           4 inc b
449+  8F5B 3C           	inc a
450+  8F5C 20 FC        	jr nz,4B
451+  8F5E 78           	ld a,b
452+  8F5F 08           	ex af,af
453+  8F60 2A 0A 85     	ld hl,(Indice_Sprite_izq)
454+  8F63 23           5 inc hl
455+  8F64 23           	inc hl
456+  8F65 10 FC        	djnz 5B
457+  8F67 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
458+  8F6A CD AC 86     	call Extrae_address
459+  8F6D 22 02 85     	ld (Puntero_objeto),hl
460+  8F70
461+  8F70              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  8F70              ; _(Posicion_actual).
463+  8F70
464+  8F70 21 00 85     	ld hl,Posicion_actual
465+  8F73 35           	dec (hl)
466+  8F74 08           	ex af,af
467+  8F75 6F           	ld l,a
468+  8F76 18 DD        	jr 6B
469+  8F78
470+  8F78              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  8F78
472+  8F78 47           3 ld b,a
473+  8F79 2A 08 85     	ld hl,(Indice_Sprite_der)
474+  8F7C 23           2 inc hl
475+  8F7D 23           	inc hl
476+  8F7E 10 FC        	djnz 2B
477+  8F80 22 0C 85     	ld (Puntero_DESPLZ_der),hl
478+  8F83 C9           8 ret
479+  8F84
480+  8F84              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  8F84              ;
482+  8F84              ;	modifica_parametros_1er_DESPLZ
483+  8F84              ;
484+  8F84              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  8F84              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  8F84              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  8F84
488+  8F84 3A 06 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  8F87 A7           	and a
490+  8F88 20 1E        	jr nz,1F
491+  8F8A 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  8F8B 32 06 85         ld (CTRL_DESPLZ),a
493+  8F8E 21 FF 84     	ld hl,Columns
494+  8F91 34           	inc (hl)
495+  8F92 3A 12 85     	ld a,(Cuad_objeto)
496+  8F95 E6 01        	and 1
497+  8F97 20 0F        	jr nz,1F
498+  8F99 2A 00 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  8F9C 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  8F9D 22 00 85     	ld (Posicion_actual),hl
501+  8FA0 CD 5A 90     	call Genera_coordenadas
502+  8FA3 CD FF 8F     	call Dec_CTRL_DESPLZ
503+  8FA6 18 03        	jr 2F
504+  8FA8 CD FF 8F     1 call Dec_CTRL_DESPLZ
505+  8FAB C9           2 ret
506+  8FAC
507+  8FAC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  8FAC
509+  8FAC 3A 06 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  8FAF FE F7        	cp $f7
511+  8FB1 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  8FB3 30 2C        	jr nc,3F
513+  8FB5
514+  8FB5              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  8FB5
516+  8FB5 06 00        	ld b,0
517+  8FB7 04           4 inc b
518+  8FB8 3C           	inc a
519+  8FB9 FE F7        	cp $f7
520+  8FBB 20 FA        	jr nz,4B
521+  8FBD 3E FF        	ld a,$ff
522+  8FBF 90           	sub b
523+  8FC0 32 06 85     	ld (CTRL_DESPLZ),a
524+  8FC3 18 1C        	jr 3F
525+  8FC5
526+  8FC5              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  8FC5
528+  8FC5 21 FF 84     1 ld hl,Columns
529+  8FC8 35           	dec (hl)
530+  8FC9 AF           	xor a
531+  8FCA 32 06 85     	ld (CTRL_DESPLZ),a
532+  8FCD 3A 12 85     	ld a,(Cuad_objeto)
533+  8FD0 E6 01        	and 1
534+  8FD2 28 0A        	jr z,2F
535+  8FD4 2A 00 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  8FD7 2B           	dec hl
537+  8FD8 22 00 85     	ld (Posicion_actual),hl
538+  8FDB CD 5A 90     	call Genera_coordenadas
539+  8FDE
540+  8FDE              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  8FDE
542+  8FDE CD D6 86     2 call Inicia_puntero_objeto_izq
543+  8FE1 C9           3 ret
544+  8FE2
545+  8FE2              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  8FE2              ;
547+  8FE2              ;	19/10/22
548+  8FE2              ;
549+  8FE2              ;	(cp 29) para un Amadeus de 3 Columns.
550+  8FE2              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  8FE2
552+  8FE2 3A 04 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  8FE5 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  8FE7 C9           	ret
555+  8FE8
556+  8FE8              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  8FE8              ;
558+  8FE8              ;	19/10/22
559+  8FE8              ;
560+  8FE8              ;	(cp 2) para un Amadeus de 3 Columns.
561+  8FE8              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  8FE8
563+  8FE8 3A 04 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  8FEB FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  8FED C9           	ret
566+  8FEE
567+  8FEE              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  8FEE              ;
569+  8FEE              ;	24/7/22
570+  8FEE              ;
571+  8FEE              ;	Inc_CTRL_DESPLZ
572+  8FEE              ;
573+  8FEE              ;
574+  8FEE              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  8FEE
576+  8FEE 21 06 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  8FF1 3A 14 85     	ld a,(Vel_right)
578+  8FF4 A7           	and a
579+  8FF5 28 06        	jr z,1F
580+  8FF7 47           	ld b,a
581+  8FF8 34           3 inc (hl)
582+  8FF9 10 FD        	djnz 3B
583+  8FFB 18 01        	jr 2F
584+  8FFD 34           1 inc (hl)
585+  8FFE C9           2 ret
586+  8FFF
587+  8FFF              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  8FFF              ;
589+  8FFF              ;	5/2/23
590+  8FFF              ;
591+  8FFF              ;	Dec_CTRL_DESPLZ
592+  8FFF              ;
593+  8FFF              ;
594+  8FFF              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  8FFF
596+  8FFF 21 06 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9002 3A 13 85     	ld a,(Vel_left)
598+  9005 A7           	and a
599+  9006 28 06        	jr z,1F
600+  9008 47           	ld b,a
601+  9009 35           3 dec (hl)
602+  900A 10 FD        	djnz 3B
603+  900C 18 01        	jr 2F
604+  900E 35           1 dec (hl)
605+  900F C9           2 ret
606+  9010
607+  9010              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9010
609+  9010 2A 00 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9013 01 1F 00     	ld bc,31
611+  9016 A7           	and a
612+  9017 ED 4A        	adc hl,bc
613+  9019 22 00 85     	ld (Posicion_actual),hl
614+  901C 21 2B 85     	ld hl,Ctrl_0														; $xxx1
615+  901F CB C6        	set 0,(hl)
616+  9021 C9           	ret
617+  9022
618+  9022              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9022
620+  9022 2A 00 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9025 01 1F 00     	ld bc,31
622+  9028 A7           	and a
623+  9029 ED 42        	sbc hl,bc
624+  902B 22 00 85     	ld (Posicion_actual),hl 											; $xx1x
625+  902E 21 2B 85     	ld hl,Ctrl_0
626+  9031 CB CE        	set 1,(hl)
627+  9033 C9           	ret
628+  9034
629+  9034              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  9034
631+  9034 24           Reaparece_abajo inc h
632+  9035 01 E0 17     	ld bc,$17e0
633+  9038 A7           	and a
634+  9039 ED 4A        	adc hl,bc
635+  903B 22 00 85     	ld (Posicion_actual),hl
636+  903E 21 2B 85     	ld hl,Ctrl_0
637+  9041 CB D6        	set 2,(hl)
638+  9043 C9           	ret
639+  9044
640+  9044              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  9044
642+  9044 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  9047 A7           	and a
644+  9048 ED 42        	sbc hl,bc
645+  904A 22 00 85     	ld (Posicion_actual),hl
646+  904D 21 2B 85     	ld hl,Ctrl_0
647+  9050 CB DE        	set 3,(hl)
648+  9052 C9           	ret
649+  9053
650+  9053              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9053
652+  9053 2A 10 85     Reinicio ld hl,(Posicion_inicio)
653+  9056 22 00 85     	ld (Posicion_actual),hl
654+  9059 C9           	ret
# file closed: Direcciones.asm
739   905A              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  905A              ;	12/12/22
  2+  905A              ;
  3+  905A              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  905A              ;	Fila superior "0", Columna izquierda "0".
  5+  905A              ;
  6+  905A              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  905A              ;
  8+  905A              ;	Modifica: A
  9+  905A
 10+  905A C5           Genera_coordenadas push bc
 11+  905B E5           	push hl
 12+  905C 2A 00 85     	ld hl,(Posicion_actual)
 13+  905F 7D           	ld a,l
 14+  9060 E6 1F        	and $1f
 15+  9062 32 04 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9065 CD FA 8C     	call calcula_tercio
 17+  9068 47           	ld b,a
 18+  9069 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  906A 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  906C 7D           	ld a,l
 21+  906D E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  906F 28 05        	jr z,2F
 23+  9071 0C           1 inc c
 24+  9072 D6 20        	sub 32
 25+  9074 20 FB        	jr nz,1B
 26+  9076 0C           2 inc c
 27+  9077 04           	inc b
 28+  9078 05           	dec b
 29+  9079 28 04        	jr z,3F
 30+  907B 3E E0        	ld a,$e0
 31+  907D 10 F2        	djnz 1B
 32+  907F 79           3 ld a,c
 33+  9080 3D           	dec a
 34+  9081 32 05 85     	ld (Coordenada_y),a
 35+  9084 E1           	pop hl
 36+  9085 C1           	pop bc
 37+  9086 C9           	ret
# file closed: Genera_coordenadas.asm
740   9087              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9087
  2+  9087
  3+  9087              ;   11/8/22
  4+  9087              ;
  5+  9087              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9087              ;
  7+  9087              ;   Mov_obj.asm
  8+  9087              ;
  9+  9087              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9087              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9087              ;
 12+  9087              ;   Codificación:
 13+  9087              ;
 14+  9087              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9087
 16+  9087              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9087
 18+  9087 02 40 00     Arriba db 2,%01000000,0
 19+  908A 02 80 00     Abajo db 2,%10000000,0
 20+  908D 02 20 00     Derecha db 2,%00100000,0
 21+  9090 02 10 00     Izquierda db 2,%00010000,0
 22+  9093 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9097 60 42 60 40
 22+  909B 63
 23+  909C 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  90A0 22 A3 80 A0
 24+  90A4 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  90A8 84 A0 83 A0
 25+  90AC 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  90B0 80 A3 22 A0
 26+  90B4 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  90B8 40 60 42 60
 27+  90BC 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  90C0 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  90C4 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  90C8 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  90CC 84
 31+  90CD 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  90D1 84 00
 32+  90D3 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  90D7 03 1F 2F 00  Izquierda_y_derecha db 3,%00011111,%00101111,0
 34+  90DB
 35+  90DB              ; ----- ----- ----- ----- -----
 36+  90DB
 37+  90DB D7 90        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 38+  90DD D3 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 39+  90DF 90 90        Indice_mov_Izquierda defw Izquierda
 40+  90E1 8D 90        Indice_mov_Derecha defw Derecha
 41+  90E3 8A 90        Indice_mov_Abajo defw Abajo
 42+  90E5 87 90        Indice_mov_Arriba defw Arriba
 43+  90E7 C4 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 44+  90E9 C8 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 45+  90EB C0 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 46+  90ED CD 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 47+  90EF 93 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 48+  90F1              ; ----- ----- ----- ----- -----
 49+  90F1
 50+  90F1 3A 31 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 51+  90F4 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 52+  90F5 28 02            jr z,1F
 53+  90F7 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 54+  90F9 3A 32 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 55+  90FC C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 56+  90FE 32 32 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 57+  9101              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 58+  9101 2A 2F 85         ld hl,(Puntero_mov)
 59+  9104 7E               ld a,(hl)
 60+  9105 32 31 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 61+  9108 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 62+  9109 22 2F 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 63+  910C
 64+  910C 3A 33 85     Decoder ld a,(Repetimos_db)
 65+  910F A7               and a
 66+  9110 20 0C            jr nz,12F
 67+  9112 2A 2F 85         ld hl,(Puntero_mov)
 68+  9115 7E               ld a,(hl)
 69+  9116 A7               and a
 70+  9117 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 71+  9119 E6 0F            and $0f
 72+  911B 32 33 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 73+  911E              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 74+  911E 2A 2F 85     12 ld hl,(Puntero_mov)
 75+  9121 CB 7E            bit 7,(hl)
 76+  9123 28 03            jr z,2F
 77+  9125 CD 46 8D         call Mov_down
 78+  9128 2A 2F 85     2 ld hl, (Puntero_mov)
 79+  912B CB 76            bit 6,(hl)
 80+  912D 28 03            jr z,3F
 81+  912F CD 74 8D         call Mov_up
 82+  9132 2A 2F 85     3 ld hl, (Puntero_mov)
 83+  9135 CB 6E            bit 5,(hl)
 84+  9137 28 03            jr z,4F
 85+  9139 CD A2 8D         call Mov_right
 86+  913C 2A 2F 85     4 ld hl, (Puntero_mov)
 87+  913F CB 66            bit 4,(hl)
 88+  9141 28 03            jr z,5F
 89+  9143 CD C0 8E         call Mov_left
 90+  9146
 91+  9146              ; ---------- --------- --------- ---------- ----------
 92+  9146
 93+  9146 3A 33 85     5 ld a,(Repetimos_db)
 94+  9149 A7               and a
 95+  914A 28 07            jr z,6F
 96+  914C 3D               dec a
 97+  914D 32 33 85         ld (Repetimos_db),a
 98+  9150 28 01            jr z,6f
 99+  9152 C9           11 ret
100+  9153 21 31 85     6 ld hl,Contador_db_mov
101+  9156 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
102+  9157 2A 2F 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
103+  915A 23               inc hl
104+  915B 22 2F 85         ld (Puntero_mov),hl
105+  915E 18 F2            jr 11B
106+  9160 2A 2D 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
107+  9163 3A 32 85         ld a,(Incrementa_puntero)
108+  9166 47               ld b,a
109+  9167 23           8 inc hl
110+  9168 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
111+  916A 5E               ld e,(hl)
112+  916B 23               inc hl
113+  916C 56               ld d,(hl)
114+  916D EB               ex de,hl
115+  916E 22 2F 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
116+  9171 18 DF            jr 11B
117+  9173
118+  9173              ; ---------- --------- --------- ---------- ----------
119+  9173              ;
120+  9173              ;   11/8/22
121+  9173              ;
122+  9173              ;   Prepara_Puntero_mov
123+  9173
124+  9173 E5           Prepara_Puntero_mov push hl
125+  9174 D5               push de
126+  9175 2A 2D 85         ld hl,(Puntero_indice_mov)
127+  9178 5E               ld e,(hl)
128+  9179 23               inc hl
129+  917A 56               ld d,(hl)
130+  917B EB               ex de,hl
131+  917C 22 2F 85         ld (Puntero_mov),hl
132+  917F D1               pop de
133+  9180 E1               pop hl
134+  9181 C9               ret
135+  9182
136+  9182              ; ---------- --------- --------- ---------- ----------
137+  9182              ;
138+  9182              ;   11/8/22
139+  9182              ;
140+  9182              ;   Reinicia_el_movimiento
141+  9182
142+  9182 CD 73 91     Reinicia_el_movimiento call Prepara_Puntero_mov
143+  9185 AF               xor a
144+  9186 32 31 85         ld (Contador_db_mov),a
145+  9189 32 32 85         ld (Incrementa_puntero),a
146+  918C
147+  918C              ;    jr $
148+  918C
149+  918C C3 F1 90         jp Movimiento
150+  918F C9               ret
151+  9190              ; ---------- --------- --------- ---------- ----------
152+  9190
153+  9190
154+  9190
155+  9190
156+  9190
157+  9190
158+  9190
159+  9190
160+  9190
161+  9190
162+  9190
163+  9190
164+  9190
165+  9190
166+  9190
167+  9190
168+  9190
169+  9190
# file closed: Patrones_de_mov.asm
741   9190              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  9190              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  9190              ;
  3+  9190              ;	3/1/23
  4+  9190              ;
  5+  9190              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  9190
  7+  9190              ;	ADC HL,SP	LD (addr),SP
  8+  9190              ;	ADD HL,SP	LD SP,(addr)
  9+  9190              ;	ADD IX,SP	LD SP,nn
 10+  9190              ; 	ADD IY,SP	LD SP,HL
 11+  9190              ;				LD SP,IX
 12+  9190              ;	DEC SP		LD SP,IY
 13+  9190
 14+  9190              ;	EX (SP),HL
 15+  9190              ;	EX (SP),IX
 16+  9190              ;	EX (SP),IY
 17+  9190
 18+  9190              ;	INC SP
 19+  9190
 20+  9190
 21+  9190                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 40 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 44 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 44 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 40 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
742   7FC0
743   7FC0              	SAVESNA "Pruebas.sna", START
744   7FC0
745   7FC0
746   7FC0
# file closed: Banco_de_pruebas.asm
