# file opened: Banco_de_pruebas.asm
  1   0000              ;	25/9/22
  2   0000
  3   0000
  4   0000              	DEVICE ZXSPECTRUM48
  5   0000
  6   0000              	org $a0ff
  7   A0FF
  8   A0FF              ;	Vector de interrupciones.
  9   A0FF
 10   A0FF 01 A1         	defw $a101											 ; $9000. Rutina de interrupciones.
 11   A101
 12   A101              	org $a101
 13   A101
 14   A101 CD 99 85     	call Frame
 15   A104 ED 4D        	reti
 16   A106
 17   A106              ; ----- ----- ----- ----- -----
 18   A106
 19   A106              	include "Sprites_e_indices.asm"
# file opened: Sprites_e_indices.asm
  1+  A106              ; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  A106              ;
  3+  A106              ;	3/12/22
  4+  A106              ;
  5+  A106              ;	Sprites e índices.
  6+  A106
  7+  A106              	org $8000
  8+  8000
  9+  8000              ; Badsat_izq. 2x2.
 10+  8000
 11+  8000 10 80        Indice_Badsat_izq defw Badsat_izquierda
 12+  8002 50 81        	defw Badsat_izq_fe
 13+  8004 20 81        	defw Badsat_izq_fd
 14+  8006 F0 80        	defw Badsat_izq_fc
 15+  8008 C0 80        	defw Badsat_izq_fb
 16+  800A 90 80        	defw Badsat_izq_fa
 17+  800C 60 80        	defw Badsat_izq_f9
 18+  800E 30 80        	defw Badsat_izq_f8
 19+  8010
 20+  8010 00 08 02 14  Badsat_izquierda DEFB $00,$08,$02,$14,$02,$2A,$02,$55
 20+  8014 02 2A 02 55
 21+  8018 02 AA 02 54  	DEFB	$02,$AA,$02,$54,$7F,$E8,$03,$60
 21+  801C 7F E8 03 60
 22+  8020 0A E0 17 F8  	DEFB	$0A,$E0,$17,$F8,$2B,$E8,$54,$40
 22+  8024 2B E8 54 40
 23+  8028 AA 60 54 00  	DEFB	$AA,$60,$54,$00,$28,$00,$10,$00 ; Sprite principal a izquierda, (sin desplazar).
 23+  802C 28 00 10 00
 24+  8030
 25+  8030 00 04 00 01  Badsat_izq_f8 DEFB $00,$04,$00,$01,$0A,$00,$01,$15
 25+  8034 0A 00 01 15
 26+  8038 00 01 2A 80  	DEFB	$00,$01,$2A,$80,$01,$55,$00,$01
 26+  803C 01 55 00 01
 27+  8040 2A 00 3F F4  	DEFB	$2A,$00,$3F,$F4,$00,$01,$B0,$00
 27+  8044 00 01 B0 00
 28+  8048 05 70 00 0B  	DEFB	$05,$70,$00,$0B,$FC,$00,$15,$F4
 28+  804C FC 00 15 F4
 29+  8050 00 2A 20 00  	DEFB	$00,$2A,$20,$00,$55,$30,$00,$2A
 29+  8054 55 30 00 2A
 30+  8058 00 00 14 00  	DEFB	$00,$00,$14,$00,$00,$08,$00,$00 ; $F8 (7º DESPLZ a izquierda).
 30+  805C 00 08 00 00
 31+  8060
 32+  8060 00 02 00 00  Badsat_izq_f9 DEFB $00,$02,$00,$00,$85,$00,$00,$8A
 32+  8064 85 00 00 8A
 33+  8068 80 00 95 40  	DEFB	$80,$00,$95,$40,$00,$AA,$80,$00
 33+  806C 00 AA 80 00
 34+  8070 95 00 1F FA  	DEFB	$95,$00,$1F,$FA,$00,$00,$D8,$00
 34+  8074 00 00 D8 00
 35+  8078 02 B8 00 05  	DEFB	$02,$B8,$00,$05,$FE,$00,$0A,$FA
 35+  807C FE 00 0A FA
 36+  8080 00 15 10 00  	DEFB	$00,$15,$10,$00,$2A,$98,$00,$15
 36+  8084 2A 98 00 15
 37+  8088 00 00 0A 00  	DEFB	$00,$00,$0A,$00,$00,$04,$00,$00 ; $F9 (6º DESPLZ a izquierda).
 37+  808C 00 04 00 00
 38+  8090
 39+  8090 00 01 00 00  Badsat_izq_fa DEFB $00,$01,$00,$00,$42,$80,$00,$45
 39+  8094 42 80 00 45
 40+  8098 40 00 4A A0  	DEFB	$40,$00,$4A,$A0,$00,$55,$40,$00
 40+  809C 00 55 40 00
 41+  80A0 4A 80 0F FD  	DEFB	$4A,$80,$0F,$FD,$00,$00,$6C,$00
 41+  80A4 00 00 6C 00
 42+  80A8 01 5C 00 02  	DEFB	$01,$5C,$00,$02,$FF,$00,$05,$7D
 42+  80AC FF 00 05 7D
 43+  80B0 00 0A 88 00  	DEFB	$00,$0A,$88,$00,$15,$4C,$00,$0A
 43+  80B4 15 4C 00 0A
 44+  80B8 80 00 05 00  	DEFB	$80,$00,$05,$00,$00,$02,$00,$00 ; $Fa (5º DESPLZ a izquierda).
 44+  80BC 00 02 00 00
 45+  80C0
 46+  80C0 00 00 80 00  Badsat_izq_fb DEFB $00,$00,$80,$00,$21,$40,$00,$22
 46+  80C4 21 40 00 22
 47+  80C8 A0 00 25 50  	DEFB	$A0,$00,$25,$50,$00,$2A,$A0,$00
 47+  80CC 00 2A A0 00
 48+  80D0 25 40 07 FE  	DEFB	$25,$40,$07,$FE,$80,$00,$36,$00
 48+  80D4 80 00 36 00
 49+  80D8 00 AE 00 01  	DEFB	$00,$AE,$00,$01,$7F,$80,$02,$BE
 49+  80DC 7F 80 02 BE
 50+  80E0 80 05 44 00  	DEFB	$80,$05,$44,$00,$0A,$A6,$00,$05
 50+  80E4 0A A6 00 05
 51+  80E8 40 00 02 80  	DEFB	$40,$00,$02,$80,$00,$01,$00,$00 ; $Fb (4º DESPLZ a izquierda).
 51+  80EC 00 01 00 00
 52+  80F0
 53+  80F0 00 00 40 00  Badsat_izq_fc DEFB $00,$00,$40,$00,$10,$A0,$00,$11
 53+  80F4 10 A0 00 11
 54+  80F8 50 00 12 A8  	DEFB	$50,$00,$12,$A8,$00,$15,$50,$00
 54+  80FC 00 15 50 00
 55+  8100 12 A0 03 FF  	DEFB	$12,$A0,$03,$FF,$40,$00,$1B,$00
 55+  8104 40 00 1B 00
 56+  8108 00 57 00 00  	DEFB	$00,$57,$00,$00,$BF,$C0,$01,$5F
 56+  810C BF C0 01 5F
 57+  8110 40 02 A2 00  	DEFB	$40,$02,$A2,$00,$05,$53,$00,$02
 57+  8114 05 53 00 02
 58+  8118 A0 00 01 40  	DEFB	$A0,$00,$01,$40,$00,$00,$80,$00 ; $Fc (3er DESPLZ a izquierda).
 58+  811C 00 00 80 00
 59+  8120
 60+  8120 00 00 20 00  Badsat_izq_fd DEFB $00,$00,$20,$00,$08,$50,$00,$08
 60+  8124 08 50 00 08
 61+  8128 A8 00 09 54  	DEFB	$A8,$00,$09,$54,$00,$0A,$A8,$00
 61+  812C 00 0A A8 00
 62+  8130 09 50 01 FF  	DEFB	$09,$50,$01,$FF,$A0,$00,$0D,$80
 62+  8134 A0 00 0D 80
 63+  8138 00 2B 80 00  	DEFB	$00,$2B,$80,$00,$5F,$F8,$00,$AF
 63+  813C 5F F8 00 AF
 64+  8140 80 01 51 00  	DEFB	$80,$01,$51,$00,$02,$A9,$00,$01
 64+  8144 02 A9 00 01
 65+  8148 51 00 00 A0  	DEFB	$51,$00,$00,$A0,$00,$00,$40,$00 ; $Fd (2º DESPLZ a izquierda).
 65+  814C 00 00 40 00
 66+  8150
 67+  8150 00 00 10 00  Badsat_izq_fe DEFB $00,$00,$10,$00,$04,$28,$00,$04
 67+  8154 04 28 00 04
 68+  8158 54 00 04 AA  	DEFB	$54,$00,$04,$AA,$00,$05,$54,$00
 68+  815C 00 05 54 00
 69+  8160 04 A8 00 FF  	DEFB	$04,$A8,$00,$FF,$D0,$00,$06,$C0
 69+  8164 D0 00 06 C0
 70+  8168 00 15 C0 00  	DEFB	$00,$15,$C0,$00,$2F,$FC,$00,$57
 70+  816C 2F FC 00 57
 71+  8170 C0 00 A8 80  	DEFB	$C0,$00,$A8,$80,$01,$54,$80,$00
 71+  8174 01 54 80 00
 72+  8178 A8 80 00 50  	DEFB	$A8,$80,$00,$50,$00,$00,$20,$00 ; $Fe (1er DESPLZ a izquierda).
 72+  817C 00 00 20 00
 73+  8180
 74+  8180              ; ----------------------------------------------------------------------------------------
 75+  8180
 76+  8180 90 81        Indice_Badsat_der defw Badsat_derecha
 77+  8182 B0 81        	defw Badsat_der_f8
 78+  8184 E0 81        	defw Badsat_der_f9
 79+  8186 10 82        	defw Badsat_der_fa
 80+  8188 40 82        	defw Badsat_der_fb
 81+  818A 70 82        	defw Badsat_der_fc
 82+  818C A0 82        	defw Badsat_der_fd
 83+  818E D0 82        	defw Badsat_der_fe
 84+  8190
 85+  8190 10 00 28 40  Badsat_derecha DEFB	$10,$00,$28,$40,$54,$40,$AA,$40
 85+  8194 54 40 AA 40
 86+  8198 55 40 2A 40  	DEFB	$55,$40,$2A,$40,$17,$FE,$06,$C0
 86+  819C 17 FE 06 C0
 87+  81A0 07 50 1F E8  	DEFB	$07,$50,$1F,$E8,$17,$D4,$02,$2A
 87+  81A4 17 D4 02 2A
 88+  81A8 06 55 00 2A  	DEFB	$06,$55,$00,$2A,$00,$14,$00,$08 ; Sprite principal a derecha, (sin desplazar).
 88+  81AC 00 14 00 08
 89+  81B0
 90+  81B0 08 00 00 14  Badsat_der_f8 DEFB $08,$00,$00,$14,$20,$00,$2A,$20
 90+  81B4 20 00 2A 20
 91+  81B8 00 55 20 00  	DEFB	$00,$55,$20,$00,$2A,$A0,$00,$15
 91+  81BC 2A A0 00 15
 92+  81C0 20 00 0B FF  	DEFB	$20,$00,$0B,$FF,$00,$03,$60,$00
 92+  81C4 00 03 60 00
 93+  81C8 03 A8 00 0F  	DEFB	$03,$A8,$00,$0F,$F4,$00,$0B,$EA
 93+  81CC F4 00 0B EA
 94+  81D0 00 01 15 00  	DEFB	$00,$01,$15,$00,$03,$2A,$80,$00
 94+  81D4 03 2A 80 00
 95+  81D8 15 00 00 0A  	DEFB	$15,$00,$00,$0A,$00,$00,$04,$00 ; $F8 (1er DESPLZ a derecha).
 95+  81DC 00 00 04 00
 96+  81E0
 97+  81E0 04 00 00 0A  Badsat_der_f9 DEFB $04,$00,$00,$0A,$10,$00,$15,$10
 97+  81E4 10 00 15 10
 98+  81E8 00 2A 90 00  	DEFB	$00,$2A,$90,$00,$15,$50,$00,$0A
 98+  81EC 15 50 00 0A
 99+  81F0 90 00 05 FF  	DEFB	$90,$00,$05,$FF,$80,$01,$B0,$00
 99+  81F4 80 01 B0 00
100+  81F8 01 D4 00 07  	DEFB	$01,$D4,$00,$07,$FA,$00,$05,$F5
100+  81FC FA 00 05 F5
101+  8200 00 00 8A 80  	DEFB	$00,$00,$8A,$80,$01,$95,$40,$00
101+  8204 01 95 40 00
102+  8208 0A 80 00 05  	DEFB	$0A,$80,$00,$05,$00,$00,$02,$00 ; $F9 (2º DESPLZ a derecha).
102+  820C 00 00 02 00
103+  8210
104+  8210 02 00 00 05  Badsat_der_fa DEFB $02,$00,$00,$05,$08,$00,$0A,$88
104+  8214 08 00 0A 88
105+  8218 00 15 48 00  	DEFB	$00,$15,$48,$00,$0A,$A8,$00,$05
105+  821C 0A A8 00 05
106+  8220 48 00 02 FF  	DEFB	$48,$00,$02,$FF,$C0,$00,$D8,$00
106+  8224 C0 00 D8 00
107+  8228 00 EA 00 03  	DEFB	$00,$EA,$00,$03,$FD,$00,$02,$FA
107+  822C FD 00 02 FA
108+  8230 80 00 45 40  	DEFB	$80,$00,$45,$40,$00,$CA,$A0,$00
108+  8234 00 CA A0 00
109+  8238 05 40 00 02  	DEFB	$05,$40,$00,$02,$80,$00,$01,$00 ; $Fa (3er DESPLZ a derecha).
109+  823C 80 00 01 00
110+  8240
111+  8240 01 00 00 02  Badsat_der_fb DEFB $01,$00,$00,$02,$84,$00,$05,$44
111+  8244 84 00 05 44
112+  8248 00 0A A4 00  	DEFB	$00,$0A,$A4,$00,$05,$54,$00,$02
112+  824C 05 54 00 02
113+  8250 A4 00 01 7F  	DEFB	$A4,$00,$01,$7F,$E0,$00,$6C,$00
113+  8254 E0 00 6C 00
114+  8258 00 75 00 01  	DEFB	$00,$75,$00,$01,$FE,$80,$01,$7D
114+  825C FE 80 01 7D
115+  8260 40 00 22 A0  	DEFB	$40,$00,$22,$A0,$00,$65,$50,$00
115+  8264 00 65 50 00
116+  8268 02 A0 00 01  	DEFB	$02,$A0,$00,$01,$40,$00,$00,$80 ; $Fb (4º DESPLZ a derecha).
116+  826C 40 00 00 80
117+  8270
118+  8270 00 80 00 01  Badsat_der_fc DEFB $00,$80,$00,$01,$42,$00,$02,$A2
118+  8274 42 00 02 A2
119+  8278 00 05 52 00  	DEFB	$00,$05,$52,$00,$02,$AA,$00,$01
119+  827C 02 AA 00 01
120+  8280 52 00 00 BF  	DEFB	$52,$00,$00,$BF,$F0,$00,$36,$00
120+  8284 F0 00 36 00
121+  8288 00 3A 80 00  	DEFB	$00,$3A,$80,$00,$FF,$40,$00,$BE
121+  828C FF 40 00 BE
122+  8290 A0 00 11 50  	DEFB	$A0,$00,$11,$50,$00,$32,$A8,$00
122+  8294 00 32 A8 00
123+  8298 01 50 00 00  	DEFB	$01,$50,$00,$00,$A0,$00,$00,$40 ; $Fc (5º DESPLZ a derecha).
123+  829C A0 00 00 40
124+  82A0
125+  82A0 00 40 00 00  Badsat_der_fd DEFB $00,$40,$00,$00,$A1,$00,$01,$51
125+  82A4 A1 00 01 51
126+  82A8 00 02 A9 00  	DEFB	$00,$02,$A9,$00,$01,$55,$00,$00
126+  82AC 01 55 00 00
127+  82B0 A9 00 00 5F  	DEFB	$A9,$00,$00,$5F,$F8,$00,$1B,$00
127+  82B4 F8 00 1B 00
128+  82B8 00 1D 40 01  	DEFB	$00,$1D,$40,$01,$FF,$A0,$00,$1F
128+  82BC FF A0 00 1F
129+  82C0 50 00 08 A8  	DEFB	$50,$00,$08,$A8,$00,$09,$54,$00
129+  82C4 00 09 54 00
130+  82C8 08 A8 00 00  	DEFB	$08,$A8,$00,$00,$50,$00,$00,$20 ; $Fd (6º DESPLZ a derecha).
130+  82CC 50 00 00 20
131+  82D0
132+  82D0 00 20 00 00  Badsat_der_fe DEFB $00,$20,$00,$00,$50,$80,$00,$A8
132+  82D4 50 80 00 A8
133+  82D8 80 01 54 80  	DEFB	$80,$01,$54,$80,$00,$AA,$80,$00
133+  82DC 00 AA 80 00
134+  82E0 54 80 00 2F  	DEFB	$54,$80,$00,$2F,$FC,$00,$0D,$80
134+  82E4 FC 00 0D 80
135+  82E8 00 0E A0 00  	DEFB	$00,$0E,$A0,$00,$FF,$D0,$00,$0F
135+  82EC FF D0 00 0F
136+  82F0 A8 00 04 54  	DEFB	$A8,$00,$04,$54,$00,$04,$AA,$00
136+  82F4 00 04 AA 00
137+  82F8 04 54 00 00  	DEFB	$04,$54,$00,$00,$28,$00,$00,$10 ; $Fe (7º DESPLZ a derecha).
137+  82FC 28 00 00 10
138+  8300
139+  8300              ; Amadeus. 2x2.
140+  8300
141+  8300 20 83        Indice_Amadeus_der defw Amadeus
142+  8302 00 00        	defw 0
143+  8304 40 83        	defw Amadeus_F9							; [$F9] right - [$FA] left
144+  8306 00 00        	defw 0
145+  8308 70 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
146+  830A 00 00        	defw 0
147+  830C A0 83        	defw Amadeus_Fd							; [$FD] right - [$FE] left
148+  830E 00 00        	defw 0	 								; (Fín de índice).
149+  8310
150+  8310 20 83        Indice_Amadeus_izq defw Amadeus
151+  8312 00 00        	defw 0
152+  8314 A0 83        	defw Amadeus_Fd							; [$F9] right - [$FA] left
153+  8316 00 00        	defw 0
154+  8318 70 83        	defw Amadeus_Fb     					; [$FB] right - [$FC] left
155+  831A 00 00        	defw 0
156+  831C 40 83        	defw Amadeus_F9							; [$FD] right - [$FE] left
157+  831E 00 00        	defw 0	 								; (Fín de índice).
158+  8320
159+  8320 01 80 23 C4  Amadeus DEFB $01,$80,$23,$C4,$26,$64,$24,$24
159+  8324 26 64 24 24
160+  8328 2C 34 6D B6  	DEFB	$2C,$34,$6D,$B6,$6F,$F6,$67,$E6
160+  832C 6F F6 67 E6
161+  8330 E7 E7 F3 CF  	DEFB	$E7,$E7,$F3,$CF,$F7,$EF,$FF,$FF
161+  8334 F7 EF FF FF
162+  8338 FB DF FB DF  	DEFB	$FB,$DF,$FB,$DF,$8B,$D1,$71,$8E ; Sprite principal, (sin desplazar).
162+  833C 8B D1 71 8E
163+  8340
164+  8340 00 60 00 08  Amadeus_F9 DEFB	$00,$60,$00,$08,$F1,$00,$09,$99
164+  8344 F1 00 09 99
165+  8348 00 09 09 00  	DEFB	$00,$09,$09,$00,$0B,$0D,$00,$1B
165+  834C 0B 0D 00 1B
166+  8350 6D 80 1B FD  	DEFB	$6D,$80,$1B,$FD,$80,$19,$F9,$80
166+  8354 80 19 F9 80
167+  8358 39 F9 C0 3C  	DEFB	$39,$F9,$C0,$3C,$F3,$C0,$3D,$FB
167+  835C F3 C0 3D FB
168+  8360 C0 3F FF C0  	DEFB	$C0,$3F,$FF,$C0,$3E,$F7,$C0,$3E
168+  8364 3E F7 C0 3E
169+  8368 F7 C0 22 F4  	DEFB	$F7,$C0,$22,$F4,$40,$1C,$63,$80 ; $F9 (2º DESPLZ a derecha).
169+  836C 40 1C 63 80
170+  8370
171+  8370 00 18 00 02  Amadeus_Fb DEFB	$00,$18,$00,$02,$3C,$40,$02,$66
171+  8374 3C 40 02 66
172+  8378 40 02 42 40  	DEFB	$40,$02,$42,$40,$02,$C3,$40,$06
172+  837C 02 C3 40 06
173+  8380 DB 60 06 FF  	DEFB	$DB,$60,$06,$FF,$60,$06,$7E,$60
173+  8384 60 06 7E 60
174+  8388 0E 7E 70 0F  	DEFB	$0E,$7E,$70,$0F,$3C,$F0,$0F,$7E
174+  838C 3C F0 0F 7E
175+  8390 F0 0F FF F0  	DEFB	$F0,$0F,$FF,$F0,$0F,$BD,$F0,$0F
175+  8394 0F BD F0 0F
176+  8398 BD F0 08 BD  	DEFB	$BD,$F0,$08,$BD,$10,$07,$18,$E0 ; $Fb (4º DESPLZ a derecha).
176+  839C 10 07 18 E0
177+  83A0
178+  83A0 00 06 00 00  Amadeus_Fd DEFB	$00,$06,$00,$00,$8F,$10,$00,$99
178+  83A4 8F 10 00 99
179+  83A8 90 00 90 90  	DEFB	$90,$00,$90,$90,$00,$B0,$D0,$01
179+  83AC 00 B0 D0 01
180+  83B0 B6 D8 01 BF  	DEFB	$B6,$D8,$01,$BF,$D8,$01,$9F,$98
180+  83B4 D8 01 9F 98
181+  83B8 03 9F 9C 03  	DEFB	$03,$9F,$9C,$03,$CF,$3C,$03,$DF
181+  83BC CF 3C 03 DF
182+  83C0 BC 03 FF FC  	DEFB	$BC,$03,$FF,$FC,$03,$EF,$7C,$03
182+  83C4 03 EF 7C 03
183+  83C8 EF 7C 02 2F  	DEFB	$EF,$7C,$02,$2F,$44,$01,$C6,$38 ; $Fd (6º DESPLZ a derecha).
183+  83CC 44 01 C6 38
# file closed: Sprites_e_indices.asm
 20   83D0              	include "Entidades.asm"
# file opened: Entidades.asm
  1+  83D0
  2+  83D0              ; Base de datos de entidades e Índice.
  3+  83D0              ;
  4+  83D0              ; 31/01/23
  5+  83D0
  6+  83D0              Indice_de_entidades									; 58 Bytes por entidad.
  7+  83D0
  8+  83D0 16 84        	defw Entidad_1
  9+  83D2 50 84        	defw Entidad_2
 10+  83D4 8A 84        	defw Entidad_3
 11+  83D6 C4 84        	defw Entidad_4
 12+  83D8              ;	...
 13+  83D8              ;	...
 14+  83D8              ;	+ entidades ...
 15+  83D8
 16+  83D8 00 00        	defw 0
 17+  83DA 00 00        	defw 0
 18+  83DC
 19+  83DC              ; ---------- ---------- ---------- ---------- ----------
 20+  83DC
 21+  83DC 02 02        Amadeus_db db 2,2									; (Filas) / (Columns).
 22+  83DE 00 00        	defw 0		 									; (Posicion_actual).
 23+  83E0 00 00        	defw 0	 										; (Puntero_objeto).
 24+  83E2 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 25+  83E5
 26+  83E5 05           	db %00000101									; (Attr).
 27+  83E6
 28+  83E6 00 83        	defw Indice_Amadeus_der							; (Indice_Sprite_der).
 29+  83E8 10 83        	defw Indice_Amadeus_izq							; (Indice_Sprite_izq).
 30+  83EA 00 00        	defw 0		 									; (Puntero_DESPLZ_der).
 31+  83EC 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 32+  83EE
 33+  83EE D0 50        	defw $50d0										; (Posicion_inicio).
 34+  83F0 04           	db 4 											; (Cuad_objeto).
 35+  83F1
 36+  83F1 02 02 00 00  	db 2,2,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 37+  83F5
 38+  83F5 00 00        	db 0,0											; Variables_de_borrado
 39+  83F7 00 00        	defw 0											;	" " " " " " "
 40+  83F9 00 00        	defw 0											;	" " " " " " "
 41+  83FB 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 42+  83FF
 43+  83FF 00 00        	db 0,0											; Variables_de_pintado
 44+  8401 00 00        	defw 0											;	" " " " " " "
 45+  8403 00 00        	defw 0											;	" " " " " " "
 46+  8405 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 47+  8409
 48+  8409 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 49+  840B
 50+  840B 00 00 00 00  	defw 0,0	 									; (Puntero_indice_mov) / (Puntero_mov).
 51+  840F 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 52+  8412
 53+  8412 00           	db 0 											; (Columnas).
 54+  8413 00 00        	defw 0											; (Limite_horizontal).
 55+  8415 00           	db 0											; (Limite_vertical).
 56+  8416
 57+  8416              ; ---------- ---------- ---------- ---------- ----------
 58+  8416
 59+  8416 00 00        Entidad_1 db 0,0									; (Filas) / (Columns).
 60+  8418 00 00        	defw 0											; (Posicion_actual).
 61+  841A 00 00        	defw 0 											; (Puntero_objeto).
 62+  841C 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
 63+  841F
 64+  841F 00           	db %00000000 									; (Attr).
 65+  8420
 66+  8420 00 00        	defw 0											; (Indice_Sprite_der).
 67+  8422 00 00        	defw 0											; (Indice_Sprite_izq).
 68+  8424 00 00        	defw 0											; (Puntero_DESPLZ_der).
 69+  8426 00 00        	defw 0											; (Puntero_DESPLZ_izq).
 70+  8428
 71+  8428 00 00        	defw 0											; (Posicion_inicio).
 72+  842A 00           	db 0											; (Cuad_objeto).
 73+  842B
 74+  842B 00 00 00 00  	db 0,0,0,0										; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
 75+  842F
 76+  842F 00 00        	db 0,0										    ; Variables_de_borrado
 77+  8431 00 00        	defw 0											;	" " " " " " "
 78+  8433 00 00        	defw 0											;	" " " " " " "
 79+  8435 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 80+  8439
 81+  8439 00 00        	db 0,0											; Variables_de_pintado
 82+  843B 00 00        	defw 0											;	" " " " " " "
 83+  843D 00 00        	defw 0											;	" " " " " " "
 84+  843F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
 85+  8443
 86+  8443 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
 87+  8445
 88+  8445 00 00 00 00  	defw 0,0					 					; (Puntero_indice_mov) / (Puntero_mov).
 89+  8449 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
 90+  844C
 91+  844C 00           	db 0 											; (Columnas).
 92+  844D 00 00        	defw 0											; (Limite_horizontal).
 93+  844F 00           	db 0											; (Limite_vertical).
 94+  8450
 95+  8450              ; ---------- ---------- ---------- ---------- ----------
 96+  8450
 97+  8450 02 02        Entidad_2 db 2,2		                            ; (Filas) / (Columns).
 98+  8452 00 00        	defw 0                                          ; (Posicion_actual).
 99+  8454 00 00        	defw 0											; (Puntero_objeto).
100+  8456 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
101+  8459
102+  8459 02           	db %00000010									; (Attr).
103+  845A
104+  845A 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
105+  845C 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
106+  845E 00 00        	defw 0											; (Puntero_DESPLZ_der).
107+  8460 00 00        	defw 0											; (Puntero_DESPLZ_izq).
108+  8462
109+  8462 7E 47        	defw $477e                                      ; (Posicion_inicio).
110+  8464 02           	db 2											; (Cuad_objeto).
111+  8465
112+  8465 02 01 01 01  	db 2,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
113+  8469
114+  8469 00 00        	db 0,0											; Variables_de_borrado
115+  846B 00 00        	defw 0										 	;	" " " " " " "
116+  846D 00 00        	defw 0											;	" " " " " " "
117+  846F 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
118+  8473
119+  8473 00 00        	db 0,0											; Variables_de_pintado
120+  8475 00 00        	defw 0											;	" " " " " " "
121+  8477 00 00        	defw 0											;	" " " " " " "
122+  8479 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
123+  847D
124+  847D 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
125+  847F
126+  847F 0B 91 00 00  	defw Indice_mov_Escaloncitos_izquierda_abajo,0  ; (Puntero_indice_mov) / (Puntero_mov).
127+  8483 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
128+  8486
129+  8486 00           	db 0 											; (Columnas).
130+  8487 00 00        	defw 0											; (Limite_horizontal).
131+  8489 00           	db 0											; (Limite_vertical).
132+  848A
133+  848A              ; ---------- ---------- ---------- ---------- ----------
134+  848A
135+  848A 02 02        Entidad_3 db 2,2                                 	; (Filas) / (Columns).
136+  848C 00 00        	defw 0                                          ; (Posicion_actual).
137+  848E 00 00        	defw 0											; (Puntero_objeto).
138+  8490 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
139+  8493
140+  8493 04           	db %00000100									; (Attr).
141+  8494
142+  8494 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
143+  8496 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
144+  8498
145+  8498 00 00        	defw 0											; (Puntero_DESPLZ_der).
146+  849A 00 00        	defw 0											; (Puntero_DESPLZ_izq).
147+  849C
148+  849C A1 47        	defw $47a1                                      ; (Posicion_inicio).
149+  849E 01           	db 1											; (Cuad_objeto).
150+  849F
151+  849F 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
152+  84A3
153+  84A3 00 00        	db 0,0											; Variables_de_borrado
154+  84A5 00 00        	defw 0										 	;	" " " " " " "
155+  84A7 00 00        	defw 0											;	" " " " " " "
156+  84A9 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
157+  84AD
158+  84AD 00 00        	db 0,0											; Variables_de_pintado
159+  84AF 00 00        	defw 0											;	" " " " " " "
160+  84B1 00 00        	defw 0											;	" " " " " " "
161+  84B3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
162+  84B7
163+  84B7 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
164+  84B9
165+  84B9 0D 91 00 00  	defw Indice_mov_Onda_senoidal,0					; (Puntero_indice_mov) / (Puntero_mov).
166+  84BD 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
167+  84C0
168+  84C0 00           	db 0 											; (Columnas).
169+  84C1 00 00        	defw 0											; (Limite_horizontal).
170+  84C3 00           	db 0											; (Limite_vertical).
171+  84C4
172+  84C4              ; ---------- ---------- ---------- ---------- ----------
173+  84C4
174+  84C4 02 02        Entidad_4 db 2,2                                  	; (Filas) / (Columns).
175+  84C6 00 00        	defw 0                                          ; (Posicion_actual).
176+  84C8 00 00        	defw 0 											; (Puntero_objeto).
177+  84CA 00 00 00     	db 0,0,0										; (Coordenada_X) / (Coordenada_Y) / (CTRL_DESPLZ).
178+  84CD
179+  84CD 01           	db %00000001									; (Attr).
180+  84CE
181+  84CE 80 81        	defw Indice_Badsat_der							; (Indice_Sprite_der).
182+  84D0 00 80        	defw Indice_Badsat_izq							; (Indice_Sprite_izq).
183+  84D2
184+  84D2 00 00        	defw 0											; (Puntero_DESPLZ_der).
185+  84D4 00 00        	defw 0											; (Puntero_DESPLZ_izq).
186+  84D6
187+  84D6 BE 47        	defw $47be                                      ; (Posicion_inicio).
188+  84D8 00           	db 0											; (Cuad_objeto).
189+  84D9
190+  84D9 01 01 01 01  	db 1,1,1,1                                      ; (Vel_left) / (Vel_right) / (Vel_up) / (Vel_down).
191+  84DD
192+  84DD 00 00        	db 0,0											; Variables_de_borrado
193+  84DF 00 00        	defw 0										 	;	" " " " " " "
194+  84E1 00 00        	defw 0											;	" " " " " " "
195+  84E3 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
196+  84E7
197+  84E7 00 00        	db 0,0											; Variables_de_pintado
198+  84E9 00 00        	defw 0											;	" " " " " " "
199+  84EB 00 00        	defw 0											;	" " " " " " "
200+  84ED 00 00 00 00  	db 0,0,0,0										;	" " " " " " "
201+  84F1
202+  84F1 00 00        	db 0,0											; (Ctrl_0) / (Obj_dibujado).
203+  84F3
204+  84F3 FD 90 00 00  	defw Indice_mov_Izquierda,0                     ; (Puntero_indice_mov) / (Puntero_mov).
205+  84F7 00 00 00     	db 0,0,0										; (Contador_db_mov) / (Incrementa_puntero) / (Repetimos_db).
206+  84FA
207+  84FA 00           	db 0 											; (Columnas).
208+  84FB 00 00        	defw 0											; (Limite_horizontal).
209+  84FD 00           	db 0											; (Limite_vertical).
210+  84FE
# file closed: Entidades.asm
 21   84FE
 22   84FE              ; ******************************************************************************************************************************************************************************************
 23   84FE              ; Constantes.
 24   84FE              ; ******************************************************************************************************************************************************************************************
 25   84FE              ;
 26   84FE              ; 8/11/22
 27   84FE              ;
 28   84FE              ; Constantes generales.
 29   84FE              ;
 30   84FE
 31   84FE              Centro_arriba equ $0160 								; Emplearemos estas constantes en la rutina de `recolocación´ del objeto:_
 32   84FE              Centro_abajo equ $0180 									; _[Comprueba_limite_horizontal]. El byte alto en las dos primeras constantes_
 33   84FE              Centro_izquierda equ $0f 								; _indica el tercio de pantalla, (línea $60 y $80 del 2º tercio de pantalla).
 34   84FE              Centro_derecha equ $10 									; Las constantes (Centro_izquierda) y (Centro_derecha) indican la columna $0f y $10 de pantalla.
 35   84FE              Album_de_fotos equ $7000								; En (Album_de_fotos) vamos a ir almacenando los valores_
 36   84FE
 37   84FE              ;                                   				    ; _de los registros y las llamadas a [Pintorrejeo].
 38   84FE              ;                               				        ; De momento situamos este almacén en $7000.
 39   84FE
 40   84FE
 41   84FE              ; ******************************************************************************************************************************************************************************************
 42   84FE              ; Variables.
 43   84FE              ; ******************************************************************************************************************************************************************************************
 44   84FE              ;
 45   84FE              ; 10/11/22
 46   84FE              ;
 47   84FE              ; Variables de DRAW. (Motor principal).
 48   84FE              ;
 49   84FE              ; (Variables_de_borrado) *** (Variables_de_pintado).	8 Bytes.
 50   84FE
 51   84FE 02           Filas db 2												; Filas. [DRAW]
 52   84FF 02           Columns db 2  											; Nº de columnas. [DRAW]
 53   8500 00 00        Posicion_actual defw 0									; Dirección actual del Sprite. [DRAW]
 54   8502 00 00        Puntero_objeto defw 0									; Donde están los datos para pintar el Sprite.
 55   8504 00           Coordenada_X db 0 										; Coordenada X del objeto. (En chars.)
 56   8505 00           Coordenada_y db 0 										; Coordenada Y del objeto. (En chars.)
 57   8506
 58   8506              ; ---------- ---------- ---------- ---------;      ;---------
 59   8506
 60   8506 00           CTRL_DESPLZ db 0										; Este byte nos indica la posición que tiene el Sprite dentro del mapa de desplazamientos.
 61   8507              ; 														; El hecho de que este byte sea distinto de "0", indica que se ha modificado el nº de columnas del objeto.
 62   8507              ; 														; Cuando vamos a imprimir un Sprite en pantalla, la rutina de pintado consultará este byte para situar (Puntero_objeto). [Mov_left].
 63   8507 04           Attr db %00000100										; Atributos de la entidad:
 64   8508
 65   8508              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
 66   8508              ;
 67   8508              ;	COLORES: 0 ..... NEGRO
 68   8508              ;    		 1 ..... AZUL
 69   8508              ; 			 2 ..... ROJO
 70   8508              ;			 3 ..... MAGENTA
 71   8508              ; 			 4 ..... VERDE
 72   8508              ; 			 5 ..... CIAN
 73   8508              ;			 6 ..... AMARILLO
 74   8508              ; 			 7 ..... BLANCO
 75   8508
 76   8508 80 81        Indice_Sprite_der defw Indice_Badsat_der
 77   850A 00 80        Indice_Sprite_izq defw Indice_Badsat_izq
 78   850C 00 00        Puntero_DESPLZ_der defw 0
 79   850E 00 00        Puntero_DESPLZ_izq defw 0
 80   8510
 81   8510 3E 47        Posicion_inicio defw $473e								; Dirección de pantalla donde aparece el objeto. [DRAW].
 82   8512 02           Cuad_objeto db 2			 							; Almacena el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4). [DRAW]
 83   8513
 84   8513              ; Variables de objeto. (Características).
 85   8513
 86   8513 01           Vel_left db 1 											; Velocidad izquierda. Nº de píxeles que desplazamos el objeto a izquierda. 1, 2, 4 u 8 px.
 87   8514 01           Vel_right db 1 											; Velocidad derecha. Nº de píxeles que desplazamos el objeto a derecha. 1, 2, 4 u 8 px.
 88   8515 01           Vel_up db 1 											; Velocidad subida. Nº de píxeles que desplazamos el objeto hacia arriba. (De 1 a 7px).
 89   8516 01           Vel_down db 1 											; Velocidad bajada. Nº de píxeles que desplazamos el objeto hacia abajo. (De 1 a 7px).
 90   8517
 91   8517 00 00        Variables_de_borrado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 92   8519 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 93   851B 00 00        	defw 0
 94   851D 00 00 00 00  	db 0,0,0,0
 95   8521
 96   8521 00 00        Variables_de_pintado db 0,0 							; Pequeño almacén donde guardaremos, (ANTES DE DESPLAZAR), las variables requeridas por [DRAW]. Filas, Columns, Posicion_actual y CTRL_DESPLZ.
 97   8523 00 00        	defw 0
 98   8525 00 00        	defw 0 												; Estas variables se modifican una vez desplazado el objeto. Nuestra intención es: PINTAR1-MOVER-BORRAR1-PINTAR2...
 99   8527 00 00 00 00  	db 0,0,0,0
100   852B
101   852B              ; Variables de funcionamiento de las rutinas de movimiento. (Mov_left), (Mov_right), (Mov_up), (Mov_down).
102   852B
103   852B 00           Ctrl_0 db 0 											; Byte de control. A través de este byte de control. Las rutinas de desplazamiento: [Mov_right], [Mov_left], [Mov_up] y [Mov_down],_
104   852C              ;														; _indican a las subrutinas de recolocación del objeto de la rutina [DRAW]: [Comprueba_limite_horizontal] y [Comprueba_limite_vertical],_
105   852C              ; 														; _que desaparecemos por un extremo de la pantalla y hemos de `reaparecer´ por el contrario.
106   852C              ; 														; Este dato es necesario debido a que las rutinas de recolocación, están ideadas para recolocar el puntero (Posicion_actual), cuando pasamos_
107   852C              ; 														; _de un cuadrante a otro de la pantalla pero no preveen la `desaparición´ por un extremo del cuadrante y la `reaparición´ por el otro.
108   852C              ;
109   852C              ; 														DESCRIPCIÖN:
110   852C              ;
111   852C              ; 														SET 0, [Reaparece_derecha]. El bit 0 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_left] detecta que el objeto ha `desaparecido´ por el_
112   852C              ; 																_lado izquierdo de la pantalla y ha de `reaparecer´ por el derecho. ([Comprueba_limite_vertical]).
113   852C              ; 														SET 1, [Reaparece_izquierda]. El bit 1 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_right] detecta que el objeto ha `desaparecido´ por el_
114   852C              ; 																_lado derecho de la pantalla y ha de `reaparecer´ por el izquierdo. ([Comprueba_limite_vertical]).
115   852C              ; 														SET 2, [Reaparece_abajo]. El bit 2 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_up] detecta que el objeto ha `desaparecido´ por la_
116   852C              ; 																_parte superior de la pantalla y ha de `reaparecer´ por el inferior. ([Comprueba_limite_horizontal]).
117   852C              ; 														SET 3, [Reaparece_arriba]. El bit 3 de (Ctrl_0) se coloca a "1" cuando la rutina [Mov_down] detecta que el objeto ha `desaparecido´ por la_
118   852C              ; 																_parte inferior de la pantalla y ha de `reaparecer´ por la superior. ([Comprueba_limite_horizontal]).
119   852C              ; 														SET 4, El Bit4 a "1", indica que hubo movimiento de la entidad. Necesitamos esta información
120   852C              ;												                _para "NO BORRAR/PINTAR" en objeto si NO hubo MOVIMIENTO.
121   852C              ;														SET 5, La rutina [Inicializacion] de Draw_XOR.asm, pone este bit a "1". Con esta información evitamos ejecutar las
122   852C              ;																_rutinas: (Comprueba_limite_horizontal) y (Comprueba_limite_vertical) justo después de `inicializar´ un objeto.
123   852C              ; 														SET 6, Está a "1" si el Sprite que tenemos cargado en el `Engine´ es AMADEUS.
124   852C              ;
125   852C              ; 														SET 7, El bit 7 se encuentra alto, ("1"), cuando el último movimiento horizontal se ha producido a la "DERECHA".
126   852C              ; 															   _ Utilizo la información que proporciona este BIT para modificar (CTRL_DESPLZ) si el siguiente movimiento_
127   852C              ; 															   _ se va a producir a la izquierda. "1" DERECHA - "0" IZQUIERDA.
128   852C
129   852C 00           Obj_dibujado db 0 										; Indica a [DRAW] si hay que PINTAR o BORRAR el objeto.
130   852D
131   852D              ; Movimiento.
132   852D
133   852D F9 90        Puntero_indice_mov defw Indice_mov_Izquierda_y_derecha
134   852F 00 00        Puntero_mov defw 0
135   8531 00           Contador_db_mov db 0
136   8532 00           Incrementa_puntero db 0
137   8533 00           Repetimos_db db 0
138   8534
139   8534              ; Variables de funcionamiento. [DRAW].
140   8534
141   8534 00           Columnas db 0
142   8535 00 00        Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_
143   8537              ; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
144   8537 00           Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
145   8538
146   8538              ; 59 Bytes por entidad.
147   8538              ; ----- ----- De aquí para arriba son datos que hemos de guardar en los almacenes de entidades.
148   8538              ;					         		---------;      ;---------
149   8538
150   8538
151   8538              ; Variables de funcionamiento, (No incluidas en base de datos de entidades), a partir de aquí!!!!!
152   8538              ; Gestión de ENTIDADES.
153   8538
154   8538 00 00        Puntero_store_entidades defw 0
155   853A 00 00        Puntero_restore_entidades defw 0
156   853C 00 00        Indice_restore defw 0
157   853E 01           Numero_de_entidades db 1								; Nº de objetos en pantalla, (contando con Amadeus).
158   853F 00           Numero_de_malotes db 0									; Inicialmente, (Numero_de_malotes)=(Numero_de_entidades).
159   8540              ;														; Esta variable es utilizada por la rutina [Guarda_foto_registros]_
160   8540              ;														; _ para actualizar el puntero (Stack_snapshot) o reiniciarlo cuando_
161   8540              ;														; _ (Numero_de_malotes)="0".
162   8540 00 00        Stack defw 0 											; La rutinas de pintado, utilizan esta_
163   8542              ;														; _variable para almacenar lo posición del puntero_
164   8542              ; 														; _de pila, SP.
165   8542 00 00        Stack_2 defw 0											; 2º variable destinada a almacenar el puntero de pila, SP.
166   8544              ;														; La utiliza la rutina [Extrae_foto_registros].
167   8544 00 70        Stack_snapshot defw Album_de_fotos						; Puntero que indica la posición de memoria donde vamos a guardar_
168   8546              ;														; _el snapshot de los registros de la siguiente entidad.
169   8546              ;														; Inicialmente está situado el la posición $7000, Album_de_fotos.
170   8546
171   8546              ; Gestión de FRAMES.
172   8546
173   8546 00           Switch db 0
174   8547
175   8547              ; Variables de Raster y localización en pantalla.
176   8547
177   8547 00 FF        Temp_Raster defw $ff00
178   8549
179   8549              ; Rutina principal *************************************************************************************************************************************************************************
180   8549              ;
181   8549              ;	14/11/22
182   8549
183   8549 31 FF FF     START ld sp,$ffff										 ; Situamos el inicio de Stack.
184   854C
185   854C 3E A0        	ld a,$a0 											 ; Habilitamos el modo 2 de interrupciones y fijamos el salto a $a0ff
186   854E ED 47        	ld i,a 												 ; Byte alto de la dirección donde se encuentra nuestro vector de interrupciones en el registro I. ($90). El byte bajo será siempre $ff.
187   8550 ED 5E        	IM 2 											     ; Habilitamos el modo 2 de INTERRUPCIONES.
188   8552 F3           	DI
189   8553
190   8553 3E 01        	ld a,1
191   8555 D3 FE        	out ($fe),a
192   8557
193   8557 3E 07        	ld a,%00000111
194   8559 CD 32 8D     	call Cls
195   855C
196   855C              ;	call Pinta_FILAS
197   855C
198   855C CD 62 87     	call Pulsa_ENTER
199   855F
200   855F 21 3E 85     	ld hl,Numero_de_entidades
201   8562 46           	ld b,(hl)
202   8563 04           	inc b
203   8564 05           	dec b
204   8565 28 13        	jr z,3F												; Si no hay entidades, cargamos AMADEUS.
205   8567
206   8567              ;	Cada vez que iniciamos una entidad, hay que hacer una llamada a (Inicia_sprite). Sólo al iniciar!!!!!
207   8567              ;   Inicialmente tengo cargada la 1ª entidad en DRAW.
208   8567              ;	Pintamos el resto de entidades:
209   8567
210   8567 CD 82 86     	call Inicia_punteros_de_entidades
211   856A
212   856A              ;	INICIA ENTIDADES!!!!!
213   856A
214   856A C5           1 push bc  												; Guardo el contador de entidades.
215   856B CD B5 86      	call Inicia_Puntero_objeto
216   856E CD E4 87     	call Draw
217   8571 CD A0 7F     	call Guarda_foto_registros
218   8574 CD FD 86     	call Store_Restore_entidades 				    	; Guardo los parámetros de la 1ª entidad y sitúa (Puntero_store_entidades) en la siguiente.
219   8577 C1           	pop bc
220   8578 10 F0        	djnz 1B  											; Decremento el contador de entidades.
221   857A
222   857A              ; 	INICIA AMADEUS!!!!!
223   857A
224   857A CD 3E 87     3 call Restore_Amadeus
225   857D CD B5 86     	call Inicia_Puntero_objeto
226   8580 CD E4 87     	call Draw
227   8583 CD A0 7F     	call Guarda_foto_registros
228   8586 CD 50 87     	call Store_Amadeus
229   8589
230   8589              ; Volvemos a situar los punteros STORE/RESTORE de entidades en la 1ª entidad.
231   8589
232   8589 CD 82 86     	call Inicia_punteros_de_entidades
233   858C CD 2C 87     	call Restore_Primera_entidad
234   858F
235   858F 3A 3E 85     	ld a,(Numero_de_entidades)
236   8592 3C           	inc a
237   8593 32 3F 85     	ld (Numero_de_malotes),a
238   8596
239   8596 FB           2 ei
240   8597 18 FD        	jr 2B
241   8599
242   8599              ; -----------------------------------------------------------------------------------
243   8599
244   8599              Frame
245   8599
246   8599              ; He de imprimir sólo el nº de fotos que he hecho. Sólo BORRAMOS/PINTAMOS los objetos que se han desplazado.
247   8599              ; Necesito calcular nª de malotes, para ello utilizaré (Stack_snapshot)-(Album_de_fotos).
248   8599
249   8599 3E 07            ld a,7
250   859B D3 FE            out ($fe),a
251   859D CD E8 8A     	call Extrae_foto_registros 							; Pintamos el fotograma anterior.
252   85A0 3E 01            ld a,1
253   85A2 D3 FE            out ($fe),a
254   85A4
255   85A4              ; ----------------------------------------------------------------------
256   85A4
257   85A4 21 00 70     	ld hl,Album_de_fotos
258   85A7 22 44 85         ld (Stack_snapshot),hl								; Hemos impreso en pantalla el total de entidades. Iniciamos el puntero_
259   85AA              ;														; _(Stack_snapshot), (lo situamos al principio de Album_de_fotos).
260   85AA 3A 3E 85         ld a,(Numero_de_entidades)
261   85AD 47               ld b,a
262   85AE A7           	and a
263   85AF 28 20        	jr z,4F												; Entidades="0". Saltamos a Amadeus.
264   85B1
265   85B1 C5           2 push bc
266   85B2 CD FB 85     	call Mov_obj										; MOVEMOS y decrementamos (Numero_de_malotes)
267   85B5 3A 2B 85     	ld a,(Ctrl_0)
268   85B8 CB 67        	bit 4,a
269   85BA 28 03        	jr z,1F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
270   85BC CD 49 86         call Guarda_foto_entidad_a_pintar					; BORRAMOS/PINTAMOS !!!!!!!!!!!!!!!!!!!!
271   85BF
272   85BF              ; Voy a utilizar una rutina de lectura de teclado para disparar con cualquier entidad.
273   85BF              ; 16/02/23.
274   85BF              ; [[[
275   85BF CD 99 87     1 call Detecta_disparo_entidad
276   85C2              ; ]]]
277   85C2
278   85C2              ;1
279   85C2 21 2B 85     	ld hl,Ctrl_0
280   85C5 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
281   85C7 AF           	xor a
282   85C8 32 2C 85     	ld (Obj_dibujado),a
283   85CB CD FD 86     	call Store_Restore_entidades
284   85CE C1           	pop bc
285   85CF 10 E0        	djnz 2B
286   85D1
287   85D1 CD 3E 87     4 call Restore_Amadeus
288   85D4 CD 1A 86     	call Mov_Amadeus
289   85D7 3A 2B 85     	ld a,(Ctrl_0)
290   85DA CB 67        	bit 4,a
291   85DC 28 03        	jr z,3F                                             ; Omitimos BORRAR/PINTAR si no hay movimiento.
292   85DE CD 49 86     	call Guarda_foto_entidad_a_pintar
293   85E1
294   85E1 21 2B 85     3 ld hl,Ctrl_0
295   85E4 CB A6            res 4,(hl)											; Inicializamos el FLAG de movimiento de la entidad.
296   85E6 AF           	xor a
297   85E7 32 2C 85     	ld (Obj_dibujado),a
298   85EA CD 50 87     	call Store_Amadeus
299   85ED
300   85ED              ; -----
301   85ED
302   85ED CD 82 86     	call Inicia_punteros_de_entidades
303   85F0 CD 2C 87     	call Restore_Primera_entidad
304   85F3 CD 98 86     	call Calcula_numero_de_malotes
305   85F6
306   85F6 3E 00        	ld a,0
307   85F8 D3 FE        	out ($fe),a
308   85FA C9           	ret
309   85FB
310   85FB              ; --------------------------------------------------------------------------------------------------------------
311   85FB              ;
312   85FB              ;	29/1/23
313   85FB
314   85FB              Mov_obj
315   85FB
316   85FB              ; En este punto Draw tiene cargado los 52 bytes, (parámetros), de la primera entidad de Indice_de_entidades.
317   85FB
318   85FB AF           	xor a
319   85FC 32 2C 85     	ld (Obj_dibujado),a
320   85FF CD 53 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´. de la entidad almacenada en DRAW en (Variables_de_borrado).
321   8602              ;														; Obj_dibujado="0".
322   8602              ; Movemos Entidades malignas.
323   8602
324   8602 CD 0F 91     	call Movimiento										; Desplazamos el objeto. MOVEMOS !!!!!
325   8605 3A 2B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
326   8608 CB 67        	bit 4,a
327   860A C8           	ret z
328   860B
329   860B              ; ---------
330   860B
331   860B 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
332   860D 32 2C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
333   8610 CD 53 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
334   8613 CD 6A 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
335   8616 CD 39 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen de la "ENTIDAD a borrar", pues ha habido movimiento_
336   8619 C9           	ret													; _de la misma.
337   861A
338   861A              ; --------------------------------------------------------------------------------------------------------------
339   861A              ;
340   861A              ;	29/1/23
341   861A
342   861A              Mov_Amadeus
343   861A
344   861A AF           	xor a
345   861B 32 2C 85     	ld (Obj_dibujado),a
346   861E CD 53 86         call Prepara_var_pintado_borrado                    ; Almaceno las `VARIABLES DE BORRADO´ de Amadeus, (cargadas en DRAW), en (Variables_de_borrado).
347   8621              ;														; Obj_dibujado="0".
348   8621              ; Movemos Amadeus.
349   8621
350   8621 CD 76 87     	call Movimiento_Amadeus 							; MOVEMOS AMADEUS.
351   8624 3A 2B 85     	ld a,(Ctrl_0) 										; Salimos de la rutina SI NO HA HABIDO MOVIMIENTO !!!!!
352   8627 CB 67        	bit 4,a
353   8629 C8           	ret z
354   862A
355   862A              ; ---------
356   862A
357   862A 3E 01        	ld a,1 				 								; Cambiamos (Obj_dibujado) a "1" para poder almacenar el contenido de DRAW en_
358   862C 32 2C 85     	ld (Obj_dibujado),a 								; _(Variables_de_pintado).
359   862F CD 53 86         call Prepara_var_pintado_borrado	                ; HEMOS DESPLAZADO LA ENTIDAD!!!. Almaceno las `VARIABLES DE PINTADO´.
360   8632 CD 6A 86         call Repone_borrar                                  ; Si ha habido movimiento de la entidad, borraremos el FRAME anterior.
361   8635 CD 39 86     	call Guarda_foto_entidad_a_borrar 					; Guarda la imagen a borrar de Amadeus, pues ha habido movimiento_
362   8638 C9           	ret													; _de la nave.
363   8639
364   8639              ; --------------------------------------------------------------------------------------------------------------
365   8639              ;
366   8639              ;	31/01/23
367   8639              ;
368   8639              ;	(Guardo la foto de Amadeus sin ejecutar DRAW, "no RECOLOCACIÓN"). IMÁGEN DE AMADEUS A BORRAR.
369   8639
370   8639              Guarda_foto_entidad_a_borrar
371   8639
372   8639 CD BE 8A     	call Prepara_draw
373   863C CD F8 89     	call calcula_CColumnass
374   863F CD 2F 8A     	call Calcula_puntero_de_impresion					; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
375   8642 CD 84 8A     	call Define_rutina_de_impresion
376   8645 CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
377   8648 C9           	ret
378   8649
379   8649              ; --------------------------------------------------------------------------------------------------------------
380   8649              ;
381   8649              ;	31/01/23
382   8649              ;
383   8649              ;	(Guardo la foto de la entidad ejecutando DRAW, pues ha habido movimiento del Sprite y una posible_
384   8649              ;   _recolocación. Guarda la IMÁGEN DE LA ENTIDAD A PINTAR.
385   8649
386   8649              Guarda_foto_entidad_a_pintar
387   8649
388   8649 CD 76 86     	call Repone_pintar
389   864C CD E4 87     	call Draw
390   864F CD A0 7F     	call Guarda_foto_registros							; Hemos modificado (Stack_snapshot), +6.
391   8652 C9           	ret
392   8653
393   8653              ; --------------------------------------------------------------------------------------------------------------
394   8653              ;
395   8653              ;
396   8653
397   8653 21 FE 84     Prepara_var_pintado_borrado	ld hl,Filas
398   8656 3A 2C 85     	ld a,(Obj_dibujado)
399   8659 A7           	and a
400   865A 28 05        	jr z,1F
401   865C 11 21 85     	ld de,Variables_de_pintado
402   865F 18 03        	jr 2F
403   8661 11 17 85     1 ld de,Variables_de_borrado
404   8664 01 08 00     2 ld bc,8
405   8667 ED B0        	ldir
406   8669 C9           	ret
407   866A
408   866A              ; --------------------------------------------------------------------------------------------------------------
409   866A
410   866A 21 17 85     Repone_borrar ld hl,Variables_de_borrado
411   866D 11 FE 84     	ld de,Filas
412   8670 01 08 00     	ld bc,8
413   8673 ED B0        	ldir
414   8675 C9           	ret
415   8676
416   8676 21 21 85     Repone_pintar ld hl,Variables_de_pintado
417   8679 11 FE 84     	ld de,Filas
418   867C 01 08 00     	ld bc,8
419   867F ED B0        	ldir
420   8681 C9           	ret
421   8682
422   8682              ; *************************************************************************************************************************************************************
423   8682              ;
424   8682              ; 8/1/23
425   8682              ;
426   8682              ; (Puntero_store_entidades) contendrá la dirección donde se encuentran los parámetros de la 1ª entidad del índice.
427   8682              ; (Indice_restore) se sitúa en la 2ª entidad del índice.
428   8682              ; (Puntero_restore_entidades) contendrá la dirección donde se encuentran los parámetros de la 2ª entidad del índice.
429   8682
430   8682              ; Destruye HL y DE !!!!!
431   8682
432   8682              Inicia_punteros_de_entidades
433   8682
434   8682 21 D0 83     	ld hl,Indice_de_entidades
435   8685 CD AF 86         call Extrae_address
436   8688 22 38 85         ld (Puntero_store_entidades),hl
437   868B 21 D2 83     	ld hl,Indice_de_entidades+2
438   868E 22 3C 85     	ld (Indice_restore),hl
439   8691 CD AF 86     	call Extrae_address
440   8694 22 3A 85     	ld (Puntero_restore_entidades),hl
441   8697 C9               ret
442   8698
443   8698              ; -------------------------------------------------------------------------------------------------------------
444   8698              ;
445   8698              ; 30/1/23
446   8698              ;
447   8698
448   8698 2A 44 85     Calcula_numero_de_malotes ld hl,(Stack_snapshot)
449   869B 7D           	ld a,l
450   869C A7           	and a
451   869D 28 0C        	jr z,3F
452   869F AF           	xor a
453   86A0 67           	ld h,a
454   86A1 7D           	ld a,l
455   86A2 D6 06        1 sub 6
456   86A4 28 03        	jr z,2F
457   86A6 24           	inc h
458   86A7 18 F9        	jr 1B
459   86A9 24           2 inc h
460   86AA 7C           	ld a,h
461   86AB 32 3F 85     3 ld (Numero_de_malotes),a
462   86AE C9           	ret
463   86AF
464   86AF              ; *************************************************************************************************************************************************************
465   86AF              ;
466   86AF              ; 20/10/22
467   86AF              ;
468   86AF              ; Extrae la direccioń que contiene un puntero, (HL), también en HL.
469   86AF              ;
470   86AF              ; Destruye el puntero y DE !!!!!
471   86AF
472   86AF 5E           Extrae_address ld e,(hl)
473   86B0 23           	inc hl
474   86B1 56           	ld d,(hl)
475   86B2 2B           	dec hl
476   86B3 EB           	ex de,hl
477   86B4 C9           	ret
478   86B5
479   86B5              ; *************************************************************************************************************************************************************
480   86B5              ;
481   86B5              ;	7/2/23
482   86B5              ;
483   86B5              ;	Iniciamos (Puntero_DESPLZ_der) y (Puntero_DESPLZ_izq).
484   86B5              ;	Estos punteros señalan al Sprite a pintar tras cada movimiento.
485   86B5              ;
486   86B5              ;   Destruye HL y BC !!!!!,
487   86B5              ;
488   86B5              ;	BIT 7 (Ctrl_0). "1" ..... Derecha.
489   86B5              ;					"0" ..... Izquierda.
490   86B5
491   86B5              Inicia_Puntero_objeto
492   86B5
493   86B5 3A 12 85     	ld a,(Cuad_objeto)
494   86B8 E6 01        	and 1
495   86BA F5           	push af
496   86BB CC D9 86     	call z,Inicia_puntero_objeto_izq
497   86BE F1           	pop af
498   86BF 28 2B        	jr z,1F
499   86C1 CD C6 86     	call Inicia_puntero_objeto_der
500   86C4 18 26        	jr 1F
501   86C6
502   86C6              ; Arrancamos desde la parte izquierda de la pantalla.
503   86C6              ; Iniciamos (Indice_Sprite_der).
504   86C6
505   86C6 2A 08 85     Inicia_puntero_objeto_der ld hl,(Indice_Sprite_der)
506   86C9 22 0C 85     	ld (Puntero_DESPLZ_der),hl
507   86CC CD AF 86     	call Extrae_address
508   86CF 22 02 85     	ld (Puntero_objeto),hl
509   86D2
510   86D2 2A 0A 85     	ld hl,(Indice_Sprite_izq)							; Cuando "Iniciamos el Sprite a derecha",_
511   86D5              ;	call Extrae_address
512   86D5 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
513   86D8 C9           	ret
514   86D9
515   86D9              ; Arrancamos desde la parte derecha de la pantalla.
516   86D9              ; Iniciamos (Indice_Sprite_izq).
517   86D9
518   86D9 2A 0A 85     Inicia_puntero_objeto_izq ld hl,(Indice_Sprite_izq)
519   86DC 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
520   86DF CD AF 86     	call Extrae_address
521   86E2 22 02 85     	ld (Puntero_objeto),hl
522   86E5
523   86E5 2A 08 85     	ld hl,(Indice_Sprite_der)							; Cuando "Iniciamos el Sprite a izquierda",_
524   86E8              ;	call Extrae_address									; _situamos (Puntero_DESPLZ_der) en el último defw_
525   86E8 22 0C 85     	ld (Puntero_DESPLZ_der),hl
526   86EB C9           	ret
527   86EC
528   86EC              ; Tenemos que activar el bit6 de (Ctrl_0) si el Sprite que hemos cargado es AMADEUS.
529   86EC
530   86EC 21 20 83     1 ld hl,Amadeus
531   86EF ED 4B 02 85  	ld bc,(Puntero_objeto)
532   86F3 B7 ED 42     	sub hl,bc
533   86F6 C0           	ret nz
534   86F7 21 2B 85     	ld hl,Ctrl_0
535   86FA CB F6        	set 6,(hl) 											; Cuando activamos Amadeus lo indicamos alzando el bit6 de (Ctrl_0). Esta información la utilizaremos para limitar los movimientos_
536   86FC C9           	ret 												; _de nuestra nave en los extremos.
537   86FD
538   86FD              ; *************************************************************************************************************************************************************
539   86FD              ;
540   86FD              ;	8/1/23
541   86FD              ;
542   86FD              ;	Almacena los datos de la 1ª entidad del Indice_de_entidades, (que tenemos cargado en DRAW), en su respectiva BASE DE DATOS.
543   86FD              ;	Cargamos en DRAW los datos de la 2ª entidad del Indice_de_entidades, (de su BASE DE DATOS).
544   86FD
545   86FD              ;	Modifica (Puntero_store_entidades)  y (Puntero_restore_entidades) con las direcciones donde se encuentran los datos_
546   86FD              ;	_de la 2ª y 3ª entidad respectivamente.
547   86FD
548   86FD
549   86FD
550   86FD              Store_Restore_entidades
551   86FD
552   86FD E5           	push hl
553   86FE D5           	push de
554   86FF C5            	push bc
555   8700
556   8700              ;	STORE !!!!!
557   8700              ;	Guarda lo que hay en Draw en la correspondiente `Entidad´.
558   8700
559   8700 21 FE 84     	ld hl,Filas
560   8703 ED 5B 38 85  	ld de,(Puntero_store_entidades) 					; Puntero que se desplaza por las distintas entidades.
561   8707 01 3A 00     	ld bc,58
562   870A ED B0        	ldir												; Hemos GUARDADO los parámetros de la 1ª entidad en su base de datos.
563   870C
564   870C              ;	Incrementa el puntero STORE. Guarda los datos de `Entidad´+1 en Draw, (Puntero RESTORE).
565   870C
566   870C 2A 3A 85     	ld hl,(Puntero_restore_entidades)
567   870F 22 38 85     	ld (Puntero_store_entidades),hl 					; Situamos (Puntero_store_entidades) en la 2ª entidad.
568   8712 11 FE 84     	ld de,Filas 										; Hemos RECUPERADO los parámetros de la 2ª entidad de su base de datos.
569   8715 01 3A 00     	ld bc,58
570   8718 ED B0        	ldir
571   871A
572   871A              ;	Incrementa RESTORE !!!!!
573   871A
574   871A 2A 3C 85         ld hl,(Indice_restore)
575   871D 23           	inc hl
576   871E 23           	inc hl
577   871F 22 3C 85     	ld (Indice_restore),hl
578   8722 CD AF 86         call Extrae_address
579   8725 22 3A 85         ld (Puntero_restore_entidades),hl
580   8728 C1           	pop bc
581   8729 D1           	pop de
582   872A E1           	pop hl
583   872B C9           	ret
584   872C
585   872C              ; **************************************************************************************************
586   872C              ;
587   872C              ;	29/10/22
588   872C              ;
589   872C              ;	Cargamos los datos de la 1º entidad del índice_de_entidades
590   872C
591   872C E5           Restore_Primera_entidad push hl
592   872D D5           	push de
593   872E C5            	push bc
594   872F 2A 38 85     	ld hl,(Puntero_store_entidades)						; (Puntero_store_entidades) apunta a la dbase de la 1ª entidad.
595   8732 11 FE 84     	ld de,Filas
596   8735 01 3A 00     	ld bc,58
597   8738 ED B0        	ldir
598   873A C1           	pop bc
599   873B D1           	pop de
600   873C E1           	pop hl
601   873D C9           	ret
602   873E
603   873E              ; **************************************************************************************************
604   873E              ;
605   873E              ;	25/01/23
606   873E              ;
607   873E              ;	Restore_Amadeus
608   873E              ;
609   873E              ;	Cargamos en DRAW los parámetros de Amadeus.
610   873E              ;
611   873E
612   873E E5           Restore_Amadeus	push hl
613   873F D5           	push de
614   8740 C5            	push bc
615   8741 21 DC 83     	ld hl,Amadeus_db									; Cargamos en DRAW los parámetros de Amadeus.
616   8744 11 FE 84     	ld de,Filas
617   8747 01 3A 00     	ld bc,58
618   874A ED B0        	ldir
619   874C C1           	pop bc
620   874D D1           	pop de
621   874E E1           	pop hl
622   874F C9           	ret
623   8750
624   8750              ; *************************************************************************************************************************************************************
625   8750              ;
626   8750              ;	29/01/23
627   8750              ;
628   8750              ;	Store_Amadeus
629   8750              ;
630   8750              ;	Almacenamos los parámetros de Amadeus, contenidos en DRAW en su base de datos.
631   8750              ;
632   8750
633   8750 E5           Store_Amadeus push hl
634   8751 D5           	push de
635   8752 C5            	push bc
636   8753 21 FE 84     	ld hl,Filas											; Cargamos en DRAW los parámetros de Amadeus.
637   8756 11 DC 83     	ld de,Amadeus_db
638   8759 01 3A 00     	ld bc,58
639   875C ED B0        	ldir
640   875E C1           	pop bc
641   875F D1           	pop de
642   8760 E1           	pop hl
643   8761 C9           	ret
644   8762
645   8762              ; **************************************************************************************************
646   8762
647   8762              ; Teclado.
648   8762
649   8762 3E BF        Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
650   8764 DB FE        	in a,($fe)
651   8766 E6 01        	and $01
652   8768 28 02        	jr z,1f
653   876A 18 F6        	jr Pulsa_ENTER
654   876C C9           1 ret
655   876D
656   876D              ; **************************************************************************************************
657   876D              ;
658   876D              ; Temporización.
659   876D
660   876D              ; $0320 ..... El RASTER va a empezar a pintar el 1er scanline de la primera FILA de la pantalla.
661   876D              ;       ..... (14175 T/States) + 71 es lo que tarda el RASTER en llegar al 1er SCANLINE de la 1ª FILA.
662   876D              ; $00ff ..... Es lo que tarda el RASTER en pintar 1 SCANLINE. (31 T/States) + 71. ..... 102 T/States aprox.
663   876D              ;		..... 224 T/States es lo que tarda el raster en pintar 1 scanline.
664   876D
665   876D              ; $0045 ..... Es lo que tardamos en pintar 1 FILA completa, (8 Scanlines). (1794 T/States) + 71 ..... 1 FILA.
666   876D              ;       ..... (14920 T/States) + 71  ..... Es lo que tarda el RASTER en pintar 1 TERCIO.
667   876D              ; $0365 ..... Llegamos al final de la 1ª FILA, (8 Scanlines).
668   876D
669   876D              ; A partir de $4f61 no hace falta DELAY.
670   876D
671   876D              ;	!!!!!!!! DESTRUYE BC !!!!!!!!!!!
672   876D
673   876D 01 20 03     DELAY LD BC,$0320							;$0320 ..... Delay mínimo
674   8770 0B           wait DEC BC  								;Sumaremos $0045 por FILA a esta cantidad inicial. Ejempl: si el Sprite ocupa la 1ª y 2ª_
675   8771 78           	LD A,B
676   8772 A7           	AND A
677   8773 20 FB        	JR NZ,wait
678   8775 C9           	RET
679   8776
680   8776              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
681   8776              ;
682   8776              ;	16/02/23
683   8776
684   8776              Movimiento_Amadeus
685   8776
686   8776 3E F7        	ld a,$f7		  										; Rutina de TECLADO. Detecta cuando se pulsan las teclas "1" y "2"  y llama a las rutinas de "Mov_izq" y "Mov_der". $f7  detecta fila de teclas: (5,4,3,2,1).
687   8778 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
688   877A E6 01        	and $01													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $01 resulta "0"  llama a la rutina "Mov_izq".
689   877C CC C0 8E         call z,Mov_left											;			"			"			"			"			"			"			"			"
690   877F 3E F7        	ld a,$f7
691   8781 DB FE        	in a,($fe)
692   8783 E6 01        	and $01
693   8785 C8           	ret z
694   8786
695   8786 3E F7        	ld a,$f7
696   8788 DB FE        	in a,($fe)												; Carga en A la información proveniente del puerto $FE, teclado.
697   878A E6 02        	and $02													; Detecta cuando la tecla (1) está actuada. "1" no pulsada "0" pulsada. Cuando la operación AND $02 resulta "0"  llama a la rutina "Mov_der".
698   878C CC A2 8D     	call z,Mov_right										;			"			"			"			"			"			"			"			"
699   878F
700   878F              ; Disparo.
701   878F
702   878F 3E F7        	ld a,$f7												; "5" para disparar.
703   8791 DB FE        	in a,($fe)
704   8793 E6 10        	and $10
705   8795 CC CC 87     	call z,Calcula_punto_de_disparo_inicial
706   8798 C9               ret
707   8799
708   8799              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
709   8799              ;
710   8799              Detecta_disparo_entidad
711   8799
712   8799 3E 7F        	ld a,$7f
713   879B DB FE        	in a,($fe)
714   879D E6 01        	and 1
715   879F C0           	ret nz
716   87A0 CD CC 87     	call Calcula_punto_de_disparo_inicial
717   87A3
718   87A3              ; Pinta indicadores de FILAS. ------------------------------------------------------
719   87A3
720   87A3 21 10 40     Pinta_FILAS ld hl,$4010
721   87A6              ;	ld b,9
722   87A6              ;2 push hl
723   87A6              ;	push bc
724   87A6 06 BF        	ld b,$bf
725   87A8 36 80        1 ld (hl),%10000000
726   87AA CD CA 8A     	call NextScan
727   87AD 10 F9        	djnz 1B
728   87AF              ;	pop bc
729   87AF              ;	pop hl
730   87AF              ;	inc l
731   87AF              ;	djnz 2B
732   87AF 06 03        	ld b,3
733   87B1 21 00 47         ld hl,$4700
734   87B4 CD BA 87     3 call Bucle_1
735   87B7 10 FB            djnz 3B
736   87B9 C9               ret
737   87BA
738   87BA C5           Bucle_1 push bc
739   87BB E5                   push hl
740   87BC D1                   pop de
741   87BD 13                   inc de
742   87BE 01 FF 00             ld bc,255
743   87C1 36 FF                ld (hl),255
744   87C3 ED B0                ldir
745   87C5 23                   inc hl
746   87C6 3E 07                ld a,7
747   87C8 84                   add a,h
748   87C9 67                   ld h,a
749   87CA C1                   pop bc
750   87CB C9                   ret
751   87CC
752   87CC              ; ---------------------------------------------------------------
753   87CC
754   87CC              	include "Disparo.asm"
# file opened: Disparo.asm
  1+  87CC              ; ******************************************************************************************************************************************************************************************
  2+  87CC              ;
  3+  87CC              ;   16/02/23
  4+  87CC              ;
  5+  87CC              ;
  6+  87CC              ;
  7+  87CC              ; 	Calcula la dirección de memoria de pantalla donde se va a iniciar el disparo, (se aplica a_)
  8+  87CC              ;   _entidades y Amadeus).
  9+  87CC
 10+  87CC              Calcula_punto_de_disparo_inicial
 11+  87CC
 12+  87CC 3A 12 85         ld a,(Cuad_objeto)
 13+  87CF FE 02            cp 2
 14+  87D1 38 0A            jr c,1F
 15+  87D3 28 08            jr z,1F
 16+  87D5
 17+  87D5              ; Estamos en mitad inferior de pantalla, (cuadrantes 3 y 4).
 18+  87D5
 19+  87D5 E6 01            and 1
 20+  87D7 28 02            jr z,2F
 21+  87D9
 22+  87D9              ; Estamos en el 3er cuadrante de pantalla.
 23+  87D9
 24+  87D9 18 FE            jr $
 25+  87DB
 26+  87DB              ; Estamos en el 4º cuadrante de pantalla.
 27+  87DB
 28+  87DB 18 FE        2 jr $
 29+  87DD
 30+  87DD              ; Estamos en la mitad superior de pantalla, (cuadrantes 1 y 2).
 31+  87DD
 32+  87DD 28 02        1 jr z,3F
 33+  87DF
 34+  87DF              ; Estamos en el 1er cuadrante de pantalla.
 35+  87DF
 36+  87DF 18 FE            jr $
 37+  87E1
 38+  87E1              ; Estamos en el 2º cuadrante de pantalla.
 39+  87E1
 40+  87E1 18 FE        3 jr $
 41+  87E3
 42+  87E3 C9           10 ret
 43+  87E4
# file closed: Disparo.asm
755   87E4              	include "Draw_XOR.asm"
# file opened: Draw_XOR.asm
  1+  87E4              ; ******************************************************************************************************************************************************************************************
  2+  87E4              ;
  3+  87E4              ; 01/23
  4+  87E4              ;
  5+  87E4              ; DRAW. ************************************************************************************************************************************************************************************
  6+  87E4
  7+  87E4 CD BE 8A     Draw call Prepara_draw
  8+  87E7 7C           	ld a,h 						 					; El objeto existe, o se está iniciando?. Si se está iniciando, (Posicion_inicio = Posicion_actual) y saltamos_
  9+  87E8 A7           	and a 											; _a la subrutina [Inicializacion] donde asignaremos cuadrante y límites.
 10+  87E9 28 05        	jr z,2F
 11+  87EB
 12+  87EB 3A 12 85     	ld a,(Cuad_objeto)			 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a 1F.
 13+  87EE 18 0C        	jr 1F
 14+  87F0 2A 10 85     2 ld hl,(Posicion_inicio) 							; No hay (Posicion_actual), por lo que el objeto se está iniciando.
 15+  87F3 22 00 85     	ld (Posicion_actual),hl							; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina [Inicializacion], (donde asignaremos_
 16+  87F6 CD 85 89     	call Inicializacion   							; _(Limite_horizontal), (Limite_vertical) y (Cuad_objeto). También asignaremos las coordenadas X e Y. (Posición 0,0)_
 17+  87F9              ;													; _la esquina superior izquierda de la pantalla.
 18+  87F9 CD 91 91     	call Prepara_Puntero_mov 						; El objeto está inicializado. Antes de salir inicializamos tb el puntero de movimiento del objeto.
 19+  87FC 3A 2B 85     1 ld a,(Ctrl_0)
 20+  87FF CB 6F        	bit 5,a
 21+  8801 20 06        	jr nz,3F										; Si acabamos de inicializar un objeto, NO COMPROBAMOS LÍMITES.
 22+  8803
 23+  8803 CD 1B 88     	call Comprueba_limite_horizontal
 24+  8806 CD AB 88     	call Comprueba_limite_vertical
 25+  8809
 26+  8809              ; Llegados a este punto, tengo Filas/Columnas en BC y (Cuad_objeto) en A´.
 27+  8809
 28+  8809 CD F8 89     3 call calcula_CColumnass
 29+  880C CD 2F 8A     	call Calcula_puntero_de_impresion				; Después de ejecutar esta rutina tenemos el puntero de impresión en HL.
 30+  880F CD 84 8A     	call Define_rutina_de_impresion
 31+  8812
 32+  8812 3A 2B 85     	ld a,(Ctrl_0)									; Antes de salir de la rutina REStauramos el bit5 de Ctrl_0 para que nos vuelva_
 33+  8815 CB AF        	res 5,a											; _a ser de utilidad.
 34+  8817 32 2B 85     	ld (Ctrl_0),a
 35+  881A
 36+  881A C9           	ret
 37+  881B
 38+  881B              ; *******************************************************************************************************************************************************************************************
 39+  881B              ;	21/01/23
 40+  881B              ;
 41+  881B              ; 	Comprueba_limite_horizontal.
 42+  881B              ;
 43+  881B              ;	La rutina comprueba si hemos sobrepasado el (Limite_horizontal) definido en la rutina [Inicializacion]. Este será:_
 44+  881B              ;	_ $4fc0 si partimos de los cuadrantes 1 o 2 de pantalla o $4820 si partimos de los cuadrantes 3 o 4.
 45+  881B              ;
 46+  881B              ;	Si sobrepasamos o alcanzamos el límite horizontal establecido, la rutina cargará el registro E con un "1".
 47+  881B              ;	Si NO HEMOS SOBREPASADO (Limite_horizontal), E="0".
 48+  881B              ;	E="1" indica que HEMOS SOBREPASADO el (Limite_horizontal).
 49+  881B              ;	E="2" indica que NO HEMOS SOBREPASADO el (Limite_horizontal) pero hemos alcanzado o superado EL CENTRO DE PANTALLA.
 50+  881B
 51+  881B
 52+  881B
 53+  881B 3A 2B 85     Comprueba_limite_horizontal ld a,(Ctrl_0)          	; Si no hemos desaparecido por arriba o por abajo, saltamos a 1F para comprobar_
 54+  881E CB 57        	bit 2,a                                         ; _si hemos llegado o sobrepasado (Limite_horizontal). Seguimos con la rutina.
 55+  8820 28 07        	jr z,1F                                         ; Si por el contrario hemos desaparecido por arriba o por abajo, (bit2/bit3 de (Ctrl_0)="1"))_
 56+  8822 E6 FB        	and $fb 										; _hay que modificar el puntero de posición. (E="1" y salimos de la rutina). Antes inicializaremos los_
 57+  8824 32 2B 85     	ld (Ctrl_0),a 									; _ bits 2 y 3 de (Ctrl_0).
 58+  8827 18 09            jr 6F
 59+  8829 CB 5F        1 bit 3,a
 60+  882B 28 0A            jr z,2F
 61+  882D E6 F7            and $f7
 62+  882F 32 2B 85         ld (Ctrl_0),a
 63+  8832 CD 85 89     6 call Inicializacion
 64+  8835 18 5B            jr 5F
 65+  8837 E5           2 push hl						        			; Guardo (Posicion_actual), HL en la pila.
 66+  8838
 67+  8838              ; ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
 68+  8838              ; Comprobamos si hemos llegado al (Limite_horizontal). E="0".
 69+  8838
 70+  8838 EB           	ex de,hl 										; Averiguamos si hemos llegado o sobrepasado el (Limite_horizontal). Hemos simplificado la operación SBC_
 71+  8839 2A 35 85     	ld hl,(Limite_horizontal) 						; _cargando el tercio de pantalla en el byte alto.
 72+  883C CD 28 8D     	call calcula_tercio 							; (Posicion_actual) - (Limite_horizontal).
 73+  883F 67           	ld h,a
 74+  8840 EB           	ex de,hl 										; ARRIBA a ABAJO .......... E="1" cuando ( Z y NC ).
 75+  8841 CD 28 8D     	call calcula_tercio                             ; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ).
 76+  8844 67           	ld h,a
 77+  8845 A7           	and a
 78+  8846 ED 52        	sbc hl,de 										; Posicíon <"menos"> Límite.
 79+  8848 08           	ex af,af 										; Guardo el registro F con los flags resultantes de la operación SBC.
 80+  8849 3A 12 85     	ld a,(Cuad_objeto)
 81+  884C FE 02        	cp 2
 82+  884E 38 1E        	jr c,3F
 83+  8850 28 1C        	jr z,3F
 84+  8852 08           	ex af,af 										; Partimos de LA MITAD INFERIOR. Recupero resultado de (Posicíon - Límite) en AF.
 85+  8853 28 23            jr z,7F
 86+  8855 38 21            jr c,7F 										; ABAJO a ARRIBA .......... E="1" cuando ( Z y C ). HEMOS SOBREPASADO_
 87+  8857 1E 00         	ld e,0											; _ (Limite_horizontal), saltamos a 7F.
 88+  8859 E1           	pop hl
 89+  885A
 90+  885A              ; Partimos de la mitad INFERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
 91+  885A              ; _para indicar con E="2" en caso necesario.
 92+  885A
 93+  885A E5               push hl
 94+  885B C5               push bc
 95+  885C CD 28 8D     	call calcula_tercio
 96+  885F FE 01        	cp 1
 97+  8861 20 07        	jr nz,11F 										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
 98+  8863 CD 93 88         call Comprueba_centro 							; ABAJO A ARRIBA .......... E="2" cuando ( Z y C ).
 99+  8866 28 26            jr z,9F
100+  8868 38 24            jr c,9F
101+  886A 1E 00        11 ld e,0
102+  886C 18 22            jr 8F
103+  886E 08           3 ex af,af 											; Partimos de LA MITAD SUPERIOR. Recupero resultado de (Posicíon - Límite) en AF.
104+  886F 28 07        	jr z, 7F
105+  8871 30 05        	jr nc, 7F										; E="1" cuando ( Z y NC ).
106+  8873 1E 00         	ld e,0
107+  8875 E1           	pop hl
108+  8876 18 04        	jr 4F
109+  8878 1E 01        7 ld e,1 											; SOBREPASAMOS (Limite_horizontal) !!!. E="1", pop HL y RET.
110+  887A 18 15            jr 10F
111+  887C
112+  887C              ; Partimos de la mitad SUPERIOR de pantalla y `NO HEMOS´ superado (Limite_horizontal). Tenemos que averiguar si hemos superado el centro de pantalla_
113+  887C              ; _para indicar con E="2" en caso necesario.
114+  887C
115+  887C E5           4 push hl
116+  887D C5               push bc											; Guardamos (Posicion_actual) y (Filas/Columns) en la pila.
117+  887E CD 28 8D     	call calcula_tercio
118+  8881 FE 01        	cp 1
119+  8883 20 0B        	jr nz,8F										; Sólo comprobamos la línea centro cuando nos encontramos en el 2º tercio de pantalla.
120+  8885 CD 93 88         call Comprueba_centro 							; ARRIBA a ABAJO .......... E="2" cuando ( Z y NC ).
121+  8888 28 04            jr z,9F
122+  888A 30 02            jr nc,9F
123+  888C 18 02        	jr 8F
124+  888E 1E 02        9 ld e,2
125+  8890 C1           8 pop bc
126+  8891 E1           10 pop hl
127+  8892 C9           5 ret
128+  8893
129+  8893              ; --------------------
130+  8893              ;
131+  8893              ; 25/08/22
132+  8893
133+  8893 CD 28 8D     Comprueba_centro call calcula_tercio
134+  8896 67               ld h,a
135+  8897 08           	ex af,af
136+  8898 FE 02        	cp 2
137+  889A 38 07        	jr c,1F
138+  889C 28 05        	jr z,1F
139+  889E 01 A0 01     	ld bc,$01a0 								  	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad inferior de la misma. !!!!!
140+  88A1 18 03        	jr 2F
141+  88A3 01 60 01     1 ld bc,$0160                                     	 ; ¡¡¡¡¡ CENTRO DE PANTALLA cuando estamos en la mitad superior de la misma. !!!!!
142+  88A6 08           2 ex af,af
143+  88A7 A7               and a
144+  88A8 ED 42            sbc hl,bc
145+  88AA C9               ret
146+  88AB
147+  88AB              ; *********************************************************************************************************************************************************************************************
148+  88AB              ;
149+  88AB              ;   16/8/22
150+  88AB              ;
151+  88AB              ;	Comprueba_limite_vertical
152+  88AB              ;
153+  88AB              ;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
154+  88AB              ;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L.
155+  88AB              ;
156+  88AB
157+  88AB 2A 00 85     Comprueba_limite_vertical ld hl,(Posicion_actual)
158+  88AE 7D           	ld a,l
159+  88AF E6 1F        	and $1F
160+  88B1 57           	ld d,a
161+  88B2 3A 37 85     	ld a,(Limite_vertical)
162+  88B5 BA           	cp d 											; Límite - Posición.
163+  88B6 08           	ex af,af 										; Resultado de CP d en F'.
164+  88B7 3A 12 85     	ld a,(Cuad_objeto)								; Averiguamos en que cuadrante estamos.
165+  88BA CB 47        	bit 0,a
166+  88BC 28 10        	jr z,1F 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [3F], (cuadrantes 2º y 4º).
167+  88BE
168+  88BE              ; Hemos comparado la posición Y de la entidad con (Limite_vertical) y estamos en la mitad IZQUIERDA de la pantalla.
169+  88BE
170+  88BE 08           	ex af,af 										; LADO IZQUIERDO !!!!!!!!!!
171+  88BF 38 28        	jr c,4F 										; Superamos (lIMITE_VERTICAL) cuando hay "acarreo".
172+  88C1
173+  88C1              ; No hay cambio de cuadrante!!!!! Estamos en el lado izquierdo de la pantalla y no hemos sobrepasado (Limite_vertical).
174+  88C1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
175+  88C1
176+  88C1 3A 04 85         ld a,(Coordenada_X)
177+  88C4 16 0F            ld d,Centro_izquierda
178+  88C6 A7               and a
179+  88C7 92               sub d 											 ; Posición - Centro_izquierda.
180+  88C8 28 1E            jr z,3F
181+  88CA 30 1C            jr nc,3F                                         ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
182+  88CC              ;                                                    ; _salimos sin modificar nada.
183+  88CC 18 0E            jr 2F
184+  88CE 08           1 ex af,af 											 ; LADO DERECHO de la pantalla !!!!!!!!!!!
185+  88CF 30 18        	jr nc,4F 										 ; Superamos (lIMITE_VERTICAL) cuando NC.
186+  88D1
187+  88D1              ; No hay cambio de cuadrante!!!!! Estamos en el lado derecho de la pantalla y no hemos sobrepasado (Limite_vertical).
188+  88D1              ; Lo primero que haremos será comprobar si hemos llegado o superado el centro de la pantalla.
189+  88D1
190+  88D1 3A 04 85         ld a,(Coordenada_X)
191+  88D4 16 10            ld d,Centro_derecha
192+  88D6 A7               and a
193+  88D7 92               sub d
194+  88D8 28 0E            jr z,3F
195+  88DA 38 0C            jr c,3F                                          ; Si no hemos superado (Limite_vertical) pero si hemos superado el centro de la pantalla,_
196+  88DC              ;                                                    ; _salimos sin modificar nada.
197+  88DC CB 43        2 bit 0,e
198+  88DE 28 08            jr z,3F 										 ; No hemos sobrepasado (Centro_izquierda). Si E="0", salimos sin modificar posición.
199+  88E0 C5           	push bc 										 ; Reservo (Filas) / (Columns) en la pila.
200+  88E1 CD 75 89         call Modificaccionne
201+  88E4 C1           	pop bc
202+  88E5 CD 85 89         call Inicializacion
203+  88E8 C9           3 ret 				 								 ; Salimos de la rutina.
204+  88E9
205+  88E9              ; ----- ----- ----- Cambio de cuadrante ----- ----- -----
206+  88E9
207+  88E9 C5           4 push bc
208+  88EA 01 FF 84     	ld bc,Columns 		 	 						 ; Cambio de cuadrante. Sobrepasamos (Limite_vertical).
209+  88ED 0A           	ld a,(bc)
210+  88EE 3D           	dec a
211+  88EF 47           	ld b,a 											 ; Columnas-1 en B.
212+  88F0 7D           	ld a,l
213+  88F1 08           	ex af,af                                         ; Cambio de cuadrante, estamos en la parte derecha de la pantalla.
214+  88F2 CB 47        	bit 0,a
215+  88F4 28 03        	jr z,5F
216+  88F6 08           	ex af,af 										 ; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
217+  88F7 18 2E        	jr 7F
218+  88F9
219+  88F9              ; Cambio de cuadrante, partimos de la parte DERECHA de la pantalla. Por el centro ?? o desaparecemos ??.
220+  88F9
221+  88F9 08           5 ex af,af 											 ; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
222+  88FA F5           	push af                                          ; Guardo la posición, (L), en la pila, (la contiene el acumulador).
223+  88FB 3A 2B 85     	ld a,(Ctrl_0)
224+  88FE CB 4F        	bit 1,a
225+  8900 20 1D        	jr nz,6F                                         ; Cambio de cuadrante por desaparecer por la derecha!!!
226+  8902 F1           	pop af                                           ; Cambio de cuadrante por desaparecer por el centro!!!
227+  8903
228+  8903              ; Hemos sobrepasado el (Limite_vertical) de la mitad derecha a la izquierda. Ahora necesitamos saber si E="0".
229+  8903
230+  8903 1C               inc e
231+  8904 1D               dec e
232+  8905 20 07            jr nz,12F
233+  8907 80           	add b 				 							 ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
234+  8908 6F               ld l,a	 										 ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
235+  8909 22 00 85     	ld (Posicion_actual),hl
236+  890C 18 44        13 jr 9F
237+  890E CB 43        12 bit 0,e
238+  8910 20 03            jr nz,14F                                        ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
239+  8912              ;                                                    ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
240+  8912 C1           	pop bc
241+  8913 18 D3        	jr 3B
242+  8915 80           14 add b
243+  8916 6F               ld l,a
244+  8917 22 00 85     	ld (Posicion_actual),hl
245+  891A CD 75 89         call Modificaccionne                             ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
246+  891D 18 33            jr 9F 											 ; _inicializamos y salimos.
247+  891F E6 FD        6 and $fd 											 ; Cambio de cuadrante por desaparecer por la derecha!!!. Reinicializo el bit 1 de (Ctrl_0).
248+  8921 32 2B 85         ld (Ctrl_0),a
249+  8924 F1           	pop af
250+  8925 18 2B        	jr 9F
251+  8927
252+  8927              ; Cambio de cuadrante, partimos de la parte IZQUIERDA de la pantalla. Por el centro ?? o desaparecemos ??.
253+  8927
254+  8927 F5           7 push af
255+  8928 3A 2B 85     	ld a,(Ctrl_0)
256+  892B CB 47        	bit 0,a
257+  892D 20 1D        	jr nz,8F
258+  892F F1           	pop af
259+  8930
260+  8930              ; Hemos sobrepasado el (Limite_vertical) de la mitad IZQUIERDA a la DERECHA. Ahora necesitamos saber si E="0".
261+  8930
262+  8930 1C           	inc e
263+  8931 1D               dec e
264+  8932 20 07            jr nz,10F
265+  8934 90           	sub b
266+  8935 6F               ld l,a
267+  8936 22 00 85     	ld (Posicion_actual),hl
268+  8939 18 17            jr 9F                                           ; Si hemos sobrepasado el (Limite_vertical) pero no hemos llegado al centro horizontal_
269+  893B              ;                                                   ; _de la pantalla, E="0" modificamos L, Inicializamos el objeto y salimos.
270+  893B CB 43        10 bit 0,e
271+  893D 20 03            jr nz,16F                                       ; Si hemos sobrepasado (Limite_vertical) y hemos llegado o superado_
272+  893F              ;                                                   ; _el centro horizontal de la pantalla, E="2", salimos sin modificar nada.
273+  893F C1           	pop bc
274+  8940 18 A6        	jr 3B
275+  8942 90           16 sub b
276+  8943 6F               ld l,a
277+  8944 22 00 85     	ld (Posicion_actual),hl
278+  8947 CD 75 89         call Modificaccionne                            ; Si hemos sobrepasado (Limite_vertical) y (Limite_horizontal), E="1". Modificamos HL,L,_
279+  894A 18 06            jr 9F
280+  894C E6 FE        8 and $fe 											; ; Cambio de cuadrante por desaparecer por la izquierda !!!!!. Reinicializo el bit 0 de (Ctrl_0).
281+  894E 32 2B 85         ld (Ctrl_0),a
282+  8951 F1           	pop af
283+  8952 C1           9 pop bc
284+  8953 1E 00        	ld e,0
285+  8955 CD 85 89         call Inicializacion
286+  8958 F5               push af	 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
287+  8959 08           	ex af,af
288+  895A F1           	pop af 											; Ahora tengo (Cuad_objeto) en A y A´.
289+  895B 18 8B            jr 3B
290+  895D
291+  895D              ; --------------------
292+  895D
293+  895D 06 0F        Modifica_Pos_actual ld b,15                                         ; Scanlines-1 en B.
294+  895F CD D9 8A     1 call PreviousScan
295+  8962 10 FB            djnz 1B
296+  8964 22 00 85     	ld (Posicion_actual),hl
297+  8967 AF           	xor a 											; Carry a "0". Evita que vuelva a entrar consecutivamente.
298+  8968 C9           	ret
299+  8969
300+  8969              ; --------------------
301+  8969
302+  8969 06 0F        Modifica_Pos_actual2 ld b,15                                         ; Scanlines-1 en B.
303+  896B CD CA 8A     1 call NextScan
304+  896E 10 FB            djnz 1B
305+  8970 22 00 85     	ld (Posicion_actual),hl
306+  8973 AF           	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
307+  8974 C9           	ret
308+  8975
309+  8975              ; --------------------
310+  8975              ;
311+  8975              ;	22/01/23
312+  8975              ;
313+  8975              ;	E="1". Hemos cambiado de cuadrante.
314+  8975              ;	Si estamos en la mitad superior de pantalla: CALL [Modifica_Pos_actual].
315+  8975              ;	Si estamos en la mitad inferior de pantalla: CALL [Modifica_Pos_actual2].
316+  8975
317+  8975
318+  8975              Modificaccionne
319+  8975
320+  8975 3A 12 85     	ld a,(Cuad_objeto)
321+  8978 FE 02        	cp 2
322+  897A CC 5D 89         call z,Modifica_Pos_actual                      ; Si por el contrario estamos en la mitad inferior, call Modifica_Pos_actual2.
323+  897D DC 5D 89         call c,Modifica_Pos_actual
324+  8980 C8           	ret z
325+  8981 CD 69 89         call Modifica_Pos_actual2
326+  8984 C9               ret
327+  8985
328+  8985              ; *************************************************************************************************************************************************************************************************
329+  8985              ;
330+  8985              ;	13/8/22
331+  8985              ;
332+  8985              ;	Inicializacion
333+  8985              ;
334+  8985              ;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
335+  8985              ;	Fija los punteros del objeto a pintar, (varían en función del cuadrante en el que nos encontremos).
336+  8985              ;	También calcula los límites horizontal y vertical. Estos dependen del tamaño del objeto a imprimir.
337+  8985              ;
338+  8985              ; 	La rutina se ejecuta cada vez que el objeto supera el (Limite_horizontal) y el (Limite_vertical). Esto sucede_
339+  8985              ;	_ cada vez que el objeto supera el centro de la pantalla tanto en sentido horizontal como vertical y cuando_
340+  8985              ;	_ desaparece/aparece.
341+  8985
342+  8985              ;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto.
343+  8985              ;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el byte de atributos del objeto.
344+  8985              ;
345+  8985              ;	INPUT: [HL] contendrá la dirección de pantalla a la que queremos asignar cuadrante. HL=(Posicion_inicio).
346+  8985              ; 		   [BC] contendrá (Filas)/(Columns) del objeto a inicializar.
347+  8985              ; 		   [E] ="0"
348+  8985
349+  8985              ; 	OUTPUT: DESTRUYE [AF] y [D].
350+  8985
351+  8985 CD 28 8D     Inicializacion call calcula_tercio
352+  8988 28 36        	jr z,primit
353+  898A E6 02        	and 2
354+  898C 20 07        	jr nz,segmit
355+  898E 7D           	ld a,l
356+  898F FE 7F        	cp $7f
357+  8991 38 2D        	jr c,primit
358+  8993 28 2B        	jr z,primit
359+  8995 CD F2 89     segmit call column
360+  8998 38 13        	jr c,tercuad
361+  899A 3E 04        cuarcuad ld a,4
362+  899C 32 12 85     	ld (Cuad_objeto),a
363+  899F 21 20 48     	ld hl,$4820
364+  89A2 22 35 85     	ld (Limite_horizontal),hl
365+  89A5 21 37 85     	ld hl,Limite_vertical
366+  89A8 36 0D        	ld (hl),$0d
367+  89AA 08           	ex af,af
368+  89AB 18 3C        	jr 1F
369+  89AD              tercuad
370+  89AD 3E 03        	ld a,3
371+  89AF 32 12 85     	ld (Cuad_objeto),a
372+  89B2 21 20 48     	ld hl,$4820
373+  89B5 22 35 85     	ld (Limite_horizontal),hl
374+  89B8 21 37 85     	ld hl,Limite_vertical
375+  89BB 36 12        	ld (hl),$12
376+  89BD 08           	ex af,af
377+  89BE 18 29        	jr 1F
378+  89C0 CD F2 89     primit call column
379+  89C3 38 13        	jr c, primcuad
380+  89C5              segcuad
381+  89C5 3E 02        	ld a,2
382+  89C7 32 12 85     	ld (Cuad_objeto),a
383+  89CA 21 C0 4F     	ld hl,$4fc0
384+  89CD 22 35 85     	ld (Limite_horizontal),hl
385+  89D0 21 37 85     	ld hl,Limite_vertical
386+  89D3 36 0D        	ld (hl),$0d
387+  89D5 08           	ex af,af
388+  89D6 18 11        	jr 1F
389+  89D8              primcuad
390+  89D8 3E 01        	ld a,1
391+  89DA 32 12 85     	ld (Cuad_objeto),a
392+  89DD 21 C0 4F     	ld hl,$4fc0
393+  89E0 22 35 85     	ld (Limite_horizontal),hl
394+  89E3 21 37 85     	ld hl,Limite_vertical
395+  89E6 36 12        	ld (hl),$12
396+  89E8 08           	ex af,af
397+  89E9 CD 5A 90     1 call Genera_coordenadas
398+  89EC 21 2B 85     	ld hl,Ctrl_0
399+  89EF CB EE        	set 5,(hl)
400+  89F1 C9           	ret
401+  89F2
402+  89F2              ; ------------------------------------------------------------------------------------------------------------------
403+  89F2
404+  89F2              ; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
405+  89F2              ;
406+  89F2              ; OUTPUT: "FLAG C". Si se produce 1, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
407+  89F2
408+  89F2 7D           column ld a,l
409+  89F3 E6 1F        	and $1f
410+  89F5 FE 10         	cp $10
411+  89F7 C9            	ret
412+  89F8
413+  89F8              ; --------------------------------------------------------------------------------------------------------------------
414+  89F8              ;
415+  89F8              ; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).
416+  89F8              ;
417+  89F8              ; 14/12/22
418+  89F8              ;
419+  89F8              ;	Modifica: A y BC.
420+  89F8
421+  89F8 3A 12 85     calcula_CColumnass ld a,(Cuad_objeto)
422+  89FB E6 01        	and 1
423+  89FD 28 17        	jr z,1F
424+  89FF
425+  89FF              ; Nos encontramos en la parte izquierda de la pantalla
426+  89FF
427+  89FF 3A 04 85     	ld a,(Coordenada_X)
428+  8A02 47           	ld b,a
429+  8A03 04           	inc b											; (Coordenada_X)+1 en B.
430+  8A04 79           	ld a,c
431+  8A05 90           	sub b											; (Columns)-[(Coordenada_X)+1] en A.
432+  8A06 38 08        	jr c,2F
433+  8A08 47           	ld b,a
434+  8A09 79           	ld a,c
435+  8A0A 90           	sub b
436+  8A0B 32 34 85     	ld (Columnas),a
437+  8A0E 18 1B        	jr 4F
438+  8A10 79           2 ld a,c
439+  8A11 32 34 85     	ld (Columnas),a
440+  8A14 18 15        	jr 4F
441+  8A16
442+  8A16              ; Nos encontramos en la parte derecha de la pantalla.
443+  8A16
444+  8A16 3A 04 85     1 ld a,(Coordenada_X)
445+  8A19 81           	add c
446+  8A1A 3D           	dec a
447+  8A1B D6 1F        	sub $1f
448+  8A1D 38 08        	jr c,3F
449+  8A1F 47           	ld b,a
450+  8A20 79           	ld a,c
451+  8A21 90           	sub b
452+  8A22 32 34 85     	ld (Columnas),a
453+  8A25 18 04        	jr 4F
454+  8A27 79           3 ld a,c
455+  8A28 32 34 85     	ld (Columnas),a
456+  8A2B D9           4 exx
457+  8A2C 4F           	ld c,a
458+  8A2D D9           	exx
459+  8A2E C9            ret
460+  8A2F
461+  8A2F              ; --------------------------------------------------------------------------------------------------------------------
462+  8A2F              ;
463+  8A2F              ; 7/1/23
464+  8A2F              ;
465+  8A2F              ;	Calcula el puntero de impresión del sprite, (arriba-izquierda).
466+  8A2F              ;	Almacena en IY (Puntero_objeto). La rutina de impresión requiere de esta dirección para situar el SP a la hora de pintar.
467+  8A2F              ;
468+  8A2F              ;	OUTPUT: HL e IX Contienen el puntero de impresión.
469+  8A2F              ;	DESTRUYE: HL,B Y A.
470+  8A2F
471+  8A2F 3A 12 85     Calcula_puntero_de_impresion ld a,(Cuad_objeto)
472+  8A32 FE 02        	cp 2
473+  8A34 38 18        	jr c,1F
474+  8A36 28 16        	jr z,1F
475+  8A38 E6 01        	and 1
476+  8A3A 28 0D        	jr z,3F
477+  8A3C
478+  8A3C              ; Estamos situados en el 3er cuadrante de pantalla. ----- ----- -----
479+  8A3C
480+  8A3C CD 78 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
481+  8A3F
482+  8A3F 7D           9 ld a,l
483+  8A40 E6 1F        	and $1f
484+  8A42 28 2A        	jr z,7F
485+  8A44 2B           	dec hl
486+  8A45 10 F8        	djnz 9B
487+  8A47 18 25        	jr 7F
488+  8A49
489+  8A49              ; Estamos situados en el 4º cuadrante de pantalla. ----- ----- -----
490+  8A49
491+  8A49 2A 00 85     3 ld hl,(Posicion_actual)
492+  8A4C 18 20        	jr 7F
493+  8A4E
494+  8A4E 28 14        1 jr z,2F
495+  8A50
496+  8A50              ; Estamos situados en el 1er cuadrante de pantalla. ----- ----- -----
497+  8A50
498+  8A50 CD 78 8A     	call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
499+  8A53 7D           4 ld a,l
500+  8A54 E6 1F        	and $1f
501+  8A56 28 03        	jr z,6F
502+  8A58 2B           	dec hl
503+  8A59 10 F8        	djnz 4B
504+  8A5B 06 0F        6 ld b,15
505+  8A5D CD D9 8A     5 call PreviousScan
506+  8A60 10 FB        	djnz 5B
507+  8A62 18 0A        	jr 7F
508+  8A64
509+  8A64              ; Estamos situados en el 2º cuadrante de pantalla. ----- ----- -----
510+  8A64
511+  8A64 CD 78 8A     2 call Operandos					; (Posicion_actual) en HL y (Columnas)-1 en B.
512+  8A67 06 0F        	ld b,15
513+  8A69 CD D9 8A     8 call PreviousScan
514+  8A6C 10 FB        	djnz 8B
515+  8A6E
516+  8A6E E5           7 push hl
517+  8A6F DD E1        	pop ix
518+  8A71
519+  8A71 2A 02 85     	ld hl,(Puntero_objeto)
520+  8A74 E5           	push hl
521+  8A75 FD E1        	pop iy
522+  8A77
523+  8A77 C9           	ret
524+  8A78
525+  8A78              ; --------------------------------------------------------------------------------------------------------------------
526+  8A78              ;
527+  8A78              ;	2/1/23
528+  8A78              ;
529+  8A78              ;	Sub-rutina de [Calcula_puntero_de_impresion].
530+  8A78              ;
531+  8A78              ;	Tras esta rutina tenemos:
532+  8A78              ;
533+  8A78              ;	OUTPUT: HL contiene (Posicion_actual).
534+  8A78              ;			B contiene (Columnas)-1. Nota: Este valor `nunca' será "0". El valor mínimo es "1".
535+  8A78              ;
536+  8A78              ;	DESTRUYE!!!!! HL,B y A.
537+  8A78
538+  8A78 2A 00 85     Operandos ld hl,(Posicion_actual)
539+  8A7B 3A 34 85     	ld a,(Columnas)
540+  8A7E 3D           	dec a
541+  8A7F 20 01        	jr nz,1F
542+  8A81 3C           	inc a
543+  8A82 47           1 ld b,a
544+  8A83 C9           	ret
545+  8A84
546+  8A84              ; --------------------------------------------------------------------------------------------------------------------
547+  8A84              ;
548+  8A84              ;	3/1/23
549+  8A84              ;
550+  8A84              ;	La Rutina entrega en HL la dirección de memoria donde se encuentra la rutina de impresión que debemos ejecutar.
551+  8A84              ;
552+  8A84              ;	Destruye: A,B,HL y DE.
553+  8A84
554+  8A84              Define_rutina_de_impresion
555+  8A84
556+  8A84 3A FF 84     	ld a,(Columns)
557+  8A87 47           	ld b,a
558+  8A88 3A 34 85     	ld a,(Columnas)
559+  8A8B B8           	cp b
560+  8A8C 20 0D        	jr nz,2f
561+  8A8E
562+  8A8E              ;	La entidad se imprime entera.
563+  8A8E
564+  8A8E 21 25 8B     	ld hl, Indice_entidades_completas
565+  8A91 E6 01        	and 1
566+  8A93 28 02        	jr z,1F
567+  8A95
568+  8A95 23           	inc hl
569+  8A96 23           	inc hl
570+  8A97
571+  8A97 CD AF 86     1 call Extrae_address
572+  8A9A C9           	ret		;	ret
573+  8A9B
574+  8A9B              ;	La entidad no se imprime entera en pantalla.
575+  8A9B
576+  8A9B 3A 12 85     2 ld a,(Cuad_objeto)
577+  8A9E E6 01        	and 1
578+  8AA0 28 17        	jr z,3F
579+  8AA2
580+  8AA2              ; 	La entidad no se imprime entera en pantalla, nos encontramos en el extremo izquierdo de la misma.
581+  8AA2
582+  8AA2 21 29 8B     	ld hl, Indice_entidades_incompletas_izquierda
583+  8AA5 3A FF 84     4 ld a,(Columns)
584+  8AA8 E6 01        	and 1
585+  8AAA 28 EB        	jr z,1B					; Sólo imprimimos 1 (Columnas) de un objeto de 2 Columns.
586+  8AAC
587+  8AAC 23           	inc hl
588+  8AAD 23           	inc hl
589+  8AAE
590+  8AAE 3A 34 85     	ld a,(Columnas)
591+  8AB1 E6 01        	and 1
592+  8AB3 20 E2        	jr nz,1B				; Sólo imprimimos 1 (Columnas) de un objeto de 3 Columns.
593+  8AB5
594+  8AB5 23           	inc hl
595+  8AB6 23           	inc hl
596+  8AB7
597+  8AB7 18 DE        	jr 1B					; Sólo imprimimos 2 (Columnas) de un objeto de 3 Columns.
598+  8AB9
599+  8AB9 21 2F 8B     3 ld hl, Indice_entidades_incompletas_derecha
600+  8ABC 18 E7        	jr 4B
601+  8ABE
602+  8ABE              ; --------------------------------------------------------------------------------------------------------------------
603+  8ABE              ;
604+  8ABE              ;	Prepara_draw
605+  8ABE              ;
606+  8ABE              ;	Es una rutina de carga.
607+  8ABE              ;	Carga los registros BC,HL y E para posteriormente llamar a la rutina de pintado [DRAW].
608+  8ABE              ;
609+  8ABE              ;	FUNCIONAMIENTO:
610+  8ABE              ;
611+  8ABE              ;	- LD (Filas/Columns) del objeto a pintar en [BC].
612+  8ABE              ;	- LD (Posicion_actual) del objeto en [HL].
613+  8ABE              ;	- LD E,0. (Dígito de control utilizado por Draw para cálculos internos de la rutina. Ha de estar a "0").
614+  8ABE              ;
615+  8ABE              ;	DESTRUYE:
616+  8ABE              ;
617+  8ABE              ;	Logicamente, BC,HL y E quedan destruidos.
618+  8ABE
619+  8ABE 21 FE 84     Prepara_draw ld hl,Filas 		 					 					 ; Prepara los registros BC, E y HL.
620+  8AC1 46           	ld b,(hl) 														     ; Carga Filas/Columns del objeto a pintar o inicializar en BC.
621+  8AC2 23           	inc hl 												 				 ; Carga (Posicion_actual) en HL.
622+  8AC3 4E           	ld c,(hl)
623+  8AC4 2A 00 85     	ld hl,(Posicion_actual)
624+  8AC7 1E 00        	ld e,0 																 ; Byte de control. Ha de estar a "0" cuando llamamos a [DRAW].
625+  8AC9 C9           	ret
626+  8ACA
627+  8ACA              ;----------------------------------------------------------------------------------------------------------------
628+  8ACA              ;
629+  8ACA              ;	5/08/22
630+  8ACA              ;
631+  8ACA              ;   NextScan.
632+  8ACA              ;
633+  8ACA              ;   Calcula la dirección de mem. de pantalla donde se sitúa el siguiente scanline. (Inc H, línea abajo).
634+  8ACA              ;
635+  8ACA              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el siguiente scanline.
636+  8ACA              ;
637+  8ACA              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
638+  8ACA              ;
639+  8ACA              ;       DESTRUIDOS: AF y HL !!!
640+  8ACA              ;
641+  8ACA              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
642+  8ACA              ;
643+  8ACA
644+  8ACA 24           NextScan inc h          ; Incrementamos el scanline.
645+  8ACB 7C               ld a,h
646+  8ACC E6 07            and 7
647+  8ACE C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
648+  8ACF
649+  8ACF 7D           	ld a,l              ; Scanlines a "0", cambiamos de tercio. (Siempre que estemos en la última línea, LLL).
650+  8AD0 C6 20            add a,$20           ; Vamos a comprobarlo...
651+  8AD2 6F               ld l,a
652+  8AD3 D8               ret c               ; Salimos si se produce el cambio de tercio.
653+  8AD4
654+  8AD4 7C               ld a,h              ; No estamos en la última línea del tercio, por lo que inicializamos H restando una_
655+  8AD5 D6 08            sub 8               ; _unidad a los bits que definen el tercio TT, (sub $08).
656+  8AD7 67               ld h,a
657+  8AD8 C9               ret
658+  8AD9
659+  8AD9              ;----------------------------------------------------------------------------------------------------------------
660+  8AD9              ;
661+  8AD9              ;	5/08/22
662+  8AD9              ;
663+  8AD9              ;   PreviousScan.
664+  8AD9              ;
665+  8AD9              ;   Calcula la dirección de mem. de pantalla donde se sitúa el scanline anterior. (Dec H, línea arriba).
666+  8AD9              ;
667+  8AD9              ;   INPUT: HL contendra la dirección de mem. de video sobre la que queremos calcular el scanline anterior.
668+  8AD9              ;
669+  8AD9              ;   OUTPUT: HL contendrá la nueva dirección de memoria de pantalla.
670+  8AD9              ;
671+  8AD9              ;       DESTRUIDOS: AF y HL !!!
672+  8AD9              ;
673+  8AD9              ;   010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
674+  8AD9              ;
675+  8AD9
676+  8AD9 7C           PreviousScan ld a,h
677+  8ADA 25               dec h               ; Dec H.
678+  8ADB E6 07            and 7
679+  8ADD C0               ret nz              ; Salimos de la rutina si el scanline se encuentra entre (1-7).
680+  8ADE
681+  8ADE 7D               ld a,l              ; Estabamos en el scanline "0" y al decrementar nos situamos en el "7" y cambiamos de tercio.
682+  8ADF D6 20            sub $20             ; Vamos a comprobarlo...
683+  8AE1 6F               ld l,a
684+  8AE2 D8               ret c               ; Salimos si estábamos en la primera línea y se produce el cambio de tercio.
685+  8AE3
686+  8AE3 7C               ld a,h              ; No estamos en la primera línea del tercio, por lo que inicializamos H sumando una_
687+  8AE4 C6 08            add a,8             ; _unidad a los bits que definen el tercio TT, (add a,$08).
688+  8AE6 67               ld h,a
689+  8AE7 C9               ret
690+  8AE8
691+  8AE8              ; -----------------------------------------------------------------------------------
692+  8AE8              ;
693+  8AE8              ;	15/1/23
694+  8AE8
695+  8AE8              Extrae_foto_registros
696+  8AE8
697+  8AE8 3A 3F 85     	ld a,(Numero_de_malotes)
698+  8AEB A7           	and a
699+  8AEC C8           	ret z
700+  8AED
701+  8AED
702+  8AED ED 73 40 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
703+  8AF1 31 00 70     	ld sp,Album_de_fotos
704+  8AF4
705+  8AF4 FD E1        2 pop iy																	; (Puntero_objeto) en IY.
706+  8AF6 E1           	pop hl																	; Puntero de impresión de pantalla en HL.
707+  8AF7 D1           	pop de																	; Dirección de la rutina de impresión en DE.
708+  8AF8
709+  8AF8 ED 73 42 85  	ld (Stack_2),sp
710+  8AFC ED 7B 40 85  	ld sp,(Stack)
711+  8B00
712+  8B00              ; Fabrica la llamada a la correspondiente rutina de impresión.
713+  8B00
714+  8B00 3E CD        	ld a,$cd
715+  8B02 32 0A 8B     	ld (Imprime),a
716+  8B05 EB           	ex de,hl
717+  8B06 22 0B 8B     	ld (Imprime+1),hl
718+  8B09 EB           	ex de,hl
719+  8B0A
720+  8B0A              ; Ejecuta la llamada:	CALL $xx,xx
721+  8B0A
722+  8B0A 00 00 00     Imprime db 0,0,0
723+  8B0D
724+  8B0D ED 73 40 85  	ld (Stack),sp															; Guardo el puntero de pila y lo sitúo al principio del Album_de_fotos
725+  8B11
726+  8B11 3A 3F 85     	ld a,(Numero_de_malotes)
727+  8B14 3D           	dec a
728+  8B15 28 09        	jr z,1F
729+  8B17 32 3F 85      	ld (Numero_de_malotes),a
730+  8B1A ED 7B 42 85  	ld sp,(Stack_2)
731+  8B1E 18 D4        	jr 2B
732+  8B20
733+  8B20 AF           1 xor a
734+  8B21 32 42 85     	ld (Stack_2),a
735+  8B24 C9           	ret
736+  8B25
737+  8B25
# file closed: Draw_XOR.asm
756   8B25              	include "Rutinas_de_impresion_sprites.asm"
# file opened: Rutinas_de_impresion_sprites.asm
  1+  8B25              ;   índices de Rutinas de impresión.
  2+  8B25
  3+  8B25 35 8B        Indice_entidades_completas defw Pinta_Amadeus_2x2
  4+  8B27 62 8B            defw Pinta_Amadeus_3x2
  5+  8B29
  6+  8B29 B8 8B        Indice_entidades_incompletas_izquierda defw Pinta_enemigo_2x2_izquierda
  7+  8B2B 58 8C            defw Pinta_enemigo_3x2_izquierda_1columna
  8+  8B2D 0C 8C            defw Pinta_enemigo_3x2_izquierda_2columnas
  9+  8B2F
 10+  8B2F E2 8B        Indice_entidades_incompletas_derecha defw Pinta_enemigo_2x2_derecha
 11+  8B31 E6 8C            defw Pinta_enemigo_3x2_derecha_1columna
 12+  8B33 9A 8C            defw Pinta_enemigo_3x2_derecha_2columnas
 13+  8B35
 14+  8B35
 15+  8B35              ;   Conjunto de rutinas de impresión de Sprites.
 16+  8B35              ;
 17+  8B35              ;   12/12/22
 18+  8B35              ;
 19+  8B35              ;   Inputs: HL contiene (Posicion_actual) de la entidad.
 20+  8B35              ;           B contendrá: el nº de scanlines que `podemos´ imprimir en pantalla. (ENTIDAD DE 2X2).
 21+  8B35              ;                        LA MITAD del nº de scanlines que `podemos´imprimir en pantalla. (ENTIDAD DE 3X2).
 22+  8B35              ;           El puntero de pila apuntará a la dirección de mem. que contenga la variable (Puntero_datas).
 23+  8B35              ;
 24+  8B35              ;   Modifica: DE y HL.
 25+  8B35
 26+  8B35 ED 73 40 85  Pinta_Amadeus_2x2 ld (Stack),sp
 27+  8B39 FD F9        	ld sp,iy
 28+  8B3B 06 10            ld b,16
 29+  8B3D D1           1 pop de
 30+  8B3E 7B               ld a,e
 31+  8B3F AE               xor (hl)
 32+  8B40 77           	ld (hl),a
 33+  8B41 23           	inc hl
 34+  8B42 7A               ld a,d
 35+  8B43 AE               xor (hl)
 36+  8B44 77           	ld (hl),a
 37+  8B45 2B           	dec hl
 38+  8B46 24           	inc h
 39+  8B47 7C               ld a,h
 40+  8B48 E6 07            and 7
 41+  8B4A 20 0A            jr nz,2F
 42+  8B4C 7D               ld a,l
 43+  8B4D C6 20            add a,$20
 44+  8B4F 6F               ld l,a
 45+  8B50 38 04            jr c,2F
 46+  8B52 7C               ld a,h
 47+  8B53 D6 08            sub 8
 48+  8B55 67               ld h,a
 49+  8B56 7C           2 ld a,h
 50+  8B57 FE 58            cp $58
 51+  8B59 28 02            jr z,3F
 52+  8B5B 10 E0            djnz 1B
 53+  8B5D ED 7B 40 85  3 ld sp,(Stack)
 54+  8B61 C9           	ret
 55+  8B62
 56+  8B62 ED 73 40 85  Pinta_Amadeus_3x2 ld (Stack),sp
 57+  8B66 FD F9        	ld sp,iy
 58+  8B68 06 08            ld b,8
 59+  8B6A D1           1 pop de
 60+  8B6B 7B               ld a,e
 61+  8B6C AE               xor (hl)
 62+  8B6D 77           	ld (hl),a
 63+  8B6E 23           	inc hl
 64+  8B6F 7A               ld a,d
 65+  8B70 AE               xor (hl)
 66+  8B71 77           	ld (hl),a
 67+  8B72 23           	inc hl
 68+  8B73 D1           	pop de
 69+  8B74 7B               ld a,e
 70+  8B75 AE               xor (hl)
 71+  8B76 77           	ld (hl),a
 72+  8B77 2B           	dec hl
 73+  8B78 2B           	dec hl
 74+  8B79 24           	inc h
 75+  8B7A 7C               ld a,h
 76+  8B7B E6 07            and 7
 77+  8B7D 20 0A            jr nz,2F
 78+  8B7F 7D               ld a,l
 79+  8B80 C6 20            add a,$20
 80+  8B82 6F               ld l,a
 81+  8B83 38 04            jr c,2F
 82+  8B85 7C               ld a,h
 83+  8B86 D6 08            sub 8
 84+  8B88 67               ld h,a
 85+  8B89 7C           2 ld a,h
 86+  8B8A FE 58            cp $58
 87+  8B8C 28 25            jr z,4F
 88+  8B8E 7A               ld a,d
 89+  8B8F AE               xor (hl)
 90+  8B90 77               ld (hl),a
 91+  8B91 D1           	pop de
 92+  8B92 23           	inc hl
 93+  8B93 7B               ld a,e
 94+  8B94 AE               xor (hl)
 95+  8B95 77           	ld (hl),a
 96+  8B96 23           	inc hl
 97+  8B97 7A               ld a,d
 98+  8B98 AE               xor (hl)
 99+  8B99 77           	ld (hl),a
100+  8B9A 2B           	dec hl
101+  8B9B 2B           	dec hl
102+  8B9C 24           	inc h
103+  8B9D 7C               ld a,h
104+  8B9E E6 07            and 7
105+  8BA0 20 0A            jr nz,3F
106+  8BA2 7D               ld a,l
107+  8BA3 C6 20            add a,$20
108+  8BA5 6F               ld l,a
109+  8BA6 38 04            jr c,3F
110+  8BA8 7C               ld a,h
111+  8BA9 D6 08            sub 8
112+  8BAB 67               ld h,a
113+  8BAC 7C           3 ld a,h
114+  8BAD FE 58            cp $58
115+  8BAF 28 02            jr z,4F
116+  8BB1 10 B7            djnz 1B
117+  8BB3 ED 7B 40 85  4 ld sp,(Stack)
118+  8BB7 C9           	ret
119+  8BB8
120+  8BB8              ; ---------------------------------------------------
121+  8BB8
122+  8BB8 ED 73 40 85  Pinta_enemigo_2x2_izquierda ld (Stack),sp
123+  8BBC FD F9        	ld sp,iy
124+  8BBE 06 10            ld b,16
125+  8BC0 D1           1 pop de
126+  8BC1 7A           	ld a,d
127+  8BC2 AE           	xor (hl)
128+  8BC3 77           	ld (hl),a
129+  8BC4 24           	inc h
130+  8BC5 7C               ld a,h
131+  8BC6 E6 07            and 7
132+  8BC8 20 0C            jr nz,2F
133+  8BCA 7D               ld a,l
134+  8BCB C6 20            add a,$20
135+  8BCD 6F               ld l,a
136+  8BCE 38 06            jr c,2F
137+  8BD0 7C               ld a,h
138+  8BD1 D6 08            sub 8
139+  8BD3 67               ld h,a
140+  8BD4 18 00            jr 2F
141+  8BD6 7C           2 ld a,h
142+  8BD7 FE 58            cp $58
143+  8BD9 28 02            jr z,3F
144+  8BDB 10 E3            djnz 1B
145+  8BDD ED 7B 40 85  3 ld sp,(Stack)
146+  8BE1 C9           	ret
147+  8BE2
148+  8BE2 ED 73 40 85  Pinta_enemigo_2x2_derecha ld (Stack),sp
149+  8BE6 FD F9        	ld sp,iy
150+  8BE8 06 10            ld b,16
151+  8BEA D1           1 pop de
152+  8BEB 7B           	ld a,e
153+  8BEC AE           	xor (hl)
154+  8BED 77           	ld (hl),a
155+  8BEE 24           	inc h
156+  8BEF 7C               ld a,h
157+  8BF0 E6 07            and 7
158+  8BF2 20 0C            jr nz,2F
159+  8BF4 7D               ld a,l
160+  8BF5 C6 20            add a,$20
161+  8BF7 6F               ld l,a
162+  8BF8 38 06            jr c,2F
163+  8BFA 7C               ld a,h
164+  8BFB D6 08            sub 8
165+  8BFD 67               ld h,a
166+  8BFE 18 00            jr 2F
167+  8C00 7C           2 ld a,h
168+  8C01 FE 58            cp $58
169+  8C03 28 02            jr z,3F
170+  8C05 10 E3            djnz 1B
171+  8C07 ED 7B 40 85  3 ld sp,(Stack)
172+  8C0B C9           	ret
173+  8C0C
174+  8C0C              ; ---------------------------------------------------
175+  8C0C
176+  8C0C ED 73 40 85  Pinta_enemigo_3x2_izquierda_2columnas ld (Stack),sp
177+  8C10 FD F9        	ld sp,iy
178+  8C12 06 08            ld b,8
179+  8C14 D1           1 pop de
180+  8C15 7A           	ld a,d
181+  8C16 AE           	xor (hl)
182+  8C17 77           	ld (hl),a
183+  8C18 23           	inc hl
184+  8C19 D1           	pop de
185+  8C1A 7B           	ld a,e
186+  8C1B AE           	xor (hl)
187+  8C1C 77           	ld (hl),a
188+  8C1D 2B           	dec hl
189+  8C1E 24            	inc h
190+  8C1F 7C               ld a,h
191+  8C20 E6 07            and 7
192+  8C22 20 0A            jr nz,2F
193+  8C24 7D               ld a,l
194+  8C25 C6 20            add a,$20
195+  8C27 6F               ld l,a
196+  8C28 38 04            jr c,2F
197+  8C2A 7C               ld a,h
198+  8C2B D6 08            sub 8
199+  8C2D 67               ld h,a
200+  8C2E 7C           2 ld a,h
201+  8C2F FE 58            cp $58
202+  8C31 28 20            jr z,4F
203+  8C33 D1               pop de
204+  8C34 7B           	ld a,e
205+  8C35 AE           	xor (hl)
206+  8C36 77           	ld (hl),a
207+  8C37 23           	inc hl
208+  8C38 7A           	ld a,d
209+  8C39 AE           	xor (hl)
210+  8C3A 77           	ld (hl),a
211+  8C3B 2B           	dec hl
212+  8C3C 24           	inc h
213+  8C3D 7C               ld a,h
214+  8C3E E6 07            and 7
215+  8C40 20 0A            jr nz,3F
216+  8C42 7D               ld a,l
217+  8C43 C6 20            add a,$20
218+  8C45 6F               ld l,a
219+  8C46 38 04            jr c,3F
220+  8C48 7C               ld a,h
221+  8C49 D6 08            sub 8
222+  8C4B 67               ld h,a
223+  8C4C 7C           3 ld a,h
224+  8C4D FE 58            cp $58
225+  8C4F 28 02            jr z,4F
226+  8C51 10 C1            djnz 1B
227+  8C53 ED 7B 40 85  4 ld sp,(Stack)
228+  8C57 C9           	ret
229+  8C58
230+  8C58 ED 73 40 85  Pinta_enemigo_3x2_izquierda_1columna ld (Stack),sp
231+  8C5C FD F9        	ld sp,iy
232+  8C5E 06 08            ld b,8
233+  8C60 D1           1 pop de
234+  8C61 D1           	pop de
235+  8C62 7B           	ld a,e
236+  8C63 AE           	xor (hl)
237+  8C64 77           	ld (hl),a
238+  8C65 24            	inc h
239+  8C66 7C               ld a,h
240+  8C67 E6 07            and 7
241+  8C69 20 0A            jr nz,2F
242+  8C6B 7D               ld a,l
243+  8C6C C6 20            add a,$20
244+  8C6E 6F               ld l,a
245+  8C6F 38 04            jr c,2F
246+  8C71 7C               ld a,h
247+  8C72 D6 08            sub 8
248+  8C74 67               ld h,a
249+  8C75 7C           2 ld a,h
250+  8C76 FE 58            cp $58
251+  8C78 28 1B            jr z,4F
252+  8C7A D1               pop de
253+  8C7B 7A           	ld a,d
254+  8C7C AE           	xor (hl)
255+  8C7D 77           	ld (hl),a
256+  8C7E 24           	inc h
257+  8C7F 7C               ld a,h
258+  8C80 E6 07            and 7
259+  8C82 20 0A            jr nz,3F
260+  8C84 7D               ld a,l
261+  8C85 C6 20            add a,$20
262+  8C87 6F               ld l,a
263+  8C88 38 04            jr c,3F
264+  8C8A 7C               ld a,h
265+  8C8B D6 08            sub 8
266+  8C8D 67               ld h,a
267+  8C8E 7C           3 ld a,h
268+  8C8F FE 58            cp $58
269+  8C91 28 02            jr z,4F
270+  8C93 10 CB            djnz 1B
271+  8C95 ED 7B 40 85  4 ld sp,(Stack)
272+  8C99 C9           	ret
273+  8C9A
274+  8C9A ED 73 40 85  Pinta_enemigo_3x2_derecha_2columnas ld (Stack),sp
275+  8C9E FD F9        	ld sp,iy
276+  8CA0 06 08            ld b,8
277+  8CA2 D1           1 pop de
278+  8CA3 7B           	ld a,e
279+  8CA4 AE           	xor (hl)
280+  8CA5 77           	ld (hl),a
281+  8CA6 23           	inc hl
282+  8CA7 7A           	ld a,d
283+  8CA8 AE           	xor (hl)
284+  8CA9 77           	ld (hl),a
285+  8CAA 2B           	dec hl
286+  8CAB 24             	inc h
287+  8CAC 7C               ld a,h
288+  8CAD E6 07            and 7
289+  8CAF 20 0A            jr nz,2F
290+  8CB1 7D               ld a,l
291+  8CB2 C6 20            add a,$20
292+  8CB4 6F               ld l,a
293+  8CB5 38 04            jr c,2F
294+  8CB7 7C               ld a,h
295+  8CB8 D6 08            sub 8
296+  8CBA 67               ld h,a
297+  8CBB 7C           2 ld a,h
298+  8CBC FE 58            cp $58
299+  8CBE 28 21            jr z,4F
300+  8CC0 D1               pop de
301+  8CC1 7A           	ld a,d
302+  8CC2 AE           	xor (hl)
303+  8CC3 77           	ld (hl),a
304+  8CC4 23           	inc hl
305+  8CC5 D1               pop de
306+  8CC6 7B           	ld a,e
307+  8CC7 AE           	xor (hl)
308+  8CC8 77           	ld (hl),a
309+  8CC9 2B           	dec hl
310+  8CCA 24           	inc h
311+  8CCB 7C               ld a,h
312+  8CCC E6 07            and 7
313+  8CCE 20 0A            jr nz,3F
314+  8CD0 7D               ld a,l
315+  8CD1 C6 20            add a,$20
316+  8CD3 6F               ld l,a
317+  8CD4 38 04            jr c,3F
318+  8CD6 7C               ld a,h
319+  8CD7 D6 08            sub 8
320+  8CD9 67               ld h,a
321+  8CDA 7C           3 ld a,h
322+  8CDB FE 58            cp $58
323+  8CDD 28 02            jr z,4F
324+  8CDF 10 C1            djnz 1B
325+  8CE1 ED 7B 40 85  4 ld sp,(Stack)
326+  8CE5 C9           	ret
327+  8CE6
328+  8CE6 ED 73 40 85  Pinta_enemigo_3x2_derecha_1columna ld (Stack),sp
329+  8CEA FD F9        	ld sp,iy
330+  8CEC 06 08            ld b,8
331+  8CEE D1           1 pop de
332+  8CEF 7B           	ld a,e
333+  8CF0 AE           	xor (hl)
334+  8CF1 77           	ld (hl),a
335+  8CF2 24            	inc h
336+  8CF3 7C               ld a,h
337+  8CF4 E6 07            and 7
338+  8CF6 20 0A            jr nz,2F
339+  8CF8 7D               ld a,l
340+  8CF9 C6 20            add a,$20
341+  8CFB 6F               ld l,a
342+  8CFC 38 04            jr c,2F
343+  8CFE 7C               ld a,h
344+  8CFF D6 08            sub 8
345+  8D01 67               ld h,a
346+  8D02 7C           2 ld a,h
347+  8D03 FE 58            cp $58
348+  8D05 28 1C            jr z,4F
349+  8D07 D1               pop de
350+  8D08 7A           	ld a,d
351+  8D09 AE           	xor (hl)
352+  8D0A 77           	ld (hl),a
353+  8D0B 24           	inc h
354+  8D0C 7C               ld a,h
355+  8D0D E6 07            and 7
356+  8D0F 20 0A            jr nz,3F
357+  8D11 7D               ld a,l
358+  8D12 C6 20            add a,$20
359+  8D14 6F               ld l,a
360+  8D15 38 04            jr c,3F
361+  8D17 7C               ld a,h
362+  8D18 D6 08            sub 8
363+  8D1A 67               ld h,a
364+  8D1B 7C           3 ld a,h
365+  8D1C FE 58            cp $58
366+  8D1E 28 03            jr z,4F
367+  8D20 D1               pop de
368+  8D21 10 CB            djnz 1B
369+  8D23 ED 7B 40 85  4 ld sp,(Stack)
370+  8D27 C9           	ret
371+  8D28
372+  8D28              ; ---------------------------------------------------
373+  8D28
# file closed: Rutinas_de_impresion_sprites.asm
757   8D28              	include "calcula_tercio.asm"
# file opened: calcula_tercio.asm
  1+  8D28              ; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
  2+  8D28              ;
  3+  8D28              ;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
  4+  8D28              ;
  5+  8D28              ; *****************************************************************************************************************************************************************************************
  6+  8D28              ; 010T TSSS LLLC CCCC (Codificación de la memoria de pantalla). $4000 - $57FF, (256 x 192 pixeles).
  7+  8D28
  8+  8D28 7C           calcula_tercio ld a,h
  9+  8D29 E6 18        	and $18
 10+  8D2B CB 2F        	sra a
 11+  8D2D CB 2F        	sra a
 12+  8D2F CB 2F        	sra a
 13+  8D31 C9           	ret
 14+  8D32
# file closed: calcula_tercio.asm
758   8D32              	include "Cls.asm"
# file opened: Cls.asm
  1+  8D32              ; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
  2+  8D32              ;
  3+  8D32              ;
  4+  8D32              ;	CLS.
  5+  8D32              ;
  6+  8D32              ;	Limpia la pantalla y define sus atributos.
  7+  8D32              ;	El formato: FBPPPIII (Flash, Brillo, Papel, Tinta).
  8+  8D32              ;
  9+  8D32              ;	COLORES: 0 ..... NEGRO
 10+  8D32              ;    		 1 ..... AZUL
 11+  8D32              ; 			 2 ..... ROJO
 12+  8D32              ;			 3 ..... MAGENTA
 13+  8D32              ; 			 4 ..... VERDE
 14+  8D32              ; 			 5 ..... CIAN
 15+  8D32              ;			 6 ..... AMARILLO
 16+  8D32              ; 			 7 ..... BLANCO
 17+  8D32              ;
 18+  8D32              ;	INPUT: A contiene los atributos de pantalla.
 19+  8D32              ;
 20+  8D32              ;	DESTRUIDOS: F,BC,DE,HL !!!!!
 21+  8D32
 22+  8D32
 23+  8D32 21 00 40     Cls LD HL,$4000											; HL => Comienzo de pantalla.
 24+  8D35 11 01 40     	LD DE,$4001
 25+  8D38 01 00 18     	LD BC,6144											; Tamaño de la pantalla, $17ff
 26+  8D3B 36 00        	LD (HL),0 											; Ponemos a "0" todos los pixels de la pantalla.
 27+  8D3D ED B0        	LDIR
 28+  8D3F 01 FF 02     	LD BC,767
 29+  8D42 77           	LD (HL),a						 					; Atributos de pantalla, % 00 xxx xxx en [A].
 30+  8D43 ED B0        	LDIR
 31+  8D45 C9           	ret
 32+  8D46
# file closed: Cls.asm
759   8D46              	include "Direcciones.asm"
# file opened: Direcciones.asm
  1+  8D46              ; ******************************************************************************************************************************************************************************************
  2+  8D46              ;
  3+  8D46              ;   22/01/23
  4+  8D46              ;
  5+  8D46              ;	Mov_down
  6+  8D46              ;
  7+  8D46              ; 	Mueve el Sprite X px hacia abajo.
  8+  8D46              ;
  9+  8D46              ;
 10+  8D46 21 2B 85     Mov_down ld hl,Ctrl_0
 11+  8D49 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 12+  8D4B              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 13+  8D4B              ; 																	; _ en el caso de que no lo haya.
 14+  8D4B 3A 16 85     	ld a,(Vel_down)
 15+  8D4E 47           	ld b,a
 16+  8D4F 2A 00 85         ld hl,(Posicion_actual)
 17+  8D52 CD 28 8D     2 call calcula_tercio 												; Averiguamos el tercio de pantalla en el que nos encontramos.
 18+  8D55 E6 02        	and 2
 19+  8D57 28 0F        	jr z,1F
 20+  8D59
 21+  8D59              ; Nos encontramos en el último tercio de pantalla.
 22+  8D59              ; Averiguamos si estamos en el último scanline de la última línea de pantalla.
 23+  8D59
 24+  8D59 7C           	ld a,h
 25+  8D5A FE 57        	cp $57
 26+  8D5C 20 0A        	jr nz,1F
 27+  8D5E 7D           	ld a,l
 28+  8D5F C6 20        	add $20
 29+  8D61 30 05        	jr nc,1F
 30+  8D63
 31+  8D63              ; ------------------------------
 32+  8D63 CD 44 90     	call Reaparece_arriba
 33+  8D66              ;	call Reinicio
 34+  8D66              ; ------------------------------
 35+  8D66 18 08        	jr 3F
 36+  8D68 CD CA 8A     1 call NextScan
 37+  8D6B 22 00 85     	ld (Posicion_actual),hl
 38+  8D6E 10 E2            djnz 2B
 39+  8D70 CD 5A 90     3 call Genera_coordenadas
 40+  8D73 C9           	ret
 41+  8D74
 42+  8D74
 43+  8D74              ; ******************************************************************************************************************************************************************************************
 44+  8D74              ;
 45+  8D74              ;   22/01/23
 46+  8D74              ;
 47+  8D74              ;	Mov_up
 48+  8D74              ;
 49+  8D74              ; 	Mueve el Sprite hacia arriba.
 50+  8D74              ;
 51+  8D74              ;
 52+  8D74 21 2B 85     Mov_up ld hl,Ctrl_0
 53+  8D77 CB E6        	set 4,(hl) 															; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 54+  8D79              ; 																		; _esta información para evitar que la entidad se vuelva borrar/pintar_
 55+  8D79              ; 																		; _ en el caso de que no lo haya.
 56+  8D79 3A 15 85     	ld a,(Vel_up)
 57+  8D7C 47           	ld b,a
 58+  8D7D 2A 00 85     	ld hl,(Posicion_actual)
 59+  8D80 CD 28 8D     3 call calcula_tercio 													; Si no estamos en el 1er tercio de la pantalla no nos preocupamos de la reaparición.
 60+  8D83 A7           	and a
 61+  8D84 20 10        	jr nz,1F
 62+  8D86
 63+  8D86              ; Nos encontramos en el 1er tercio de pantalla.
 64+  8D86              ; Averiguamos si estamos en el primer scanline de la primera línea de pantalla.
 65+  8D86
 66+  8D86 7C               ld a,h 																; Si estamos en el 1er tercio de pantalla pero no nos encontramos en el 1er scanline_
 67+  8D87 FE 40            cp $40 																; _del mismo, podemos seguir subiendo.
 68+  8D89 20 0B            jr nz,1F
 69+  8D8B 7D               ld a,l
 70+  8D8C D6 20            sub $20
 71+  8D8E 30 06            jr nc,1F
 72+  8D90 25               dec h
 73+  8D91
 74+  8D91              ; -----------------------------
 75+  8D91 CD 34 90         call Reaparece_abajo                                                ; El objeto ha desaparecido por la parte superior de la pantalla, H="$3f". Hacemos llamada a _
 76+  8D94              ;	call Reinicio
 77+  8D94              ; -----------------------------
 78+  8D94
 79+  8D94 18 08            jr 2F                                                               ; _ [Reaparece_abajo] para preparar la `reaparición´ por la parte inferior.
 80+  8D96 CD D9 8A     1 call PreviousScan
 81+  8D99 22 00 85     	ld (Posicion_actual),hl
 82+  8D9C 10 E2            djnz 3B
 83+  8D9E CD 5A 90     2 call Genera_coordenadas
 84+  8DA1 C9           	ret
 85+  8DA2
 86+  8DA2              ; ******************************************************************************************************************************************************************************************
 87+  8DA2              ;
 88+  8DA2              ;	19/10/22
 89+  8DA2              ;
 90+  8DA2              ;	Mov_right.
 91+  8DA2              ;
 92+  8DA2              ; 	Desplaza el Sprite (x)Pixels a la derecha.
 93+  8DA2              ;
 94+  8DA2
 95+  8DA2 21 2B 85     Mov_right ld hl,Ctrl_0
 96+  8DA5 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
 97+  8DA7              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
 98+  8DA7              ; 																	; _ en el caso de que no lo haya.
 99+  8DA7 3A 2B 85     	ld a,(Ctrl_0)
100+  8DAA CB 77        	bit 6,a
101+  8DAC 28 06        	jr z,10F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que no hemos llegado al char.30 de la línea, [Stop_Amadeus].
102+  8DAE
103+  8DAE CD E2 8F     	call Stop_Amadeus_right
104+  8DB1 C8           	ret z 															; Salimos de Mov_right si hemos llegado al char.30.
105+  8DB2 18 4D        	jr 8F
106+  8DB4
107+  8DB4 3A 04 85     10 ld a,(Coordenada_X)	 	  										; Estamos en el char. 31?
108+  8DB7 FE 1F        	cp 31															; Si no es así, saltamos a [3] para seguir con el desplazamiento progrmado.
109+  8DB9 20 46        	jr nz,8F
110+  8DBB
111+  8DBB 3A 06 85     	ld a,(CTRL_DESPLZ) 		 										; Estamos en el último char. de la línea. Si (CTRL_DESPLZ)="0" saltamos a_
112+  8DBE A7           	and a 															; _[3] para continuar con el DESPLZ.
113+  8DBF 28 40        	jr z,8F
114+  8DC1
115+  8DC1              ; ---------- ---------- ----------
116+  8DC1              ;
117+  8DC1              ;	Estamos en el último char. de la fila y (CTRL_DESPLZ) es distinto de "0".
118+  8DC1
119+  8DC1 3A 14 85     	ld a,(Vel_right) 												; En función del factor de velocidad, iniciaremos la salida de la pantalla,_									;
120+  8DC4 FE 02        	cp 2 															; _(Reaparece_izquierda), cuando (CTRL_DESPLZ) alcance un valor determinado.
121+  8DC6 28 11        	jr z,1F
122+  8DC8 38 06        	jr c,6F
123+  8DCA FE 04        	cp 4
124+  8DCC 28 14        	jr z,7F
125+  8DCE 18 FE        	jr $ 															; Sólo se permite velocidad 1,2,4 y 8.
126+  8DD0
127+  8DD0              ; ---------- ---------- ----------
128+  8DD0              ;
129+  8DD0              ; Perfiles de velocidad
130+  8DD0              ;
131+  8DD0
132+  8DD0 3A 06 85     6 ld a,(CTRL_DESPLZ) 											; Velocidad 1
133+  8DD3 FE FE        	cp $fe
134+  8DD5 20 2A        	jr nz,8F
135+  8DD7 18 10        	jr 3F
136+  8DD9 3A 06 85     1 ld a,(CTRL_DESPLZ) 											; Velocidad 2
137+  8DDC FE FD        	cp $fd
138+  8DDE 20 21        	jr nz,8F
139+  8DE0 18 07        	jr 3F
140+  8DE2 3A 06 85     7 ld a,(CTRL_DESPLZ) 											; Velocidad 4
141+  8DE5 FE FB        	cp $fb
142+  8DE7 20 18        	jr nz,8F
143+  8DE9
144+  8DE9              ; ---------- ---------- ----------
145+  8DE9
146+  8DE9              3
147+  8DE9 CD 22 90     	call Reaparece_izquierda 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
148+  8DEC              ;	call Reinicio
149+  8DEC
150+  8DEC              ; ---------- ---------- ----------
151+  8DEC              ;
152+  8DEC              ;	Esta parte de la rutina se encarga de hacer que el Sprite aparezca pixel a pixel por la izquierda.
153+  8DEC
154+  8DEC 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
155+  8DEE C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
156+  8DEF CD 08 8E     	call DESPLZ_DER
157+  8DF2 C1           	pop bc
158+  8DF3 10 F9        	djnz 5B
159+  8DF5 2A 00 85     	ld hl,(Posicion_actual) 										; Decrementamos su posición actual, pués al desplazarlo a la derecha, volvemos a incrementar el nº de (Columns) y _
160+  8DF8 2B           	dec hl 															; _ (Posicion_actual) ha pasado de $00 a $01.
161+  8DF9 22 00 85     	ld (Posicion_actual),hl
162+  8DFC CD 5A 90     	call Genera_coordenadas
163+  8DFF 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
164+  8E01
165+  8E01              ; ---------- ---------- ----------
166+  8E01
167+  8E01 2A 00 85     8 ld hl,(Posicion_actual)
168+  8E04 CD 08 8E     	call DESPLZ_DER
169+  8E07 C9           2 ret
170+  8E08
171+  8E08              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
172+  8E08              ;
173+  8E08              ;	22/9/22
174+  8E08              ;
175+  8E08
176+  8E08 CD 17 8E     DESPLZ_DER call Desplaza_derecha
177+  8E0B CD 63 8E         call modifica_parametros_1er_DESPLZ_2
178+  8E0E CD 8C 8E         call Ciclo_completo
179+  8E11 21 2B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la derecha.
180+  8E14 CB FE        	set 7,(hl)
181+  8E16 C9           	ret
182+  8E17
183+  8E17              ; ******************************************************************************************************************************************************************************************
184+  8E17              ;	15/02/23
185+  8E17              ;
186+  8E17
187+  8E17 3A 14 85     Desplaza_derecha ld a,(Vel_right)
188+  8E1A 47           	ld b,a
189+  8E1B 2A 0C 85     	ld hl,(Puntero_DESPLZ_der)
190+  8E1E 23           1 inc hl
191+  8E1F 23           	inc hl
192+  8E20 10 FC        	djnz 1B 														; (Vel_right) indica cuantas posiciones desplazaremos el (Puntero_DESPLZ)_
193+  8E22 22 0C 85     	ld (Puntero_DESPLZ_der),hl 										; _por el índice del Sprite.
194+  8E25 CD AF 86     	call Extrae_address
195+  8E28 22 02 85     	ld (Puntero_objeto),hl
196+  8E2B
197+  8E2B              ; Modifica (Puntero_DESPLZ_izq).
198+  8E2B
199+  8E2B              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la derecha.
200+  8E2B              ; Cuántos movimientos hemos hecho ??
201+  8E2B              ; DE contiene (Puntero_DESPLZ_der).
202+  8E2B
203+  8E2B 2A 08 85     7 ld hl,(Indice_Sprite_der)
204+  8E2E EB           	ex de,hl
205+  8E2F A7           	and a
206+  8E30 ED 52        	sbc hl,de
207+  8E32 CB 3D        	srl l
208+  8E34 3E 08        6 ld a,8
209+  8E36 95           	sub l
210+  8E37 30 1E        	jr nc,3F
211+  8E39
212+  8E39              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_der) dentro del mismo.
213+  8E39              ; B="0".
214+  8E39
215+  8E39 04           4 inc b
216+  8E3A 3C           	inc a
217+  8E3B 20 FC        	jr nz,4B
218+  8E3D 78           	ld a,b
219+  8E3E 08           	ex af,af
220+  8E3F 2A 08 85     	ld hl,(Indice_Sprite_der)
221+  8E42 23           5 inc hl
222+  8E43 23           	inc hl
223+  8E44 10 FC        	djnz 5B
224+  8E46 22 0C 85     	ld (Puntero_DESPLZ_der),hl
225+  8E49 CD AF 86     	call Extrae_address
226+  8E4C 22 02 85     	ld (Puntero_objeto),hl
227+  8E4F
228+  8E4F              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
229+  8E4F              ; _(Posicion_actual).
230+  8E4F
231+  8E4F 21 00 85     	ld hl,Posicion_actual
232+  8E52 34           	inc (hl)
233+  8E53 08               ex af,af
234+  8E54 6F           	ld l,a
235+  8E55 18 DD        	jr 6B
236+  8E57
237+  8E57              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
238+  8E57
239+  8E57 47           3 ld b,a
240+  8E58 2A 0A 85     	ld hl,(Indice_Sprite_izq)
241+  8E5B 23           2 inc hl
242+  8E5C 23           	inc hl
243+  8E5D 10 FC        	djnz 2B
244+  8E5F 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
245+  8E62 C9           8 ret
246+  8E63
247+  8E63              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
248+  8E63              ;
249+  8E63              ;	24/7/22
250+  8E63              ;
251+  8E63              ;	modifica_parametros_1er_DESPLZ_2
252+  8E63              ;
253+  8E63              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
254+  8E63              ; 	También incrementa el byte de control de desplazamiento, (desplz. a derecha) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
255+  8E63              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
256+  8E63
257+  8E63 3A 06 85     modifica_parametros_1er_DESPLZ_2 ld a,(CTRL_DESPLZ)		 		  ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
258+  8E66 A7           	and a
259+  8E67 20 1F        	jr nz,1F
260+  8E69 D6 09            sub 9                							              ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
261+  8E6B 32 06 85         ld (CTRL_DESPLZ),a
262+  8E6E
263+  8E6E 21 FF 84     	ld hl,Columns
264+  8E71 34           	inc (hl)
265+  8E72 3A 12 85     	ld a,(Cuad_objeto)
266+  8E75 E6 01        	and 1
267+  8E77 28 0F        	jr z,1F
268+  8E79 2A 00 85     	ld hl,(Posicion_actual) 									  ; Incrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
269+  8E7C 23           	inc hl 														  ; _ cuadrantes 1 y 3 de pantalla.
270+  8E7D 22 00 85     	ld (Posicion_actual),hl
271+  8E80 CD 5A 90     	call Genera_coordenadas
272+  8E83 CD EE 8F     	call Inc_CTRL_DESPLZ
273+  8E86 18 03        	jr 2F
274+  8E88 CD EE 8F     1 call Inc_CTRL_DESPLZ
275+  8E8B C9           2 ret
276+  8E8C
277+  8E8C              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
278+  8E8C              ;
279+  8E8C              ;	24/7/22
280+  8E8C              ;
281+  8E8C              ;	Ciclo_completo.
282+  8E8C              ;
283+  8E8C              ;	FUNCIONAMIENTO: Si (CTRL_DESPLZ)="$ff" significa que nos hemos desplazado 1 char.
284+  8E8C              ;
285+  8E8C              ;	En ese caso, inicializamos (CTRL_DESPLZ). (CTRL_DESPLZ)="0".
286+  8E8C              ; 	Decrementamos (Columns).
287+  8E8C              ;	Modificamos (Posicion_actual) en función del cuadrante en el que nos encontremos.
288+  8E8C              ;	Borramos la caja de desplazamientos, call Limpia_caja_de_DESPLZ.
289+  8E8C
290+  8E8C
291+  8E8C 3A 06 85     Ciclo_completo ld a,(CTRL_DESPLZ)
292+  8E8F FE FF        	cp $ff
293+  8E91 28 10        	jr z,1F 												     ; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
294+  8E93 E6 F0        	and $f0
295+  8E95 20 28        	jr nz,3F
296+  8E97
297+  8E97              ; (CTRL_DESPLZ) fuera de rango, (por encima de $ff), hay que reajustar.
298+  8E97
299+  8E97 3A 06 85     	ld a,(CTRL_DESPLZ)
300+  8E9A 47           	ld b,a
301+  8E9B 3E F8        	ld a,$f8
302+  8E9D 80           	add b
303+  8E9E 32 06 85     	ld (CTRL_DESPLZ),a
304+  8EA1 18 1C        	jr 3F
305+  8EA3 21 FF 84     1 ld hl,Columns													 ; Tras 8 desplazamientos el objeto desplazado es igual al original.
306+  8EA6 35           	dec (hl) 													 ; Decrementamos el nº de (Columns).
307+  8EA7 AF           	xor a 														 ; Reiniciamos (CTRL_DESPLZ).
308+  8EA8 32 06 85     	ld (CTRL_DESPLZ),a
309+  8EAB 3A 12 85     	ld a,(Cuad_objeto) 											 ; Si estamos situados en el cuadrante 1º o 3º de la pantalla no modificamos_
310+  8EAE E6 01        	and 1 														 ; _(Posicion_actual). Limpiamos la (Caja_de_DESPLZ) y salimos.
311+  8EB0 20 0A        	jr nz,2F
312+  8EB2 2A 00 85     	ld hl,(Posicion_actual)                                      ; Incrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
313+  8EB5 23           	inc hl
314+  8EB6 22 00 85     	ld (Posicion_actual),hl
315+  8EB9 CD 5A 90     	call Genera_coordenadas
316+  8EBC
317+  8EBC              ; Inicia el puntero de Sprite.
318+  8EBC
319+  8EBC CD C6 86     2 call Inicia_puntero_objeto_der
320+  8EBF C9           3 ret
321+  8EC0
322+  8EC0              ; ******************************************************************************************************************************************************************************************
323+  8EC0              ;
324+  8EC0              ;	15/02/23
325+  8EC0              ;
326+  8EC0              ;	Mov_left.
327+  8EC0              ;
328+  8EC0              ; 	Desplaza el Sprite (x)Pixels a la izquierda.
329+  8EC0              ;
330+  8EC0              Mov_left
331+  8EC0
332+  8EC0 21 2B 85     	ld hl,Ctrl_0
333+  8EC3 CB E6        	set 4,(hl) 														; Indicamos con el Bit4 de (Ctrl_0) que hay movimiento. Vamos a utilizar_
334+  8EC5              ; 																	; _esta información para evitar que la entidad se vuelva borrar/pintar_
335+  8EC5              ; 																	; _ en el caso de que no lo haya.
336+  8EC5 3A 2B 85     	ld a,(Ctrl_0)
337+  8EC8 CB 77        	bit 6,a
338+  8ECA 28 06        	jr z,11F 														; Estamos moviendo Amadeus???????. Si es así hemos de comprobar que que no hemos llegado al char.1 de la línea, [Stop_Amadeus].
339+  8ECC
340+  8ECC CD E8 8F     	call Stop_Amadeus_left
341+  8ECF C8           	ret z
342+  8ED0 20 50        	jr nz,8F
343+  8ED2
344+  8ED2 3A 04 85     11 ld a,(Coordenada_X)
345+  8ED5 A7           	and a
346+  8ED6 20 4A        	jr nz,8F
347+  8ED8
348+  8ED8 3A 06 85     	ld a,(CTRL_DESPLZ) 			 									; Si el Sprite no está en el 1er char de la línea, (desaparece por la izquierda), o estando en este, _
349+  8EDB A7           	and a 															; _ (CTRL_DESPLZ)="0", cargamos HL con la (Posicion_actual) y ejecutamos la rutina de desplazamiento, _
350+  8EDC 28 44        	jr z,8F 														; _ pués aún podemos desplazarlo antes de desaparecer.
351+  8EDE
352+  8EDE              ; ---------- ---------- ----------
353+  8EDE
354+  8EDE 3A 13 85     	ld a,(Vel_left)
355+  8EE1 FE 02        	cp 2
356+  8EE3 28 0F        	jr z,1F
357+  8EE5 38 04        	jr c,6F
358+  8EE7 FE 04        	cp 4
359+  8EE9 28 12        	jr z,7F
360+  8EEB
361+  8EEB              ; ---------- ---------- ----------
362+  8EEB
363+  8EEB 3A 06 85     6 ld a,(CTRL_DESPLZ)
364+  8EEE FE F9        	cp $f9
365+  8EF0 20 30        	jr nz,8F
366+  8EF2 18 10        	jr 4F
367+  8EF4 3A 06 85     1 ld a,(CTRL_DESPLZ)
368+  8EF7 FE FA        	cp $fa
369+  8EF9 20 27        	jr nz,8F
370+  8EFB 18 07        	jr 4F
371+  8EFD 3A 06 85     7 ld a,(CTRL_DESPLZ)
372+  8F00 FE FC        	cp $fc
373+  8F02 20 1E        	jr nz,8F
374+  8F04
375+  8F04              ; ---------- ---------- ----------
376+  8F04
377+  8F04              4
378+  8F04 CD 10 90     	call Reaparece_derecha 											; Despues de haber actualizado la coordenada X del Sprite, (de 0 a 31). Si el movimiento es al char. _
379+  8F07              ;	call Reinicio
380+  8F07
381+  8F07              ; ---------- ---------- ----------
382+  8F07
383+  8F07 06 02        	ld b,2 															; Para hacer que el objeto aparezca poco a poco, hemos de desplazarlo 2 veces: El primer desplazamiento_
384+  8F09 C5           5 push bc 															; _pone (CTRL_DESPLZ) a "0" y el segundo a "$ff". Con esto hacemos que el Sprite tenga espacio en blanco delante_
385+  8F0A
386+  8F0A 2A 0A 85     	ld hl,(Indice_Sprite_izq)
387+  8F0D 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
388+  8F10
389+  8F10 CD 29 8F     	call DESPLZ_IZQ
390+  8F13 C1           	pop bc
391+  8F14 10 F3        	djnz 5B
392+  8F16 2A 00 85     	ld hl,(Posicion_actual) 										; Incrementamos su posición actual, pués al desplazarlo a la izquierda, volvemos a incrementar el nº de (Columns) y _
393+  8F19 23           	inc hl 															; _ (Posicion_actual) ha pasado de $1f a $1e.
394+  8F1A 22 00 85     	ld (Posicion_actual),hl
395+  8F1D CD 5A 90     	call Genera_coordenadas
396+  8F20 18 06        	jr 2F 															; Salimos para pintar la nueva posición.
397+  8F22
398+  8F22              ; ---------- ---------- ----------
399+  8F22              ; Movemos, no hay recolocación.
400+  8F22
401+  8F22 2A 00 85     8 ld hl,(Posicion_actual)
402+  8F25 CD 29 8F     	call DESPLZ_IZQ
403+  8F28 C9           2 ret
404+  8F29
405+  8F29              ; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
406+  8F29              ;
407+  8F29              ;	22/9/22
408+  8F29
409+  8F29              DESPLZ_IZQ
410+  8F29
411+  8F29 CD 38 8F     	call Desplaza_izquierda
412+  8F2C CD 84 8F         call modifica_parametros_1er_DESPLZ
413+  8F2F CD AC 8F     	call Ciclo_completo_2
414+  8F32 21 2B 85     	ld hl,Ctrl_0 													; Indica que nos hemos desplazado a la izquierda
415+  8F35 CB BE        	res 7,(hl)
416+  8F37 C9           	ret
417+  8F38
418+  8F38              Desplaza_izquierda
419+  8F38
420+  8F38 3A 13 85     	ld a,(Vel_left)
421+  8F3B 47           	ld b,a
422+  8F3C 2A 0E 85     	ld hl,(Puntero_DESPLZ_izq)
423+  8F3F 23           1 inc hl
424+  8F40 23           	inc hl
425+  8F41 10 FC        	djnz 1B 														; Seleccionamos FRAME en función de la velocidad del Sprite.
426+  8F43 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
427+  8F46 CD AF 86     	call Extrae_address
428+  8F49 22 02 85     	ld (Puntero_objeto),hl
429+  8F4C
430+  8F4C              ; Modifica (Puntero_DESPLZ_der).
431+  8F4C
432+  8F4C              ; Vamos a descontar a "8" el nº de movimientos que hemos efectuado a la izq.
433+  8F4C              ; Cuántos movimientos hemos hecho ??
434+  8F4C              ; DE contiene (Puntero_DESPLZ_izq).
435+  8F4C
436+  8F4C 2A 0A 85     7 ld hl,(Indice_Sprite_izq)
437+  8F4F EB           	ex de,hl
438+  8F50 A7           	and a
439+  8F51 ED 52        	sbc hl,de
440+  8F53 CB 3D        	srl l
441+  8F55 3E 08        6 ld a,8
442+  8F57 95           	sub l
443+  8F58 30 1E        	jr nc,3F
444+  8F5A
445+  8F5A              ; Hemos salido del índice. Hay que ajustar (Puntero_DESPLZ_izq) dentro del mismo.
446+  8F5A              ; B="0".
447+  8F5A
448+  8F5A 04           4 inc b
449+  8F5B 3C           	inc a
450+  8F5C 20 FC        	jr nz,4B
451+  8F5E 78           	ld a,b
452+  8F5F 08           	ex af,af
453+  8F60 2A 0A 85     	ld hl,(Indice_Sprite_izq)
454+  8F63 23           5 inc hl
455+  8F64 23           	inc hl
456+  8F65 10 FC        	djnz 5B
457+  8F67 22 0E 85     	ld (Puntero_DESPLZ_izq),hl
458+  8F6A CD AF 86     	call Extrae_address
459+  8F6D 22 02 85     	ld (Puntero_objeto),hl
460+  8F70
461+  8F70              ; Si nos hemos salido del índice es porque hemos completado un ciclo completo. Habrá que actualizar_
462+  8F70              ; _(Posicion_actual).
463+  8F70
464+  8F70 21 00 85     	ld hl,Posicion_actual
465+  8F73 35           	dec (hl)
466+  8F74 08           	ex af,af
467+  8F75 6F           	ld l,a
468+  8F76 18 DD        	jr 6B
469+  8F78
470+  8F78              ; Permanecemos en el índice. No hay que reajustar (Puntero_DESPLZ_izq).
471+  8F78
472+  8F78 47           3 ld b,a
473+  8F79 2A 08 85     	ld hl,(Indice_Sprite_der)
474+  8F7C 23           2 inc hl
475+  8F7D 23           	inc hl
476+  8F7E 10 FC        	djnz 2B
477+  8F80 22 0C 85     	ld (Puntero_DESPLZ_der),hl
478+  8F83 C9           8 ret
479+  8F84
480+  8F84              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
481+  8F84              ;
482+  8F84              ;	modifica_parametros_1er_DESPLZ
483+  8F84              ;
484+  8F84              ;	La rutina modifica el nº de columnas del objeto en el 1er desplazamiento.
485+  8F84              ; 	También decrementa el byte de control de desplazamiento, (desplz. a izq) y modifica la posición de (Puntero_datas) en función del cuadrante de pantalla en el que nos encontremos.
486+  8F84              ; 	Si el desplazamiento se produce en el 2º o 4º cuadrante, la rutina decrementará (Posicion_actual).
487+  8F84
488+  8F84 3A 06 85     modifica_parametros_1er_DESPLZ ld a,(CTRL_DESPLZ) 				    ; Incrementamos el nª de (Columns) cuando desplazamos el objeto por 1ª vez.
489+  8F87 A7           	and a
490+  8F88 20 1E        	jr nz,1F
491+  8F8A 3D               dec a              							            	    ; Situamos en $f7 el valor de partida de (CTRL_DESPLZ) tras el 1er desplazamiento.
492+  8F8B 32 06 85         ld (CTRL_DESPLZ),a
493+  8F8E 21 FF 84     	ld hl,Columns
494+  8F91 34           	inc (hl)
495+  8F92 3A 12 85     	ld a,(Cuad_objeto)
496+  8F95 E6 01        	and 1
497+  8F97 20 0F        	jr nz,1F
498+  8F99 2A 00 85     	ld hl,(Posicion_actual) 									    ; Decrementamos 1 char. el valor de (Posicion_actual), la primera vez que desplazamos el objeto y se encuentra en los _
499+  8F9C 2B           	dec hl 														    ; _ cuadrantes 2 y 4 de pantalla.
500+  8F9D 22 00 85     	ld (Posicion_actual),hl
501+  8FA0 CD 5A 90     	call Genera_coordenadas
502+  8FA3 CD FF 8F     	call Dec_CTRL_DESPLZ
503+  8FA6 18 03        	jr 2F
504+  8FA8 CD FF 8F     1 call Dec_CTRL_DESPLZ
505+  8FAB C9           2 ret
506+  8FAC
507+  8FAC              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
508+  8FAC
509+  8FAC 3A 06 85     Ciclo_completo_2 ld a,(CTRL_DESPLZ)
510+  8FAF FE F7        	cp $f7
511+  8FB1 28 12        	jr z,1F 												   		; Salimos de la rutina si no hemos completado 8 o más desplazamientos.
512+  8FB3 30 2C        	jr nc,3F
513+  8FB5
514+  8FB5              ; (CTRL_DESPLZ) fuera de rango, (por debajo de $f7), hay que reajustar.
515+  8FB5
516+  8FB5 06 00        	ld b,0
517+  8FB7 04           4 inc b
518+  8FB8 3C           	inc a
519+  8FB9 FE F7        	cp $f7
520+  8FBB 20 FA        	jr nz,4B
521+  8FBD 3E FF        	ld a,$ff
522+  8FBF 90           	sub b
523+  8FC0 32 06 85     	ld (CTRL_DESPLZ),a
524+  8FC3 18 1C        	jr 3F
525+  8FC5
526+  8FC5              ; Se completa el ciclo de movimiento. (CTRL_DESPLZ)="0", se generan coordenadas y se corrige (Posicion_actual).
527+  8FC5
528+  8FC5 21 FF 84     1 ld hl,Columns
529+  8FC8 35           	dec (hl)
530+  8FC9 AF           	xor a
531+  8FCA 32 06 85     	ld (CTRL_DESPLZ),a
532+  8FCD 3A 12 85     	ld a,(Cuad_objeto)
533+  8FD0 E6 01        	and 1
534+  8FD2 28 0A        	jr z,2F
535+  8FD4 2A 00 85     	ld hl,(Posicion_actual)                                         ; Decrementamos (Posicion_actual) en los cuadrantes 2º y 4º.
536+  8FD7 2B           	dec hl
537+  8FD8 22 00 85     	ld (Posicion_actual),hl
538+  8FDB CD 5A 90     	call Genera_coordenadas
539+  8FDE
540+  8FDE              ; Inicia (Puntero_DESPLZ_izq) y (Puntero_objeto).
541+  8FDE
542+  8FDE CD D9 86     2 call Inicia_puntero_objeto_izq
543+  8FE1 C9           3 ret
544+  8FE2
545+  8FE2              ; ---------- ---------- ---------- ---------- ---------- ----------
546+  8FE2              ;
547+  8FE2              ;	19/10/22
548+  8FE2              ;
549+  8FE2              ;	(cp 29) para un Amadeus de 3 Columns.
550+  8FE2              ;	(cp 30)   ""  ""    ""     2 Columns.
551+  8FE2
552+  8FE2 3A 04 85     Stop_Amadeus_right ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
553+  8FE5 FE 1E        	cp 30																			 ; Hemos llegado al límite derecho de la pantalla??.
554+  8FE7 C9           	ret
555+  8FE8
556+  8FE8              ; ---------- ---------- ---------- ---------- ---------- ----------
557+  8FE8              ;
558+  8FE8              ;	19/10/22
559+  8FE8              ;
560+  8FE8              ;	(cp 2) para un Amadeus de 3 Columns.
561+  8FE8              ;	(cp 1)   ""  ""    ""     2 Columns.
562+  8FE8
563+  8FE8 3A 04 85     Stop_Amadeus_left ld a,(Coordenada_X)	 	  										 ; Posición horizontal de Amadeus.
564+  8FEB FE 01        	cp 1																			 ; Hemos llegado al límite izquierdo de la pantalla??.
565+  8FED C9           	ret
566+  8FEE
567+  8FEE              ; ---------- ---------- ---------- ---------- ---------- ----------
568+  8FEE              ;
569+  8FEE              ;	24/7/22
570+  8FEE              ;
571+  8FEE              ;	Inc_CTRL_DESPLZ
572+  8FEE              ;
573+  8FEE              ;
574+  8FEE              ;   Incrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
575+  8FEE
576+  8FEE 21 06 85     Inc_CTRL_DESPLZ ld hl,CTRL_DESPLZ
577+  8FF1 3A 14 85     	ld a,(Vel_right)
578+  8FF4 A7           	and a
579+  8FF5 28 06        	jr z,1F
580+  8FF7 47           	ld b,a
581+  8FF8 34           3 inc (hl)
582+  8FF9 10 FD        	djnz 3B
583+  8FFB 18 01        	jr 2F
584+  8FFD 34           1 inc (hl)
585+  8FFE C9           2 ret
586+  8FFF
587+  8FFF              ; ---------- ---------- ---------- ---------- ---------- ----------
588+  8FFF              ;
589+  8FFF              ;	5/2/23
590+  8FFF              ;
591+  8FFF              ;	Dec_CTRL_DESPLZ
592+  8FFF              ;
593+  8FFF              ;
594+  8FFF              ;   Decrementa el valor del byte de control, (CTRL_DESPLZ) en función del nº de veces que hayamos desplazado el objeto, (Vel_right).
595+  8FFF
596+  8FFF 21 06 85     Dec_CTRL_DESPLZ ld hl,CTRL_DESPLZ
597+  9002 3A 13 85     	ld a,(Vel_left)
598+  9005 A7           	and a
599+  9006 28 06        	jr z,1F
600+  9008 47           	ld b,a
601+  9009 35           3 dec (hl)
602+  900A 10 FD        	djnz 3B
603+  900C 18 01        	jr 2F
604+  900E 35           1 dec (hl)
605+  900F C9           2 ret
606+  9010
607+  9010              ; ---------- ---------- ---------- ---------- ---------- ----------
608+  9010
609+  9010 2A 00 85     Reaparece_derecha ld hl,(Posicion_actual)
610+  9013 01 1F 00     	ld bc,31
611+  9016 A7           	and a
612+  9017 ED 4A        	adc hl,bc
613+  9019 22 00 85     	ld (Posicion_actual),hl
614+  901C 21 2B 85     	ld hl,Ctrl_0														; $xxx1
615+  901F CB C6        	set 0,(hl)
616+  9021 C9           	ret
617+  9022
618+  9022              ; ---------- ---------- ---------- ---------- ---------- ----------
619+  9022
620+  9022 2A 00 85     Reaparece_izquierda ld hl,(Posicion_actual)
621+  9025 01 1F 00     	ld bc,31
622+  9028 A7           	and a
623+  9029 ED 42        	sbc hl,bc
624+  902B 22 00 85     	ld (Posicion_actual),hl 											; $xx1x
625+  902E 21 2B 85     	ld hl,Ctrl_0
626+  9031 CB CE        	set 1,(hl)
627+  9033 C9           	ret
628+  9034
629+  9034              ; ---------- ---------- ---------- ---------- ---------- ----------
630+  9034
631+  9034 24           Reaparece_abajo inc h
632+  9035 01 E0 17     	ld bc,$17e0
633+  9038 A7           	and a
634+  9039 ED 4A        	adc hl,bc
635+  903B 22 00 85     	ld (Posicion_actual),hl
636+  903E 21 2B 85     	ld hl,Ctrl_0
637+  9041 CB D6        	set 2,(hl)
638+  9043 C9           	ret
639+  9044
640+  9044              ; ---------- ---------- ---------- ---------- ---------- ----------
641+  9044
642+  9044 01 E0 17     Reaparece_arriba ld bc,$17e0
643+  9047 A7           	and a
644+  9048 ED 42        	sbc hl,bc
645+  904A 22 00 85     	ld (Posicion_actual),hl
646+  904D 21 2B 85     	ld hl,Ctrl_0
647+  9050 CB DE        	set 3,(hl)
648+  9052 C9           	ret
649+  9053
650+  9053              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
651+  9053
652+  9053 2A 10 85     Reinicio ld hl,(Posicion_inicio)
653+  9056 22 00 85     	ld (Posicion_actual),hl
654+  9059 C9           	ret
# file closed: Direcciones.asm
760   905A              	include "Genera_coordenadas.asm"
# file opened: Genera_coordenadas.asm
  1+  905A              ;	12/12/22
  2+  905A              ;
  3+  905A              ;	Proporciona las coordenadas del objeto a imprimir.
  4+  905A              ;	Fila superior "0", Columna izquierda "0".
  5+  905A              ;
  6+  905A              ;	Input: HL contendrá la (Posicion_actual) del Sprite.
  7+  905A              ;
  8+  905A              ;	Modifica: A
  9+  905A
 10+  905A C5           Genera_coordenadas push bc
 11+  905B E5           	push hl
 12+  905C 2A 00 85     	ld hl,(Posicion_actual)
 13+  905F 7D           	ld a,l
 14+  9060 E6 1F        	and $1f
 15+  9062 32 04 85     	ld (Coordenada_X),a 								; Coordenada X del sprite, (0-$1f).
 16+  9065 CD 28 8D     	call calcula_tercio
 17+  9068 47           	ld b,a
 18+  9069 04           	inc b												; Tercio de pantalla+1 en B, (1,2 o 3).
 19+  906A 0E 00        	ld c,0 												; Contador de filas a "0".
 20+  906C 7D           	ld a,l
 21+  906D E6 E0        	and $e0 											; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
 22+  906F 28 05        	jr z,2F
 23+  9071 0C           1 inc c
 24+  9072 D6 20        	sub 32
 25+  9074 20 FB        	jr nz,1B
 26+  9076 0C           2 inc c
 27+  9077 04           	inc b
 28+  9078 05           	dec b
 29+  9079 28 04        	jr z,3F
 30+  907B 3E E0        	ld a,$e0
 31+  907D 10 F2        	djnz 1B
 32+  907F 79           3 ld a,c
 33+  9080 3D           	dec a
 34+  9081 32 05 85     	ld (Coordenada_y),a
 35+  9084 E1           	pop hl
 36+  9085 C1           	pop bc
 37+  9086 C9           	ret
# file closed: Genera_coordenadas.asm
761   9087              	include "Patrones_de_mov.asm"
# file opened: Patrones_de_mov.asm
  1+  9087
  2+  9087
  3+  9087              ;   11/8/22
  4+  9087              ;
  5+  9087              ;   Base de datos. PATRONES DE MOVIMIENTO.
  6+  9087              ;
  7+  9087              ;   Mov_obj.asm
  8+  9087              ;
  9+  9087              ;   Coordenada_X db 0 									    	; Coordenada X del objeto. (En chars.)
 10+  9087              ;   Coordenada_y db 0 									    	; Coordenada Y del objeto. (En chars.)
 11+  9087              ;
 12+  9087              ;   Codificación:
 13+  9087              ;
 14+  9087              ;   % abajo,arriba,derecha,izquierda ..... nº de repeticiones del movimiento.
 15+  9087
 16+  9087              ;   El "0"; último .db indica que ya hemos terminado de ejecutar todas las cadenas de movimiento.
 17+  9087
 18+  9087 02 40 00     Arriba db 2,%01000000,0
 19+  908A 02 80 00     Abajo db 2,%10000000,0
 20+  908D 02 20 00     Derecha db 2,%00100000,0
 21+  9090 02 10 00     Izquierda db 2,%00010000,0
 22+  9093 2C 44 60 42  Onda_senoidal db 44,%01000100,%01100000,%01000010,%01100000,%01000010,%01100000,%01000000,%01100011
 22+  9097 60 42 60 40
 22+  909B 63
 23+  909C 22 60 25 A0      db %00100010,%01100000,%00100101,%10100000,%00100010,%10100011,%10000000,%10100000
 23+  90A0 22 A3 80 A0
 24+  90A4 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000100,%10100000,%10000011,%10100000
 24+  90A8 84 A0 83 A0
 25+  90AC 82 A0 82 A0      db %10000010,%10100000,%10000010,%10100000,%10000000,%10100011,%00100010,%10100000
 25+  90B0 80 A3 22 A0
 26+  90B4 25 60 22 63      db %00100101,%01100000,%00100010,%01100011,%01000000,%01100000,%01000010,%01100000
 26+  90B8 40 60 42 60
 27+  90BC 42 60 44 00      db %01000010,%01100000,%01000100,0
 28+  90C0 03 14 44 00  Escaloncitos_izquierda_arriba db 3,%00010100,%01000100,0
 29+  90C4 03 24 44 00  Escaloncitos_derecha_arriba db 3,%00100100,%01000100,0
 30+  90C8 04 24 84 24  Escaloncitos_derecha_abajo db 4,%00100100,%10000100,%00100100,%10000100
 30+  90CC 84
 31+  90CD 05 14 84 14  Escaloncitos_izquierda_abajo db 5,%00010100,%10000100,%00010100,%10000100,0
 31+  90D1 84 00
 32+  90D3 03 2F 1F 00  Derecha_e_izquierda db 3,%00101111,%00011111,0
 33+  90D7 21 1F 1F 1F  Izquierda_y_derecha db 33,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 33+  90DB 1F 1F 1F 1F
 34+  90DF 1F 1F 1F 1F      db %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
 34+  90E3 1F 1F 1F 1F
 34+  90E7 1F
 35+  90E8 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111,%00101111
 35+  90EC 2F 2F 2F 2F
 35+  90F0 2F 2F
 36+  90F2 2F 2F 2F 2F      db %00101111,%00101111,%00101111,%00101111,%00101111,%00101111,0
 36+  90F6 2F 2F 00
 37+  90F9
 38+  90F9
 39+  90F9              ; ----- ----- ----- ----- -----
 40+  90F9
 41+  90F9 D7 90        Indice_mov_Izquierda_y_derecha defw Izquierda_y_derecha
 42+  90FB D3 90        Indice_mov_Derecha_e_izquierda defw Derecha_e_izquierda
 43+  90FD 90 90        Indice_mov_Izquierda defw Izquierda
 44+  90FF 8D 90        Indice_mov_Derecha defw Derecha
 45+  9101 8A 90        Indice_mov_Abajo defw Abajo
 46+  9103 87 90        Indice_mov_Arriba defw Arriba
 47+  9105 C4 90        Indice_mov_Escaloncitos_derecha_arriba defw Escaloncitos_derecha_arriba
 48+  9107 C8 90        Indice_mov_Escaloncitos_derecha_abajo defw Escaloncitos_derecha_abajo
 49+  9109 C0 90        Indice_mov_Escaloncitos_izquierda_arriba defw Escaloncitos_izquierda_arriba
 50+  910B CD 90        Indice_mov_Escaloncitos_izquierda_abajo defw Escaloncitos_izquierda_abajo
 51+  910D 93 90        Indice_mov_Onda_senoidal defw Onda_senoidal
 52+  910F              ; ----- ----- ----- ----- -----
 53+  910F
 54+  910F 3A 31 85     Movimiento ld a,(Contador_db_mov)                               ; Hemos iniciado la cadena de movimiento ?. Si (Contador_db_mov) aún es "0" hay que inicializarlo._
 55+  9112 A7               and a                                                       ; _Para hacerlo, hemos de fijar antes (Puntero_mov).
 56+  9113 28 02            jr z,1F
 57+  9115 18 13            jr Decoder                                                  ; Saltamos a [Decoder] si ya hemos iniciado la cadena.
 58+  9117 3A 32 85     1 ld a,(Incrementa_puntero)                                     ; Vamos a inicializar las variables de movimiento. El contador (Incrementa_puntero) es un byte que inicialmente está a "0"._
 59+  911A C6 02            add 2                                                       ; _va incrementando su valor en 2 unidades cada vez que iniciamos una cadena. Se utiliza para ir incrementando (Puntero_mov)_
 60+  911C 32 32 85         ld (Incrementa_puntero),a                                   ; _ por el índice de cadenas de movimiento correspondiente. Su valor se restablecerá a "0" cuando encontremos
 61+  911F              ;                                                               ; _ el .db0. (Indica que hemos terminado de leer la secuencia de movimiento completa de la entidad).
 62+  911F 2A 2F 85         ld hl,(Puntero_mov)
 63+  9122 7E               ld a,(hl)
 64+  9123 32 31 85         ld (Contador_db_mov),a                                      ; Contador de bytes de la cadena inicializado. (El 1er byte de cada cadena de mov. indica el nº de bytes de_
 65+  9126 23               inc hl                                                      ; _movimiento que hemos de ejecutar).
 66+  9127 22 2F 85         ld (Puntero_mov),hl                                         ; Situamos (Puntero_mov) en el 1er byte de instrucciones.
 67+  912A
 68+  912A 3A 33 85     Decoder ld a,(Repetimos_db)
 69+  912D A7               and a
 70+  912E 20 0C            jr nz,12F
 71+  9130 2A 2F 85         ld hl,(Puntero_mov)
 72+  9133 7E               ld a,(hl)
 73+  9134 A7               and a
 74+  9135 28 69            jr z, Reinicia_el_movimiento                              ; Hemos terminado de ejecutar todas las cadenas de movimiento. Llamamos a [Fin_de_movimiento].
 75+  9137 E6 0F            and $0f
 76+  9139 32 33 85         ld (Repetimos_db),a                                         ; Si la variable de repetición de .db es "0" hemos de inicializar dicha variable antes de empezar con la decodificación del .db de_
 77+  913C              ;                                                               ; _movimiento. Este valor lo proporciona el nibble `bajo´ del byte.
 78+  913C 2A 2F 85     12 ld hl,(Puntero_mov)
 79+  913F CB 7E            bit 7,(hl)
 80+  9141 28 03            jr z,2F
 81+  9143 CD 46 8D         call Mov_down
 82+  9146 2A 2F 85     2 ld hl, (Puntero_mov)
 83+  9149 CB 76            bit 6,(hl)
 84+  914B 28 03            jr z,3F
 85+  914D CD 74 8D         call Mov_up
 86+  9150 2A 2F 85     3 ld hl, (Puntero_mov)
 87+  9153 CB 6E            bit 5,(hl)
 88+  9155 28 03            jr z,4F
 89+  9157 CD A2 8D         call Mov_right
 90+  915A 2A 2F 85     4 ld hl, (Puntero_mov)
 91+  915D CB 66            bit 4,(hl)
 92+  915F 28 03            jr z,5F
 93+  9161 CD C0 8E         call Mov_left
 94+  9164
 95+  9164              ; ---------- --------- --------- ---------- ----------
 96+  9164
 97+  9164 3A 33 85     5 ld a,(Repetimos_db)
 98+  9167 A7               and a
 99+  9168 28 07            jr z,6F
100+  916A 3D               dec a
101+  916B 32 33 85         ld (Repetimos_db),a
102+  916E 28 01            jr z,6f
103+  9170 C9           11 ret
104+  9171 21 31 85     6 ld hl,Contador_db_mov
105+  9174 35               dec (hl)                                                       ; Decrementamos el contador de .db de la cadena, (pués ya hemos ejecutado un byte de la misma).
106+  9175 2A 2F 85         ld hl,(Puntero_mov)                                            ; No repetimos el mismo byte. Incrementamos (Puntero_mov) y salimos.
107+  9178 23               inc hl
108+  9179 22 2F 85         ld (Puntero_mov),hl
109+  917C 18 F2            jr 11B
110+  917E 2A 2D 85     7 ld hl,(Puntero_indice_mov)                                       ; PASAMOS A LA CADENA SIGUIENTE !!!!!!
111+  9181 3A 32 85         ld a,(Incrementa_puntero)
112+  9184 47               ld b,a
113+  9185 23           8 inc hl
114+  9186 10 FD            djnz 8B                                                        ; Indice_patrones_coracao +2, +4, +6, etc...
115+  9188 5E               ld e,(hl)
116+  9189 23               inc hl
117+  918A 56               ld d,(hl)
118+  918B EB               ex de,hl
119+  918C 22 2F 85         ld (Puntero_mov),hl                                            ; (Puntero_mov) situado el el 1er .db de la siguiente cadena de movimiento.
120+  918F 18 DF            jr 11B
121+  9191
122+  9191              ; ---------- --------- --------- ---------- ----------
123+  9191              ;
124+  9191              ;   11/8/22
125+  9191              ;
126+  9191              ;   Prepara_Puntero_mov
127+  9191
128+  9191 E5           Prepara_Puntero_mov push hl
129+  9192 D5               push de
130+  9193 2A 2D 85         ld hl,(Puntero_indice_mov)
131+  9196 5E               ld e,(hl)
132+  9197 23               inc hl
133+  9198 56               ld d,(hl)
134+  9199 EB               ex de,hl
135+  919A 22 2F 85         ld (Puntero_mov),hl
136+  919D D1               pop de
137+  919E E1               pop hl
138+  919F C9               ret
139+  91A0
140+  91A0              ; ---------- --------- --------- ---------- ----------
141+  91A0              ;
142+  91A0              ;   11/8/22
143+  91A0              ;
144+  91A0              ;   Reinicia_el_movimiento
145+  91A0
146+  91A0 CD 91 91     Reinicia_el_movimiento call Prepara_Puntero_mov
147+  91A3 AF               xor a
148+  91A4 32 31 85         ld (Contador_db_mov),a
149+  91A7 32 32 85         ld (Incrementa_puntero),a
150+  91AA
151+  91AA              ;    jr $
152+  91AA
153+  91AA C3 0F 91         jp Movimiento
154+  91AD C9               ret
155+  91AE              ; ---------- --------- --------- ---------- ----------
156+  91AE
157+  91AE
158+  91AE
159+  91AE
160+  91AE
161+  91AE
162+  91AE
163+  91AE
164+  91AE
165+  91AE
166+  91AE
167+  91AE
168+  91AE
169+  91AE
170+  91AE
171+  91AE
172+  91AE
173+  91AE
# file closed: Patrones_de_mov.asm
762   91AE              	include "Guarda_foto_registros.asm"
# file opened: Guarda_foto_registros.asm
  1+  91AE              ; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2+  91AE              ;
  3+  91AE              ;	3/1/23
  4+  91AE              ;
  5+  91AE              ;	Instrucciones donde interviene el Stack Pointer, (SP).
  6+  91AE
  7+  91AE              ;	ADC HL,SP	LD (addr),SP
  8+  91AE              ;	ADD HL,SP	LD SP,(addr)
  9+  91AE              ;	ADD IX,SP	LD SP,nn
 10+  91AE              ; 	ADD IY,SP	LD SP,HL
 11+  91AE              ;				LD SP,IX
 12+  91AE              ;	DEC SP		LD SP,IY
 13+  91AE
 14+  91AE              ;	EX (SP),HL
 15+  91AE              ;	EX (SP),IX
 16+  91AE              ;	EX (SP),IY
 17+  91AE
 18+  91AE              ;	INC SP
 19+  91AE
 20+  91AE
 21+  91AE                  org $7fa0
 22+  7FA0
 23+  7FA0              ;   (Stack_snapshot) se sitúa inicialmente en (Album_de_fotos)=$7000.
 24+  7FA0              ;   Almacenaremos los datos/registros necesarios de la siguiente manera:
 25+  7FA0              ;
 26+  7FA0              ;   $7000 / 01 ..... Puntero de impresión de pantalla.
 27+  7FA0              ;   $7002 / 03 ..... Dirección de mem. donde está alojada la correspondiente rutina de impresión.
 28+  7FA0
 29+  7FA0
 30+  7FA0 ED 73 40 85  Guarda_foto_registros ld (Stack),sp               ; Guardo SP en (Stack).
 31+  7FA4 31 9F 7F         ld sp,Guarda_foto_registros - 1               ; Sitúo el Stack Pointer en la dirección actual -1
 32+  7FA7
 33+  7FA7 E5               push hl                                       ; HL contiene la dirección de la rutina de impresión.
 34+  7FA8 DD E5            push ix                                       ; IX contiene el puntero de impresión.
 35+  7FAA FD E5            push iy                                       ; IY contiene (Puntero_objeto).
 36+  7FAC
 37+  7FAC 2A 44 85         ld hl,(Stack_snapshot)                        ; Album_de_fotos contiene la imagen de los registros implicados en el_
 38+  7FAF 06 03            ld b,3                                        ; _correcto funcionamiento de las distintas rutinas de impresión.
 39+  7FB1
 40+  7FB1 D1           1 pop de
 41+  7FB2 73               ld (hl),e
 42+  7FB3 23               inc hl
 43+  7FB4 72               ld (hl),d
 44+  7FB5 23               inc hl                                        ; Volvemos a tener al puntero SP en la posición inicial, (Snapshot)-1.
 45+  7FB6 10 F9            djnz 1B
 46+  7FB8
 47+  7FB8 22 44 85         ld (Stack_snapshot),hl
 48+  7FBB ED 7B 40 85      ld sp,(Stack)
 49+  7FBF
 50+  7FBF C9           3 ret                                             ; Antes de salir de la rutina recuperamos SP y actualizamos,(o no), (Stack_snapshot).
 51+  7FC0
 52+  7FC0
# file closed: Guarda_foto_registros.asm
763   7FC0
764   7FC0              	SAVESNA "Pruebas.sna", START
765   7FC0
766   7FC0
767   7FC0
# file closed: Banco_de_pruebas.asm
