
	DEVICE ZXSPECTRUM48

	org $8000
	ld sp,$ffff

SCREEN

	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$E0,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$F8,$03,$00,$00,$60
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$F8,$03,$00,$00,$60
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1E,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$3C,$00,$00,$00,$60
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$60
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$3F,$9F,$E7
	DEFB	$F3,$FC,$FF,$3F,$DF,$FF,$DF,$C0
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$3F,$9F,$E7
	DEFB	$F3,$FC,$FF,$3F,$DF,$FF,$DF,$C0
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$31,$98,$66
	DEFB	$32,$00,$C0,$30,$D8,$60,$D8,$C0
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$31,$98,$66
	DEFB	$33,$FC,$C0,$30,$D8,$60,$D8,$C0
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$31,$98,$67
	DEFB	$F3,$FC,$C0,$30,$D8,$60,$D8,$C0
	DEFB	$1C,$00,$07,$C0,$F8,$7E,$0E,$3E
	DEFB	$0F,$80,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$31,$98,$66
	DEFB	$00,$0C,$C0,$30,$D8,$60,$DF,$C0
	DEFB	$1C,$00,$0F,$E1,$FC,$7F,$8E,$7E
	DEFB	$1F,$C0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$31,$98,$66
	DEFB	$00,$0C,$C0,$30,$F8,$60,$DF,$C0
	DEFB	$1C,$00,$1F,$F3,$FE,$7F,$CE,$7E
	DEFB	$3F,$E0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$F1,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$F8,$60,$F8,$00
	DEFB	$1C,$00,$1C,$73,$8E,$71,$CE,$F0
	DEFB	$38,$E0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$03,$F1,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$F8,$60,$F8,$00
	DEFB	$1C,$00,$38,$07,$07,$71,$CE,$E6
	DEFB	$70,$70,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$18,$00
	DEFB	$1C,$00,$38,$07,$07,$71,$CE,$E3
	DEFB	$70,$70,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$18,$00
	DEFB	$1C,$00,$1C,$73,$8E,$71,$CE,$F3
	DEFB	$38,$E0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$18,$00
	DEFB	$1C,$00,$1F,$F3,$FE,$7F,$CE,$7F
	DEFB	$3F,$E0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$0F,$E1,$FC,$7F,$8E,$7F
	DEFB	$1F,$C0,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$07,$C0,$F8,$7E,$0E,$1E
	DEFB	$0F,$80,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$0E,$E0,$F0,$3C,$31,$9C
	DEFB	$38,$3C,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$1F,$F1,$F8,$7E,$31,$9C
	DEFB	$7C,$7E,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1E,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$1C,$00,$3F,$F9,$98,$FF,$31,$9C
	DEFB	$FE,$66,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$1F,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0
	DEFB	$1C,$00,$3B,$BB,$9D,$C7,$B1,$9C
	DEFB	$EE,$E7,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$0F,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8
	DEFB	$1C,$00,$3B,$BB,$9D,$81,$B1,$9C
	DEFB	$EE,$E7,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$07,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8
	DEFB	$1C,$00,$3B,$BB,$FD,$91,$B1,$9C
	DEFB	$EE,$FF,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$3C
	DEFB	$1C,$00,$3B,$BB,$FD,$8D,$B1,$9C
	DEFB	$EE,$FF,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$3B,$BB,$9D,$C7,$BF,$9C
	DEFB	$EE,$E7,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$3F
	DEFB	$80,$00,$0F,$80,$00,$0F,$80,$1C
	DEFB	$1C,$00,$3B,$BB,$9C,$FF,$1F,$1C
	DEFB	$EE,$E7,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$7F
	DEFB	$C0,$00,$3F,$C0,$00,$3F,$C0,$1C
	DEFB	$1C,$00,$1B,$B1,$98,$79,$8E,$08
	DEFB	$6C,$66,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$FF
	DEFB	$C0,$00,$7F,$C0,$00,$7F,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$FF
	DEFB	$C0,$00,$7F,$C0,$00,$7F,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$01,$FF
	DEFB	$C0,$00,$FF,$C0,$00,$FF,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$01,$FF
	DEFB	$C0,$00,$FF,$C0,$00,$FF,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$01,$FF
	DEFB	$C0,$01,$FF,$C0,$01,$FF,$C0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$03,$FF
	DEFB	$80,$01,$FF,$80,$01,$FF,$C0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$40
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$03,$FF
	DEFB	$80,$01,$FF,$80,$01,$FF,$C0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$40
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$07,$FF
	DEFB	$00,$03,$FF,$00,$03,$FF,$80,$1C
	DEFB	$1C,$00,$3A,$20,$73,$C3,$0E,$F5
	DEFB	$A2,$5B,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$07,$FF
	DEFB	$00,$03,$FF,$00,$03,$FF,$80,$1C
	DEFB	$1C,$00,$09,$40,$82,$24,$90,$46
	DEFB	$22,$64,$80,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$07,$FF
	DEFB	$00,$07,$FE,$00,$07,$FF,$00,$1C
	DEFB	$1C,$00,$10,$80,$C2,$27,$90,$44
	DEFB	$22,$44,$80,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$0F,$FE
	DEFB	$00,$07,$FE,$00,$07,$FF,$00,$1C
	DEFB	$1C,$00,$10,$80,$32,$24,$10,$44
	DEFB	$22,$44,$80,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$0F,$FE
	DEFB	$00,$07,$FE,$00,$0F,$FE,$00,$1C
	DEFB	$1C,$00,$21,$40,$12,$24,$10,$44
	DEFB	$26,$44,$80,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$0F,$FC
	DEFB	$00,$0F,$FC,$00,$0F,$FE,$00,$1C
	DEFB	$1C,$00,$3A,$20,$E3,$C3,$8E,$34
	DEFB	$1A,$44,$80,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$1F,$FC
	DEFB	$00,$0F,$FC,$00,$0F,$FE,$00,$1C
	DEFB	$1C,$00,$00,$00,$02,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$01
	DEFB	$00,$00,$00,$00,$00,$00,$1F,$FC
	DEFB	$00,$1F,$F8,$00,$1F,$FC,$00,$1C
	DEFB	$1C,$00,$00,$00,$02,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$03
	DEFB	$80,$00,$00,$00,$00,$00,$3F,$F8
	DEFB	$00,$1F,$F8,$00,$1F,$FC,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$17
	DEFB	$D0,$00,$00,$00,$00,$00,$3F,$F8
	DEFB	$00,$3F,$F8,$00,$3F,$F8,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$35
	DEFB	$58,$00,$00,$00,$00,$00,$3F,$F0
	DEFB	$00,$3F,$F0,$00,$3F,$F8,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$27
	DEFB	$C8,$00,$00,$00,$00,$00,$7F,$F0
	DEFB	$00,$3F,$F0,$00,$3F,$F8,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$2F
	DEFB	$E8,$00,$00,$00,$00,$00,$7F,$F0
	DEFB	$00,$7F,$E0,$00,$7F,$F0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$3F
	DEFB	$F8,$00,$00,$00,$00,$00,$FF,$E0
	DEFB	$00,$7F,$E0,$00,$7F,$F0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$0F
	DEFB	$E0,$00,$00,$00,$00,$00,$FF,$E0
	DEFB	$00,$FF,$E0,$00,$FF,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$10,$00
	DEFB	$81,$00,$08,$00,$00,$00,$00,$0F
	DEFB	$E0,$00,$00,$00,$00,$00,$FF,$C0
	DEFB	$00,$FF,$C0,$00,$FF,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$08,$00,$00,$00,$00,$2F
	DEFB	$E8,$00,$00,$00,$00,$01,$FF,$C0
	DEFB	$00,$FF,$C0,$01,$FF,$C0,$00,$1C
	DEFB	$1C,$00,$18,$86,$40,$18,$D1,$8E
	DEFB	$99,$21,$9C,$CF,$00,$00,$00,$3C
	DEFB	$78,$00,$00,$00,$00,$01,$FF,$C0
	DEFB	$01,$FF,$80,$01,$FF,$C0,$00,$1C
	DEFB	$1C,$00,$25,$48,$A0,$25,$12,$50
	DEFB	$A5,$52,$49,$28,$00,$00,$00,$18
	DEFB	$30,$00,$00,$00,$00,$03,$FF,$80
	DEFB	$01,$FF,$80,$01,$FF,$C0,$00,$1C
	DEFB	$1C,$00,$25,$48,$A0,$25,$12,$50
	DEFB	$A5,$52,$49,$EF,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$03,$FF,$80
	DEFB	$03,$FF,$80,$03,$FF,$80,$00,$1C
	DEFB	$1C,$00,$39,$48,$A0,$39,$12,$50
	DEFB	$B9,$52,$49,$01,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$03,$FF,$00
	DEFB	$03,$FF,$00,$03,$FF,$80,$03,$1C
	DEFB	$1C,$00,$20,$A8,$50,$21,$12,$4E
	DEFB	$A1,$2A,$4D,$EF,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$07,$FF,$00
	DEFB	$07,$FF,$00,$07,$FF,$00,$07,$1C
	DEFB	$1C,$00,$20,$00,$00,$20,$00,$00
	DEFB	$20,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$07,$FF,$00
	DEFB	$07,$FE,$00,$07,$FF,$00,$0F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$07,$FE,$00
	DEFB	$07,$FE,$00,$0F,$FE,$00,$0F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$0F,$FE,$00
	DEFB	$0F,$FC,$00,$0F,$FE,$00,$1F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$0F,$FC,$00
	DEFB	$0F,$FC,$00,$0F,$FE,$00,$1F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$1F,$FC,$00
	DEFB	$1F,$FC,$00,$1F,$FC,$00,$3F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$1F,$F8,$00
	DEFB	$1F,$F8,$00,$1F,$FC,$00,$3F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$1F,$F8,$00
	DEFB	$3F,$F8,$00,$3F,$F8,$00,$7F,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$3F,$F8,$00
	DEFB	$3F,$F0,$00,$3F,$F8,$00,$7F,$1C
	DEFB	$1C,$00,$3F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FE,$00,$00,$3F,$F0,$00
	DEFB	$3F,$F0,$00,$7F,$F0,$00,$7F,$1C
	DEFB	$1C,$00,$7F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$00,$00,$7F,$F0,$00
	DEFB	$7F,$F0,$00,$7F,$F0,$00,$FF,$1C
	DEFB	$1C,$00,$7F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$00,$00,$7F,$E0,$00
	DEFB	$7F,$E0,$00,$7F,$F0,$00,$FF,$1C
	DEFB	$1C,$00,$3F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FE,$00,$00,$7F,$E0,$00
	DEFB	$FF,$E0,$00,$FF,$E0,$01,$FF,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$FF,$E0,$00
	DEFB	$FF,$C0,$00,$FF,$E0,$01,$FF,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$FF,$C0,$00
	DEFB	$FF,$C0,$01,$FF,$C0,$03,$FF,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$01,$FF,$C0,$01
	DEFB	$FF,$C0,$01,$FF,$C0,$03,$FE,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$01,$FF,$80,$01
	DEFB	$FF,$80,$01,$FF,$C0,$03,$FE,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$01,$FF,$80,$03
	DEFB	$FF,$80,$03,$FF,$80,$07,$FC,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$03,$FF,$80,$03
	DEFB	$FF,$00,$03,$FF,$80,$07,$FC,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$03,$FF,$00,$03
	DEFB	$FF,$00,$07,$FF,$00,$0F,$F8,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$03,$FF,$00,$07
	DEFB	$FE,$00,$07,$FF,$00,$0F,$F8,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$07,$FE,$00,$07
	DEFB	$FE,$00,$0F,$FE,$00,$1F,$F0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$07,$FE,$00,$0F
	DEFB	$FE,$00,$0F,$FE,$00,$1F,$F0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$0F,$FE,$00,$0F
	DEFB	$FC,$00,$0F,$FE,$00,$1F,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$0F,$FC,$00,$1F
	DEFB	$FC,$00,$1F,$FC,$00,$3F,$E0,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$0F,$FC,$00,$1F
	DEFB	$F8,$00,$1F,$FC,$00,$3F,$E0,$1C
	DEFB	$1C,$00,$00,$03,$E0,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$1F,$F8,$00,$1F
	DEFB	$F8,$00,$3F,$F8,$00,$7F,$C0,$1C
	DEFB	$1C,$00,$00,$06,$30,$00,$00,$00
	DEFB	$00,$07,$E0,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$1F,$F8,$00,$3F
	DEFB	$F8,$00,$3F,$F8,$00,$7F,$C0,$1C
	DEFB	$1C,$00,$00,$0C,$18,$00,$00,$00
	DEFB	$00,$0C,$10,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$3F,$F8,$00,$3F
	DEFB	$F0,$00,$7F,$F0,$00,$FF,$80,$1C
	DEFB	$1C,$00,$00,$1C,$0C,$00,$00,$00
	DEFB	$00,$18,$08,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$3F,$F0,$00,$7F
	DEFB	$F0,$00,$7F,$F0,$00,$FF,$80,$1C
	DEFB	$1C,$00,$00,$78,$07,$F8,$00,$00
	DEFB	$00,$70,$0F,$C0,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$3F,$F0,$00,$7F
	DEFB	$E0,$00,$7F,$F0,$00,$FF,$00,$1C
	DEFB	$1C,$00,$03,$FF,$FF,$FE,$00,$00
	DEFB	$07,$F0,$07,$FC,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$7F,$E0,$00,$7F
	DEFB	$E0,$00,$FF,$E0,$01,$FF,$00,$1C
	DEFB	$1C,$00,$07,$FF,$FF,$FF,$80,$00
	DEFB	$0F,$FF,$FF,$FF,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$7F,$E0,$00,$FF
	DEFB	$E0,$00,$FF,$E0,$01,$FE,$00,$1C
	DEFB	$1C,$00,$07,$87,$FF,$C3,$C0,$00
	DEFB	$0F,$87,$FF,$C3,$80,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$E0,$00,$FF
	DEFB	$C0,$01,$FF,$C0,$03,$FE,$00,$1C
	DEFB	$1C,$00,$07,$33,$FF,$99,$E0,$00
	DEFB	$0F,$33,$FF,$99,$C0,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$C0,$01,$FF
	DEFB	$C0,$01,$FF,$C0,$03,$FE,$00,$1C
	DEFB	$1C,$00,$03,$7B,$FF,$BC,$E0,$00
	DEFB	$07,$7B,$FF,$BD,$C0,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$C0,$01,$FF
	DEFB	$80,$03,$FF,$C0,$07,$FC,$00,$1C
	DEFB	$1C,$00,$00,$78,$00,$3C,$00,$00
	DEFB	$00,$78,$00,$3C,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FF,$80,$03,$FF
	DEFB	$80,$03,$FF,$80,$07,$FC,$00,$1C
	DEFB	$1C,$00,$00,$30,$00,$18,$00,$00
	DEFB	$00,$30,$00,$18,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FF,$80,$03,$FF
	DEFB	$00,$03,$FF,$80,$0F,$F8,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FF,$80,$03,$FF
	DEFB	$00,$07,$FF,$00,$0F,$F8,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$03,$FF,$00,$07,$FF
	DEFB	$00,$07,$FF,$00,$0F,$F0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$03,$FE,$00,$07,$FE
	DEFB	$00,$0F,$FE,$00,$1F,$F0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FE,$00,$0F,$FE
	DEFB	$00,$0F,$FE,$00,$1F,$F0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FC,$00,$0F,$FC
	DEFB	$00,$1F,$FC,$00,$3F,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$0F,$FC
	DEFB	$00,$1F,$FC,$00,$3F,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$1F,$FC
	DEFB	$00,$1F,$FC,$00,$7F,$C0,$00,$1C
	DEFB	$1C,$00,$7F,$81,$FE,$07,$F8,$1F
	DEFB	$E0,$7F,$83,$F8,$3F,$81,$F8,$1F
	DEFB	$83,$FC,$1C,$00,$00,$00,$1F,$F8
	DEFB	$00,$3F,$F8,$00,$7F,$C0,$00,$1C
	DEFB	$1C,$00,$FF,$C3,$FF,$0F,$FC,$3F
	DEFB	$F0,$FF,$C7,$FC,$7F,$C3,$FC,$3F
	DEFB	$C7,$FE,$3E,$00,$00,$00,$3F,$F8
	DEFB	$00,$3F,$F8,$00,$7F,$80,$00,$1C
	DEFB	$1C,$00,$7F,$81,$FE,$07,$F8,$1F
	DEFB	$E0,$7F,$83,$F8,$3F,$81,$F8,$1F
	DEFB	$83,$FC,$1C,$00,$00,$00,$3F,$F0
	DEFB	$00,$7F,$F0,$00,$FF,$80,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$7F,$F0
	DEFB	$00,$7F,$F0,$00,$FF,$80,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$7F,$F0
	DEFB	$00,$7F,$F0,$01,$FF,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$7F,$E0
	DEFB	$00,$FF,$E0,$01,$FF,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$FF,$E0
	DEFB	$00,$FF,$E0,$03,$FE,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$FF,$C0
	DEFB	$01,$FF,$C0,$03,$FE,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$01,$FF,$C0
	DEFB	$01,$FF,$C0,$03,$FC,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$01,$FF,$C0
	DEFB	$03,$FF,$80,$07,$FC,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$01,$FF,$80
	DEFB	$03,$FF,$80,$07,$FC,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$03,$FF,$80
	DEFB	$03,$FF,$80,$0F,$F8,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$03,$FF,$00
	DEFB	$07,$FF,$00,$0F,$F8,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$04,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$07,$FF,$00
	DEFB	$07,$FF,$00,$1F,$F0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$04,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$07,$FE,$00
	DEFB	$0F,$FE,$00,$1F,$F0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$60,$00,$00
	DEFB	$00,$00,$00,$04,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$0F,$FE,$00
	DEFB	$0F,$FE,$00,$3F,$E0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$01,$F0,$00,$00
	DEFB	$00,$00,$3F,$F4,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$0F,$FE,$00
	DEFB	$1F,$FE,$00,$3F,$E0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$F0,$00,$00
	DEFB	$00,$00,$43,$F4,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$0F,$FC,$00
	DEFB	$1F,$FC,$00,$3F,$E0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$78,$00,$00
	DEFB	$00,$00,$83,$FC,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$1F,$FC,$00
	DEFB	$3F,$FC,$00,$7F,$C0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$03,$F8,$00,$00
	DEFB	$00,$00,$83,$F8,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$1F,$F8,$00
	DEFB	$3F,$F8,$00,$7F,$C0,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$18,$3C,$00,$00
	DEFB	$00,$00,$83,$F8,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$3F,$F8,$00
	DEFB	$3F,$F8,$00,$FF,$80,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$3F,$1D,$E0,$00
	DEFB	$00,$00,$8F,$F0,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$3F,$F8,$00
	DEFB	$7F,$F0,$00,$FF,$80,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$3F,$DF,$C0,$00
	DEFB	$00,$00,$FF,$F0,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$3F,$F0,$00
	DEFB	$7F,$F0,$01,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$0F,$FF,$80,$00
	DEFB	$00,$00,$FF,$F0,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$7F,$F0,$00
	DEFB	$FF,$E0,$01,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$1F,$FF,$00,$00
	DEFB	$00,$00,$FF,$F8,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$7F,$E0,$00
	DEFB	$FF,$E0,$01,$FE,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$39,$FE,$00,$00
	DEFB	$00,$00,$FF,$FC,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$FF,$E0,$01
	DEFB	$FF,$E0,$03,$FE,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$38,$FE,$00,$00
	DEFB	$00,$00,$F0,$FE,$FF,$FF,$FF,$FF
	DEFB	$FF,$F0,$00,$00,$00,$FF,$E0,$01
	DEFB	$FF,$C0,$03,$FE,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$28,$75,$00,$00
	DEFB	$00,$00,$E6,$70,$04,$00,$00,$01
	DEFB	$01,$10,$00,$00,$01,$FF,$C0,$01
	DEFB	$FF,$C0,$07,$FC,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$54,$6A,$80,$00
	DEFB	$00,$00,$CF,$20,$0E,$00,$00,$03
	DEFB	$83,$90,$00,$00,$01,$FF,$C0,$03
	DEFB	$FF,$80,$07,$FC,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$7C,$1F,$00,$00
	DEFB	$00,$00,$1F,$80,$1F,$00,$00,$07
	DEFB	$C7,$D0,$00,$00,$01,$FF,$80,$03
	DEFB	$FF,$80,$0F,$F8,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$7C,$1F,$00,$00
	DEFB	$00,$00,$0F,$00,$1F,$00,$00,$07
	DEFB	$C7,$C0,$00,$00,$03,$FF,$80,$07
	DEFB	$FF,$00,$0F,$F8,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$38,$0E,$00,$00
	DEFB	$00,$00,$06,$00,$0E,$00,$00,$03
	DEFB	$83,$80,$00,$00,$03,$FF,$00,$07
	DEFB	$FF,$00,$0F,$F0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$07,$FF,$00,$07
	DEFB	$FF,$00,$1F,$F0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$07,$FF,$00,$0F
	DEFB	$FE,$00,$1F,$F0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$07,$FE,$00,$0F
	DEFB	$FE,$00,$3F,$E0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$0F,$FE,$00,$1F
	DEFB	$FC,$00,$3F,$E0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$0F,$FC,$00,$1F
	DEFB	$FC,$00,$7F,$C0,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$1F,$FC,$00,$1F
	DEFB	$FC,$00,$7F,$C0,$00,$00,$00,$1C
	DEFB	$1C,$00,$3F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FE,$00,$1F,$FC,$00,$3F
	DEFB	$F8,$00,$FF,$80,$00,$00,$00,$1C
	DEFB	$1C,$00,$7F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$00,$3F,$F8,$00,$3F
	DEFB	$F8,$00,$FF,$80,$00,$00,$00,$1C
	DEFB	$1C,$00,$7F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$00,$3F,$F8,$00,$7F
	DEFB	$F0,$00,$FF,$80,$00,$00,$00,$1C
	DEFB	$1C,$00,$3F,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FE,$00,$7F,$F0,$00,$7F
	DEFB	$F0,$01,$FF,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$7F,$F0,$00,$FF
	DEFB	$E0,$01,$FF,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$7F,$F0,$00,$FF
	DEFB	$E0,$03,$FE,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$E0,$00,$FF
	DEFB	$E0,$03,$FE,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$E0,$01,$FF
	DEFB	$C0,$07,$FC,$3C,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FF,$C0,$01,$FF
	DEFB	$C0,$07,$FC,$7E,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FF,$C0,$03,$FF
	DEFB	$80,$07,$FC,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$0C,$F0,$06,$78,$06,$78
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$FF,$80,$03,$FF
	DEFB	$80,$0F,$F8,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$18,$98,$0C,$4C,$0C,$4C
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$03,$FF,$80,$07,$FF
	DEFB	$00,$0F,$F8,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$1F,$C0,$0F,$E0,$0F,$E0
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$03,$FF,$80,$07,$FF
	DEFB	$00,$1F,$F0,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$0F,$F8,$07,$FC,$07,$FC
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$07,$FF,$00,$07,$FF
	DEFB	$00,$1F,$F0,$FF,$00,$00,$00,$1C
	DEFB	$1C,$00,$07,$EC,$03,$F6,$03,$F6
	DEFB	$00,$00,$00,$00,$10,$00,$00,$00
	DEFB	$00,$00,$00,$07,$FF,$00,$0F,$FE
	DEFB	$00,$3F,$E0,$7E,$00,$00,$00,$1C
	DEFB	$1C,$00,$07,$FE,$03,$FF,$03,$FF
	DEFB	$00,$00,$00,$00,$38,$00,$00,$00
	DEFB	$00,$00,$00,$07,$FE,$00,$0F,$FE
	DEFB	$00,$3F,$E0,$1C,$00,$00,$00,$1C
	DEFB	$1C,$00,$07,$EC,$03,$F6,$03,$F6
	DEFB	$00,$00,$00,$01,$7D,$00,$00,$00
	DEFB	$00,$00,$00,$0F,$FE,$00,$1F,$FC
	DEFB	$00,$3F,$E0,$1C,$06,$00,$00,$1C
	DEFB	$1C,$00,$0F,$F8,$07,$FC,$07,$FC
	DEFB	$00,$00,$00,$03,$55,$80,$00,$00
	DEFB	$00,$00,$00,$0F,$FE,$00,$1F,$FC
	DEFB	$00,$7F,$C0,$1C,$07,$00,$00,$1C
	DEFB	$1C,$00,$1F,$C0,$0F,$E0,$0F,$E0
	DEFB	$00,$00,$00,$02,$7C,$80,$00,$00
	DEFB	$00,$00,$00,$1F,$FC,$00,$3F,$F8
	DEFB	$00,$7F,$C0,$0E,$0F,$00,$00,$1C
	DEFB	$1C,$00,$18,$98,$0C,$4C,$0C,$4C
	DEFB	$00,$00,$00,$02,$FE,$80,$00,$00
	DEFB	$00,$00,$00,$1F,$FC,$00,$3F,$F8
	DEFB	$00,$FF,$80,$0E,$0F,$80,$00,$1C
	DEFB	$1C,$00,$0C,$E0,$06,$70,$06,$70
	DEFB	$00,$00,$00,$03,$FF,$80,$00,$00
	DEFB	$00,$00,$00,$1F,$F8,$00,$3F,$F8
	DEFB	$00,$FF,$80,$0E,$0F,$80,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FE,$00,$00,$00
	DEFB	$00,$00,$00,$3F,$F8,$00,$7F,$F0
	DEFB	$01,$FF,$00,$07,$1D,$C0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$FE,$00,$00,$00
	DEFB	$00,$00,$00,$3F,$F8,$00,$7F,$F0
	DEFB	$01,$FF,$00,$07,$19,$C0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$02,$FE,$80,$00,$00
	DEFB	$00,$00,$00,$7F,$F0,$00,$FF,$E0
	DEFB	$01,$FE,$00,$07,$19,$C0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$03,$C7,$80,$00,$00
	DEFB	$00,$00,$00,$7F,$F0,$00,$FF,$E0
	DEFB	$03,$FE,$00,$03,$B8,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$01,$83,$00,$00,$00
	DEFB	$00,$00,$00,$FF,$E0,$00,$FF,$E0
	DEFB	$03,$FE,$00,$03,$B8,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$FF,$E0,$01,$FF,$C0
	DEFB	$07,$FC,$00,$03,$B0,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$01,$FF,$E0,$01,$FF,$C0
	DEFB	$07,$FC,$00,$01,$F0,$E0,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$01,$FF,$C0,$03,$FF,$80
	DEFB	$0F,$F8,$00,$01,$F0,$70,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$01,$FF,$C0,$03,$FF,$80
	DEFB	$0F,$F8,$00,$01,$E0,$70,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$03,$FF,$C0,$07,$FF,$00
	DEFB	$1F,$F0,$00,$00,$E0,$70,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$03,$FF,$80,$07,$FF,$00
	DEFB	$1F,$F0,$00,$00,$40,$20,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$03,$FF,$80,$07,$FF,$00
	DEFB	$1F,$F0,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$07,$FF,$00,$0F,$FE,$00
	DEFB	$3F,$E0,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$07,$FF,$00,$0F,$FE,$00
	DEFB	$3F,$E0,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$0F,$FE,$00,$1F,$FC,$00
	DEFB	$7F,$C0,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$0F,$FE,$00,$1F,$FC,$00
	DEFB	$7F,$C0,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$07,$FC,$00,$0F,$F8,$00
	DEFB	$3F,$80,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$03,$F0,$00,$03,$F0,$00
	DEFB	$1F,$00,$00,$00,$00,$00,$00,$1C
	DEFB	$1C,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$1C
	DEFB	$1E,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$3C
	DEFB	$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8
	DEFB	$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8
	DEFB	$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	DEFB	$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$06,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$06,$06,$06,$47,$04,$04
	DEFB	$04,$42,$42,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$06,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$06,$06,$06,$42,$04,$04
	DEFB	$04,$04,$42,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$06,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$06,$06,$06,$04,$04,$04
	DEFB	$04,$04,$04,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$06,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$06,$06,$42,$04,$04,$04
	DEFB	$04,$04,$04,$06,$06,$06,$02,$42
	DEFB	$42,$06,$46,$46,$04,$44,$44,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$06,$06,$04,$04,$04
	DEFB	$04,$04,$04,$06,$06,$06,$42,$42
	DEFB	$42,$46,$46,$46,$44,$44,$04,$46
	DEFB	$46,$46,$06,$46,$06,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$42,$42,$44
	DEFB	$44,$04,$06,$47,$47,$02,$42,$42
	DEFB	$06,$46,$46,$06,$44,$44,$02,$46
	DEFB	$46,$46,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$06,$06,$44
	DEFB	$44,$47,$47,$47,$47,$02,$42,$42
	DEFB	$46,$46,$46,$44,$44,$44,$01,$46
	DEFB	$46,$46,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$06,$06,$42,$42,$02
	DEFB	$46,$46,$06,$44,$44,$06,$41,$46
	DEFB	$46,$46,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$06,$02,$42,$42,$46
	DEFB	$46,$46,$44,$44,$44,$41,$41,$46
	DEFB	$46,$46,$06,$06,$06,$06,$06,$06
	DEFB	$05,$06,$06,$06,$06,$06,$06,$06
	DEFB	$06,$06,$06,$06,$42,$42,$02,$46
	DEFB	$46,$06,$44,$44,$04,$41,$41,$46
	DEFB	$46,$46,$42,$42,$42,$42,$42,$06
	DEFB	$45,$45,$45,$45,$05,$06,$06,$06
	DEFB	$06,$06,$06,$02,$42,$42,$46,$46
	DEFB	$46,$04,$44,$44,$41,$41,$41,$46
	DEFB	$46,$06,$02,$42,$42,$42,$42,$06
	DEFB	$05,$45,$45,$45,$45,$06,$06,$06
	DEFB	$06,$06,$06,$02,$42,$02,$46,$46
	DEFB	$46,$44,$44,$44,$41,$41,$06,$46
	DEFB	$46,$06,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$02,$02,$02,$46,$46
	DEFB	$04,$44,$44,$01,$41,$41,$01,$46
	DEFB	$46,$06,$06,$06,$06,$06,$06,$06
	DEFB	$06,$06,$06,$43,$45,$45,$45,$45
	DEFB	$45,$45,$06,$06,$06,$46,$46,$46
	DEFB	$44,$44,$44,$41,$41,$01,$01,$46
	DEFB	$46,$06,$06,$06,$47,$47,$07,$06
	DEFB	$06,$03,$43,$43,$45,$45,$45,$45
	DEFB	$45,$45,$06,$06,$06,$46,$46,$04
	DEFB	$44,$44,$01,$41,$41,$01,$06,$46
	DEFB	$46,$06,$06,$06,$47,$47,$47,$06
	DEFB	$06,$43,$43,$43,$45,$45,$45,$45
	DEFB	$45,$45,$05,$06,$06,$46,$46,$04
	DEFB	$44,$44,$41,$41,$01,$01,$06,$46
	DEFB	$46,$04,$47,$04,$47,$47,$07,$47
	DEFB	$47,$43,$43,$43,$45,$45,$04,$45
	DEFB	$45,$45,$04,$04,$46,$46,$06,$44
	DEFB	$44,$04,$41,$41,$01,$06,$06,$46
	DEFB	$46,$04,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$47,$47,$47,$47,$47
	DEFB	$47,$47,$47,$04,$46,$46,$02,$44
	DEFB	$44,$01,$41,$01,$02,$02,$46,$46
	DEFB	$46,$06,$44,$44,$44,$44,$44,$44
	DEFB	$04,$04,$04,$04,$04,$06,$06,$06
	DEFB	$06,$06,$06,$46,$46,$46,$44,$44
	DEFB	$04,$41,$41,$42,$02,$02,$46,$46
	DEFB	$46,$06,$44,$44,$44,$44,$44,$44
	DEFB	$04,$04,$06,$04,$44,$04,$06,$06
	DEFB	$06,$06,$06,$46,$46,$01,$44,$44
	DEFB	$01,$41,$41,$46,$46,$46,$46,$46
	DEFB	$46,$06,$06,$06,$06,$06,$06,$06
	DEFB	$04,$06,$06,$04,$44,$04,$04,$06
	DEFB	$06,$06,$46,$46,$46,$44,$44,$44
	DEFB	$41,$41,$02,$46,$46,$46,$06,$46
	DEFB	$46,$46,$06,$06,$06,$06,$06,$06
	DEFB	$06,$06,$06,$06,$06,$06,$06,$06
	DEFB	$06,$06,$46,$46,$46,$44,$44,$02
	DEFB	$41,$41,$02,$02,$46,$46,$06,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46
	DEFB	$46,$46,$46,$46,$46,$46,$46,$46

; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

; Sprite Coraçao con máscara. 2x2. 
;
;	1º 32 bytes de máscara.
;	2º 32 bytes de gráficos.
;	3º Attr. de gráficos.
	
;	COLORES: 0 ..... NEGRO
;    		 1 ..... AZUL
; 			 2 ..... ROJO
;			 3 ..... MAGENTA
; 			 4 ..... VERDE
; 			 5 ..... CIAN
;			 6 ..... AMARILLO
; 			 7 ..... BLANCO

	DEFB	$E1,$87,$C0,$03,$80,$01,$00,$00
	DEFB	$00,$00,$00,$00,$00,$00,$00,$00
	DEFB	$00,$00,$00,$00,$80,$01,$C0,$03
	DEFB	$E0,$07,$F0,$0F,$F8,$1F,$FE,$7F

Coracao	DEFB $00,$00,$1E,$78,$3F,$FC,$73,$FE
	DEFB	$67,$FE,$6F,$FE,$6F,$FE,$7F,$FE
	DEFB	$7F,$FE,$7F,$FE,$3F,$FC,$1F,$F8
	DEFB	$0F,$F0,$07,$E0,$01,$80,$00,$00

	DEFB	2,2,2,2													; 00 111 010 ..... $42 Valor original.	 ;$3a


; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

; Sprite Amadeus con máscara. 5x4
;
;	1º 160 bytes de máscara.
;	2º 160 bytes de gráficos.
;	3º 20 bytes de Attr. de gráficos.

	DEFB $FF,$FF,$C7,$FF,$FF,$FF,$FF,$83
	DEFB $FF,$FF,$FF,$FF,$01,$FF,$FF,$FF
	DEFB $FF,$01,$FF,$FF,$FF,$FE,$00,$FF
	DEFB $FF,$FF,$FE,$00,$FF,$FF,$FF,$FC
	DEFB $00,$7F,$FF,$FF,$FC,$00,$7F,$FF
	DEFB $FF,$FC,$00,$7F,$FF,$FF,$F8,$00
	DEFB $3F,$FF,$F7,$F8,$00,$3F,$DF,$E3
	DEFB $F8,$00,$3F,$8F,$C1,$F8,$00,$3F
	DEFB $07,$C1,$F0,$00,$1F,$07,$C1,$F0
	DEFB $00,$1F,$07,$80,$F0,$00,$1E,$03
	DEFB $80,$F0,$00,$1E,$03,$80,$F0,$00
	DEFB $1E,$03,$00,$60,$00,$0C,$01,$00
	DEFB $60,$00,$0C,$01,$00,$00,$00,$00
	DEFB $00,$00,$00,$00,$00,$00,$00,$00
	DEFB $00,$00,$00,$00,$00,$00,$00,$00
	DEFB $00,$00,$00,$00,$00,$00,$60,$00
	DEFB $0C,$01,$00,$70,$00,$1C,$01,$80
	DEFB $F0,$00,$1E,$03,$C1,$F0,$00,$1F
	DEFB $07,$E3,$F8,$00,$3F,$8F,$FF,$FC
	DEFB $00,$7F,$FF,$FF,$FF,$01,$FF,$FF

Amadeus DEFB $00,$00,$10,$00,$00,$00,$00,$28
	DEFB $00,$00,$00,$00,$44,$00,$00,$00
	DEFB $00,$44,$00,$00,$00,$00,$92,$00
	DEFB $00,$00,$00,$BA,$00,$00,$00,$01
	DEFB $39,$00,$00,$00,$01,$39,$00,$00
	DEFB $00,$01,$39,$00,$00,$00,$02,$74
	DEFB $80,$00,$00,$02,$6C,$80,$00,$08
	DEFB $02,$5C,$80,$20,$14,$02,$74,$80
	DEFB $50,$14,$04,$EE,$40,$50,$14,$04
	DEFB $DE,$40,$50,$22,$04,$7C,$40,$88
	DEFB $22,$04,$00,$40,$88,$22,$05,$01
	DEFB $40,$88,$41,$09,$FF,$21,$04,$45
	DEFB $09,$11,$21,$44,$C9,$99,$FF,$33
	DEFB $26,$90,$E9,$11,$2E,$12,$A4,$88
	DEFB $FE,$22,$4A,$88,$E8,$92,$2E,$22
	DEFB $C1,$98,$54,$33,$06,$41,$08,$7C
	DEFB $21,$04,$5D,$04,$00,$41,$74,$36
	DEFB $04,$38,$40,$D8,$1C,$04,$C6,$40
	DEFB $70,$00,$03,$BB,$80,$00,$00,$00
	DEFB $C6,$00,$00,$00,$00,$38,$00,$00

	DEFB $05,$05,$05,$05,$05,$05,$05,$05
	DEFB $05,$05,$05,$05,$05,$05,$05,$05
	DEFB $05,$05,$05,$05

; ******************************************************************************************************************************************************************************************
; Datos de los objetos.
; ****************************************************************************************************************************************************************************************** 







; ******************************************************************************************************************************************************************************************
; Variables DRAW.
; ****************************************************************************************************************************************************************************************** 
;
;
; Variables de objeto.
;

Filas db 4												; Filas.
Columns db 5  											; Columnas.
Posicion_inicio defw $4004								; Dirección de pantalla donde aparece el objeto. 
Posicion_actual defw $0000								; Dirección actual del Sprite.
Mask db 0 												; Indica si el objeto tiene máscara. Si no la tiene, se pintará alternando fondo y Sprite mediante la función lógica `XOR´.
; 														; _ En ese caso, NO ALMACENA y NO RESTAURA, con el consiguiente ahorro en procesamiento. MAYOR VELOCIDAD.
Atributos_Sprite db 1									; Indica si el sprite tiene attr. de color, "1", o adopta los attr. del fondo de pantalla, "0".
Obj_atras db 0 											; Esta variable se fija a "1" cuando queremos que el Sprite pase por "detrás" del fondo.
Velocidad db 0 											; Nº de píxeles que se va a desplazar el objeto, (subida/bajada).

Indicador_movimiento db 4,4,4,5					 		; %0000 arriba-abajo-izquierda-derecha 						
Contador_movimiento db 0



; Variables de control.

Switch db 1												; Indica si la rutina `guarda o pinta´ la pantalla. Si la variable es "0", STORE, si es "1", DRAW y "2" RESTORE.	
Puntero_objeto defw Amadeus 		 					; Dirección donde están los datos para pintar el Sprite.

; Variables de funcionamiento, (no modificables).

Almacen ds 125											; Espacio para almacenar lo que hay bajo el objeto. (2X2 Chars). 36 bytes. 
Puntero_mascara defw 1 		 							; Posiciona el puntero en el primer byte que pinta la mascara del objeto.
Puntero_datas defw 0 									; Posiciona el puntero en el primer byte que pinta el objeto.
Puntero_attr_datas defw 0	 							; Posiciona el puntero en el primer byte que pinta los attr. del objeto.
Puntero_provisional defw 0 								; Puntero provisional. Lo utiliza [Nucleo] para almacenar el salto de línea del puntero de Sprite.
Cuad_objeto db 1				 						; Indica el cuadrante de pantalla donde se encuentra el objeto, (1,2,3,4).
Filas_objeto db 0 										; Nº de filas que vamos a imprimir en función de la posición del objeto. 8 scanlines por fila.
Scanlines_objeto db 0,0									; Scanlines de la fila de inicio, (1-8) y de la fina del final, (Scanlines_objetos+1).
Columnas db 0
Limite_horizontal defw 0 								; Dirección de pantalla, (scanline), calculado en función del tamaño del Sprite. Si el objeto llega a esta línea se modifica_    
; 														; _(Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
Limite_vertical db 0 									; Nº de columna. Si el objeto llega a esta columna se modifica (Posicion_actual) para poder asignar un nuevo (Cuad_objeto).
Ciclo_mascara db 0 										; Si este byte está a "1", es porque hemos terminado de pintar la máscara.

; Variables de Raster y localización en pantalla.

Temp_Raster defw $0001 									; $05d5
Coordenada_X db 0 										; La rutina fija las coordenadas X e Y de la entidad a imprimir con el fin de aplicar distintos retrasos en función de la línea_
Coordenada_y db 0 										; _de pantalla en la que nos encontremos.(RASTER).

; Rutina principal *************************************************************************************************************************************************************************

; Por ahora: ( Más adelante, esta será la rutina de CONFIGuración del engine ).

; Pinto el fondo de pantalla y almaceno un area determinada del mismo. 
; Cuando pulsamos "ENTER", borro la pantalla, (CLS) y RESTAURO el area ALMACENADA anteriormente.


START DI 												; Pinto el fondo de pantalla y almaceno una porción de la misma. 
;	CALL Pinta_fondo
	
	call CLS
;	call Pinta_linea
	call Pulsa_ENTER
								


;	call c1
;	ld a,1 												
;	ld (Switch),a

chachi call c1

	call Sync
	call Genera_coordenadas
	call Temporiza_Raster
	call DELAY

;	chan ld a,2 												
;	ld (Switch),a
	call c1

	
	call Muevete 										; Bajo 1 línea.
	
;	xor a
;	ld (Switch),a
	jr chachi

; ******************************************************************************************************************************************************************************************

c1 ld hl,Filas 		 									; Prepara registros y llamo a DRAW.
	ld b,(hl) 											; Filas/Columnas de la base de datos del objeto, en BC respectivamente. 
	inc hl 												; Posición de pantalla donde queremos empezar a RESTAURAR/PINTAR en HL.
	ld c,(hl)
	ld hl,(Posicion_actual)
	ld e,0
	CALL Draw
	ret

; **************************************************************************************************
; Teclado.

Pulsa_ENTER ld a,$bf 									; Esperamos la pulsación de la tecla "ENTER".
	in a,($fe)
	and $01
	jr z,aa
	jr Pulsa_ENTER
aa	ret

; **************************************************************************************************
; Temporización sin HALT.

DELAY LD BC,(Temp_Raster)								; 6144	----- $04c0 Valor mínimo. Sprite de 2x2
wait DEC BC  											; $0630 ----- Mejor cantidad, (mitad 2º tercio con mascara, almacenando fondo y restaurándolo)
	LD A,B 												
	AND A
	JR NZ,wait
	RET

; **************************************************************************************************

; Sync de pantalla, RASTER.

Sync EI												; Temporización.
	halt
	DI
	ret

; ******************************************************************************************************************************************************************************************
;
; DRAW. ************************************************************************************************************************************************************************************
;
; La rutina es un `mini-motor´ de impresión en pantalla.
;
; Está diseñada para ALMACENAR/PINTAR/RESTAURAR una porción de ( X Filas x Y Columnas) de la pantalla, ej.: (2x2), (3x3), (5x5), etc.
; Esta porción de pantalla viene definida por el valor que contengan las variables de programa: (Filas) y (Columns). Ambas son variables de 1 byte y representan caracteres completos de pantalla,_
; _ ejemplo.: 2 (filas de alto) x 4 (columnas de ancho).
;
; La rutina ALMACENA,PINTA o RESTAURA una porción determinada, en la dirección de mem. de pantalla que contiene la variable de programa (Posicion_actual).
; Esta dirección indica, donde se va a imprimir `la 1ª línea del 1er char´ que compone el objeto.
; La rutina divide la pantalla en cuatro cuadrantes e imprime/almacena y restaura de manera distinta en función del cuadrante de pantalla en el que nos encontremos. 
; Esto se hace así con la finalidad de poder "esconder" objetos en cualquier borde de la pantalla y tener un control total de la misma.
;
; El `paso´ de un cuadrante a otro de la pantalla es detectado automáticamente por la rutina, modificando el puntero (Posición_actual).

; Para seleccionar uno de los tres modos de funcionamiento, disponemos de un `Switch´ o selector. Este switch, es una  variable de programa de un byte, llamada (Switch). 
; La variable (Switch) puede tener tres valores:
;
;	"0" ..... ALMACENA. 
;
;		Almacena una porción de X(Filas)*Y(Columns) de la pantalla, en un espacio de la memoria destinado para ello,: (Almacen). 
;		Dentro del espacio (Almacen), primero guardaremos la memoria de pantalla y posteriormente la mem. de attr.
;
;		La información de pantalla se guarda en el (Almacen) de manera distinta según el cuadrante de pantalla en el que nos encontremos, igual que ocurre al pintar.
;
;
;	"1" ..... PINTA.
;
;		Pinta un objeto de X(Filas)*Y(Columns) en la pantalla, la dirección de mem. donde se encuentran los gráficos del objeto a imprimir se encuentra almacenada_
;		_en la variable de programa, (Puntero_objeto). 
;
;		Los objetos a `pintar´ pueden tener, o no tener máscara. La variable de programa, (Mask), es la que indica este hecho a la rutina. (Mask) puede contener "0" o "1".
;		En función de este valor, La rutina, (cuando esta PINTANDO, (Switch)="1") se comporta de manera diferente:
;	
;
;		(Mask)="0", NO MÁSCARA. 
;	
;		Es la manera más rápida de pintar entidades en pantalla. Cuando los objetos `no tienen máscara´, no es necesario ALMACENAR el fondo antes de pintar el objeto, tampoco hay que_
; 		_RESTAURARLO después.
;		Además, si el objeto no dispone de máscara, sólo pintaremos los datos gráficos del objeto, (no tenemos que pintar la máscara primero y los datos después).
; 		Como se puede observar, si precisamos de VELOCIDAD y el juego no consta de un fondo `cargado´, lo ideal es utilizar objetos sin (Mask).
;		En este caso, la rutina emplea dos funciones lógicas distintas:
;
;		1. Función XOR cuando queremos que el objeto `pase´ por `delante´ del escenario. En ese caso, la variable de programa (Obj_atras)="0".
;		2. Función OR cuando queremos que el objeto `pase´ por `detrás´ del fondo. En ese caso, la variable de programa (Obj_atras)="1".
;
;
;		(Mask)="1", MÁSCARA.
;
;		Cuando el objeto a imprimir dispone de máscara, es necesario, ALMACENAR primero y RESTAURAR después, el fondo de pantalla.
;		Además, a la hora de pintar el objeto, necesitamos hacer un `doble pintado´. Primero pintaremos la máscara del objeto, (sin attr.), utilizando una función lógica_
;		_AND y después los datos del objeto utilizando una función lógica OR.
; 	
;		Utilizaremos esta opción cuando trabajemos con fondos `muy elaborados´ y no precisemos de gran `velocidad´. 
;
;
;		Además de la variable (Mask), existe otra variable de programa que la rutina ha de tener en cuenta a la hora de PINTAR.
;		Se trata de la variable de programa, (Atributos_Sprite).
;		Si esta variable contiene un "0", pintaremos el Sprite pero no sus attr. El objeto adoptará los colores del fondo de pantalla.
;		Si contiene un "1", después de pintar el objeto pintaremos sus attr. de color.
; 	
;		En función del resultado estético en pantalla, optaremos por una u otra opción. (A gusto del `programmer´).
;	
;	
;
;
;	"2" ..... RESTAURA.
;
;		Restaura una porción de X(Filas)*Y(Columns) de la pantalla. Para ello recupera la información almacenada dentro del espacio (Almacen), y la imprime en_ 
;		_pantalla.


; INPUT:  El registro HL apunta a la dirección de memoria de pantalla donde se va a pintar el objeto.
; 		  BC contiene: Filas/Columnas del objeto. Ejempl.: 5x5, 3x3, 2x3, 4x2, etc.
; 
;		  La rutina destruye los registro: HL,BC,DE e IX
;
;		  Variables necesarias de funcionamiento:
;
; 

Draw ld a,h 						 				; El objeto existe, o se está iniciando?. Si se está iniciando, saltamos a e0.
	and a
	jr nz,Comp_limites
	add l
	jr z,a000
Comp_limites ld a,(Cuad_objeto) 					; El objeto ya se inició. Cargamos en A el cuadrante de pantalla en el que lo hizo y saltamos a e2.
	jr a002
a000 ld hl,(Posicion_inicio) 						; No hay (Posicion_actual), por lo que el objeto se está iniciando.
	ld e,l 											; Indicamos que (Posicion_actual) = (Posicion_inicio) y saltamos a la subrutina e1, (donde asignaremos_			
	ld d,h 											; _ cuadrante a (Posicion_actual)).
	ld (Posicion_actual),de
a001 call e1
a002 push af 										; Antes de nada, guardo (Cuad_objeto) en A´ para acceder a él más rapido, (me va a hacer falta en la rutina calcolum).
	ex af,af
	pop af
	call Comprueba_limite_horizontal
	call Comprueba_limite_vertical
	ld a,e 											; Después de ejecutar las dos subrutinas que comprueban los límites, el registro E indica, con "0" o "1" si hay _
	and a    										; _ modificación en el puntero de pantalla HL, y por tanto, si hemos de volver a "encuadrar" de nuevo a nuestro _
	jr z,a003 										; _ Sprite, llamando a la rutina [e1].
	cp 2
	ld a,(Cuad_objeto)
	jp z,a002	
	jp a001
a003 ex af,af
	cp 2
	jr c,a004
	jr z,a004
	ex af,af
	call calculascan_2
	jr a005
a004 ex af,af
	call calculascan_1
a005 call calcolumn
	call nucleo
	ret

; *******************************************************************************************************************************************************************************************
;
; 	Comprueba_limite_horizontal.
;
;	Esta rutina modifica la situación del puntero de pantalla HL si se llega o sobrepasa el límite establecido. Este hecho lo indica cargando "1" en el registro E.
;	Si no hemos llegado al (limite_horizontal), la rutina averigua si hemos llegado al centro de la pantalla o lo hemos superado. En ese caso: no se modifica HL y E ="2".
;	Si no hemos llegado al centro de la pantalla, E="0".
;
; 	NOTAS: No se destrute ningún registro.
;
; 	Salidas: Dato de control en E, (0,1 o 2). Esta información será utilizada más adelante por la rutina: [Comprueba_limite_vertical].

Comprueba_limite_horizontal	push HL        			; Guardo el puntero de pantalla, HL en la pila.
	bit 1,e 										; E="2" significa que estamos en el centro de la pantalla pero no hemos llegado al (Limite_horizontal). En ese caso, la_
	jp nz,d7 										; _ rutina (Limite_vertical), habrá recolocado L, (en caso necesario) y asignado nuevo cuadrante. Colocamos E="0" y salimos. 
	ex de,hl 										; Ahora, puntero de pantalla en DE y cargo (Limite_horizontal) en HL.
	ld hl,(Limite_horizontal) 						; H y L tendrán valor "0", "1" o "2" dependiendo del tercio de pantalla hacia el que apunten.
	call calcula_tercio 							; _ Así simplificamos la operación SBC para saber si hemos llegado, o no, a la línea límite.
	ld h,a 											; Antes de operar: HL: puntero de pantella, DE: (Limite_horizontal).
	ex de,hl 										
	call calcula_tercio
	ld h,a 											 
	and a 											; Carry off.
	sbc hl,de 										; Posicíon - Límite.
	ex af,af
	cp 2
	jr c,c6
	jr z,c6
	ex af,af 										; Partimos del 3er o 4º cuadrante.
	ld e,0
	pop hl
	call z,Modifica_HL2 							; Z o C a "1". Hemos llegado al (Limite_horizontal). Llamamos a la subrutina [Modifica_HL2] para que haga la_
	call c,Modifica_HL2 							; _ recolocación del puntero HL. E = "1".
	bit 0,e 										; Si ha habido modificación del puntero HL, E="1", salimos de la rutina. 
	jr nz,bn
	push hl 										; No hemos llegado al (Limite_horizontal) pero hay que averiguar si hemos sobrepasado el centro de la pantalla. 
	call calcula_tercio 							; Partimos del 3er o 4º cuadrante.
	ld h,a
	ld de,$017f
	ex de,hl
	sbc hl,de
	jr c,d7 										; Si C="1", no hemos sobrepasado el centro de la pantalla. Salimos de la rutina y lo indicamos con ld e,0.
	ld e,2 											; Estamos en la zona `nebulosa´ del centro de pantalla. E="2"  y ret.
	jr d8	
c6 ex af,af 										; Partimos de los cuadrantes 1º o 2º. Si C="1" es que NO hemos llegado a la línea límite. Saltamos a [bb].
	jr c,bb
Modifica_HL pop hl									; HEMOS LLEGADO O SOBREPASADO (Limite_horizontal) y partimos del 1ER O 2º CUADRANTE!!!!!.	
	cp 1 											; En A tenemos el tercio en el que nos encontramos.
	jr z,bl
	ld d,$50 										; D,$50. Estoy en el 3er tercio de pantalla.
	jr bm
bl	ld d,$48 										; D,$48. Estoy en el 2º tercio de pantalla.
bm ld a,h
	sub d 											; Operación: H-($50 o $48) + 1.
	inc a 											
	cp 8 											; Si el resultado son 8 scanlines, se anulan. Esto es una fila.
	jr nz,bo
	xor a
bo	ld e,a 											; Tengo en E los scanlines sueltos que luego sumaré a $48 o $50 en función de donde estemos.
	ld h,d
	ld a,(Filas) 									; Filas-1 en D.
	dec a
	ld d,a 											; Si el Sprite no se encuentra encuadrado en los chars., (scanlines sueltos), restaremos (Filas) a HL en lugar de (Filas-1). (INC D).
	ld a,e
	and a
	jr z,br
	inc d
br	ld a,d
	push de
	ld de,32
b9	sbc hl,de
	dec a
	jr nz,b9
	pop de
	bit 4,h
	jr nz,bj 										; Si este bit está a "0" debemos corregir H, (cambio de tercio).
	ld h,$48
bj ld a,h
	add e
	ld h,a
	ld (Posicion_actual),hl
	ld e,1
	jr bn
bb pop hl 											; No hemos llegado al (Limite_horizontal) pero hay que averiguar si hemos sobrepasado el centro de la pantalla.
	push hl
	call calcula_tercio 							; Partimos del 1º o 2º cuadrante. 
	ld h,a 											
	ld de,$0180 
	and a
	sbc hl,de
	jr c,d7 										; Se produce acarreo. NO HEMOS LLEGADO AL CENTRO DE LA PANTALLA.
	ld e,2 											; Estamos en la zona `nebulosa´ del centro de pantalla. E="2"  y ret.
	jr d8
d7	ld e,0 											; No se modifica HL.
d8	pop hl
bn	ret

; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Modifica_HL2 cp 1 									; En A tenemos el tercio en el que nos encontramos.
	jr z,c7
	ld d,$47 										; D,$40. Estoy en el 1er tercio de pantalla.
	jr c8
c7	ld d,$4F 										; D,$48. Estoy en el 2º tercio de pantalla.
c8 ld a,d
	sub h 											; Operación: H-($40 o $48).
	inc a 											
	cp 8 											; Si el resultado son 8 scanlines, se anulan. Esto es una fila.
	jr nz,c9
	xor a
c9	ld e,a 											; Tengo en E los scanlines sueltos que luego sumaré a $48 o $50 en función de donde estemos.
	ld h,d
	ld a,(Filas) 	 								; Filas-1 en D.
	dec a
	ld d,a 											; Si el Sprite no se encuentra encuadrado en los chars., (scanlines sueltos), restaremos (Filas) a HL en lugar de (Filas-1). (INC D).
	ld a,e
	and a
	jr z,ca
	inc d
ca	ld a,d
	push de
	ld de,32
cb	adc hl,de
	dec a
	jr nz,cb
	pop de
	bit 3,h
	jr z,cc 										; Si este bit está a "1" debemos corregir H, (cambio de tercio).
	ld h,$4f
cc ld a,h
	sub e
	ld h,a
	ld (Posicion_actual),hl
	ld e,1
	xor a 											; Fijo el acarreo a "0" para asegurarme de no volver a entrar en la rutina.
ce	ret

; *********************************************************************************************************************************************************************************************
;
;	Comprueba_limite_vertical
;
;	Modifica el registro L del puntero de pantalla cuando se sobrepasa la columna límite, (Limite2).
;	Dependiendo del cuadrante en el que nos encontremos, sumaremos o restaremos, (Columnas-1) a L. 
;	

Comprueba_limite_vertical ld a,l
	and $1f
	ld d,a 											; Cargo el valor absoluto de L, (0 a 31) en el registro D.
	ld a,(Limite_vertical)
	cp d 											; Límite-L
	ex af,af 										; Consultamos el cuadrante en el que estamos, (A´).
	bit 0,a
	jr z,bv 										; Si A´es PAR, estamos en el 2º o 4º cuadrante. Saltamos a [bv], (cuadrantes 2º y 4º).
	ex af,af 										; Partimos del 1er o 3er cuadrante.
	jr z,ba 										; Si partimos de los cuadrantes 1º o 3º: Hay cambio de cuadrante cuando se activa el flag Z o C como resultado de comparar_
	jr c,ba 										; _el límite vertical con nuestra posición, (L).
	bit 0,e 										; No hemos llegado a la línea límite. Si no hemos cambiado de cuadrante, (en la rutina [Comprueba_limite_horizontal]), es decir, _
	jr z,be 										; _ E="0", salimos de la rutina. En este caso el indicador de cambio de cuadrante, "E", tendrá valor "0".
	ld a,$10 										
	cp d 											
	jr z,bz 					 					 
	jr c,bz
 	jr be											
bz ex af,af 										; Dependiendo del cuadrante del que partamos, (1ª o 3ª), asignaremos el cuadrante contrario, antes de salir de la rutina. _
	bit 1,a 										; _ Ejemplo: Si partimos del cuadrante 3º, LD a,1 ..... ld (Cuad_objeto),a ... ret
	jr z,cl
	ex af,af
	ld a,1 											; Partimos del 3er cuadrante. Nos situamos en el 1º!!!!!.
	jr c0
cl ex af,af
	ld a,3 											; Partimos del 1er cuadrante. Nos situamos en el 3º!!!!!.
	jr c0
bv 	ex af,af 										; Partimos del 2º o 4º cuadrante.
	jr nc,ba 										; Si partimos de los cuadrantes 2º o 4º: Hay cambio de cuadrante cuando NO se produce `acarreo´ como resultado de comparar el límite con L.
	bit 0,e 										; No hemos llegado a la línea límite. Si no hemos cambiado de cuadrante, (en la rutina [Comprueba_limite_horizontal]), es decir, _
	jr z,be 										; _ E="0", salimos de la rutina. En este caso el indicador de cambio de cuadrante, "E", tendrá valor "0".
	ld a,$0f 										 
	cp d
	jr c,be
	ex af,af 										; No hemos llegado a la línea límite pero hemos sobrepasado el centro de la pantalla, (estamos en tierra de nadie). Además, E="1" _
	bit 2,a 										; _ lo que significa que vamos a cambiar de cuadrante y necesitamos definir L para ello.
	jr z,cj 										
	ex af,af
	ld a,2
	jr c0	
cj ex af,af    										; Partimos del 2º cuadrante. Nos situamos en el 4º!!!!!.                                  									
	ld a,4 											
	jr c0
c0	ld (Cuad_objeto),a 								; La rutina [Comprueba_limite_horizontal] detecta cambio de cuadrante, e ="1", pero no hemos llegado al límite vertical, _
	ld e,2 											; _ aunque sí hemos sobrepasado el centro de la pantalla. Forzamos cuadrante y se lo indicamos al motor, (E = "2").
be ret 				 								; Salimos de la rutina.
ba push de
	ld de,Columns 		 	 						; Cambio de cuadrante. Se llega o sobrepasa el límite.						
	ld a,(de)
	dec a 														
	ld d,a 											; Columnas-1 en D.
	ld a,l
	ex af,af
	bit 0,a
	jr z,bw
	ex af,af 										; Estamos en la parte izquierda de la pantalla, (cuadrantes 1º o 3º). En ese caso, restamos (Columnas-1) a L.
	sub d
	jr bx
bw	ex af,af 										; Estamos en la parte derecha de la pantalla, (cuadrantes 2º o 4º). En ese caso, sumamos (Columnas-1) a L.
	add d 												
bx	ld l,a
	ld (Posicion_actual),hl 						; Modificamos (Posicion_actual).
	pop de
	bit 1,e 										; Hemos modificado la posición de L. Consultamos el valor del registro E; si E="2" asignaremos al objeto un nuevo cuadrante.
	jr nz,d9 										; Saltamos a [d9].
	ld e,1 											; Si la rutina [Comprueba_limite_horizontal], devolvió un "1" o "0" en el registro E, asignamos el valor "1" a E para indicar al _
	jr be 											; _ engine que hemos de asignar un nuevo cuadrante y salimos.
d9 ex af,af 										; E = "2". Averiguamos en que cuadrante nos encontramos y en función de nuestra situación asignamos nuevo cuadrante:
	bit 0,a
	jr z,da
	cp 3
	jr c,dc
	ex af,af
	ld a,4 											; Partimos del 3er cuadrante, le asignamos el 4º CUADRANTE, E="2" y salimos.
	jr df 
dc 	ex af,af
	ld a,2 											; Partimos del 1er cuadrante, le asignamos el 2º CUADRANTE, E="2" y salimos.
	jr df 
da cp 4
	jr c,dd
	ex af,af
	ld a,3 											; Partimos del 4º cuadrante, le asignamos el 3er CUADRANTE, E="2" y salimos.
	jr df
dd ex af,af
	ld a,1 											; Partimos del 2º cuadrante, le asignamos el 1er CUADRANTE, E="2" y salimos.
df	ld (Cuad_objeto),a
	ld e,2	
	jr be
 
; *************************************************************************************************************************************************************************************************
;
;	Subrutina e1
;
;	Entrega "1", "2", "3" o "4" en (Cuad_objeto) en función del cuadrante de pantalla en el que nos encontremos.
;	Además fija los punteros del objeto a pintar:
;
;	[Puntero_mascara]: Dirección de memoria donde se encuentra el 1er byte de la máscara del objeto. (Cuando la tiene).
;	[Puntero_datas]: Dirección de memoria donde se encuentra el 1er byte que pinta el objeto. 
;	[Puntero_attr_datas]: Dirección de memoria donde se encuentra el 1er byte de atributos del objeto. 
;
;	INPUT: HL contendrá la dirección de pantalla a la que queremos asignar cuadrante.
;
; 	Nota: La rutina no destruye HL. La máscara no tiene atributos. Los bytes que pintan el objeto: 1º Xbytes de máscara, 2º Xbytes de datos y 3º Xbytes de attr.
	 

e1 call calcula_tercio												; Entrega "0", "1" o "2" en A en función del tercio donde nos encontremos.												
	jr z,primit 													; 1er tercio. Estamos en la primera mitad de pantalla, (cuadrantes 1 o 2).
	and 2
	jr nz,segmit
	ld a,l 															; Cuando estamos en el segundo tercio: Las 4 primeras filas pertenecen a la 1ª mitad y las 4 últimas del tercio, a la 2ª.
	cp $7f
	jr c,primit
	jr z,primit
segmit CALL column  												; 3er tercio, Estamos en la segunda mitad de pantalla, (cuadrantes 3 o 4).
	jr c,tercuad
cuarcuad call Prepara_punteros_objeto
	call puntero_cuarcuad
	call Limite3
	ld a,4
	ld (Cuad_objeto),a
	ex af,af
	call Limite2
	jp e3
tercuad	call Prepara_punteros_objeto 
	call puntero_cuarcuad
	push hl 														; Voy a utilizar las dos parejas de registros para operar. POP antes de salir de la rutina.
	push bc
	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
	dec c
	ld a,(Mask)
	and a
	jr z,dt
	ld hl,(Puntero_mascara) 										; El objeto tiene máscara. 
	and a
	adc hl,bc
	ld (Puntero_mascara),hl
dt ld hl,(Puntero_datas)
	and a
	adc hl,bc
	ld (Puntero_datas),hl
	ld hl,(Puntero_attr_datas)
	and a
	adc hl,bc
	ld (Puntero_attr_datas),hl
	pop bc
	pop hl	
	call Limite3
	ld a,3
	ld (Cuad_objeto),a 
	ex af,af
	call Limite2
	jp e3
primit CALL column
	jr c, primcuad
segcuad call Prepara_punteros_objeto
	call puntero_primcuad
	push hl 														; Voy a utilizar las dos parejas de registros para operar. POP antes de salir de la rutina.
	push bc
	ld b,0 															; BC = $00xx, (nº de columnas-1) que tiene el objeto.
	dec c
	ld a,(Mask)
	and a
	jr z,dq
	ld hl,(Puntero_mascara) 										; El objeto tiene máscara. 
	and a
	sbc hl,bc
	ld (Puntero_mascara),hl
dq ld hl,(Puntero_datas)
	and a
	sbc hl,bc
	ld (Puntero_datas),hl
	ld hl,(Puntero_attr_datas)
	and a
	sbc hl,bc
	ld (Puntero_attr_datas),hl
	pop bc
	pop hl
	call Limite
	ld a,2
	ld (Cuad_objeto),a
	ex af,af
	call Limite2	
	jr e3
primcuad call Prepara_punteros_objeto
	call puntero_primcuad
	call Limite
	ld a,1
	ld (Cuad_objeto),a 
	ex af,af
	call Limite2
e3 ld ix,(Puntero_mascara) 											; Antes de salir hago una copia de respaldo de (Puntero_mascara) en ix. 
	ret

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; 
;	Prepara_punteros_objeto .......... (Subrutina de e1).
;
;	En función del valor de BC, la rutina entrga dos cantidades:
;
;	(Filas * Columnas)*8 en BC´.
;	Filas * Columnas en DE´.

Prepara_punteros_objeto push bc   									; Guardo Filas/Columnas en la pila.
	dec c 															; Filas-1 en C.
	ld a,b
dl add b 															; El loop dl, multiplica Filas*Columnas.
	dec c
	jr nz,dl 
	push af 														; Guardo Filas * Columnas en la pila.
	sla a
	sla a
	sla a 															; Ahora tengo en A: (Filas*Columnas)*8
	exx 
	ld c,a 															; Finalmente: 
	pop af
	ld e,a 															; (Filas*Columnas)*8 en BC.
	xor a
	ld b,a 															; Filas*Columnas en DE.
	ld d,b
	exx
	pop bc
	ret

; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;	Puntero_primcuad .......... (Subrutina de e1).
;
;	Asigna una dirección a cada una de las tres variables que podemos necesitar a la hora de `pintar´ el Sprite en pantalla cuando nos encontramos en el 1er cuadrante de pantalla.
; 	Antes de llamar a esta rutina hay que ejecutar la rutina: [Prepara_punteros_objeto].

puntero_primcuad push hl 
	exx
	ld hl,(Puntero_objeto)
	call suma
	ld a,(Mask) 													; Si el Sprite tiene máscara, la dirección contenida en HL, apunta al último byte de máscara del objeto.
	and a
	jr z,dp 														; Si el Sprite no tiene máscara, la dirección contenida en HL, apunta al último byte que pinta el objeto.
	ld (Puntero_mascara),hl
	inc hl
	call suma
dp ld (Puntero_datas),hl
	ld b,d
	ld c,e
	call suma
	inc hl
	ld (Puntero_attr_datas),hl
	exx
	pop hl
	ret
suma and a
	adc hl,bc 														; [(Puntero_objeto)+(Filas*Columnas)*8]-1 en HL.
	dec hl
	ret

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;	Puntero_cuarcuad .......... (Subrutina de e1).
;
;	Asigna una dirección a cada una de las tres variables que podemos necesitar a la hora de `pintar´ el Sprite en pantalla cuando nos encontramos en el 4º cuadrante de pantalla.
; 	Antes de llamar a esta rutina hay que ejecutar la rutina: [Prepara_punteros_objeto].

puntero_cuarcuad push hl
	exx
	ld hl,(Puntero_objeto)
	ld a,(Mask)
	and a
	jr z,dr
	ld (Puntero_mascara),hl	
	and a
	adc hl,bc
dr ld (Puntero_datas),hl
	and a
	adc hl,bc
	ld (Puntero_attr_datas),hl
 	exx
 	pop hl
 	ret

; *********************************************************************************************************************************************************************************************
;
; Limite y Limite3.
;
; Calculan, (a partir del centro de la pantalla y del nº de filas que tiene el Sprite), el (Limite_horizontal).
;
; Limite se aplica en el 1er y 2º cuadrante.
; Limite3 se aplica en el 3er y 4º cuadrante.
;
; NOTA: No destruyen ningún registro!!!.

Limite push hl 														; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
	push bc
	ld hl,$48a0														; La línea límite, (cuando nos encontramos en el 1er o 2º cuadrante es $48a0). 
	ld bc,32
 	ld a,(Filas)	 								 				; (Filas-1) en A.
	dec a
	ld d,a 															
	and a 															; Carry off.
b6	adc hl,bc 														; El límite se sitúa en: ($4880)+[$20*(Filas-1)]
	dec d 															; Si H es igual a $49 es que ha habido cambio de tercio. En ese caso, situamos H en $57.
	jr nz,b6 														; Si no hay cambio de tercio, H=$4f.
	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
	and 1 															; Recuperamos HL y BC y salimos.
	jr z,b7
	ld h,$57
	jr bs
b7 ld h,$4f
bs ld (Limite_horizontal),hl
	pop bc
	pop hl
	ret
Limite3 push HL 	 												; Guardamos la posición del objeto en pantalla, (HL) y las dimensiones FILAS/COLUMNAS en BC.
	push bc
	ld hl,$4840														; La línea límite, (cuando nos encontramos en el 3er o 4º cuadrante es $4f60).
	ld bc,32
 	ld a,(Filas)	 								 				; (Filas-1) en D.
	dec a
	ld d,a 															
	and a 															; Carry off.
c2	sbc hl,bc 														; El límite se sitúa en: ($4f60)-[$20*(Filas-1)]
	dec d 															; Si H es igual a $4e es que ha habido cambio de tercio. En ese caso, situamos H en $40.
	jr nz,c2 														; Si no hay cambio de tercio, H=$48.
	ld a,h 															; Guardamos la línea límite en la variable: (Limite_horizontal).
	and 1 															; Recuperamos HL y BC y salimos.
	jr z,c3
	ld h,$48
	jr c4
c3 ld h,$40
c4	ld (Limite_horizontal),hl
	pop bc
	pop hl
	ret

; *********************************************************************************************************************************************************************************************
;
; Limite2
;
; Calcula, (a partir del centro de la pantalla y del nº de columnas que tiene el Sprite), el (Limite_vertical).
;
; Esta subrutina se aplica en todos los cuadrantes.
;
; NOTA: No destruye ningún registro!!!.

Limite2 push hl 													; Guardamos la posición del objeto en pantalla, (HL).
	ld hl,Columns 											
 	ld d,(hl)
 	dec d 															; (Columnas-1) en D.
  	ex af,af
 	bit 0,a
 	jr z,bt	
 	ex af,af
 	ld a,16 														; $10 + (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 1º y 3º).
 	add d 															; $0f - (Columnas-1) = (Limite_vertical), (cuando estamos en los cuadrantes 2º y 4º).
 	jr bu
bt ex af,af
	ld a,15
	sub d
bu ld (Limite_vertical),a
 	pop hl
 	ex af,af 														; Entrega [Cuad_cuadrante] en A.
 	ret

; ************************************************************************************ calculascan_1 ***********************************************************************
;
; Subrutina de Draw.
;
; Calcula el valor de las tres variables (Scanlines_objeto), (Scanlines_objeto)+1 y (Filas_objeto).

calculascan_1 push bc 									; Guardo el nº de filas y columnas del objeto en BC´.
	exx 												
	pop bc
	exx
	call calcula_tercio		                            ; Entrega en A: "0", "1" o "2" en función del tercio de pantalla en el que nos encontremos.								
	ld c,a 												; C contiene el nº de tercio en el que nos encontramos.
	and a
	jr z,a3
	cp 2
	jr z,e6
	ld d,$48 											; Nos encontramos en el 2ª tercio de pantalla.
	call introvar
	call modvar
	jr a9
a3 ld d,$40 											; Nos encontramos en el 1er tercio de pantalla.
	call introvar
	call modvar
	jr a9
e6 ld d,$50 											; Nos encontramos en el 3er tercio de pantalla.
	call introvar
	call modvar
a9 ret

; **************************************************************************************modvar*******************************************************************************
; Subrutina de calculascan_1
;
; Modifica el valor inicial, (entregado por la subrutina [introvar]), de las variables de impresión (Scanlines_objeto)+1 y (Filas_objeto) en función del valor de "L".

modvar ld a,l 											
	and %11100000 										; L sólo podrá tener valores $00, $20, $40, $60, $80, $a0, $c0 y $e0. Valores absolutos de línea.
	jr z,Les0uno
	ld b,0
a1	sub $20
	inc b
	and a
	jr z, Les0dos
	jr a1
Les0uno ld a,c 											; Estamos en la primera línea. Si se trata de la primera línea del 1er tercio, hemos de seguir incrementando el _
	and a 												; _ contador de líneas, B, hasta llegar a la primera línea del 1er tercio.
	jr z,a8 											; Recuerdo: C = "1", segundo tercio de pantalla.
	dec c
	ld a,$e0
	ld b,1
	jr a1
a8 xor a 												; Estamos en la primera línea del primer tercio. Sólo entran entre 0 y 8 scanlines dependiendo del valor de H.
	ld (Filas_objeto),a 								; Sólo entra el contenido de (Scanlines_objeto).
	ld (de),a 											; (Filas_objeto) y (Scanlines_objeto)+1 a "0".
	jr a7
Les0dos ld a,c 											; Hemos llegado a la primera línea. Si se trata del primer tercio, saltamos a [ab] y reajustamos variables._
	and a 												; _ Si hemos llegado a la primera línea del 2º tercio, decrementamos C, (para indicar que pasamos al 1er tercio) y _ 
	jr z,ab 											; _ seguimos contando líneas hasta llegar a la 1ª del 1er tercio de pantalla.											
	dec c 												
	ld a,$e0 
	inc b 												
	jr a1
ab ld a,b 											
	exx
	push bc
	exx
	pop de 												; FILAS del objeto -1 en D.
	cp d 												; FILAS DISPONIBLES en A.
	jr c,a4
	jr z,a4
a7	ret
a4 ld (Filas_objeto),a 									; FILAS DISPONIBLES < (Filas_objeto)..... (Filas_objeto)=FILAS DISPONIBLES y Scanlines_objeto+1 = "0".
	xor a 												; FILAS DISPONIBLES = (Filas_objeto)..... (Filas_objeto)=(filas_objeto) y Scanlines_objeto+1 = "0".
	ld de,Scanlines_objeto+1
	ld (de),a
	jr a7

; *****************************************************************************************introvar****************************************************************************
; Subrutina de calculascan_1
; 
; Hace un cálculo inicial del valor de las tres variables de impresión, (Scanlines_objeto), (Scanlines_objeto)+1 y Filas_objeto en función del valor de H, (puntero HL de pantalla), _
; _ más tarde la rutina [modvar], actualizará (Scanlines_objeto)+1 y (Filas_objeto) dependiendo del valor de "L".

introvar ex af,af
	cp 2
	jr z,b4
	jr c,b4
	ex af,af
	ld a,d
	sub h
	jr b5
b4	ex af,af
	ld a,h 												
	inc a
	sub d 												; D contiene $40, $48 o $50 en función del tercio en el que nos encontremos.
b5	ld de,Scanlines_objeto 								
	ld (de),a 											; Introducimos el valor correspondiente en las variables: (Scanlines_objeto), (Scanlines_objeto)+1 y Filas_objeto, _ 
	inc de 												; _ (Filas_objeto = filas-1).
	ld b,a
	ld a,8
	sub b
	ld (de),a
	exx
	dec b
	ld a,b
	ld (Filas_objeto),a
	exx
	ret

; ************************************************************************************ calculascan_2 ***********************************************************************
;
; Subrutina de Selcuad.
;
; Calcula el valor de las tres variables (Scanlines_objeto), (Scanlines_objeto)+1 y (Filas_objeto) cuando estamos en los CUADRANTES 3º y 4º.

calculascan_2 push bc 									; Guardo el nº de filas y columnas del objeto en BC´.
	exx 												
	pop bc
	exx
	call calcula_tercio		                            ; Entrega en A: "0", "1" o "2" en función del tercio de pantalla en el que nos encontremos.								
	ld c,a 												; C contiene el nº de tercio en el que nos encontramos.
	jr z,e9
	cp 1
	jr z,a2
	ld d,$58 											; Nos encontramos en el 3er tercio de pantalla.
	call introvar
	call modvar2
	jr ah
a2 ld d,$50 											; Nos encontramos en el 2º tercio de pantalla.
	call introvar
	call modvar2
	jr ah
e9 ld d,$48 											; Nos encontramos en el 1er tercio de pantalla.
	call introvar
	call modvar2
ah ret

; *************************************************************************************************************************************************************************
; Subrutina de calculascan_1
;

modvar2 ld a,l 											; Estamos en el 3er o 4º cuadrante.
	and $e0 											; L sólo podrá tener valores $00, $20, $40, $60, $80, $a0, $c0 y $e0. Valores absolutos de línea.
	cp $e0
	jr z,Les0uno1
	ld b,0
ac	add $20
	inc b
	cp $e0
	jr z, Les0dos2
	jr ac
Les0uno1 ld a,c 										; Estamos en la primera línea. Si se trata de la primera línea del 2ª tercio, hemos de seguir incrementando el _
	and a
	jr z,ea
	cp 1
	jr z,ea
	jr ag
ea ld a,$00
	ld b,1
	jr ac
ag xor a 												; Estamos en la primera línea del primer tercio. Sólo entran entre 0 y 8 scanlines dependiendo del valor de H.
	ld (Filas_objeto),a 								; Sólo entra el contenido de (Scanlines_objeto).
	ld (de),a 											; (Filas_objeto) y (Scanlines_objeto)+1 a "0".
	jr ae
Les0dos2 ld a,c 										; Hemos llegado a la primera línea. Si se trata del primer tercio, saltamos a [ab] y reajustamos variables._
	and 2 												; _ Si hemos llegado a la primera línea del 2º tercio, decrementamos D, (para indicar que pasamos al 1er tercio) y _
	jr nz,ai 											; _ seguimos contando líneas hasta llegar a la 1ª del 1er tercio de pantalla.
	inc c
	ld a,$00 
	inc b
	jr ac
ai ld a,b 											
	exx
	push bc
	exx
	pop de 												; FILAS del objeto -1 en D.
	cp d 												; FILAS DISPONIBLES en A.
	jr c,ad
	jr z,ad
ae	ret
ad ld (Filas_objeto),a 									; FILAS DISPONIBLES < (Filas_objeto)..... (Filas_objeto)=FILAS DISPONIBLES y Scanlines_objeto+1 = "0".
	xor a 												; FILAS DISPONIBLES = (Filas_objeto)..... (Filas_objeto)=(filas_objeto) y Scanlines_objeto+1 = "0".
	ld de,Scanlines_objeto+1
	ld (de),a
	jr ae


; ***********************************************************************************************************************************************************************
; 
; Esta pequeña subrutina determina el nº de columna en la que nos encontramos, Introducimos en A el valor absoluto de L, (0-31).
; 
; OUTPUT: "FLAG C". Si se produce acarreo, nos encontramos en las primeras 16 columnas de pantalla, (cuadrantes 1 y 3). Si no es así, (cuadrantes 2 y 4).
;
; ***********************************************************************************************************************************************************************

column ld a,l
	and $1f 											
 	cp $10												
 	ret

; ********************************************************************** calcolumn / calcolumn2 *************************************************************************
;
; Esta subrutina se encarga de asignar valor a la variable (Columnas), (nº de columnas del objeto que podemos pintar).

calcolumn exx                                        	; Calcula (Columnas) en cuadrantes 1º y 3º.
	push bc
	exx
	pop de 												; Situamos en D el contenido de (Filas_objeto) y en E el nº de columnas.
	ld a,l
	and $1f  											; Posición absoluta de L, (0 a 31).
	ex af,af 											; Consultamos A´, (Cuad_objeto). Si estamos en un cuadrante impar, (1º o 3º): Posición abs. de (L+1) - Columnas que tiene el objeto.
	bit 0,a 											; Si estamos en un cuadrante par: ($20 - Posición abs. de (L+1)) - Columnas que tiene el objeto.
	jr nz,a0 											
	ex af,af 											
	ld b,a   											
	ld a,32
	sub b 		
	jr b1
a0	ex af,af
	inc a
b1	ld b,a   											; Columnas que tenemos disponibles.
	sub e 												; Restamos el nº de columnas que tiene el objeto. 
	jr c,aj 											; Si el resultado es "0" o no existe acarreo, la variable (Columnas) tendrá el mismo valor que las columnas que tiene el Sprite en su _
	ld a,e 												; _ base de datos.
	ld (Columnas),a 									; Si se produce acarreo, (Columnas) será igual a el resultado de restar: Posición abs. de (L+1) - Columnas que tiene el objeto.
	jr ak 												; Este valor siempre será inferior a las columnas que tiene el Sprite en su base de datos.
aj ld a,b
	ld (Columnas),a
ak	ret

; ***********************************************************************************************************************************************************************

Genera_coordenadas push bc
	push de
	push hl
	ld hl,(Posicion_actual)
	call calcula_tercio
	ld b,a 											; Tercio de pantalla en B, (0,1 o 2).
	ld c,0 											; Contador de líneas a "0".
	ld a,l
	and $1f
	ld (Coordenada_X),a 							; Coordenada X del sprite, (0-$1f).
	ld a,l
	and $e0 										; Ahora (A) apunta al 1er char. de la fila en la que se encuentra el objeto.
	ld d,a
	ld a,c 											; Inicializo (A). Va a actuar como comparador, se inicia en "0" y se incrementa en $20 unidades hasta coincidir_

xuxa cp d 											; Comparación. 
	jr z,malito
	add 32
	inc c
	jr xuxa

malito ld a,b 										; Tercio de pantalla en el que nos encontramos en (B).
	and a
	jr z,xcv00
	cp 2
	jr nz,xcv01
	ld b,16
	jr xcv00
xcv01 ld b,8
xcv00 ld a,b
	add c
	ld (Coordenada_y),a 							; Coordenada Y del sprite, (0-$17).
	pop hl
	pop de
	pop bc

; ***********************************************************************************************************************************************************************

Temporiza_Raster push bc
	ld a,(Coordenada_y)
	cp $0b 											; $0b
	jr z,chusmo
	jr c,chusmo
	ld bc,$0001 
	ld (Temp_Raster),bc
muesca pop bc
	ret
chusmo ld bc,$05d5 									; $05d5
	ld (Temp_Raster),bc
	jr muesca

; ***********************************************************************************************************************************************************************


; ********** nucleo ******************************************************************************************************************************************************
;
;	En función del selector, (dato contenido en (Switch)), la rutina almacena, (Switch="0") o restaura (Switch="2") una porción de la memoria de pantalla.
;
;   Almacena/restaura la información de pantalla, (datos y attr.) de una porción de pantalla. La información se almacena_
; _ siguiendo el siguiente protocolo: Los bytes del caracter se leeran de arriba a abajo. Los chars. se leerán de izquierda a derecha y de_
; _ la línea de abajo hacia arriba, (en el 2º cuadrante) y de derecha a izquierda en el 1er cuadrante.
;  
;   La rutina se crea con la finalidad de almacenar lo que hay en pantalla antes de pintar un objeto u sprite. El tamaño del sprite será de 24x24 pixeles, aunque puede_
;	_ ser mayor. En ese caso habría que definir un espacio mayor de almacenamiento.
;
;	Primero almacenamos/restauramos los bytes de gráficos, (8 x chars.) y después los bytes de attr. (1 x chars.)
;
;   INPUTS:   HL almacena la dirección de pantalla del 1er byte del primer char. (ABAJO-IZQ). (Puntero de pantalla).
;             DE apunta al primer byte del espacio de memoria reservado para almacenar dicha información. (Puntero de almacenamiento).				  
;			  BC filas/columnas en caracteres. B contendrá las filas y C las columnas del espacio a guardar.	
;
;	OUTPUTS:  No se generan salidas en los registros. 
;
; 	NOTA: QUEDAN DESTRUIDOS: HL, DE Y BC!!!!!!!!!!!!!!!!!!!
;
; 


; Preparamos registros.

nucleo call abastecimiento
	ld b,d 										; Cargamos (Scanlines_objeto) en B.
	ld de,Almacen 								; Ahora DE actúa como puntero de almacén.
	ld a,(Cuad_objeto) 							; Cargamos el cuadrante en A´ con la intención de acceder lo menos posible a la memoria en el núcleo principal del motor.
	ex af,af

; B, Scanlines y C columnas.
; Qué vamos a hacer???. "0" Store, "1" Draw y "2" Restore.

ap push hl 										; Si el switch de control es "0", la rutina ALMACENA. En ese caso, saltamos a loop. HL origen, (pantalla) y DE destino, (almacén). 
	ld a,(Switch) 							
	and a
	jp z,Almacena 								
	cp 1
	jp nz,Restaura 								; Si (Switch)="1" o "2", saltamos a Restaura. Dentro de los loops, `pintaremos´ o `restauraremos´ según proceda.


; ****************************************************************************
; Pintando 
; ****************************************************************************

	ld a,(Mask) 								
	and a
	jr z,no_mask

si_mask ld de,(Puntero_mascara)  				; El objeto TIENE MÁSCARA.
	jr j9
no_mask ld de,(Puntero_datas)
	ld (Puntero_mascara),de
	ld a,1
	ld (Ciclo_mascara),a
j9 ex af,af
f6	push bc 									; Necesito un registro para almacenar (Cuad_objeto).
	ld c,a 										; Guardo (Cuad_objeto) en c.
f1 push af										; Guardo (Cuad_objeto) en la pila.
	ld a,(Columns)
	ex af,af 									; Columnas en A´.
	ld a,(Ciclo_mascara)
	and a
	jr z, loop_mascara
	jr loop_datas

wf	pop af
	ex af,af 									; Vuelvo a tener (Cuad_objeto) en A´.
	pop bc

	ld a,(Columnas)    							; Sólo utilizo (Puntero_provisional) en el 1er char.
	cp c
	jr nz,f3
	ld (Puntero_provisional),de



f3 jp b2

; ---------------------------------------------------------------------------------------------------------------------------------------------------------------

loop_mascara ld a,(de)
	and (hl)
	ld (hl),a
	ld a,c 										; (Cuad_objeto) en C. Si estamos en el 1er o 2º cuadrante, vamos a wb.
	cp 2
	jr z,wb
	jr c,wb 									
	ex af,af 									; Recupero Columns en A.
	push af
du inc de
	dec a
	jr nz,du 									; Movemos el puntero a la siguiente posición: (Puntero_mascara)-Columns.
	jr wi
wb ex af,af 									; Recupero Columns en A.
	push af
wh dec de 										; Estamos en el 1er o 2º cuadrante!!!!!!!!!!!!!!!!!!
	dec a 
	jr nz,wh
wi	pop af
	ex af,af 									; Vuelvo a guardar Columns en A´.
	ld a,c
	cp 2
	jr z,wa
	jr c,wa
	inc h
	jr wc
wa	dec h
wc	djnz loop_mascara
	jr wf

loop_datas ld a,(Ciclo_mascara)
	and a
	jr z,f8 									; Salimos del loop si aún no hemos pintado la máscara.

f9 ld a,(Obj_atras)
	and a
	jr z,x8

	ld a,(de)
	or (hl)
	ld (hl),a
	jr x9

x8 ld a,(de)
	xor (hl)
	ld (hl),a

x9	ld a,c 										; (Cuad_objeto) en C. Si estamos en el 3er o 4º cuadrante, vamos a wb.
	cp 2
	jr z,wx
	jr c,wx 	
	ex af,af 									; Recupero Columns en A.
	push af
w7 inc de
	dec a
	jr nz,w7 									; Movemos el puntero a la siguiente posición: (Puntero_mascara)-Columns.
	jr w6
wx	ex af,af 									; Recupero Columns en A.
	push af
w5 dec de
	dec a 
	jr nz,w5
w6 pop af
	ex af,af 									; Vuelvo a guardar Columns en A´.
	ld a,c
	cp 2
	jr z,wk
	jr c,wk
	inc h
	jr wj
wk	dec h
wj	djnz f9
f8 jr wf

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------

Almacena ex af,af				 				; Vamos a ALMACENAR. Determino tipo de loop en función del cuadrante en el que me encuentro.
	cp 2 										; Estamos en un cuadrante impar, (1º o 3º).
	jr z,loop
	jr c,loop
	jr loop5


Restaura ex af,af				 				; Vamos a RESTAURAR. Determino tipo de loop en función del cuadrante en el que me encuentro.
	cp 2 										; Estamos en un cuadrante impar, (1º o 3º).
	jr z,loop4
	jr c,loop4
	jr loop6

loop4 ex af,af
d5 ld a,(de) 									; Si el switch de control es "2", la rutina RESTAURA. En ese caso, saltamos a loop4. DE origen, (almacén) y HL destino, (pantalla). 
	ld (hl),a 									; loop4, Restauro 1 Char. en el 1er y 4º cuadrante.
	dec h 
	inc de
	djnz d5
	jr b2

loop ex af,af 
d2	ld a,(hl) 									; loop principal. Almaceno 1 Char. en el 1er y 2º cuadrante.
	ld (de),a
	dec h
	inc de
	djnz d2 
	jr b2

loop6 ex af,af 
d3	ld a,(de) 									; Si el switch de control es "2", la rutina RESTAURA. En ese caso, saltamos a loop4. DE origen, (almacén) y HL destino, (pantalla). 
	ld (hl),a 									; loop6, RESTAURA 1 Char. en el 2º y 4º cuadrante.
	inc h 
	inc de
	djnz d3
	jr b2

loop5 ex af,af 
d4	ld a,(hl) 									; loop 5. Almaceno 1 Char. en el 2º y 4º cuadrante.
	ld (de),a
	inc h
	inc de
	djnz d4 

b2 dec c 										; Hemos almacenado 1 char. Decrementa columnas, Si (Columnas)="0", vamos a [an].
	jr z,an
	exx 									
	ld a,d
	exx
	ld b,a 										; Recargo (Scanlines_objeto) en B y actualizo el puntero HL, para ello INC o DEC HL en función del cuadrante en el que nos encontremos.
	pop hl 										; Repetimos el loop con el siguiente cuadrante, tantas veces como (Columnas) tengamos.
	ld a,(Cuad_objeto)
	and 1
	jr z,ao
	dec hl
	jr dy
ao inc hl
; *****************************
dy ld a,(Switch) 								; 
	cp 1
	jr nz,dx
	push hl
	ld de,(Puntero_mascara)
	ex af,af 
	bit 0,a
	jr z,dz
	dec de 										; Estamos en el 1er o 3er cuadrante; por lo tanto, dec DE.
	ld (Puntero_mascara),de
	jr f0
dz inc de 										; Estamos en el 2º o 4º cuadrante; por lo tanto, inc DE.
	ld (Puntero_mascara),de
f0 jp f6
dx jp ap

; ---------------------------------------------------------------------------------------------------------------------------------------------------------------
an pop hl 									 	; -para igualar push-
	exx 										; Hemos completado una Fila. Si no hay más Filas, call store_attr. ( Para continuar con (Scanlines_objeto)+1 o almacenar atributos ).
	ld a,b
	and a
	jr z,store_attr 						
	ex af,af
	cp 2
	call z,at
	call c,at
	call b3
	push bc
	push hl
	dec b 
	ld d,8 										; D ahora contendrá "8" en lugar de (Scanlines_objeto). Así volveré a usar la primera parte de la rutina para dibujar todas las filas_
	exx 										; _ sin modificar nada.
	pop hl
	pop bc
	ld b,8 										; No estamos pintando Scanlines sueltos, sino caracteres completos. B contendrá "8" cada vez que pintemos un char.
; *****************************
i0	ld a,(Switch)
	cp 1
	jr nz,f2
	ld de,(Puntero_provisional)
	ld (Puntero_mascara),de
	push hl
	ld a,(Cuad_objeto)
	jp f6
f2	jp ap

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------

store_attr ld a,e 								; Hemos completado todas las filas. Comprobamos si tenemos que imprimir (Scanlines_objeto)+1. Si no es así, saltamos a [as] para_ 
	and a 										; _ ALMACENAR/RESTAURAR los atributos.
	jr z,as 							
	ex af,af
	cp 2
	call z,at
	call c,at
	call b3
	ld d,e 										; D ahora contendrá (Scanlines_objeto)+1 en lugar de "8". Así volveré a usar la primera parte de la rutina para dibujar_
	ld a,d 										; _ los scanlines finales sin modificar nada.
	push BC
	push hl
	ld e,0 										; Cuando la sutina almacene o restaure (Scanlines_objeto)+1, E = "0" indica que hay que saltar a [as] para ALMACENAR/RESTAURAR los_ 
	exx 										; _ atributos, pués hemos terminado con los tres bloques de impresión.
	pop hl
	pop bc
	ld b,a
	ld a,(Switch)
	and a
	jr nz,i0
	jp ap

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;	as
;
;	Almacena/Restaura los atributos del fondo de pantalla.

as ld a,(Ciclo_mascara) 	 					; Si he terminado de pintar la máscara, salgo. La máscara NO TIENE ATTR. 					
	and a
	jr nz,f4
	ld a,(Switch)
	cp 1
	jr nz,f4
	ld a,(Mask)
	and a
	jr z,f4
	ld de,(Puntero_datas)
	ld (Puntero_mascara),de
	ld a,1
	ld (Ciclo_mascara),a 						; Indicamos a [nucleo] que hemos terminado de pintar la máscara.
	jp nucleo
f4 exx
	push de
	call abastecimiento 						; Vuelvo a cargar las variables necesarias en los distintos registros.
	call calcula_tercio 						; Me interesa: HL como puntero de pantalla y DE como puntero de Almacén.



;´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´



	add a,$58 									; B contendra el nº de filas, para ello sumaré a (Scanlines_objeto), (que tendrá valor "1"), el valor de (Filas_objeto) + ["0" o "1"] de (Scanlines_objeto)+1.
	ld h,a 										; Ahora el puntero HL apunta a los attr. de pantalla.
	ld a,d
	and a
	jr z,av
	ld d,1
av ld a,e
	and a	
	jr z,ar
	ld e,1
ar ld a,b
	add d
	add e
	ld b,a
    pop de 
b0 push hl 								
az	ld a,(Switch) 							
	and a
	jr z,loop2
	cp 1
	jr nz,loop3
	ld a,(Atributos_Sprite) 					; Llegados a este punto, consultamos la variable (Atributos_Sprite). Si su valor es "1", pintaremos los colores de nuestro sprite.
	and a 										; _ Si su valor es "0", el sprite adoptará los attr. del fondo de pantalla o de otro objeto que tenga debajo.
	jp z, final
	jr i1
	jp final
i1 ld de,(Puntero_attr_datas)

; Esta parte de código se encarga de pintar los atributos de color de una entidad que no dispone de máscara, (se pinta mediante una función XOR).
; El color de fondo del objeto será siempre igual al del fondo de pantalla.

	ld a,(Mask)
	and a
	jr nz,loop3
	push bc
	ld a,(hl)
	push af
	and 7
	ld b,a
	pop af
	xor b
	ld b,a
	ld a,(de)
	or b
	ld (hl),a
	pop bc
	inc de
	jr aw

; ((( )))	

loop3 ld a,(de) 								; Si el switch de control es "2", la rutina RESTAURA. En ese caso, saltamos a loop3. DE origen, (almacén) y HL destino, (pantalla). 
	ld (hl),a
	inc de
	jr aw
loop2 ld a,(hl) 								; Si el switch de control es "0", la rutina ALMACENA. En ese caso, saltamos a loop2. HL origen, (pantalla) y DE destino, (almacén). 
	ld (de),a
	inc de
aw dec c
	jr z,ax
	ld a,(Cuad_objeto) 							; INC/DEC HL en función del cuadrante en el que nos encontremos.
	and 1
	jr z,ay
	dec hl
	jr az
ay inc hl
	jr az
ax	dec b 										; Salimos de [as] cuando hemos completado todas las columnas de todas las líneas a restaurar.
	jr z,final
	pop hl
	push bc
	ld bc,32 									; Cuando hemos completado todas las columnas de una fila, situamos el puntero HL en la línea superior. Recuerdo que con los attr. no hay que corregir el error_
	ex af,af
	cp 2
	jr z,bp
	jr c,bp
	ex af,af
	and a 
	adc hl,bc
	jr bq
bp ex af,af
	and a 										; _ en el puntero H, cuando se produce cambio en el tercio de pantalla.
	sbc hl,bc
bq	pop bc
	exx
	ld a,c
	exx
	ld c,a
	jr b0
final pop hl
	ld a,(Switch)
	cp 1
	jr nz,wn
	xor a
	ld (Ciclo_mascara),a
	ld de,ix
	ld (Puntero_mascara),de
wn ret

; -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; 	Subrutina at.
;
; 	Sitúa el puntero de pantalla, HL en la fila superior. 

at ex af,af
	push bc 									
	ld a,$1f 								; Si estamos en la primera línea del 2º o 1er tercio de pantalla, hay que hacer corrección en H antes de restar $20. (ld h,$48).
	cp l
	jr c,c5
	call calcula_tercio
	cp 2
	jr z,e4
	ld h,$48
	jr c5
e4 ld h,$50
c5 ld bc,$20
	and a 									; Carry "off".
	sbc hl,bc 								; Situamos el puntero HL´ en la fila superior.
	pop bc
	call calcula_tercio 					; Si estamos en el 1er tercio de pantalla: H apuntará siempre al último scanline del char., ($47)
	and a 									; Si estamos en el 2º tercio de pantalla: H apuntará siempre al último scanline del char., ($4f)
	jr z,aq
	cp 1
	jr nz,e5
	ld h,$4f
	jr au
e5	ld h,$57
	jr au
aq ld h,$47
au ex af,af
	and a 									; Carry "off". De esta manera no vuelvo a entrar en la rutina si estoy en el 2º cuadrante.
	ret

; -------------------------------------------------------------------------------------------------------------------------------------------------------------------
; 	Subrutina b3
;
; 	Sitúa el puntero de pantalla, HL en la fila inferior. 

b3 cp 2
	jr z,bi
	jr c,bi
	ex af,af
	push bc 									
	ld a,$df 								; Si estamos en la última línea del 2º tercio de pantalla hay que hacer corrección en H antes de sumar $20. (ld h,$4f).
	cp l
	jr nc,bg
	call calcula_tercio
	and a
	jr z,e8
	ld h,$4f
	jr bg
e8 ld h,$47	
bg ld bc,$20
	and a 									; Carry "off".
	adc hl,bc 								; Situamos el puntero HL´ en la fila inferior.
	pop bc
	call calcula_tercio 					; Si estamos en el 1er tercio de pantalla: H apuntará siempre al 1er scanline del char., ($48).
	and a 									; Si estamos en el 3er tercio de pantalla: H apuntará siempre al 1er scanline del char., ($50).
	jr z,e7
	cp 1
	jr nz,bh
	ld h,$48
	jr bi
bh ld h,$50
	jr bi
e7 ld h,$40
bi ret

; -------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Subrutina abastecimiento.
;
; Carga los registros con las variables necesarias para que la rutina [NUCLEO] pueda ALMACENAR y RESTAURAR.
;
;	HL - HL´ ..... Puntero de pantalla.
;	DE - DE´ ..... (Scanlines_objeto) en "D" y (Scanlines_objeto)+1 en "E".
;	BC - BC´ ..... Variables (Filas_objeto) y (Columnas) respectivamente.
;	

abastecimiento ld hl,Columnas				; Preparo registros: HL puntero de pantalla. (Datos a almacenar).
	ld c,(HL)	 							; C y C´ (Columnas). E y E´ (Scanlines_objeto)+1. D y D´ (Scanlines_objeto). B y B´ (Filas_objeto).
	dec hl 									; DE actuará como puntero de Almacen, (donde almacenaremos el fondo de pantalla que hay debajo del Sprite).
	ld e,(HL)
	dec hl
	ld d,(hl)
	dec hl
	ld b,(hl)
	ld hl,(Posicion_actual)
	push hl
	push bc
	push de
	exx
	pop de
	pop bc
	pop hl
	exx
	ret

; ******************************************* Indica el tercio de pantalla en el que nos encontramos según el valor del registro H ********************************************************
; 
;	NOTA: Entrega "0", "1" o "2" en A en función del tercio en el que nos encontremos.
;
; *****************************************************************************************************************************************************************************************

calcula_tercio ld a,h 									 ; Obtengo la dirección de mem. de attr. de pantalla del char. donde me encuentro, (último. ARRIBA-DERECHA).
	and $18
	sra a
	sra a
	sra a
	ret

; ******************************************************************************************************************************************************************************************
;
; Pinta una screen$ con los db, (bytes) proporcionados por el prograna SEVENUP, (modo SPRITE). Primero datos y después attr.
;
; INPUT:  El registro HL apuntará a la dirección de memoria donde se encuentra almacenado el 1er byte de la SCREEN a imprimir.
;
; NOTA: QUEDAN DESTRUIDOS DE y BC!!!!!!!!!!!!!!!
;
; ******************************************************************************************************************************************************************************************


Pinta_fondo ld hl,SCREEN								; HL apunta a los bytes de memoria de pantalla y attr. ($8815 2º tercio, $9015 3e tercio).
	exx 
	ld de,$4000											; Puntero de fila, (en char$).
	ld bc,$0803											; B actúa como contador de fila, (8 filas por cada uno de los tres tercios de pantalla). C actúa como contador de tercio de pantalla.
a6	push de
	exx
	ld a,8 												; Contador de scanlines, (8 x fila).
	pop de
a5	push de
	ld bc,32
	ldir
	pop de
	inc d
	dec a
	jr nz,a5 
	exx
	ld a,e
	add $20
	ld e,a
	djnz a6 											; Descontamos fila.
	ld b,$08
	dec c 												; Descontamos tercio.
	jr z,imprime_attr
	ld a,d
	add $08
	ld d,a
	jr a6
imprime_attr exx 
	ld de,$5800
	ld bc,768
	ldir
	xor a												; Seleccionamos el color del borde de pantalla. (0 a 7). 
	out($fe),a
	ld (23624),a 										; Almacenamos el nuevo valor en la dirección de memoria $5c48, variable del sistema BORDCR. Con esto la modificación del color  del borde, será permanente.
	ret

; *********************************** Limpia la pantalla, CLEAR SCREEN ****************************************************************
;
; NOTA: QUEDAN DESTRUIDOS HL,BC Y DE!!!!!!!!!!!!!!!
;
; *************************************************************************************************************************************
;	COLORES: 0 ..... NEGRO
;    		 1 ..... AZUL
; 			 2 ..... ROJO
;			 3 ..... MAGENTA
; 			 4 ..... VERDE
; 			 5 ..... CIAN
;			 6 ..... AMARILLO
; 			 7 ..... BLANCO

CLS LD HL,$4000											; HL => Comienzo de pantalla.
	LD DE,$4001
	LD BC,6143											; Tamaño de la pantalla, $17ff
	XOR A		           								; Ponemos a "0" todos los pixels de la pantalla.
	LD (HL),A
	LDIR
	LD HL,$5800									
	LD DE,$5801									
	LD BC,768
	LD (HL),0						 					; Atributos de pantalla
	LDIR
	xor a												; Seleccionamos el color del borde de pantalla. (0 a 7). 
	out($fe),a
	ld (23624),a 										; Almacenamos el nuevo valor en la dirección de memoria $5c48, variable del sistema BORDCR. Con esto la modificación del color  del borde, será permanente.
	ret

; **************************************************************************************************************************************	

Pinta_linea ld hl,$47e0
	ld de,$4fe0
	ld bc,$4f60
	exx
	ld b,$1f
	exx
mumu ld a,$ff
xuxu ld (hl),a
	ld (de),a
	ld (bc),a
	inc hl
	inc de
	inc bc
	exx 
	djnz ruru
	exx
	ret
ruru exx 
	jr xuxu

; ******************************************************************************************************************************************************************************************
;
;	Mov_down
;
; 	Mueve el Sprite hacia abajo.
;
;

Mov_down ld hl,(Posicion_actual)	
	call calcula_tercio 								; Averiguamos el tercio de pantalla en el que nos encontramos.
	and a
	jr z,z000
	bit 0,a
	jr nz,z001
	ld a,$58 											; Averiguamos si hay cambio de línea independientemente del tercio en el que nos encontremos.
	jr l5
z001 ld a,$50
	jr l5
z000 ld a,$48 											; Nos encontramos en el 1er tercio de pantalla.
l5	ld b,a
	sub 8
	ld c,a
	ld a,b

z003 inc h 												; Desplazamos una línea abajo (1 px). o variosssssssssss!!!!!!!!!!!!!!!!!!!!!

	cp h 												
	jr z,linea_abajo 									; Si estamos en el límite o lo hemos sobrepasado, bajamos línea.
	jr c,linea_abajo
z005 ld (Posicion_actual),hl
	ret
linea_abajo ld a,$e0 									; Estoy en la última línea del 1er o 2º tercio de pantalla???. Si es así jr z004
	cp l
	jr z,z004
	jr c,z004
	ld a,h 												; Calculamos en que scanline de la siguiente línea, (de abajo) vamos a situarnos. (Esto depende_
	sub b 												; _de la velocidad del desplazamiento o nº de pixel que nos movemos).
	add c
	ld h,a 												
l2	push bc 											; Nos situamos en la siguiente fila de abajo, (L+32).
	ld bc,32
	and a
	adc hl,bc
	pop bc
	jr z005
z004 ld a,h
	cp $58
	jr z,almudena
	jr nc,almudena 
	ld a,h
	sub b 
	ld b,a
	call calcula_tercio
	bit 0,a
	jr z,l3
	ld a,$48 											; A 1ª línea del segundo tercio de pantalla.
	add b
	ld h,a 
	ld a,l
	add 32
	ld l,a
	jr z005
l3 	ld a,$50 											; A 1ª línea del segundo tercio de pantalla.
	add b
	ld h,a 
	ld a,l
	add 32
	ld l,a
	jr z005
almudena ld h,$57
	ld a,(Indicador_movimiento)
	res 3,a
	set 2,a
	ld (Indicador_movimiento),a
	jr z005
;	ld hl,(Posicion_inicio)
;	dec hl
;	ld (Posicion_inicio),hl
;	ld h,0
;	ld l,h
;	jr z005

; ******************************************************************************************************************************************************************************************
;
;	Mov_up
;
; 	Mueve el Sprite hacia arriba
;
;

Mov_up ld hl,(Posicion_actual)	
	call calcula_tercio 								; Averiguamos el tercio de pantalla en el que nos encontramos.
	cp 2
	jr z,y000 											; Si estamos en el 3er tercio de pantalla, saltamos a y000.
	bit 0,a
	jr nz,y002 											; Si estamos en el 2º tercio de pantalla, saltamos a y002.
	ld a,$40 											; Nos encontramos en el 1er terdcio de pantalla. 
	jr ff0
y002 ld a,$48
	jr ff0
y000 ld a,$50 											; Nos encontramos en el 1er tercio de pantalla.
ff0	ld b,a
	add 7
	ld c,a
	ld a,b

y001 dec h 												; Nos desplazamos una línea hacia arriba.

	cp h 												
	jr z,y003		 									; Si estamos en el límite o lo hemos sobrepasado, bajamos línea.
	jr nc,linea_arriba
y003 ld (Posicion_actual),hl
	ret
linea_arriba ld a,$1f 											; Estoy en la última línea del 1er o 2º tercio de pantalla???. Si es así jr z004
	cp l
	jr z,y004
	jr nc,y004
	inc h
	ld a,b 												; Calculamos en que scanline de la siguiente línea, (de abajo) vamos a situarnos. (Esto depende_
	sub h 												; _de la velocidad del desplazamiento o nº de pixel que nos movemos).
	ld b,a
	ld a,c
	sub b
	ld h,a 												
ff1	push bc 											; Nos situamos en la siguiente fila de abajo, (L+32).
	ld bc,32
	and a
	sbc hl,bc
	pop bc
	jr y003
y004 ld a,h
	cp $40
	jr z,charito
	jr c,charito 
	inc h
	ld a,b
	sub h
	ld b,a
	dec h
	call calcula_tercio
	bit 0,a
	jr z,ff2
	ld a,$4f 											
	sub b
	ld h,a 
	ld a,l
	sub 32
	ld l,a
	jr y003
ff2 inc h
	ld a,$47 											; A 1ª línea del segundo tercio de pantalla.
	sub b
	ld h,a 
	ld a,l
	sub 32
	ld l,a
	jr y003
charito 
	ld h,$40
	ld a,(Indicador_movimiento)
	res 2,a
	set 3,a
	ld (Indicador_movimiento),a
	jr y003
; ******************************************************************************************************************************************************************************************
;
;	Mov_right
;
; 	Mueve el Sprite hacia la derecha
;

Mov_right ld hl,(Posicion_actual)
	ld a,l
	and $1f
	cp $1f
	jr z,humus
	inc hl
	ld (Posicion_actual),hl
	jr humoso
humus ld a,(Indicador_movimiento)
	res 0,a
	set 1,a
	ld (Indicador_movimiento),a
humoso ret

; ******************************************************************************************************************************************************************************************
;
;	Mov_left
;
; 	Mueve el Sprite hacia la izquierda
;
;

Mov_left ld hl,(Posicion_actual)
	ld a,l
	and $1f
	jr z,humis
	dec hl
	ld (Posicion_actual),hl
	jr humito
humis ld a,(Indicador_movimiento)
	res 1,a
	set 0,a
	ld (Indicador_movimiento),a
humito ret

; ******************************************************************************************************************************************************************************************
;
;	Muevete
;
; 	Mueve el Sprite al bamboleo
;
;	(Indicador_movimiento) db %00000001 						; %0000 arriba-abajo-izquierda-derecha

Muevete 
	ld a,(Contador_movimiento)
	ld b,0
	cp 4
	jr nz,xuminote
	xor a
xuminote ld c,a
	ld hl,Indicador_movimiento
	and a
	adc hl,bc

	ld a,(hl)


	call mueve_derecha
	call mueve_izquierda
	call mueve_abajo
	call mueve_arriba

	inc c
	ld a,c
	ld (Contador_movimiento),a

	ret


mueve_derecha ld a,(Indicador_movimiento) 
	bit 1,a
	call nz,Mov_right
	ret

mueve_izquierda	ld a,(Indicador_movimiento) 
	bit 0,a
	call nz,Mov_left
	ret

mueve_abajo ld a,(Indicador_movimiento) 
	bit 3,a
	call nz,Mov_down
	ret

mueve_arriba ld a,(Indicador_movimiento) 
	bit 2,a
	call nz,Mov_up
	ret















	SAVESNA "Draw_Engine.sna", START